{"pr_number": 905, "pr_title": "Provides a streamlined API to access 7-ZIP", "pr_createdAt": "2020-11-11T20:09:13Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/905", "timeline": [{"oid": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "url": "https://github.com/scireum/sirius-biz/commit/3e5b1af03429b2a3a41011097fc47d77f181cfee", "message": "Provides a streamlined API to access 7-ZIP along with a proper fallback to the Java API.\n\nUsing native code brings quite some risks with it as it might crash the JVM. Therefore\nthe bindings have to be enabled manually. Also, we always use the Java API to handle\nZIP files as this is faster (no disk buffer required) and safer - 7-ZIP has quite some\nbugs when decoding paths in ZIP files created by Microsoft Windows", "committedDate": "2020-11-11T20:08:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMDk4MA==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521610980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Thereore enabling\n          \n          \n            \n             * this is only advised on clusters which have dedicated worker servers.\n          \n          \n            \n             * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n          \n          \n            \n             * this is only advised on clusters which have dedicated worker servers.", "author": "jakobvogel", "createdAt": "2020-11-11T20:11:45Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Thereore enabling\n+ * this is only advised on clusters which have dedicated worker servers.", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMjAxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521612015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                      .withSystemErrorMessage(\"Failed to inizialize 7-Zip: %s (%s)\")\n          \n          \n            \n                                      .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")", "author": "jakobvogel", "createdAt": "2020-11-11T20:13:51Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Thereore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to inizialize 7-Zip: %s (%s)\")", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMzI2Mw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521613263", "bodyText": "Is XIterates deliberately chosen to mark extraction?", "author": "jakobvogel", "createdAt": "2020-11-11T20:16:25Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Thereore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to inizialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {\n+                extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            } else {\n+                extract7z(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            }\n+        } catch (Exception e) {\n+            throw Exceptions.handle()\n+                            .error(e)\n+                            .withSystemErrorMessage(\"An error occurred while unzipping an archive (%s): %s (%s)\",\n+                                                    filename)\n+                            .handle();\n+        }\n+    }\n+\n+    private Predicate<String> enhanceFileFilter(@Nullable Predicate<String> filter) {\n+        if (filter != null) {\n+            return filter.and(this::ignoreHiddenFiles);\n+        } else {\n+            return this::ignoreHiddenFiles;\n+        }\n+    }\n+\n+    private boolean ignoreHiddenFiles(String path) {\n+        String filename = Files.getFilenameAndExtension(path);\n+        return !filename.startsWith(\".\") && !filename.startsWith(\"__MACOSX\");\n+    }\n+\n+    private void extractZIP(File archiveFile,\n+                            Predicate<String> filter,\n+                            Processor<ExtractedFile, Boolean> extractedFileConsumer) throws Exception {\n+        try (ZipFile zipFile = new ZipFile(archiveFile)) {\n+            extractZIPEntriesFromZipFile(filter, extractedFileConsumer, zipFile);\n+        } catch (ZipException zipException) {\n+            // This is most probably an error indicating an inconsistent ZIP archive. We therefore directly throw\n+            // a handled exception to avoid jamming the syslog...\n+            throw Exceptions.createHandled()\n+                            .error(zipException)\n+                            .withSystemErrorMessage(\"Failed to unzip the given archive: %s (%s)\")\n+                            .handle();\n+        }\n+    }\n+\n+    private void extractZIPEntriesFromZipFile(Predicate<String> filter,\n+                                              Processor<ExtractedFile, Boolean> extractedFileConsumer,\n+                                              ZipFile zipFile) throws Exception {\n+        Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+        int numberOfFiles = 0;\n+        while (entries.hasMoreElements()) {\n+            ZipEntry entry = entries.nextElement();\n+            numberOfFiles++;\n+\n+            if (filter.test(entry.getName())) {\n+                Amount progress = Amount.of(numberOfFiles).divideBy(Amount.of(zipFile.size()));\n+                boolean shouldContinue = extractedFileConsumer.apply(new ExtractedZipFile(entry,\n+                                                                                          zipFile.getInputStream(entry),\n+                                                                                          progress));\n+                if (!shouldContinue) {\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void extract7z(File archiveFile,\n+                           Predicate<String> filter,\n+                           Processor<ExtractedFile, Boolean> extractedFileConsumer) throws Exception {\n+        try (RandomAccessFile randomAccessFile = new RandomAccessFile(archiveFile, \"r\")) {\n+            RandomAccessFileInStream inputStream = new RandomAccessFileInStream(randomAccessFile);\n+            try (IInArchive archive = SevenZip.openInArchive(null, inputStream)) {\n+                archive.extract(null, false, new SevenZipAdapter(archive, filter, extractedFileConsumer));\n+            } catch (SevenZipException sevenZipException) {\n+                // This is most probably an error indicating an inconsistent archive. We therefore directly throw\n+                // a handled exception to avoid jamming the syslog...\n+                throw Exceptions.createHandled()\n+                                .error(sevenZipException)\n+                                .withSystemErrorMessage(\"7-ZIP failed (the archive is probably corrupted): %s (%s)\")\n+                                .handle();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * XIterates over all items of an archive file.", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNDIxNw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521614217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the ration between the number of processed files and the total number of files in the archive\n          \n          \n            \n                 * @return the ratio between the number of processed files and the total number of files in the archive", "author": "jakobvogel", "createdAt": "2020-11-11T20:18:13Z", "path": "src/main/java/sirius/biz/util/ExtractedFile.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import sirius.kernel.commons.Amount;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.time.LocalDateTime;\n+\n+/**\n+ * Represents a file which has been extraced from an archive by the {@link ArchiveExtractor}.\n+ */\n+public interface ExtractedFile {\n+\n+    /**\n+     * Creates an input stream to actually read the file.\n+     *\n+     * @return an input stream reading from the extracted file\n+     * @throws IOException in case of an IO error\n+     */\n+    InputStream openInputStream() throws IOException;\n+\n+    /**\n+     * Returns the uncompressed size of the file.\n+     *\n+     * @return the uncompressed size of the extracted file\n+     */\n+    long size();\n+\n+    /**\n+     * Returns the last modification timestamp of the file.\n+     *\n+     * @return the timestamp when the file was last modified\n+     */\n+    LocalDateTime lastModified();\n+\n+    /**\n+     * Returns the path of the file.\n+     *\n+     * @return the path as indicated by the archive\n+     */\n+    String getFilePath();\n+\n+    /**\n+     * Returns the progress in percent based on the number of files processed.\n+     *\n+     * @return the ration between the number of processed files and the total number of files in the archive", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNDgyMw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521614823", "bodyText": "The name implies a factor of 100 (percent), the description of the returned value a simple ratio, i.e. between 0 and 1. Clarify?", "author": "jakobvogel", "createdAt": "2020-11-11T20:19:21Z", "path": "src/main/java/sirius/biz/util/ExtractedFile.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import sirius.kernel.commons.Amount;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.time.LocalDateTime;\n+\n+/**\n+ * Represents a file which has been extraced from an archive by the {@link ArchiveExtractor}.\n+ */\n+public interface ExtractedFile {\n+\n+    /**\n+     * Creates an input stream to actually read the file.\n+     *\n+     * @return an input stream reading from the extracted file\n+     * @throws IOException in case of an IO error\n+     */\n+    InputStream openInputStream() throws IOException;\n+\n+    /**\n+     * Returns the uncompressed size of the file.\n+     *\n+     * @return the uncompressed size of the extracted file\n+     */\n+    long size();\n+\n+    /**\n+     * Returns the last modification timestamp of the file.\n+     *\n+     * @return the timestamp when the file was last modified\n+     */\n+    LocalDateTime lastModified();\n+\n+    /**\n+     * Returns the path of the file.\n+     *\n+     * @return the path as indicated by the archive\n+     */\n+    String getFilePath();\n+\n+    /**\n+     * Returns the progress in percent based on the number of files processed.", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNTI3MQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521615271", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * are setup in each of the callbacks and processed later (mainly in {@link #setOperationResult(ExtractOperationResult)}.\n          \n          \n            \n             * are set up in each of the callbacks and processed later (mainly in {@link #setOperationResult(ExtractOperationResult)}.", "author": "jakobvogel", "createdAt": "2020-11-11T20:20:09Z", "path": "src/main/java/sirius/biz/util/SevenZipAdapter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ExtractAskMode;\n+import net.sf.sevenzipjbinding.ExtractOperationResult;\n+import net.sf.sevenzipjbinding.IArchiveExtractCallback;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.ISequentialOutStream;\n+import net.sf.sevenzipjbinding.PropID;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+import sirius.kernel.async.TaskContext;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Acts as a callback between the 7-ZIP binding and our API as defined by {@link ExtractedFile}.\n+ * <p>\n+ * Note that due to the <i>interesting</i> nature of the 7-ZIP API, this contains a whole of stateful variables which\n+ * are setup in each of the callbacks and processed later (mainly in {@link #setOperationResult(ExtractOperationResult)}.", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNjA1MA==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521616050", "bodyText": "Probably this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                biz.seve-zip = false\n          \n          \n            \n                biz.seven-zip = false", "author": "jakobvogel", "createdAt": "2020-11-11T20:21:46Z", "path": "src/main/resources/component-biz.conf", "diffHunk": "@@ -64,6 +64,9 @@ sirius.frameworks {\n     # metadata repository.\n     biz.storage-replication-mongo = false\n \n+    # Determines if the 7-ZIP native bindings will be enabled or not.\n+    biz.seve-zip = false", "originalCommit": "3e5b1af03429b2a3a41011097fc47d77f181cfee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07f997165d453ece60a0b9ae7159d0fddd6ca076", "url": "https://github.com/scireum/sirius-biz/commit/07f997165d453ece60a0b9ae7159d0fddd6ca076", "message": "Apply suggestions from code review\n\nCo-authored-by: Jakob Vogel <jvo@scireum.de>", "committedDate": "2020-11-11T20:26:41Z", "type": "commit"}, {"oid": "4e38b9a310d3e7c68eb02b7059e57324288650ba", "url": "https://github.com/scireum/sirius-biz/commit/4e38b9a310d3e7c68eb02b7059e57324288650ba", "message": "Improves some JavaDocs.", "committedDate": "2020-11-11T20:28:16Z", "type": "commit"}, {"oid": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "url": "https://github.com/scireum/sirius-biz/commit/4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "message": "Merge branch 'aha/archive-extractorz' of https://github.com/scireum/sirius-biz into aha/archive-extractorz", "committedDate": "2020-11-11T20:28:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5Mzk3NQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521893975", "bodyText": "Would also love some JavaDoc on public enum values", "author": "sabieber", "createdAt": "2020-11-12T07:41:52Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDEzOQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isZIPFile(@Nullable String fileExtension) {\n          \n          \n            \n                public boolean isZipFile(@Nullable String fileExtension) {", "author": "sabieber", "createdAt": "2020-11-12T07:42:07Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDMzOQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isZIPFile(Files.getFileExtension(filename))) {\n          \n          \n            \n                        if (isZipFile(Files.getFileExtension(filename))) {", "author": "sabieber", "createdAt": "2020-11-12T07:42:28Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDQ2OQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894469", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n          \n          \n            \n                            extractZip(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);", "author": "sabieber", "createdAt": "2020-11-12T07:42:41Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {\n+                extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDUzOQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void extractZIP(File archiveFile,\n          \n          \n            \n                private void extractZip(File archiveFile,", "author": "sabieber", "createdAt": "2020-11-12T07:42:53Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {\n+                extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            } else {\n+                extract7z(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            }\n+        } catch (Exception e) {\n+            throw Exceptions.handle()\n+                            .error(e)\n+                            .withSystemErrorMessage(\"An error occurred while unzipping an archive (%s): %s (%s)\",\n+                                                    filename)\n+                            .handle();\n+        }\n+    }\n+\n+    private Predicate<String> enhanceFileFilter(@Nullable Predicate<String> filter) {\n+        if (filter != null) {\n+            return filter.and(this::ignoreHiddenFiles);\n+        } else {\n+            return this::ignoreHiddenFiles;\n+        }\n+    }\n+\n+    private boolean ignoreHiddenFiles(String path) {\n+        String filename = Files.getFilenameAndExtension(path);\n+        return !filename.startsWith(\".\") && !filename.startsWith(\"__MACOSX\");\n+    }\n+\n+    private void extractZIP(File archiveFile,", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDYxNw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894617", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        extractZIPEntriesFromZipFile(filter, extractedFileConsumer, zipFile);\n          \n          \n            \n                        extractZipEntriesFromZipFile(filter, extractedFileConsumer, zipFile);", "author": "sabieber", "createdAt": "2020-11-12T07:43:03Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {\n+                extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            } else {\n+                extract7z(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            }\n+        } catch (Exception e) {\n+            throw Exceptions.handle()\n+                            .error(e)\n+                            .withSystemErrorMessage(\"An error occurred while unzipping an archive (%s): %s (%s)\",\n+                                                    filename)\n+                            .handle();\n+        }\n+    }\n+\n+    private Predicate<String> enhanceFileFilter(@Nullable Predicate<String> filter) {\n+        if (filter != null) {\n+            return filter.and(this::ignoreHiddenFiles);\n+        } else {\n+            return this::ignoreHiddenFiles;\n+        }\n+    }\n+\n+    private boolean ignoreHiddenFiles(String path) {\n+        String filename = Files.getFilenameAndExtension(path);\n+        return !filename.startsWith(\".\") && !filename.startsWith(\"__MACOSX\");\n+    }\n+\n+    private void extractZIP(File archiveFile,\n+                            Predicate<String> filter,\n+                            Processor<ExtractedFile, Boolean> extractedFileConsumer) throws Exception {\n+        try (ZipFile zipFile = new ZipFile(archiveFile)) {\n+            extractZIPEntriesFromZipFile(filter, extractedFileConsumer, zipFile);", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NDY2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521894667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void extractZIPEntriesFromZipFile(Predicate<String> filter,\n          \n          \n            \n                private void extractZipEntriesFromZipFile(Predicate<String> filter,", "author": "sabieber", "createdAt": "2020-11-12T07:43:12Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {\n+                extractZIP(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            } else {\n+                extract7z(archiveFile, enhanceFileFilter(filter), extractedFileConsumer);\n+            }\n+        } catch (Exception e) {\n+            throw Exceptions.handle()\n+                            .error(e)\n+                            .withSystemErrorMessage(\"An error occurred while unzipping an archive (%s): %s (%s)\",\n+                                                    filename)\n+                            .handle();\n+        }\n+    }\n+\n+    private Predicate<String> enhanceFileFilter(@Nullable Predicate<String> filter) {\n+        if (filter != null) {\n+            return filter.and(this::ignoreHiddenFiles);\n+        } else {\n+            return this::ignoreHiddenFiles;\n+        }\n+    }\n+\n+    private boolean ignoreHiddenFiles(String path) {\n+        String filename = Files.getFilenameAndExtension(path);\n+        return !filename.startsWith(\".\") && !filename.startsWith(\"__MACOSX\");\n+    }\n+\n+    private void extractZIP(File archiveFile,\n+                            Predicate<String> filter,\n+                            Processor<ExtractedFile, Boolean> extractedFileConsumer) throws Exception {\n+        try (ZipFile zipFile = new ZipFile(archiveFile)) {\n+            extractZIPEntriesFromZipFile(filter, extractedFileConsumer, zipFile);\n+        } catch (ZipException zipException) {\n+            // This is most probably an error indicating an inconsistent ZIP archive. We therefore directly throw\n+            // a handled exception to avoid jamming the syslog...\n+            throw Exceptions.createHandled()\n+                            .error(zipException)\n+                            .withSystemErrorMessage(\"Failed to unzip the given archive: %s (%s)\")\n+                            .handle();\n+        }\n+    }\n+\n+    private void extractZIPEntriesFromZipFile(Predicate<String> filter,", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTgxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521895815", "bodyText": "Is this a replacement for the ArchiveHelper class?", "author": "sabieber", "createdAt": "2020-11-12T07:45:39Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxNzM3OA==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521917378", "bodyText": "yes this will be deleted in a subsequent PR", "author": "andyHa", "createdAt": "2020-11-12T08:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTI2NA==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521895264", "bodyText": "Wouldn't it be better to pass the file extension as parameter and get the proper filename from the java.io File when needed?", "author": "mkeckmkeck", "createdAt": "2020-11-12T07:44:32Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxODMyMw==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521918323", "bodyText": "this is a temporary file and will most probably has a random filename", "author": "andyHa", "createdAt": "2020-11-12T08:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk3MQ==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521926971", "bodyText": "I added an appropriate comment in the JavaDoc. (One could argue that most probably the file extension would match, but this approach seems a bit cleaner.", "author": "andyHa", "createdAt": "2020-11-12T08:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NjQ4Ng==", "url": "https://github.com/scireum/sirius-biz/pull/905#discussion_r521896486", "bodyText": "ist't isZipFile our naming convention?", "author": "mkeckmkeck", "createdAt": "2020-11-12T07:47:02Z", "path": "src/main/java/sirius/biz/util/ArchiveExtractor.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import net.sf.sevenzipjbinding.ArchiveFormat;\n+import net.sf.sevenzipjbinding.IInArchive;\n+import net.sf.sevenzipjbinding.SevenZip;\n+import net.sf.sevenzipjbinding.SevenZipException;\n+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.commons.Amount;\n+import sirius.kernel.commons.Callback;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.commons.Processor;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Utility to handle and extract archive files.\n+ * <p>\n+ * If the framework <tt>biz.seven-zip</tt> is enabled, this will load the native 7-ZIP bindings and support a\n+ * multitude of file formats like <tt>7z, tar, rar etc.</tt> otherwise \"just\" ZIP files are supported.\n+ * <p>\n+ * Note that using native code always bears a certain risk as an error there crashed the whole JVM. Therefore enabling\n+ * this is only advised on clusters which have dedicated worker servers.\n+ * <p>\n+ * Also note that ZIP files are always processed using the Java APIs as this is way simpler to process (can be\n+ * done in memory without allocating large buffers or resorting to disk - therefore this is also faster (as disk\n+ * access is always slower than executing Java-Code). Also 7-ZIP has some severe bugs when handling paths in ZIP\n+ * files which were produced by Microsoft Windows.\n+ * <p>\n+ * Note that {@link #getSupportedFileExtensions()} honors the framework selection and always returns an appropriate\n+ * list.\n+ */\n+@Register(classes = ArchiveExtractor.class)\n+public class ArchiveExtractor {\n+\n+    private static final String FRAMEWORK_SEVEN_ZIP = \"biz.seven-zip\";\n+    private static final String ZIP_EXTENSION = \"zip\";\n+\n+    private Set<String> supportedExtensions;\n+    private Boolean sevenZipEnabled = null;\n+\n+    /**\n+     * Defines if and how existing files are overwritten.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum OverrideMode {\n+        ON_CHANGE, ALWAYS, NEVER;\n+\n+        @Override\n+        public String toString() {\n+            return NLS.get(getClass().getSimpleName() + \".\" + name());\n+        }\n+    }\n+\n+    /**\n+     * Defines the result of a file update operation.\n+     *\n+     * @see #updateFile(ExtractedFile, VirtualFile, OverrideMode)\n+     */\n+    public enum UpdateResult {\n+        CREATED, UPDATED, SKIPPED\n+    }\n+\n+    /**\n+     * Builds a set of supported file extensions that can be extracted, all lowercased.\n+     *\n+     * @return all supported file extensions that can be processed as archive.\n+     */\n+    public Set<String> getSupportedFileExtensions() {\n+        if (supportedExtensions == null) {\n+            if (isSevenZipEnabled()) {\n+                supportedExtensions = Arrays.stream(ArchiveFormat.values())\n+                                            .map(archiveFormat -> archiveFormat.getMethodName().toLowerCase())\n+                                            .collect(Collectors.toSet());\n+            } else {\n+                supportedExtensions = Collections.singleton(ZIP_EXTENSION);\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(supportedExtensions);\n+    }\n+\n+    private boolean isSevenZipEnabled() {\n+        if (sevenZipEnabled == null) {\n+            checkAndInitSevenZip();\n+        }\n+\n+        return sevenZipEnabled;\n+    }\n+\n+    @SuppressWarnings(\"java:S1181\")\n+    @Explain(\n+            \"We really want to catch Throwable here as we're calling native code and we want to simply suppress using 7-ZIP if any trouble occurs.\")\n+    private void checkAndInitSevenZip() {\n+        if (Sirius.isFrameworkEnabled(FRAMEWORK_SEVEN_ZIP)) {\n+            try {\n+                Log.SYSTEM.INFO(\"Loading 7-ZIP native libraries to support all breeds of archive formats...\");\n+                SevenZip.initSevenZipFromPlatformJAR();\n+                sevenZipEnabled = true;\n+            } catch (Throwable e) {\n+                Exceptions.handle()\n+                          .to(Log.SYSTEM)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Failed to initialize 7-Zip: %s (%s)\")\n+                          .handle();\n+                sevenZipEnabled = false;\n+            }\n+        } else {\n+            sevenZipEnabled = false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if the file extension is an archive which can be processed by this class.\n+     *\n+     * @param fileExtension the extension to check\n+     * @return <tt>true</tt> when this file is an archive, <tt>false</tt> otherwise\n+     */\n+    public boolean isArchiveFile(@Nullable String fileExtension) {\n+        return fileExtension != null && getSupportedFileExtensions().contains(fileExtension.toLowerCase());\n+    }\n+\n+    /**\n+     * Determines if the given archive is a ZIP file.\n+     *\n+     * @param fileExtension the file extension of the file to check\n+     * @return <tt>true</tt> if the given file is a ZIP file, <tt>false</tt> otherwise\n+     */\n+    public boolean isZIPFile(@Nullable String fileExtension) {\n+        return ZIP_EXTENSION.equalsIgnoreCase(fileExtension);\n+    }\n+\n+    /**\n+     * Iterates over the items of an archive file.\n+     *\n+     * @param filename              the filename of the archive to extract\n+     * @param archiveFile           the archive file to extract\n+     * @param filter                determines which files will be processed\n+     * @param extractedFileConsumer invoked for each extracted file. May return <tt>false</tt> to abort processing or\n+     *                              <tt>true</tt> to continue\n+     */\n+    public void extract(String filename,\n+                        File archiveFile,\n+                        @Nullable Predicate<String> filter,\n+                        Processor<ExtractedFile, Boolean> extractedFileConsumer) {\n+        try {\n+            if (isZIPFile(Files.getFileExtension(filename))) {", "originalCommit": "4f4129e7f0540c340b232c8349fbb01ec0ffe67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8ed093e8f29d287c88124789064a41c3fdeaddc", "url": "https://github.com/scireum/sirius-biz/commit/f8ed093e8f29d287c88124789064a41c3fdeaddc", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>", "committedDate": "2020-11-12T08:23:55Z", "type": "commit"}, {"oid": "9820c5e46e95e1a53e199bac29cfb9091d6e5f14", "url": "https://github.com/scireum/sirius-biz/commit/9820c5e46e95e1a53e199bac29cfb9091d6e5f14", "message": "Merge remote-tracking branch 'origin/master' into aha/archive-extractorz", "committedDate": "2020-11-12T08:24:21Z", "type": "commit"}, {"oid": "eca968ca0280ed1fc178bbbe7de0db22690f671d", "url": "https://github.com/scireum/sirius-biz/commit/eca968ca0280ed1fc178bbbe7de0db22690f671d", "message": "Uses the new constants as provided by sirius-db.", "committedDate": "2020-11-12T08:27:40Z", "type": "commit"}, {"oid": "96557fcdb69b7b6ca07725a427d0ced274d91952", "url": "https://github.com/scireum/sirius-biz/commit/96557fcdb69b7b6ca07725a427d0ced274d91952", "message": "Adds some JavaDocs for enums.", "committedDate": "2020-11-12T08:28:03Z", "type": "commit"}, {"oid": "92007ace7c1aae13e6020d8441ec58ff0cb2afb1", "url": "https://github.com/scireum/sirius-biz/commit/92007ace7c1aae13e6020d8441ec58ff0cb2afb1", "message": "Merge branch 'aha/archive-extractorz' of https://github.com/scireum/sirius-biz into aha/archive-extractorz", "committedDate": "2020-11-12T08:28:10Z", "type": "commit"}, {"oid": "ce7b1ef46866a663df7063033d7af4ae96e40887", "url": "https://github.com/scireum/sirius-biz/commit/ce7b1ef46866a663df7063033d7af4ae96e40887", "message": "Improves the documentation.", "committedDate": "2020-11-12T08:34:28Z", "type": "commit"}, {"oid": "90f7d808945fe2a0047d856ad1ba20055dcd3bec", "url": "https://github.com/scireum/sirius-biz/commit/90f7d808945fe2a0047d856ad1ba20055dcd3bec", "message": "Fixes a legacy template.", "committedDate": "2020-11-12T08:34:41Z", "type": "commit"}, {"oid": "0e7ad0011976354c703836de03b2dded7d653e76", "url": "https://github.com/scireum/sirius-biz/commit/0e7ad0011976354c703836de03b2dded7d653e76", "message": "Adds a sanity check.\n\nNormally if 7-ZIP support isn't enabled, no other than ZIP files\nshould be accepted in the first place. However, this method can still be called\nindependently. Therefore we perform this check again as we rather let ZIP fail\nfor an unknown file format than running into uninitialized native code which\nisn't meant to run in the first place.", "committedDate": "2020-11-12T11:04:30Z", "type": "commit"}]}