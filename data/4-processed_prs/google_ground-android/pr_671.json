{"pr_number": 671, "pr_title": "[Code health] Add annotations for observables", "pr_createdAt": "2020-12-23T21:41:55Z", "pr_url": "https://github.com/google/ground-android/pull/671", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNDc3OQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549734779", "bodyText": "typo s/and/any", "author": "scolsen", "createdAt": "2020-12-29T14:57:05Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjM4MA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736380", "bodyText": "Instead of \"multiple observers may subscribe to received and process the same events\"\nWhat do you think of the following:\n\"When multiple observers are subscribed to the stream, each observer receives the emitted events.\"", "author": "scolsen", "createdAt": "2020-12-29T15:01:48Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter\n+ * the stream, and the stream is suitable for multicasting (i.e., multiple observers may subscribe\n+ * to received and process the same events).", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjU5OQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736599", "bodyText": "Should these also typically be infinite? Should we note that?", "author": "scolsen", "createdAt": "2020-12-29T15:02:22Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/EventStream.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNjkyMw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549736923", "bodyText": "Maybe: \"...on subscribe(); new states are continually emitted until the subscription is disposed.\"", "author": "scolsen", "createdAt": "2020-12-29T15:03:21Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava or LiveData stream as emitting state. The latest state is immediately emitted to\n+ * new observers on subscribe(), with new states continuing to be emitted until the subscription is", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNzAwMQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549737001", "bodyText": "delete \"as\" before hot", "author": "scolsen", "createdAt": "2020-12-29T15:03:36Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/StateStream.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx;\n+\n+/**\n+ * Marks an RxJava or LiveData stream as emitting state. The latest state is immediately emitted to\n+ * new observers on subscribe(), with new states continuing to be emitted until the subscription is\n+ * disposed.\n+ *\n+ * <p>The stream is considered as \"hot\"; subscribing has no effect on state and the stream is", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNzQwMw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549737403", "bodyText": "s/observer/observers", "author": "scolsen", "createdAt": "2020-12-29T15:04:46Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczOTg3Nw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549739877", "bodyText": "How about:\n\"Cold observables start emitting items when observers subscribe. Each observer of a cold observable is guaranteed to receive all of that observable's emissions, regardless of when the observer subscribed.\"", "author": "scolsen", "createdAt": "2020-12-29T15:11:51Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to", "originalCommit": "c5228767b935151ef1a7d6bb15cfc422da19c75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MDc2Mg==", "url": "https://github.com/google/ground-android/pull/671#discussion_r553880762", "bodyText": "I think stating they won't miss items as a result of subscribing too late is more correct here; an observer might miss items if they dispose of the observable too early.", "author": "gino-m", "createdAt": "2021-01-08T11:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczOTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDc3Mw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549740773", "bodyText": "For the sake of simplification, think we can avoid this notion of \"producers\" altogether? Maybe:\n\"The sequence of items emitted by a cold observable is regenerated for each observer that subscribes to the observable. As such....\"", "author": "scolsen", "createdAt": "2020-12-29T15:14:20Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for", "originalCommit": "99334b4e21fd6db100db9faffa8e07198a20ac99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MzY4MQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r553883681", "bodyText": "They refer heavily to producers in the RxJava design doc. Nonetheless I tried but it's hard to describe accurately in other terms; \"is regenerated\" seems to imply that the observable is doing the work of generating results, which isn't the case. JavaDoc for Producer class states it: \"Provides a generic operation for producing an instance of a type.\", which also applies to our general concept of \"producer\" here.\nThat said, I agree the fewer technical terms we need to introduce here the better. Would you be willing to suggest some rewording in a follow-up PR?", "author": "gino-m", "createdAt": "2021-01-08T11:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTE5Nw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741197", "bodyText": "s/may turned/may be turned", "author": "scolsen", "createdAt": "2020-12-29T15:15:32Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>", "originalCommit": "99334b4e21fd6db100db9faffa8e07198a20ac99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTMzMA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741330", "bodyText": "hot -- link to the Hot annotation here?", "author": "scolsen", "createdAt": "2020-12-29T15:15:52Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>", "originalCommit": "99334b4e21fd6db100db9faffa8e07198a20ac99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NDc3MA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r553884770", "bodyText": "Actually removed this altogether; would prefer to find other solutions to share(), since it leads to \"warm\" observables that are hard to reason about in more complex systems, imo.", "author": "gino-m", "createdAt": "2021-01-08T11:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTYwMg==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741602", "bodyText": "Add a parenthetical: \"complete (stop emitting items)\"", "author": "scolsen", "createdAt": "2020-12-29T15:16:38Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before", "originalCommit": "99334b4e21fd6db100db9faffa8e07198a20ac99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NjA4Nw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r553886087", "bodyText": "\"Terminate\" implies more than that; it implies a terminal event is emitted (Completable.complete, Maybe.empty, etc.)", "author": "gino-m", "createdAt": "2021-01-08T11:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTg0NQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549741845", "bodyText": "How about:\n\"Infinite observables should never complete.\"", "author": "scolsen", "createdAt": "2020-12-29T15:17:15Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Cold.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"cold\". Cold observables create a new producer each time an observer\n+ * subscribes.\n+ *\n+ * <p>Cold observables start emitting items when observer subscribe, so observers are guaranteed to\n+ * see the whole sequence from the beginning.\n+ *\n+ * <p>Since a new producer is created on each subscription, the sequence of items is regenerated for\n+ * each observer. As such, cold observables are unsuitable for multicasting.\n+ *\n+ * <p>LiveData and Rx observables backed by cold observables are also cold. New cold Rx observables\n+ * may also be created by emitting results inside the class passed to the observable's <code>\n+ * create()</code> method.\n+ *\n+ * <p>Cold Rx observables may turned into hot connectable observers using their respective <code>\n+ * share()</code> methods.\n+ */\n+@Documented\n+@Target({\n+  ElementType.ANNOTATION_TYPE,\n+  ElementType.FIELD,\n+  ElementType.LOCAL_VARIABLE,\n+  ElementType.METHOD,\n+  ElementType.PARAMETER\n+})\n+public @interface Cold {\n+  /**\n+   * Finite observables are expected to complete at some point in the future, usually before\n+   * observers unsubscribe. Infinite observables are not expected to ever complete.", "originalCommit": "99334b4e21fd6db100db9faffa8e07198a20ac99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NTYzMw==", "url": "https://github.com/google/ground-android/pull/671#discussion_r553885633", "bodyText": "Replaced \"complete\" with \"terminate\" which is more general in Rx, and reworded.", "author": "gino-m", "createdAt": "2021-01-08T11:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODI2NQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758265", "bodyText": "s/the/they", "author": "scolsen", "createdAt": "2020-12-29T16:02:32Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODM4Mg==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758382", "bodyText": "s/note/not -- semicolon should be a comma", "author": "scolsen", "createdAt": "2020-12-29T16:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODQ5MA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758490", "bodyText": "s/all observers/subscribed observers", "author": "scolsen", "createdAt": "2020-12-29T16:03:17Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.\n+ *\n+ * <p>Since the producer generating results is shared among observers, hot observables are\n+ * considered to \"multicast\" the same set of items to all observers by default. For simplicity,", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODYyMQ==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758621", "bodyText": "s/multiple producers/multiple observers", "author": "scolsen", "createdAt": "2020-12-29T16:03:38Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/Hot.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an observable as \"hot\". Hot observables expose an existing producer to observers rather\n+ * than creating a new one for each observer.\n+ *\n+ * <p>Hot observables may start emitting items as soon as they're created. Observers only receive\n+ * items emitted after the subscribe; and items emitted before then are note received.\n+ *\n+ * <p>Since the producer generating results is shared among observers, hot observables are\n+ * considered to \"multicast\" the same set of items to all observers by default. For simplicity,\n+ * producers backing hot observables are assumed to always be capable of multicasting results to\n+ * multiple producers.", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1ODg0Mg==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549758842", "bodyText": "s/and/any", "author": "scolsen", "createdAt": "2020-12-29T16:04:17Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxEvents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Marks an RxJava stream as emitting events. Events are only emitted as they occur, and new\n+ * observers are not notified of emits which occurred before subscribe(). The stream continues to\n+ * emit new events until the observer unsubscribes.\n+ *\n+ * <p>These streams are considered \"hot\"; subscribing does not trigger and events or otherwise alter", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTA2OA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549759068", "bodyText": "s/indicated/indicates", "author": "scolsen", "createdAt": "2020-12-29T16:04:50Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxResult.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Indicates the result of an asynchronous operation modeled as a reactive stream. Specifically, it\n+ * indicated the result observable annotated is a cold, finite observable.", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTU2OA==", "url": "https://github.com/google/ground-android/pull/671#discussion_r549759568", "bodyText": "delete \"as\" before hot", "author": "scolsen", "createdAt": "2020-12-29T16:06:08Z", "path": "gnd/src/main/java/com/google/android/gnd/rx/annotations/RxState.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.rx.annotations;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Marks an RxJava2 observable as emitting state. The latest state is immediately emitted to new\n+ * observers on subscribe(), with new states continuing to be emitted until the subscription is\n+ * disposed.\n+ *\n+ * <p>The stream is considered as \"hot\"; subscribing has no effect on state and the stream is", "originalCommit": "860d724527631be0223e62d707349ab71b3ddc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dc5825a12054b2f46521db0ddf4d7981bb7a9f74", "url": "https://github.com/google/ground-android/commit/dc5825a12054b2f46521db0ddf4d7981bb7a9f74", "message": "Merge pull request #686 from shobhitagarwal1612/unused\n\n[lint] Remove unused drawables", "committedDate": "2021-01-03T17:46:45Z", "type": "forcePushed"}, {"oid": "0e4cdd6fe660ece99fb21fe4a6a4ea88fc5a5002", "url": "https://github.com/google/ground-android/commit/0e4cdd6fe660ece99fb21fe4a6a4ea88fc5a5002", "message": "Add annotations for observables", "committedDate": "2021-01-04T17:01:48Z", "type": "commit"}, {"oid": "5946052f2d8b410a0ffb20a3446633674e31117d", "url": "https://github.com/google/ground-android/commit/5946052f2d8b410a0ffb20a3446633674e31117d", "message": "Add observable annotations to RemoteDataStore", "committedDate": "2021-01-04T17:04:15Z", "type": "commit"}, {"oid": "7af45e20cf04fe7170e8adeba6113f26aa84d667", "url": "https://github.com/google/ground-android/commit/7af45e20cf04fe7170e8adeba6113f26aa84d667", "message": "Add observable annotations to FeatureRepository", "committedDate": "2021-01-04T17:26:25Z", "type": "commit"}, {"oid": "0baeb84778b955f9919bee34eef21aace0fa702f", "url": "https://github.com/google/ground-android/commit/0baeb84778b955f9919bee34eef21aace0fa702f", "message": "Merge branch 'master' of https://github.com/google/ground-android into stream-annotations", "committedDate": "2021-01-06T15:53:28Z", "type": "commit"}, {"oid": "8cf526954523622e876eeb913fbee6b14628f8e2", "url": "https://github.com/google/ground-android/commit/8cf526954523622e876eeb913fbee6b14628f8e2", "message": "Shorten annotation names", "committedDate": "2021-01-06T16:00:57Z", "type": "commit"}, {"oid": "1e0f86ec2153bb52b17f95db452aeae884dfbdeb", "url": "https://github.com/google/ground-android/commit/1e0f86ec2153bb52b17f95db452aeae884dfbdeb", "message": "Tweak JavaDoc", "committedDate": "2021-01-06T16:04:06Z", "type": "commit"}, {"oid": "c0cd3b900d54ed337f681ddb5663ce773cf20b1d", "url": "https://github.com/google/ground-android/commit/c0cd3b900d54ed337f681ddb5663ce773cf20b1d", "message": "Update annotation targets", "committedDate": "2021-01-06T16:51:49Z", "type": "commit"}, {"oid": "815b1aad5f20f8360505988eb19182b356790796", "url": "https://github.com/google/ground-android/commit/815b1aad5f20f8360505988eb19182b356790796", "message": "Reword JavaDoc", "committedDate": "2021-01-07T14:12:41Z", "type": "commit"}, {"oid": "630d383c251e9f4fdff9df24859d8a7ef5a710b2", "url": "https://github.com/google/ground-android/commit/630d383c251e9f4fdff9df24859d8a7ef5a710b2", "message": "Fix PMD errors", "committedDate": "2021-01-07T14:23:57Z", "type": "commit"}, {"oid": "38c97818ebffbbf1e85d8dba2d1c2ec90a797d16", "url": "https://github.com/google/ground-android/commit/38c97818ebffbbf1e85d8dba2d1c2ec90a797d16", "message": "Added recommended base types", "committedDate": "2021-01-07T14:57:26Z", "type": "commit"}, {"oid": "6ad440296c81bb08ab247aec4cf72cd51c6bb7c2", "url": "https://github.com/google/ground-android/commit/6ad440296c81bb08ab247aec4cf72cd51c6bb7c2", "message": "Fix annotation", "committedDate": "2021-01-07T16:41:45Z", "type": "commit"}, {"oid": "cd1550c7bdec1bf79954445f12a03cadddb8283d", "url": "https://github.com/google/ground-android/commit/cd1550c7bdec1bf79954445f12a03cadddb8283d", "message": "Fix annotation", "committedDate": "2021-01-07T16:42:02Z", "type": "commit"}, {"oid": "b177f8041f882ba903ce06a3e050778a3cd7e868", "url": "https://github.com/google/ground-android/commit/b177f8041f882ba903ce06a3e050778a3cd7e868", "message": "Split LazyOperation into two", "committedDate": "2021-01-07T17:02:54Z", "type": "commit"}, {"oid": "895b85fc23fe73eec30b1ff48c772411a44558e3", "url": "https://github.com/google/ground-android/commit/895b85fc23fe73eec30b1ff48c772411a44558e3", "message": "Simplify annotations", "committedDate": "2021-01-08T10:59:11Z", "type": "commit"}, {"oid": "28cfb3bd4e7f01eef69b3379fccd087f8ef85704", "url": "https://github.com/google/ground-android/commit/28cfb3bd4e7f01eef69b3379fccd087f8ef85704", "message": "Remove sentence", "committedDate": "2021-01-08T11:20:21Z", "type": "commit"}, {"oid": "40ecef9c1919d0211bf84fc0d615f837e419da87", "url": "https://github.com/google/ground-android/commit/40ecef9c1919d0211bf84fc0d615f837e419da87", "message": "Fix broken HTML", "committedDate": "2021-01-08T17:48:15Z", "type": "commit"}, {"oid": "be8e5f49099d344c71b70eef95577149ba88d51d", "url": "https://github.com/google/ground-android/commit/be8e5f49099d344c71b70eef95577149ba88d51d", "message": "Add \"memoized\" attribute to annotations", "committedDate": "2021-01-09T15:38:27Z", "type": "commit"}, {"oid": "dfbd070080af9de706341fc2ccaba6ad5acfcca1", "url": "https://github.com/google/ground-android/commit/dfbd070080af9de706341fc2ccaba6ad5acfcca1", "message": "Tweak JavaDoc", "committedDate": "2021-01-09T16:19:59Z", "type": "commit"}, {"oid": "3f8fdaea5a70237c3cbf017015a163b6d6f2fbd5", "url": "https://github.com/google/ground-android/commit/3f8fdaea5a70237c3cbf017015a163b6d6f2fbd5", "message": "Tweak JavaDoc", "committedDate": "2021-01-09T16:35:54Z", "type": "commit"}, {"oid": "5489fb03252d8cacf5cff0a0345c1dbb290155c7", "url": "https://github.com/google/ground-android/commit/5489fb03252d8cacf5cff0a0345c1dbb290155c7", "message": "Cold observables *may* have side effects", "committedDate": "2021-01-11T11:36:00Z", "type": "commit"}, {"oid": "e11b161380adf6d96c5b5a1d6bbcd4ab36bbb1b1", "url": "https://github.com/google/ground-android/commit/e11b161380adf6d96c5b5a1d6bbcd4ab36bbb1b1", "message": "Make annotations more self-documenting", "committedDate": "2021-01-11T12:09:20Z", "type": "commit"}, {"oid": "3f56927f6facef2bff22f441046e98bff74ddb69", "url": "https://github.com/google/ground-android/commit/3f56927f6facef2bff22f441046e98bff74ddb69", "message": "Correct stateful annotations", "committedDate": "2021-01-11T12:11:16Z", "type": "commit"}, {"oid": "8d06c8ca0b7d09d34dc2330a52af15771b4e3090", "url": "https://github.com/google/ground-android/commit/8d06c8ca0b7d09d34dc2330a52af15771b4e3090", "message": "Sort annotation flags", "committedDate": "2021-01-11T12:12:49Z", "type": "commit"}]}