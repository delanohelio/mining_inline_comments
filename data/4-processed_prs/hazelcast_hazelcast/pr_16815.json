{"pr_number": 16815, "pr_title": "Update README.md", "pr_createdAt": "2020-03-30T09:04:08Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16815", "timeline": [{"oid": "b417f915638902c259160bec4d16746f1fcbd57b", "url": "https://github.com/hazelcast/hazelcast/commit/b417f915638902c259160bec4d16746f1fcbd57b", "message": "Update README.md", "committedDate": "2020-03-30T09:03:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NjY4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400796683", "bodyText": "I would rename this section to something like \"Get help\" and mention the Gitter channel as well as Stackoverflow (maybe not necessary)", "author": "Holmistr", "createdAt": "2020-03-31T10:12:29Z", "path": "README.md", "diffHunk": "@@ -104,29 +173,17 @@ mvn clean validate -P checkstyle\n mvn clean compile -P spotbugs\n ```\n \n-### Contributing to Hazelcast\n-\n-We encourage Pull Requests and process them promptly.\n-\n-To contribute:\n-\n-* see [Developing with Git](https://hazelcast.atlassian.net/wiki/display/COM/Developing+with+Git) for our Git process\n-* complete the [Hazelcast Contributor Agreement](https://hazelcast.atlassian.net/wiki/display/COM/Hazelcast+Contributor+Agreement)\n-\n-For an enhancement or larger feature, create a GitHub issue first to discuss.\n-\n-\n-### Mail Group\n+## Mail Group", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NzE0Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400797147", "bodyText": "And I would move the sections about contributing and this get help close together, because it is usually related.", "author": "Holmistr", "createdAt": "2020-03-31T10:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NjY4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNzQzNw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400807437", "bodyText": "... data from/to ...", "author": "Serdaro", "createdAt": "2020-03-31T10:30:39Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`\n+* Primitives for distributed computing such as `AtomicLong`,\n+`AtomicReference` `CountDownLatch`\n+\n+Hazelcast data-structures are in-memory, highly optimized and offer very\n+low latencies. For a single `get` or `put` operation on a `IMap`, you\n+can typically expect a round-trip-time of under _100 microseconds_.\n+\n+It's very simple to form a cluster with Hazelcast, you can easily do it\n+on your computer by just starting several instances. The instances will\n+discover each other and form a cluster. There aren't any dependencies on\n+any external systems.\n+\n+Hazelcast automatically replicates data across the cluster and you are\n+able to seamlessly tolerate failures and add additional capacity to\n+the cluster when needed.\n+\n+Hazelcast comes with clients in the following programming languages:\n+\n+* [Java](https://github.com/hazelcast/hazelcast)\n+* [.NET](https://github.com/hazelcast/hazelcast-csharp-client)\n+* [Python](https://github.com/hazelcast/hazelcast-python-client)\n+* [C++](https://github.com/hazelcast/hazelcast-cpp-client)\n+* [Node.js](https://github.com/hazelcast/hazelcast-nodejs-client)\n+* [Go](https://github.com/hazelcast/hazelcast-go-client)\n+\n+Hazelcast also has first-class support for running on different\n+cloud providers such as [AWS](https://github.com/hazelcast/hazelcast-aws), \n+[GCP](https://github.com/hazelcast/hazelcast-gcp) \n+and [Azure](https://github.com/hazelcast/hazelcast-azure)\n+as well as on [Kubernetes](https://github.com/hazelcast/hazelcast-kubernetes).\n+\n+## Download\n+\n+You can download Hazelcast from\n+[www.hazelcast.org](http://hazelcast.org/download/). Once you have\n+downloaded, you can start the Hazelcast instance using the script\n+`bin/start.sh`. \n+\n+## Get Started\n+\n+Hazelcast allows you to interact with a cluster using a simple \n+API, for example you can use the Hazelcast Java Client to connect\n+to a running cluster and perform operations on it:\n+\n+```java\n+HazelcastInstance hz = HazelcastClient.newHazelcastClient();\n+IMap<String, String> map = hz.getMap(\"my-distributed-map\");\n+map.put(\"key\", \"value\");\n+String current = map.get(\"key\");\n+map.putIfAbsent(\"somekey\", \"somevalue\");\n+map.replace(\"key\", \"value\", \"newvalue\");\n+```\n \n-With its various distributed data structures, distributed caching capabilities, elastic nature, memcache support,\n-integration with Spring and Hibernate and more importantly with so many happy users, Hazelcast is feature-rich,\n-enterprise-ready and developer-friendly in-memory data grid solution.\n+You only need to add a single JAR as a dependency:\n \n-### Features:\n+````xml\n+<dependency>\n+    <groupId>com.hazelcast</groupId>\n+    <artifactId>hazelcast</artifactId>\n+    <version>${hazelcast.version}</version>\n+</dependency>\n+````\n \n-* Distributed implementations of `java.util.{Queue, Set, List, Map}`.\n-* Distributed implementation of `java.util.concurrent.locks.Lock`.\n-* Distributed implementation of `java.util.concurrent.ExecutorService`.\n-* Distributed `MultiMap` for one-to-many relationships.\n-* Distributed `Topic` for publish/subscribe messaging.\n-* Distributed Query and Aggregators.\n-* Synchronous (write-through) and asynchronous (write-behind) persistence.\n-* Transaction support.\n-* Specification compliant JCache implementation.\n-* Native Java, .NET, C++ clients, Memcache and REST clients.\n-* Socket level encryption support for secure clusters.\n-* Second level cache provider for Hibernate.\n-* Monitoring and management of the cluster via JMX.\n-* Dynamic HTTP session clustering.\n-* Support for cluster info and membership events.\n-* Dynamic discovery, scaling, partitioning with backups and fail-over.\n+For more information, see the [Getting Started Guide](https://hazelcast.org/imdg/get-started/)\n \n-### Getting Started\n+## Documentation\n \n-See [Getting Started Guide](http://docs.hazelcast.org/docs/latest/manual/html-single/index.html#getting-started)\n+See the [reference\n+manual](https://docs.hazelcast.org/docs/latest/manual/html-single/index.html)\n+for in-depth documentation about Hazelcast features.\n \n-### Documentation\n+## Code Samples\n \n-See documentation at [www.hazelcast.org](http://hazelcast.org/documentation/)\n+See [Hazelcast Code Samples](https://github.com/hazelcast/hazelcast-code-samples)\n \n-### Code Samples\n+## Hazelcast Jet\n \n-See [Hazelcast Code Samples](https://github.com/hazelcast/hazelcast-code-samples)\n+[Hazelcast Jet](https://jet-start.sh) is a distributed batch and stream\n+processing framework based on Hazelcast. It can be used to import/export\n+data to/from Hazelcast using a very wide variety of data sources", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODgyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400808821", "bodyText": "Hazelcast data structures are ...", "author": "Serdaro", "createdAt": "2020-03-31T10:33:00Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`\n+* Primitives for distributed computing such as `AtomicLong`,\n+`AtomicReference` `CountDownLatch`\n+\n+Hazelcast data-structures are in-memory, highly optimized and offer very", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwOTM1NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400809355", "bodyText": "a distributed ...", "author": "Serdaro", "createdAt": "2020-03-31T10:33:52Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwOTUzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400809531", "bodyText": "additional data ...", "author": "Serdaro", "createdAt": "2020-03-31T10:34:08Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwOTYwNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400809605", "bodyText": "a cluster-wide ...", "author": "Serdaro", "createdAt": "2020-03-31T10:34:18Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwOTY3MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400809671", "bodyText": "a distributed ...", "author": "Serdaro", "createdAt": "2020-03-31T10:34:27Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwOTk1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400809952", "bodyText": "a cardinality estimator based on HyperLogLog.", "author": "Serdaro", "createdAt": "2020-03-31T10:34:58Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMDA5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400810097", "bodyText": "a distributed ...", "author": "Serdaro", "createdAt": "2020-03-31T10:35:12Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMDIxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400810214", "bodyText": "primitives for ...", "author": "Serdaro", "createdAt": "2020-03-31T10:35:23Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`\n+* Primitives for distributed computing such as `AtomicLong`,", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMDQ3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400810477", "bodyText": "... AtomicReference, CountDownLatch.", "author": "Serdaro", "createdAt": "2020-03-31T10:35:51Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`\n+* Primitives for distributed computing such as `AtomicLong`,\n+`AtomicReference` `CountDownLatch`", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0Nzc4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r400847787", "bodyText": ".. on an IMap ...", "author": "Serdaro", "createdAt": "2020-03-31T11:46:24Z", "path": "README.md", "diffHunk": "@@ -6,57 +8,123 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* A distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* Additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* A cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* A distributed,\n+  [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* A cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* A distributed and reentrant lock implementation, called `FencedLock`\n+* Primitives for distributed computing such as `AtomicLong`,\n+`AtomicReference` `CountDownLatch`\n+\n+Hazelcast data-structures are in-memory, highly optimized and offer very\n+low latencies. For a single `get` or `put` operation on a `IMap`, you", "originalCommit": "b417f915638902c259160bec4d16746f1fcbd57b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95cf2f817d119942294c55ef6a0bec7a50395187", "url": "https://github.com/hazelcast/hazelcast/commit/95cf2f817d119942294c55ef6a0bec7a50395187", "message": "address reviews", "committedDate": "2020-04-03T10:53:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzOTk2Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r402939966", "bodyText": "Let's put a period at the end of last bulleted item since the above list is a phrase of the sentence starting with \"It provides\".", "author": "Serdaro", "createdAt": "2020-04-03T11:28:08Z", "path": "README.md", "diffHunk": "@@ -6,65 +8,135 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* a distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* a distributed, [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* a cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)", "originalCommit": "95cf2f817d119942294c55ef6a0bec7a50395187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0MDEyMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16815#discussion_r402940122", "bodyText": "Let's put a period at the end of last bulleted item since the above list is a phrase of the sentence starting with \"Additionally\".", "author": "Serdaro", "createdAt": "2020-04-03T11:28:28Z", "path": "README.md", "diffHunk": "@@ -6,65 +8,135 @@\n [![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/hazelcast/hazelcast/context:java)\n [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=hz-os-master)\n \n-## Hazelcast is a clustering and highly scalable data distribution platform.\n+----\n+\n+Hazelcast is an open-source distributed in-memory data store and\n+computation platform. It provides a wide variety of distributed data\n+structures and concurrency primitives, including:\n+\n+* a distributed, partitioned and queryable in-memory key-value store\n+  implementation, called `IMap`\n+* additional data structures and simple messaging constructs such as\n+  `Set`, `MultiMap`, `Queue`, `Topic`\n+* cluster-wide unique ID generator, called `FlakeIdGenerator`\n+* a distributed, [CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)\n+  based counter, called `PNCounter`\n+* a cardinality estimator based on [`HyperLogLog`](https://en.wikipedia.org/wiki/HyperLogLog)\n+\n+Additionally, Hazelcast includes a production-ready\n+[Raft](https://en.wikipedia.org/wiki/Raft_(computer_science))\n+implementation which allows implementation of _linearizable_ constructs\n+such as:\n+\n+* a distributed and reentrant lock implementation, called `FencedLock`\n+* primitives for distributed computing such as `AtomicLong`,\n+`AtomicReference` and `CountDownLatch`", "originalCommit": "95cf2f817d119942294c55ef6a0bec7a50395187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "44d41c53ac8877cb288aca440e45fa3470405f7c", "url": "https://github.com/hazelcast/hazelcast/commit/44d41c53ac8877cb288aca440e45fa3470405f7c", "message": "address additional reviews", "committedDate": "2020-04-03T12:29:13Z", "type": "commit"}]}