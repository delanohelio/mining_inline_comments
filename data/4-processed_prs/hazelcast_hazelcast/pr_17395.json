{"pr_number": 17395, "pr_title": "Support temporal columns in SQL", "pr_createdAt": "2020-08-23T12:45:05Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17395", "timeline": [{"oid": "10f6ff5684a6668cbe89a505919cfc79a6c8cde8", "url": "https://github.com/hazelcast/hazelcast/commit/10f6ff5684a6668cbe89a505919cfc79a6c8cde8", "message": "WIP on tests", "committedDate": "2020-08-23T06:40:58Z", "type": "commit"}, {"oid": "f2ace7a893816c8bec84d5be1ada5a9b984bc88c", "url": "https://github.com/hazelcast/hazelcast/commit/f2ace7a893816c8bec84d5be1ada5a9b984bc88c", "message": "WIP on tests", "committedDate": "2020-08-23T06:57:48Z", "type": "commit"}, {"oid": "e8dcb9039b001e2025b9610f4dcffd51c0b0d07b", "url": "https://github.com/hazelcast/hazelcast/commit/e8dcb9039b001e2025b9610f4dcffd51c0b0d07b", "message": "WIP on tests", "committedDate": "2020-08-23T07:15:48Z", "type": "commit"}, {"oid": "3d131087970567ec8c031d16e5635cdf9c9b3880", "url": "https://github.com/hazelcast/hazelcast/commit/3d131087970567ec8c031d16e5635cdf9c9b3880", "message": "CAST tests", "committedDate": "2020-08-23T10:10:09Z", "type": "commit"}, {"oid": "5ff78fb95f4cdb23bc8ddc787ed3d839481ac6b0", "url": "https://github.com/hazelcast/hazelcast/commit/5ff78fb95f4cdb23bc8ddc787ed3d839481ac6b0", "message": "Tests", "committedDate": "2020-08-23T10:20:09Z", "type": "commit"}, {"oid": "1ffbd16d67280ac50f493947076bfd970f65ee2c", "url": "https://github.com/hazelcast/hazelcast/commit/1ffbd16d67280ac50f493947076bfd970f65ee2c", "message": "Tests", "committedDate": "2020-08-23T10:26:09Z", "type": "commit"}, {"oid": "ef8a18ef6f9c5a77232e13b904b84f6d02d5b7d7", "url": "https://github.com/hazelcast/hazelcast/commit/ef8a18ef6f9c5a77232e13b904b84f6d02d5b7d7", "message": "Tests", "committedDate": "2020-08-23T10:31:08Z", "type": "commit"}, {"oid": "078c17fce68d635b476efd5a32a083576215fc6b", "url": "https://github.com/hazelcast/hazelcast/commit/078c17fce68d635b476efd5a32a083576215fc6b", "message": "Finished with string function tests", "committedDate": "2020-08-23T10:48:59Z", "type": "commit"}, {"oid": "2030dfcd5579a31543a4e0798d9f2e8bd41ec097", "url": "https://github.com/hazelcast/hazelcast/commit/2030dfcd5579a31543a4e0798d9f2e8bd41ec097", "message": "WIP", "committedDate": "2020-08-23T10:52:32Z", "type": "commit"}, {"oid": "3c5d5d3745e8c582a5b3ebf90c2c19bc5a845a59", "url": "https://github.com/hazelcast/hazelcast/commit/3c5d5d3745e8c582a5b3ebf90c2c19bc5a845a59", "message": "Tests for math", "committedDate": "2020-08-23T11:12:27Z", "type": "commit"}, {"oid": "33a077675dff391ffcf8e5a59278e5a6e07cab4a", "url": "https://github.com/hazelcast/hazelcast/commit/33a077675dff391ffcf8e5a59278e5a6e07cab4a", "message": "WIP", "committedDate": "2020-08-23T11:41:13Z", "type": "commit"}, {"oid": "194f94a1a08a74da036ecb106283ac0623b2e2ed", "url": "https://github.com/hazelcast/hazelcast/commit/194f94a1a08a74da036ecb106283ac0623b2e2ed", "message": "Arithmetics", "committedDate": "2020-08-23T11:51:02Z", "type": "commit"}, {"oid": "bb8fcaa0b896688941eb9ac9cb8d1c96787a7213", "url": "https://github.com/hazelcast/hazelcast/commit/bb8fcaa0b896688941eb9ac9cb8d1c96787a7213", "message": "Predicate tests (1)", "committedDate": "2020-08-23T12:00:32Z", "type": "commit"}, {"oid": "8e8e5da4bf0fd5ec76b317a9b6a2b4de11d256fd", "url": "https://github.com/hazelcast/hazelcast/commit/8e8e5da4bf0fd5ec76b317a9b6a2b4de11d256fd", "message": "AND/OR tests", "committedDate": "2020-08-23T12:07:50Z", "type": "commit"}, {"oid": "0b6e6ac488161934c841e730a6d80af2477e5d0f", "url": "https://github.com/hazelcast/hazelcast/commit/0b6e6ac488161934c841e730a6d80af2477e5d0f", "message": "Comparisons", "committedDate": "2020-08-23T12:32:22Z", "type": "commit"}, {"oid": "1117f692684c2ef218d94abfe3f325b6ae6e4d31", "url": "https://github.com/hazelcast/hazelcast/commit/1117f692684c2ef218d94abfe3f325b6ae6e4d31", "message": "Minor fix", "committedDate": "2020-08-23T12:35:55Z", "type": "commit"}, {"oid": "45c48345eaac90efe04c6e678a09dd6a4a8f1c49", "url": "https://github.com/hazelcast/hazelcast/commit/45c48345eaac90efe04c6e678a09dd6a4a8f1c49", "message": "Revert unnecessary changes", "committedDate": "2020-08-23T12:38:15Z", "type": "commit"}, {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41", "url": "https://github.com/hazelcast/hazelcast/commit/2bbf272b9f1dd081c3e1a5487192a023bbaa1a41", "message": "Minor fix", "committedDate": "2020-08-23T13:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNjU5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476236592", "bodyText": "What's the reasoning behind introducing an abstract class with a single non-abstract implementation?", "author": "taburet", "createdAt": "2020-08-25T07:31:46Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastOperandTypes.java", "diffHunk": "@@ -65,11 +66,11 @@ public static SqlOperandTypeChecker notAllNull(SqlOperandTypeChecker base) {\n         return new NotAllNull(base);\n     }\n \n-    private static final class NotAny implements SqlSingleOperandTypeChecker {\n+    private abstract static class DisallowedTypeOperandTypeChecker implements SqlSingleOperandTypeChecker {", "originalCommit": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNDcxMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476304710", "bodyText": "A leftover. I was experimenting with some advanced type checking for temporal types but ultimately removed it. Forgot to roll back the changes.\nRolled back in e442d1c", "author": "devozerov", "createdAt": "2020-08-25T09:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI2NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476240264", "bodyText": "What's the status of TIME_WITH_LOCAL_TIME_ZONE? There is no mapping from/to query data type for it, but it's listed as allowed.", "author": "taburet", "createdAt": "2020-08-25T07:38:37Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java", "diffHunk": "@@ -204,6 +208,10 @@ public Void visit(SqlDataTypeSpec type) {\n             case REAL:\n             case DOUBLE:\n             case VARCHAR:\n+            case DATE:\n+            case TIME:\n+            case TIMESTAMP:\n+            case TIME_WITH_LOCAL_TIME_ZONE:", "originalCommit": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTY4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476309684", "bodyText": "This is a bug, neither TIME_WITH_LOCAL_TIME_ZONE, nor TIMESTAMP_WITH_LOCAL_TIME_ZONE should be there. We should list there only built-in Calcite types that we use. Our custom TIMESTAMP_WITH_TIME_ZONE is not in the list, because we rely on custom identifier remapping (similarly to ANY -> OBJECT)\nFixed in 5ebe4af", "author": "devozerov", "createdAt": "2020-08-25T09:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI2NA=="}], "type": "inlineReview"}, {"oid": "0f3403afcd54f7c13913dd9f177fafbd2b9e396b", "url": "https://github.com/hazelcast/hazelcast/commit/0f3403afcd54f7c13913dd9f177fafbd2b9e396b", "message": "Merge branch 'master' into sql-temporal-columns", "committedDate": "2020-08-25T09:15:02Z", "type": "commit"}, {"oid": "e442d1cae09e167e80a20d5656c891458e84aaae", "url": "https://github.com/hazelcast/hazelcast/commit/e442d1cae09e167e80a20d5656c891458e84aaae", "message": "Rolled back changes in the HazelcastOperandTypes", "committedDate": "2020-08-25T09:16:50Z", "type": "commit"}, {"oid": "77e3f84bd99cd2f3f7b9b375b9e34ca518f6ac81", "url": "https://github.com/hazelcast/hazelcast/commit/77e3f84bd99cd2f3f7b9b375b9e34ca518f6ac81", "message": "UnsuportedOperationVisitor: TIME_WITH_LOCAL_TIME_ZONE -> TIMESTAMP_WITH_LOCAL_TIME_ZONE", "committedDate": "2020-08-25T09:19:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODExMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476308110", "bodyText": "Is it ok to use underscored type names while Calcite, and SQL in general, refer to them without underscores?", "author": "taburet", "createdAt": "2020-08-25T09:24:03Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTemporalType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.sql.impl.calcite.SqlToQueryType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.type.BasicSqlType;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+/**\n+ * Class describing TIME, TIMESTAMP and TIMESTAMP_WITH_TIME_ZONE types.\n+ */\n+public final class HazelcastTemporalType extends BasicSqlType {\n+\n+    public static final RelDataType TIME = new HazelcastTemporalType(SqlTypeName.TIME, false);\n+    public static final RelDataType TIME_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIME, true);\n+\n+    public static final RelDataType TIMESTAMP = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, false);\n+    public static final RelDataType TIMESTAMP_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, true);\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, false\n+    );\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE_NULLABLE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE,\n+        true\n+    );\n+\n+    private HazelcastTemporalType(SqlTypeName typeName, boolean nullable) {\n+        super(HazelcastTypeSystem.INSTANCE, typeName);\n+\n+        this.isNullable = nullable;\n+\n+        computeDigest();\n+    }\n+\n+    @Override\n+    protected void generateTypeString(StringBuilder sb, boolean withDetail) {\n+        sb.append(SqlToQueryType.map(typeName).getTypeFamily());", "originalCommit": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDQ5OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476310499", "bodyText": "WIthout underscores, they are split into independent tokens, and hence require custom parser implementation. We may introduce more convenient naming later (e.g. TIMESTAMP WITH TIME ZONE, or Postgres-like timestamptz, etc)", "author": "devozerov", "createdAt": "2020-08-25T09:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODExMA=="}], "type": "inlineReview"}, {"oid": "5ebe4af6c3654ab9a3f52666d25517929e7e94e5", "url": "https://github.com/hazelcast/hazelcast/commit/5ebe4af6c3654ab9a3f52666d25517929e7e94e5", "message": "UnsuportedOperationVisitor: removed TIMESTAMP_WITH_LOCAL_TIME_ZONE", "committedDate": "2020-08-25T09:24:49Z", "type": "commit"}]}