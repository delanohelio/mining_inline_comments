{"pr_number": 17093, "pr_title": "[BACKPORT] Add ConfigRecognizer API", "pr_createdAt": "2020-06-17T00:13:08Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17093", "timeline": [{"oid": "a546a34f46bb60ef5f0f0f6bae3fbe0729f6acc8", "url": "https://github.com/hazelcast/hazelcast/commit/a546a34f46bb60ef5f0f0f6bae3fbe0729f6acc8", "message": "Add ConfigRecognizer API\n\nThis commit introduces the ConfigRecognition API that is meant to\nrecognize if a provided declarative configuration is recognized by the\nrules defined in a given implementation. The main use case for this\nimplementation is to recognize member, client and failover client XML\nand YAML configurations just by looking into the content of the\nconfiguration, without building any actual configuration.\n\nAlong with the API the following three implementations are added:\n- MemberConfigRecognizer for recognizing member XML and YAML\nconfigurations\n- ClientConfigRecognizer for recognizing client XML and YAML\nconfigurations\n- ClientFailoverConfigRecognizer for recognizing failover client XML and\nYAML configurations\n\nAll the three are extensible with custom recognizers so that even those\nconfigurations can be recognized that would otherwise remain\nunrecognized with the built-in set of recognizers that recognizes XML\nand YAML configurations by checking the root node in the provided\nconfiguration.\n\nThe API recognizes configuration provided in InputStreams only, while\nthe ConfigBuilder implementations can be built from files defined by\ntheir location and URLs too. The reason for lacking the support for\nthese two options is that both are easy to convert to InputStreams and\nthat handling errors caused by non-existing resources, missing\nprivileges etc should be handled outside of this API with potentially\nhaving more contextual information.\n\nThe built-in implementations honour parse errors with unrecognized\nconfiguration. The reason is that the provided InputStream can be tested\nboth for XML and YAML configuration and at least one is expected to\nlead to parse errors.\n\nImplements #16866\n\n(cherry picked from commit 9457ddcdd1925eccc1ed59ed287e4ae1c0244afe)", "committedDate": "2020-06-17T00:09:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MDU5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17093#discussion_r441360595", "bodyText": "Shouldn't be the community license? \ud83e\udd14", "author": "pivovarit", "createdAt": "2020-06-17T08:08:24Z", "path": "hazelcast/src/main/java/com/hazelcast/client/config/ClientConfigRecognizer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");", "originalCommit": "a546a34f46bb60ef5f0f0f6bae3fbe0729f6acc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MzgyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17093#discussion_r442793823", "bodyText": "For OS we kept apache, community is for integration modules mostly.", "author": "mmedenjak", "createdAt": "2020-06-19T11:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MDU5NQ=="}], "type": "inlineReview"}]}