{"pr_number": 17212, "pr_title": "Add caller stacktrace to rethrown RuntimeException", "pr_createdAt": "2020-07-14T08:19:22Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17212", "timeline": [{"oid": "da89fbac81f3ce024f27843ecf64c69b0d0973ef", "url": "https://github.com/hazelcast/hazelcast/commit/da89fbac81f3ce024f27843ecf64c69b0d0973ef", "message": "test fixes", "committedDate": "2020-07-21T07:21:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMTMzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458611338", "bodyText": "We seem to do this lookup for the same exception many times if many exceptions. Do you think that we should cache it so that reflection lookup cost is minimal?", "author": "ihsandemir", "createdAt": "2020-07-22T08:06:23Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +224,27 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    public static <T extends Throwable> T tryWrapInSameClass(T cause) {\n+        Class<? extends Throwable> exceptionClass = cause.getClass();\n+        MethodHandle constructor;\n+        try {\n+            constructor = LOOKUP.findConstructor(exceptionClass, MT_INIT_STRING_THROWABLE);", "originalCommit": "da89fbac81f3ce024f27843ecf64c69b0d0973ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MzcwMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458673701", "bodyText": "Reflection lookup is not costly enough to use caching here.", "author": "sancar", "createdAt": "2020-07-22T09:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMzI5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458613294", "bodyText": "is all instances of t an HazelcastException for the client? if they all have the same base class, then for only the client side we may just make HazelcastException as WrappableException , and hence we may eliminate the need for the tryWrapInSameClass  method.", "author": "ihsandemir", "createdAt": "2020-07-22T08:09:50Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -118,7 +130,20 @@ public static RuntimeException peel(final Throwable t) {\n         return exceptionWrapper.apply(t, message);\n     }\n \n-    public static RuntimeException rethrow(Throwable t) {\n+    public static <W extends Throwable> Throwable wrapException(Throwable t, String message,\n+                                                                BiFunction<Throwable, String, W> exceptionWrapper) {\n+        if (t instanceof WrappableException) {\n+            return ((WrappableException) t).wrap();\n+        }\n+        Throwable wrapped = tryWrapInSameClass(t);", "originalCommit": "da89fbac81f3ce024f27843ecf64c69b0d0973ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NDkyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458674928", "bodyText": "This method is not for just the client. The only thing we know that t is a RuntimeException. There is no guarantee for it to extend HazelcastException.", "author": "sancar", "createdAt": "2020-07-22T09:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMzI5NA=="}], "type": "inlineReview"}, {"oid": "0e61a132e1555a0fadec1799479b630ed54982ef", "url": "https://github.com/hazelcast/hazelcast/commit/0e61a132e1555a0fadec1799479b630ed54982ef", "message": "test fixes", "committedDate": "2020-07-22T13:30:52Z", "type": "forcePushed"}, {"oid": "0a922f976f024f09faac379eb8a6f792e5e4f22c", "url": "https://github.com/hazelcast/hazelcast/commit/0a922f976f024f09faac379eb8a6f792e5e4f22c", "message": "Add caller stacktrace to rethrown RuntimeException\n\nWe have lots of places that we use the following pattern\n```\ntry {\n     invocationFuture.get()\n}catch(Exception e){\n    throw retrhow(e);\n}\n```\n\nIf the exception is RuntimeException, it is not wrapped and thrown directly. In that case, we can not follow where the exception is thrown from. Here is an example of a put from a member.\n\n```\njava.lang.RuntimeException: here comes the bug\n        at com.hazelcast.map.impl.operation.PutOperation.runInternal(PutOperation.java:36)\n        at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:112)\n        at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:227)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:216)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:422)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:166)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:136)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.executeRun(OperationThread.java:123)\n        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102)\n```\n\n:\n```\ntry {\n     invocationFuture.get()\n}catch(Exception e){\n    throw retrhow(e);\n}\n```\n\nIf the exception is RuntimeException, it is not wrapped and thrown directly. In that case, we can not follow where the exception is thrown from. Here is an example of a put from a member.\n\n```\njava.lang.RuntimeException: here comes the bug\n        at com.hazelcast.map.impl.operation.PutOperation.runInternal(PutOperation.java:36)\n        at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:112)\n        at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:227)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:216)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:422)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:166)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:136)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.executeRun(OperationThread.java:123)\n        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102)\n```\n\nSame problem on the client side:\n\n```\njava.lang.RuntimeException: here comes the bug\n        at com.hazelcast.map.impl.operation.PutOperation.runInternal(PutOperation.java:36)\n        at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:112)\n        at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:227)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:216)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.run(OperationExecutorImpl.java:411)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.runOrExecute(OperationExecutorImpl.java:438)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvokeLocal(Invocation.java:597)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvoke(Invocation.java:582)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:541)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:238)\n        at com.hazelcast.spi.impl.operationservice.impl.InvocationBuilderImpl.invoke(InvocationBuilderImpl.java:59)\n        at com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.processInternal(AbstractPartitionMessageTask.java:51)\n        at com.hazelcast.client.impl.protocol.task.AbstractAsyncMessageTask.processMessage(AbstractAsyncMessageTask.java:71)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.initializeAndProcessMessage(AbstractMessageTask.java:153)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.run(AbstractMessageTask.java:116)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:180)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:172)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:140)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.executeRun(OperationThread.java:123)\n        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102)\n```\n\nThese exceptions should contain the stack trace of the caller as well. But they only have the remote stack trace.\n\nTo fix this, the tryWrapInSameClass is moved to ExceptionUtil to be used by rethrow. AbstractInvocationFuture uses methods\nfrom the ExceptionUtil.\n\nAfter the fix, the stacktrace of the same run for the member:\n\n```\njava.lang.RuntimeException: here comes the bug\n        at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)\n        at com.hazelcast.internal.util.ExceptionUtil.tryWrapInSameClass(ExceptionUtil.java:233)\n        at com.hazelcast.internal.util.ExceptionUtil.wrapException(ExceptionUtil.java:138)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:114)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:120)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:73)\n        at com.hazelcast.internal.util.ExceptionUtil.rethrow(ExceptionUtil.java:148)\n        at com.hazelcast.map.impl.proxy.MapProxySupport.invokeOperation(MapProxySupport.java:484)\n        at com.hazelcast.map.impl.proxy.MapProxySupport.putInternal(MapProxySupport.java:411)\n        at com.hazelcast.map.impl.proxy.MapProxyImpl.put(MapProxyImpl.java:130)\n        at com.hazelcast.map.impl.proxy.MapProxyImpl.put(MapProxyImpl.java:120)\n        at XNode.onliteMember(XNode.java:28)\n        at XNode.main(XNode.java:14)\nCaused by: java.lang.RuntimeException: here comes the bug\n        at com.hazelcast.map.impl.operation.PutOperation.runInternal(PutOperation.java:36)\n        at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:112)\n        at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:227)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:216)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:422)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:166)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:136)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.executeRun(OperationThread.java:123)\n        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102)\n```\n\nAnd the stacktrace of the same run for the client:\n\n```\njava.lang.RuntimeException: here comes the bug\n        at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)\n        at com.hazelcast.internal.util.ExceptionUtil.tryWrapInSameClass(ExceptionUtil.java:233)\n        at com.hazelcast.internal.util.ExceptionUtil.wrapException(ExceptionUtil.java:138)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:114)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:120)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:73)\n        at com.hazelcast.internal.util.ExceptionUtil.rethrow(ExceptionUtil.java:148)\n        at com.hazelcast.client.impl.spi.ClientProxy.invokeOnPartition(ClientProxy.java:190)\n        at com.hazelcast.client.impl.spi.ClientProxy.invoke(ClientProxy.java:182)\n        at com.hazelcast.client.impl.proxy.ClientMapProxy.putInternal(ClientMapProxy.java:529)\n        at com.hazelcast.client.impl.proxy.ClientMapProxy.put(ClientMapProxy.java:261)\n        at XNode.onClient(XNode.java:41)\n        at XNode.main(XNode.java:15)\nCaused by: java.lang.RuntimeException: here comes the bug\n        at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)\n        at com.hazelcast.internal.util.ExceptionUtil.tryWrapInSameClass(ExceptionUtil.java:233)\n        at com.hazelcast.internal.util.ExceptionUtil.wrapException(ExceptionUtil.java:138)\n        at com.hazelcast.internal.util.ExceptionUtil.peel(ExceptionUtil.java:114)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.peelIfNeeded(AbstractMessageTask.java:348)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.encodeException(AbstractMessageTask.java:275)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.sendClientMessage(AbstractMessageTask.java:269)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.handleProcessingFailure(AbstractMessageTask.java:194)\n        at com.hazelcast.client.impl.protocol.task.AbstractAsyncMessageTask.sendResponseOrHandleFailure(AbstractAsyncMessageTask.java:84)\n        at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n        at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n        at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)\n        at com.hazelcast.internal.util.ConcurrencyUtil$1.execute(ConcurrencyUtil.java:39)\n        at java.util.concurrent.CompletableFuture$UniCompletion.claim(CompletableFuture.java:543)\n        at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:765)\n        at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n        at java.util.concurrent.CompletableFuture.uniWhenCompleteStage(CompletableFuture.java:795)\n        at java.util.concurrent.CompletableFuture.whenCompleteAsync(CompletableFuture.java:2163)\n        at com.hazelcast.client.impl.protocol.task.AbstractAsyncMessageTask.processMessage(AbstractAsyncMessageTask.java:73)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.initializeAndProcessMessage(AbstractMessageTask.java:153)\n        at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.run(AbstractMessageTask.java:116)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:180)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:172)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:140)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.executeRun(OperationThread.java:123)\n        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102)\nCaused by: java.lang.RuntimeException: here comes the bug\n        at com.hazelcast.map.impl.operation.PutOperation.runInternal(PutOperation.java:36)\n        at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:112)\n        at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:227)\n        at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:216)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.run(OperationExecutorImpl.java:411)\n        at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.runOrExecute(OperationExecutorImpl.java:438)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvokeLocal(Invocation.java:597)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvoke(Invocation.java:582)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:541)\n        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:238)\n        at com.hazelcast.spi.impl.operationservice.impl.InvocationBuilderImpl.invoke(InvocationBuilderImpl.java:59)\n        at com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.processInternal(AbstractPartitionMessageTask.java:51)\n        at com.hazelcast.client.impl.protocol.task.AbstractAsyncMessageTask.processMessage(AbstractAsyncMessageTask.java:71)\n        ... 7 more\n```\n\nfixes https://github.com/hazelcast/hazelcast/issues/17202", "committedDate": "2020-07-23T10:50:15Z", "type": "commit"}, {"oid": "c9943cb26df0e4505c54b5efe3938f7f854a2d22", "url": "https://github.com/hazelcast/hazelcast/commit/c9943cb26df0e4505c54b5efe3938f7f854a2d22", "message": "test fixes", "committedDate": "2020-07-23T10:50:15Z", "type": "commit"}, {"oid": "c9943cb26df0e4505c54b5efe3938f7f854a2d22", "url": "https://github.com/hazelcast/hazelcast/commit/c9943cb26df0e4505c54b5efe3938f7f854a2d22", "message": "test fixes", "committedDate": "2020-07-23T10:50:15Z", "type": "forcePushed"}]}