{"pr_number": 16800, "pr_title": "SQL: Network protocol (#16799)", "pr_createdAt": "2020-03-25T13:12:41Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16800", "timeline": [{"oid": "24ad7231c6a7174e2e566475bcc59120e45a51e6", "url": "https://github.com/hazelcast/hazelcast/commit/24ad7231c6a7174e2e566475bcc59120e45a51e6", "message": "SQL type system.", "committedDate": "2020-03-11T09:15:42Z", "type": "commit"}, {"oid": "4a05a318f3348ceb1b50e0df94515ed5e5b81c74", "url": "https://github.com/hazelcast/hazelcast/commit/4a05a318f3348ceb1b50e0df94515ed5e5b81c74", "message": "WIP on tests.", "committedDate": "2020-03-11T11:35:52Z", "type": "commit"}, {"oid": "a37c3a7f6bf83c2fda80556ac42fa38ee0a126cd", "url": "https://github.com/hazelcast/hazelcast/commit/a37c3a7f6bf83c2fda80556ac42fa38ee0a126cd", "message": "Heap row", "committedDate": "2020-03-11T11:50:57Z", "type": "commit"}, {"oid": "9dff1b6ec3a720413698d86366ac96491aaccd17", "url": "https://github.com/hazelcast/hazelcast/commit/9dff1b6ec3a720413698d86366ac96491aaccd17", "message": "JoinRow tests.", "committedDate": "2020-03-11T12:00:01Z", "type": "commit"}, {"oid": "710ee92b553ca7cfb78395a5f22824fee76e549d", "url": "https://github.com/hazelcast/hazelcast/commit/710ee92b553ca7cfb78395a5f22824fee76e549d", "message": "WIP", "committedDate": "2020-03-11T16:36:20Z", "type": "commit"}, {"oid": "94859e9a37035c84c305ad8083e7e472e3ae983d", "url": "https://github.com/hazelcast/hazelcast/commit/94859e9a37035c84c305ad8083e7e472e3ae983d", "message": "AbstractExec test.", "committedDate": "2020-03-11T16:44:24Z", "type": "commit"}, {"oid": "40878714ccfb7ef81c7e46f2fc444e2c4cd53d4c", "url": "https://github.com/hazelcast/hazelcast/commit/40878714ccfb7ef81c7e46f2fc444e2c4cd53d4c", "message": "Upstream state.", "committedDate": "2020-03-11T17:34:35Z", "type": "commit"}, {"oid": "7382174786f50c923c1549b19d0e88ed99748a7e", "url": "https://github.com/hazelcast/hazelcast/commit/7382174786f50c923c1549b19d0e88ed99748a7e", "message": "Done.", "committedDate": "2020-03-11T17:43:21Z", "type": "commit"}, {"oid": "6a96bbf03ef9119da2c28de1a62be71596b9c501", "url": "https://github.com/hazelcast/hazelcast/commit/6a96bbf03ef9119da2c28de1a62be71596b9c501", "message": "Fixed review comments.", "committedDate": "2020-03-12T11:34:22Z", "type": "commit"}, {"oid": "b75fcfe8ad980a9426c96a5f2a5d2499e9e5f5ce", "url": "https://github.com/hazelcast/hazelcast/commit/b75fcfe8ad980a9426c96a5f2a5d2499e9e5f5ce", "message": "Removed useless JavaDocs.", "committedDate": "2020-03-12T11:44:00Z", "type": "commit"}, {"oid": "af90816527413e2d6663ceba6b5687708459c7cf", "url": "https://github.com/hazelcast/hazelcast/commit/af90816527413e2d6663ceba6b5687708459c7cf", "message": "Clarification on precedence.", "committedDate": "2020-03-12T14:32:36Z", "type": "commit"}, {"oid": "52853076caf0544f7f19bb0ee38902af052a8255", "url": "https://github.com/hazelcast/hazelcast/commit/52853076caf0544f7f19bb0ee38902af052a8255", "message": "Fixes.", "committedDate": "2020-03-13T11:41:22Z", "type": "commit"}, {"oid": "2b7f32db0896793357a09edc4d882005a69ae530", "url": "https://github.com/hazelcast/hazelcast/commit/2b7f32db0896793357a09edc4d882005a69ae530", "message": "Fixed type compatibility matrix for BIT.", "committedDate": "2020-03-13T17:29:02Z", "type": "commit"}, {"oid": "8dbfa537ad955200f980c576ccf9945913006c2c", "url": "https://github.com/hazelcast/hazelcast/commit/8dbfa537ad955200f980c576ccf9945913006c2c", "message": "Merge branch 'master' into issues/15241", "committedDate": "2020-03-16T06:27:50Z", "type": "commit"}, {"oid": "ded98cf91ac6d1440ae6197e2941c2f3539fd24d", "url": "https://github.com/hazelcast/hazelcast/commit/ded98cf91ac6d1440ae6197e2941c2f3539fd24d", "message": "Merge branch 'issues/15241' into sql-exec-interfaces", "committedDate": "2020-03-16T06:45:35Z", "type": "commit"}, {"oid": "da879db5027742866d622af5c39d99eb708b5de7", "url": "https://github.com/hazelcast/hazelcast/commit/da879db5027742866d622af5c39d99eb708b5de7", "message": "Merge.", "committedDate": "2020-03-16T06:47:09Z", "type": "commit"}, {"oid": "cdf9f084335595402a030e0a8e243f1cc4773a0d", "url": "https://github.com/hazelcast/hazelcast/commit/cdf9f084335595402a030e0a8e243f1cc4773a0d", "message": "Fix review comments.", "committedDate": "2020-03-16T08:51:00Z", "type": "commit"}, {"oid": "8aab722371910e351e0517292da0389be99c21e8", "url": "https://github.com/hazelcast/hazelcast/commit/8aab722371910e351e0517292da0389be99c21e8", "message": "Merge branch 'issues/15241' into prod-exec-row", "committedDate": "2020-03-16T09:18:56Z", "type": "commit"}, {"oid": "e75518d7c94e31b4c8b42467a0d0675821a8b126", "url": "https://github.com/hazelcast/hazelcast/commit/e75518d7c94e31b4c8b42467a0d0675821a8b126", "message": "Merge branch 'master' into prod-exec-row\n\n# Conflicts:\n#\tdocs/design/sql/01-type-system.md\n#\thazelcast/src/main/java/com/hazelcast/sql/HazelcastSqlException.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/type/converter/Converter.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/type/converter/Converters.java\n#\thazelcast/src/test/java/com/hazelcast/sql/impl/type/QueryDataTypeTest.java\n#\thazelcast/src/test/java/com/hazelcast/sql/impl/type/converter/ConvertersTest.java", "committedDate": "2020-03-17T07:56:45Z", "type": "commit"}, {"oid": "5aa1a7373647881de9a229014d776ae8fa5e0a2f", "url": "https://github.com/hazelcast/hazelcast/commit/5aa1a7373647881de9a229014d776ae8fa5e0a2f", "message": "Merge fixes.", "committedDate": "2020-03-17T08:02:55Z", "type": "commit"}, {"oid": "5895e977b72fe4b06e4b9654aad9c6f86e645155", "url": "https://github.com/hazelcast/hazelcast/commit/5895e977b72fe4b06e4b9654aad9c6f86e645155", "message": "Design doc.", "committedDate": "2020-03-17T14:15:31Z", "type": "commit"}, {"oid": "1124f5119eb46ae868f9e71adc8e631cc7229870", "url": "https://github.com/hazelcast/hazelcast/commit/1124f5119eb46ae868f9e71adc8e631cc7229870", "message": "Typos in 02.", "committedDate": "2020-03-17T14:26:23Z", "type": "commit"}, {"oid": "b92b6653977ac5a1d1e9e844077d6c45b429e07c", "url": "https://github.com/hazelcast/hazelcast/commit/b92b6653977ac5a1d1e9e844077d6c45b429e07c", "message": "Minors.", "committedDate": "2020-03-17T14:27:58Z", "type": "commit"}, {"oid": "9026003302687165c61c04797f30c877665d5b6e", "url": "https://github.com/hazelcast/hazelcast/commit/9026003302687165c61c04797f30c877665d5b6e", "message": "Minors.", "committedDate": "2020-03-17T14:30:38Z", "type": "commit"}, {"oid": "fe86ee721d2eea6df3884e9e6bded1b0973546d1", "url": "https://github.com/hazelcast/hazelcast/commit/fe86ee721d2eea6df3884e9e6bded1b0973546d1", "message": "Minors.", "committedDate": "2020-03-17T14:38:47Z", "type": "commit"}, {"oid": "b3503b97b364103b427e5da11af1a4c022c504a6", "url": "https://github.com/hazelcast/hazelcast/commit/b3503b97b364103b427e5da11af1a4c022c504a6", "message": "Typos.", "committedDate": "2020-03-17T14:43:50Z", "type": "commit"}, {"oid": "713ca1839ca03b2f2465a8c5ceb1986f45958944", "url": "https://github.com/hazelcast/hazelcast/commit/713ca1839ca03b2f2465a8c5ceb1986f45958944", "message": "Review.", "committedDate": "2020-03-18T12:35:12Z", "type": "commit"}, {"oid": "96e1f3a76c7c0b4a31c2841693f9275db502b745", "url": "https://github.com/hazelcast/hazelcast/commit/96e1f3a76c7c0b4a31c2841693f9275db502b745", "message": "Typos", "committedDate": "2020-03-18T12:47:28Z", "type": "commit"}, {"oid": "39995f80eaea6f2ec55c99446e39c076057c1b9c", "url": "https://github.com/hazelcast/hazelcast/commit/39995f80eaea6f2ec55c99446e39c076057c1b9c", "message": "WIP.", "committedDate": "2020-03-18T13:37:53Z", "type": "commit"}, {"oid": "bce5fa3cb9dd6d9423ee72ca84c685cfc4512f61", "url": "https://github.com/hazelcast/hazelcast/commit/bce5fa3cb9dd6d9423ee72ca84c685cfc4512f61", "message": "Review comments.", "committedDate": "2020-03-18T13:41:22Z", "type": "commit"}, {"oid": "9c959d55cb4b8ec4842807a172143c3fc72c0a77", "url": "https://github.com/hazelcast/hazelcast/commit/9c959d55cb4b8ec4842807a172143c3fc72c0a77", "message": "Review comments.", "committedDate": "2020-03-18T13:47:49Z", "type": "commit"}, {"oid": "4620f01fdc2c3cb3b548962e177b6207ecaf6474", "url": "https://github.com/hazelcast/hazelcast/commit/4620f01fdc2c3cb3b548962e177b6207ecaf6474", "message": "Clarifications on row and row batch life cycles.", "committedDate": "2020-03-18T13:50:42Z", "type": "commit"}, {"oid": "f91e6967d4faa6c3ff5d25e121d60236bf1acf8a", "url": "https://github.com/hazelcast/hazelcast/commit/f91e6967d4faa6c3ff5d25e121d60236bf1acf8a", "message": "More clarifications.", "committedDate": "2020-03-18T14:01:33Z", "type": "commit"}, {"oid": "f0cd959d17d192943b6a283feaf43ae49173a5b2", "url": "https://github.com/hazelcast/hazelcast/commit/f0cd959d17d192943b6a283feaf43ae49173a5b2", "message": "WIP.", "committedDate": "2020-03-18T16:22:21Z", "type": "commit"}, {"oid": "059a6907e584eb1f846a0173dc22f9a7ff13f020", "url": "https://github.com/hazelcast/hazelcast/commit/059a6907e584eb1f846a0173dc22f9a7ff13f020", "message": "Protocol doc.", "committedDate": "2020-03-18T18:06:48Z", "type": "commit"}, {"oid": "18db2a490bba1da9a74a3b0ae19650c7e2ab80d0", "url": "https://github.com/hazelcast/hazelcast/commit/18db2a490bba1da9a74a3b0ae19650c7e2ab80d0", "message": "Typos.", "committedDate": "2020-03-18T18:22:31Z", "type": "commit"}, {"oid": "89625b02b7239625ce619fcc9644b8a15d1a5d83", "url": "https://github.com/hazelcast/hazelcast/commit/89625b02b7239625ce619fcc9644b8a15d1a5d83", "message": "Minors.", "committedDate": "2020-03-18T18:25:03Z", "type": "commit"}, {"oid": "9bed803fe4c4afc2e90373163a94ad30176e1ced", "url": "https://github.com/hazelcast/hazelcast/commit/9bed803fe4c4afc2e90373163a94ad30176e1ced", "message": "Downloaded necessary classes.", "committedDate": "2020-03-19T06:06:39Z", "type": "commit"}, {"oid": "af4db772903af79ecfcbd98e05715da11164bc23", "url": "https://github.com/hazelcast/hazelcast/commit/af4db772903af79ecfcbd98e05715da11164bc23", "message": "JavaDoc for getId().", "committedDate": "2020-03-19T08:14:05Z", "type": "commit"}, {"oid": "c815d77d373625327b74c5051175b3491f436f83", "url": "https://github.com/hazelcast/hazelcast/commit/c815d77d373625327b74c5051175b3491f436f83", "message": "WIP on tests.", "committedDate": "2020-03-19T08:38:03Z", "type": "commit"}, {"oid": "78323553a1775c059702ab7a28c81496e9e65808", "url": "https://github.com/hazelcast/hazelcast/commit/78323553a1775c059702ab7a28c81496e9e65808", "message": "Tests.", "committedDate": "2020-03-19T10:17:11Z", "type": "commit"}, {"oid": "06a7500c607ccf2b00e8dc985279942c99a4ce6a", "url": "https://github.com/hazelcast/hazelcast/commit/06a7500c607ccf2b00e8dc985279942c99a4ce6a", "message": "Merge branch 'master' into issues/16762", "committedDate": "2020-03-19T17:26:03Z", "type": "commit"}, {"oid": "c6b64606a093f8a60b70f126449097f3d9989aaa", "url": "https://github.com/hazelcast/hazelcast/commit/c6b64606a093f8a60b70f126449097f3d9989aaa", "message": "Fixed spotbugs.", "committedDate": "2020-03-19T17:36:20Z", "type": "commit"}, {"oid": "dc0d1ea4aab120ade051d8bab014e56bdee58655", "url": "https://github.com/hazelcast/hazelcast/commit/dc0d1ea4aab120ade051d8bab014e56bdee58655", "message": "Merge branch 'issues/16762' into sql-operations", "committedDate": "2020-03-19T17:36:39Z", "type": "commit"}, {"oid": "326cf7acc1022b2b8e761b2fa4c3e481f1e59f04", "url": "https://github.com/hazelcast/hazelcast/commit/326cf7acc1022b2b8e761b2fa4c3e481f1e59f04", "message": "Fixes.", "committedDate": "2020-03-19T17:54:09Z", "type": "commit"}, {"oid": "6121aa61d340a248c5e21f5870146d3ff42f7bd8", "url": "https://github.com/hazelcast/hazelcast/commit/6121aa61d340a248c5e21f5870146d3ff42f7bd8", "message": "WIP on a merged document.", "committedDate": "2020-03-24T07:51:20Z", "type": "commit"}, {"oid": "6a9f3519d8497777d19a77030fa54f87d6b72567", "url": "https://github.com/hazelcast/hazelcast/commit/6a9f3519d8497777d19a77030fa54f87d6b72567", "message": "Done.", "committedDate": "2020-03-24T08:52:47Z", "type": "commit"}, {"oid": "294363b8af6d51e7e46a5fcd1a9dd021c6e3f100", "url": "https://github.com/hazelcast/hazelcast/commit/294363b8af6d51e7e46a5fcd1a9dd021c6e3f100", "message": "Typos.", "committedDate": "2020-03-24T11:24:10Z", "type": "commit"}, {"oid": "03ea907f0d8b20199f3eb26a9081ceaf9eae458f", "url": "https://github.com/hazelcast/hazelcast/commit/03ea907f0d8b20199f3eb26a9081ceaf9eae458f", "message": "Typos.", "committedDate": "2020-03-24T11:25:41Z", "type": "commit"}, {"oid": "7cab6526c0a82ba1eb0c54c6da1b264984a3d0b0", "url": "https://github.com/hazelcast/hazelcast/commit/7cab6526c0a82ba1eb0c54c6da1b264984a3d0b0", "message": "Merge branch 'master' into sql-operations\n\n# Conflicts:\n#\tdocs/design/sql/01-type-system.md\n#\tdocs/design/sql/02-operator-interface.md\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/exec/UpstreamState.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/fragment/QueryFragmentContext.java", "committedDate": "2020-03-25T12:57:19Z", "type": "commit"}, {"oid": "3f084f5e250249132759e0955a5bf9e0c53e8378", "url": "https://github.com/hazelcast/hazelcast/commit/3f084f5e250249132759e0955a5bf9e0c53e8378", "message": "Minors.", "committedDate": "2020-03-25T13:08:54Z", "type": "commit"}, {"oid": "0b7a6aa6bce18aad4827d73050060904d64d396c", "url": "https://github.com/hazelcast/hazelcast/commit/0b7a6aa6bce18aad4827d73050060904d64d396c", "message": "Fixed serialization.", "committedDate": "2020-03-25T16:40:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjY4Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r397936686", "bodyText": "relatively high?", "author": "petrpleshachkov", "createdAt": "2020-03-25T15:16:57Z", "path": "docs/design/sql/03-network-protocol.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# SQL Network Protocol\n+\n+## Overview\n+\n+Hazelcast Mustang is a distributed SQL engine. Network communication between nodes is required to produce the final result.\n+In this document, we describe the design of the communication protocol, that includes query start and cancel, data exchange,\n+and maintenance operations.\n+\n+The remainder of this document is structured as follows. Section 1 describes the primary design considerations. Section 2\n+discusses the existing networking infrastructure of the Hazelcast cluster and whether it satisfies our design\n+principles. Section 3 explains the protocol.\n+\n+## 1 Design Considerations\n+\n+In this section, we summarize the fundamental principles that influence the protocol design:\n+1. Low latency\n+1. Fail-fast\n+1. Ordered data exchange\n+\n+### 1.1 Low Latency\n+\n+Hazelcast Mustang is a modern distributed SQL engine that targets the OLTP workloads for in-memory data. We expect\n+that the engine will be used mostly for relatively short queries, taking milliseconds or seconds to complete. Because network\n+latency is still relatively as of 2020, the protocol should be designed to minimize the number of blocking network calls,", "originalCommit": "3f084f5e250249132759e0955a5bf9e0c53e8378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjkwNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398516905", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-03-26T11:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTY2Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r397975667", "bodyText": "We use query initiator terminology in the doc.", "author": "petrpleshachkov", "createdAt": "2020-03-25T16:05:08Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryCancelOperation.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.internal.util.UUIDSerializationUtil;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+/**\n+ * Operation to cancel query execution on participant node. Cancellation process is two-phase:\n+ * 1) When a participant would like to cancel the query, this request is sent to the query coordinator", "originalCommit": "3f084f5e250249132759e0955a5bf9e0c53e8378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjg2OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398516869", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-03-26T11:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjQ3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r397976477", "bodyText": "Minor grammar: it broadcasts it to...?", "author": "petrpleshachkov", "createdAt": "2020-03-25T16:06:16Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryCancelOperation.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.internal.util.UUIDSerializationUtil;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+/**\n+ * Operation to cancel query execution on participant node. Cancellation process is two-phase:\n+ * 1) When a participant would like to cancel the query, this request is sent to the query coordinator\n+ * 2) When coordinator receives cancel request from a participant (including self), it is broadcast to", "originalCommit": "3f084f5e250249132759e0955a5bf9e0c53e8378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNzYyMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398517622", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-03-26T12:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMDk2OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398120968", "bodyText": "broadcasted?", "author": "petrpleshachkov", "createdAt": "2020-03-25T19:40:06Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperation.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.internal.serialization.impl.SerializationUtil;\n+import com.hazelcast.internal.util.UUIDSerializationUtil;\n+import com.hazelcast.internal.util.collection.PartitionIdSet;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Operation which is broadcast to participating members to start query execution.", "originalCommit": "0b7a6aa6bce18aad4827d73050060904d64d396c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNzc3NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398517775", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-03-26T12:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMDk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNjg4Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398126882", "bodyText": "It'd be nice to have Javadoc to define what index is, etc.", "author": "petrpleshachkov", "createdAt": "2020-03-25T19:50:48Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/physical/FieldTypeProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.physical;\n+\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+\n+/**\n+ * Interface to resovle field types.\n+ */\n+public interface FieldTypeProvider {\n+    QueryDataType getType(int index);", "originalCommit": "0b7a6aa6bce18aad4827d73050060904d64d396c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxODM3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398518379", "bodyText": "Added JavaDoc.", "author": "devozerov", "createdAt": "2020-03-26T12:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNjg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwOTM3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398509377", "bodyText": "Is the order enforced for all operators or only for operators really requiring it?", "author": "taburet", "createdAt": "2020-03-26T11:45:51Z", "path": "docs/design/sql/03-network-protocol.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# SQL Network Protocol\n+\n+## Overview\n+\n+Hazelcast Mustang is a distributed SQL engine. Network communication between nodes is required to produce the final result.\n+In this document, we describe the design of the communication protocol, that includes query start and cancel, data exchange,\n+and maintenance operations.\n+\n+The remainder of this document is structured as follows. Section 1 describes the primary design considerations. Section 2\n+discusses the existing networking infrastructure of the Hazelcast cluster and whether it satisfies our design\n+principles. Section 3 explains the protocol.\n+\n+## 1 Design Considerations\n+\n+In this section, we summarize the fundamental principles that influence the protocol design:\n+1. Low latency\n+1. Fail-fast\n+1. Ordered data exchange\n+\n+### 1.1 Low Latency\n+\n+Hazelcast Mustang is a modern distributed SQL engine that targets the OLTP workloads for in-memory data. We expect\n+that the engine will be used mostly for relatively short queries, taking milliseconds or seconds to complete. Because network\n+latency is still relatively as of 2020, the protocol should be designed to minimize the number of blocking network calls,\n+when one member waits for the other.\n+\n+### 1.2 Fail-Fast\n+\n+Distributed systems must account for network and hardware failures. Query execution is a stateful process. Whenever a participant\n+of a distributed query goes down, there are two options: try tolerating the failure and continue execution, or fail it.\n+\n+The system needs to track the progress of query execution to tolerate the failure of a query participant. An example of such a\n+system is Google Spanner [[1]], which uses restart tokens to track the progress of the query, hiding network failures from\n+users. Another approach is to persist intermediate state to disk, which is used in OLAP engines where query restart is not an\n+appropriate choice.\n+\n+While the idea of hiding intermittent failures from users is compelling from the usability point of view, it comes at a massive\n+engineering cost, as mentioned by Google Spanner engineers. The Hazelcast Mustang engine is designed with the **fail-fast**\n+behavior in mind: whenever a failure occurs, the query is terminated, and a proper transient error is delivered to the user.\n+The user should restart the query manually then. The query will fail in the following scenarios:\n+1. Member executing the query (participant) has left the cluster\n+1. Temporal network problem between two members which resulted in a broken TCP connection\n+\n+We understand that fail-fast behavior might not be the best solution for some use cases, including machine shutdowns in cloud\n+environments. We, therefore, do not reject the idea of implementing transparent handling of network errors in future releases.\n+Instead, we treat the fail-fast behavior as a starting point for future improvements, which provides a good trade-off between\n+the added value and implementation complexity.\n+\n+### 1.3 Ordered Data Exchange\n+\n+The Hazelcast Mustang engine employs the **Volcano Model** approach, as described in [[2]]. Data flows from children relational\n+operators to parents operators. The order of rows transferred between operators is essential for correctness. For example, a\n+parent operator may expect the child operator to produce rows that are sorted on a particular attribute.", "originalCommit": "0b7a6aa6bce18aad4827d73050060904d64d396c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyMTE1OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398521158", "bodyText": "The order is enforced for all operators because some optimizer decisions may rely on it. E.g. the optimizer may decide to eliminate the sorting for the sort <- project <- join <- filter <- index scan pipeline, so every operator should preserve the order.\nIn principle, it is possible to relax the order for operators without collation, but that would require adding collation metadata to all operators. The benefit is questionable since all current connection implementations provide ordering anyway.", "author": "devozerov", "createdAt": "2020-03-26T12:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwOTM3Nw=="}], "type": "inlineReview"}, {"oid": "29cc97d0994a8ffdf8ec4dff7f62e906556fd58f", "url": "https://github.com/hazelcast/hazelcast/commit/29cc97d0994a8ffdf8ec4dff7f62e906556fd58f", "message": "Review comments.", "committedDate": "2020-03-26T12:02:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyNjEyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398526126", "bodyText": "Doesn't look like it's returning a partition, more like a partition hash code. Used like a utility function, should be static probably. Some javadoc may help in any case.", "author": "taburet", "createdAt": "2020-03-26T12:16:49Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryOperation.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.internal.util.UUIDSerializationUtil;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+/**\n+ * Base class for query operations.\n+ */\n+public abstract class QueryOperation implements IdentifiedDataSerializable {\n+\n+    public static final int PARTITION_ANY = -1;\n+\n+    private UUID callerId;\n+\n+    protected QueryOperation() {\n+        // No-op.\n+    }\n+\n+    public UUID getCallerId() {\n+        return callerId;\n+    }\n+\n+    public void setCallerId(UUID callerId) {\n+        this.callerId = callerId;\n+    }\n+\n+    public int getPartition() {\n+        return PARTITION_ANY;\n+    }\n+\n+    protected int getPartitionForHash(int hash) {", "originalCommit": "0b7a6aa6bce18aad4827d73050060904d64d396c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzMjkyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398532929", "bodyText": "This function converts an arbitrary integer to a positive integer, which is then interpreted as a logical partition.\nThe notion of \"partition\" is used here to provide an analogy with our partition pool, which also uses logical partitions [1], not physical.\n[1] com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl#getPartitionThreadId(int, int)", "author": "devozerov", "createdAt": "2020-03-26T12:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyNjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzMzQyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398533429", "bodyText": "Additional JavaDocs are added.", "author": "devozerov", "createdAt": "2020-03-26T12:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyNjEyNg=="}], "type": "inlineReview"}, {"oid": "3547e828679d68fe07cbbd9e2d7fa31bbe5ee003", "url": "https://github.com/hazelcast/hazelcast/commit/3547e828679d68fe07cbbd9e2d7fa31bbe5ee003", "message": "JavaDoc.", "committedDate": "2020-03-26T12:26:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzOTExNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398539116", "bodyText": "Looks like a pretty central interface in physical node hierarchy. Probably deserves a better javadoc.", "author": "taburet", "createdAt": "2020-03-26T12:39:19Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/physical/PhysicalNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.physical;\n+\n+import com.hazelcast.nio.serialization.DataSerializable;\n+\n+/**\n+ * Physical node.", "originalCommit": "29cc97d0994a8ffdf8ec4dff7f62e906556fd58f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0MDIxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398540211", "bodyText": "PhysicalNode will be described in detail in future pull requests. Here it is just used to maintain compilation.", "author": "devozerov", "createdAt": "2020-03-26T12:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzOTExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NTg4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398545881", "bodyText": "Does it return an exact value, overestimates or underestimates? One may think it just returns the number of columns, probably a better name is something like get(Over/Under)EstimatedSize.", "author": "taburet", "createdAt": "2020-03-26T12:50:10Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/physical/PhysicalNodeSchema.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.physical;\n+\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Schema of a node.\n+ */\n+public class PhysicalNodeSchema implements FieldTypeProvider {\n+\n+    private final List<QueryDataType> types;\n+    private final int rowWidth;\n+\n+    public PhysicalNodeSchema(List<QueryDataType> types) {\n+        assert types != null;\n+\n+        this.types = Collections.unmodifiableList(types);\n+\n+        rowWidth = calculateRowWidth(types);\n+    }\n+\n+    public static PhysicalNodeSchema combine(PhysicalNodeSchema schema1, PhysicalNodeSchema schema2) {\n+        ArrayList<QueryDataType> types = new ArrayList<>(schema1.types);\n+\n+        types.addAll(schema2.types);\n+\n+        return new PhysicalNodeSchema(types);\n+    }\n+\n+    @Override\n+    public QueryDataType getType(int index) {\n+        assert index <= types.size();\n+\n+        return types.get(index);\n+    }\n+\n+    public List<QueryDataType> getTypes() {\n+        return types;\n+    }\n+\n+    public int getRowWidth() {", "originalCommit": "29cc97d0994a8ffdf8ec4dff7f62e906556fd58f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MTM3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16800#discussion_r398551370", "bodyText": "This value is used to estimate memory requirements. We assume that it is relatively accurate. Bug again, this is not a concern of this ticket. The row width is currently used in IO handling, which will be prepared in a separate PR. I'll add JavaDocs with clarifications and possibly rename the method. Otherwise, we will have unnecessary conflicts.", "author": "devozerov", "createdAt": "2020-03-26T12:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NTg4MQ=="}], "type": "inlineReview"}]}