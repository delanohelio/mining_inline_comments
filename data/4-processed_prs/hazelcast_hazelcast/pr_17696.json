{"pr_number": 17696, "pr_title": "Introduce mode for persistent-memory configuration", "pr_createdAt": "2020-10-07T12:03:58Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17696", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501688493", "bodyText": "If enabled flag is set to false, why do we still have the directory element underneath?", "author": "petrpleshachkov", "createdAt": "2020-10-08T12:41:46Z", "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/node-client-applicationContext-hazelcast.xml", "diffHunk": "@@ -433,7 +433,7 @@\n                           min-block-size=\"10\"\n                           page-size=\"20\">\n             <hz:size unit=\"GIGABYTES\" value=\"256\"/>\n-            <hz:persistent-memory>\n+            <hz:persistent-memory enabled=\"false\" mode=\"MOUNTED\">", "originalCommit": "928fdfbbbc055a5a720504f20c17ba4426259d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MjA5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501962094", "bodyText": "We need to test parsing regardless of the value of enabled. Probably it would be better to set it to true instead since false is the default.", "author": "blazember", "createdAt": "2020-10-08T19:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMDk1OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r502010959", "bodyText": "I kept false instead, this way we have cases both for enabled and disabled persistent memory config.", "author": "blazember", "createdAt": "2020-10-08T21:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4OTQyMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501689422", "bodyText": "If enabledNode is false, shall we go through the directories?", "author": "petrpleshachkov", "createdAt": "2020-10-08T12:43:17Z", "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "diffHunk": "@@ -558,7 +559,24 @@ protected void handleNativeMemory(Node node) {\n             configBuilder.addPropertyValue(\"nativeMemoryConfig\", beanDefinition);\n         }\n \n-        private void handlePersistentMemoryConfig(Node pmemNode, ManagedList<BeanDefinition> directoriesList) {\n+        private void handlePersistentMemoryConfig(Node pmemNode, BeanDefinitionBuilder pmemConfigBuilder,\n+                                                  ManagedList<BeanDefinition> directoriesList) {\n+            Node enabledNode = pmemNode.getAttributes().getNamedItem(\"enabled\");\n+            if (enabledNode != null) {\n+                boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+                pmemConfigBuilder.addPropertyValue(\"enabled\", enabled);\n+            }\n+\n+            Node mode = pmemNode.getAttributes().getNamedItem(\"mode\");\n+            if (mode != null) {\n+                String modeValue = getTextContent(mode);\n+                try {\n+                    pmemConfigBuilder.addPropertyValue(\"mode\", PersistentMemoryMode.valueOf(modeValue));\n+                } catch (Exception ex) {\n+                    throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeValue);\n+                }\n+            }\n+", "originalCommit": "928fdfbbbc055a5a720504f20c17ba4426259d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2Mjk4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501962985", "bodyText": "I think yes. We need to build a config object hierarchy matching the declarative config.", "author": "blazember", "createdAt": "2020-10-08T19:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4OTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MTEyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501691123", "bodyText": "Javadoc would be useful.", "author": "petrpleshachkov", "createdAt": "2020-10-08T12:45:53Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "diffHunk": "@@ -28,11 +28,18 @@\n  * Configuration class for persistent memory devices (e.g. Intel Optane).\n  */\n public class PersistentMemoryConfig {\n+    private boolean enabled;", "originalCommit": "928fdfbbbc055a5a720504f20c17ba4426259d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMTAyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r502011028", "bodyText": "Added", "author": "blazember", "createdAt": "2020-10-08T21:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MTEyMw=="}], "type": "inlineReview"}, {"oid": "0eebe692bab24f521a762fe6ae274c7e667835b6", "url": "https://github.com/hazelcast/hazelcast/commit/0eebe692bab24f521a762fe6ae274c7e667835b6", "message": "Introduce mode for persistent-memory configuration\n\nIntroduce config attribute for the operational mode of the persistent\nmemory. Two modes supported: `MOUNTED (FS DAX)` and `SYSTEM_MEMORY (KMEM\nDAX)`. With this setting, the user can define to use PMEM in the KMEM DAX\nmode. Additionally, an `enabled` toggle is added to `persistent-memory`,\nwhich makes it explicit when persisten memory is used. For legacy\nreasons, if the `persistent-memory-directory` that was introduced in 4.0\nis set, `enabled` is set to `true`, so the users already using\npersistent memory don't need to change their configs. Otherwise, the\npersistent memory should be explicitly enabled by setting `enabled` to\n`true`, since the default is `false`.", "committedDate": "2020-10-12T14:21:57Z", "type": "commit"}, {"oid": "b4635263f5949f26088f504af18f6c2408e0b23a", "url": "https://github.com/hazelcast/hazelcast/commit/b4635263f5949f26088f504af18f6c2408e0b23a", "message": "Test fix: add missing enabled toggle in fullconfig-no-netork yaml config", "committedDate": "2020-10-12T14:21:57Z", "type": "commit"}, {"oid": "1b877bc503e23cef30f90d87cea12627fdab2169", "url": "https://github.com/hazelcast/hazelcast/commit/1b877bc503e23cef30f90d87cea12627fdab2169", "message": "Address review comment", "committedDate": "2020-10-12T14:21:57Z", "type": "commit"}, {"oid": "1b877bc503e23cef30f90d87cea12627fdab2169", "url": "https://github.com/hazelcast/hazelcast/commit/1b877bc503e23cef30f90d87cea12627fdab2169", "message": "Address review comment", "committedDate": "2020-10-12T14:21:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTAyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r503899023", "bodyText": "Looks like this method and none of the overriden methods use the mode argument.", "author": "mmedenjak", "createdAt": "2020-10-13T12:11:49Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "diffHunk": "@@ -312,33 +315,63 @@ protected void fillNativeMemoryConfig(Node node, NativeMemoryConfig nativeMemory\n                 String value = getTextContent(n);\n                 nativeMemoryConfig.setMetadataSpacePercentage(Float.parseFloat(value));\n             } else if (matches(\"persistent-memory-directory\", nodeName)) {\n-                nativeMemoryConfig.getPersistentMemoryConfig()\n-                                  .addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                PersistentMemoryConfig pmemConfig = nativeMemoryConfig.getPersistentMemoryConfig();\n+                pmemConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                // we enable the persistent memory configuration for legacy reasons\n+                pmemConfig.setEnabled(true);\n             } else if (matches(\"persistent-memory\", nodeName)) {\n                 handlePersistentMemoryConfig(nativeMemoryConfig.getPersistentMemoryConfig(), n);\n             }\n         }\n     }\n \n-    protected void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+    private void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+        Node enabledNode = getNamedItemNode(node, \"enabled\");\n+            if (enabledNode != null) {\n+            boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+            persistentMemoryConfig.setEnabled(enabled);\n+        }\n+\n+        final Node modeNode = getNamedItemNode(node, \"mode\");\n+        final String modeStr = getTextContent(modeNode);\n+        PersistentMemoryMode mode = PersistentMemoryMode.MOUNTED;\n+        if (!StringUtil.isNullOrEmptyAfterTrim(modeStr)) {\n+            try {\n+                mode = PersistentMemoryMode.valueOf(modeStr);\n+                persistentMemoryConfig.setMode(mode);\n+            } catch (Exception ex) {\n+                throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeStr);\n+            }\n+        }\n+\n         for (Node parent : childElements(node)) {\n             final String nodeName = cleanNodeName(parent);\n             if (matches(\"directories\", nodeName)) {\n+                if (PersistentMemoryMode.SYSTEM_MEMORY == mode) {\n+                    throw new InvalidConfigurationException(\"Directories for 'persistent-memory' should only be\"\n+                            + \" defined if the 'mode' is set to '\" + PersistentMemoryMode.MOUNTED.name() + \"'\");\n+                }\n+\n                 for (Node dirNode : childElements(parent)) {\n-                    final String childNodeName = cleanNodeName(dirNode);\n-                    if (matches(\"directory\", childNodeName)) {\n-                        Node numaNodeIdNode = getNamedItemNode(dirNode, \"numa-node\");\n-                        int numaNodeId = numaNodeIdNode != null\n-                                ? getIntegerValue(\"numa-node\", getTextContent(numaNodeIdNode))\n-                                : -1;\n-                        String directory = getTextContent(dirNode).trim();\n-                        persistentMemoryConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(directory, numaNodeId));\n-                    }\n+                    handlePersistentMemoryDirectory(persistentMemoryConfig, mode, dirNode);\n                 }\n             }\n         }\n     }\n \n+    protected void handlePersistentMemoryDirectory(PersistentMemoryConfig persistentMemoryConfig,", "originalCommit": "1b877bc503e23cef30f90d87cea12627fdab2169", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDQwMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r504244401", "bodyText": "Good catch, removed.", "author": "blazember", "createdAt": "2020-10-13T20:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTAyMw=="}], "type": "inlineReview"}, {"oid": "74713a3c2ee866ff76b913498bf87da8d5b7f682", "url": "https://github.com/hazelcast/hazelcast/commit/74713a3c2ee866ff76b913498bf87da8d5b7f682", "message": "Return this in all PmemConfig setters", "committedDate": "2020-10-13T20:24:26Z", "type": "commit"}, {"oid": "11d8435b1fe8166fc1a35906934fa6a12415052a", "url": "https://github.com/hazelcast/hazelcast/commit/11d8435b1fe8166fc1a35906934fa6a12415052a", "message": "Address review comment: default PMEM mode in javadoc", "committedDate": "2020-10-13T20:28:45Z", "type": "commit"}, {"oid": "2a1442a8dca6356bec0abc215067459587bb2910", "url": "https://github.com/hazelcast/hazelcast/commit/2a1442a8dca6356bec0abc215067459587bb2910", "message": "Address review comment: remove unused mode in config processor", "committedDate": "2020-10-13T20:36:41Z", "type": "commit"}, {"oid": "c3ca397e83843cc0f473e301135aa52edaf5436b", "url": "https://github.com/hazelcast/hazelcast/commit/c3ca397e83843cc0f473e301135aa52edaf5436b", "message": "Checkstyle", "committedDate": "2020-10-14T10:07:51Z", "type": "commit"}]}