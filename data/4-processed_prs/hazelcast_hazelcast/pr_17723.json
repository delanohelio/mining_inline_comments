{"pr_number": 17723, "pr_title": "SQL: Cancel local queries on member shutdown", "pr_createdAt": "2020-10-14T12:33:22Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17723", "timeline": [{"oid": "47393f1fa373a58f7f9bcee75eac8916e1e3a806", "url": "https://github.com/hazelcast/hazelcast/commit/47393f1fa373a58f7f9bcee75eac8916e1e3a806", "message": "The fix", "committedDate": "2020-10-14T11:33:32Z", "type": "commit"}, {"oid": "4ef5fb22770116a3df40313cfd476644144829b6", "url": "https://github.com/hazelcast/hazelcast/commit/4ef5fb22770116a3df40313cfd476644144829b6", "message": "Test", "committedDate": "2020-10-14T12:09:39Z", "type": "commit"}, {"oid": "3d6e1907916eb1504f801e473fbc586cd8d3f2c2", "url": "https://github.com/hazelcast/hazelcast/commit/3d6e1907916eb1504f801e473fbc586cd8d3f2c2", "message": "Minors", "committedDate": "2020-10-14T12:10:15Z", "type": "commit"}, {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "url": "https://github.com/hazelcast/hazelcast/commit/6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "message": "Minor fix.", "committedDate": "2020-10-14T12:29:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NTA1Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504645056", "bodyText": "Shall we remove an empty test?", "author": "petrpleshachkov", "createdAt": "2020-10-14T12:43:42Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/misc/SqlCancelOnShutdownTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.misc;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlTestInstanceFactory;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test that ensures that queries are cancelled properly in the case of member shutdown.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlCancelOnShutdownTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int KEY_COUNT = 100_000;\n+\n+    private final SqlTestInstanceFactory factory = SqlTestInstanceFactory.create();\n+\n+    private HazelcastInstance instance;\n+\n+    @Before\n+    public void before() {\n+        instance = factory.newHazelcastInstance(smallInstanceConfig());\n+\n+        IMap<Integer, Integer> map = instance.getMap(MAP_NAME);\n+        Map<Integer, Integer> localMap = new HashMap<>();\n+\n+        for (int i = 0; i < KEY_COUNT; i++) {\n+            localMap.put(i, i);\n+        }\n+\n+        map.putAll(localMap);\n+    }\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+\n+        instance = null;\n+    }\n+\n+    @Test\n+    public void testShutdown_initiator() {\n+        QueryStateRegistry stateRegistry = sqlInternalService(instance).getStateRegistry();\n+\n+        try (SqlResult result = instance.getSql().execute(\"SELECT * FROM \" + MAP_NAME)) {\n+            try {\n+                boolean first = true;\n+\n+                for (SqlRow ignore : result) {\n+                    if (first) {\n+                        assertStateCount(stateRegistry, 1);\n+\n+                        instance.shutdown();\n+\n+                        first = false;\n+                    }\n+                }\n+\n+                fail(\"Must fail\");\n+            } catch (HazelcastSqlException e) {\n+                assertEquals(SqlErrorCode.GENERIC, e.getCode());\n+                assertEquals(\"SQL query has been cancelled due to member shutdown\", e.getMessage());\n+\n+                assertStateCount(stateRegistry, 0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testShutdown_participant() {\n+", "originalCommit": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3OTE5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504679192", "bodyText": "Fixed", "author": "devozerov", "createdAt": "2020-10-14T13:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NTA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0OTY3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504649670", "bodyText": "Shall we create a test with the client to check that the fix works for remote client?", "author": "petrpleshachkov", "createdAt": "2020-10-14T12:50:31Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/misc/SqlCancelOnShutdownTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.misc;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlTestInstanceFactory;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test that ensures that queries are cancelled properly in the case of member shutdown.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlCancelOnShutdownTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int KEY_COUNT = 100_000;\n+\n+    private final SqlTestInstanceFactory factory = SqlTestInstanceFactory.create();\n+\n+    private HazelcastInstance instance;\n+\n+    @Before\n+    public void before() {\n+        instance = factory.newHazelcastInstance(smallInstanceConfig());\n+\n+        IMap<Integer, Integer> map = instance.getMap(MAP_NAME);\n+        Map<Integer, Integer> localMap = new HashMap<>();\n+\n+        for (int i = 0; i < KEY_COUNT; i++) {\n+            localMap.put(i, i);\n+        }\n+\n+        map.putAll(localMap);\n+    }\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+\n+        instance = null;\n+    }\n+\n+    @Test\n+    public void testShutdown_initiator() {\n+        QueryStateRegistry stateRegistry = sqlInternalService(instance).getStateRegistry();\n+\n+        try (SqlResult result = instance.getSql().execute(\"SELECT * FROM \" + MAP_NAME)) {", "originalCommit": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3OTc3Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504679773", "bodyText": "The problem is specific to member queries only. Client failure scenarios are already tested in the SqlErrorClientTest.", "author": "devozerov", "createdAt": "2020-10-14T13:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0OTY3MA=="}], "type": "inlineReview"}, {"oid": "9fe5c71c31e74dfc5154a53d742e9d1991b15606", "url": "https://github.com/hazelcast/hazelcast/commit/9fe5c71c31e74dfc5154a53d742e9d1991b15606", "message": "Remove empty test", "committedDate": "2020-10-14T13:31:50Z", "type": "commit"}]}