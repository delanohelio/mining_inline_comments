{"pr_number": 17688, "pr_title": "Make IndexStatsChangingNumberOfMembersTest more reliable", "pr_createdAt": "2020-10-06T07:03:54Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17688", "timeline": [{"oid": "283c38860d913290e49b7ca64646e72083b54976", "url": "https://github.com/hazelcast/hazelcast/commit/283c38860d913290e49b7ca64646e72083b54976", "message": "1) Fixed index partition marking in the MapReplicationStateHolder; 2) Improved reliability of IndexStatsChangingNumberOfMembersTest", "committedDate": "2020-10-06T06:55:35Z", "type": "commit"}, {"oid": "817dac32098520cec7a37f7b3f820ff5dcb48c36", "url": "https://github.com/hazelcast/hazelcast/commit/817dac32098520cec7a37f7b3f820ff5dcb48c36", "message": "WIP", "committedDate": "2020-10-06T07:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500177025", "bodyText": "Should we not reevaluate this UUID to partition mapping in the assertTrueEventually block? I'm asking because I can imagine that this was invoked with the 1st member being the master member while the 0th member might have had a stale partition table. We then wait until all members have the same partition table as the 0th, which might not happen.", "author": "mmedenjak", "createdAt": "2020-10-06T10:43:51Z", "path": "hazelcast/src/test/java/com/hazelcast/map/IndexStatsChangingNumberOfMembersTest.java", "diffHunk": "@@ -409,7 +418,36 @@ protected double calculateOverallSelectivity(long initialHits, double initialTot\n     }\n \n     protected void addIndex(IMap<?, ?> map) {\n-        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(\"this\"));\n+        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(INDEX_NAME));\n     }\n \n+    protected void awaitStable(String mapName, HazelcastInstance... instances) {\n+        // Await for migrations to complete.\n+        waitAllForSafeState(instances);\n+\n+        // Make sure that all indexes contain expected partitions.\n+        Map<UUID, PartitionIdSet> memberToPartitions = new HashMap<>();\n+\n+        Set<Partition> partitions = instances[0].getPartitionService().getPartitions();\n+\n+        for (Partition partition : partitions) {", "originalCommit": "817dac32098520cec7a37f7b3f820ff5dcb48c36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MDgyMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500240820", "bodyText": "This additional check is invoked after waitAllForSafeState, so the partition distribution is expected to be stable at this point.", "author": "devozerov", "createdAt": "2020-10-06T12:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTY3Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500241672", "bodyText": "Good point, thanks!", "author": "mmedenjak", "createdAt": "2020-10-06T12:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ=="}], "type": "inlineReview"}]}