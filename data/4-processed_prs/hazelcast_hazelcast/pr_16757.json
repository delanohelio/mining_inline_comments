{"pr_number": 16757, "pr_title": "Add missing onCommitSuccess/onCommitFailure to XATransaction ", "pr_createdAt": "2020-03-16T13:54:49Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16757", "timeline": [{"oid": "d53c44872c681ad423b2fde78de7f3e8358268db", "url": "https://github.com/hazelcast/hazelcast/commit/d53c44872c681ad423b2fde78de7f3e8358268db", "message": "Add missing onCommitSuccess/onCommitFailure to XATransaction", "committedDate": "2020-03-16T13:53:26Z", "type": "commit"}, {"oid": "252f51ec9a4174276c7f97f705261e940469a0ff", "url": "https://github.com/hazelcast/hazelcast/commit/252f51ec9a4174276c7f97f705261e940469a0ff", "message": "add xa near caching test", "committedDate": "2020-03-20T10:04:35Z", "type": "commit"}, {"oid": "252f51ec9a4174276c7f97f705261e940469a0ff", "url": "https://github.com/hazelcast/hazelcast/commit/252f51ec9a4174276c7f97f705261e940469a0ff", "message": "add xa near caching test", "committedDate": "2020-03-20T10:04:35Z", "type": "forcePushed"}, {"oid": "89cec92505d722cd76d43b4a0de65024bb0b8b67", "url": "https://github.com/hazelcast/hazelcast/commit/89cec92505d722cd76d43b4a0de65024bb0b8b67", "message": "fix checkstyle", "committedDate": "2020-03-20T10:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTQzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16757#discussion_r396549431", "bodyText": "Shall we fail the test here?", "author": "petrpleshachkov", "createdAt": "2020-03-23T15:43:28Z", "path": "hazelcast/src/test/java/com/hazelcast/xa/NearCacheXATest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.xa;\n+\n+import com.atomikos.icatch.jta.UserTransactionManager;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.NearCacheConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IMap;\n+import com.hazelcast.core.TransactionalMap;\n+import com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.transaction.HazelcastXAResource;\n+import com.hazelcast.transaction.TransactionContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.transaction.Transaction;\n+import javax.transaction.xa.XAResource;\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.util.Collection;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n+@Category(QuickTest.class)\n+public class NearCacheXATest extends HazelcastTestSupport {\n+\n+    @Parameterized.Parameters(name = \"format:{0} serializeKeys:{1}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(new Object[][]{\n+                {InMemoryFormat.BINARY, true},\n+                {InMemoryFormat.BINARY, false},\n+                {InMemoryFormat.OBJECT, true},\n+                {InMemoryFormat.OBJECT, false},\n+        });\n+    }\n+\n+    @Parameterized.Parameter\n+    public InMemoryFormat inMemoryFormat;\n+\n+    @Parameterized.Parameter(value = 1)\n+    public boolean serializeKeys;\n+\n+\n+    private UserTransactionManager tm;\n+\n+    public void cleanAtomikosLogs() {\n+        try {\n+            File currentDir = new File(\".\");\n+            final File[] tmLogs = currentDir.listFiles(new FilenameFilter() {\n+                @Override\n+                public boolean accept(File dir, String name) {\n+                    return name.endsWith(\".epoch\") || name.startsWith(\"tmlog\");\n+                }\n+            });\n+            for (File tmLog : tmLogs) {\n+                tmLog.delete();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        cleanAtomikosLogs();\n+        tm = new UserTransactionManager();\n+        tm.setTransactionTimeout(60);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        tm.close();\n+        cleanAtomikosLogs();\n+    }\n+\n+    @Test\n+    public void after_txn_commit_near_cache_should_be_invalidated() throws Exception {\n+        Config cfg = getConfig();\n+        String mapName = \"cache\";\n+        MapConfig cacheConfig = cfg.getMapConfig(mapName);\n+        NearCacheConfig nearCacheConfig = new NearCacheConfig();\n+        nearCacheConfig.setInvalidateOnChange(true)\n+                .setCacheLocalEntries(true)\n+                .setInMemoryFormat(inMemoryFormat)\n+                .setSerializeKeys(serializeKeys);\n+\n+        cacheConfig.setNearCacheConfig(nearCacheConfig);\n+\n+        HazelcastInstance server = createHazelcastInstance(cfg);\n+        IMap map = server.getMap(mapName);\n+\n+        String key = \"key\";\n+        String oldValue = \"oldValue\";\n+        String updatedValue = \"updatedValue\";\n+\n+        // populate imap\n+        map.put(key, oldValue);\n+\n+        // populate near cache\n+        Object valueReadBeforeTxnFromNonTxnMap = map.get(key);\n+\n+        HazelcastXAResource xaResource = server.getXAResource();\n+\n+        // begin txn\n+        tm.begin();\n+        Object valueReadInsideTxnFromTxnMapBeforeUpdate = null;\n+        Object valueReadInsideTxnFromTxnMapAfterUpdate = null;\n+        Object valueReadInsideTxnFromNonTxnMapAfterUpdate = null;\n+        boolean error = false;\n+        try {\n+            Transaction transaction = tm.getTransaction();\n+            transaction.enlistResource(xaResource);\n+            TransactionContext ctx = xaResource.getTransactionContext();\n+\n+            TransactionalMap txnMap = ctx.getMap(mapName);\n+            valueReadInsideTxnFromTxnMapBeforeUpdate = txnMap.get(key);\n+\n+            txnMap.put(key, updatedValue);\n+\n+            valueReadInsideTxnFromTxnMapAfterUpdate = txnMap.get(key);\n+            valueReadInsideTxnFromNonTxnMapAfterUpdate = map.get(key);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            error = true;", "originalCommit": "89cec92505d722cd76d43b4a0de65024bb0b8b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1ODY2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16757#discussion_r396558660", "bodyText": "done", "author": "ahmetmircik", "createdAt": "2020-03-23T15:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTQzMQ=="}], "type": "inlineReview"}, {"oid": "08107059533723fbc12753639e1818b55f194950", "url": "https://github.com/hazelcast/hazelcast/commit/08107059533723fbc12753639e1818b55f194950", "message": "address review comment", "committedDate": "2020-03-23T15:54:04Z", "type": "commit"}]}