{"pr_number": 16877, "pr_title": "Added support for Map.forEach() #14913", "pr_createdAt": "2020-04-11T14:11:09Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16877", "timeline": [{"oid": "75546e2b9aa192ac3bddff87ae4af7498e74442c", "url": "https://github.com/hazelcast/hazelcast/commit/75546e2b9aa192ac3bddff87ae4af7498e74442c", "message": "Added support for Map.forEach() #14913", "committedDate": "2020-04-11T14:08:58Z", "type": "commit"}, {"oid": "2fd3606677f82bfdd14951beab67deff6fec3dfc", "url": "https://github.com/hazelcast/hazelcast/commit/2fd3606677f82bfdd14951beab67deff6fec3dfc", "message": "Added javadoc #14913", "committedDate": "2020-04-11T14:24:40Z", "type": "commit"}, {"oid": "2a73b0c2c8b1953dddc203830eb712d3964e20cf", "url": "https://github.com/hazelcast/hazelcast/commit/2a73b0c2c8b1953dddc203830eb712d3964e20cf", "message": "Added javadoc #14913", "committedDate": "2020-04-12T11:49:16Z", "type": "commit"}, {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "url": "https://github.com/hazelcast/hazelcast/commit/f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "message": "Fixed checkstyle errors #14913", "committedDate": "2020-04-13T17:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NzA1OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r407997058", "bodyText": "You may also add that the implementation will pull in all of the map data onto the local member in this case because it uses IMap#entrySet() to iterate over the entries.", "author": "mmedenjak", "createdAt": "2020-04-14T09:30:45Z", "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -2978,4 +2980,29 @@ default void addIndex(IndexType type, String... attributes) {\n      */\n     V computeIfAbsent(@Nonnull K key, @Nonnull Function<? super K, ? extends V> mappingFunction);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * <p> </p>\n+     * <p>\n+     *     If the supplied {@code action} is a lambda, anonymous class or an inner class,\n+     *     it would be executed locally. Same would happen if it is not serializable.", "originalCommit": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5Nzc0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r407997744", "bodyText": "In this case, I'd propose the user to simply use IMap#executeOnEntries(com.hazelcast.map.EntryProcessor<K,V,R>) directly, since it can change the value by calling java.util.Map.Entry#setValue from within the entry processor.", "author": "mmedenjak", "createdAt": "2020-04-14T09:31:59Z", "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -2978,4 +2980,29 @@ default void addIndex(IndexType type, String... attributes) {\n      */\n     V computeIfAbsent(@Nonnull K key, @Nonnull Function<? super K, ? extends V> mappingFunction);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * <p> </p>\n+     * <p>\n+     *     If the supplied {@code action} is a lambda, anonymous class or an inner class,\n+     *     it would be executed locally. Same would happen if it is not serializable.\n+     *     This may result in multiple round-trips between hazelcast nodes.\n+     *</p>\n+     * <p>\n+     *     Otherwise (i.e. if it is a top-level class or a member class, and it is serializable), the function <i>may be</i> sent\n+     *     to the servers which own the partitions/keys. This results in a much less number of remote calls.\n+     *     Note that in this case, side effects of the {@code action} may not be visible to the local JVM\n+     *     If users intend to install the changed value in the map entry, the {@code action} must do so itself (e.g. by", "originalCommit": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTI2Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r408001262", "bodyText": "Since forEach doesn't use these values, maybe we can avoid sending them back to the caller by simply returning null.", "author": "mmedenjak", "createdAt": "2020-04-14T09:37:36Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/KeyValueConsumingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+public class KeyValueConsumingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiConsumer<? super K, ? super V> action;\n+\n+    public KeyValueConsumingEntryProcessor() {\n+    }\n+\n+    public KeyValueConsumingEntryProcessor(BiConsumer<? super K, ? super V> action) {\n+        this.action = action;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        action.accept(entry.getKey(), entry.getValue());\n+        return entry.getValue();", "originalCommit": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1fd9ae5d3ab6926677814478b56bf93c11bee3ee", "url": "https://github.com/hazelcast/hazelcast/commit/1fd9ae5d3ab6926677814478b56bf93c11bee3ee", "message": "Addressed review comments and refactored a test #14913", "committedDate": "2020-04-14T14:15:20Z", "type": "commit"}]}