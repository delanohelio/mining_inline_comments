{"pr_number": 16958, "pr_title": "Add ConfigRecognizer API", "pr_createdAt": "2020-05-05T15:27:14Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16958", "timeline": [{"oid": "9457ddcdd1925eccc1ed59ed287e4ae1c0244afe", "url": "https://github.com/hazelcast/hazelcast/commit/9457ddcdd1925eccc1ed59ed287e4ae1c0244afe", "message": "Add ConfigRecognizer API\n\nThis commit introduces the ConfigRecognition API that is meant to\nrecognize if a provided declarative configuration is recognized by the\nrules defined in a given implementation. The main use case for this\nimplementation is to recognize member, client and failover client XML\nand YAML configurations just by looking into the content of the\nconfiguration, without building any actual configuration.\n\nAlong with the API the following three implementations are added:\n- MemberConfigRecognizer for recognizing member XML and YAML\nconfigurations\n- ClientConfigRecognizer for recognizing client XML and YAML\nconfigurations\n- ClientFailoverConfigRecognizer for recognizing failover client XML and\nYAML configurations\n\nAll the three are extensible with custom recognizers so that even those\nconfigurations can be recognized that would otherwise remain\nunrecognized with the built-in set of recognizers that recognizes XML\nand YAML configurations by checking the root node in the provided\nconfiguration.\n\nThe API recognizes configuration provided in InputStreams only, while\nthe ConfigBuilder implementations can be built from files defined by\ntheir location and URLs too. The reason for lacking the support for\nthese two options is that both are easy to convert to InputStreams and\nthat handling errors caused by non-existing resources, missing\nprivileges etc should be handled outside of this API with potentially\nhaving more contextual information.\n\nThe built-in implementations honour parse errors with unrecognized\nconfiguration. The reason is that the provided InputStream can be tested\nboth for XML and YAML configuration and at least one is expected to\nlead to parse errors.\n\nImplements #16866", "committedDate": "2020-05-11T22:23:12Z", "type": "commit"}, {"oid": "9457ddcdd1925eccc1ed59ed287e4ae1c0244afe", "url": "https://github.com/hazelcast/hazelcast/commit/9457ddcdd1925eccc1ed59ed287e4ae1c0244afe", "message": "Add ConfigRecognizer API\n\nThis commit introduces the ConfigRecognition API that is meant to\nrecognize if a provided declarative configuration is recognized by the\nrules defined in a given implementation. The main use case for this\nimplementation is to recognize member, client and failover client XML\nand YAML configurations just by looking into the content of the\nconfiguration, without building any actual configuration.\n\nAlong with the API the following three implementations are added:\n- MemberConfigRecognizer for recognizing member XML and YAML\nconfigurations\n- ClientConfigRecognizer for recognizing client XML and YAML\nconfigurations\n- ClientFailoverConfigRecognizer for recognizing failover client XML and\nYAML configurations\n\nAll the three are extensible with custom recognizers so that even those\nconfigurations can be recognized that would otherwise remain\nunrecognized with the built-in set of recognizers that recognizes XML\nand YAML configurations by checking the root node in the provided\nconfiguration.\n\nThe API recognizes configuration provided in InputStreams only, while\nthe ConfigBuilder implementations can be built from files defined by\ntheir location and URLs too. The reason for lacking the support for\nthese two options is that both are easy to convert to InputStreams and\nthat handling errors caused by non-existing resources, missing\nprivileges etc should be handled outside of this API with potentially\nhaving more contextual information.\n\nThe built-in implementations honour parse errors with unrecognized\nconfiguration. The reason is that the provided InputStream can be tested\nboth for XML and YAML configuration and at least one is expected to\nlead to parse errors.\n\nImplements #16866", "committedDate": "2020-05-11T22:23:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzU2OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r423613569", "bodyText": "Leftover.", "author": "blazember", "createdAt": "2020-05-12T10:00:17Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/ConfigStreamRecognizer.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config;\n+\n+public interface ConfigStreamRecognizer {", "originalCommit": "9457ddcdd1925eccc1ed59ed287e4ae1c0244afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "37cd9d8298fd816fbf45ffe4789f8eb99391a04e", "url": "https://github.com/hazelcast/hazelcast/commit/37cd9d8298fd816fbf45ffe4789f8eb99391a04e", "message": "Remove leftovers", "committedDate": "2020-05-12T10:02:10Z", "type": "commit"}, {"oid": "749d57ec76dd4c9b1d4e4641630903eb512f6eca", "url": "https://github.com/hazelcast/hazelcast/commit/749d57ec76dd4c9b1d4e4641630903eb512f6eca", "message": "Support not resetable InputStream impls", "committedDate": "2020-06-04T17:01:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Njg2OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442786869", "bodyText": "Minor: does this class need to be public API?", "author": "mmedenjak", "createdAt": "2020-06-19T11:28:45Z", "path": "hazelcast/src/main/java/com/hazelcast/config/ConfigStream.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Stream wrapping or copying a generic {@link InputStream} for the\n+ * {@link ConfigRecognizer} API. The purpose of this class is to make\n+ * the provided {@link InputStream} resetable so that multiple\n+ * {@link ConfigRecognizer} implementations can iterate over the stream.\n+ * There are even basic {@link InputStream} implementations that don't\n+ * support {@link InputStream#reset()} such as {@link BufferedInputStream}.\n+ * If calling {@code reset()} on the provided implementation fails with\n+ * an exception, this class reads the stream into a {@code byte[]} and\n+ * delegates all {@link InputStream} method calls to a\n+ * {@link ByteArrayInputStream} created with this {@code byte[]}. To\n+ * prevent OOM issues, the size of this {@code byte[]} is limited to 4096\n+ * bytes. This limit can be configured in the constructor.\n+ *\n+ * @see ConfigRecognizer\n+ */\n+public class ConfigStream extends InputStream {", "originalCommit": "749d57ec76dd4c9b1d4e4641630903eb512f6eca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5OTM5Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442799396", "bodyText": "Actually found out it needs to, nevermind.", "author": "mmedenjak", "createdAt": "2020-06-19T12:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Njg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Nzc5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442787792", "bodyText": "Minor: can we exit early if it was recognized?", "author": "mmedenjak", "createdAt": "2020-06-19T11:30:54Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractConfigRecognizer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config;\n+\n+import com.hazelcast.config.ConfigRecognizer;\n+import com.hazelcast.config.ConfigStream;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Abstract composite {@link ConfigRecognizer} implementation that uses\n+ * multiple recognizers under the hood.\n+ */\n+public class AbstractConfigRecognizer implements ConfigRecognizer {\n+    protected final Collection<ConfigRecognizer> recognizers;\n+\n+    public AbstractConfigRecognizer(Collection<ConfigRecognizer> recognizers) {\n+        this.recognizers = recognizers;\n+    }\n+\n+    @Override\n+    public boolean isRecognized(ConfigStream configStream) throws Exception {\n+        boolean recognized = false;\n+        for (ConfigRecognizer recognizer : recognizers) {\n+            configStream.reset();\n+            recognized = recognized || recognizer.isRecognized(configStream);", "originalCommit": "749d57ec76dd4c9b1d4e4641630903eb512f6eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}