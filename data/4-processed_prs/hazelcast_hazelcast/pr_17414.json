{"pr_number": 17414, "pr_title": "Do not read HD entries from SQL schema resolver", "pr_createdAt": "2020-08-26T13:09:17Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17414", "timeline": [{"oid": "757034ed2ae02f88976f033b50e141361a6edd4b", "url": "https://github.com/hazelcast/hazelcast/commit/757034ed2ae02f88976f033b50e141361a6edd4b", "message": "Fix", "committedDate": "2020-08-26T13:05:15Z", "type": "commit"}, {"oid": "0e67662c24edde8f3db40cdfdec8cf6a04a56552", "url": "https://github.com/hazelcast/hazelcast/commit/0e67662c24edde8f3db40cdfdec8cf6a04a56552", "message": "Merge branch 'master' into sql-hd-sampling-fix", "committedDate": "2020-08-26T13:05:49Z", "type": "commit"}, {"oid": "47e6181470541c4b2f029b4d25b6da6134afe76a", "url": "https://github.com/hazelcast/hazelcast/commit/47e6181470541c4b2f029b4d25b6da6134afe76a", "message": "Merge branch 'master' into sql-hd-sampling-fix", "committedDate": "2020-08-26T13:08:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MDU0OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17414#discussion_r477290549", "bodyText": "We already have a similar exception trying to run a map scan without index. Shall we reuse the code?", "author": "petrpleshachkov", "createdAt": "2020-08-26T13:15:18Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -174,11 +159,120 @@ private PartitionedMapTable createTable(\n         }\n     }\n \n-    private static PartitionedMapTable emptyMap(String mapName) {\n+    @SuppressWarnings(\"rawtypes\")\n+    private FieldsMetadata getHeapMapFields(MapServiceContext context, String name) {\n+        for (PartitionContainer partitionContainer : context.getPartitionContainers()) {\n+            // Resolve sample.\n+            RecordStore<?> recordStore = partitionContainer.getExistingRecordStore(name);\n+\n+            if (recordStore == null) {\n+                continue;\n+            }\n+\n+            Iterator<Map.Entry<Data, Record>> recordStoreIterator = recordStore.iterator();\n+\n+            if (!recordStoreIterator.hasNext()) {\n+                continue;\n+            }\n+\n+            Map.Entry<Data, Record> entry = recordStoreIterator.next();\n+\n+            return getFieldMetadata(entry.getKey(), entry.getValue().getValue());\n+        }\n+\n+        return FieldsMetadata.EMPTY_ERROR;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private FieldsMetadata getHdMapFields(MapContainer mapContainer) {\n+        if (!nodeEngine.getProperties().getBoolean(GLOBAL_HD_INDEX_ENABLED)) {\n+            // Cannot resolve fields when concurrent indexes are disabled\n+            return FieldsMetadata.HD_ERROR;\n+        }\n+\n+        InternalIndex[] indexes = mapContainer.getIndexes().getIndexes();\n+\n+        if (indexes == null || indexes.length == 0) {\n+            // Cannot resolve fields when the map doesn't have concurrent indexes\n+            return FieldsMetadata.HD_ERROR;\n+        }\n+\n+        InternalIndex index = indexes[0];\n+\n+        Iterator<QueryableEntry> entryIterator = index.getSqlRecordIterator();\n+\n+        if (!entryIterator.hasNext()) {\n+            return FieldsMetadata.EMPTY_ERROR;\n+        }\n+\n+        QueryableEntry entry = entryIterator.next();\n+\n+        return getFieldMetadata(entry.getKey(), entry.getValue());\n+    }\n+\n+    private static PartitionedMapTable emptyError(String mapName) {\n         QueryException error = QueryException.error(\n             \"Cannot resolve IMap schema because it doesn't have entries on the local member: \" + mapName\n         );\n \n         return new PartitionedMapTable(mapName, error);\n     }\n+\n+    private static PartitionedMapTable hdError(String mapName) {\n+        QueryException error = QueryException.error(\"Cannot query the IMap \\\"\" + mapName", "originalCommit": "47e6181470541c4b2f029b4d25b6da6134afe76a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MTc5OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17414#discussion_r477291799", "bodyText": "The exception you mentioned is moved here", "author": "devozerov", "createdAt": "2020-08-26T13:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MDU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MTk1Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17414#discussion_r477291953", "bodyText": "Ahh, I see that the code has been moved.", "author": "petrpleshachkov", "createdAt": "2020-08-26T13:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MDU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5Nzk4MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17414#discussion_r477297980", "bodyText": "If we have NULL values in the index, the iterator will return an entry corresponding to it. I guess this is OK for further resolution logic? In the value, some attributes might be missing...", "author": "petrpleshachkov", "createdAt": "2020-08-26T13:25:57Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -174,11 +159,120 @@ private PartitionedMapTable createTable(\n         }\n     }\n \n-    private static PartitionedMapTable emptyMap(String mapName) {\n+    @SuppressWarnings(\"rawtypes\")\n+    private FieldsMetadata getHeapMapFields(MapServiceContext context, String name) {\n+        for (PartitionContainer partitionContainer : context.getPartitionContainers()) {\n+            // Resolve sample.\n+            RecordStore<?> recordStore = partitionContainer.getExistingRecordStore(name);\n+\n+            if (recordStore == null) {\n+                continue;\n+            }\n+\n+            Iterator<Map.Entry<Data, Record>> recordStoreIterator = recordStore.iterator();\n+\n+            if (!recordStoreIterator.hasNext()) {\n+                continue;\n+            }\n+\n+            Map.Entry<Data, Record> entry = recordStoreIterator.next();\n+\n+            return getFieldMetadata(entry.getKey(), entry.getValue().getValue());\n+        }\n+\n+        return FieldsMetadata.EMPTY_ERROR;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private FieldsMetadata getHdMapFields(MapContainer mapContainer) {\n+        if (!nodeEngine.getProperties().getBoolean(GLOBAL_HD_INDEX_ENABLED)) {\n+            // Cannot resolve fields when concurrent indexes are disabled\n+            return FieldsMetadata.HD_ERROR;\n+        }\n+\n+        InternalIndex[] indexes = mapContainer.getIndexes().getIndexes();\n+\n+        if (indexes == null || indexes.length == 0) {\n+            // Cannot resolve fields when the map doesn't have concurrent indexes\n+            return FieldsMetadata.HD_ERROR;\n+        }\n+\n+        InternalIndex index = indexes[0];\n+\n+        Iterator<QueryableEntry> entryIterator = index.getSqlRecordIterator();", "originalCommit": "47e6181470541c4b2f029b4d25b6da6134afe76a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwNTE5MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17414#discussion_r477305191", "bodyText": "We do not read index keys here, only actual entries. Therefore, the resolution logic is not affected.", "author": "devozerov", "createdAt": "2020-08-26T13:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5Nzk4MA=="}], "type": "inlineReview"}]}