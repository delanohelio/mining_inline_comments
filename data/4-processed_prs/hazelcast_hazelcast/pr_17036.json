{"pr_number": 17036, "pr_title": "Clean up TimedMemberState - remove all metric related fields", "pr_createdAt": "2020-06-02T09:35:13Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17036", "timeline": [{"oid": "76996b30f7422a60eb91ee4f97038ab55eb1c1f9", "url": "https://github.com/hazelcast/hazelcast/commit/76996b30f7422a60eb91ee4f97038ab55eb1c1f9", "message": "Fix tests", "committedDate": "2020-06-02T11:15:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNjY2OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r433916669", "bodyText": "Why is it deprecated instead of removed?", "author": "emre-aydin", "createdAt": "2020-06-02T14:22:54Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberPartitionStateImpl.java", "diffHunk": "@@ -37,6 +37,7 @@\n \n     List<Integer> partitions = new ArrayList<Integer>(DEFAULT_PARTITION_COUNT);\n     boolean memberStateSafe;\n+    @Deprecated", "originalCommit": "b7c3b183f58dbdaf2247c8d5a86914308618e36a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNzk3MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r433917971", "bodyText": "I see that it is removed now.", "author": "emre-aydin", "createdAt": "2020-06-02T14:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNjY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxOTM4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r433919388", "bodyText": "It was an overlook. I've just pushed be0c0bd which fixes it.", "author": "puzpuzpuz", "createdAt": "2020-06-02T14:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNjY2OQ=="}], "type": "inlineReview"}, {"oid": "11272889136f75d1adc5108ec5154f4cecf20da7", "url": "https://github.com/hazelcast/hazelcast/commit/11272889136f75d1adc5108ec5154f4cecf20da7", "message": "Remove certain MemberStateImpl fields", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "c927a8bf0e14a631daf637c11e188955db4464e2", "url": "https://github.com/hazelcast/hazelcast/commit/c927a8bf0e14a631daf637c11e188955db4464e2", "message": "Remove unused fields from MemberStateImpl", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "3b7c6dd6a24ea555df23fa37f7482a26d7e6316c", "url": "https://github.com/hazelcast/hazelcast/commit/3b7c6dd6a24ea555df23fa37f7482a26d7e6316c", "message": "Fix tests", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "f01477054efae84471917ed187068b06a258be6f", "url": "https://github.com/hazelcast/hazelcast/commit/f01477054efae84471917ed187068b06a258be6f", "message": "Remove DS metrics from MemberStateImpl", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "18d90ec873061495c49df3a80eb0c409e1b79565", "url": "https://github.com/hazelcast/hazelcast/commit/18d90ec873061495c49df3a80eb0c409e1b79565", "message": "Remove redundant JsonSerializable from *StatsImpl classes", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "url": "https://github.com/hazelcast/hazelcast/commit/b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "message": "Remove redundant probe field from MemberPartitionStateImpl", "committedDate": "2020-06-03T07:45:49Z", "type": "commit"}, {"oid": "b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "url": "https://github.com/hazelcast/hazelcast/commit/b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "message": "Remove redundant probe field from MemberPartitionStateImpl", "committedDate": "2020-06-03T07:45:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MzA5OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434563099", "bodyText": "Minor: maps -> queue", "author": "blazember", "createdAt": "2020-06-03T13:24:27Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java", "diffHunk": "@@ -244,195 +222,153 @@ protected void createNodeState(MemberStateImpl memberState) {\n         memberState.setNodeState(nodeState);\n     }\n \n-    private void createWanSyncState(MemberStateImpl memberState) {\n-        WanReplicationService wanReplicationService = instance.node.nodeEngine.getWanReplicationService();\n-        WanSyncState wanSyncState = wanReplicationService.getWanSyncState();\n-        if (wanSyncState != null) {\n-            memberState.setWanSyncState(wanSyncState);\n-        }\n-    }\n-\n     private void createMemState(MemberStateImpl memberState,\n                                 Collection<StatisticsAwareService> services) {\n-        int count = 0;\n         Config config = instance.getConfig();\n         for (StatisticsAwareService service : services) {\n             if (service instanceof MapService) {\n-                count = handleMap(memberState, count, config, ((MapService) service).getStats());\n+                handleMap(memberState, config, ((MapService) service).getStats());\n             } else if (service instanceof MultiMapService) {\n-                count = handleMultimap(memberState, count, config, ((MultiMapService) service).getStats());\n+                handleMultiMap(memberState, config, ((MultiMapService) service).getStats());\n             } else if (service instanceof QueueService) {\n-                count = handleQueue(memberState, count, config, ((QueueService) service).getStats());\n+                handleQueue(memberState, config, ((QueueService) service).getStats());\n             } else if (service instanceof TopicService) {\n-                count = handleTopic(memberState, count, config, ((TopicService) service).getStats());\n+                handleTopic(memberState, config, ((TopicService) service).getStats());\n             } else if (service instanceof ReliableTopicService) {\n-                count = handleReliableTopic(memberState, count, config,\n-                        ((ReliableTopicService) service).getStats());\n+                handleReliableTopic(memberState, config, ((ReliableTopicService) service).getStats());\n             } else if (service instanceof DistributedExecutorService) {\n-                count = handleExecutorService(memberState, count, config,\n-                        ((DistributedExecutorService) service).getStats());\n+                handleExecutorService(memberState, config, ((DistributedExecutorService) service).getStats());\n             } else if (service instanceof ReplicatedMapService) {\n-                count = handleReplicatedMap(memberState, count, config, ((ReplicatedMapService) service).getStats());\n+                handleReplicatedMap(memberState, config, ((ReplicatedMapService) service).getStats());\n             } else if (service instanceof PNCounterService) {\n-                count = handlePNCounter(memberState, count, config, ((PNCounterService) service).getStats());\n+                handlePNCounter(memberState, config, ((PNCounterService) service).getStats());\n             } else if (service instanceof FlakeIdGeneratorService) {\n-                count = handleFlakeIdGenerator(memberState, count, config,\n-                        ((FlakeIdGeneratorService) service).getStats());\n+                handleFlakeIdGenerator(memberState, config, ((FlakeIdGeneratorService) service).getStats());\n             } else if (service instanceof CacheService) {\n-                count = handleCache(memberState, count, (CacheService) service);\n+                handleCache(memberState, (CacheService) service);\n             }\n         }\n \n         WanReplicationService wanReplicationService = instance.node.nodeEngine.getWanReplicationService();\n         Map<String, LocalWanStats> wanStats = wanReplicationService.getStats();\n         if (wanStats != null) {\n-            count = handleWan(memberState, count, wanStats);\n+            handleWan(memberState, wanStats);\n         }\n     }\n \n-    private int handleFlakeIdGenerator(MemberStateImpl memberState, int count, Config config,\n-                                       Map<String, LocalFlakeIdGeneratorStats> flakeIdstats) {\n-        for (Map.Entry<String, LocalFlakeIdGeneratorStats> entry : flakeIdstats.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleFlakeIdGenerator(MemberStateImpl memberState, Config config,\n+                                        Map<String, LocalFlakeIdGeneratorStats> flakeIdStats) {\n+        Set<String> flakeIdGeneratorsWithStats = createHashSet(flakeIdStats.size());\n+        for (String name : flakeIdStats.keySet()) {\n             if (config.findFlakeIdGeneratorConfig(name).isStatisticsEnabled()) {\n-                LocalFlakeIdGeneratorStats stats = entry.getValue();\n-                memberState.putLocalFlakeIdStats(name, stats);\n-                ++count;\n+                flakeIdGeneratorsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setFlakeIdGeneratorsWithStats(flakeIdGeneratorsWithStats);\n     }\n \n-    private int handleExecutorService(MemberStateImpl memberState, int count, Config config,\n-                                      Map<String, LocalExecutorStats> executorServices) {\n-\n-        for (Map.Entry<String, LocalExecutorStats> entry : executorServices.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleExecutorService(MemberStateImpl memberState, Config config,\n+                                       Map<String, LocalExecutorStats> executorServices) {\n+        Set<String> executorsWithStats = createHashSet(executorServices.size());\n+        for (String name : executorServices.keySet()) {\n             if (config.findExecutorConfig(name).isStatisticsEnabled()) {\n-                LocalExecutorStats stats = entry.getValue();\n-                memberState.putLocalExecutorStats(name, stats);\n-                ++count;\n+                executorsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setExecutorsWithStats(executorsWithStats);\n     }\n \n-    private int handleMultimap(MemberStateImpl memberState, int count, Config config, Map<String, LocalMultiMapStats> multiMaps) {\n-        for (Map.Entry<String, LocalMultiMapStats> entry : multiMaps.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleMultiMap(MemberStateImpl memberState, Config config,\n+                                Map<String, LocalMultiMapStats> multiMaps) {\n+        Set<String> mapsWithStats = createHashSet(multiMaps.size());\n+        for (String name : multiMaps.keySet()) {\n             if (config.findMultiMapConfig(name).isStatisticsEnabled()) {\n-                LocalMultiMapStats stats = entry.getValue();\n-                memberState.putLocalMultiMapStats(name, stats);\n-                ++count;\n+                mapsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setMultiMapsWithStats(mapsWithStats);\n     }\n \n-    private int handleReplicatedMap(MemberStateImpl memberState, int count, Config\n-            config, Map<String, LocalReplicatedMapStats> replicatedMaps) {\n-        for (Map.Entry<String, LocalReplicatedMapStats> entry : replicatedMaps.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleReplicatedMap(MemberStateImpl memberState, Config config,\n+                                     Map<String, LocalReplicatedMapStats> replicatedMaps) {\n+        Set<String> mapsWithStats = createHashSet(replicatedMaps.size());\n+        for (String name : replicatedMaps.keySet()) {\n             if (config.findReplicatedMapConfig(name).isStatisticsEnabled()) {\n-                LocalReplicatedMapStats stats = entry.getValue();\n-                memberState.putLocalReplicatedMapStats(name, stats);\n-                ++count;\n+                mapsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setReplicatedMapsWithStats(mapsWithStats);\n     }\n \n-    private int handlePNCounter(MemberStateImpl memberState, int count, Config config,\n-                                Map<String, LocalPNCounterStats> counters) {\n-        for (Map.Entry<String, LocalPNCounterStats> entry : counters.entrySet()) {\n-            String name = entry.getKey();\n+    private void handlePNCounter(MemberStateImpl memberState, Config config,\n+                                 Map<String, LocalPNCounterStats> counters) {\n+        Set<String> countersWithStats = createHashSet(counters.size());\n+        for (String name : counters.keySet()) {\n             if (config.findPNCounterConfig(name).isStatisticsEnabled()) {\n-                LocalPNCounterStats stats = entry.getValue();\n-                memberState.putLocalPNCounterStats(name, stats);\n-                ++count;\n+                countersWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setPNCountersWithStats(countersWithStats);\n     }\n \n-    private int handleReliableTopic(MemberStateImpl memberState, int count, Config config, Map<String, LocalTopicStats> topics) {\n-        for (Map.Entry<String, LocalTopicStats> entry : topics.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleReliableTopic(MemberStateImpl memberState, Config config,\n+                                     Map<String, LocalTopicStats> topics) {\n+        Set<String> topicsWithStats = createHashSet(topics.size());\n+        for (String name : topics.keySet()) {\n             if (config.findReliableTopicConfig(name).isStatisticsEnabled()) {\n-                LocalTopicStats stats = entry.getValue();\n-                memberState.putLocalReliableTopicStats(name, stats);\n-                ++count;\n+                topicsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setReliableTopicsWithStats(topicsWithStats);\n     }\n \n-    private int handleTopic(MemberStateImpl memberState, int count, Config config, Map<String, LocalTopicStats> topics) {\n-        for (Map.Entry<String, LocalTopicStats> entry : topics.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleTopic(MemberStateImpl memberState, Config config, Map<String, LocalTopicStats> topics) {\n+        Set<String> topicsWithStats = createHashSet(topics.size());\n+        for (String name : topics.keySet()) {\n             if (config.findTopicConfig(name).isStatisticsEnabled()) {\n-                LocalTopicStats stats = entry.getValue();\n-                memberState.putLocalTopicStats(name, stats);\n-                ++count;\n+                topicsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setTopicsWithStats(topicsWithStats);\n     }\n \n-    private int handleQueue(MemberStateImpl memberState, int count, Config config, Map<String, LocalQueueStats> queues) {\n-        for (Map.Entry<String, LocalQueueStats> entry : queues.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleQueue(MemberStateImpl memberState, Config config, Map<String, LocalQueueStats> queues) {\n+        Set<String> mapsWithStats = createHashSet(queues.size());", "originalCommit": "b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MjM2MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434582361", "bodyText": "Arhhhh, I confused handleMap() with this method when renaming local variables. \ud83d\ude43\nAddressed in 3bae9fb", "author": "puzpuzpuz", "createdAt": "2020-06-03T13:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MzIwOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434563209", "bodyText": "Minor: queues -> maps", "author": "blazember", "createdAt": "2020-06-03T13:24:38Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java", "diffHunk": "@@ -244,195 +222,153 @@ protected void createNodeState(MemberStateImpl memberState) {\n         memberState.setNodeState(nodeState);\n     }\n \n-    private void createWanSyncState(MemberStateImpl memberState) {\n-        WanReplicationService wanReplicationService = instance.node.nodeEngine.getWanReplicationService();\n-        WanSyncState wanSyncState = wanReplicationService.getWanSyncState();\n-        if (wanSyncState != null) {\n-            memberState.setWanSyncState(wanSyncState);\n-        }\n-    }\n-\n     private void createMemState(MemberStateImpl memberState,\n                                 Collection<StatisticsAwareService> services) {\n-        int count = 0;\n         Config config = instance.getConfig();\n         for (StatisticsAwareService service : services) {\n             if (service instanceof MapService) {\n-                count = handleMap(memberState, count, config, ((MapService) service).getStats());\n+                handleMap(memberState, config, ((MapService) service).getStats());\n             } else if (service instanceof MultiMapService) {\n-                count = handleMultimap(memberState, count, config, ((MultiMapService) service).getStats());\n+                handleMultiMap(memberState, config, ((MultiMapService) service).getStats());\n             } else if (service instanceof QueueService) {\n-                count = handleQueue(memberState, count, config, ((QueueService) service).getStats());\n+                handleQueue(memberState, config, ((QueueService) service).getStats());\n             } else if (service instanceof TopicService) {\n-                count = handleTopic(memberState, count, config, ((TopicService) service).getStats());\n+                handleTopic(memberState, config, ((TopicService) service).getStats());\n             } else if (service instanceof ReliableTopicService) {\n-                count = handleReliableTopic(memberState, count, config,\n-                        ((ReliableTopicService) service).getStats());\n+                handleReliableTopic(memberState, config, ((ReliableTopicService) service).getStats());\n             } else if (service instanceof DistributedExecutorService) {\n-                count = handleExecutorService(memberState, count, config,\n-                        ((DistributedExecutorService) service).getStats());\n+                handleExecutorService(memberState, config, ((DistributedExecutorService) service).getStats());\n             } else if (service instanceof ReplicatedMapService) {\n-                count = handleReplicatedMap(memberState, count, config, ((ReplicatedMapService) service).getStats());\n+                handleReplicatedMap(memberState, config, ((ReplicatedMapService) service).getStats());\n             } else if (service instanceof PNCounterService) {\n-                count = handlePNCounter(memberState, count, config, ((PNCounterService) service).getStats());\n+                handlePNCounter(memberState, config, ((PNCounterService) service).getStats());\n             } else if (service instanceof FlakeIdGeneratorService) {\n-                count = handleFlakeIdGenerator(memberState, count, config,\n-                        ((FlakeIdGeneratorService) service).getStats());\n+                handleFlakeIdGenerator(memberState, config, ((FlakeIdGeneratorService) service).getStats());\n             } else if (service instanceof CacheService) {\n-                count = handleCache(memberState, count, (CacheService) service);\n+                handleCache(memberState, (CacheService) service);\n             }\n         }\n \n         WanReplicationService wanReplicationService = instance.node.nodeEngine.getWanReplicationService();\n         Map<String, LocalWanStats> wanStats = wanReplicationService.getStats();\n         if (wanStats != null) {\n-            count = handleWan(memberState, count, wanStats);\n+            handleWan(memberState, wanStats);\n         }\n     }\n \n-    private int handleFlakeIdGenerator(MemberStateImpl memberState, int count, Config config,\n-                                       Map<String, LocalFlakeIdGeneratorStats> flakeIdstats) {\n-        for (Map.Entry<String, LocalFlakeIdGeneratorStats> entry : flakeIdstats.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleFlakeIdGenerator(MemberStateImpl memberState, Config config,\n+                                        Map<String, LocalFlakeIdGeneratorStats> flakeIdStats) {\n+        Set<String> flakeIdGeneratorsWithStats = createHashSet(flakeIdStats.size());\n+        for (String name : flakeIdStats.keySet()) {\n             if (config.findFlakeIdGeneratorConfig(name).isStatisticsEnabled()) {\n-                LocalFlakeIdGeneratorStats stats = entry.getValue();\n-                memberState.putLocalFlakeIdStats(name, stats);\n-                ++count;\n+                flakeIdGeneratorsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setFlakeIdGeneratorsWithStats(flakeIdGeneratorsWithStats);\n     }\n \n-    private int handleExecutorService(MemberStateImpl memberState, int count, Config config,\n-                                      Map<String, LocalExecutorStats> executorServices) {\n-\n-        for (Map.Entry<String, LocalExecutorStats> entry : executorServices.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleExecutorService(MemberStateImpl memberState, Config config,\n+                                       Map<String, LocalExecutorStats> executorServices) {\n+        Set<String> executorsWithStats = createHashSet(executorServices.size());\n+        for (String name : executorServices.keySet()) {\n             if (config.findExecutorConfig(name).isStatisticsEnabled()) {\n-                LocalExecutorStats stats = entry.getValue();\n-                memberState.putLocalExecutorStats(name, stats);\n-                ++count;\n+                executorsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setExecutorsWithStats(executorsWithStats);\n     }\n \n-    private int handleMultimap(MemberStateImpl memberState, int count, Config config, Map<String, LocalMultiMapStats> multiMaps) {\n-        for (Map.Entry<String, LocalMultiMapStats> entry : multiMaps.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleMultiMap(MemberStateImpl memberState, Config config,\n+                                Map<String, LocalMultiMapStats> multiMaps) {\n+        Set<String> mapsWithStats = createHashSet(multiMaps.size());\n+        for (String name : multiMaps.keySet()) {\n             if (config.findMultiMapConfig(name).isStatisticsEnabled()) {\n-                LocalMultiMapStats stats = entry.getValue();\n-                memberState.putLocalMultiMapStats(name, stats);\n-                ++count;\n+                mapsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setMultiMapsWithStats(mapsWithStats);\n     }\n \n-    private int handleReplicatedMap(MemberStateImpl memberState, int count, Config\n-            config, Map<String, LocalReplicatedMapStats> replicatedMaps) {\n-        for (Map.Entry<String, LocalReplicatedMapStats> entry : replicatedMaps.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleReplicatedMap(MemberStateImpl memberState, Config config,\n+                                     Map<String, LocalReplicatedMapStats> replicatedMaps) {\n+        Set<String> mapsWithStats = createHashSet(replicatedMaps.size());\n+        for (String name : replicatedMaps.keySet()) {\n             if (config.findReplicatedMapConfig(name).isStatisticsEnabled()) {\n-                LocalReplicatedMapStats stats = entry.getValue();\n-                memberState.putLocalReplicatedMapStats(name, stats);\n-                ++count;\n+                mapsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setReplicatedMapsWithStats(mapsWithStats);\n     }\n \n-    private int handlePNCounter(MemberStateImpl memberState, int count, Config config,\n-                                Map<String, LocalPNCounterStats> counters) {\n-        for (Map.Entry<String, LocalPNCounterStats> entry : counters.entrySet()) {\n-            String name = entry.getKey();\n+    private void handlePNCounter(MemberStateImpl memberState, Config config,\n+                                 Map<String, LocalPNCounterStats> counters) {\n+        Set<String> countersWithStats = createHashSet(counters.size());\n+        for (String name : counters.keySet()) {\n             if (config.findPNCounterConfig(name).isStatisticsEnabled()) {\n-                LocalPNCounterStats stats = entry.getValue();\n-                memberState.putLocalPNCounterStats(name, stats);\n-                ++count;\n+                countersWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setPNCountersWithStats(countersWithStats);\n     }\n \n-    private int handleReliableTopic(MemberStateImpl memberState, int count, Config config, Map<String, LocalTopicStats> topics) {\n-        for (Map.Entry<String, LocalTopicStats> entry : topics.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleReliableTopic(MemberStateImpl memberState, Config config,\n+                                     Map<String, LocalTopicStats> topics) {\n+        Set<String> topicsWithStats = createHashSet(topics.size());\n+        for (String name : topics.keySet()) {\n             if (config.findReliableTopicConfig(name).isStatisticsEnabled()) {\n-                LocalTopicStats stats = entry.getValue();\n-                memberState.putLocalReliableTopicStats(name, stats);\n-                ++count;\n+                topicsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setReliableTopicsWithStats(topicsWithStats);\n     }\n \n-    private int handleTopic(MemberStateImpl memberState, int count, Config config, Map<String, LocalTopicStats> topics) {\n-        for (Map.Entry<String, LocalTopicStats> entry : topics.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleTopic(MemberStateImpl memberState, Config config, Map<String, LocalTopicStats> topics) {\n+        Set<String> topicsWithStats = createHashSet(topics.size());\n+        for (String name : topics.keySet()) {\n             if (config.findTopicConfig(name).isStatisticsEnabled()) {\n-                LocalTopicStats stats = entry.getValue();\n-                memberState.putLocalTopicStats(name, stats);\n-                ++count;\n+                topicsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setTopicsWithStats(topicsWithStats);\n     }\n \n-    private int handleQueue(MemberStateImpl memberState, int count, Config config, Map<String, LocalQueueStats> queues) {\n-        for (Map.Entry<String, LocalQueueStats> entry : queues.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleQueue(MemberStateImpl memberState, Config config, Map<String, LocalQueueStats> queues) {\n+        Set<String> mapsWithStats = createHashSet(queues.size());\n+        for (String name : queues.keySet()) {\n             if (config.findQueueConfig(name).isStatisticsEnabled()) {\n-                LocalQueueStats stats = entry.getValue();\n-                memberState.putLocalQueueStats(name, stats);\n-                ++count;\n+                mapsWithStats.add(name);\n             }\n         }\n-        return count;\n+        memberState.setQueuesWithStats(mapsWithStats);\n     }\n \n-    private int handleMap(MemberStateImpl memberState, int count, Config config, Map<String, LocalMapStats> maps) {\n-        for (Map.Entry<String, LocalMapStats> entry : maps.entrySet()) {\n-            String name = entry.getKey();\n+    private void handleMap(MemberStateImpl memberState, Config config, Map<String, LocalMapStats> maps) {\n+        Set<String> queuesWithStats = createHashSet(maps.size());", "originalCommit": "b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MjUwOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434582508", "bodyText": "Addressed in 3bae9fb", "author": "puzpuzpuz", "createdAt": "2020-06-03T13:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MzIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2ODU1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434568552", "bodyText": "It seems this method is not called.", "author": "blazember", "createdAt": "2020-06-03T13:32:25Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java", "diffHunk": "@@ -58,34 +51,10 @@\n      */\n     String getName();\n \n-    Map<String, Long> getRuntimeProps();\n-\n-    LocalMapStats getLocalMapStats(String mapName);\n-\n-    LocalMultiMapStats getLocalMultiMapStats(String mapName);\n-\n-    LocalQueueStats getLocalQueueStats(String queueName);\n-\n-    LocalTopicStats getLocalTopicStats(String topicName);\n-\n-    LocalTopicStats getReliableLocalTopicStats(String reliableTopicName);\n-\n-    LocalPNCounterStats getLocalPNCounterStats(String pnCounterName);\n-\n-    LocalReplicatedMapStats getLocalReplicatedMapStats(String replicatedMapName);\n-\n-    LocalExecutorStats getLocalExecutorStats(String executorName);\n-\n-    LocalCacheStats getLocalCacheStats(String cacheName);\n-\n     LocalWanStats getLocalWanStats(String schemeName);", "originalCommit": "b831c1f7b821a8b1c795dfb9f962ec6f16a0bd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzE4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17036#discussion_r434583181", "bodyText": "Yup, and it was like this before the PR if I'm not mistaken. This whole interface feels artificial.\nRemoved the method in 3bae9fb", "author": "puzpuzpuz", "createdAt": "2020-06-03T13:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2ODU1Mg=="}], "type": "inlineReview"}, {"oid": "3bae9fb45929a28d57d909a33aa7192c11018b94", "url": "https://github.com/hazelcast/hazelcast/commit/3bae9fb45929a28d57d909a33aa7192c11018b94", "message": "Address review comments", "committedDate": "2020-06-03T13:50:42Z", "type": "commit"}]}