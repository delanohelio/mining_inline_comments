{"pr_number": 4951, "pr_title": "restrict SAML service lookups to matching entityIDs", "pr_createdAt": "2020-10-02T15:26:28Z", "pr_url": "https://github.com/apereo/cas/pull/4951", "timeline": [{"oid": "b59f6a5c978a6ac5d14a9bef717f62347f04e511", "url": "https://github.com/apereo/cas/commit/b59f6a5c978a6ac5d14a9bef717f62347f04e511", "message": "triggering github actions tests since Gradle 6.7 doesn't work with my environment", "committedDate": "2020-10-15T18:50:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjMzNA==", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302334", "bodyText": "You don't need this. Use mocks, and then do when(myresolver.resolve(...)).thenThrow()...", "author": "mmoayyed", "createdAt": "2020-10-16T11:09:17Z", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));\n+    }\n+\n+    private static class BrokenMetadataResolver implements SamlRegisteredServiceCachingMetadataResolver {\n+        public MetadataResolver resolve(SamlRegisteredService service, CriteriaSet criteriaSet) {\n+            throw new IllegalStateException(\"This method shouldn't have been called\");\n+        }\n+\n+        public void invalidate() {\n+        }\n+\n+        public void invalidate(SamlRegisteredService s, CriteriaSet c) {\n+        }", "originalCommit": "6118a5cb6c1f5c519583db8fa029b84a565b95bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjY4Mg==", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302682", "bodyText": "Remove author tag please, and put it at the top of the class instead.", "author": "mmoayyed", "createdAt": "2020-10-16T11:09:44Z", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris", "originalCommit": "6118a5cb6c1f5c519583db8fa029b84a565b95bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzUyNQ==", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303525", "bodyText": "You must assert the result somehow to actually verify things. The verification might in fact be : \"make sure nothing is thrown\", etc. if that's what you're going for.", "author": "mmoayyed", "createdAt": "2020-10-16T11:10:43Z", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));", "originalCommit": "6118a5cb6c1f5c519583db8fa029b84a565b95bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzYyMg==", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303622", "bodyText": "Switch to val", "author": "mmoayyed", "createdAt": "2020-10-16T11:10:51Z", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);", "originalCommit": "6118a5cb6c1f5c519583db8fa029b84a565b95bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "011f1c1aa7e3f8afd3e917fcb8954564da036726", "url": "https://github.com/apereo/cas/commit/011f1c1aa7e3f8afd3e917fcb8954564da036726", "message": "restrict SAML service lookups to matching entityIDs", "committedDate": "2020-10-16T17:03:59Z", "type": "commit"}, {"oid": "9a5cc4399d336787285b7587963f2bf2b2406f78", "url": "https://github.com/apereo/cas/commit/9a5cc4399d336787285b7587963f2bf2b2406f78", "message": "triggering github actions tests since Gradle 6.7 doesn't work with my environment", "committedDate": "2020-10-16T17:03:59Z", "type": "commit"}, {"oid": "61a7da6285195919089f6c42d91038df96dfddcd", "url": "https://github.com/apereo/cas/commit/61a7da6285195919089f6c42d91038df96dfddcd", "message": "fix some issues and a non-mockito test", "committedDate": "2020-10-16T17:03:59Z", "type": "commit"}, {"oid": "74b2987848bafd419c2a2d33960b87cbfd6eb388", "url": "https://github.com/apereo/cas/commit/74b2987848bafd419c2a2d33960b87cbfd6eb388", "message": "moved to mockito staticMock tests", "committedDate": "2020-10-16T17:03:59Z", "type": "commit"}, {"oid": "74b2987848bafd419c2a2d33960b87cbfd6eb388", "url": "https://github.com/apereo/cas/commit/74b2987848bafd419c2a2d33960b87cbfd6eb388", "message": "moved to mockito staticMock tests", "committedDate": "2020-10-16T17:03:59Z", "type": "forcePushed"}]}