{"pr_number": 2513, "pr_title": "ioContainer in IOProvider.getIO(...) is allowed to be null.", "pr_createdAt": "2020-11-01T23:35:31Z", "pr_url": "https://github.com/apache/netbeans/pull/2513", "timeline": [{"oid": "e072bc5ed376e398fde85ba21f580eaeed60c254", "url": "https://github.com/apache/netbeans/commit/e072bc5ed376e398fde85ba21f580eaeed60c254", "message": "ioContainer in IOProvider.getIO(...) is allowed to be null.", "committedDate": "2020-11-01T23:33:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1Nzc3Nw==", "url": "https://github.com/apache/netbeans/pull/2513#discussion_r515757777", "bodyText": "Do I read the change correctly?\nPreviously the Lookup had two elements one of the type Action[] and one of the type IOContainer. The new Lookup is going to have n-elements of type Action and optionally one element of type IOContainer.", "author": "JaroslavTulach", "createdAt": "2020-11-02T06:13:41Z", "path": "platform/openide.io/src/org/openide/io/BridgingIOProvider.java", "diffHunk": "@@ -92,9 +93,16 @@ public InputOutput getIO(String name, Action[] actions,\n     @Override\n     public InputOutput getIO(String name, boolean newIO, Action[] actions,\n             IOContainer ioContainer) {\n+        Object[] lookupContent;\n+        if (ioContainer != null) {\n+            lookupContent = Arrays.copyOf(actions, actions.length + 1, Object[].class);\n+            lookupContent[actions.length] = ioContainer;\n+        } else {\n+            lookupContent = actions;\n+        }\n         return new BridgingInputOutput(\n                 providerDelegate.getIO(name, newIO,\n-                        Lookups.fixed((Object[]) actions, ioContainer)));", "originalCommit": "e072bc5ed376e398fde85ba21f580eaeed60c254", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1ODA4Ng==", "url": "https://github.com/apache/netbeans/pull/2513#discussion_r515758086", "bodyText": "I'd expect a failure here in the previous version of the code.", "author": "JaroslavTulach", "createdAt": "2020-11-02T06:14:45Z", "path": "platform/openide.io/test/unit/src/org/openide/io/BridgingIOProviderTest.java", "diffHunk": "@@ -78,9 +84,37 @@ public void bridgeToNullColor() throws IOException {\n         assertEquals(\"Null!\", sb.toString());\n     }\n \n+    @Test\n+    public void nullIOContainer() throws IOException {\n+        MockIOP mock = new MockIOP();\n+        IOProvider provider = BridgingIOProvider.create(mock);\n+        Action testAction = new AbstractAction(\"test\") {\n+            @Override public void actionPerformed(ActionEvent e) {}\n+        };\n+        InputOutput io = provider.getIO(\"test\", false, new Action[] {testAction}, null);\n+        assertSame(testAction, mock.last.lookup.lookup(Action.class));\n+    }\n+\n+    @Test\n+    public void hasIOContainer() throws IOException {\n+        MockIOP mock = new MockIOP();\n+        IOProvider provider = BridgingIOProvider.create(mock);\n+        Action testAction = new AbstractAction(\"test\") {\n+            @Override public void actionPerformed(ActionEvent e) {}\n+        };\n+        IOContainer ioContainer = IOContainer.create(new MockIOProvider());\n+        InputOutput io = provider.getIO(\"test\", false, new Action[] {testAction}, ioContainer);\n+        assertSame(testAction, mock.last.lookup.lookup(Action.class));", "originalCommit": "e072bc5ed376e398fde85ba21f580eaeed60c254", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}