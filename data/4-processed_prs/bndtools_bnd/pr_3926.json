{"pr_number": 3926, "pr_title": "Pkriens/generate", "pr_createdAt": "2020-04-16T14:40:16Z", "pr_url": "https://github.com/bndtools/bnd/pull/3926", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MjEwMQ==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r411962101", "bodyText": "Can you add an example, that an external Plugin? It is a but unclear how such an instruction would need too look like.", "author": "juergen-albert", "createdAt": "2020-04-21T08:00:54Z", "path": "docs/_instructions/generate.md", "diffHunk": "@@ -0,0 +1,56 @@\n+---\n+layout: default\n+class: Project\n+title: -generate srcs ';output=' DIR ( ';' ( system | generate ))* ...\n+summary: Generate sources \n+since: 5.1\n+---\n+\n+Virtually all the work bnd is concerned about happens in generating the JAR file. The key idea is to _pull_ resources in the JAR, instead of the more traditional _push_ model of other builders. This works well, except for _generating source code_. This generating step must happen before the compiler is called, and the compiler is generally called before bnd becomes active. \n+\n+This `-generate` instruction specifies the code generating steps that must be executed. Source code can be generated by _system_ commands or the bnd _external plugins_.\n+ \n+\t-generate\t::= \tclause ( ',' clause )*\n+\tclause\t\t::= \tFILESET ';' 'output=' DIR (';' option )*\n+\tsrc\t\t::=\tFILESET\n+\toption\t\t::= \t'system=' STRING\n+\t\t\t|   'generate=' STRING\n+\n+For each clause, the key of the clause is used to establish an Ant File Set, e.g. `foo/**.in`. This a glob expression with the exception that the double wildcard ('**') indicates to any depth of directories. The `output` attribute _must_ specify a directory. If the output must be compiled this directory must be on the bnd source path.\n+\n+If any file in the source is older than any file in the target (to any depth), or the target is empty, the clause is considered _stale_. If the clause is not stale, it is further ignored. If no further options are set on the clause, a warning is generated that some files are out of date. \n+\n+If either a warning or error option is given, these will be executed on the project.\n+\n+If a command `STRING` is given it is executed as in the `${system}` macro. If the command `STRING` starts with a \n+minus sign (`-`) then a failure is not an error, it is reported as warning.\n+\n+The generate option will execute an _external plugin_ with the `objectClass` (service type) of `Generator<? extends Options>`. External plugins can come from an external repository or a local workspace project.\n+\n+The `generate` value is a _command line_. It can use the standard _unix_ like way of specifying a command. It supports flags (boolean parameters) and parameter that take a value. When this external plugin is executed, it is expected to create files fall within the _target_, if not, an error is reported. These changed or created files are refreshed in Eclipse.\n+\n+## Examples\n+\n+Include in the bnd build is a _javagen_ external plugin that is useful to generate Java code based on build information. It uses a template directory with Java files. When the external plugin runs, it will use all these files to write matching Java files in the output directory, in a matching package directory. The input Java files can be prefixed with a properties header:\n+\n+    ---\n+    foo: 1\n+    ---\n+    package foobar;\n+    class Foo {\n+        int foo = ${foo};\n+    }\n+\n+The optional header is removed and then the remainder of the file is ran through the bnd macro processor.\n+\n+If this example is used, it is necessary to add a new _source folder_. In Eclipse, this requires adding an entry in the `.classpath` file, in bnd it requires the modification of the `src` property.  \n+\n+    src=${^src},src-gen\n+\n+Assuming that the input files are in the `gen` directory, the following can be used to automatically generate the output files based on the input files.\n+ \n+    -generate:   \\\n+        gen/**.java; \\ \n+            output='src-gen/' ; \\ \n+            generate='javagen -o src-gen gen/'\n+", "originalCommit": "7e9467562644bed9e49c42d724f82ff9ad63e9bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5MzM2OA==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r411993368", "bodyText": "https://github.com/bndtools/bnd/pull/3926/files#diff-3ea5fc0a86dd03fb518bf256100a9e27", "author": "pkriens", "createdAt": "2020-04-21T08:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MjEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwNTI4Mg==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r412105282", "bodyText": "I'm not quite sure what the diff should show me.", "author": "juergen-albert", "createdAt": "2020-04-21T11:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MjEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3Mzc5NA==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r412973794", "bodyText": "Sorry, was supposed to be a link to the external-plugins", "author": "pkriens", "createdAt": "2020-04-22T13:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MjEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzAzMw==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r411973033", "bodyText": "Am I seeing this right, can we use this then with -plugin.test: my.external.plugin.MyPlugin;prop1=1?", "author": "juergen-albert", "createdAt": "2020-04-21T08:16:39Z", "path": "docs/_chapters/875-external-plugins.md", "diffHunk": "@@ -0,0 +1,33 @@\n+---\n+title:  Plugins\n+layout: default\n+---\n+\n+## External Plugins\n+\n+External Plugins are external code to bnd code but that can be executed from within bnd. The JARs for this code are coming from the Workspace repository. The External Plugin Namespace defines the namespace (`bnd.external.plugin`)  and the following attributes:\n+\n+| Attribute                     | Description                   |\n+|-------------------------------+-------------------------------|\n+| `bnd.external.plugin`         | Defines the name of the plugin, should follow simple token syntax|\n+| objectClass                   | The interface type the implementation should implement|\n+| implementation                | The implementation fully qualified class name|\n+| subtype                       | Optional subtype when the `objectClass` has a type parameter |\n+\n+There is an annotation, `aQute.bnd.service.externalplugin.ExternalPlugin`, that can be applied on a type.\n+\n+For example:\n+\n+    aQute.bnd.service.externalplugin.ExternalPlugin(\n+        name          = \"calling\", \n+        objectClass   = Callable.class, \n+        subtype       = String.class)\n+    public class CallImpl implements Callable<String> {\n+        public String call() throws Exception {\n+            return \"hello\";\n+        }\n+    }\n+\n+In Bndtools, you can declare any class as an ExternalPlugin. The automatic build features will automatically build the JAR of the plugin and this will immediately become available in the rest of the build. If you use external plugins from the local workspace, make sure to declare a  `-dependson` to the external plugin project in any project that uses it, this dependency is not automatically detected. \n+\n+A JAR can contain any number of external plugins. It must ensure that it does not have any dependencies outside the bndlib it was compiled against.", "originalCommit": "7e9467562644bed9e49c42d724f82ff9ad63e9bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5NDMzMA==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r411994330", "bodyText": "No, external plugins are only supported by generate right now. However, they are completely independent of them. If they are appreciated, we should integrate them with the internal plugins.", "author": "pkriens", "createdAt": "2020-04-21T08:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwNDc2OA==", "url": "https://github.com/bndtools/bnd/pull/3926#discussion_r412104768", "bodyText": "+1 from me!", "author": "juergen-albert", "createdAt": "2020-04-21T11:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzAzMw=="}], "type": "inlineReview"}, {"oid": "ea8705bbd2eff0377d5a9b3f0e33ffe666bef390", "url": "https://github.com/bndtools/bnd/commit/ea8705bbd2eff0377d5a9b3f0e33ffe666bef390", "message": "[libg] utilities\n\n- Converter supports \u2013 File. Strings are resolved \n  against the working directory or an explicitly set \n  directory.\n- Exceptions \u2013 In causes(), use the exception simple name\n  if the message is null\n- Fixup directory names in the input specification\n- SpecInterface \u2013 Convert a String[] arguments with\n  unix like options and parameters into an interface\n  as is done in CommandLine, but now standalone and some\n  new features.\n- Strings \u2013 Some additional splitQuoted* methods that\n  take a separator.\n- IntCounter \u2013 zero check methods\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:19:40Z", "type": "commit"}, {"oid": "77d3dcb88e7b64c8f42531ff78b505a3121df4b3", "url": "https://github.com/bndtools/bnd/commit/77d3dcb88e7b64c8f42531ff78b505a3121df4b3", "message": "[bndlib] Minor changes\n\n- Renamed ClassIndex\n- Warning if -runvm is space separated instead of\n  comma separated\n- Added access to the attributes for instructions\n  mapped to interfaces\n- refactoring ResourcesRepository to extract commonality\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:27:47Z", "type": "commit"}, {"oid": "1d3d0a21efe1ba23cc5095dfbe7f980003daea04", "url": "https://github.com/bndtools/bnd/commit/1d3d0a21efe1ba23cc5095dfbe7f980003daea04", "message": "[result] Added asError() method\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:27:47Z", "type": "commit"}, {"oid": "96afb3ba13dc2459dd0c287101bf11ff675f58dc", "url": "https://github.com/bndtools/bnd/commit/96afb3ba13dc2459dd0c287101bf11ff675f58dc", "message": "[bndtools] bug fixes\n\n- Fixed NPE in comparator of Cap-Req\n- Added path to actual resource in info Cap.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:32:08Z", "type": "commit"}, {"oid": "155c701373257e1b1b954017fd77064c3103ab67", "url": "https://github.com/bndtools/bnd/commit/155c701373257e1b1b954017fd77064c3103ab67", "message": "[external plugins] Plugins that are executed from the repositories\n\nExternal plugins are loaded from JARs that are in the repositories. They are identified by the ExternalPluginNamespace.\n\nThe Workspace.call() method provides convenience access.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:32:08Z", "type": "commit"}, {"oid": "66742dd4beea7bcd314b6822ead51bfe230c3af6", "url": "https://github.com/bndtools/bnd/commit/66742dd4beea7bcd314b6822ead51bfe230c3af6", "message": "[generate] Source code generation\n\nProvides a new -generate instruction that\ncan be used to generate source code that gets\ncompiled before it is jarred.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:32:43Z", "type": "commit"}, {"oid": "793fa3badb5bf3752e9b4da8b7c8be4830becb4e", "url": "https://github.com/bndtools/bnd/commit/793fa3badb5bf3752e9b4da8b7c8be4830becb4e", "message": "[javagen] A simple external plugin template processor \n\nAn example external plugin and template processor\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:32:44Z", "type": "commit"}, {"oid": "65dfc1a0ddc65e65c69eba9b62874f01b35ec5b6", "url": "https://github.com/bndtools/bnd/commit/65dfc1a0ddc65e65c69eba9b62874f01b35ec5b6", "message": "[lgtm] fixes\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:33:40Z", "type": "commit"}, {"oid": "37c2f109b63736997cf9e60712b6ed0a5249ab60", "url": "https://github.com/bndtools/bnd/commit/37c2f109b63736997cf9e60712b6ed0a5249ab60", "message": "[rebase] Make sure we got the head version\n\nI had some enhancement but it does not seem to be used so lets take the latest\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:38:05Z", "type": "commit"}, {"oid": "37c2f109b63736997cf9e60712b6ed0a5249ab60", "url": "https://github.com/bndtools/bnd/commit/37c2f109b63736997cf9e60712b6ed0a5249ab60", "message": "[rebase] Make sure we got the head version\n\nI had some enhancement but it does not seem to be used so lets take the latest\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-04-22T13:38:05Z", "type": "forcePushed"}]}