{"pr_number": 15119, "pr_title": "added simple median aggregator", "pr_createdAt": "2020-10-30T14:57:54Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15119", "timeline": [{"oid": "a912eaaa9f64cbd35cc405b26c41ff33c45e6314", "url": "https://github.com/vespa-engine/vespa/commit/a912eaaa9f64cbd35cc405b26c41ff33c45e6314", "message": "added simple median aggregator", "committedDate": "2020-10-30T14:56:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjYzNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15119#discussion_r515382635", "bodyText": "if you want, you can always do this, because if \"cnt\" is odd then (cnt/2) == (cnt-1)/2 and (x+x)/2 == x", "author": "arnej27959", "createdAt": "2020-10-30T21:05:29Z", "path": "eval/src/vespa/eval/eval/aggr.h", "diffHunk": "@@ -120,6 +121,32 @@ template <typename T> class Max {\n     constexpr T result() const { return _max; }\n };\n \n+template <typename T> class Median {\n+private:\n+    std::vector<T> _seen;\n+public:\n+    constexpr Median() : _seen() {}\n+    constexpr Median(T value) : _seen({value}) {}\n+    constexpr void sample(T value) { _seen.push_back(value); }\n+    constexpr void merge(const Median &rhs) {\n+        for (T value: rhs._seen) {\n+            _seen.push_back(value);\n+        }\n+    };\n+    constexpr T result() const {\n+        if (_seen.empty()) {\n+            return std::numeric_limits<T>::quiet_NaN();\n+        }\n+        std::vector<T> tmp = _seen;\n+        std::sort(tmp.begin(), tmp.end());\n+        size_t cnt = tmp.size();\n+        if ((cnt % 2) == 0) {\n+            return ((tmp[cnt/2] + tmp[(cnt-1)/2]) / T{2});", "originalCommit": "a912eaaa9f64cbd35cc405b26c41ff33c45e6314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTM5MA==", "url": "https://github.com/vespa-engine/vespa/pull/15119#discussion_r515385390", "bodyText": "isn't std::nth_element, with an extra std::max_element or std::min_element in case of even number of elements cheaper ?", "author": "toregge", "createdAt": "2020-10-30T21:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMTc3OA==", "url": "https://github.com/vespa-engine/vespa/pull/15119#discussion_r515401778", "bodyText": "@arnej27959 : yes, I also thought of that, but could not get myself to do it, even if the performance will be 'the same'\n@toregge : I went for simple over fast, since it will be slow no matter what. Also, I am still not friends with nth_element (we have history). More importantly, your comment reminds me that sort will not work with NaN values. Need a new sort that works with NaN, I guess... hmm", "author": "havardpe", "createdAt": "2020-10-30T22:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjYzNQ=="}], "type": "inlineReview"}, {"oid": "ed503386849a167f57bb7023a80dd93d58c788e4", "url": "https://github.com/vespa-engine/vespa/commit/ed503386849a167f57bb7023a80dd93d58c788e4", "message": "ignore NaN values", "committedDate": "2020-10-30T22:34:11Z", "type": "commit"}, {"oid": "52e8bd8f35b4eaf2a61d3c3d519c88181047f185", "url": "https://github.com/vespa-engine/vespa/commit/52e8bd8f35b4eaf2a61d3c3d519c88181047f185", "message": "re-write to use nth_element and max_element", "committedDate": "2020-10-30T23:07:56Z", "type": "commit"}, {"oid": "5cf5c2d2f0c7e371364eb9a29c255973c7ccd554", "url": "https://github.com/vespa-engine/vespa/commit/5cf5c2d2f0c7e371364eb9a29c255973c7ccd554", "message": "median gives NaN if there are any NaN values", "committedDate": "2020-10-31T00:59:51Z", "type": "commit"}]}