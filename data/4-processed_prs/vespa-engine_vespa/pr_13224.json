{"pr_number": 13224, "pr_title": "Calculate transient memory usage for load of attribute vector.", "pr_createdAt": "2020-05-12T11:34:59Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13224", "timeline": [{"oid": "0fa71866cd87e65331169700c656313f41f85eaa", "url": "https://github.com/vespa-engine/vespa/commit/0fa71866cd87e65331169700c656313f41f85eaa", "message": "Calculate transient memory usage for load of attribute vector.", "committedDate": "2020-05-12T11:16:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MTM4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r423751389", "bodyText": "Is this for a single component (attribute) or does it provide a view over several components? Could clarify that in the comment.", "author": "geirst", "createdAt": "2020-05-12T13:53:11Z", "path": "searchcore/src/vespa/searchcore/proton/common/i_transient_memory_usage_provider.h", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <cstddef>\n+\n+namespace proton {\n+\n+/*\n+ * Interface class providing transient memory usage, e.g. extra memory needed\n+ * for loading or saving an attribute vector.", "originalCommit": "0fa71866cd87e65331169700c656313f41f85eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NzMyMA==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r424397320", "bodyText": "Class comment has been updated.", "author": "toregge", "createdAt": "2020-05-13T12:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MTM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NDc1NA==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r423754754", "bodyText": "This calculation should be moved to a common place and also used in AttributeInitializer::get_transient_memory_usage().", "author": "geirst", "createdAt": "2020-05-12T13:57:25Z", "path": "searchcore/src/vespa/searchcore/proton/attribute/attribute_usage_sampler_functor.cpp", "diffHunk": "@@ -2,10 +2,49 @@\n \n #include \"attribute_usage_sampler_functor.h\"\n #include \"attribute_usage_sampler_context.h\"\n+#include \"attribute_config_inspector.h\"\n #include <vespa/searchlib/attribute/attributevector.h>\n+#include <vespa/searchlib/attribute/loadedenumvalue.h>\n+#include <vespa/searchlib/attribute/loadedvalue.h>\n+\n+using search::attribute::BasicType;\n \n namespace proton {\n \n+namespace {\n+\n+size_t\n+get_transient_memory_usage(const search::attribute::Config& old_config,", "originalCommit": "0fa71866cd87e65331169700c656313f41f85eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5MjY1NQ==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r424292655", "bodyText": "Fixed.", "author": "toregge", "createdAt": "2020-05-13T09:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1OTM5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r423759393", "bodyText": "Consider extending comment to include that it is also sampling transient memory usage and that sampling happens across multiple attributes. Also include that it is not only the filter that is updated upon destruction.", "author": "geirst", "createdAt": "2020-05-12T14:03:22Z", "path": "searchcore/src/vespa/searchcore/proton/attribute/attribute_usage_sampler_context.h", "diffHunk": "@@ -8,6 +8,8 @@\n namespace proton {\n \n class AttributeUsageFilter;\n+class AttributeConfigInspector;\n+class TransientMemoryUsageProvider;\n \n /*\n  * Context for sampling attribute usage stats.  When instance is", "originalCommit": "0fa71866cd87e65331169700c656313f41f85eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NzQ3OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r424397479", "bodyText": "Fixed.", "author": "toregge", "createdAt": "2020-05-13T12:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1OTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMjQ2NA==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r423832464", "bodyText": "Also consider adding unit test for this class.", "author": "geirst", "createdAt": "2020-05-12T15:36:20Z", "path": "searchcore/src/vespa/searchcore/proton/attribute/attribute_usage_sampler_functor.cpp", "diffHunk": "@@ -2,10 +2,49 @@\n \n #include \"attribute_usage_sampler_functor.h\"\n #include \"attribute_usage_sampler_context.h\"\n+#include \"attribute_config_inspector.h\"\n #include <vespa/searchlib/attribute/attributevector.h>\n+#include <vespa/searchlib/attribute/loadedenumvalue.h>\n+#include <vespa/searchlib/attribute/loadedvalue.h>\n+\n+using search::attribute::BasicType;\n \n namespace proton {\n \n+namespace {\n+\n+size_t\n+get_transient_memory_usage(const search::attribute::Config& old_config,\n+                           const search::attribute::Config& current_config,\n+                           uint64_t total_value_count)\n+{\n+    if (current_config.fastSearch()) {\n+        if (old_config.fastSearch()) {\n+            return sizeof(search::attribute::LoadedEnumAttribute) * total_value_count;\n+        } else {\n+            switch (old_config.basicType().type()) {\n+            case BasicType::Type::INT8:\n+                return sizeof(search::attribute::LoadedValue<int8_t>) * total_value_count;\n+            case BasicType::Type::INT16:\n+                return sizeof(search::attribute::LoadedValue<int16_t>) * total_value_count;\n+            case BasicType::Type::INT32:\n+                return sizeof(search::attribute::LoadedValue<int32_t>) * total_value_count;\n+            case BasicType::Type::INT64:\n+                return sizeof(search::attribute::LoadedValue<int64_t>) * total_value_count;\n+            case BasicType::Type::FLOAT:\n+                return sizeof(search::attribute::LoadedValue<float>) * total_value_count;\n+            case BasicType::Type::DOUBLE:\n+                return sizeof(search::attribute::LoadedValue<double>) * total_value_count;\n+            default:\n+                ;\n+            }\n+        }\n+    }\n+    return 0u;\n+}\n+\n+}\n+\n AttributeUsageSamplerFunctor::AttributeUsageSamplerFunctor(", "originalCommit": "0fa71866cd87e65331169700c656313f41f85eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NzU2OA==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r424397568", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-05-13T12:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMjQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzNjUxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r423836519", "bodyText": "Consider adding metric that exposes the transient memory usage in ResourceUsageMetrics.", "author": "geirst", "createdAt": "2020-05-12T15:41:45Z", "path": "searchcore/src/vespa/searchcore/proton/server/resource_usage_explorer.cpp", "diffHunk": "@@ -47,6 +47,8 @@ ResourceUsageExplorer::get_state(const vespalib::slime::Inserter &inserter, bool\n         memory.setDouble(\"utilization\", usageState.memoryState().utilization());\n         memory.setLong(\"physicalMemory\", _usageFilter.getHwInfo().memory().sizeBytes());\n         convertMemoryStatsToSlime(_usageFilter.getMemoryStats(), memory.setObject(\"stats\"));\n+        size_t transient_memory = _usageFilter.get_transient_memory_usage();\n+        memory.setLong(\"transient\", transient_memory);", "originalCommit": "0fa71866cd87e65331169700c656313f41f85eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NzY1MA==", "url": "https://github.com/vespa-engine/vespa/pull/13224#discussion_r424397650", "bodyText": "Done", "author": "toregge", "createdAt": "2020-05-13T12:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzNjUxOQ=="}], "type": "inlineReview"}, {"oid": "d44ef62fdbd6b0f5b67ab217e3ec8fbe16469f1c", "url": "https://github.com/vespa-engine/vespa/commit/d44ef62fdbd6b0f5b67ab217e3ec8fbe16469f1c", "message": "Consolidate code to calculate transient memory usage for attribute\nvector load.", "committedDate": "2020-05-13T09:26:51Z", "type": "commit"}, {"oid": "d44ef62fdbd6b0f5b67ab217e3ec8fbe16469f1c", "url": "https://github.com/vespa-engine/vespa/commit/d44ef62fdbd6b0f5b67ab217e3ec8fbe16469f1c", "message": "Consolidate code to calculate transient memory usage for attribute\nvector load.", "committedDate": "2020-05-13T09:26:51Z", "type": "forcePushed"}, {"oid": "eae91bf5e04f4245b54c240ac4667a0fc93ae068", "url": "https://github.com/vespa-engine/vespa/commit/eae91bf5e04f4245b54c240ac4667a0fc93ae068", "message": "Add unit test for AttributeUsageSamplerFunctor.", "committedDate": "2020-05-13T11:24:17Z", "type": "commit"}, {"oid": "63bcb0afede7fec1614e2ac396767b8e4b8bb2c9", "url": "https://github.com/vespa-engine/vespa/commit/63bcb0afede7fec1614e2ac396767b8e4b8bb2c9", "message": "Expose transient memory usage as a metric.", "committedDate": "2020-05-13T12:20:18Z", "type": "commit"}, {"oid": "9b7e93e134341de8599c69a2922d6bc6e5b0febb", "url": "https://github.com/vespa-engine/vespa/commit/9b7e93e134341de8599c69a2922d6bc6e5b0febb", "message": "Update class comments.", "committedDate": "2020-05-13T12:27:31Z", "type": "commit"}]}