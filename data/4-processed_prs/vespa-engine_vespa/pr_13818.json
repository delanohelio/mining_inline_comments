{"pr_number": 13818, "pr_title": "Async handling of gid/lid changes.", "pr_createdAt": "2020-07-07T12:05:44Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13818", "timeline": [{"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6", "url": "https://github.com/vespa-engine/vespa/commit/846f628a129ce3e783cdfbfa833d123fc7693ab6", "message": "Async handling of gid/lid changes.", "committedDate": "2020-07-07T11:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDQ5OA==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450820498", "bodyText": "Consider using std::promise<void>, std::future<void>, and a context that just sets the promise in the destructor.", "author": "toregge", "createdAt": "2020-07-07T12:17:59Z", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -632,8 +633,10 @@ StoreOnlyFeedView::adjustMetaStore(const DocumentOperation &op, const GlobalId &\n                 putMetaData(_metaStore, docId, op, _params._subDbType == SubDbType::REMOVED);\n             }\n         } else if (op.getValidPrevDbdId(_params._subDbId)) {\n-            _gidToLidChangeHandler.notifyRemove(gid, serialNum);\n+            vespalib::Gate gate;", "originalCommit": "846f628a129ce3e783cdfbfa833d123fc7693ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjQ5NA==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r451396494", "bodyText": "I think it is clearer to use the Gate than the general promise/future trick.", "author": "baldersheim", "createdAt": "2020-07-08T09:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjMzMA==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450826330", "bodyText": "There might be problems if the listener can be destroyed before the task has been completed. Consider extending the destructor to sync the executor (_attributeFieldWriter) in order to ensure that all previously queued tasks have a valid listener. An alternate approach might be capture a copy of _attr in the lambda.", "author": "toregge", "createdAt": "2020-07-07T12:29:02Z", "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {", "originalCommit": "846f628a129ce3e783cdfbfa833d123fc7693ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzYzMw==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450837633", "bodyText": "Fixed by sync in destructor.", "author": "baldersheim", "createdAt": "2020-07-07T12:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjcxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450826711", "bodyText": "Same issue has in notifyPutDone.", "author": "toregge", "createdAt": "2020-07-07T12:29:44Z", "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {\n+                                            (void) context;\n+                                            _attr->notifyReferencedPut(gid, lid);\n+                                        });\n }\n \n void\n-GidToLidChangeListener::notifyRemove(document::GlobalId gid)\n+GidToLidChangeListener::notifyRemove(Context context, document::GlobalId gid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid]() { _attr->notifyReferencedRemove(gid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context = std::move(context), gid]() {", "originalCommit": "846f628a129ce3e783cdfbfa833d123fc7693ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzQzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450837439", "bodyText": "Fixed by sync in destructor.", "author": "baldersheim", "createdAt": "2020-07-07T12:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjcxMQ=="}], "type": "inlineReview"}, {"oid": "e705a3657aac35842099d58347755bef6e4e4157", "url": "https://github.com/vespa-engine/vespa/commit/e705a3657aac35842099d58347755bef6e4e4157", "message": "Sync executor before completing destruction to ensure everyone is done.", "committedDate": "2020-07-07T12:46:15Z", "type": "commit"}, {"oid": "857737b2470d5015346fdff3b0158c355f637b72", "url": "https://github.com/vespa-engine/vespa/commit/857737b2470d5015346fdff3b0158c355f637b72", "message": "Ensure proper lifetime of the attribute executor.", "committedDate": "2020-07-07T13:06:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzYwMw==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450937603", "bodyText": "I would prefer \"DestructorCallbackSP\" (or similar) instead of \"Context\", which is very generic. Then it is possible to look at a function signature and better understand what the first parameter is representing.", "author": "geirst", "createdAt": "2020-07-07T15:07:16Z", "path": "searchcore/src/vespa/searchcore/proton/reference/i_gid_to_lid_change_listener.h", "diffHunk": "@@ -16,9 +16,10 @@ namespace proton {\n class IGidToLidChangeListener\n {\n public:\n+    using Context = std::shared_ptr<search::IDestructorCallback>;", "originalCommit": "846f628a129ce3e783cdfbfa833d123fc7693ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NTcyMA==", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r451395720", "bodyText": "Fixed in #13828", "author": "baldersheim", "createdAt": "2020-07-08T09:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzYwMw=="}], "type": "inlineReview"}]}