{"pr_number": 13376, "pr_title": "extend blueprint API", "pr_createdAt": "2020-05-26T11:37:22Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13376", "timeline": [{"oid": "3c9913ad6d0351834c95dfcbb2b774756e086888", "url": "https://github.com/vespa-engine/vespa/commit/3c9913ad6d0351834c95dfcbb2b774756e086888", "message": "extend blueprint API", "committedDate": "2020-05-26T11:28:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MjcxMg==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430392712", "bodyText": "I think a new bitvector is also empty", "author": "havardpe", "createdAt": "2020-05-26T12:59:55Z", "path": "searchlib/src/vespa/searchlib/queryeval/emptysearch.cpp", "diffHunk": "@@ -15,6 +14,27 @@ EmptySearch::doUnpack(uint32_t)\n {\n }\n \n+void\n+EmptySearch::or_hits_into(BitVector &, uint32_t)\n+{\n+    // nop\n+}\n+\n+void\n+EmptySearch::and_hits_into(BitVector &result, uint32_t begin_id)\n+{\n+    result.clearInterval(begin_id, getEndId());\n+}\n+\n+BitVector::UP\n+EmptySearch::get_hits(uint32_t begin_id)\n+{\n+    auto result = BitVector::create(begin_id, getEndId());\n+    result->clearInterval(begin_id, getEndId());", "originalCommit": "3c9913ad6d0351834c95dfcbb2b774756e086888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NDczNA==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430394734", "bodyText": "I think the 'bound' part should be part of the enum values and not the enum type, since it smells like past tense 'bind' on its own. Maybe FilterType or FilterConstraint, with UPPER_BOUND and LOWER_BOUND", "author": "havardpe", "createdAt": "2020-05-26T13:03:03Z", "path": "searchlib/src/vespa/searchlib/queryeval/blueprint.h", "diffHunk": "@@ -164,6 +164,8 @@ class Blueprint\n         virtual bool check(const Blueprint & bp) const = 0;\n     };\n \n+    enum class FilterBound { UPPER, LOWER };", "originalCommit": "3c9913ad6d0351834c95dfcbb2b774756e086888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODQwNw==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430428407", "bodyText": "Also add a comment describing the difference between the two.", "author": "geirst", "createdAt": "2020-05-26T13:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NDczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5Nzg0Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430397846", "bodyText": "setInterval also invalidates the cached count", "author": "havardpe", "createdAt": "2020-05-26T13:08:01Z", "path": "searchlib/src/vespa/searchlib/queryeval/full_search.cpp", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"full_search.h\"\n+\n+namespace search::queryeval {\n+\n+void\n+FullSearch::doSeek(uint32_t docid)\n+{\n+    setDocId(docid);\n+}\n+\n+void\n+FullSearch::doUnpack(uint32_t)\n+{\n+    abort();\n+}\n+\n+void\n+FullSearch::or_hits_into(BitVector &result, uint32_t begin_id)\n+{\n+    result.setInterval(begin_id, getEndId());\n+}\n+\n+void\n+FullSearch::and_hits_into(BitVector &, uint32_t)\n+{\n+    // nop\n+}\n+\n+BitVector::UP\n+FullSearch::get_hits(uint32_t begin_id)\n+{\n+    auto result = BitVector::create(begin_id, getEndId());\n+    result->setInterval(begin_id, getEndId());\n+    result->invalidateCachedCount();", "originalCommit": "3c9913ad6d0351834c95dfcbb2b774756e086888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5ODcxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430398719", "bodyText": "I think empty is better than aborting", "author": "havardpe", "createdAt": "2020-05-26T13:09:24Z", "path": "searchlib/src/vespa/searchlib/queryeval/full_search.cpp", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"full_search.h\"\n+\n+namespace search::queryeval {\n+\n+void\n+FullSearch::doSeek(uint32_t docid)\n+{\n+    setDocId(docid);\n+}\n+\n+void\n+FullSearch::doUnpack(uint32_t)\n+{\n+    abort();", "originalCommit": "3c9913ad6d0351834c95dfcbb2b774756e086888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyOTM5MA==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430429390", "bodyText": "Please add class comment.", "author": "geirst", "createdAt": "2020-05-26T13:53:18Z", "path": "searchlib/src/vespa/searchlib/queryeval/full_search.h", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"searchiterator.h\"\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+namespace search::queryeval {\n+\n+class FullSearch : public SearchIterator", "originalCommit": "3c9913ad6d0351834c95dfcbb2b774756e086888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0d036c0b271ad4d19888bb010f89182058cb67a", "url": "https://github.com/vespa-engine/vespa/commit/b0d036c0b271ad4d19888bb010f89182058cb67a", "message": "review follow-up\n\n* add some documentation comments\n* remove un-needed invalidateCachedCount\n* rename upper/lower bound signaling enum", "committedDate": "2020-05-26T17:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTUwNw==", "url": "https://github.com/vespa-engine/vespa/pull/13376#discussion_r430935507", "bodyText": "I still do not think you need to clear an empty bitvector", "author": "havardpe", "createdAt": "2020-05-27T08:12:31Z", "path": "searchlib/src/vespa/searchlib/queryeval/emptysearch.cpp", "diffHunk": "@@ -15,6 +14,26 @@ EmptySearch::doUnpack(uint32_t)\n {\n }\n \n+void\n+EmptySearch::or_hits_into(BitVector &, uint32_t)\n+{\n+    // nop\n+}\n+\n+void\n+EmptySearch::and_hits_into(BitVector &result, uint32_t begin_id)\n+{\n+    result.clearInterval(begin_id, getEndId());\n+}\n+\n+BitVector::UP\n+EmptySearch::get_hits(uint32_t begin_id)\n+{\n+    auto result = BitVector::create(begin_id, getEndId());\n+    result->clearInterval(begin_id, getEndId());", "originalCommit": "b0d036c0b271ad4d19888bb010f89182058cb67a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3274a4e4e68952bd6f88139f51553a43d9aebf46", "url": "https://github.com/vespa-engine/vespa/commit/3274a4e4e68952bd6f88139f51553a43d9aebf46", "message": "remove one more unneeded clearInterval", "committedDate": "2020-05-27T09:22:26Z", "type": "commit"}]}