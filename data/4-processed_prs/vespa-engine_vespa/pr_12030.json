{"pr_number": 12030, "pr_title": "Send ping every second truly async to all nodes who does not have any\u2026", "pr_createdAt": "2020-01-31T20:47:47Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12030", "timeline": [{"oid": "241612c73b9d9dd00fcf196d9be4bafccc1d305c", "url": "https://github.com/vespa-engine/vespa/commit/241612c73b9d9dd00fcf196d9be4bafccc1d305c", "message": "Send ping every second truly async to all nodes who does not have any pending pings.", "committedDate": "2020-01-31T20:46:05Z", "type": "commit"}, {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "url": "https://github.com/vespa-engine/vespa/commit/b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "message": "Add comment on semantics.", "committedDate": "2020-01-31T20:50:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjUyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032521", "bodyText": "better to use finally than to hide Errors", "author": "havardpe", "createdAt": "2020-02-03T10:43:50Z", "path": "container-search/src/main/java/com/yahoo/search/dispatch/rpc/RpcPing.java", "diffHunk": "@@ -33,32 +31,41 @@ public RpcPing(Node node, ClusterMonitor<Node> clusterMonitor, RpcResourcePool r\n     }\n \n     @Override\n-    public Pong call() throws Exception {\n+    public void ping(PongHandler handler) {\n         try {\n-            var queue = new LinkedBlockingQueue<ResponseOrError<ProtobufResponse>>(1);\n-\n-            sendPing(queue);\n-\n-            var responseOrError = queue.poll(clusterMonitor.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);\n-            if (responseOrError == null) {\n-                return new Pong(ErrorMessage.createNoAnswerWhenPingingNode(\"Timed out waiting for pong from \" + node));\n-            } else if (responseOrError.error().isPresent()) {\n-                return new Pong(ErrorMessage.createBackendCommunicationError(responseOrError.error().get()));\n+            if (node.sendPing()) {\n+                sendPing(handler);\n             }\n+        } catch (RuntimeException e) {\n+            handler.handle(new Pong(\n+                    ErrorMessage.createBackendCommunicationError(\"Exception when pinging \" + node + \": \" + Exceptions.toMessageString(e))));\n+            node.receivePing();\n+        } catch (Throwable throwable) {", "originalCommit": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTU3NA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039574", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "author": "baldersheim", "createdAt": "2020-02-03T10:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjc2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032769", "bodyText": "somewhat misleading name", "author": "havardpe", "createdAt": "2020-02-03T10:44:25Z", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }", "originalCommit": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTY1NA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039654", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "author": "baldersheim", "createdAt": "2020-02-03T10:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjgxOA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032818", "bodyText": "somewhat misleading name", "author": "havardpe", "createdAt": "2020-02-03T10:44:30Z", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n+\n+    /** Need to be called when a pong is called to allow next ping to go through. */\n+    public void receivePing() { pendingPing.set(false); }", "originalCommit": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTcyMw==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039723", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "author": "baldersheim", "createdAt": "2020-02-03T10:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjgxOA=="}], "type": "inlineReview"}, {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9", "url": "https://github.com/vespa-engine/vespa/commit/7e17736281d6e83efc53026fba168a2f0520b6e9", "message": "Use sequence numbers and check on Pong reception instead.", "committedDate": "2020-02-03T10:47:48Z", "type": "commit"}, {"oid": "21b6882ad7c58aa36fb00297e61cd60e9ddbfb6b", "url": "https://github.com/vespa-engine/vespa/commit/21b6882ad7c58aa36fb00297e61cd60e9ddbfb6b", "message": "Do not catch more than you can handle.", "committedDate": "2020-02-03T10:55:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NzIxOA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374057218", "bodyText": "pong?", "author": "havardpe", "createdAt": "2020-02-03T11:42:25Z", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);", "originalCommit": "7e17736281d6e83efc53026fba168a2f0520b6e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDUwOA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374084508", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-02-03T12:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NzIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1ODczNg==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374058736", "bodyText": "mixing sent and received ping sequence number here seems like a bad idea", "author": "havardpe", "createdAt": "2020-02-03T11:46:06Z", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n-    /** Only send ping if this method return true. If not the is a ping outstanding. */\n-    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n-\n-    /** Need to be called when a pong is called to allow next ping to go through. */\n-    public void receivePing() { pendingPing.set(false); }\n+    /** Give a monotonically increasing sequence number.*/\n+    public long createPingSequenceId() { return pingSequence.incrementAndGet(); }\n+    /** Checks if this pong is received in line and accepted, or out of band and should be ignored..*/\n+    public boolean isLastReceivedPong(long pingId ) {\n+        long last = lastPing.get();\n+        while ((pingId > last) && ! lastPing.compareAndSet(last, pingId)) {\n+            last = pingSequence.get();", "originalCommit": "7e17736281d6e83efc53026fba168a2f0520b6e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374084624", "bodyText": "Fixed.", "author": "baldersheim", "createdAt": "2020-02-03T12:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1ODczNg=="}], "type": "inlineReview"}, {"oid": "ec8acd060de8f107aebbbcc1589c5b81a539179d", "url": "https://github.com/vespa-engine/vespa/commit/ec8acd060de8f107aebbbcc1589c5b81a539179d", "message": "lastPing -> lastPong.", "committedDate": "2020-02-03T12:23:41Z", "type": "commit"}, {"oid": "f1daf2ccf46b93f27020c6c0375b2750075ab278", "url": "https://github.com/vespa-engine/vespa/commit/f1daf2ccf46b93f27020c6c0375b2750075ab278", "message": "Provide pongHandler in constructor to avoid needing an AtomicReference.", "committedDate": "2020-02-03T12:43:57Z", "type": "commit"}]}