{"pr_number": 12797, "pr_title": "- Redo the servicepool to resolve addresses first time and not loadba\u2026", "pr_createdAt": "2020-04-01T16:52:34Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12797", "timeline": [{"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1", "url": "https://github.com/vespa-engine/vespa/commit/554f5abc565b5e6c2d8996574857c25f91c02ee1", "message": "- Redo the servicepool to resolve addresses first time and not loadbalance.\n- Make it thread safe.\n- Remove any loadbalancing tests\n- Assert that no loadbalancing is requested.", "committedDate": "2020-04-01T16:50:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0OTc5NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402149795", "bodyText": "Since I believe it's conceivable that someone could (by accident or deliberately) put up a slobrok service with multiple endpoints (or use a message route that uses a service prefix), I think we might not want assert here. Instead, could just deterministically pick the first entry. Won't be load balanced, but won't leave a smoking crater behind either.\nAlternatively, first have a couple of full factory runs with the assertion in to verify nothing breaks that we haven't thought about... \ud83d\ude42", "author": "vekterli", "createdAt": "2020-04-02T08:46:37Z", "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);", "originalCommit": "554f5abc565b5e6c2d8996574857c25f91c02ee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDk4Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402214982", "bodyText": "That was my intention to leave it there for factory to punch me back if assumptions where wrong :) Added an urgent TODO.", "author": "baldersheim", "createdAt": "2020-04-02T10:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0OTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MDE2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402150167", "bodyText": "Simplify to addressList.front() now instead of invoking RNG?", "author": "vekterli", "createdAt": "2020-04-02T08:47:16Z", "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);\n+            const auto &entry = addressList[random() % addressList.size()];", "originalCommit": "554f5abc565b5e6c2d8996574857c25f91c02ee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDcxMw==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402230713", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-04-02T11:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzY2MA==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402163660", "bodyText": "Should the name of this function be changed to e.g. make_address() instead? It doesn't do any actual resolving anymore.", "author": "vekterli", "createdAt": "2020-04-02T09:08:36Z", "path": "messagebus/src/vespa/messagebus/network/rpcservicepool.cpp", "diffHunk": "@@ -19,27 +22,52 @@ RPCServicePool::~RPCServicePool() = default;\n RPCServiceAddress::UP\n RPCServicePool::resolve(const string &pattern)\n {\n-    std::unique_ptr<RPCService> * found = _lru.findAndRef(pattern);\n-    if (found) {\n-        return (*found)->resolve();\n+    std::shared_ptr<RPCService> service;\n+    {\n+        LockGuard guard(_lock);\n+        handleMirrorUpdates(guard);\n+        std::shared_ptr<RPCService> *found = _lru->findAndRef(pattern);\n+        if (found) {\n+            service = *found;\n+        }\n+    }\n+\n+    if (service) {\n+        return service->resolve();", "originalCommit": "554f5abc565b5e6c2d8996574857c25f91c02ee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNTE0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402215149", "bodyText": "Agree, fixed", "author": "baldersheim", "createdAt": "2020-04-02T10:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzY2MA=="}], "type": "inlineReview"}, {"oid": "676dc64e73f418be10ef4cee68b102068bbc5530", "url": "https://github.com/vespa-engine/vespa/commit/676dc64e73f418be10ef4cee68b102068bbc5530", "message": "reslove() -> make_address", "committedDate": "2020-04-02T10:34:35Z", "type": "commit"}, {"oid": "9c3b09bbdd2d3819ae2edb35b867d996daa4a744", "url": "https://github.com/vespa-engine/vespa/commit/9c3b09bbdd2d3819ae2edb35b867d996daa4a744", "message": "Unify tests.", "committedDate": "2020-04-02T10:52:34Z", "type": "commit"}, {"oid": "5713fb87bc776b6d7eaa252b70a965c89972e98b", "url": "https://github.com/vespa-engine/vespa/commit/5713fb87bc776b6d7eaa252b70a965c89972e98b", "message": "Add some more info too failing test.", "committedDate": "2020-04-02T11:25:15Z", "type": "commit"}, {"oid": "cfac02f352328cdae0d78fa9d6320468ba9be658", "url": "https://github.com/vespa-engine/vespa/commit/cfac02f352328cdae0d78fa9d6320468ba9be658", "message": "Must wait for all sessions to be registered.", "committedDate": "2020-04-02T13:13:39Z", "type": "commit"}, {"oid": "30b6bce74ee98480b72d4a23328c0b30c28b4566", "url": "https://github.com/vespa-engine/vespa/commit/30b6bce74ee98480b72d4a23328c0b30c28b4566", "message": "Improve thread visibility.", "committedDate": "2020-04-02T13:58:37Z", "type": "commit"}, {"oid": "533ed4c1ed5b2a0e45bc9fe5a518d23da5f5cd17", "url": "https://github.com/vespa-engine/vespa/commit/533ed4c1ed5b2a0e45bc9fe5a518d23da5f5cd17", "message": "Since killing a task involves unlinking it, all other tasks scheduked must have been killed/unlinked.\nIf not you will touching freed memory.", "committedDate": "2020-04-02T13:58:57Z", "type": "commit"}]}