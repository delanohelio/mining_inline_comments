{"pr_number": 13563, "pr_title": "Add foreach_key_range method to btree iterator, to scan a range of", "pr_createdAt": "2020-06-12T09:28:28Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13563", "timeline": [{"oid": "6c6956f91219e8d8418b74343896f87a8ea686aa", "url": "https://github.com/vespa-engine/vespa/commit/6c6956f91219e8d8418b74343896f87a8ea686aa", "message": "Add foreach_key_range method to btree iterator, to scan a range of\nthe tree and call function for each key.", "committedDate": "2020-06-12T09:26:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDgyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439480821", "bodyText": "Please add doc describing function.", "author": "geirst", "createdAt": "2020-06-12T15:14:26Z", "path": "vespalib/src/vespa/vespalib/btree/btreeiterator.h", "diffHunk": "@@ -303,6 +303,38 @@ class BTreeIteratorBase\n      * @param pathSize     New tree height (number of levels of internal nodes)\n      */\n     VESPA_DLL_LOCAL void clearPath(uint32_t pathSize);\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range_start(uint32_t level, FunctionType func) const", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjMxNg==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532316", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDg5NA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439480894", "bodyText": "Please add doc describing function.", "author": "geirst", "createdAt": "2020-06-12T15:14:33Z", "path": "vespalib/src/vespa/vespalib/btree/btreeiterator.h", "diffHunk": "@@ -303,6 +303,38 @@ class BTreeIteratorBase\n      * @param pathSize     New tree height (number of levels of internal nodes)\n      */\n     VESPA_DLL_LOCAL void clearPath(uint32_t pathSize);\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range_start(uint32_t level, FunctionType func) const\n+    {\n+        if (level > 0u) {\n+            --level;\n+            foreach_key_range_start(level, func);\n+            auto &store = _allocator->getNodeStore();\n+            auto node = _path[level].getNode();\n+            uint32_t idx = _path[level].getIdx();\n+            node->foreach_key_range(store, idx + 1, node->validSlots(), func);\n+        } else {\n+            _leaf.getNode()->foreach_key_range(_leaf.getIdx(), _leaf.getNode()->validSlots(), func);\n+        }\n+    }\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range_end(uint32_t level, FunctionType func) const", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjU0OA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532548", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MjI2OA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439482268", "bodyText": "Please add a comment on what this the result of this while loop.", "author": "geirst", "createdAt": "2020-06-12T15:17:01Z", "path": "vespalib/src/vespa/vespalib/btree/btreeiterator.h", "diffHunk": "@@ -451,6 +483,54 @@ class BTreeIteratorBase\n             _leafRoot->foreach_key(func);\n         }\n     }\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range(const BTreeIteratorBase &end_itr, FunctionType func) const\n+    {\n+        if (!valid()) {\n+            return;\n+        }\n+        if (!end_itr.valid()) {\n+            foreach_key_range_start(_pathSize, func);\n+            return;\n+        }\n+        assert(_pathSize == end_itr._pathSize);\n+        assert(_allocator == end_itr._allocator);\n+        uint32_t level = _pathSize;\n+        if (level > 0u) {\n+            uint32_t idx;\n+            uint32_t eidx;\n+            do {", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjM5NQ==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532395", "bodyText": "Done", "author": "toregge", "createdAt": "2020-06-12T16:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MjI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NjcwOA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439486708", "bodyText": "Please add comment describing the 3 steps done here (left, middle, and right sub trees).", "author": "geirst", "createdAt": "2020-06-12T15:25:07Z", "path": "vespalib/src/vespa/vespalib/btree/btreeiterator.h", "diffHunk": "@@ -451,6 +483,54 @@ class BTreeIteratorBase\n             _leafRoot->foreach_key(func);\n         }\n     }\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range(const BTreeIteratorBase &end_itr, FunctionType func) const\n+    {\n+        if (!valid()) {\n+            return;\n+        }\n+        if (!end_itr.valid()) {\n+            foreach_key_range_start(_pathSize, func);\n+            return;\n+        }\n+        assert(_pathSize == end_itr._pathSize);\n+        assert(_allocator == end_itr._allocator);\n+        uint32_t level = _pathSize;\n+        if (level > 0u) {\n+            uint32_t idx;\n+            uint32_t eidx;\n+            do {\n+                --level;\n+                assert(_path[level].getNode() == end_itr._path[level].getNode());\n+                idx = _path[level].getIdx();\n+                eidx = end_itr._path[level].getIdx();\n+                if (idx > eidx) {\n+                    return;\n+                }\n+                if (idx != eidx) {\n+                    ++level;\n+                    break;\n+                }\n+            } while (level != 0);\n+            if (level > 0u) {\n+                foreach_key_range_start(level - 1, func);", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjYyMw==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532623", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NjcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzQxMg==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439487412", "bodyText": "Please add doc describing function.", "author": "geirst", "createdAt": "2020-06-12T15:26:23Z", "path": "vespalib/src/vespa/vespalib/btree/btreeiterator.h", "diffHunk": "@@ -451,6 +483,54 @@ class BTreeIteratorBase\n             _leafRoot->foreach_key(func);\n         }\n     }\n+\n+    template <typename FunctionType>\n+    void\n+    foreach_key_range(const BTreeIteratorBase &end_itr, FunctionType func) const", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjc4NA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532784", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzU5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439487599", "bodyText": "Please add doc describing function.", "author": "geirst", "createdAt": "2020-06-12T15:26:44Z", "path": "vespalib/src/vespa/vespalib/btree/btreenode.h", "diffHunk": "@@ -459,6 +475,16 @@ class BTreeLeafNode : public BTreeNodeTT<KeyT, DataT, AggrT, NumSlots>\n         }\n     }\n \n+    template <typename FunctionType>\n+    void foreach_key_range(uint32_t start_idx, uint32_t end_idx, FunctionType func) const {", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjg3OA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532878", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzY0MA==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439487640", "bodyText": "Please add doc describing function.", "author": "geirst", "createdAt": "2020-06-12T15:26:48Z", "path": "vespalib/src/vespa/vespalib/btree/btreenode.h", "diffHunk": "@@ -370,6 +370,22 @@ class BTreeInternalNode : public BTreeNodeTT<KeyT, BTreeNode::Ref, AggrT,\n         }\n     }\n \n+    template <typename NodeStoreType, typename FunctionType>\n+    void foreach_key_range(NodeStoreType &store, uint32_t start_idx, uint32_t end_idx, FunctionType func) const {", "originalCommit": "6c6956f91219e8d8418b74343896f87a8ea686aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjk3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13563#discussion_r439532973", "bodyText": "Done.", "author": "toregge", "createdAt": "2020-06-12T16:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NzY0MA=="}], "type": "inlineReview"}, {"oid": "ec251301abe4aedad848b1fd4c495b5bb6b76535", "url": "https://github.com/vespa-engine/vespa/commit/ec251301abe4aedad848b1fd4c495b5bb6b76535", "message": "Add comments for foreach_key_range() method and related methods.", "committedDate": "2020-06-12T16:44:14Z", "type": "commit"}]}