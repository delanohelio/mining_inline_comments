{"pr_number": 14574, "pr_title": "Avoid clang warnings.", "pr_createdAt": "2020-09-26T12:12:45Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14574", "timeline": [{"oid": "11ef6d3406c037ba8bdde9b42b9ba065fc5f37f7", "url": "https://github.com/vespa-engine/vespa/commit/11ef6d3406c037ba8bdde9b42b9ba065fc5f37f7", "message": "Avoid clang warnings.", "committedDate": "2020-09-26T12:00:50Z", "type": "commit"}, {"oid": "4098929a837a2d1e433d9248600ff7cf48700a6a", "url": "https://github.com/vespa-engine/vespa/commit/4098929a837a2d1e433d9248600ff7cf48700a6a", "message": "Avoid undefined behavior.", "committedDate": "2020-09-26T13:18:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTAxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495459015", "bodyText": "Is it not better that mem_start is void * ?", "author": "baldersheim", "createdAt": "2020-09-26T13:53:40Z", "path": "eval/src/vespa/eval/tensor/mixed/packed_mappings_builder.cpp", "diffHunk": "@@ -54,8 +54,8 @@ PackedMappingsBuilder::target_memory(char *mem_start, char *mem_end) const\n     ssize_t avail_sz = mem_end - mem_start;\n     assert(needs_sz <= avail_sz);\n \n-    uint32_t * int_store_mem = (uint32_t *) mem_start;\n-    uint32_t * offsets_mem = (uint32_t *) (mem_start + int_store_size);\n+    uint32_t * int_store_mem = (uint32_t *) (void *) mem_start;\n+    uint32_t * offsets_mem = (uint32_t *) (void *) (mem_start + int_store_size);", "originalCommit": "4098929a837a2d1e433d9248600ff7cf48700a6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MDMxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495460315", "bodyText": "If mem_start is void* then any code using mem_start + offset would need to use ((char *) mem_start) + offset", "author": "toregge", "createdAt": "2020-09-26T14:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTA2NA==", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495459064", "bodyText": "Is it not better that mem_start is void * ?", "author": "baldersheim", "createdAt": "2020-09-26T13:54:34Z", "path": "eval/src/vespa/eval/tensor/mixed/packed_mixed_tensor_builder.cpp", "diffHunk": "@@ -39,7 +39,7 @@ PackedMixedTensorBuilder<T>::build(std::unique_ptr<ValueBuilder<T>>)\n \n     // copy cells:\n     memcpy(cells_mem, &_cells[0], cells_size);\n-    ConstArrayRef<T> cells((T *)cells_mem, _cells.size());\n+    ConstArrayRef<T> cells((T *)(void *) cells_mem, _cells.size());", "originalCommit": "4098929a837a2d1e433d9248600ff7cf48700a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NDEyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495484120", "bodyText": "This is not the first time this treacherous interface gives us trouble.\nFixed in #14575", "author": "baldersheim", "createdAt": "2020-09-26T18:45:54Z", "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "diffHunk": "@@ -117,7 +117,8 @@ void compress_and_add_payload_to_rpc_params(mbus::BlobRef payload,\n \n     params.AddInt8(comp_type);\n     params.AddInt32(static_cast<uint32_t>(to_compress.size()));\n-    params.AddData(buf.stealBuffer(), buf.getDataLen());\n+    auto buffer_len = buf.getDataLen();\n+    params.AddData(buf.stealBuffer(), buffer_len);", "originalCommit": "4098929a837a2d1e433d9248600ff7cf48700a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}