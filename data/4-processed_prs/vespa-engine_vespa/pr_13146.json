{"pr_number": 13146, "pr_title": "- Implement async put", "pr_createdAt": "2020-05-04T12:18:18Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13146", "timeline": [{"oid": "f57ad042b46830003497d2b5e47cd5157fa12054", "url": "https://github.com/vespa-engine/vespa/commit/f57ad042b46830003497d2b5e47cd5157fa12054", "message": "- Implement async put\n- Move result processing to MessageTracker\n- Wire putAsync through provider error wrapper too.\n- Handle both sync and async replies in tests.", "committedDate": "2020-05-04T12:06:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDQ3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419394477", "bodyText": "Typo: thread -> threads", "author": "vekterli", "createdAt": "2020-05-04T12:20:38Z", "path": "configdefinitions/src/vespa/stor-filestor.def", "diffHunk": "@@ -26,6 +26,11 @@ disk_operation_timeout int default=0 restart\n ## Number of threads to use for each mountpoint.\n num_threads int default=8 restart\n \n+## Number of thread for response processing and delivery", "originalCommit": "f57ad042b46830003497d2b5e47cd5157fa12054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1ODI4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419458285", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-04T14:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzM3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419407377", "bodyText": "Is there a container resource constraint-aware config for this that we should prefer to use instead of the raw number of cores on the node itself?", "author": "vekterli", "createdAt": "2020-05-04T12:44:42Z", "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -88,6 +89,13 @@ FileStorManager::print(std::ostream& out, bool verbose, const std::string& inden\n     out << \"FileStorManager\";\n }\n \n+namespace {\n+\n+uint32_t computeNumResponseThreads(int configured) {\n+    return (configured < 0) ? std::max(1u, std::thread::hardware_concurrency()/4) : configured;", "originalCommit": "f57ad042b46830003497d2b5e47cd5157fa12054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDYxNA==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419460614", "bodyText": "In the hosted solution this number will be controlled by the config model.\nBut I think that a default of -1 will handle it best for non-hosted.\nThis is in line(I think) with how we do it for similar cpu core controlled configs.", "author": "baldersheim", "createdAt": "2020-05-04T14:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNzAwMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419437001", "bodyText": "tracker->context() should be extracted as own variable before calling putAsync, as eval order is undefined and makeResultTask tries to capture it with a std::move(tracker). Possible to move away tracker before it's dereferenced.", "author": "vekterli", "createdAt": "2020-05-04T13:30:50Z", "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -102,9 +176,20 @@ PersistenceThread::handlePut(api::PutCommand& cmd, MessageTracker::UP tracker)\n         return tracker;\n     }\n \n-    spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n-                                    spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()), tracker->context());\n-    tracker->checkForError(response);\n+    if (_sequencedExecutor == nullptr) {\n+        spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n+                                        spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()),\n+                                        tracker->context());\n+        tracker->checkForError(response);\n+    } else {\n+        _spi.putAsync(getBucket(cmd.getDocumentId(), cmd.getBucket()), spi::Timestamp(cmd.getTimestamp()),\n+                      std::move(cmd.getDocument()), tracker->context(),\n+                      std::make_unique<ResultTaskOperationDone>(*_sequencedExecutor, cmd.getBucketId(),\n+                              makeResultTask([tracker = std::move(tracker)](spi::Result::UP response) {", "originalCommit": "f57ad042b46830003497d2b5e47cd5157fa12054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NjE4NA==", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419466184", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-04T14:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNzAwMQ=="}], "type": "inlineReview"}, {"oid": "1aa8b0b11575b3c1e6a0d991d7b655a9290c85d9", "url": "https://github.com/vespa-engine/vespa/commit/1aa8b0b11575b3c1e6a0d991d7b655a9290c85d9", "message": "Ensure that eval order might cause object to disappear under your feet by taking an reference when it is safe.", "committedDate": "2020-05-04T14:10:59Z", "type": "commit"}]}