{"pr_number": 15385, "pr_title": "Balder/reorder for smaller footprint", "pr_createdAt": "2020-11-18T20:49:07Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15385", "timeline": [{"oid": "d6975953e4284068fbd76e80bbf7e802003adcaf", "url": "https://github.com/vespa-engine/vespa/commit/d6975953e4284068fbd76e80bbf7e802003adcaf", "message": "Reorder members for smaller memory footprint.", "committedDate": "2020-11-18T18:22:15Z", "type": "commit"}, {"oid": "b2d2d0053d16ca15c9298f3e8312b494e246c5e9", "url": "https://github.com/vespa-engine/vespa/commit/b2d2d0053d16ca15c9298f3e8312b494e246c5e9", "message": "No need to copy an empty object into another empty object.", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "37822a5c2ecf566bac41ea8a8c94226115ac370f", "url": "https://github.com/vespa-engine/vespa/commit/37822a5c2ecf566bac41ea8a8c94226115ac370f", "message": "Hide the modifiable TraceNode root inside the Trace object", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "5708135b1ddbac03f268b6235027c10121cb5ca4", "url": "https://github.com/vespa-engine/vespa/commit/5708135b1ddbac03f268b6235027c10121cb5ca4", "message": "Move the Trace and TraceNode when adding traces.", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "eb28759a307ff298e2125d6d3deff260c941ec45", "url": "https://github.com/vespa-engine/vespa/commit/eb28759a307ff298e2125d6d3deff260c941ec45", "message": "Explicit copy construction of Trace.", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "78bfefbf3fd11a655560c7237bf4106aca2458b2", "url": "https://github.com/vespa-engine/vespa/commit/78bfefbf3fd11a655560c7237bf4106aca2458b2", "message": "Use a std:.unique_ptr to make Trace a thin wrapper for TraceNode to make the happy path fast.", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "a330fa13973762f0b05e73c0ef3969fce28734fd", "url": "https://github.com/vespa-engine/vespa/commit/a330fa13973762f0b05e73c0ef3969fce28734fd", "message": "Reduce exposure of TraceNode even further.", "committedDate": "2020-11-18T18:22:16Z", "type": "commit"}, {"oid": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "url": "https://github.com/vespa-engine/vespa/commit/35b3c13c44390271d09f3a8b9bb1709d335443c6", "message": "Stick to using TraceNode for testing", "committedDate": "2020-11-18T20:48:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxMTMwNg==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526711306", "bodyText": "Do we want type-related checks to be static_asserts instead?", "author": "vekterli", "createdAt": "2020-11-19T09:26:25Z", "path": "messagebus/src/tests/simpleprotocol/simpleprotocol.cpp", "diffHunk": "@@ -29,20 +27,23 @@ Test::Main()\n     {\n         // test protocol\n         IRoutingPolicy::UP bogus = protocol.createPolicy(\"bogus\", \"\");\n-        EXPECT_TRUE(bogus.get() == 0);\n+        EXPECT_FALSE(bogus);\n     }\n     TEST_FLUSH();\n     {\n         // test SimpleMessage\n-        Message::UP msg(new SimpleMessage(\"test\"));\n+        EXPECT_EQUAL(56u, sizeof(Routable));\n+        EXPECT_EQUAL(104u, sizeof(Message));\n+        EXPECT_EQUAL(184u, sizeof(SimpleMessage));", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5MTYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528591624", "bodyText": "I have tried both, but concluded that this is better as it also tells you the actual size when they change.\nIf it is essential that size is correct then a static_assert makes sense.", "author": "baldersheim", "createdAt": "2020-11-23T10:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxMTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMTYzNg==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526721636", "bodyText": "Should this also add the trace by move?", "author": "vekterli", "createdAt": "2020-11-19T09:41:49Z", "path": "storage/src/vespa/storage/distributor/operations/external/twophaseupdateoperation.cpp", "diffHunk": "@@ -647,7 +647,7 @@ TwoPhaseUpdateOperation::satisfiesUpdateTimestampConstraint(api::Timestamp ts) c\n void\n TwoPhaseUpdateOperation::addTraceFromReply(const api::StorageReply& reply)\n {\n-    if ( ! reply.getTrace().getRoot().isEmpty()) {\n+    if ( ! reply.getTrace().isEmpty()) {\n         _trace.addChild(reply.getTrace().getRoot());", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzMTczMA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528631730", "bodyText": "Moved", "author": "baldersheim", "createdAt": "2020-11-23T11:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyOTM3MA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526729370", "bodyText": "Should this return ensureRoot()?", "author": "vekterli", "createdAt": "2020-11-19T09:52:54Z", "path": "vespalib/src/vespa/vespalib/trace/trace.h", "diffHunk": "@@ -91,27 +80,50 @@ class Trace {\n      */\n     bool trace(uint32_t level, const string &note, bool addTime = true);\n \n-    /**\n-     * Returns the root of the trace tree.\n-     *\n-     * @return The root.\n-     */\n-    TraceNode &getRoot() { return _root; }\n+    void normalize() {\n+        if (_root) {\n+            _root->normalize();\n+        }\n+    }\n \n-    /**\n-     * Returns a const reference to the root of the trace tree.\n-     *\n-     * @return The root.\n-     */\n-    const TraceNode &getRoot() const { return _root; }\n+    void setStrict(bool strict) {\n+        ensureRoot().setStrict(strict);\n+    }\n+    void addChild(TraceNode && child) {\n+        ensureRoot().addChild(std::move(child));\n+    }\n+    void addChild(Trace && child) {\n+        if (!child.isEmpty()) {\n+            addChild(std::move(*child._root));\n+        }\n+    }\n+    //TODO This one should go away as we should prefer moving\n+    void addChild(const Trace & child) {\n+        if (!child.isEmpty()) {\n+            addChild(TraceNode(*child._root));\n+        }\n+    }\n+\n+    const TraceNode &getRoot() const { return *_root; }", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMjU3MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528602571", "bodyText": "I intend to get rid of getRoot completely so I intentionally wanted 'uncertified' use to create a coredump.", "author": "baldersheim", "createdAt": "2020-11-23T10:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyOTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMTk4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526731983", "bodyText": "Consider updating comment to remove mention of returning this", "author": "vekterli", "createdAt": "2020-11-19T09:56:42Z", "path": "vespalib/src/vespa/vespalib/trace/trace.h", "diffHunk": "@@ -18,53 +18,42 @@ namespace vespalib {\n  * information will be traced.\n  */\n class Trace {\n-private:\n-    uint32_t  _level;\n-    TraceNode _root;\n-\n public:\n \n     /**\n      * Create an empty Trace with level set to 0 (no tracing)\n      */\n-    Trace();\n-    ~Trace();\n-\n-    /**\n-     * Create an empty trace with given level.\n-     *\n-     * @param level Level to set.\n-     */\n-    explicit Trace(uint32_t level);\n+    Trace() : Trace(0) {}\n+    explicit Trace(uint32_t level) : _root(), _level(level) { }\n+    Trace & operator = (Trace &&) = default;\n+    Trace(Trace &&) = default;\n+    Trace(const Trace &);\n+    Trace & operator = (const Trace &) = delete;\n+    ~Trace() = default;\n \n     /**\n      * Remove all trace information and set the trace level to 0.\n      *\n      * @return This, to allow chaining.\n      */\n-    Trace &clear();\n+    void clear();", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5Mzk3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528593975", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-23T10:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MjA1OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526762059", "bodyText": "Copying the entire trace from the source command does indeed sound weird. If anything it sounds like it could create many duplicate entries when reply traces are eventually stitched together. For fan-out we normally create new commands and explicitly copy required fields into it. I suggest just copying the trace level here, and we can remove the copy ctor usage later.", "author": "vekterli", "createdAt": "2020-11-19T10:43:30Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagecommand.cpp", "diffHunk": "@@ -11,7 +11,12 @@ StorageCommand::StorageCommand(const StorageCommand& other)\n       _timeout(other._timeout),\n       _sourceIndex(other._sourceIndex)\n {\n-    setTrace(other.getTrace());\n+    // TODD do we really need copy construction, seems only use by CreateVisitorCommand ?", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDUwMw==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528600503", "bodyText": "Good, fixed", "author": "baldersheim", "createdAt": "2020-11-23T10:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MjA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NDU2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526764567", "bodyText": "I find rvalue-casting of returned non-rvalue refs to be dangerous since they may silently violate invariants of the source object. Consider adding an explicit steal_trace (or move_trace) function to spi::Context", "author": "vekterli", "createdAt": "2020-11-19T10:47:26Z", "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -676,7 +676,7 @@ FileStorManager::onInternal(const shared_ptr<api::InternalCommand>& msg)\n         spi::Context context(msg->getLoadType(), msg->getPriority(), msg->getTrace().getLevel());\n         shared_ptr<DestroyIteratorCommand> cmd(std::static_pointer_cast<DestroyIteratorCommand>(msg));\n         _provider->destroyIterator(cmd->getIteratorId(), context);\n-        msg->getTrace().getRoot().addChild(context.getTrace().getRoot());\n+        msg->getTrace().addChild(std::move(context.getTrace()));", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNTA1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528705056", "bodyText": "Added steal_trace and forced moving.", "author": "baldersheim", "createdAt": "2020-11-23T13:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NDU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NTA0Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526765042", "bodyText": "Consider adding an explicit steal_trace/move_trace function instead", "author": "vekterli", "createdAt": "2020-11-19T10:48:13Z", "path": "storage/src/vespa/storage/storageserver/communicationmanager.cpp", "diffHunk": "@@ -690,13 +690,13 @@ CommunicationManager::sendMessageBusReply(\n         if (reply->getResult().getResult() == api::ReturnCode::WRONG_DISTRIBUTION) {\n             replyUP = std::make_unique<documentapi::WrongDistributionReply>(reply->getResult().getMessage());\n             replyUP->swapState(*context._docAPIMsg);\n-            replyUP->setTrace(reply->getTrace());\n+            replyUP->setTrace(std::move(reply->getTrace()));", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNTE4MA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528705180", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-11-23T13:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NTA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2OTI5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526769299", "bodyText": "From what I can tell, the answer looks to be both \"yes\" and \"preferably\". Copying the trace leaves the old trace data behind, which is later moved into the reply when swapState is called. However, this copied trace information is immediately overwritten since we then call setTrace with whatever was in the source reply (which presumably includes the trace in the original command as well)", "author": "vekterli", "createdAt": "2020-11-19T10:54:44Z", "path": "storage/src/vespa/storage/storageserver/communicationmanager.cpp", "diffHunk": "@@ -102,7 +102,7 @@ CommunicationManager::handleMessage(std::unique_ptr<mbus::Message> msg)\n             return;\n         }\n \n-        cmd->setTrace(docMsgPtr->getTrace());\n+        cmd->setTrace(vespalib::Trace(docMsgPtr->getTrace())); // Can it be moved ?", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3OA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528704478", "bodyText": "Moving", "author": "baldersheim", "createdAt": "2020-11-23T13:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2OTI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTQ2MA==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r526781460", "bodyText": "The const-ness of the StorageCommand argument is already a white lie, since we destructively (and silently) acquire its transport context by move. We could probably do the same thing with traces, though we should first ensure that there aren't any callers that are unaware of this implicit copy and that try to copy/move the command's trace into the reply explicitly after constructing it.", "author": "vekterli", "createdAt": "2020-11-19T11:14:32Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagereply.cpp", "diffHunk": "@@ -14,7 +14,12 @@ StorageReply::StorageReply(const StorageCommand& cmd, ReturnCode code)\n     if (cmd.getAddress()) {\n         setAddress(*cmd.getAddress());\n     }\n-    setTrace(cmd.getTrace());\n+    // TODD do we really need copy construction", "originalCommit": "35b3c13c44390271d09f3a8b9bb1709d335443c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f14beea4b6c12584985347b1afbeadcc3b69f021", "url": "https://github.com/vespa-engine/vespa/commit/f14beea4b6c12584985347b1afbeadcc3b69f021", "message": "Update comment.", "committedDate": "2020-11-23T10:13:12Z", "type": "commit"}, {"oid": "95de10788c5f5a1c60e80e312091ed05b01a26fd", "url": "https://github.com/vespa-engine/vespa/commit/95de10788c5f5a1c60e80e312091ed05b01a26fd", "message": "Only copy tracelevel.", "committedDate": "2020-11-23T10:24:08Z", "type": "commit"}, {"oid": "da48ee20f9d5981e4aaa5cb719f0b3fea57d17e6", "url": "https://github.com/vespa-engine/vespa/commit/da48ee20f9d5981e4aaa5cb719f0b3fea57d17e6", "message": "Move instead of copy", "committedDate": "2020-11-23T11:19:07Z", "type": "commit"}, {"oid": "ca29131b659c51935fe6a6cdf3ae93207c79e714", "url": "https://github.com/vespa-engine/vespa/commit/ca29131b659c51935fe6a6cdf3ae93207c79e714", "message": "Move instead of copy.", "committedDate": "2020-11-23T11:35:11Z", "type": "commit"}, {"oid": "c3c152485a4e2d246d4dd50909a3481cdce71347", "url": "https://github.com/vespa-engine/vespa/commit/c3c152485a4e2d246d4dd50909a3481cdce71347", "message": "Steal the traces explicit and force moving of traces. Also hide access to the root.", "committedDate": "2020-11-23T13:30:45Z", "type": "commit"}, {"oid": "a9976e18ce5831531816abb3bb1ffa08b0aaabcb", "url": "https://github.com/vespa-engine/vespa/commit/a9976e18ce5831531816abb3bb1ffa08b0aaabcb", "message": "Avoid having mutating methods const.", "committedDate": "2020-11-23T13:59:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODg3Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528788876", "bodyText": "Consider having a steal_trace function for these as well", "author": "vekterli", "createdAt": "2020-11-23T15:31:41Z", "path": "storage/src/vespa/storage/storageserver/communicationmanager.cpp", "diffHunk": "@@ -102,7 +102,7 @@ CommunicationManager::handleMessage(std::unique_ptr<mbus::Message> msg)\n             return;\n         }\n \n-        cmd->setTrace(vespalib::Trace(docMsgPtr->getTrace())); // Can it be moved ?\n+        cmd->setTrace(std::move(docMsgPtr->getTrace()));", "originalCommit": "a9976e18ce5831531816abb3bb1ffa08b0aaabcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MDQ1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15385#discussion_r528850451", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-11-23T16:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODg3Ng=="}], "type": "inlineReview"}, {"oid": "7d53ab1b5a5e607b0e3023755b5ae4048cbb2c09", "url": "https://github.com/vespa-engine/vespa/commit/7d53ab1b5a5e607b0e3023755b5ae4048cbb2c09", "message": "Be explicit when stealing trace.", "committedDate": "2020-11-23T16:30:14Z", "type": "commit"}]}