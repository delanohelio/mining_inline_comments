{"pr_number": 12671, "pr_title": "Arnej/configurable distance metrics", "pr_createdAt": "2020-03-23T14:31:49Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12671", "timeline": [{"oid": "b1324afaa4cb684862debfb97a492750960cd0cf", "url": "https://github.com/vespa-engine/vespa/commit/b1324afaa4cb684862debfb97a492750960cd0cf", "message": "make HNSW distance metric configurable", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "dabdfd757930a7bb06035c718fce456326cf6f63", "url": "https://github.com/vespa-engine/vespa/commit/dabdfd757930a7bb06035c718fce456326cf6f63", "message": "add enum for selecting distance metric", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "49492f5698d52b87ee0ac98cf32d991246876125", "url": "https://github.com/vespa-engine/vespa/commit/49492f5698d52b87ee0ac98cf32d991246876125", "message": "more distance functions\n\n* extend DistanceFunction API\n* add Angular metric\n* add GeoDegrees metric", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "4867cc43efc6d92e5ff9db2924cb38280ebe7037", "url": "https://github.com/vespa-engine/vespa/commit/4867cc43efc6d92e5ff9db2924cb38280ebe7037", "message": "add unit test", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "b2bef82b64c8ddd707fa58d394eb325aac1812fb", "url": "https://github.com/vespa-engine/vespa/commit/b2bef82b64c8ddd707fa58d394eb325aac1812fb", "message": "split out DistanceFunction factory", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "fc6403cca1829df74abc0707f12023fc4857ba26", "url": "https://github.com/vespa-engine/vespa/commit/fc6403cca1829df74abc0707f12023fc4857ba26", "message": "add distance metric to HnswIndexParams", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "9be49315bc1fe7efa35eea5a244c2ce85c03c701", "url": "https://github.com/vespa-engine/vespa/commit/9be49315bc1fe7efa35eea5a244c2ce85c03c701", "message": "extend API with distance_function access", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "3967677db35ec4d9805c5a410a2a083472fb6dd1", "url": "https://github.com/vespa-engine/vespa/commit/3967677db35ec4d9805c5a410a2a083472fb6dd1", "message": "track API changes", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "63368ac60b322be2830868bd76570184c39938ed", "url": "https://github.com/vespa-engine/vespa/commit/63368ac60b322be2830868bd76570184c39938ed", "message": "use external factory for distance function", "committedDate": "2020-03-23T14:30:35Z", "type": "commit"}, {"oid": "1d3fdf021dab6ab47736feea0cd439e79360acbf", "url": "https://github.com/vespa-engine/vespa/commit/1d3fdf021dab6ab47736feea0cd439e79360acbf", "message": "use distance function from index if available\n\n* convert query tensor to same cell type as attribute\n* use DistanceFunction to calculate abstract distances for NNS\n* use DistanceFunction to convert abstract distances to rawscore\n* if no index is available, use a fallback DistanceFunction", "committedDate": "2020-03-23T14:30:36Z", "type": "commit"}, {"oid": "6e17e57db3435ccd8d5705b3bdd062ce337ff137", "url": "https://github.com/vespa-engine/vespa/commit/6e17e57db3435ccd8d5705b3bdd062ce337ff137", "message": "check that query tensor is converted correctly", "committedDate": "2020-03-23T14:30:36Z", "type": "commit"}, {"oid": "19c5bbc4a4babe52c0948a9c4c3bc5f6c1da7b85", "url": "https://github.com/vespa-engine/vespa/commit/19c5bbc4a4babe52c0948a9c4c3bc5f6c1da7b85", "message": "track API changes\n\n* also, NNS iterators no longer handles different cell types", "committedDate": "2020-03-23T14:30:36Z", "type": "commit"}, {"oid": "45af929151818ec383951d3d8b5018f690df85df", "url": "https://github.com/vespa-engine/vespa/commit/45af929151818ec383951d3d8b5018f690df85df", "message": "simplify iterator\n\n* now distance function handles cell type, so\n  iterator does not need to be templated on that.", "committedDate": "2020-03-23T14:30:36Z", "type": "commit"}, {"oid": "cb7d16718d08131e60badb1ab35521226f4ebed9", "url": "https://github.com/vespa-engine/vespa/commit/cb7d16718d08131e60badb1ab35521226f4ebed9", "message": "output distance in meters", "committedDate": "2020-03-24T07:52:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3Mzg5Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396973896", "bodyText": "Would be nice with a pointer to an article / wiki that describes that math behind.", "author": "geirst", "createdAt": "2020-03-24T08:26:26Z", "path": "searchlib/src/vespa/searchlib/tensor/distance_functions.h", "diffHunk": "@@ -25,10 +26,111 @@ class SquaredEuclideanDistance : public DistanceFunction {\n         assert(sz == rhs_vector.size());\n         return _computer.squaredEuclideanDistance(&lhs_vector[0], &rhs_vector[0], sz);\n     }\n+    double to_rawscore(double distance) const override {\n+        double d = sqrt(distance);\n+        double score = 1.0 / (1.0 + d);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double limit) const override\n+    {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        double sum = 0.0;\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        for (size_t i = 0; i < sz && sum <= limit; ++i) {\n+            double diff = lhs_vector[i] - rhs_vector[i];\n+            sum += diff*diff;\n+        }\n+        return sum;\n+    }\n+\n     const vespalib::hwaccelrated::IAccelrated & _computer;\n };\n \n template class SquaredEuclideanDistance<float>;\n template class SquaredEuclideanDistance<double>;\n \n+/**\n+ * Calculates angular distance between vectors with assumed norm 1.\n+ */\n+template <typename FloatType>\n+class AngularDistance : public DistanceFunction {\n+public:\n+    AngularDistance()\n+        : _computer(vespalib::hwaccelrated::IAccelrated::getAccelrator())\n+    {}\n+    double calc(const vespalib::tensor::TypedCells& lhs, const vespalib::tensor::TypedCells& rhs) const override {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        return 1.0 - _computer.dotProduct(&lhs_vector[0], &rhs_vector[0], sz);\n+    }\n+    double to_rawscore(double distance) const override {\n+        double score = 1.0 / (1.0 + distance);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double /*limit*/) const override\n+    {\n+        return calc(lhs, rhs);\n+    }\n+\n+    const vespalib::hwaccelrated::IAccelrated & _computer;\n+};\n+\n+template class AngularDistance<float>;\n+template class AngularDistance<double>;\n+\n+/**\n+ * Calculates great-circle distance between Latitude/Longitude pairs,\n+ * measured in degrees", "originalCommit": "49492f5698d52b87ee0ac98cf32d991246876125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMjU3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397112572", "bodyText": "pointer to wikipedia added", "author": "arnej27959", "createdAt": "2020-03-24T12:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3Mzg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NDI0MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396974241", "bodyText": "Please add copyright.", "author": "geirst", "createdAt": "2020-03-24T08:27:07Z", "path": "config-model/src/test/java/com/yahoo/searchdefinition/document/HnswIndexParamsTestCase.java", "diffHunk": "@@ -0,0 +1,53 @@\n+", "originalCommit": "4867cc43efc6d92e5ff9db2924cb38280ebe7037", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMjY3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397112675", "bodyText": "copyright added", "author": "arnej27959", "createdAt": "2020-03-24T12:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NDI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTM3OA==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396975378", "bodyText": "Consider adding function description.", "author": "geirst", "createdAt": "2020-03-24T08:29:08Z", "path": "searchlib/src/vespa/searchlib/tensor/distance_function_factory.h", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"distance_function.h\"\n+#include <vespa/eval/eval/value_type.h>\n+#include <vespa/searchcommon/attribute/distance_metric.h>\n+\n+namespace search::tensor {\n+\n+DistanceFunction::UP", "originalCommit": "b2bef82b64c8ddd707fa58d394eb325aac1812fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDAyMw==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397114023", "bodyText": "function description added.", "author": "arnej27959", "createdAt": "2020-03-24T12:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODIwNw==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396978207", "bodyText": "Please extend AttributeManagerTest::testConfigConvert() unit test as well (searchlib/src/tests/attribute/attributemanager/attributemanager_test.cpp).", "author": "geirst", "createdAt": "2020-03-24T08:34:20Z", "path": "searchlib/src/vespa/searchlib/attribute/configconverter.cpp", "diffHunk": "@@ -74,8 +74,22 @@ ConfigConverter::convert(const AttributesConfig::Attribute & cfg)\n     predicateParams.setDensePostingListThreshold(cfg.densepostinglistthreshold);\n     retval.setPredicateParams(predicateParams);\n     if (cfg.index.hnsw.enabled) {\n+        using CfgDm = AttributesConfig::Attribute::Index::Hnsw::Distancemetric;\n+        DistanceMetric dm;\n+        switch (cfg.index.hnsw.distancemetric) {\n+        case CfgDm::EUCLIDEAN:\n+            dm = DistanceMetric::Euclidean;\n+            break;\n+        case CfgDm::ANGULAR:\n+            dm = DistanceMetric::Angular;\n+            break;\n+        case CfgDm::GEODEGREES:\n+            dm = DistanceMetric::GeoDegrees;\n+            break;\n+        }\n         retval.set_hnsw_index_params(HnswIndexParams(cfg.index.hnsw.maxlinkspernode,\n-                                                     cfg.index.hnsw.neighborstoexploreatinsert));\n+                                                     cfg.index.hnsw.neighborstoexploreatinsert,\n+                                                     dm));", "originalCommit": "fc6403cca1829df74abc0707f12023fc4857ba26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExODkyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397118921", "bodyText": "unit test extended", "author": "arnej27959", "createdAt": "2020-03-24T12:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NTA4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396985087", "bodyText": "I guess the pointer should be const as well? All functions on DistanceFunction API is const, so it's better to be consistent.", "author": "geirst", "createdAt": "2020-03-24T08:47:08Z", "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "diffHunk": "@@ -35,6 +36,7 @@ class NearestNeighborIndex {\n                                              vespalib::tensor::TypedCells vector,\n                                              uint32_t explore_k) const = 0;\n \n+    virtual DistanceFunction *distance_function() const = 0;", "originalCommit": "9be49315bc1fe7efa35eea5a244c2ce85c03c701", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDE0NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397114145", "bodyText": "constified.", "author": "arnej27959", "createdAt": "2020-03-24T12:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NTA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NjQ0OA==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396986448", "bodyText": "Consider using auto.", "author": "geirst", "createdAt": "2020-03-24T08:49:24Z", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "diffHunk": "@@ -6,10 +6,47 @@\n #include \"nns_index_iterator.h\"\n #include <vespa/searchlib/fef/termfieldmatchdataarray.h>\n #include <vespa/eval/tensor/dense/dense_tensor_view.h>\n+#include <vespa/eval/tensor/dense/dense_tensor.h>\n #include <vespa/searchlib/tensor/dense_tensor_attribute.h>\n+#include <vespa/searchlib/tensor/distance_function_factory.h>\n+\n+using vespalib::tensor::DenseTensorView;\n+using vespalib::tensor::DenseTensor;\n \n namespace search::queryeval {\n \n+namespace {\n+\n+template<typename LCT, typename RCT>\n+void\n+convert_cells(std::unique_ptr<DenseTensorView> &original, vespalib::eval::ValueType want_type)\n+{\n+    auto old_cells = original->cellsRef().typify<LCT>();\n+    std::vector<RCT> new_cells;\n+    new_cells.reserve(old_cells.size());\n+    for (LCT value : old_cells) {", "originalCommit": "1d3fdf021dab6ab47736feea0cd439e79360acbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyMDE4MA==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397120180", "bodyText": "Here I feel using the actual type makes it clearer what is going on, and using \"auto\" would not save any typing either.", "author": "arnej27959", "createdAt": "2020-03-24T12:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NjQ0OA=="}], "type": "inlineReview"}, {"oid": "7038869d09bd49ac1f75a148260c73af287cea91", "url": "https://github.com/vespa-engine/vespa/commit/7038869d09bd49ac1f75a148260c73af287cea91", "message": "unit test distance functions", "committedDate": "2020-03-24T12:06:12Z", "type": "commit"}, {"oid": "f2fa9a9059bc5570b70a687d31cbd160ed28f8cc", "url": "https://github.com/vespa-engine/vespa/commit/f2fa9a9059bc5570b70a687d31cbd160ed28f8cc", "message": "remove debug printing", "committedDate": "2020-03-24T12:06:36Z", "type": "commit"}, {"oid": "2ca2401c18a7f3a6860c85ac133493867847f791", "url": "https://github.com/vespa-engine/vespa/commit/2ca2401c18a7f3a6860c85ac133493867847f791", "message": "add copyright", "committedDate": "2020-03-24T12:07:34Z", "type": "commit"}, {"oid": "6e725e88b10d424ff5f96ba702124033fdc86733", "url": "https://github.com/vespa-engine/vespa/commit/6e725e88b10d424ff5f96ba702124033fdc86733", "message": "add reference and refactor", "committedDate": "2020-03-24T12:21:13Z", "type": "commit"}, {"oid": "5cc83640d058ef6e905093c7eafdeffc3647dc07", "url": "https://github.com/vespa-engine/vespa/commit/5cc83640d058ef6e905093c7eafdeffc3647dc07", "message": "constify DistanceFunction", "committedDate": "2020-03-24T12:24:39Z", "type": "commit"}, {"oid": "eff4e99de2506232afab12f1f984ba88958506d2", "url": "https://github.com/vespa-engine/vespa/commit/eff4e99de2506232afab12f1f984ba88958506d2", "message": "add documentation comment", "committedDate": "2020-03-24T12:27:32Z", "type": "commit"}, {"oid": "45c2c45102f06b5911e390306d3d0c54fff8f67a", "url": "https://github.com/vespa-engine/vespa/commit/45c2c45102f06b5911e390306d3d0c54fff8f67a", "message": "extend unit test", "committedDate": "2020-03-24T12:36:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTExNA==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397195114", "bodyText": "Please update copyright.", "author": "geirst", "createdAt": "2020-03-24T14:28:19Z", "path": "searchlib/src/tests/tensor/distance_functions/CMakeLists.txt", "diffHunk": "@@ -0,0 +1,9 @@\n+# Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "originalCommit": "7038869d09bd49ac1f75a148260c73af287cea91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTIzNg==", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397195236", "bodyText": "Please update copyright.", "author": "geirst", "createdAt": "2020-03-24T14:28:29Z", "path": "searchlib/src/tests/tensor/distance_functions/distance_functions_test.cpp", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "originalCommit": "7038869d09bd49ac1f75a148260c73af287cea91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d102554f360621233d37b4fcd9822eb2542536e", "url": "https://github.com/vespa-engine/vespa/commit/7d102554f360621233d37b4fcd9822eb2542536e", "message": "update copyright headers", "committedDate": "2020-03-24T14:43:05Z", "type": "commit"}]}