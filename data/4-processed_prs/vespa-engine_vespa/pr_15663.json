{"pr_number": 15663, "pr_title": "Separate loks so the same lock is not used for multiple things.", "pr_createdAt": "2020-12-04T10:01:46Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15663", "timeline": [{"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c", "url": "https://github.com/vespa-engine/vespa/commit/c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c", "message": "Separate loks so the same lock is not used for multiple things.", "committedDate": "2020-12-04T10:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4ODY1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535988656", "bodyText": "do not use relaxed memory order here.", "author": "havardpe", "createdAt": "2020-12-04T10:15:59Z", "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -234,7 +235,7 @@ FNET_TransportThread::~FNET_TransportThread()\n     {\n         std::lock_guard<std::mutex> guard(_lock);\n     }\n-    if (_started && !_finished) {\n+    if (_started.load(std::memory_order_relaxed) && !_finished) {", "originalCommit": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzMxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003315", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-12-04T10:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4ODY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4OTkyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535989921", "bodyText": "you should rename this lock instead of the other lock", "author": "havardpe", "createdAt": "2020-12-04T10:17:57Z", "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown", "originalCommit": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzUxNA==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003514", "bodyText": "Fixed,", "author": "baldersheim", "createdAt": "2020-12-04T10:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4OTkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MDEyMA==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535990120", "bodyText": "also rename this to make it match the renamed lock", "author": "havardpe", "createdAt": "2020-12-04T10:18:17Z", "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown\n+    std::condition_variable  _cond;           // used for synchronization during shutdown", "originalCommit": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzYyNg==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003626", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-12-04T10:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MDEyMA=="}], "type": "inlineReview"}, {"oid": "cff80a28fe335379099ef561ee652f825aeb396c", "url": "https://github.com/vespa-engine/vespa/commit/cff80a28fe335379099ef561ee652f825aeb396c", "message": "_lock -> _shutdownLock, _qLock -> _lock and no std::memory_order_relaxed", "committedDate": "2020-12-04T10:38:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536030892", "bodyText": "consider some extra cleanup by removing _waitFinished altogether and always notifying all.", "author": "havardpe", "createdAt": "2020-12-04T11:26:35Z", "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -556,10 +549,10 @@ FNET_TransportThread::endEventLoop() {\n            _myQueue.IsEmpty_NoLock());\n \n     {\n-        std::lock_guard<std::mutex> guard(_lock);\n+        std::lock_guard<std::mutex> guard(_shutdownLock);\n         _finished = true;\n         if (_waitFinished) {\n-            _cond.notify_all();\n+            _shutdownCond.notify_all();", "originalCommit": "cff80a28fe335379099ef561ee652f825aeb396c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTM4Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536035382", "bodyText": "Good point, I was wondering about its actual value.", "author": "baldersheim", "createdAt": "2020-12-04T11:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NDkxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536044919", "bodyText": "It is the 'avoid signals unless someone is waiting' pattern used elsewhere, but no real need for it here.", "author": "havardpe", "createdAt": "2020-12-04T11:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg=="}], "type": "inlineReview"}, {"oid": "b79dc8d438540246d065403ea440e221592be5a0", "url": "https://github.com/vespa-engine/vespa/commit/b79dc8d438540246d065403ea440e221592be5a0", "message": "GC _waitFinished", "committedDate": "2020-12-04T11:31:48Z", "type": "commit"}]}