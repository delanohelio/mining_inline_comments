{"pr_number": 13328, "pr_title": "Split out constant portion of phrase splitter to phrase splitter query env", "pr_createdAt": "2020-05-20T12:25:14Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13328", "timeline": [{"oid": "2565a2a4244d0347a0e983dd921bbea130ff2d32", "url": "https://github.com/vespa-engine/vespa/commit/2565a2a4244d0347a0e983dd921bbea130ff2d32", "message": "Split out constant portion of PhraseSplitter to PhraseSplitterQueryEnv.", "committedDate": "2020-05-20T10:56:11Z", "type": "commit"}, {"oid": "1bc201d21999b1463b2123b44830351c40de57e8", "url": "https://github.com/vespa-engine/vespa/commit/1bc201d21999b1463b2123b44830351c40de57e8", "message": "Explicitly manage PhraseSplitterQueryEnv.", "committedDate": "2020-05-20T12:10:13Z", "type": "commit"}, {"oid": "8ba1806c323fc8a2e1eef1ba2f9716fc4986ff87", "url": "https://github.com/vespa-engine/vespa/commit/8ba1806c323fc8a2e1eef1ba2f9716fc4986ff87", "message": "Update class comments for PhraseSplitter and PhraseSplitterQueryEnv.", "committedDate": "2020-05-20T12:21:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNjA0NA==", "url": "https://github.com/vespa-engine/vespa/pull/13328#discussion_r428016044", "bodyText": "field -> fieldId", "author": "geirst", "createdAt": "2020-05-20T13:36:32Z", "path": "searchlib/src/vespa/searchlib/fef/phrase_splitter_query_env.h", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"iqueryenvironment.h\"\n+#include \"simpletermdata.h\"\n+\n+namespace search::fef {\n+\n+/**\n+ * This class is used to split all phrase terms in a query environment\n+ * into separate terms. New TermData and TermFieldMatchData objects\n+ * are created for each splitted phrase term and managed by this\n+ * class.  Unmodified single terms are served from the query\n+ * environment and match data.\n+ *\n+ * The TermFieldMatchData objects managed by this class are updated\n+ * based on the TermFieldMatchData objects associated with the\n+ * original phrase terms. Positions are adjusted with +1 for each term\n+ * after the first one.\n+ *\n+ * Use this class if you want to handle a phrase term the same way as\n+ * single terms.\n+ **/\n+class PhraseSplitterQueryEnv : public IQueryEnvironment\n+{\n+protected:\n+    struct TermIdx {\n+        uint32_t idx;      // index into either query environment or vector of TermData objects\n+        bool     splitted; // whether this term has been splitted or not\n+        TermIdx(uint32_t i, bool s) : idx(i), splitted(s) {}\n+    };\n+    struct PhraseTerm {\n+        const ITermData & term; // for original phrase\n+        uint32_t idx; // index into vector of our TermData objects\n+        TermFieldHandle orig_handle;\n+        PhraseTerm(const ITermData & t, uint32_t i, uint32_t h) : term(t), idx(i), orig_handle(h) {}\n+    };\n+    struct HowToCopy {\n+        TermFieldHandle orig_handle;\n+        TermFieldHandle split_handle;\n+        uint32_t offsetInPhrase;\n+    };\n+\n+    const IQueryEnvironment        &_queryEnv;\n+    std::vector<SimpleTermData>     _terms;       // splitted terms\n+    std::vector<HowToCopy>          _copyInfo;\n+    std::vector<TermIdx>            _termIdxMap;  // renumbering of terms\n+    TermFieldHandle                 _maxHandle;   // the largest among original term field handles\n+    TermFieldHandle                 _skipHandles;   // how many handles to skip\n+\n+    void considerTerm(uint32_t termIdx, const ITermData &term, std::vector<PhraseTerm> &phraseTerms, uint32_t fieldId);\n+\n+public:\n+    /**\n+     * Create a phrase splitter based on the given query environment.\n+     *\n+     * @param queryEnv the query environment to wrap.\n+     * @param field the field where we need to split phrases", "originalCommit": "2565a2a4244d0347a0e983dd921bbea130ff2d32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTAxNA==", "url": "https://github.com/vespa-engine/vespa/pull/13328#discussion_r428021014", "bodyText": "Could consider to reduce the verbosity if this function name. E.g. get_query_env() instead.", "author": "geirst", "createdAt": "2020-05-20T13:42:48Z", "path": "searchlib/src/vespa/searchlib/fef/phrasesplitter.h", "diffHunk": "@@ -72,6 +75,7 @@ class PhraseSplitter : public PhraseSplitterQueryEnv\n     }\n \n     void bind_match_data(const fef::MatchData &md) { _matchData = &md; }\n+    const PhraseSplitterQueryEnv& get_phrase_splitter_query_env() const { return _phrase_splitter_query_env; }", "originalCommit": "1bc201d21999b1463b2123b44830351c40de57e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "078bb54ac843676a3292260bb161fb9024daba46", "url": "https://github.com/vespa-engine/vespa/commit/078bb54ac843676a3292260bb161fb9024daba46", "message": "Adjust constructor comment.", "committedDate": "2020-05-20T13:51:18Z", "type": "commit"}, {"oid": "061857a35581df9f7d80a15b0928952f2f9df8e3", "url": "https://github.com/vespa-engine/vespa/commit/061857a35581df9f7d80a15b0928952f2f9df8e3", "message": "Reduce verbosity of method name for getting phrase splitter query env.", "committedDate": "2020-05-20T13:51:47Z", "type": "commit"}]}