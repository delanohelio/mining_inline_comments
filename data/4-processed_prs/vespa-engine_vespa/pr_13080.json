{"pr_number": 13080, "pr_title": "Remove batching of messages that has no effect in favor of making asy\u2026", "pr_createdAt": "2020-04-27T12:30:03Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13080", "timeline": [{"oid": "f0a7a14d639059f4d9de3001fc96d95219f499b2", "url": "https://github.com/vespa-engine/vespa/commit/f0a7a14d639059f4d9de3001fc96d95219f499b2", "message": "Remove batching of messages that has no effect in favor of making async operations easier to implement.", "committedDate": "2020-04-27T12:28:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3Nzc0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13080#discussion_r415777749", "bodyText": "Consider updating log message to no longer talk about looping", "author": "vekterli", "createdAt": "2020-04-27T12:41:10Z", "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -894,115 +894,24 @@ bool hasBucketInfo(const api::StorageMessage& msg)\n \n }\n \n-void\n-PersistenceThread::flushAllReplies(\n-        const document::Bucket& bucket,\n-        std::vector<std::unique_ptr<MessageTracker> >& replies)\n-{\n-    if (replies.empty()) {\n-        return;\n-    }\n-\n-    try {\n-        if (replies.size() > 1) {\n-            _env._metrics.batchingSize.addValue(replies.size());\n-        }\n-#ifdef ENABLE_BUCKET_OPERATION_LOGGING\n-        {\n-            size_t nputs = 0, nremoves = 0, nother = 0;\n-            for (size_t i = 0; i < replies.size(); ++i) {\n-                if (dynamic_cast<api::PutReply*>(replies[i]->getReply().get()))\n-                {\n-                    ++nputs;\n-                } else if (dynamic_cast<api::RemoveReply*>(\n-                                replies[i]->getReply().get()))\n-                {\n-                    ++nremoves;\n-                } else {\n-                    ++nother;\n-                }\n-            }\n-            LOG_BUCKET_OPERATION(\n-                    bucket.getBucketId(),\n-                    vespalib::make_string(\n-                            \"flushing %zu operations (%zu puts, %zu removes, \"\n-                            \"%zu other)\",\n-                            replies.size(), nputs, nremoves, nother));\n-        }\n-#endif\n-        spi::Bucket b(bucket, spi::PartitionId(_env._partition));\n-        // Flush is not used for anything currentlu, and the context is not correct either when batching is done\n-        // So just faking it here.\n-        spi::Context dummyContext(documentapi::LoadType::DEFAULT, 0, 0);\n-        spi::Result result = _spi.flush(b, dummyContext);\n-        uint32_t errorCode = _env.convertErrorCode(result);\n-        if (errorCode != 0) {\n-            for (uint32_t i = 0; i < replies.size(); ++i) {\n-                replies[i]->getReply()->setResult(api::ReturnCode((api::ReturnCode::Result)errorCode, result.getErrorMessage()));\n-            }\n-        }\n-    } catch (std::exception& e) {\n-        for (uint32_t i = 0; i < replies.size(); ++i) {\n-            replies[i]->getReply()->setResult(api::ReturnCode(api::ReturnCode::INTERNAL_FAILURE, e.what()));\n-        }\n-    }\n-\n-    for (uint32_t i = 0; i < replies.size(); ++i) {\n-        LOG(spam, \"Sending reply up (batched): %s %\" PRIu64,\n-            replies[i]->getReply()->toString().c_str(), replies[i]->getReply()->getMsgId());\n-        _env._fileStorHandler.sendReply(replies[i]->getReply());\n-    }\n-\n-    replies.clear();\n-}\n-\n-void PersistenceThread::processMessages(FileStorHandler::LockedMessage & lock)\n-{\n+void PersistenceThread::processMessages(FileStorHandler::LockedMessage & lock) {\n     std::vector<MessageTracker::UP> trackers;\n     document::Bucket bucket = lock.first->getBucket();\n \n-    while (lock.second) {\n-        LOG(debug, \"Inside while loop %d, nodeIndex %d, ptr=%p\", _env._partition, _env._nodeIndex, lock.second.get());\n-        std::shared_ptr<api::StorageMessage> msg(lock.second);\n-        bool batchable = isBatchable(*msg);\n-\n-        // If the next operation wasn't batchable, we should flush\n-        // everything that came before.\n-        if (!batchable) {\n-            flushAllReplies(bucket, trackers);\n-        }\n-\n-        std::unique_ptr<MessageTracker> tracker = processMessage(*msg);\n-        if (!tracker || !tracker->getReply()) {\n-            // Was a reply\n-            break;\n-        }\n+    LOG(debug, \"Inside while loop %d, nodeIndex %d, ptr=%p\", _env._partition, _env._nodeIndex, lock.second.get());", "originalCommit": "f0a7a14d639059f4d9de3001fc96d95219f499b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwODk1OA==", "url": "https://github.com/vespa-engine/vespa/pull/13080#discussion_r415808958", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-04-27T13:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3Nzc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4NDU4MQ==", "url": "https://github.com/vespa-engine/vespa/pull/13080#discussion_r415784581", "bodyText": "Consider updating name to not be plural anymore (probably something like processLockedMessage to avoid colliding with existing processMessage", "author": "vekterli", "createdAt": "2020-04-27T12:51:05Z", "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -894,115 +894,24 @@ bool hasBucketInfo(const api::StorageMessage& msg)\n \n }\n \n-void\n-PersistenceThread::flushAllReplies(\n-        const document::Bucket& bucket,\n-        std::vector<std::unique_ptr<MessageTracker> >& replies)\n-{\n-    if (replies.empty()) {\n-        return;\n-    }\n-\n-    try {\n-        if (replies.size() > 1) {\n-            _env._metrics.batchingSize.addValue(replies.size());\n-        }\n-#ifdef ENABLE_BUCKET_OPERATION_LOGGING\n-        {\n-            size_t nputs = 0, nremoves = 0, nother = 0;\n-            for (size_t i = 0; i < replies.size(); ++i) {\n-                if (dynamic_cast<api::PutReply*>(replies[i]->getReply().get()))\n-                {\n-                    ++nputs;\n-                } else if (dynamic_cast<api::RemoveReply*>(\n-                                replies[i]->getReply().get()))\n-                {\n-                    ++nremoves;\n-                } else {\n-                    ++nother;\n-                }\n-            }\n-            LOG_BUCKET_OPERATION(\n-                    bucket.getBucketId(),\n-                    vespalib::make_string(\n-                            \"flushing %zu operations (%zu puts, %zu removes, \"\n-                            \"%zu other)\",\n-                            replies.size(), nputs, nremoves, nother));\n-        }\n-#endif\n-        spi::Bucket b(bucket, spi::PartitionId(_env._partition));\n-        // Flush is not used for anything currentlu, and the context is not correct either when batching is done\n-        // So just faking it here.\n-        spi::Context dummyContext(documentapi::LoadType::DEFAULT, 0, 0);\n-        spi::Result result = _spi.flush(b, dummyContext);\n-        uint32_t errorCode = _env.convertErrorCode(result);\n-        if (errorCode != 0) {\n-            for (uint32_t i = 0; i < replies.size(); ++i) {\n-                replies[i]->getReply()->setResult(api::ReturnCode((api::ReturnCode::Result)errorCode, result.getErrorMessage()));\n-            }\n-        }\n-    } catch (std::exception& e) {\n-        for (uint32_t i = 0; i < replies.size(); ++i) {\n-            replies[i]->getReply()->setResult(api::ReturnCode(api::ReturnCode::INTERNAL_FAILURE, e.what()));\n-        }\n-    }\n-\n-    for (uint32_t i = 0; i < replies.size(); ++i) {\n-        LOG(spam, \"Sending reply up (batched): %s %\" PRIu64,\n-            replies[i]->getReply()->toString().c_str(), replies[i]->getReply()->getMsgId());\n-        _env._fileStorHandler.sendReply(replies[i]->getReply());\n-    }\n-\n-    replies.clear();\n-}\n-\n-void PersistenceThread::processMessages(FileStorHandler::LockedMessage & lock)\n-{\n+void PersistenceThread::processMessages(FileStorHandler::LockedMessage & lock) {", "originalCommit": "f0a7a14d639059f4d9de3001fc96d95219f499b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwOTEzMw==", "url": "https://github.com/vespa-engine/vespa/pull/13080#discussion_r415809133", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-04-27T13:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4NDU4MQ=="}], "type": "inlineReview"}, {"oid": "2e1602d453dc4272e7e1040a21f12e3438c8a5aa", "url": "https://github.com/vespa-engine/vespa/commit/2e1602d453dc4272e7e1040a21f12e3438c8a5aa", "message": "Update comments, and don't copy the shared ptr when not necessary.", "committedDate": "2020-04-27T13:23:01Z", "type": "commit"}]}