{"pr_number": 15476, "pr_title": "As we have have now removed the expensive Route member we can further\u2026", "pr_createdAt": "2020-11-26T00:29:07Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15476", "timeline": [{"oid": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "url": "https://github.com/vespa-engine/vespa/commit/ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "message": "As we have have now removed the expensive Route member we can further compact the message objects.\n- Compact StorageMessageAddress to 16 bytes by\n   - using reference to cluster name.\n   - Use small enums for protocol and node type.\n- Avoid having StorageMessage as separate allocation.\n- Avoid default values", "committedDate": "2020-11-26T00:23:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNDc5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530814791", "bodyText": "Shouldn't this be initialised to \"storage\" ?", "author": "geirst", "createdAt": "2020-11-26T07:17:09Z", "path": "searchcore/src/apps/vespa-feed-bm/bm_cluster_controller.cpp", "diffHunk": "@@ -42,7 +42,8 @@ BmClusterController::BmClusterController(SharedRpcResources& shared_rpc_resource\n void\n BmClusterController::set_cluster_up(bool distributor)\n {\n-    StorageMessageAddress storage_address(\"storage\", distributor ? NodeType::DISTRIBUTOR : NodeType::STORAGE, 0);\n+    static vespalib::string _storage;", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjExMA==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530882110", "bodyText": "Yes, it should :)", "author": "baldersheim", "createdAt": "2020-11-26T09:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNDc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNTQ5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530815492", "bodyText": "Shouldn't this be initialised to \"storage\" ?", "author": "geirst", "createdAt": "2020-11-26T07:19:12Z", "path": "storage/src/tests/distributor/bucketdbupdatertest.cpp", "diffHunk": "@@ -392,7 +392,8 @@ class BucketDBUpdaterTest : public Test,\n     }\n \n     api::StorageMessageAddress storageAddress(uint16_t node) {\n-        return api::StorageMessageAddress(\"storage\", lib::NodeType::STORAGE, node);\n+        static vespalib::string _storage;", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjkxOA==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530882918", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-26T09:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNzcwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530817709", "bodyText": "This was _Storage2 before.", "author": "geirst", "createdAt": "2020-11-26T07:24:41Z", "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -1371,7 +1347,7 @@ TEST_F(FileStorManagerTest, delete_bucket) {\n     // Putting it\n     {\n         auto cmd = std::make_shared<api::PutCommand>(makeDocumentBucket(bid), doc, 105);\n-        cmd->setAddress(address);\n+        cmd->setAddress(_Storage3);", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NDcwMg==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530884702", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-26T09:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNzgxMA==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530817810", "bodyText": "This was _Storage2 before.", "author": "geirst", "createdAt": "2020-11-26T07:24:56Z", "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -1387,7 +1363,7 @@ TEST_F(FileStorManagerTest, delete_bucket) {\n     // Delete bucket\n     {\n         auto cmd = std::make_shared<api::DeleteBucketCommand>(makeDocumentBucket(bid));\n-        cmd->setAddress(address);\n+        cmd->setAddress(_Storage3);", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NDgzNw==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530884837", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-26T09:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxNzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxODc1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530818751", "bodyText": "Shouldn't this be initialised to \"storage\"?", "author": "geirst", "createdAt": "2020-11-26T07:27:01Z", "path": "storage/src/tests/visiting/visitormanagertest.cpp", "diffHunk": "@@ -36,7 +36,8 @@ namespace storage {\n namespace {\n \n using msg_ptr_vector = std::vector<api::StorageMessage::SP>;\n-\n+vespalib::string _Storage;", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NTkxMw==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530885913", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-26T09:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxODc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTAxNw==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530821017", "bodyText": "@vekterli should look at this.", "author": "geirst", "createdAt": "2020-11-26T07:32:30Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagemessage.cpp", "diffHunk": "@@ -143,90 +143,68 @@ std::ostream & operator << (std::ostream & os, const StorageMessageAddress & add\n     return os << addr.toString();\n }\n \n-static vespalib::string\n-createAddress(vespalib::stringref cluster, const lib::NodeType& type, uint16_t index)\n-{\n+namespace {\n+\n+vespalib::string\n+createAddress(vespalib::stringref cluster, const lib::NodeType &type, uint16_t index) {\n     vespalib::asciistream os;\n     os << STORAGEADDRESS_PREFIX << cluster << '/' << type.toString() << '/' << index << \"/default\";\n     return os.str();\n }\n \n-size_t\n-calculate_node_hash(const lib::NodeType& type, uint16_t index)\n-{\n-    uint16_t buf[] = { type, index };\n-    return vespalib::hashValue(&buf, sizeof(buf));\n+uint32_t\n+calculate_node_hash(const lib::NodeType &type, uint16_t index) {\n+    uint16_t buf[] = {type, index};\n+    size_t hash =  vespalib::hashValue(&buf, sizeof(buf));\n+    return uint32_t(hash & 0xffffffffl) ^ uint32_t(hash >> 32);", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwMTc1Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r531001752", "bodyText": "The entropy quality of the lower and higher 32 bits of the XXH3 output should be pretty much the same, but mixing them together doesn't hurt either. If we didn't mix, we probably should have added an explicit uint32_t cast anyway to avoid any latent truncation warnings from the compiler.", "author": "vekterli", "createdAt": "2020-11-26T12:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTc1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530821751", "bodyText": "clusterName -> cluster (as elsewhere in the file).", "author": "geirst", "createdAt": "2020-11-26T07:34:30Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagemessage.h", "diffHunk": "@@ -263,40 +263,44 @@ class MessageType : public vespalib::Printable {\n  */\n class StorageMessageAddress {\n public:\n-    enum Protocol { STORAGE, DOCUMENT };\n+    enum class Protocol : uint8_t { STORAGE, DOCUMENT };\n \n private:\n-    vespalib::string  _cluster;\n+    const vespalib::string  *_cluster;\n     // Used for internal VDS addresses only\n-    size_t               _precomputed_storage_hash;\n-    const lib::NodeType* _type;\n-    Protocol             _protocol;\n-    uint16_t             _index;\n+    uint32_t                 _precomputed_storage_hash;\n+    lib::NodeType::Type      _type;\n+    Protocol                 _protocol;\n+    uint16_t                 _index;\n \n public:\n     StorageMessageAddress(); // Only to be used when transient default ctor semantics are needed by containers\n-    StorageMessageAddress(vespalib::stringref clusterName,\n-                          const lib::NodeType& type, uint16_t index,\n-                          Protocol protocol = STORAGE);\n+    StorageMessageAddress(const vespalib::string * clusterName, const lib::NodeType& type, uint16_t index);", "originalCommit": "ee2baa1b001a282bd57318a3f0b8881cdcbc3049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NjcwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r530886705", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-11-26T09:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTc1MQ=="}], "type": "inlineReview"}, {"oid": "35ab8d933184804884a90b2852463ab6db2a4636", "url": "https://github.com/vespa-engine/vespa/commit/35ab8d933184804884a90b2852463ab6db2a4636", "message": "Use correct storage cluster name.", "committedDate": "2020-11-26T09:29:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNDkxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r531004919", "bodyText": "These could all safely be noexcept now", "author": "vekterli", "createdAt": "2020-11-26T12:45:21Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagemessage.h", "diffHunk": "@@ -263,40 +263,44 @@ class MessageType : public vespalib::Printable {\n  */\n class StorageMessageAddress {\n public:\n-    enum Protocol { STORAGE, DOCUMENT };\n+    enum class Protocol : uint8_t { STORAGE, DOCUMENT };\n \n private:\n-    vespalib::string  _cluster;\n+    const vespalib::string  *_cluster;\n     // Used for internal VDS addresses only\n-    size_t               _precomputed_storage_hash;\n-    const lib::NodeType* _type;\n-    Protocol             _protocol;\n-    uint16_t             _index;\n+    uint32_t                 _precomputed_storage_hash;\n+    lib::NodeType::Type      _type;\n+    Protocol                 _protocol;\n+    uint16_t                 _index;\n \n public:\n     StorageMessageAddress(); // Only to be used when transient default ctor semantics are needed by containers\n-    StorageMessageAddress(vespalib::stringref clusterName,\n-                          const lib::NodeType& type, uint16_t index,\n-                          Protocol protocol = STORAGE);\n+    StorageMessageAddress(const vespalib::string * cluster, const lib::NodeType& type, uint16_t index);\n+    StorageMessageAddress(const vespalib::string * cluster, const lib::NodeType& type, uint16_t index, Protocol protocol);\n     ~StorageMessageAddress();\n \n     void setProtocol(Protocol p) { _protocol = p; }\n \n     mbus::Route to_mbus_route() const;\n     Protocol getProtocol() const { return _protocol; }\n-    uint16_t getIndex() const;\n-    const lib::NodeType& getNodeType() const;\n-    const vespalib::string& getCluster() const;\n+    uint16_t getIndex() const { return _index; }\n+    lib::NodeType::Type getNodeType() const { return _type; }\n+    const vespalib::string& getCluster() const { return *_cluster; }", "originalCommit": "35ab8d933184804884a90b2852463ab6db2a4636", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MDA5NA==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r531170094", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-11-26T17:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNDkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxMDI4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r531010285", "bodyText": "There may be some clever code somewhere that looks at message addresses at arbitrary points in time, so the answer is \"maaaybe?\" \ud83d\ude42 But with these changes it seems moving cannot realistically be cheaper than a copy anyway.", "author": "vekterli", "createdAt": "2020-11-26T12:55:13Z", "path": "storageapi/src/vespa/storageapi/messageapi/storagereply.cpp", "diffHunk": "@@ -12,7 +12,7 @@ StorageReply::StorageReply(const StorageCommand& cmd, ReturnCode code)\n {\n     setPriority(cmd.getPriority());\n     if (cmd.getAddress()) {\n-        setAddress(*cmd.getAddress());\n+        setAddress(*cmd.getAddress()); // Hmm, could we steal the address ?", "originalCommit": "35ab8d933184804884a90b2852463ab6db2a4636", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NjIyMA==", "url": "https://github.com/vespa-engine/vespa/pull/15476#discussion_r531066220", "bodyText": "Forgotten comment :) removed", "author": "baldersheim", "createdAt": "2020-11-26T14:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxMDI4NQ=="}], "type": "inlineReview"}, {"oid": "a2d4e3411d4173be5767750d4e71081d54bba9b6", "url": "https://github.com/vespa-engine/vespa/commit/a2d4e3411d4173be5767750d4e71081d54bba9b6", "message": "Comment removed", "committedDate": "2020-11-26T14:29:27Z", "type": "commit"}, {"oid": "0acc3577c746805516323c5dd77f0fd5d4f8777b", "url": "https://github.com/vespa-engine/vespa/commit/0acc3577c746805516323c5dd77f0fd5d4f8777b", "message": "Add noexcept", "committedDate": "2020-11-26T17:50:18Z", "type": "commit"}]}