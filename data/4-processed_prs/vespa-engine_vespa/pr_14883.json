{"pr_number": 14883, "pr_title": "vespalib::Monitor -> std:.mutex/std::condition_variable", "pr_createdAt": "2020-10-14T19:24:45Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14883", "timeline": [{"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "url": "https://github.com/vespa-engine/vespa/commit/c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "message": "vespalib::Monitor -> std:.mutex/std::condition_variable", "committedDate": "2020-10-14T19:23:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTMxMg==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505385312", "bodyText": "prefer using new types directly in the code to avoid confusion with old concepts", "author": "havardpe", "createdAt": "2020-10-15T09:15:33Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -35,6 +34,8 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n {\n public:\n     using init_fun_t = std::function<int(Runnable&)>;\n+    using LockGuard = std::unique_lock<std::mutex>;", "originalCommit": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMzcyNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505423725", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-10-15T10:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTUzNA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505385534", "bodyText": "same as above", "author": "havardpe", "createdAt": "2020-10-15T09:15:54Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -35,6 +34,8 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n {\n public:\n     using init_fun_t = std::function<int(Runnable&)>;\n+    using LockGuard = std::unique_lock<std::mutex>;\n+    using MonitorGuard = std::unique_lock<std::mutex>;", "originalCommit": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyNDE0Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505424142", "bodyText": "Fixed, MonitorGuard -> unique_lock", "author": "baldersheim", "createdAt": "2020-10-15T10:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NzM4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505387389", "bodyText": "Prefer calling this one '_lock' as the other places, since a monitor is both a lock and a condition_variable", "author": "havardpe", "createdAt": "2020-10-15T09:18:31Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -78,16 +80,20 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n \n     struct BlockedThread {\n         const uint32_t wait_task_count;\n-        Monitor monitor;\n+        mutable std::mutex monitor;\n+        mutable std::condition_variable cond;\n         bool blocked;\n         BlockedThread(uint32_t wait_task_count_in)\n-            : wait_task_count(wait_task_count_in), monitor(), blocked(true) {}\n+            : wait_task_count(wait_task_count_in), monitor(), cond(), blocked(true) {}\n         void wait() const;\n         void unblock();\n     };\n \n     std::unique_ptr<FastOS_ThreadPool>   _pool;\n-    Monitor                              _monitor;\n+    mutable std::mutex                   _monitor;", "originalCommit": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMzUwMg==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505423502", "bodyText": "Done, I did no renaming to make it easier to see the changes.", "author": "baldersheim", "createdAt": "2020-10-15T10:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NzM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4Nzc5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505387791", "bodyText": "prefer passing this in addition to the held lock in wakeup to avoid protected fields", "author": "havardpe", "createdAt": "2020-10-15T09:19:08Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -78,16 +80,20 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n \n     struct BlockedThread {\n         const uint32_t wait_task_count;\n-        Monitor monitor;\n+        mutable std::mutex monitor;\n+        mutable std::condition_variable cond;\n         bool blocked;\n         BlockedThread(uint32_t wait_task_count_in)\n-            : wait_task_count(wait_task_count_in), monitor(), blocked(true) {}\n+            : wait_task_count(wait_task_count_in), monitor(), cond(), blocked(true) {}\n         void wait() const;\n         void unblock();\n     };\n \n     std::unique_ptr<FastOS_ThreadPool>   _pool;\n-    Monitor                              _monitor;\n+    mutable std::mutex                   _monitor;\n+protected:\n+    std::condition_variable              _cond;", "originalCommit": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMzEwOA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505423108", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-10-15T10:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4Nzc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM5MzUwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505393509", "bodyText": "prefer 'lock' over 'monitor' (lock/cond/guard seems to match what is done elsewhere in our code)", "author": "havardpe", "createdAt": "2020-10-15T09:27:30Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -56,13 +57,14 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n     };\n \n     struct Worker {\n-        Monitor    monitor;\n+        std::mutex              monitor;", "originalCommit": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMjk5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505422993", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-10-15T10:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM5MzUwOQ=="}], "type": "inlineReview"}, {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "url": "https://github.com/vespa-engine/vespa/commit/88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "message": "- LockGuard -> unique_lock\n- Pass cond to avoid having protected members.\n- monitor -> lock", "committedDate": "2020-10-15T10:06:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjI3OA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442278", "bodyText": "this should probably also be called guard", "author": "havardpe", "createdAt": "2020-10-15T10:42:17Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -72,22 +72,22 @@ ThreadStackExecutorBase::unblock_threads(const MonitorGuard &)\n void\n ThreadStackExecutorBase::assignTask(TaggedTask task, Worker &worker)\n {\n-    MonitorGuard monitor(worker.monitor);\n+    unique_lock monitor(worker.lock);", "originalCommit": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzMzMw==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505453333", "bodyText": "#14896", "author": "baldersheim", "createdAt": "2020-10-15T11:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjczMw==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442733", "bodyText": "and this", "author": "havardpe", "createdAt": "2020-10-15T10:43:02Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -72,22 +72,22 @@ ThreadStackExecutorBase::unblock_threads(const MonitorGuard &)\n void\n ThreadStackExecutorBase::assignTask(TaggedTask task, Worker &worker)\n {\n-    MonitorGuard monitor(worker.monitor);\n+    unique_lock monitor(worker.lock);\n     worker.verify(/* idle: */ true);\n     worker.idle = false;\n     worker.task = std::move(task);\n-    monitor.signal();\n+    worker.cond.notify_one();\n }\n \n bool\n ThreadStackExecutorBase::obtainTask(Worker &worker)\n {\n     {\n-        MonitorGuard monitor(_monitor);\n+        unique_lock monitor(_lock);", "originalCommit": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzIyNg==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505453226", "bodyText": "#14896", "author": "baldersheim", "createdAt": "2020-10-15T11:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjkyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442920", "bodyText": "and this", "author": "havardpe", "createdAt": "2020-10-15T10:43:24Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -105,9 +105,9 @@ ThreadStackExecutorBase::obtainTask(Worker &worker)\n         _workers.push(&worker);\n     }\n     {\n-        MonitorGuard monitor(worker.monitor);\n+        unique_lock monitor(worker.lock);", "originalCommit": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzQ4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505453485", "bodyText": "#14896", "author": "baldersheim", "createdAt": "2020-10-15T11:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mzg0NA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505443844", "bodyText": "should also initialize _cond", "author": "havardpe", "createdAt": "2020-10-15T10:45:12Z", "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -138,7 +138,7 @@ ThreadStackExecutorBase::ThreadStackExecutorBase(uint32_t stackSize,\n     : SyncableThreadExecutor(),\n       Runnable(),\n       _pool(std::make_unique<FastOS_ThreadPool>(stackSize)),\n-      _monitor(),\n+      _lock(),", "originalCommit": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzU4OA==", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505453588", "bodyText": "#14896", "author": "baldersheim", "createdAt": "2020-10-15T11:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mzg0NA=="}], "type": "inlineReview"}]}