{"pr_number": 14165, "pr_title": "Deploy to Vespa Cloud from python, talk to endpoints with mTLS", "pr_createdAt": "2020-08-26T11:14:34Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14165", "timeline": [{"oid": "446fb49b86cba755eb072546d477cdf5d26a6746", "url": "https://github.com/vespa-engine/vespa/commit/446fb49b86cba755eb072546d477cdf5d26a6746", "message": "Stash-commit -- will overwrite later", "committedDate": "2020-08-27T07:36:17Z", "type": "forcePushed"}, {"oid": "fdec75f5e841b06015ebb1801b7f73ee87caa934", "url": "https://github.com/vespa-engine/vespa/commit/fdec75f5e841b06015ebb1801b7f73ee87caa934", "message": "Set certificate/key parameter for HTTP requests in class Vespa", "committedDate": "2020-08-27T11:36:40Z", "type": "commit"}, {"oid": "657ccdfad595192340758093a1eef0aab4c12310", "url": "https://github.com/vespa-engine/vespa/commit/657ccdfad595192340758093a1eef0aab4c12310", "message": "Talk to Vespa Cloud with API key, deploy package with mTLS, etc.", "committedDate": "2020-08-27T12:05:06Z", "type": "commit"}, {"oid": "657ccdfad595192340758093a1eef0aab4c12310", "url": "https://github.com/vespa-engine/vespa/commit/657ccdfad595192340758093a1eef0aab4c12310", "message": "Talk to Vespa Cloud with API key, deploy package with mTLS, etc.", "committedDate": "2020-08-27T12:05:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2ODk2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478368967", "bodyText": "Not sure if this works against the local docker instance.", "author": "jonmv", "createdAt": "2020-08-27T12:09:24Z", "path": "python/vespa/vespa/application.py", "diffHunk": "@@ -87,7 +90,7 @@ def query(\n         if debug_request:\n             return VespaResult(vespa_result={}, request_body=body)\n         else:\n-            r = post(self.search_end_point, json=body)\n+            r = post(self.search_end_point, json=body, cert=self.cert)", "originalCommit": "657ccdfad595192340758093a1eef0aab4c12310", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NTQwMw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480365403", "bodyText": "Yes, it works.", "author": "thigm85", "createdAt": "2020-08-31T19:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2ODk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2OTAwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478369005", "bodyText": "Same here.", "author": "jonmv", "createdAt": "2020-08-27T12:09:29Z", "path": "python/vespa/vespa/application.py", "diffHunk": "@@ -103,7 +106,7 @@ def feed_data_point(self, schema: str, data_id: str, fields: Dict) -> Response:\n             self.end_point, schema, schema, str(data_id)\n         )\n         vespa_format = {\"fields\": fields}\n-        response = post(end_point, json=vespa_format)\n+        response = post(end_point, json=vespa_format, cert=self.cert)", "originalCommit": "657ccdfad595192340758093a1eef0aab4c12310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478370131", "bodyText": "This file can only be read by the user writing it, and is deleted immediately when closed. The VespaCloud closes this file on its close, and is meant to be used like\nwith VespaCloud('tenant', 'application', '/path/to/api_key') as cloud:\n    ...", "author": "jonmv", "createdAt": "2020-08-27T12:11:23Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,160 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(self, tenant: str, application: str, key_location: str) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(self.api_key.public_key().public_bytes(serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo))\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.data_cert_file = self.write_private_key_and_cert(self.data_key, self.data_certificate)\n+        self.connection = http.client.HTTPSConnection('api.vespa-external.aws.oath.cloud', 4443)\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, 'rb') as key_data:\n+            key = serialization.load_pem_private_key(key_data.read(), None, default_backend())\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\"Key at \" + key_location + \" must be an elliptic curve private key\")\n+            return key\n+\n+    @staticmethod\n+    def write_private_key_and_cert(key: ec.EllipticCurvePrivateKey, cert: x509.Certificate) -> (str, str):\n+        cert_file = tempfile.NamedTemporaryFile('wt')", "originalCommit": "657ccdfad595192340758093a1eef0aab4c12310", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NTY1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478875656", "bodyText": "Is there a way to use an in-memory file object instead of a temporary on-disk file?", "author": "oyving", "createdAt": "2020-08-28T07:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg4NTI1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478885251", "bodyText": "Absolutely not, unfortunately. It's been filed as a \"bug\" for 8 years, but nothing has happened.", "author": "jonmv", "createdAt": "2020-08-28T07:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg4NjA2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478886067", "bodyText": "There were even made PRs to address the issue, but the maintainers rejected them because they wanted a \"perfect\" solution, but this solution has, of course, not arrived, nor does it seem like it will.", "author": "jonmv", "createdAt": "2020-08-28T07:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg4OTc5MA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478889790", "bodyText": "How pythonic", "author": "oyving", "createdAt": "2020-08-28T07:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE5ODY0Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479198647", "bodyText": "Another option is to use\nvespa_cloud = VespaCloud(\"vespa-team\", \"ms-marco\", \"/Users/tmartins/sample_application/tmartins.vespa-team.pem\")\napp = vespa_cloud.deploy('from-notebook', app_package)\n\nThen continue  doing all the operation like app.feed_data_point(...) and then use app.close() when you are done.\nDoes that makes sense @jonmv?", "author": "thigm85", "createdAt": "2020-08-28T11:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNTUzMw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479205533", "bodyText": "Do you mean if it makes sense to move generation of data place key/cert to when you deploy, so it lives only while  a particular deployment (Vespa object) is in scope? I think that makes sense, but there's not much practical difference. You can avoid keeping the VespaCloud object in scope, but that's it.\nAnd for the certificates, it's possible to just never .close() the object, of course. But you'd have a hard time finding the certificate file without printing its name somewhere ... :)", "author": "jonmv", "createdAt": "2020-08-28T12:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzg5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479207897", "bodyText": "with VespaCloud(...) as cloud:\n    with cloud.deploy(...) as app:\n        # both variables are in scope now, as you can't have the Vespa in scope without the VespaCloud anyway\n        # and the VespaCloud is intended to be closed regardless of where the certs are, due to its HTTPConnection", "author": "jonmv", "createdAt": "2020-08-28T12:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwOTMwMA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479209300", "bodyText": "\u00a0I guess you could perhaps do\nwith VespaCloud(...) as cloud:\n    app = cloud.deploy(...)\n\nwith app:\n    # do stuff", "author": "jonmv", "createdAt": "2020-08-28T12:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxMjExMw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479212113", "bodyText": "Anyway, these are all details. Do whatever you think is better :)", "author": "jonmv", "createdAt": "2020-08-28T12:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDgwMA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478370800", "bodyText": "Hard-coded container name here. Remember this is the container name changes (in services.xml).", "author": "jonmv", "createdAt": "2020-08-27T12:12:28Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,160 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(self, tenant: str, application: str, key_location: str) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(self.api_key.public_key().public_bytes(serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo))\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.data_cert_file = self.write_private_key_and_cert(self.data_key, self.data_certificate)\n+        self.connection = http.client.HTTPSConnection('api.vespa-external.aws.oath.cloud', 4443)\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, 'rb') as key_data:\n+            key = serialization.load_pem_private_key(key_data.read(), None, default_backend())\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\"Key at \" + key_location + \" must be an elliptic curve private key\")\n+            return key\n+\n+    @staticmethod\n+    def write_private_key_and_cert(key: ec.EllipticCurvePrivateKey, cert: x509.Certificate) -> (str, str):\n+        cert_file = tempfile.NamedTemporaryFile('wt')\n+        cert_file.write(key.private_bytes(serialization.Encoding.PEM, serialization.PrivateFormat.TraditionalOpenSSL, serialization.NoEncryption()).decode('UTF-8'))\n+        cert_file.write(cert.public_bytes(serialization.Encoding.PEM).decode('UTF-8'))\n+        cert_file.flush()\n+        return cert_file\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP521R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u'localhost')])\n+        certificate = x509.CertificateBuilder() \\\n+            .subject_name(name) \\\n+            .issuer_name(name) \\\n+            .serial_number(x509.random_serial_number()) \\\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes = 1)) \\\n+            .not_valid_after(datetime.utcnow() + timedelta(days = 7)) \\\n+            .public_key(key.public_key()) \\\n+            .sign(key, hashes.SHA256(), default_backend())\n+        return (key, certificate)\n+\n+    def request(self, method: str, path: str, body: BytesIO = BytesIO(), headers = {}) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode('UTF-8')\n+        timestamp = datetime.utcnow().isoformat() + 'Z' # Java's Instant.parse requires the neutral time zone appended\n+        url = 'https://' + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + '\\n' + url + '\\n' + timestamp + '\\n' + content_hash\n+        signature = self.api_key.sign(canonical_message.encode('UTF-8'), ec.ECDSA(hashes.SHA256()))\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + ':' + self.application + ':' + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\"Status code \" + str(response.status) + \" doing \" + method + \" at \" + url + \":\\n\" + parsed['message'])\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request('GET', '/zone/v1/environment/dev/default')['name']\n+\n+    def get_endpoint(self, instance: str, region: str) -> str:\n+        endpoints = self.request('GET',\n+                                 '/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}' \\\n+                                 .format(self.tenant, self.application, instance, region))['endpoints']\n+        container_url = [endpoint['url'] for endpoint in endpoints if endpoint['cluster'] == 'test_app_container']", "originalCommit": "657ccdfad595192340758093a1eef0aab4c12310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478372627", "bodyText": "This deletes the data key/cert forever. Consider allowing the user to specify the certificate file, for persistent storage, if it's meaningful to allow the user to keep talking to its endpoint outside of the python code, or if the VespaCloud variable can't be kept in scope.", "author": "jonmv", "createdAt": "2020-08-27T12:15:08Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,160 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(self, tenant: str, application: str, key_location: str) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(self.api_key.public_key().public_bytes(serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo))\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.data_cert_file = self.write_private_key_and_cert(self.data_key, self.data_certificate)\n+        self.connection = http.client.HTTPSConnection('api.vespa-external.aws.oath.cloud', 4443)\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, 'rb') as key_data:\n+            key = serialization.load_pem_private_key(key_data.read(), None, default_backend())\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\"Key at \" + key_location + \" must be an elliptic curve private key\")\n+            return key\n+\n+    @staticmethod\n+    def write_private_key_and_cert(key: ec.EllipticCurvePrivateKey, cert: x509.Certificate) -> (str, str):\n+        cert_file = tempfile.NamedTemporaryFile('wt')\n+        cert_file.write(key.private_bytes(serialization.Encoding.PEM, serialization.PrivateFormat.TraditionalOpenSSL, serialization.NoEncryption()).decode('UTF-8'))\n+        cert_file.write(cert.public_bytes(serialization.Encoding.PEM).decode('UTF-8'))\n+        cert_file.flush()\n+        return cert_file\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP521R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u'localhost')])\n+        certificate = x509.CertificateBuilder() \\\n+            .subject_name(name) \\\n+            .issuer_name(name) \\\n+            .serial_number(x509.random_serial_number()) \\\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes = 1)) \\\n+            .not_valid_after(datetime.utcnow() + timedelta(days = 7)) \\\n+            .public_key(key.public_key()) \\\n+            .sign(key, hashes.SHA256(), default_backend())\n+        return (key, certificate)\n+\n+    def request(self, method: str, path: str, body: BytesIO = BytesIO(), headers = {}) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode('UTF-8')\n+        timestamp = datetime.utcnow().isoformat() + 'Z' # Java's Instant.parse requires the neutral time zone appended\n+        url = 'https://' + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + '\\n' + url + '\\n' + timestamp + '\\n' + content_hash\n+        signature = self.api_key.sign(canonical_message.encode('UTF-8'), ec.ECDSA(hashes.SHA256()))\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + ':' + self.application + ':' + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\"Status code \" + str(response.status) + \" doing \" + method + \" at \" + url + \":\\n\" + parsed['message'])\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request('GET', '/zone/v1/environment/dev/default')['name']\n+\n+    def get_endpoint(self, instance: str, region: str) -> str:\n+        endpoints = self.request('GET',\n+                                 '/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}' \\\n+                                 .format(self.tenant, self.application, instance, region))['endpoints']\n+        container_url = [endpoint['url'] for endpoint in endpoints if endpoint['cluster'] == 'test_app_container']\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def start_deployment(self, instance: str, job: str, application_package: ApplicationPackage) -> int:\n+        deploy_path = '/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}' \\\n+            .format(self.tenant, self.application, instance, job)\n+        application_zip_bytes = application_package.to_application_zip({ 'application/security/clients.pem': self.data_certificate.public_bytes(serialization.Encoding.PEM) })\n+        response = self.request('POST', deploy_path, application_zip_bytes, { 'Content-Type': 'application/zip' })\n+        print(response['message'])\n+        return response['run']\n+\n+    def follow_deployment(self, instance: str, job: str, run: int):\n+        last = -1\n+        while True:\n+            update = self.request('GET',\n+                                  '/application/v4/tenant/{}/application/{}/instance/{}/job/{}/run/{}?after={}' \\\n+                                  .format(self.tenant, self.application, instance, job, run, last))\n+\n+            for step, entries in update['log'].items():\n+                for entry in entries:\n+                    self.print_log_entry(step, entry)\n+            last = update.get('lastId', last)\n+\n+            if update['active']:\n+                sleep(1)\n+            else:\n+                status = update['status']\n+                if   status == 'success':                    return\n+                elif status == 'error':                      raise RuntimeError(\"Unexpected error during deployment; see log for details\")\n+                elif status == 'aborted':                    raise RuntimeError(\"Deployment was aborted, probably by a newer deployment\")\n+                elif status == 'outOfCapacity':              raise RuntimeError(\"No capacity left in zone; please contact the Vespa team\")\n+                elif status == 'deploymentFailed':           raise RuntimeError(\"Deployment failed; see log for details\")\n+                elif status == 'installationFailed':         raise RuntimeError(\"Installation failed; see Vespa log for details\")\n+                elif status == 'running':                    raise RuntimeError(\"Deployment not completed\")\n+                elif status == 'endpointCertificateTimeout': raise RuntimeError(\"Endpoint certificate not ready in time; please contact Vespa team\")\n+                elif status == 'testFailure':                raise RuntimeError(\"Unexpected status; tests are not run for manual deployments\")\n+                else:                                        raise RuntimeError(\"Unexpected status '\" + status + \"'\")\n+\n+    @staticmethod\n+    def print_log_entry(step: str, entry: dict):\n+        timestamp = strftime('%H:%M:%S', gmtime(entry['at'] / 1e3))\n+        message = entry['message'].replace('\\n', '\\n' + ' '*23)\n+        if step != 'copyVespaLogs' or entry['type'] == 'error':\n+            print('{:<7} [{}]  {}'.format(entry['type'].upper(), timestamp, message))\n+\n+    def deploy(self, instance: str, application_package: ApplicationPackage) -> Vespa:\n+        \"\"\"\n+        Deploy the given application package as the given instance in the Vespa Cloud dev environment.\n+\n+        :param instance: Name of this instance of the application, in the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+\n+        :return: a Vespa connection instance.\n+        \"\"\"\n+\n+        region = self.get_dev_region()\n+        job = 'dev-' + region\n+        run = self.start_deployment(instance, job, application_package)\n+        self.follow_deployment(instance, job, run)\n+        endpoint_url = self.get_endpoint(instance, region)\n+        return Vespa(url = endpoint_url, cert = self.data_cert_file.name)\n+\n+    def close(self):\n+        self.connection.close()\n+        self.data_cert_file.close()", "originalCommit": "657ccdfad595192340758093a1eef0aab4c12310", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMDc1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479200751", "bodyText": "I believe that using\nvespa_cloud = VespaCloud(\"vespa-team\", \"ms-marco\", \"/Users/tmartins/sample_application/tmartins.vespa-team.pem\")\napp = vespa_cloud.deploy('from-notebook', app_package)\n# run as many commands as one needs\napp.close()\n\nsolves the case where the VespaCloud variable can't be kept in scope.", "author": "thigm85", "createdAt": "2020-08-28T12:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjA4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479202083", "bodyText": "I think it is best to let them generate the certificate themselves if they want to talk to the end-point outside of the python code. As the intent of this library is to make experiments from a python environment.", "author": "thigm85", "createdAt": "2020-08-28T12:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNDYzNw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479234637", "bodyText": "Yes, you'd need to move the key/cert stuff to the deploy(...) call, but that's possible.", "author": "jonmv", "createdAt": "2020-08-28T12:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNTY4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479235685", "bodyText": "You should prefer with ...:, though, to ensure resources are closed when exceptions are thrown.", "author": "jonmv", "createdAt": "2020-08-28T12:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0OTMyMg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479249322", "bodyText": "No, I don't need to change anything. My code above is wrong and I meant vespa_cloud.close() instead of app.close()\nI don't need to move anything to .deploy() as the Vespa instance knows the location of the cert.", "author": "thigm85", "createdAt": "2020-08-28T12:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MjYyNw=="}], "type": "inlineReview"}, {"oid": "4615ca63b9b5bb08e11b50cb07d57b5610e9aaf9", "url": "https://github.com/vespa-engine/vespa/commit/4615ca63b9b5bb08e11b50cb07d57b5610e9aaf9", "message": "Add method to delete a deployment", "committedDate": "2020-08-27T12:19:39Z", "type": "commit"}, {"oid": "325ecffb37c24ca9538d105b830aaf1e5991c716", "url": "https://github.com/vespa-engine/vespa/commit/325ecffb37c24ca9538d105b830aaf1e5991c716", "message": "Use a cheaper elliptic curve", "committedDate": "2020-08-27T15:31:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MDUxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478870519", "bodyText": "Please indicate the type of the string. Is it a filename, two PEM encoded objects, etc.", "author": "oyving", "createdAt": "2020-08-28T07:02:22Z", "path": "python/vespa/vespa/application.py", "diffHunk": "@@ -15,13 +15,15 @@ def __init__(\n         url: str,\n         port: Optional[int] = None,\n         deployment_message: Optional[List[str]] = None,\n+        cert: Optional[str] = None,\n     ) -> None:\n         \"\"\"\n         Establish a connection with a Vespa application.\n \n         :param url: URL\n         :param port: Port\n         :param deployment_message: Message returned by Vespa engine after deployment.\n+        :param cert: Certificate and key pair used for mTLS.", "originalCommit": "325ecffb37c24ca9538d105b830aaf1e5991c716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg4NjI3MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478886271", "bodyText": "Fixed.", "author": "jonmv", "createdAt": "2020-08-28T07:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxODQzNA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479218434", "bodyText": "I initially believed it would be possible to send the actual cert and key, of course ... >_<", "author": "jonmv", "createdAt": "2020-08-28T12:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MDUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NTkzNA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478875934", "bodyText": "This should indicate the type in the cert. Is it a file name or the object itself?", "author": "oyving", "createdAt": "2020-08-28T07:14:32Z", "path": "python/vespa/vespa/application.py", "diffHunk": "@@ -15,13 +15,15 @@ def __init__(\n         url: str,\n         port: Optional[int] = None,\n         deployment_message: Optional[List[str]] = None,\n+        cert: Optional[str] = None,\n     ) -> None:\n         \"\"\"\n         Establish a connection with a Vespa application.\n \n         :param url: URL\n         :param port: Port\n         :param deployment_message: Message returned by Vespa engine after deployment.\n+        :param cert: Certificate and key pair used for mTLS.", "originalCommit": "325ecffb37c24ca9538d105b830aaf1e5991c716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NjYxOA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478876618", "bodyText": "This is a duplicate of the comment above \ud83e\udd37", "author": "oyving", "createdAt": "2020-08-28T07:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg4NjU1OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r478886559", "bodyText": "Yeah \ud83e\udd37\u200d\u2642\ufe0f", "author": "jonmv", "createdAt": "2020-08-28T07:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NTkzNA=="}], "type": "inlineReview"}, {"oid": "5404109687aaf9f4b2374a61c44a6a53cd3b965e", "url": "https://github.com/vespa-engine/vespa/commit/5404109687aaf9f4b2374a61c44a6a53cd3b965e", "message": "Fix doc", "committedDate": "2020-08-28T07:32:40Z", "type": "commit"}, {"oid": "3b552acd4e5e99a5d57aabc821dd3c77e9e5a389", "url": "https://github.com/vespa-engine/vespa/commit/3b552acd4e5e99a5d57aabc821dd3c77e9e5a389", "message": "Merge branch 'master' into jonmv/deploy-from-python", "committedDate": "2020-08-28T08:29:36Z", "type": "commit"}, {"oid": "8fe56225c30428ba4756116e2b1934ec99b0132a", "url": "https://github.com/vespa-engine/vespa/commit/8fe56225c30428ba4756116e2b1934ec99b0132a", "message": "include the cryptography library as a depedency", "committedDate": "2020-08-28T12:04:15Z", "type": "commit"}, {"oid": "8ea44156c1b3468ef175a094c8d81478f7c0009b", "url": "https://github.com/vespa-engine/vespa/commit/8ea44156c1b3468ef175a094c8d81478f7c0009b", "message": "remove hard-coded cluster name", "committedDate": "2020-08-28T12:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDA2MA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479214060", "bodyText": "Hehe, this is why I hate autoformatters :)", "author": "jonmv", "createdAt": "2020-08-28T12:13:19Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -504,122 +513,208 @@ def __init__(self, tenant: str, application: str, key_location: str) -> None:\n         self.tenant = tenant\n         self.application = application\n         self.api_key = self.read_private_key(key_location)\n-        self.api_public_key_bytes = standard_b64encode(self.api_key.public_key().public_bytes(serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo))\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n         self.data_key, self.data_certificate = self.create_certificate_pair()\n-        self.data_cert_file = self.write_private_key_and_cert(self.data_key, self.data_certificate)\n-        self.connection = http.client.HTTPSConnection('api.vespa-external.aws.oath.cloud', 4443)\n+        self.data_cert_file = self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate\n+        )\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n \n     @staticmethod\n     def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n-        with open(key_location, 'rb') as key_data:\n-            key = serialization.load_pem_private_key(key_data.read(), None, default_backend())\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n             if not isinstance(key, ec.EllipticCurvePrivateKey):\n-                raise TypeError(\"Key at \" + key_location + \" must be an elliptic curve private key\")\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n             return key\n \n     @staticmethod\n-    def write_private_key_and_cert(key: ec.EllipticCurvePrivateKey, cert: x509.Certificate) -> (str, str):\n-        cert_file = tempfile.NamedTemporaryFile('wt')\n-        cert_file.write(key.private_bytes(serialization.Encoding.PEM, serialization.PrivateFormat.TraditionalOpenSSL, serialization.NoEncryption()).decode('UTF-8'))\n-        cert_file.write(cert.public_bytes(serialization.Encoding.PEM).decode('UTF-8'))\n+    def write_private_key_and_cert(\n+        key: ec.EllipticCurvePrivateKey, cert: x509.Certificate\n+    ) -> (str, str):\n+        cert_file = tempfile.NamedTemporaryFile(\"wt\")\n+        cert_file.write(\n+            key.private_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PrivateFormat.TraditionalOpenSSL,\n+                serialization.NoEncryption(),\n+            ).decode(\"UTF-8\")\n+        )\n+        cert_file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n         cert_file.flush()\n         return cert_file\n \n     @staticmethod\n     def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n         key = ec.generate_private_key(ec.SECP384R1, default_backend())\n-        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u'localhost')])\n-        certificate = x509.CertificateBuilder() \\\n-            .subject_name(name) \\\n-            .issuer_name(name) \\\n-            .serial_number(x509.random_serial_number()) \\\n-            .not_valid_before(datetime.utcnow() - timedelta(minutes = 1)) \\\n-            .not_valid_after(datetime.utcnow() + timedelta(days = 7)) \\\n-            .public_key(key.public_key()) \\\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n             .sign(key, hashes.SHA256(), default_backend())\n+        )\n         return (key, certificate)\n \n-    def request(self, method: str, path: str, body: BytesIO = BytesIO(), headers = {}) -> dict:\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n         digest = hashes.Hash(hashes.SHA256(), default_backend())\n         body.seek(0)\n         digest.update(body.read())\n-        content_hash = standard_b64encode(digest.finalize()).decode('UTF-8')\n-        timestamp = datetime.utcnow().isoformat() + 'Z' # Java's Instant.parse requires the neutral time zone appended\n-        url = 'https://' + self.connection.host + \":\" + str(self.connection.port) + path\n-\n-        canonical_message = method + '\\n' + url + '\\n' + timestamp + '\\n' + content_hash\n-        signature = self.api_key.sign(canonical_message.encode('UTF-8'), ec.ECDSA(hashes.SHA256()))\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n \n         headers = {\n             \"X-Timestamp\": timestamp,\n             \"X-Content-Hash\": content_hash,\n-            \"X-Key-Id\": self.tenant + ':' + self.application + ':' + \"default\",\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n             \"X-Key\": self.api_public_key_bytes,\n             \"X-Authorization\": standard_b64encode(signature),\n-            **headers\n+            **headers,\n         }\n \n         body.seek(0)\n         self.connection.request(method, path, body, headers)\n         with self.connection.getresponse() as response:\n             parsed = json.load(response)\n             if response.status != 200:\n-                raise RuntimeError(\"Status code \" + str(response.status) + \" doing \" + method + \" at \" + url + \":\\n\" + parsed['message'])\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n             return parsed\n \n     def get_dev_region(self) -> str:\n-        return self.request('GET', '/zone/v1/environment/dev/default')['name']\n-\n-    def get_endpoint(self, instance: str, region: str) -> str:\n-        endpoints = self.request('GET',\n-                                 '/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}' \\\n-                                 .format(self.tenant, self.application, instance, region))['endpoints']\n-        container_url = [endpoint['url'] for endpoint in endpoints if endpoint['cluster'] == 'test_app_container']\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n         if not container_url:\n             raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n         return container_url[0]\n \n-    def start_deployment(self, instance: str, job: str, application_package: ApplicationPackage) -> int:\n-        deploy_path = '/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}' \\\n-            .format(self.tenant, self.application, instance, job)\n-        application_zip_bytes = application_package.to_application_zip({ 'application/security/clients.pem': self.data_certificate.public_bytes(serialization.Encoding.PEM) })\n-        response = self.request('POST', deploy_path, application_zip_bytes, { 'Content-Type': 'application/zip' })\n-        print(response['message'])\n-        return response['run']\n+    def start_deployment(\n+        self, instance: str, job: str, application_package: ApplicationPackage\n+    ) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+        application_zip_bytes = application_package.to_application_zip(\n+            {\n+                \"application/security/clients.pem\": self.data_certificate.public_bytes(\n+                    serialization.Encoding.PEM\n+                )\n+            }\n+        )\n+        response = self.request(\n+            \"POST\",\n+            deploy_path,\n+            application_zip_bytes,\n+            {\"Content-Type\": \"application/zip\"},\n+        )\n+        print(response[\"message\"])\n+        return response[\"run\"]\n \n     def follow_deployment(self, instance: str, job: str, run: int):\n         last = -1\n         while True:\n-            update = self.request('GET',\n-                                  '/application/v4/tenant/{}/application/{}/instance/{}/job/{}/run/{}?after={}' \\\n-                                  .format(self.tenant, self.application, instance, job, run, last))\n+            update = self.request(\n+                \"GET\",\n+                \"/application/v4/tenant/{}/application/{}/instance/{}/job/{}/run/{}?after={}\".format(\n+                    self.tenant, self.application, instance, job, run, last\n+                ),\n+            )\n \n-            for step, entries in update['log'].items():\n+            for step, entries in update[\"log\"].items():\n                 for entry in entries:\n                     self.print_log_entry(step, entry)\n-            last = update.get('lastId', last)\n+            last = update.get(\"lastId\", last)\n \n-            if update['active']:\n+            if update[\"active\"]:\n                 sleep(1)\n             else:\n-                status = update['status']\n-                if   status == 'success':                    return\n-                elif status == 'error':                      raise RuntimeError(\"Unexpected error during deployment; see log for details\")\n-                elif status == 'aborted':                    raise RuntimeError(\"Deployment was aborted, probably by a newer deployment\")\n-                elif status == 'outOfCapacity':              raise RuntimeError(\"No capacity left in zone; please contact the Vespa team\")\n-                elif status == 'deploymentFailed':           raise RuntimeError(\"Deployment failed; see log for details\")\n-                elif status == 'installationFailed':         raise RuntimeError(\"Installation failed; see Vespa log for details\")\n-                elif status == 'running':                    raise RuntimeError(\"Deployment not completed\")\n-                elif status == 'endpointCertificateTimeout': raise RuntimeError(\"Endpoint certificate not ready in time; please contact Vespa team\")\n-                elif status == 'testFailure':                raise RuntimeError(\"Unexpected status; tests are not run for manual deployments\")\n-                else:                                        raise RuntimeError(\"Unexpected status '\" + status + \"'\")\n+                status = update[\"status\"]\n+                if status == \"success\":\n+                    return\n+                elif status == \"error\":\n+                    raise RuntimeError(\n+                        \"Unexpected error during deployment; see log for details\"\n+                    )\n+                elif status == \"aborted\":\n+                    raise RuntimeError(\n+                        \"Deployment was aborted, probably by a newer deployment\"\n+                    )\n+                elif status == \"outOfCapacity\":\n+                    raise RuntimeError(\n+                        \"No capacity left in zone; please contact the Vespa team\"\n+                    )\n+                elif status == \"deploymentFailed\":\n+                    raise RuntimeError(\"Deployment failed; see log for details\")\n+                elif status == \"installationFailed\":\n+                    raise RuntimeError(\"Installation failed; see Vespa log for details\")\n+                elif status == \"running\":\n+                    raise RuntimeError(\"Deployment not completed\")\n+                elif status == \"endpointCertificateTimeout\":\n+                    raise RuntimeError(\n+                        \"Endpoint certificate not ready in time; please contact Vespa team\"\n+                    )\n+                elif status == \"testFailure\":\n+                    raise RuntimeError(\n+                        \"Unexpected status; tests are not run for manual deployments\"\n+                    )\n+                else:\n+                    raise RuntimeError(\"Unexpected status '\" + status + \"'\")", "originalCommit": "8ea44156c1b3468ef175a094c8d81478f7c0009b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2NTQ4Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479265482", "bodyText": "@oyving sold me on black a while ago, now it is hard to live without it.", "author": "thigm85", "createdAt": "2020-08-28T13:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxOTE4MA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479919180", "bodyText": "Yeah, pros and cons :)", "author": "jonmv", "createdAt": "2020-08-31T06:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDM0NA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479214344", "bodyText": "@jonmv It would be nice to include the deployment_message argument when creating the Vespa instance. What would best represent the deployment message in the Vespa Cloud case?", "author": "thigm85", "createdAt": "2020-08-28T12:13:34Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +499,264 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(self, tenant: str, application: str, key_location: str) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.data_cert_file = self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate\n+        )\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    @staticmethod\n+    def write_private_key_and_cert(\n+        key: ec.EllipticCurvePrivateKey, cert: x509.Certificate\n+    ) -> (str, str):\n+        cert_file = tempfile.NamedTemporaryFile(\"wt\")\n+        cert_file.write(\n+            key.private_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PrivateFormat.TraditionalOpenSSL,\n+                serialization.NoEncryption(),\n+            ).decode(\"UTF-8\")\n+        )\n+        cert_file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+        cert_file.flush()\n+        return cert_file\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def start_deployment(\n+        self, instance: str, job: str, application_package: ApplicationPackage\n+    ) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+        application_zip_bytes = application_package.to_application_zip(\n+            {\n+                \"application/security/clients.pem\": self.data_certificate.public_bytes(\n+                    serialization.Encoding.PEM\n+                )\n+            }\n+        )\n+        response = self.request(\n+            \"POST\",\n+            deploy_path,\n+            application_zip_bytes,\n+            {\"Content-Type\": \"application/zip\"},\n+        )\n+        print(response[\"message\"])\n+        return response[\"run\"]\n+\n+    def follow_deployment(self, instance: str, job: str, run: int):\n+        last = -1\n+        while True:\n+            update = self.request(\n+                \"GET\",\n+                \"/application/v4/tenant/{}/application/{}/instance/{}/job/{}/run/{}?after={}\".format(\n+                    self.tenant, self.application, instance, job, run, last\n+                ),\n+            )\n+\n+            for step, entries in update[\"log\"].items():\n+                for entry in entries:\n+                    self.print_log_entry(step, entry)\n+            last = update.get(\"lastId\", last)\n+\n+            if update[\"active\"]:\n+                sleep(1)\n+            else:\n+                status = update[\"status\"]\n+                if status == \"success\":\n+                    return\n+                elif status == \"error\":\n+                    raise RuntimeError(\n+                        \"Unexpected error during deployment; see log for details\"\n+                    )\n+                elif status == \"aborted\":\n+                    raise RuntimeError(\n+                        \"Deployment was aborted, probably by a newer deployment\"\n+                    )\n+                elif status == \"outOfCapacity\":\n+                    raise RuntimeError(\n+                        \"No capacity left in zone; please contact the Vespa team\"\n+                    )\n+                elif status == \"deploymentFailed\":\n+                    raise RuntimeError(\"Deployment failed; see log for details\")\n+                elif status == \"installationFailed\":\n+                    raise RuntimeError(\"Installation failed; see Vespa log for details\")\n+                elif status == \"running\":\n+                    raise RuntimeError(\"Deployment not completed\")\n+                elif status == \"endpointCertificateTimeout\":\n+                    raise RuntimeError(\n+                        \"Endpoint certificate not ready in time; please contact Vespa team\"\n+                    )\n+                elif status == \"testFailure\":\n+                    raise RuntimeError(\n+                        \"Unexpected status; tests are not run for manual deployments\"\n+                    )\n+                else:\n+                    raise RuntimeError(\"Unexpected status '\" + status + \"'\")\n+\n+    @staticmethod\n+    def print_log_entry(step: str, entry: dict):\n+        timestamp = strftime(\"%H:%M:%S\", gmtime(entry[\"at\"] / 1e3))\n+        message = entry[\"message\"].replace(\"\\n\", \"\\n\" + \" \" * 23)\n+        if step != \"copyVespaLogs\" or entry[\"type\"] == \"error\":\n+            print(\"{:<7} [{}]  {}\".format(entry[\"type\"].upper(), timestamp, message))\n+\n+    def deploy(self, instance: str, application_package: ApplicationPackage) -> Vespa:\n+        \"\"\"\n+        Deploy the given application package as the given instance in the Vespa Cloud dev environment.\n+\n+        :param instance: Name of this instance of the application, in the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+\n+        :return: a Vespa connection instance.\n+        \"\"\"\n+        region = self.get_dev_region()\n+        job = \"dev-\" + region\n+        run = self.start_deployment(instance, job, application_package)\n+        self.follow_deployment(instance, job, run)\n+        endpoint_url = self.get_endpoint(\n+            instance=instance,\n+            region=region,\n+            application_package_name=application_package.name,\n+        )\n+        return Vespa(url=endpoint_url, cert=self.data_cert_file.name)", "originalCommit": "8ea44156c1b3468ef175a094c8d81478f7c0009b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNzc4MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479217781", "bodyText": "I guess that depends. What is it used for? The whole log could be it. It's usually not that long for dev deployments. So, everything that's printed in follow_deployment.", "author": "jonmv", "createdAt": "2020-08-28T12:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MzM5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479243392", "bodyText": "Ok, for now it is just for informational purposes.", "author": "thigm85", "createdAt": "2020-08-28T12:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NjQ0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r479246449", "bodyText": "The deployment message from the config server is in there, if you do substring search, etc..", "author": "jonmv", "createdAt": "2020-08-28T12:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIxNDM0NA=="}], "type": "inlineReview"}, {"oid": "6a5bde7032c6641426725b65b934e99fb2410e68", "url": "https://github.com/vespa-engine/vespa/commit/6a5bde7032c6641426725b65b934e99fb2410e68", "message": "refactor VespaCloud code", "committedDate": "2020-08-31T08:30:02Z", "type": "commit"}, {"oid": "b95ad7d58de6aa1149fb921cc6464d8309420828", "url": "https://github.com/vespa-engine/vespa/commit/b95ad7d58de6aa1149fb921cc6464d8309420828", "message": "Merge pull request #14205 from vespa-engine/tgm/reestructure-python-deploy\n\nrefactor VespaCloud code", "committedDate": "2020-08-31T19:53:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4Mjg2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480882865", "bodyText": "What is the difference between application_package_name and self.application?", "author": "oyving", "createdAt": "2020-09-01T06:43:54Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,289 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(\n+        self,\n+        tenant: str,\n+        application: str,\n+        key_location: str,\n+        application_package: ApplicationPackage,\n+    ) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.application_package = application_package\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.private_cert_file_name = \"private_cert.txt\"\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    def write_private_key_and_cert(\n+        self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate, disk_folder: str\n+    ) -> None:\n+        cert_file = os.path.join(disk_folder, self.private_cert_file_name)\n+        with open(cert_file, \"w+\") as file:\n+            file.write(\n+                key.private_bytes(\n+                    serialization.Encoding.PEM,\n+                    serialization.PrivateFormat.TraditionalOpenSSL,\n+                    serialization.NoEncryption(),\n+                ).decode(\"UTF-8\")\n+            )\n+            file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str", "originalCommit": "b95ad7d58de6aa1149fb921cc6464d8309420828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1NDc3OA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480954778", "bodyText": "application_package_name is unnecessary here as the info is available through self.application_package.name. Made the changes.", "author": "thigm85", "createdAt": "2020-09-01T08:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4Mjg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480884177", "bodyText": "Debug print() leftover?", "author": "oyving", "createdAt": "2020-09-01T06:45:35Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,289 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(\n+        self,\n+        tenant: str,\n+        application: str,\n+        key_location: str,\n+        application_package: ApplicationPackage,\n+    ) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.application_package = application_package\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.private_cert_file_name = \"private_cert.txt\"\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    def write_private_key_and_cert(\n+        self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate, disk_folder: str\n+    ) -> None:\n+        cert_file = os.path.join(disk_folder, self.private_cert_file_name)\n+        with open(cert_file, \"w+\") as file:\n+            file.write(\n+                key.private_bytes(\n+                    serialization.Encoding.PEM,\n+                    serialization.PrivateFormat.TraditionalOpenSSL,\n+                    serialization.NoEncryption(),\n+                ).decode(\"UTF-8\")\n+            )\n+            file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def to_application_zip(self) -> BytesIO:\n+        buffer = BytesIO()\n+        with zipfile.ZipFile(buffer, \"a\") as zip_archive:\n+            zip_archive.writestr(\n+                \"application/schemas/{}.sd\".format(\n+                    self.application_package.schema.name\n+                ),\n+                self.application_package.schema_to_text,\n+            )\n+            zip_archive.writestr(\n+                \"application/services.xml\", self.application_package.services_to_text\n+            )\n+            zip_archive.writestr(\n+                \"application/security/clients.pem\",\n+                self.data_certificate.public_bytes(serialization.Encoding.PEM),\n+            )\n+\n+        return buffer\n+\n+    def start_deployment(self, instance: str, job: str, disk_folder: str) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+\n+        application_zip_bytes = self.to_application_zip()\n+\n+        self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate, disk_folder\n+        )\n+        with open(os.path.join(disk_folder, \"application.zip\"), \"wb\") as zipfile:\n+            zipfile.write(application_zip_bytes.getvalue())\n+\n+        response = self.request(\n+            \"POST\",\n+            deploy_path,\n+            application_zip_bytes,\n+            {\"Content-Type\": \"application/zip\"},\n+        )\n+        print(response[\"message\"])", "originalCommit": "b95ad7d58de6aa1149fb921cc6464d8309420828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0OTEwOA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480949108", "bodyText": "No, it contains a message intended for the user.", "author": "jonmv", "createdAt": "2020-09-01T08:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1MTQ1NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480951455", "bodyText": "Wouldn't it be better to return that value from the method instead? Library code printing stuff is a bit iffy. I know there's a contention here between regular library code and interactive notebooks, but it would be nice to see if there was a better way.", "author": "oyving", "createdAt": "2020-09-01T08:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1Mjc3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480952777", "bodyText": "Yes, moving it up one level is a good idea.", "author": "jonmv", "createdAt": "2020-09-01T08:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1ODY5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480958693", "bodyText": "I don't think this was a left over. The idea is to print the deployment messages so that the user knows which stage he is. This response[\"message\"] contains the following\nDeployment started in run 6 of dev-aws-us-east-1c for vespa-team.ms-marco.from-notebook. This may take about 15 minutes the first time.\n\nThe entire message including the updates looks something like:\nDeployment started in run 6 of dev-aws-us-east-1c for vespa-team.ms-marco.from-notebook. This may take about 15 minutes the first time.\nINFO    [08:08:03]  Deploying platform version 7.276.8 and application version unknown ...\nINFO    [08:08:04]  No services requiring restart.\nINFO    [08:08:04]  Deployment successful.\nINFO    [08:08:05]  Session 13618 for tenant 'vespa-team' prepared and activated.\nINFO    [08:08:05]  ######## Details for all nodes ########\nINFO    [08:08:05]  h711a.dev.aws-us-east-1c.vespa-external.aws.oath.cloud: expected to be UP\nINFO    [08:08:05]  --- platform docker.ouroath.com:4443/vespa/centos-tenant:7.276.8\nINFO    [08:08:05]  --- container on port 4080 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  h712a.dev.aws-us-east-1c.vespa-external.aws.oath.cloud: expected to be UP\nINFO    [08:08:05]  --- platform docker.ouroath.com:4443/vespa/centos-tenant:7.276.8\nINFO    [08:08:05]  --- logserver-container on port 4080 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  h713a.dev.aws-us-east-1c.vespa-external.aws.oath.cloud: expected to be UP\nINFO    [08:08:05]  --- platform docker.ouroath.com:4443/vespa/centos-tenant:7.276.8\nINFO    [08:08:05]  --- container-clustercontroller on port 19050 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  --- storagenode on port 19102 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  --- searchnode on port 19107 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  --- distributor on port 19111 has config generation 13618, wanted is 13618\nINFO    [08:08:05]  Found endpoints:\nINFO    [08:08:05]  - dev.aws-us-east-1c\nINFO    [08:08:05]   |-- https://msmarco-container.from-notebook.ms-marco.vespa-team.aws-us-east-1c.dev.public.vespa.oath.cloud/ (cluster 'msmarco_container')\nINFO    [08:08:06]  Installation succeeded!", "author": "thigm85", "createdAt": "2020-09-01T08:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTIwMg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480959202", "bodyText": "@oyving Would you change it?", "author": "thigm85", "createdAt": "2020-09-01T08:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2NDIzMg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480964232", "bodyText": "I think it should be changed, but it might be over-engineering it. It's your call. But as a minimum I would have a self.output file-handle that you write these messages to (that default to sys.stdout). That way the output can at least be controlled by the user if they wish.", "author": "oyving", "createdAt": "2020-09-01T08:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjY5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r481042692", "bodyText": "Done.", "author": "thigm85", "createdAt": "2020-09-01T10:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDkzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480884939", "bodyText": "Why write the zip file to disk when you just send the memory backed buffer to self.request()?", "author": "oyving", "createdAt": "2020-09-01T06:46:35Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,289 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(\n+        self,\n+        tenant: str,\n+        application: str,\n+        key_location: str,\n+        application_package: ApplicationPackage,\n+    ) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.application_package = application_package\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.private_cert_file_name = \"private_cert.txt\"\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    def write_private_key_and_cert(\n+        self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate, disk_folder: str\n+    ) -> None:\n+        cert_file = os.path.join(disk_folder, self.private_cert_file_name)\n+        with open(cert_file, \"w+\") as file:\n+            file.write(\n+                key.private_bytes(\n+                    serialization.Encoding.PEM,\n+                    serialization.PrivateFormat.TraditionalOpenSSL,\n+                    serialization.NoEncryption(),\n+                ).decode(\"UTF-8\")\n+            )\n+            file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def to_application_zip(self) -> BytesIO:\n+        buffer = BytesIO()\n+        with zipfile.ZipFile(buffer, \"a\") as zip_archive:\n+            zip_archive.writestr(\n+                \"application/schemas/{}.sd\".format(\n+                    self.application_package.schema.name\n+                ),\n+                self.application_package.schema_to_text,\n+            )\n+            zip_archive.writestr(\n+                \"application/services.xml\", self.application_package.services_to_text\n+            )\n+            zip_archive.writestr(\n+                \"application/security/clients.pem\",\n+                self.data_certificate.public_bytes(serialization.Encoding.PEM),\n+            )\n+\n+        return buffer\n+\n+    def start_deployment(self, instance: str, job: str, disk_folder: str) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+\n+        application_zip_bytes = self.to_application_zip()\n+\n+        self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate, disk_folder\n+        )\n+        with open(os.path.join(disk_folder, \"application.zip\"), \"wb\") as zipfile:\n+            zipfile.write(application_zip_bytes.getvalue())", "originalCommit": "b95ad7d58de6aa1149fb921cc6464d8309420828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2MzA3NA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480963074", "bodyText": "This is a good question. It is not necessary but I thought it would be nice to have a copy in case the user wants to check the config files that got deployed.\nA future change would include the option to deploy a user generated .zip file to Cloud from pyvespa, instead of building the .zip file from our limited application package API.\nThat way assuming there will always be a .zip file in the disk_folder would tie those two use cases together. But for now it is mostly for the user convenience of checking the config files.", "author": "thigm85", "createdAt": "2020-09-01T08:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk3MDY2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480970662", "bodyText": "I think that's a mixing of concerns. Also, wouldn't it be better for the user to just inspect the application package object and get the files printed to stdout?", "author": "oyving", "createdAt": "2020-09-01T08:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzOTA1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r481039056", "bodyText": "I removed the step that write zip file to disk. I can revisit that if needed.", "author": "thigm85", "createdAt": "2020-09-01T10:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NzExMQ==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480887111", "bodyText": "I would consider splitting this into two methods. One that does a single poll and status report, and one that blocks and continually polls until deployment is done.", "author": "oyving", "createdAt": "2020-09-01T06:49:13Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,289 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(\n+        self,\n+        tenant: str,\n+        application: str,\n+        key_location: str,\n+        application_package: ApplicationPackage,\n+    ) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.application_package = application_package\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.private_cert_file_name = \"private_cert.txt\"\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    def write_private_key_and_cert(\n+        self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate, disk_folder: str\n+    ) -> None:\n+        cert_file = os.path.join(disk_folder, self.private_cert_file_name)\n+        with open(cert_file, \"w+\") as file:\n+            file.write(\n+                key.private_bytes(\n+                    serialization.Encoding.PEM,\n+                    serialization.PrivateFormat.TraditionalOpenSSL,\n+                    serialization.NoEncryption(),\n+                ).decode(\"UTF-8\")\n+            )\n+            file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def to_application_zip(self) -> BytesIO:\n+        buffer = BytesIO()\n+        with zipfile.ZipFile(buffer, \"a\") as zip_archive:\n+            zip_archive.writestr(\n+                \"application/schemas/{}.sd\".format(\n+                    self.application_package.schema.name\n+                ),\n+                self.application_package.schema_to_text,\n+            )\n+            zip_archive.writestr(\n+                \"application/services.xml\", self.application_package.services_to_text\n+            )\n+            zip_archive.writestr(\n+                \"application/security/clients.pem\",\n+                self.data_certificate.public_bytes(serialization.Encoding.PEM),\n+            )\n+\n+        return buffer\n+\n+    def start_deployment(self, instance: str, job: str, disk_folder: str) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+\n+        application_zip_bytes = self.to_application_zip()\n+\n+        self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate, disk_folder\n+        )\n+        with open(os.path.join(disk_folder, \"application.zip\"), \"wb\") as zipfile:\n+            zipfile.write(application_zip_bytes.getvalue())\n+\n+        response = self.request(\n+            \"POST\",\n+            deploy_path,\n+            application_zip_bytes,\n+            {\"Content-Type\": \"application/zip\"},\n+        )\n+        print(response[\"message\"])\n+        return response[\"run\"]\n+\n+    def follow_deployment(self, instance: str, job: str, run: int):", "originalCommit": "b95ad7d58de6aa1149fb921cc6464d8309420828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MjA4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480982083", "bodyText": "Made the change. Check if it was that what you had in mind.", "author": "thigm85", "createdAt": "2020-09-01T08:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4NzExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4OTk4NA==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480889984", "bodyText": "Consider moving status code -> message into a separate map to make this if-elif-else block shorter.", "author": "oyving", "createdAt": "2020-09-01T06:52:56Z", "path": "python/vespa/vespa/package.py", "diffHunk": "@@ -468,3 +490,289 @@ def deploy(self, disk_folder: str, container_memory: str = \"4G\"):\n             port=self.local_port,\n             deployment_message=deployment_message,\n         )\n+\n+\n+class VespaCloud(object):\n+    def __init__(\n+        self,\n+        tenant: str,\n+        application: str,\n+        key_location: str,\n+        application_package: ApplicationPackage,\n+    ) -> None:\n+        \"\"\"\n+        Deploy application to the Vespa Cloud (cloud.vespa.ai)\n+\n+        :param tenant: Tenant name registered in the Vespa Cloud.\n+        :param application: Application name registered in the Vespa Cloud.\n+        :param key_location: Location of the private key used for signing HTTP requests to the Vespa Cloud.\n+        :param application_package: ApplicationPackage to be deployed.\n+        \"\"\"\n+        self.tenant = tenant\n+        self.application = application\n+        self.application_package = application_package\n+        self.api_key = self.read_private_key(key_location)\n+        self.api_public_key_bytes = standard_b64encode(\n+            self.api_key.public_key().public_bytes(\n+                serialization.Encoding.PEM,\n+                serialization.PublicFormat.SubjectPublicKeyInfo,\n+            )\n+        )\n+        self.data_key, self.data_certificate = self.create_certificate_pair()\n+        self.private_cert_file_name = \"private_cert.txt\"\n+        self.connection = http.client.HTTPSConnection(\n+            \"api.vespa-external.aws.oath.cloud\", 4443\n+        )\n+\n+    @staticmethod\n+    def read_private_key(key_location: str) -> ec.EllipticCurvePrivateKey:\n+        with open(key_location, \"rb\") as key_data:\n+            key = serialization.load_pem_private_key(\n+                key_data.read(), None, default_backend()\n+            )\n+            if not isinstance(key, ec.EllipticCurvePrivateKey):\n+                raise TypeError(\n+                    \"Key at \" + key_location + \" must be an elliptic curve private key\"\n+                )\n+            return key\n+\n+    def write_private_key_and_cert(\n+        self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate, disk_folder: str\n+    ) -> None:\n+        cert_file = os.path.join(disk_folder, self.private_cert_file_name)\n+        with open(cert_file, \"w+\") as file:\n+            file.write(\n+                key.private_bytes(\n+                    serialization.Encoding.PEM,\n+                    serialization.PrivateFormat.TraditionalOpenSSL,\n+                    serialization.NoEncryption(),\n+                ).decode(\"UTF-8\")\n+            )\n+            file.write(cert.public_bytes(serialization.Encoding.PEM).decode(\"UTF-8\"))\n+\n+    @staticmethod\n+    def create_certificate_pair() -> (ec.EllipticCurvePrivateKey, x509.Certificate):\n+        key = ec.generate_private_key(ec.SECP384R1, default_backend())\n+        name = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, u\"localhost\")])\n+        certificate = (\n+            x509.CertificateBuilder()\n+            .subject_name(name)\n+            .issuer_name(name)\n+            .serial_number(x509.random_serial_number())\n+            .not_valid_before(datetime.utcnow() - timedelta(minutes=1))\n+            .not_valid_after(datetime.utcnow() + timedelta(days=7))\n+            .public_key(key.public_key())\n+            .sign(key, hashes.SHA256(), default_backend())\n+        )\n+        return (key, certificate)\n+\n+    def request(\n+        self, method: str, path: str, body: BytesIO = BytesIO(), headers={}\n+    ) -> dict:\n+        digest = hashes.Hash(hashes.SHA256(), default_backend())\n+        body.seek(0)\n+        digest.update(body.read())\n+        content_hash = standard_b64encode(digest.finalize()).decode(\"UTF-8\")\n+        timestamp = (\n+            datetime.utcnow().isoformat() + \"Z\"\n+        )  # Java's Instant.parse requires the neutral time zone appended\n+        url = \"https://\" + self.connection.host + \":\" + str(self.connection.port) + path\n+\n+        canonical_message = method + \"\\n\" + url + \"\\n\" + timestamp + \"\\n\" + content_hash\n+        signature = self.api_key.sign(\n+            canonical_message.encode(\"UTF-8\"), ec.ECDSA(hashes.SHA256())\n+        )\n+\n+        headers = {\n+            \"X-Timestamp\": timestamp,\n+            \"X-Content-Hash\": content_hash,\n+            \"X-Key-Id\": self.tenant + \":\" + self.application + \":\" + \"default\",\n+            \"X-Key\": self.api_public_key_bytes,\n+            \"X-Authorization\": standard_b64encode(signature),\n+            **headers,\n+        }\n+\n+        body.seek(0)\n+        self.connection.request(method, path, body, headers)\n+        with self.connection.getresponse() as response:\n+            parsed = json.load(response)\n+            if response.status != 200:\n+                raise RuntimeError(\n+                    \"Status code \"\n+                    + str(response.status)\n+                    + \" doing \"\n+                    + method\n+                    + \" at \"\n+                    + url\n+                    + \":\\n\"\n+                    + parsed[\"message\"]\n+                )\n+            return parsed\n+\n+    def get_dev_region(self) -> str:\n+        return self.request(\"GET\", \"/zone/v1/environment/dev/default\")[\"name\"]\n+\n+    def get_endpoint(\n+        self, instance: str, region: str, application_package_name: str\n+    ) -> str:\n+        endpoints = self.request(\n+            \"GET\",\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/environment/dev/region/{}\".format(\n+                self.tenant, self.application, instance, region\n+            ),\n+        )[\"endpoints\"]\n+        container_url = [\n+            endpoint[\"url\"]\n+            for endpoint in endpoints\n+            if endpoint[\"cluster\"] == \"{}_container\".format(application_package_name)\n+        ]\n+        if not container_url:\n+            raise RuntimeError(\"No endpoints found for container 'test_app_container'\")\n+        return container_url[0]\n+\n+    def to_application_zip(self) -> BytesIO:\n+        buffer = BytesIO()\n+        with zipfile.ZipFile(buffer, \"a\") as zip_archive:\n+            zip_archive.writestr(\n+                \"application/schemas/{}.sd\".format(\n+                    self.application_package.schema.name\n+                ),\n+                self.application_package.schema_to_text,\n+            )\n+            zip_archive.writestr(\n+                \"application/services.xml\", self.application_package.services_to_text\n+            )\n+            zip_archive.writestr(\n+                \"application/security/clients.pem\",\n+                self.data_certificate.public_bytes(serialization.Encoding.PEM),\n+            )\n+\n+        return buffer\n+\n+    def start_deployment(self, instance: str, job: str, disk_folder: str) -> int:\n+        deploy_path = (\n+            \"/application/v4/tenant/{}/application/{}/instance/{}/deploy/{}\".format(\n+                self.tenant, self.application, instance, job\n+            )\n+        )\n+\n+        application_zip_bytes = self.to_application_zip()\n+\n+        self.write_private_key_and_cert(\n+            self.data_key, self.data_certificate, disk_folder\n+        )\n+        with open(os.path.join(disk_folder, \"application.zip\"), \"wb\") as zipfile:\n+            zipfile.write(application_zip_bytes.getvalue())\n+\n+        response = self.request(\n+            \"POST\",\n+            deploy_path,\n+            application_zip_bytes,\n+            {\"Content-Type\": \"application/zip\"},\n+        )\n+        print(response[\"message\"])\n+        return response[\"run\"]\n+\n+    def follow_deployment(self, instance: str, job: str, run: int):\n+        last = -1\n+        while True:\n+            update = self.request(\n+                \"GET\",\n+                \"/application/v4/tenant/{}/application/{}/instance/{}/job/{}/run/{}?after={}\".format(\n+                    self.tenant, self.application, instance, job, run, last\n+                ),\n+            )\n+\n+            for step, entries in update[\"log\"].items():\n+                for entry in entries:\n+                    self.print_log_entry(step, entry)\n+            last = update.get(\"lastId\", last)\n+\n+            if update[\"active\"]:\n+                sleep(1)\n+            else:\n+                status = update[\"status\"]\n+                if status == \"success\":\n+                    return\n+                elif status == \"error\":\n+                    raise RuntimeError(\n+                        \"Unexpected error during deployment; see log for details\"\n+                    )\n+                elif status == \"aborted\":\n+                    raise RuntimeError(\n+                        \"Deployment was aborted, probably by a newer deployment\"\n+                    )\n+                elif status == \"outOfCapacity\":\n+                    raise RuntimeError(\n+                        \"No capacity left in zone; please contact the Vespa team\"\n+                    )\n+                elif status == \"deploymentFailed\":\n+                    raise RuntimeError(\"Deployment failed; see log for details\")\n+                elif status == \"installationFailed\":\n+                    raise RuntimeError(\"Installation failed; see Vespa log for details\")\n+                elif status == \"running\":\n+                    raise RuntimeError(\"Deployment not completed\")\n+                elif status == \"endpointCertificateTimeout\":\n+                    raise RuntimeError(\n+                        \"Endpoint certificate not ready in time; please contact Vespa team\"\n+                    )\n+                elif status == \"testFailure\":\n+                    raise RuntimeError(\n+                        \"Unexpected status; tests are not run for manual deployments\"\n+                    )\n+                else:\n+                    raise RuntimeError(\"Unexpected status '\" + status + \"'\")", "originalCommit": "b95ad7d58de6aa1149fb921cc6464d8309420828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4Nzg2Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14165#discussion_r480987866", "bodyText": "Done.", "author": "thigm85", "createdAt": "2020-09-01T09:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4OTk4NA=="}], "type": "inlineReview"}, {"oid": "b4caa167c822fadc35533c0328f4615e4e83d1a9", "url": "https://github.com/vespa-engine/vespa/commit/b4caa167c822fadc35533c0328f4615e4e83d1a9", "message": "remove unnecessary application_package_name argument", "committedDate": "2020-09-01T08:12:00Z", "type": "commit"}, {"oid": "e2c3dbfb0afbab0d29dd0404bbfb97ea0c83e97c", "url": "https://github.com/vespa-engine/vespa/commit/e2c3dbfb0afbab0d29dd0404bbfb97ea0c83e97c", "message": "remove unnecessary library", "committedDate": "2020-09-01T08:28:19Z", "type": "commit"}, {"oid": "53276570bec1d4380756ec60f30dd51b3626c83f", "url": "https://github.com/vespa-engine/vespa/commit/53276570bec1d4380756ec60f30dd51b3626c83f", "message": "add underscore for private methods", "committedDate": "2020-09-01T08:37:46Z", "type": "commit"}, {"oid": "76f9207ca0595a29e60b5e2ae7eaac571d8d9319", "url": "https://github.com/vespa-engine/vespa/commit/76f9207ca0595a29e60b5e2ae7eaac571d8d9319", "message": "split _follow_deployment into two methods", "committedDate": "2020-09-01T08:57:58Z", "type": "commit"}, {"oid": "9891a14ba87f40e2593a619468a372727f9f9e4a", "url": "https://github.com/vespa-engine/vespa/commit/9891a14ba87f40e2593a619468a372727f9f9e4a", "message": "simplify if block with status_message dict", "committedDate": "2020-09-01T09:06:54Z", "type": "commit"}, {"oid": "3e57fb7f186a4f82faa50d36c1e68a783d684410", "url": "https://github.com/vespa-engine/vespa/commit/3e57fb7f186a4f82faa50d36c1e68a783d684410", "message": "print now write to self.output", "committedDate": "2020-09-01T10:27:31Z", "type": "commit"}, {"oid": "d33cf55e6c8914c066052b45a2e082725723e47c", "url": "https://github.com/vespa-engine/vespa/commit/d33cf55e6c8914c066052b45a2e082725723e47c", "message": "do not write zip file to disk", "committedDate": "2020-09-01T10:30:20Z", "type": "commit"}, {"oid": "aff555c1504adc2becf3a384ea1baac9804019ef", "url": "https://github.com/vespa-engine/vespa/commit/aff555c1504adc2becf3a384ea1baac9804019ef", "message": "create outfile_file argument with sys.output as default.", "committedDate": "2020-09-01T10:37:59Z", "type": "commit"}]}