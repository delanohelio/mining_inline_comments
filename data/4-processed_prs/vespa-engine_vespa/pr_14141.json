{"pr_number": 14141, "pr_title": "Only wait for th elids that you are interested in.", "pr_createdAt": "2020-08-23T20:39:41Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14141", "timeline": [{"oid": "0efc67578a8f0ef0d74e965ab156b618fea3fc5a", "url": "https://github.com/vespa-engine/vespa/commit/0efc67578a8f0ef0d74e965ab156b618fea3fc5a", "message": "Only wait for th elids that you are interested in.", "committedDate": "2020-08-23T20:37:44Z", "type": "commit"}, {"oid": "4856dbea48260e229f183b819094b2c0f7d140bf", "url": "https://github.com/vespa-engine/vespa/commit/4856dbea48260e229f183b819094b2c0f7d140bf", "message": "Use two stage lid tracking.", "committedDate": "2020-08-25T09:43:41Z", "type": "commit"}, {"oid": "7b6b0b08d463ac42ca4a97ef24e07dfd5d27f951", "url": "https://github.com/vespa-engine/vespa/commit/7b6b0b08d463ac42ca4a97ef24e07dfd5d27f951", "message": "Ensure that we grab the token prior to optionally acking the operation.", "committedDate": "2020-08-25T10:11:44Z", "type": "commit"}, {"oid": "9f28fd93828a64785f9f60f434131dc7e0329302", "url": "https://github.com/vespa-engine/vespa/commit/9f28fd93828a64785f9f60f434131dc7e0329302", "message": "Also track lids during remove operation.", "committedDate": "2020-08-25T13:20:51Z", "type": "commit"}, {"oid": "0f2cbc87ff807ef4ae22db020ccbf2e49f735e23", "url": "https://github.com/vespa-engine/vespa/commit/0f2cbc87ff807ef4ae22db020ccbf2e49f735e23", "message": "Use a bool to signal the need for commit, and collapse multipe operation on same lid to 1.", "committedDate": "2020-08-25T13:42:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2OTQ2OA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r476469468", "bodyText": "Consider reverting the above change.", "author": "toregge", "createdAt": "2020-08-25T13:57:47Z", "path": "build_settings.cmake", "diffHunk": "@@ -73,7 +73,7 @@ else()\n endif()\n \n # C and C++ compiler flags\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O3 -fno-omit-frame-pointer ${C_WARN_OPTS} -fPIC ${VESPA_CXX_ABI_FLAGS} ${VESPA_XXHASH_DEFINE} -DBOOST_DISABLE_ASSERTS ${VESPA_CPU_ARCH_FLAGS} ${EXTRA_C_FLAGS}\")\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O0 -fno-omit-frame-pointer ${C_WARN_OPTS} -fPIC ${VESPA_CXX_ABI_FLAGS} ${VESPA_XXHASH_DEFINE} -DBOOST_DISABLE_ASSERTS ${VESPA_CPU_ARCH_FLAGS} ${EXTRA_C_FLAGS}\")", "originalCommit": "0f2cbc87ff807ef4ae22db020ccbf2e49f735e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDQxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r476570411", "bodyText": "Consider is a bit on the weak side :)", "author": "baldersheim", "createdAt": "2020-08-25T16:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2OTQ2OA=="}], "type": "inlineReview"}, {"oid": "d5a09968ca22a736d9f705eb9bca62b2d3f4ab88", "url": "https://github.com/vespa-engine/vespa/commit/d5a09968ca22a736d9f705eb9bca62b2d3f4ab88", "message": "Revert debug build option.", "committedDate": "2020-08-25T16:13:31Z", "type": "commit"}, {"oid": "5b2248ed030d2427443712e80569857016cb858e", "url": "https://github.com/vespa-engine/vespa/commit/5b2248ed030d2427443712e80569857016cb858e", "message": "Refactor and test", "committedDate": "2020-08-26T10:30:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0MDgwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r477240805", "bodyText": "Newline is missing at end of file.", "author": "toregge", "createdAt": "2020-08-26T11:51:40Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.cpp", "diffHunk": "@@ -58,12 +90,137 @@ PendingLidTracker::consume(uint32_t lid) {\n     }\n }\n \n+ILidCommitState::State\n+PendingLidTracker::waitFor(MonitorGuard & guard, State state, uint32_t lid) const {\n+    for (auto found = _pending.find(lid); found != _pending.end(); found = _pending.find(lid)) {\n+        if (state == State::NEED_COMMIT) {\n+            return State::WAITING;\n+        }\n+        _cond.wait(guard);\n+    }\n+    return State::COMPLETED;\n+}\n+\n+PendingLidTrackerBase::Snapshot\n+PendingLidTracker::produceSnapshot() {\n+    return Snapshot();\n+}\n+\n+ILidCommitState::LidList\n+PendingLidTracker::pendingLids() const {\n+    MonitorGuard guard(_mutex);\n+    LidList lids;\n+    lids.reserve(_pending.size());\n+    for (const auto & entry : _pending) {\n+        lids.push_back(entry.first);\n+    }\n+    return lids;\n+}\n+\n+TwoPhasePendingLidTracker::TwoPhasePendingLidTracker() = default;\n+\n+TwoPhasePendingLidTracker::~TwoPhasePendingLidTracker() {\n+    assert(_pending.empty());\n+}\n+\n+IPendingLidTracker::Token\n+TwoPhasePendingLidTracker::produce(uint32_t lid) {\n+    std::lock_guard guard(_mutex);\n+    _pending[lid].inflight_feed++;\n+    return Token(lid, *this);\n+}\n void\n-PendingLidTracker::waitForConsumedLid(uint32_t lid) {\n-    std::unique_lock<std::mutex> guard(_mutex);\n-    while (_pending.find(lid) != _pending.end()) {\n+TwoPhasePendingLidTracker::consume(uint32_t lid) {\n+    std::lock_guard guard(_mutex);\n+    auto found = _pending.find(lid);\n+    assert (found != _pending.end());\n+    assert (found->second.inflight_feed > 0);\n+    found->second.inflight_feed--;\n+    found->second.need_commit = true;\n+}\n+\n+ILidCommitState::State\n+TwoPhasePendingLidTracker::waitFor(MonitorGuard & guard, State state, uint32_t lid) const {\n+    for (auto found = _pending.find(lid); found != _pending.end(); found = _pending.find(lid)) {\n+        if (state == State::NEED_COMMIT) {\n+            if ((found->second.inflight_feed > 0) || found->second.need_commit) {\n+                return State::NEED_COMMIT;\n+            }\n+            return State::WAITING;\n+        }\n         _cond.wait(guard);\n     }\n+    return State::COMPLETED;\n }\n \n+void\n+TwoPhasePendingLidTracker::consumeSnapshot(LidList committed) {\n+    MonitorGuard guard(_mutex);\n+    for (const auto & lid : committed) {\n+        auto found = _pending.find(lid);\n+        assert(found != _pending.end());\n+        assert(found->second.inflight_commit >= 1);\n+        found->second.inflight_commit --;\n+        if (found->second.empty()) {\n+            _pending.erase(found);\n+        }\n+    }\n+    _cond.notify_all();\n+}\n+\n+ILidCommitState::LidList\n+TwoPhasePendingLidTracker::pendingLids() const {\n+    MonitorGuard guard(_mutex);\n+    LidList lids;\n+    lids.reserve(_pending.size());\n+    for (const auto & entry : _pending) {\n+        lids.push_back(entry.first);\n+    }\n+    return lids;\n }\n+\n+namespace common::internal {\n+\n+class CommitList : public PendingLidTrackerBase::Payload {\n+public:\n+    using LidList = ILidCommitState::LidList;\n+    CommitList(LidList lids, TwoPhasePendingLidTracker & tracker)\n+        : _tracker(&tracker),\n+          _lids(std::move(lids))\n+    { }\n+    CommitList(const CommitList &) = delete;\n+    CommitList & operator = (const CommitList &) = delete;\n+    CommitList & operator = (CommitList &&) = delete;\n+    CommitList(CommitList && rhs) noexcept\n+        : _tracker(rhs._tracker),\n+          _lids(std::move(rhs._lids))\n+    {\n+        rhs._tracker = nullptr;\n+    }\n+    ~CommitList() override {\n+        if (_tracker != nullptr) {\n+            _tracker->consumeSnapshot(std::move(_lids));\n+        }\n+    }\n+private:\n+    TwoPhasePendingLidTracker * _tracker;\n+    LidList                     _lids;\n+};\n+\n+}\n+\n+PendingLidTrackerBase::Snapshot\n+TwoPhasePendingLidTracker::produceSnapshot() {\n+    LidList toCommit;\n+    MonitorGuard guard(_mutex);\n+    for (auto & entry : _pending) {\n+        if (entry.second.need_commit) {\n+            toCommit.emplace_back(entry.first);\n+            entry.second.inflight_commit ++;\n+            entry.second.need_commit = false;\n+        }\n+    }\n+    return std::make_unique<common::internal::CommitList>(std::move(toCommit), *this);\n+}\n+\n+}", "originalCommit": "5b2248ed030d2427443712e80569857016cb858e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0NjcyNg==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r477246726", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-08-26T12:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0MDgwNQ=="}], "type": "inlineReview"}, {"oid": "19e8da0ff3a552806604866d91db9176eee44585", "url": "https://github.com/vespa-engine/vespa/commit/19e8da0ff3a552806604866d91db9176eee44585", "message": "Do not build debug build....", "committedDate": "2020-08-26T11:55:02Z", "type": "commit"}, {"oid": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "url": "https://github.com/vespa-engine/vespa/commit/dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "message": "Missing eol.", "committedDate": "2020-08-26T12:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODE4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478258185", "bodyText": "Some more details on the various states and transitions would be nice.", "author": "geirst", "createdAt": "2020-08-27T08:47:24Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -30,33 +32,102 @@ class IPendingLidTracker {\n     };\n     virtual ~IPendingLidTracker() = default;\n     virtual Token produce(uint32_t lid) = 0;\n-    virtual void waitForConsumedLid(uint32_t lid) = 0;\n private:\n     virtual void consume(uint32_t lid) = 0;\n-    std::mutex _mutex;\n-    std::condition_variable _cond;\n-    vespalib::hash_map<uint32_t, uint32_t> _pending;\n };\n \n-class NoopLidTracker : public IPendingLidTracker {\n+/**\n+ * This is an interface for checking/waiting the state of a lid in the feedpipeline", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjkxOA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316918", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-27T10:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODU3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478258573", "bodyText": "Don't think this comment is up to date as it also is used as base class for PendingLidTracker.", "author": "geirst", "createdAt": "2020-08-27T08:48:03Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -30,33 +32,102 @@ class IPendingLidTracker {\n     };\n     virtual ~IPendingLidTracker() = default;\n     virtual Token produce(uint32_t lid) = 0;\n-    virtual void waitForConsumedLid(uint32_t lid) = 0;\n private:\n     virtual void consume(uint32_t lid) = 0;\n-    std::mutex _mutex;\n-    std::condition_variable _cond;\n-    vespalib::hash_map<uint32_t, uint32_t> _pending;\n };\n \n-class NoopLidTracker : public IPendingLidTracker {\n+/**\n+ * This is an interface for checking/waiting the state of a lid in the feedpipeline\n+ */\n+class ILidCommitState {\n public:\n-    Token produce(uint32_t lid) override;\n-    void waitForConsumedLid(uint32_t ) override { }\n+    enum class State {NEED_COMMIT, WAITING, COMPLETED};\n+    using LidList = std::vector<uint32_t>;\n+    virtual ~ILidCommitState() = default;\n+    State getState() const { return waitState(State::NEED_COMMIT); }\n+    State getState(uint32_t lid) const { return waitState(State::NEED_COMMIT, lid); }\n+    State getState(const LidList & lids) const { return waitState(State::NEED_COMMIT, lids); }\n+    void waitComplete(uint32_t lid) const;\n+    void waitComplete(const LidList & lids) const;\n+    void waitComplete() const;\n private:\n-    void consume(uint32_t ) override { }\n+    virtual State waitState(State state, uint32_t lid) const = 0;\n+    virtual State waitState(State state, const LidList & lids) const = 0;\n+    virtual State waitState(State state) const = 0;\n+};\n+\n+/**\n+ * Base class for doing 2 phase lidtracking.", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2ODE3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478268177", "bodyText": "Also describe the difference between a Token and a Snapshot.", "author": "geirst", "createdAt": "2020-08-27T09:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjgyMg==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316822", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-27T10:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODY1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478258656", "bodyText": "Some more details on how this works would be nice.", "author": "geirst", "createdAt": "2020-08-27T08:48:11Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -30,33 +32,102 @@ class IPendingLidTracker {\n     };\n     virtual ~IPendingLidTracker() = default;\n     virtual Token produce(uint32_t lid) = 0;\n-    virtual void waitForConsumedLid(uint32_t lid) = 0;\n private:\n     virtual void consume(uint32_t lid) = 0;\n-    std::mutex _mutex;\n-    std::condition_variable _cond;\n-    vespalib::hash_map<uint32_t, uint32_t> _pending;\n };\n \n-class NoopLidTracker : public IPendingLidTracker {\n+/**\n+ * This is an interface for checking/waiting the state of a lid in the feedpipeline\n+ */\n+class ILidCommitState {\n public:\n-    Token produce(uint32_t lid) override;\n-    void waitForConsumedLid(uint32_t ) override { }\n+    enum class State {NEED_COMMIT, WAITING, COMPLETED};\n+    using LidList = std::vector<uint32_t>;\n+    virtual ~ILidCommitState() = default;\n+    State getState() const { return waitState(State::NEED_COMMIT); }\n+    State getState(uint32_t lid) const { return waitState(State::NEED_COMMIT, lid); }\n+    State getState(const LidList & lids) const { return waitState(State::NEED_COMMIT, lids); }\n+    void waitComplete(uint32_t lid) const;\n+    void waitComplete(const LidList & lids) const;\n+    void waitComplete() const;\n private:\n-    void consume(uint32_t ) override { }\n+    virtual State waitState(State state, uint32_t lid) const = 0;\n+    virtual State waitState(State state, const LidList & lids) const = 0;\n+    virtual State waitState(State state) const = 0;\n+};\n+\n+/**\n+ * Base class for doing 2 phase lidtracking.\n+ */\n+class PendingLidTrackerBase : public IPendingLidTracker,\n+                              public ILidCommitState\n+{\n+public:\n+    ~PendingLidTrackerBase();\n+    struct Payload {\n+        virtual ~Payload() = default;\n+    };\n+    using Snapshot = std::unique_ptr<Payload>;\n+    virtual Snapshot produceSnapshot() = 0;\n+\n+    State waitState(State state) const override;\n+    State waitState(State state, uint32_t lid) const override;\n+    State waitState(State state, const LidList & lids) const override;\n+protected:\n+    using MonitorGuard = std::unique_lock<std::mutex>;\n+    PendingLidTrackerBase();\n+    virtual LidList pendingLids() const = 0;\n+    virtual State waitFor(MonitorGuard & guard, State state, uint32_t lid) const = 0;\n+    MonitorGuard getGuard() { return MonitorGuard(_mutex); }\n+    mutable std::mutex                     _mutex;\n+    mutable std::condition_variable        _cond;\n };\n \n-class PendingLidTracker : public IPendingLidTracker {\n+/**\n+ * Use for tracking lids in a single phase.", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjczNA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316734", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-27T10:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODkzNg==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478258936", "bodyText": "Some more details on how this works would be nice.", "author": "geirst", "createdAt": "2020-08-27T08:48:41Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -30,33 +32,102 @@ class IPendingLidTracker {\n     };\n     virtual ~IPendingLidTracker() = default;\n     virtual Token produce(uint32_t lid) = 0;\n-    virtual void waitForConsumedLid(uint32_t lid) = 0;\n private:\n     virtual void consume(uint32_t lid) = 0;\n-    std::mutex _mutex;\n-    std::condition_variable _cond;\n-    vespalib::hash_map<uint32_t, uint32_t> _pending;\n };\n \n-class NoopLidTracker : public IPendingLidTracker {\n+/**\n+ * This is an interface for checking/waiting the state of a lid in the feedpipeline\n+ */\n+class ILidCommitState {\n public:\n-    Token produce(uint32_t lid) override;\n-    void waitForConsumedLid(uint32_t ) override { }\n+    enum class State {NEED_COMMIT, WAITING, COMPLETED};\n+    using LidList = std::vector<uint32_t>;\n+    virtual ~ILidCommitState() = default;\n+    State getState() const { return waitState(State::NEED_COMMIT); }\n+    State getState(uint32_t lid) const { return waitState(State::NEED_COMMIT, lid); }\n+    State getState(const LidList & lids) const { return waitState(State::NEED_COMMIT, lids); }\n+    void waitComplete(uint32_t lid) const;\n+    void waitComplete(const LidList & lids) const;\n+    void waitComplete() const;\n private:\n-    void consume(uint32_t ) override { }\n+    virtual State waitState(State state, uint32_t lid) const = 0;\n+    virtual State waitState(State state, const LidList & lids) const = 0;\n+    virtual State waitState(State state) const = 0;\n+};\n+\n+/**\n+ * Base class for doing 2 phase lidtracking.\n+ */\n+class PendingLidTrackerBase : public IPendingLidTracker,\n+                              public ILidCommitState\n+{\n+public:\n+    ~PendingLidTrackerBase();\n+    struct Payload {\n+        virtual ~Payload() = default;\n+    };\n+    using Snapshot = std::unique_ptr<Payload>;\n+    virtual Snapshot produceSnapshot() = 0;\n+\n+    State waitState(State state) const override;\n+    State waitState(State state, uint32_t lid) const override;\n+    State waitState(State state, const LidList & lids) const override;\n+protected:\n+    using MonitorGuard = std::unique_lock<std::mutex>;\n+    PendingLidTrackerBase();\n+    virtual LidList pendingLids() const = 0;\n+    virtual State waitFor(MonitorGuard & guard, State state, uint32_t lid) const = 0;\n+    MonitorGuard getGuard() { return MonitorGuard(_mutex); }\n+    mutable std::mutex                     _mutex;\n+    mutable std::condition_variable        _cond;\n };\n \n-class PendingLidTracker : public IPendingLidTracker {\n+/**\n+ * Use for tracking lids in a single phase.\n+ */\n+class PendingLidTracker : public PendingLidTrackerBase\n+{\n public:\n     PendingLidTracker();\n     ~PendingLidTracker() override;\n     Token produce(uint32_t lid) override;\n-    void waitForConsumedLid(uint32_t lid) override;\n+    Snapshot produceSnapshot() override;\n private:\n+    LidList pendingLids() const override;\n     void consume(uint32_t lid) override;\n-    std::mutex _mutex;\n-    std::condition_variable _cond;\n+    State waitFor(MonitorGuard & guard, State state, uint32_t lid) const override;\n+\n     vespalib::hash_map<uint32_t, uint32_t> _pending;\n };\n \n+namespace common::internal {\n+    class CommitList;\n+}\n+/**\n+ * Use for tracking lids in 2 phases.", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjY2OA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316668", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-27T10:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MjkwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478262905", "bodyText": "I would like to see some more details on how this interface is used. What is a pending lid, what the Token class represents, and the relationship between produce() and consume().", "author": "geirst", "createdAt": "2020-08-27T08:55:09Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -5,9 +5,11 @@\n #include <vespa/vespalib/stllike/hash_map.h>\n #include <mutex>\n #include <condition_variable>\n+#include <vector>\n \n namespace proton {\n \n+/** Interface for tracking lids in the feed pipeline */", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjU5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316597", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-27T10:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjI0NA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478272244", "bodyText": "This is named commitToken other places in this file. Any reason we use another name here? If not, consider consolidating.", "author": "geirst", "createdAt": "2020-08-27T09:10:51Z", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -585,19 +605,20 @@ StoreOnlyFeedView::internalRemove(FeedToken token, const RemoveOperationWithDocI\n          rmOp.getSubDbId(), rmOp.getLid(), rmOp.getPrevSubDbId(), rmOp.getPrevLid(), _params._subDbId);\n \n     PendingNotifyRemoveDone pendingNotifyRemoveDone = adjustMetaStore(rmOp, docId.getGlobalId(), docId);\n+    auto uncommitted = _pendingLidsForCommit->produce(rmOp.getLid());", "originalCommit": "dc2b32f81cc58c2ca03ee67a25526bab03a12d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjU2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478272562", "bodyText": "Note, there are more places we use uncomitted in this file.", "author": "geirst", "createdAt": "2020-08-27T09:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxNjQyNw==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478316427", "bodyText": "Unified on uncommitted.", "author": "baldersheim", "createdAt": "2020-08-27T10:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjI0NA=="}], "type": "inlineReview"}, {"oid": "6a31dd20690d94bbdb12e9f6b1e94b2517fa4c5a", "url": "https://github.com/vespa-engine/vespa/commit/6a31dd20690d94bbdb12e9f6b1e94b2517fa4c5a", "message": "Improve comments and unify naming.", "committedDate": "2020-08-27T10:26:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMjQwNg==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478322406", "bodyText": "whenn -> when", "author": "geirst", "createdAt": "2020-08-27T10:38:41Z", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -84,7 +97,8 @@ class PendingLidTrackerBase : public IPendingLidTracker,\n };\n \n /**\n- * Use for tracking lids in a single phase.\n+ * Use for tracking lids whenn visibility-delay is zero and commit is implicit.", "originalCommit": "6a31dd20690d94bbdb12e9f6b1e94b2517fa4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMDc5OA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478330798", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-08-27T10:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMjQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMjgxOA==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478322818", "bodyText": "unconmitted -> uncommitted", "author": "geirst", "createdAt": "2020-08-27T10:39:38Z", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -318,7 +318,7 @@ StoreOnlyFeedView::internalPut(FeedToken token, const PutOperation &putOp)\n          _params._subDbId, doc->toString(true).size(), doc->toString(true).c_str());\n \n     PendingNotifyRemoveDone pendingNotifyRemoveDone = adjustMetaStore(putOp, docId.getGlobalId(), docId);\n-    auto commitToken = _pendingLidsForCommit->produce(putOp.getLid());\n+    auto unconmitted = _pendingLidsForCommit->produce(putOp.getLid());", "originalCommit": "6a31dd20690d94bbdb12e9f6b1e94b2517fa4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMDk5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14141#discussion_r478330991", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-08-27T10:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMjgxOA=="}], "type": "inlineReview"}, {"oid": "cc6b858139048ca8b1d810069eb9cf48e87e5441", "url": "https://github.com/vespa-engine/vespa/commit/cc6b858139048ca8b1d810069eb9cf48e87e5441", "message": "Fix typo.", "committedDate": "2020-08-27T10:43:52Z", "type": "commit"}]}