{"pr_number": 13294, "pr_title": "Balder/smarter same element iteration", "pr_createdAt": "2020-05-18T22:56:31Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13294", "timeline": [{"oid": "723f2ae4228a82692831af2682942e701be7aa16", "url": "https://github.com/vespa-engine/vespa/commit/723f2ae4228a82692831af2682942e701be7aa16", "message": "- Handle more than 64k hits in the element vector.\n- Avoid computing all vectors in full separately and instead do an incremental inline merge with.\n- Also avoid requiring the searchiterator aspect on the wrappers.", "committedDate": "2020-05-18T22:54:51Z", "type": "commit"}, {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59", "url": "https://github.com/vespa-engine/vespa/commit/0b93babac02fbce704f2683d69fd3e6677961c59", "message": "Test merge with, all, none, and some", "committedDate": "2020-05-18T22:54:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjM4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427152387", "bodyText": "strange indent", "author": "havardpe", "createdAt": "2020-05-19T09:14:27Z", "path": "searchlib/src/vespa/searchlib/attribute/CMakeLists.txt", "diffHunk": "@@ -34,7 +34,7 @@ vespa_add_library(searchlib_attribute OBJECT\n     defines.cpp\n     diversity.cpp\n     dociditerator.cpp\n-    elementiterator.cpp\n+        searchcontextelementiterator.cpp", "originalCommit": "0b93babac02fbce704f2683d69fd3e6677961c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIxMzYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427213624", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-19T10:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1OTQ1NA==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427159454", "bodyText": "possible re-write: avoid calling find multiple times for same candidate\npossible re-write: terminate loop when attribute matching is exhausted.", "author": "havardpe", "createdAt": "2020-05-19T09:25:45Z", "path": "searchlib/src/vespa/searchlib/attribute/searchcontextelementiterator.cpp", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2018 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"searchcontextelementiterator.h\"\n+#include <vespa/searchcommon/attribute/i_search_context.h>\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+\n+using search::fef::TermFieldMatchDataPosition;\n+\n+namespace search::attribute {\n+\n+void\n+SearchContextElementIterator::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    int32_t weight(0);\n+    for (int32_t id = _searchContext.find(docId, 0, weight); id >= 0; id = _searchContext.find(docId, id+1, weight)) {\n+        elementIds.push_back(id);\n+    }\n+}\n+void\n+SearchContextElementIterator::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    int32_t weight(0);\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {\n+            id = _searchContext.find(docId, candidate, weight);", "originalCommit": "0b93babac02fbce704f2683d69fd3e6677961c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIxODMzMg==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427218332", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-19T11:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1OTQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjQwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427162409", "bodyText": "missing newline", "author": "havardpe", "createdAt": "2020-05-19T09:30:23Z", "path": "searchlib/src/vespa/searchlib/queryeval/elementiterator.cpp", "diffHunk": "@@ -0,0 +1,71 @@\n+#include \"elementiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/vespalib/objects/objectvisitor.h>\n+\n+namespace search::queryeval {\n+\n+void\n+ElementIterator::visitMembers(vespalib::ObjectVisitor &visitor) const {\n+    visit(visitor, \"iterator\", _search.get());\n+}\n+\n+ElementIteratorWrapper::ElementIteratorWrapper(SearchIterator::UP search, fef::TermFieldMatchData & tfmd)\n+    : ElementIterator(std::move(search)),\n+      _tfmd(tfmd)\n+{}\n+\n+ElementIteratorWrapper::~ElementIteratorWrapper() = default;\n+\n+void\n+ElementIteratorWrapper::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    int prevId(-1);\n+    for (auto element : _tfmd) {\n+        uint32_t id(element.getElementId());\n+        if (prevId != int(id)) {\n+            elementIds.push_back(id);\n+            prevId = id;\n+        }\n+    }\n+}\n+\n+void\n+ElementIteratorWrapper::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    auto it = _tfmd.begin();\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {\n+            while ((it < _tfmd.end()) && (candidate > int(it->getElementId()))) {\n+                it++;\n+            }\n+            if (it == _tfmd.end()) break;\n+            id = it->getElementId();\n+            if (id == candidate) {\n+                elementIds[toKeep++] = candidate;\n+            }\n+        }\n+    }\n+    elementIds.resize(toKeep);\n+}\n+\n+}\n+\n+void visit(vespalib::ObjectVisitor &self, const vespalib::string &name,\n+           const search::queryeval::ElementIterator *obj)\n+{\n+    if (obj != 0) {\n+        self.openStruct(name, \"ElementIterator\");\n+        obj->visitMembers(self);\n+        self.closeStruct();\n+    } else {\n+        self.visitNull(name);\n+    }\n+}\n+\n+void visit(vespalib::ObjectVisitor &self, const vespalib::string &name,\n+           const search::queryeval::ElementIterator &obj)\n+{\n+    visit(self, name, &obj);\n+}", "originalCommit": "0b93babac02fbce704f2683d69fd3e6677961c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIxMzUzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427213539", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-19T10:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTgwNg==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427165806", "bodyText": "possible re-write: avoid seeking for the same candidate multiple times", "author": "havardpe", "createdAt": "2020-05-19T09:35:51Z", "path": "searchlib/src/vespa/searchlib/queryeval/elementiterator.cpp", "diffHunk": "@@ -0,0 +1,71 @@\n+#include \"elementiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/vespalib/objects/objectvisitor.h>\n+\n+namespace search::queryeval {\n+\n+void\n+ElementIterator::visitMembers(vespalib::ObjectVisitor &visitor) const {\n+    visit(visitor, \"iterator\", _search.get());\n+}\n+\n+ElementIteratorWrapper::ElementIteratorWrapper(SearchIterator::UP search, fef::TermFieldMatchData & tfmd)\n+    : ElementIterator(std::move(search)),\n+      _tfmd(tfmd)\n+{}\n+\n+ElementIteratorWrapper::~ElementIteratorWrapper() = default;\n+\n+void\n+ElementIteratorWrapper::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    int prevId(-1);\n+    for (auto element : _tfmd) {\n+        uint32_t id(element.getElementId());\n+        if (prevId != int(id)) {\n+            elementIds.push_back(id);\n+            prevId = id;\n+        }\n+    }\n+}\n+\n+void\n+ElementIteratorWrapper::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    auto it = _tfmd.begin();\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {", "originalCommit": "0b93babac02fbce704f2683d69fd3e6677961c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIxODI1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427218256", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-19T11:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTgwNg=="}], "type": "inlineReview"}, {"oid": "f025340d974120b7eabcfa8223d6663bd49ba113", "url": "https://github.com/vespa-engine/vespa/commit/f025340d974120b7eabcfa8223d6663bd49ba113", "message": "Fix whitespace.", "committedDate": "2020-05-19T10:59:34Z", "type": "commit"}, {"oid": "ff077b69f84b3494b10c75a608deea0b51e6e8b2", "url": "https://github.com/vespa-engine/vespa/commit/ff077b69f84b3494b10c75a608deea0b51e6e8b2", "message": "Unify merge loops", "committedDate": "2020-05-19T11:08:09Z", "type": "commit"}]}