{"pr_number": 14056, "pr_title": "Arnej/set rawscore for locations", "pr_createdAt": "2020-08-16T11:42:24Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14056", "timeline": [{"oid": "a4db99f9d13021cb4372e45fbcddb045294dd1e6", "url": "https://github.com/vespa-engine/vespa/commit/a4db99f9d13021cb4372e45fbcddb045294dd1e6", "message": "add modern location iterator that can set rawscore", "committedDate": "2020-08-16T11:34:44Z", "type": "commit"}, {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1", "url": "https://github.com/vespa-engine/vespa/commit/bd5676ce345feecf1bbc04b962954b26e84a03e1", "message": "wire in new iterator", "committedDate": "2020-08-16T11:40:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NjI2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471386262", "bodyText": "consider while loop for more robustness", "author": "havardpe", "createdAt": "2020-08-17T10:26:58Z", "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {", "originalCommit": "bd5676ce345feecf1bbc04b962954b26e84a03e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxMDc3OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471510779", "bodyText": "done.", "author": "arnej27959", "createdAt": "2020-08-17T14:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NjI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4Nzg4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471387889", "bodyText": "should probably use already fetched values here", "author": "havardpe", "createdAt": "2020-08-17T10:30:01Z", "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {\n+            _pos.resize(numValues);\n+            numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        }\n+        for (uint32_t i = 0; i < numValues; i++) {\n+            int64_t docxy(_pos[i]);\n+            if (_location.inside_limit(docxy)) {\n+                setDocId(docId);\n+                return;\n+            }\n+        }\n+        if (!_strict) {\n+            return;\n+        }\n+        ++docId;\n+    }\n+    setAtEnd();\n+}\n+\n+void\n+LocationIterator::doUnpack(uint32_t docId)\n+{\n+    uint64_t sqabsdist = std::numeric_limits<uint64_t>::max();\n+    int32_t docx = 0;\n+    int32_t docy = 0;\n+    uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());", "originalCommit": "bd5676ce345feecf1bbc04b962954b26e84a03e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxMDgzOA==", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471510838", "bodyText": "fixed.", "author": "arnej27959", "createdAt": "2020-08-17T14:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4Nzg4OQ=="}], "type": "inlineReview"}, {"oid": "71387f83fbcfe1353f328c66024924d03fba3ca3", "url": "https://github.com/vespa-engine/vespa/commit/71387f83fbcfe1353f328c66024924d03fba3ca3", "message": "re-use fetched values in unpack", "committedDate": "2020-08-17T11:09:14Z", "type": "commit"}]}