{"pr_number": 15144, "pr_title": "Increase priority for global bucket merges", "pr_createdAt": "2020-11-02T15:35:39Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15144", "timeline": [{"oid": "562fd8732238ad886a8bd4301bec19d2cb0cc2b6", "url": "https://github.com/vespa-engine/vespa/commit/562fd8732238ad886a8bd4301bec19d2cb0cc2b6", "message": "Increase priority for global bucket merges\n\nTo avoid global buckets competing with (and usually being starved by)\ndefault bucket space merges, explicitly prioritize default bucket\nmerges above most other load.\n\nIncreases both distributor-internal maintenance schedulinr priority and\npersistence-level operation priority.", "committedDate": "2020-11-02T15:31:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2NDE3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15144#discussion_r516064177", "bodyText": "This might trigger another kind of starvation if new global documents are fed to a cluster where a node is full.", "author": "toregge", "createdAt": "2020-11-02T15:46:20Z", "path": "storage/src/vespa/storage/distributor/statecheckers.cpp", "diffHunk": "@@ -861,11 +862,18 @@ SynchronizeAndMoveStateChecker::check(StateChecker::Context& c)\n         IdealStateOperation::UP op(\n                 new MergeOperation(BucketAndNodes(c.getBucket(), result.nodes()),\n                                    c.distributorConfig.getMaxNodesPerMerge()));\n-        op->setPriority(result.priority());\n         op->setDetailedReason(result.reason());\n-        MaintenancePriority::Priority schedPri(\n-                result.needsMoveOnly() ? MaintenancePriority::LOW\n-                                       : MaintenancePriority::MEDIUM);\n+        MaintenancePriority::Priority schedPri;\n+        if (c.getBucketSpace() == document::FixedBucketSpaces::default_space()) {\n+            schedPri = (result.needsMoveOnly() ? MaintenancePriority::LOW\n+                                               : MaintenancePriority::MEDIUM);\n+            op->setPriority(result.priority());\n+        } else {\n+            // Since the default bucket space has a dependency on the global bucket space,\n+            // we prioritize scheduling of merges to global buckets over those for default buckets.\n+            schedPri = MaintenancePriority::HIGH;\n+            op->setPriority(c.distributorConfig.getMaintenancePriorities().mergeGlobalBuckets);", "originalCommit": "562fd8732238ad886a8bd4301bec19d2cb0cc2b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MDIwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15144#discussion_r516570205", "bodyText": "After having looked at the maintenance scheduler, this doesn't seem to be a problem. Buckets are added to a bucket priority database by a maintenance scanner, and the scheduler just picks buckets from that bucket priority database. If a maintenance operation fails then it is not retried until the maintenance scanner checks the bucket again.", "author": "toregge", "createdAt": "2020-11-03T10:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2NDE3Nw=="}], "type": "inlineReview"}, {"oid": "5247f841c003d9275ebe919fe8367f016ef24f38", "url": "https://github.com/vespa-engine/vespa/commit/5247f841c003d9275ebe919fe8367f016ef24f38", "message": "Make prioritization of global bucket merges live configurable\n\nLets an application that is starving default space merges explicitly\ndisable prioritization temporarily. This is a stop-gap before we add\nmore robust and generalized handling of resource exhaustion scenarios.", "committedDate": "2020-11-03T14:12:36Z", "type": "commit"}]}