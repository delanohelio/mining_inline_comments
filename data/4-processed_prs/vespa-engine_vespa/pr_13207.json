{"pr_number": 13207, "pr_title": "Use a smart allocator for allocating memory for large 'long' lived", "pr_createdAt": "2020-05-11T11:19:15Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13207", "timeline": [{"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db", "url": "https://github.com/vespa-engine/vespa/commit/efe84b0f2c3720e98a26a509fd70a9e2307e14db", "message": "Use a smart allocator for allocating memory for large 'long' lived\nvectors. Large vectors will be allocated directly with mmap.\nThis cancels the main reason for using vespalib::Array.", "committedDate": "2020-05-11T11:12:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTAxNA==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422981014", "bodyText": "This file doesn't include any headers for required alloc types", "author": "vekterli", "createdAt": "2020-05-11T11:44:05Z", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {", "originalCommit": "efe84b0f2c3720e98a26a509fd70a9e2307e14db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNjA3Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423036076", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-11T13:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODczOA==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422998738", "bodyText": "Since this is technically a stateful allocator whose ability to free an allocated pointer depends on the allocator instance the pointer was originally returned from, I think it might be required to add operator== here for testing allocator equivalence. See https://en.cppreference.com/w/cpp/memory/allocator/operator_cmp and https://howardhinnant.github.io/allocator_boilerplate.html#new", "author": "vekterli", "createdAt": "2020-05-11T12:19:58Z", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}\n+    using value_type = T;\n+    T * allocate(std::size_t n) {\n+        return static_cast<T *>(_allocator->alloc(n*sizeof(T)).first);\n+    }\n+    void deallocate(T * p, std::size_t n) {\n+        _allocator->free(p, n*sizeof(T));\n+    }", "originalCommit": "efe84b0f2c3720e98a26a509fd70a9e2307e14db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4NTQ3Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423085476", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-11T14:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTYzNg==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422999636", "bodyText": "Could be noexcept", "author": "vekterli", "createdAt": "2020-05-11T12:21:36Z", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}", "originalCommit": "efe84b0f2c3720e98a26a509fd70a9e2307e14db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNzgxMg==", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423037812", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-11T13:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTYzNg=="}], "type": "inlineReview"}, {"oid": "8a1a73fcb28a548b5d3266ab45f236b9033c39ba", "url": "https://github.com/vespa-engine/vespa/commit/8a1a73fcb28a548b5d3266ab45f236b9033c39ba", "message": "Implemtent equality operator.", "committedDate": "2020-05-11T14:33:26Z", "type": "commit"}]}