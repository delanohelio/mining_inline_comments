{"pr_number": 13268, "pr_title": "Extend test for unpack of multibitvector to cover all aspects variant\u2026", "pr_createdAt": "2020-05-15T13:01:42Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13268", "timeline": [{"oid": "531b988b87698a745f73f17773468e5710817ef7", "url": "https://github.com/vespa-engine/vespa/commit/531b988b87698a745f73f17773468e5710817ef7", "message": "Extend test for unpack of multibitvector to cover all aspects variants for OR.", "committedDate": "2020-05-15T12:58:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NTk5NQ==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425845995", "bodyText": "consider using i", "author": "havardpe", "createdAt": "2020-05-15T14:37:13Z", "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());", "originalCommit": "531b988b87698a745f73f17773468e5710817ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTI3OA==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r426055278", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-15T21:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NTk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzAzMg==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425847032", "bodyText": "not fixed by fixup", "author": "havardpe", "createdAt": "2020-05-15T14:38:48Z", "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);", "originalCommit": "531b988b87698a745f73f17773468e5710817ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTM0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r426055349", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-15T21:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzEyMA==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425847120", "bodyText": "not fixed by fixup", "author": "havardpe", "createdAt": "2020-05-15T14:38:58Z", "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);\n+    _bvs[1]->setBit(1);\n+    _bvs[2]->clearBit(1);", "originalCommit": "531b988b87698a745f73f17773468e5710817ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQxMA==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r426055410", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-15T21:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425849624", "bodyText": "consider checking for multi-bitvector optimization", "author": "havardpe", "createdAt": "2020-05-15T14:42:48Z", "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);\n+    _bvs[1]->setBit(1);\n+    _bvs[2]->clearBit(1);\n+    UnpackInfo all;\n+    all.forceAll();\n+    verifyUnpackOfOr(all);\n+\n+    UnpackInfo unpackInfo;\n+    unpackInfo.add(1);\n+    unpackInfo.add(2);\n+    verifyUnpackOfOr(unpackInfo);\n+\n+    fixup_bitvectors();\n+}\n+\n+void\n+Test::verifyUnpackOfOr(const UnpackInfo &unpackInfo)\n+{\n+    TermFieldMatchData tfmdA[3];\n+    MultiSearch::Children children;\n+    children.push_back(createIter(0, false, tfmdA[0], false).release());\n+    children.push_back(createIter(1, false, tfmdA[1], false).release());\n+    children.push_back(createIter(2, false, tfmdA[2], false).release());\n+    SearchIterator::UP s(OrSearch::create(children, false, unpackInfo));\n+    verifyOrUnpack(*s, tfmdA);\n+\n+    for (auto & tfmd : tfmdA) {\n+        tfmd.resetOnlyDocId(0);\n+    }\n+\n+    const MultiSearch * ms = dynamic_cast<const MultiSearch *>(s.get());\n+    EXPECT_TRUE(ms != nullptr);\n+    EXPECT_EQUAL(3u, ms->getChildren().size());\n+\n+    s = MultiBitVectorIteratorBase::optimize(std::move(s));\n+    s->initFullRange();\n+    ms = dynamic_cast<const MultiSearch *>(s.get());", "originalCommit": "531b988b87698a745f73f17773468e5710817ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ1Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r426055457", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-05-15T21:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTYyNA=="}], "type": "inlineReview"}, {"oid": "b35ede071f496e36902779542ba2ddc075f7b55a", "url": "https://github.com/vespa-engine/vespa/commit/b35ede071f496e36902779542ba2ddc075f7b55a", "message": "Follow up on PR comments.", "committedDate": "2020-05-15T21:27:43Z", "type": "commit"}]}