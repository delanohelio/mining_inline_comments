{"pr_number": 12584, "pr_title": "Arnej/better remove strategy ", "pr_createdAt": "2020-03-16T14:51:04Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12584", "timeline": [{"oid": "f1276559667e86787fab42a85617fc16a6a25593", "url": "https://github.com/vespa-engine/vespa/commit/f1276559667e86787fab42a85617fc16a6a25593", "message": "better remove strategy\n\n* compute pairwise distance between neighbors of a removed\n  point, and add links starting with closest pair.", "committedDate": "2020-03-16T14:43:41Z", "type": "commit"}, {"oid": "84c28041c2a4abb12f0e8834220719c61761fc12", "url": "https://github.com/vespa-engine/vespa/commit/84c28041c2a4abb12f0e8834220719c61761fc12", "message": "refactor to avoid code duplication", "committedDate": "2020-03-16T14:43:42Z", "type": "commit"}, {"oid": "1a217c1590afc4f5a1f8ea4b9cf72eb71c7404b7", "url": "https://github.com/vespa-engine/vespa/commit/1a217c1590afc4f5a1f8ea4b9cf72eb71c7404b7", "message": "always use heuristic filtering to allow for more links to be added later", "committedDate": "2020-03-16T14:43:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5MjQ3OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12584#discussion_r393092479", "bodyText": "since you set the link array specifically, maybe you can get it specifically as well?", "author": "havardpe", "createdAt": "2020-03-16T15:03:55Z", "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index.h", "diffHunk": "@@ -101,6 +101,11 @@ class HnswIndex : public NearestNeighborIndex {\n     LevelArrayRef get_level_array(uint32_t docid) const;\n     LinkArrayRef get_link_array(uint32_t docid, uint32_t level) const;\n     void set_link_array(uint32_t docid, uint32_t level, const LinkArrayRef& links);\n+    void add_link_to(uint32_t docid, uint32_t level, const LinkArrayRef& old_links, uint32_t new_link) {\n+        LinkArray new_links(old_links.begin(), old_links.end());\n+        new_links.push_back(new_link);\n+        set_link_array(docid, level, new_links);", "originalCommit": "1a217c1590afc4f5a1f8ea4b9cf72eb71c7404b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1cb87fd70dcffd3d9549f21988dec6ca96670548", "url": "https://github.com/vespa-engine/vespa/commit/1cb87fd70dcffd3d9549f21988dec6ca96670548", "message": "update unit test", "committedDate": "2020-03-16T15:35:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNDQ1NA==", "url": "https://github.com/vespa-engine/vespa/pull/12584#discussion_r393514454", "bodyText": "Consider using auto.", "author": "geirst", "createdAt": "2020-03-17T08:33:51Z", "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index.cpp", "diffHunk": "@@ -334,6 +346,37 @@ HnswIndex::add_document(uint32_t docid)\n     }\n }\n \n+void\n+HnswIndex::mutual_reconnect(const LinkArrayRef &cluster, uint32_t level)\n+{\n+    std::vector<PairDist> pairs;\n+    for (uint32_t i = 0; i + 1 < cluster.size(); ++i) {\n+        uint32_t n_id_1 = cluster[i];\n+        LinkArrayRef n_list_1 = get_link_array(n_id_1, level);\n+        for (uint32_t j = i + 1; j < cluster.size(); ++j) {\n+            uint32_t n_id_2 = cluster[j];\n+            if (has_link_to(n_list_1, n_id_2)) continue;\n+            pairs.emplace_back(n_id_1, n_id_2, calc_distance(n_id_1, n_id_2));\n+        }\n+    }\n+    std::sort(pairs.begin(), pairs.end());\n+    for (const PairDist & pair : pairs) {", "originalCommit": "f1276559667e86787fab42a85617fc16a6a25593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjE2Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12584#discussion_r393516166", "bodyText": "Prefer multi-line with brackets instead of one-line if statements.", "author": "geirst", "createdAt": "2020-03-17T08:37:16Z", "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index.cpp", "diffHunk": "@@ -334,6 +346,37 @@ HnswIndex::add_document(uint32_t docid)\n     }\n }\n \n+void\n+HnswIndex::mutual_reconnect(const LinkArrayRef &cluster, uint32_t level)\n+{\n+    std::vector<PairDist> pairs;\n+    for (uint32_t i = 0; i + 1 < cluster.size(); ++i) {\n+        uint32_t n_id_1 = cluster[i];\n+        LinkArrayRef n_list_1 = get_link_array(n_id_1, level);\n+        for (uint32_t j = i + 1; j < cluster.size(); ++j) {\n+            uint32_t n_id_2 = cluster[j];\n+            if (has_link_to(n_list_1, n_id_2)) continue;", "originalCommit": "f1276559667e86787fab42a85617fc16a6a25593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}