{"pr_number": 12806, "pr_title": "Add more fine grained pecentiles add 98, 99.5,99.6, 99.7, 99.8, 99.9", "pr_createdAt": "2020-04-02T12:06:22Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12806", "timeline": [{"oid": "63eac4550cb4ebc15816f79fa052e6416821e68b", "url": "https://github.com/vespa-engine/vespa/commit/63eac4550cb4ebc15816f79fa052e6416821e68b", "message": "Add more fine grained pecentiles add 98, 99.5,99.6, 99.7, 99.8, 99.9", "committedDate": "2020-04-02T12:05:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NzkyMw==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402297923", "bodyText": "you need to check the result of the percentile calculation against the sampled data to see if it is approximate, not the input parameter of the percentile calculation...", "author": "havardpe", "createdAt": "2020-04-02T13:07:34Z", "path": "fbench/src/fbench/fbench.cpp", "diffHunk": "@@ -250,24 +243,24 @@ FBench::PrintSummary()\n     printf(\"minimum response time:  %8.2f ms\\n\", status._minTime);\n     printf(\"maximum response time:  %8.2f ms\\n\", status._maxTime);\n     printf(\"average response time:  %8.2f ms\\n\", status.GetAverage());\n-    if (p25 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"25 percentile:          %8.2f ms (approx)\\n\", p25);\n-    else         printf(\"25 percentile:          %8.2f ms\\n\", p25);\n-    if (p50 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"50 percentile:          %8.2f ms (approx)\\n\", p50);\n-    else         printf(\"50 percentile:          %8.2f ms\\n\", p50);\n-    if (p75 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"75 percentile:          %8.2f ms (approx)\\n\", p75);\n-    else         printf(\"75 percentile:          %8.2f ms\\n\", p75);\n-    if (p90 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"90 percentile:          %8.2f ms (approx)\\n\", p90);\n-    else         printf(\"90 percentile:          %8.2f ms\\n\", p90);\n-    if (p95 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"95 percentile:          %8.2f ms (approx)\\n\", p95);\n-    else         printf(\"95 percentile:          %8.2f ms\\n\", p95);\n-    if (p99 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"99 percentile:          %8.2f ms (approx)\\n\", p99);\n-    else         printf(\"99 percentile:          %8.2f ms\\n\", p99);\n+\n+    for (double percentile : {25.0, 50.0, 75.0, 90.0, 98.0, 99.0, 99.5, 99.6, 99.7, 99.8, 99.9}) {\n+        if (percentile <= 99.0) {\n+            //Backwards compatible printing\n+            if (percentile > (status._timetable.size() / status._timetableResolution - 1)) {", "originalCommit": "63eac4550cb4ebc15816f79fa052e6416821e68b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTg3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402355872", "bodyText": "Good catch, fixed", "author": "baldersheim", "createdAt": "2020-04-02T14:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NzkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5ODQ2Mw==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402298463", "bodyText": "factoring out the formatting of the percentile number would probably be useful here...", "author": "havardpe", "createdAt": "2020-04-02T13:08:24Z", "path": "fbench/src/fbench/fbench.cpp", "diffHunk": "@@ -250,24 +243,24 @@ FBench::PrintSummary()\n     printf(\"minimum response time:  %8.2f ms\\n\", status._minTime);\n     printf(\"maximum response time:  %8.2f ms\\n\", status._maxTime);\n     printf(\"average response time:  %8.2f ms\\n\", status.GetAverage());\n-    if (p25 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"25 percentile:          %8.2f ms (approx)\\n\", p25);\n-    else         printf(\"25 percentile:          %8.2f ms\\n\", p25);\n-    if (p50 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"50 percentile:          %8.2f ms (approx)\\n\", p50);\n-    else         printf(\"50 percentile:          %8.2f ms\\n\", p50);\n-    if (p75 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"75 percentile:          %8.2f ms (approx)\\n\", p75);\n-    else         printf(\"75 percentile:          %8.2f ms\\n\", p75);\n-    if (p90 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"90 percentile:          %8.2f ms (approx)\\n\", p90);\n-    else         printf(\"90 percentile:          %8.2f ms\\n\", p90);\n-    if (p95 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"95 percentile:          %8.2f ms (approx)\\n\", p95);\n-    else         printf(\"95 percentile:          %8.2f ms\\n\", p95);\n-    if (p99 > status._timetable.size() / status._timetableResolution - 1)\n-        printf(\"99 percentile:          %8.2f ms (approx)\\n\", p99);\n-    else         printf(\"99 percentile:          %8.2f ms\\n\", p99);\n+\n+    for (double percentile : {25.0, 50.0, 75.0, 90.0, 98.0, 99.0, 99.5, 99.6, 99.7, 99.8, 99.9}) {\n+        if (percentile <= 99.0) {\n+            //Backwards compatible printing\n+            if (percentile > (status._timetable.size() / status._timetableResolution - 1)) {\n+                printf(\"%2d percentile:          %8.2f ms (approx)\\n\", int(percentile), status.GetPercentile(percentile));\n+            } else {\n+                printf(\"%2d percentile:          %8.2f ms\\n\", int(percentile), status.GetPercentile(percentile));\n+            }\n+        } else {\n+            if (percentile > (status._timetable.size() / status._timetableResolution - 1)) {\n+                printf(\"%2.1f percentile:          %8.2f ms (approx)\\n\", percentile, status.GetPercentile(percentile));", "originalCommit": "63eac4550cb4ebc15816f79fa052e6416821e68b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjY2MA==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402356660", "bodyText": "Factored out both optional (approx) and formating of percentile.", "author": "baldersheim", "createdAt": "2020-04-02T14:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5ODQ2Mw=="}], "type": "inlineReview"}, {"oid": "65c0297240442a512be937c7a831fb07abb8ef6e", "url": "https://github.com/vespa-engine/vespa/commit/65c0297240442a512be937c7a831fb07abb8ef6e", "message": "Factor out to make it less verbose.", "committedDate": "2020-04-02T14:26:12Z", "type": "commit"}, {"oid": "953a6678dc5804ce09f98d0995db3987f1f816e2", "url": "https://github.com/vespa-engine/vespa/commit/953a6678dc5804ce09f98d0995db3987f1f816e2", "message": "Improve alignment.", "committedDate": "2020-04-02T15:08:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMzg5NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402403895", "bodyText": "I think this will add 2 extra spaces in the 'backwards' case...", "author": "havardpe", "createdAt": "2020-04-02T15:27:47Z", "path": "fbench/src/fbench/fbench.cpp", "diffHunk": "@@ -200,6 +200,28 @@ FBench::StopClients()\n     printf(\"\\nClients Joined.\\n\");\n }\n \n+namespace {\n+\n+const char *\n+approx(double latency, const ClientStatus & status) {\n+    return (latency > (status._timetable.size() / status._timetableResolution - 1))\n+           ? \"ms (approx)\"\n+           : \"ms\";\n+}\n+\n+std::string\n+fmtPercentile(double percentile) {\n+    char buf[32];\n+    if (percentile <= 99.0) {\n+        snprintf(buf, sizeof(buf), \"%2d  \", int(percentile));", "originalCommit": "953a6678dc5804ce09f98d0995db3987f1f816e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1OTcxNg==", "url": "https://github.com/vespa-engine/vespa/pull/12806#discussion_r402459716", "bodyText": "Yes, that is fine. I just wanted to avid decimals  in the old percentiles", "author": "baldersheim", "createdAt": "2020-04-02T16:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMzg5NQ=="}], "type": "inlineReview"}]}