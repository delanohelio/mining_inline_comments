{"pr_number": 11619, "pr_title": "Balder/add executeinfo", "pr_createdAt": "2020-01-01T17:17:07Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11619", "timeline": [{"oid": "7d7b46f012b4f9bbd416f17a945204acc28c6ae5", "url": "https://github.com/vespa-engine/vespa/commit/7d7b46f012b4f9bbd416f17a945204acc28c6ae5", "message": "Add ExecutionInfo to propagate more information than just strictness to fetchPostings.\nThe estimated hitrate that each iterator will will enable smarter query evaluation.\nEspecially will it be possible to figure out if static up front cost can be avoided.", "committedDate": "2019-12-31T15:58:39Z", "type": "commit"}, {"oid": "064f0df79bf38da6e9c372096e25a818c2561ae3", "url": "https://github.com/vespa-engine/vespa/commit/064f0df79bf38da6e9c372096e25a818c2561ae3", "message": "Reduce code visibility.", "committedDate": "2020-01-01T17:12:26Z", "type": "commit"}, {"oid": "1ba19f37f37d22262b32da29372e94f87f3a97f5", "url": "https://github.com/vespa-engine/vespa/commit/1ba19f37f37d22262b32da29372e94f87f3a97f5", "message": "Add test for AndBlueprint.fetchPostings.", "committedDate": "2020-01-01T17:12:44Z", "type": "commit"}, {"oid": "ce77fff993f6bab999bcf70cdcc255dbeb161d19", "url": "https://github.com/vespa-engine/vespa/commit/ce77fff993f6bab999bcf70cdcc255dbeb161d19", "message": "Implement AndBlueprint.fetchPostings", "committedDate": "2020-01-01T17:12:45Z", "type": "commit"}, {"oid": "4f5be349db2d4bef3f53be62fd7cbee9f8a8b9cd", "url": "https://github.com/vespa-engine/vespa/commit/4f5be349db2d4bef3f53be62fd7cbee9f8a8b9cd", "message": "Consider estimated hitrate.", "committedDate": "2020-01-01T21:41:30Z", "type": "commit"}, {"oid": "882f1e57e3b48d53be0806f94bcb013be26cd576", "url": "https://github.com/vespa-engine/vespa/commit/882f1e57e3b48d53be0806f94bcb013be26cd576", "message": "Add definition to avoid missing symbols at -O0", "committedDate": "2020-01-01T22:23:32Z", "type": "commit"}, {"oid": "34191ac5578bb8d1fb487382a831d6901644db8d", "url": "https://github.com/vespa-engine/vespa/commit/34191ac5578bb8d1fb487382a831d6901644db8d", "message": "Specify fast search explicit in test", "committedDate": "2020-01-02T09:38:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDMxMw==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362474313", "bodyText": "since strictness is handled externally, maybe this function should only be about hit ratios?", "author": "havardpe", "createdAt": "2020-01-02T13:35:32Z", "path": "searchlib/src/vespa/searchlib/queryeval/blueprint.cpp", "diffHunk": "@@ -308,6 +317,13 @@ IntermediateBlueprint::calculateState() const\n     return state;\n }\n \n+ExecuteInfo\n+IntermediateBlueprint::computeNext(const Blueprint & child, const ExecuteInfo & execInfo) const", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYyOTQ1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362629456", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-02T21:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDg2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362474862", "bodyText": "minor consistency issue: asking if a non-existing child should inherit strictness. (not an actual issue in foreseeable future)", "author": "havardpe", "createdAt": "2020-01-02T13:37:25Z", "path": "searchlib/src/vespa/searchlib/queryeval/blueprint.cpp", "diffHunk": "@@ -403,11 +419,13 @@ IntermediateBlueprint::visitMembers(vespalib::ObjectVisitor &visitor) const\n }\n \n void\n-IntermediateBlueprint::fetchPostings(bool strict)\n+IntermediateBlueprint::fetchPostings(const ExecuteInfo &execInfo)\n {\n+    ExecuteInfo childInfo = ExecuteInfo(execInfo.isStrict() && inheritStrict(0), execInfo.hitRate());\n     for (size_t i = 0; i < _children.size(); ++i) {\n-        bool strictChild = (strict && inheritStrict(i));\n-        _children[i]->fetchPostings(strictChild);\n+        Blueprint & child = *_children[i];\n+        child.fetchPostings(childInfo);\n+        childInfo = computeNext(child, ExecuteInfo(execInfo.isStrict() && inheritStrict(i+1), childInfo.hitRate()));", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NTQ5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362475497", "bodyText": "Maybe the FALSE one should actually be false.", "author": "havardpe", "createdAt": "2020-01-02T13:39:45Z", "path": "searchlib/src/vespa/searchlib/queryeval/executeinfo.cpp", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"executeinfo.h\"\n+\n+namespace search::queryeval {\n+\n+const ExecuteInfo ExecuteInfo::TRUE(true, 1.0);\n+const ExecuteInfo ExecuteInfo::FALSE(true, 1.0);", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyOTUxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362529519", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-02T16:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NTQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3Njc5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362476793", "bodyText": "consider using 0.0 as default (is this only needed by tests?)", "author": "havardpe", "createdAt": "2020-01-02T13:43:59Z", "path": "searchlib/src/vespa/searchlib/queryeval/executeinfo.h", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2019 Oath inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace search::queryeval {\n+\n+    /**\n+     * Holds information about how query will be executed and how large part of corpus will pass through.\n+     * @author baldersheim\n+     */\n+class ExecuteInfo {\n+public:\n+    ExecuteInfo() : ExecuteInfo(false, 1.0) { }", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUzMjI3MQ==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362532271", "bodyText": "Why 0.0 ? 1.0 sounds like a better(more conservative) value.\nOnly used in tests.", "author": "baldersheim", "createdAt": "2020-01-02T16:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3Njc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1ODkxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362758915", "bodyText": "reason for comment: false is the default for bool and 0.0 is the default for double.\nI think it would be better to just remove it if possible.", "author": "havardpe", "createdAt": "2020-01-03T10:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3Njc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3Njk1MA==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362476950", "bodyText": "consider hiding this if the create function is preferred.", "author": "havardpe", "createdAt": "2020-01-02T13:44:33Z", "path": "searchlib/src/vespa/searchlib/queryeval/executeinfo.h", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2019 Oath inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace search::queryeval {\n+\n+    /**\n+     * Holds information about how query will be executed and how large part of corpus will pass through.\n+     * @author baldersheim\n+     */\n+class ExecuteInfo {\n+public:\n+    ExecuteInfo() : ExecuteInfo(false, 1.0) { }\n+    ExecuteInfo(bool strict, double hitRate_in)", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyOTc0OA==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362529748", "bodyText": "Hidden", "author": "baldersheim", "createdAt": "2020-01-02T16:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3Njk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NzkzOA==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362477938", "bodyText": "the blueprint already has a function called hit_ratio that does this conversion (estimate to ratio)", "author": "havardpe", "createdAt": "2020-01-02T13:47:56Z", "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "diffHunk": "@@ -243,6 +243,11 @@ AndBlueprint::createIntermediateSearch(const MultiSearch::Children &subSearches,\n     return SearchIterator::UP(search);\n }\n \n+ExecuteInfo\n+AndBlueprint::computeNext(const Blueprint & child, const ExecuteInfo &execInfo) const {\n+    return ExecuteInfo(execInfo.isStrict(), (execInfo.hitRate()*child.getState().estimate().estHits)/get_docid_limit());", "originalCommit": "34191ac5578bb8d1fb487382a831d6901644db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUzMjM5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/11619#discussion_r362532397", "bodyText": "Done, using that.", "author": "baldersheim", "createdAt": "2020-01-02T16:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NzkzOA=="}], "type": "inlineReview"}, {"oid": "bbd9f10968f929ce4b1fb81ffb519ae4d8bf6973", "url": "https://github.com/vespa-engine/vespa/commit/bbd9f10968f929ce4b1fb81ffb519ae4d8bf6973", "message": "Follow up review comments.", "committedDate": "2020-01-02T19:48:13Z", "type": "commit"}]}