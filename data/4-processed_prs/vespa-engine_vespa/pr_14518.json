{"pr_number": 14518, "pr_title": "instruction-level generic join", "pr_createdAt": "2020-09-24T07:43:57Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14518", "timeline": [{"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613", "url": "https://github.com/vespa-engine/vespa/commit/f43b36c544f2a0b40f5300a85f3ba543d6621613", "message": "instruction-level generic join\n\nalso move some stuff out of simple_value", "committedDate": "2020-09-24T07:42:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494120889", "bodyText": "There is no \"JoinPlan\".", "author": "arnej27959", "createdAt": "2020-09-24T08:09:54Z", "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;", "originalCommit": "f43b36c544f2a0b40f5300a85f3ba543d6621613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MDQ0Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494180442", "bodyText": "it got renamed to JoinParam and made local, I will clean it up", "author": "havardpe", "createdAt": "2020-09-24T09:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjUyMw==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494122523", "bodyText": "ending three nested namespaces like this feels confusing to me.\nI suggest something like:\nnamespace vespalib { class Stash; }\n\nnamespace vespalib::eval::tensor_instruction {\n... rest of file ...\n}", "author": "arnej27959", "createdAt": "2020-09-24T08:12:34Z", "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;\n+\n+namespace tensor_instruction {\n+\n+using join_fun_t = double (*)(double, double);\n+\n+InterpretedFunction::Instruction make_join(const ValueType &lhs_type, const ValueType &rhs_type, join_fun_t function,\n+                                           const ValueBuilderFactory &factory, Stash &stash);\n+\n+}\n+}", "originalCommit": "f43b36c544f2a0b40f5300a85f3ba543d6621613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MDYwNw==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494180607", "bodyText": "agree", "author": "havardpe", "createdAt": "2020-09-24T09:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzUwMg==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494123502", "bodyText": "is it possible to move the various execute() implementations to the .cpp file? or would that lead to less inlining opportunities?", "author": "arnej27959", "createdAt": "2020-09-24T08:14:11Z", "path": "eval/src/vespa/eval/eval/tensor_plans.h", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value_type.h\"\n+#include <vespa/vespalib/stllike/string.h>\n+#include <vector>\n+\n+namespace vespalib::eval {\n+\n+class ValueBuilderFactory;\n+\n+//-----------------------------------------------------------------------------\n+\n+/**\n+ * Plan for how to traverse two partially overlapping dense subspaces\n+ * in parallel, identifying all matching cell index combinations, in\n+ * the exact order the joined cells will be stored in the result. The\n+ * plan can be made up-front during tensor function compilation.\n+ **/\n+struct DenseJoinPlan {\n+    size_t lhs_size;\n+    size_t rhs_size;\n+    size_t out_size;\n+    std::vector<size_t> loop_cnt;\n+    std::vector<size_t> lhs_stride;\n+    std::vector<size_t> rhs_stride;\n+    DenseJoinPlan(const ValueType &lhs_type, const ValueType &rhs_type);\n+    ~DenseJoinPlan();\n+    template <typename F> void execute(size_t lhs, size_t rhs, F &&f) const {", "originalCommit": "f43b36c544f2a0b40f5300a85f3ba543d6621613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3OTY4OA==", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494179688", "bodyText": "I think we want it in a separate header, for cross-use in different plans. We do not want to call the function via pointer, so I think we should avoid having it in a cpp file.", "author": "havardpe", "createdAt": "2020-09-24T09:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzUwMg=="}], "type": "inlineReview"}]}