{"pr_number": 13461, "pr_title": "As the source bit vector might change in a different thread,", "pr_createdAt": "2020-06-02T18:09:38Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13461", "timeline": [{"oid": "b38a099eb79efa9cf1fa4c9fce68a4d7e3d423b5", "url": "https://github.com/vespa-engine/vespa/commit/b38a099eb79efa9cf1fa4c9fce68a4d7e3d423b5", "message": "As the source bit vector might change in a different thread,\nensure that we sample size once to avoid incosistent read outs during copy.", "committedDate": "2020-06-02T18:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/13461#discussion_r434431624", "bodyText": "If size and capacity is reduced at the same time on the underlying bitvector then capacity can become less than size here.", "author": "toregge", "createdAt": "2020-06-03T09:25:54Z", "path": "searchlib/src/vespa/searchlib/common/allocatedbitvector.cpp", "diffHunk": "@@ -17,6 +17,21 @@ size_t computeCapacity(size_t capacity, size_t allocatedBytes) {\n     return possibleCapacity;\n }\n \n+// This is to ensure that we only read size and capacity once during copy\n+// to ensure that they do not change unexpectedly under our feet due to resizing in different thread.\n+std::pair<BitVector::Index, BitVector::Index>\n+extract_size_size(const BitVector & bv) {\n+    BitVector::Index size = bv.size();\n+    return std::pair<BitVector::Index, BitVector::Index>(size, size);\n+}\n+\n+std::pair<BitVector::Index, BitVector::Index>\n+extract_size_capacity(const AllocatedBitVector & bv) {\n+    BitVector::Index size = bv.size();\n+    BitVector::Index capacity = bv.capacity();\n+    return std::pair<BitVector::Index, BitVector::Index>(size, capacity);", "originalCommit": "b38a099eb79efa9cf1fa4c9fce68a4d7e3d423b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NzI2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13461#discussion_r434447269", "bodyText": "capacity is updated before size when growing.\nHowever upon shrink that will not be safe.\nSo I guess a loop and a comment is needed here.", "author": "baldersheim", "createdAt": "2020-06-03T09:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MDE2Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13461#discussion_r434450163", "bodyText": "Fixed, @toregge PTAL", "author": "baldersheim", "createdAt": "2020-06-03T09:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTYyNA=="}], "type": "inlineReview"}, {"oid": "4babc05819a7bdf06a1082e238ad0751fbeacf0e", "url": "https://github.com/vespa-engine/vespa/commit/4babc05819a7bdf06a1082e238ad0751fbeacf0e", "message": "Protect against inconsistency when sampling size and capacity.", "committedDate": "2020-06-03T09:55:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1NDkzNw==", "url": "https://github.com/vespa-engine/vespa/pull/13461#discussion_r434454937", "bodyText": "both size() and capacity() are very small inlined methods.  Thus the compiler can just cache the result in a register. You need to add a std::atomic_thread_fence or replace the loop with size = std::min(size, capacity);", "author": "toregge", "createdAt": "2020-06-03T10:04:52Z", "path": "searchlib/src/vespa/searchlib/common/allocatedbitvector.cpp", "diffHunk": "@@ -29,6 +29,12 @@ std::pair<BitVector::Index, BitVector::Index>\n extract_size_capacity(const AllocatedBitVector & bv) {\n     BitVector::Index size = bv.size();\n     BitVector::Index capacity = bv.capacity();\n+    while (capacity < size) {\n+        // Since size and capacity might be changed in another thread we need\n+        // this fallback to avoid inconsistency during shrink.\n+        size = bv.size();\n+        capacity = bv.capacity();\n+    }", "originalCommit": "4babc05819a7bdf06a1082e238ad0751fbeacf0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1OTg0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13461#discussion_r434459843", "bodyText": "Added sequential consistency.", "author": "baldersheim", "createdAt": "2020-06-03T10:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1NDkzNw=="}], "type": "inlineReview"}, {"oid": "97e6990f31f018ca98d77d27384f60cc6fc30b79", "url": "https://github.com/vespa-engine/vespa/commit/97e6990f31f018ca98d77d27384f60cc6fc30b79", "message": "Ensure sequential consistency.", "committedDate": "2020-06-03T10:13:12Z", "type": "commit"}]}