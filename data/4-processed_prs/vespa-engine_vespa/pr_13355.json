{"pr_number": 13355, "pr_title": "Increase stack size when using address sanitizer.", "pr_createdAt": "2020-05-24T18:02:47Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13355", "timeline": [{"oid": "afdde1f2e81c14fc6c0b110997c60bf491bf23b1", "url": "https://github.com/vespa-engine/vespa/commit/afdde1f2e81c14fc6c0b110997c60bf491bf23b1", "message": "Increase stack size when using address sanitizer.", "committedDate": "2020-05-24T17:58:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjE5Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13355#discussion_r429772196", "bodyText": "What is it that demands so large stack size ?\nIs it recursion or large stack allocations ?\nWe do not use that in production anyway.", "author": "baldersheim", "createdAt": "2020-05-25T07:23:50Z", "path": "searchlib/src/tests/query/streaming_query_large_test.cpp", "diffHunk": "@@ -27,7 +27,11 @@ void setMaxStackSize(rlim_t maxStackSize)\n // a stack overflow if the stack usage increases.\n TEST(\"testveryLongQueryResultingInBug6850778\") {\n     const uint32_t NUMITEMS=20000;\n+#ifdef __SANITIZE_ADDRESS__\n+    setMaxStackSize(12 * 1024 * 1024);\n+#else\n     setMaxStackSize(4 * 1024 * 1024);", "originalCommit": "afdde1f2e81c14fc6c0b110997c60bf491bf23b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NjkzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13355#discussion_r429796931", "bodyText": "AddressSanitizer will instrument stack allocations, presumably to have sentinel zones for catching out of bounds writes. According to https://clang.llvm.org/docs/AddressSanitizer.html \"AddressSanitizer uses more stack memory. We have seen up to 3x increase.\"", "author": "vekterli", "createdAt": "2020-05-25T08:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjE5Ng=="}], "type": "inlineReview"}]}