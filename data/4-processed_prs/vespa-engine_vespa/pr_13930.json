{"pr_number": 13930, "pr_title": "Bjorncs/validate binding patterns", "pr_createdAt": "2020-07-21T13:16:06Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13930", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMTkyMA==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r469121920", "bodyText": "I suggest to use an enum instead, e.g. Type with values USER and MODEL (or SYSTEM). It usually improves the quality of code using it, and can easily be extended with more values later. Too many times have we used a flag and later wanted to add a third, or more, values.\nAlternatively, perhaps you could create two subclasses UserBindingPattern and SystemBindingPattern, if the two need separate handling anyway. The method names for the static factory methods also indicate that there is something fishy with the modelling here.", "author": "gjoranv", "createdAt": "2020-08-12T09:16:53Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/component/BindingPattern.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.model.container.component;\n+\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * URI binding pattern used by filter and handler bindings.\n+ *\n+ * There are two types of binding; user generated and model generated bindings.\n+ * - User generated bindings are bindings which are constructed from directly from 'binding' elements from services.xml\n+ * - Model generated bindings are binding which are implicitly constructed by the model, e.g built-in handlers.\n+ *\n+ * @author bjorncs\n+ */\n+public class BindingPattern implements Comparable<BindingPattern> {\n+\n+    private static final Pattern BINDING_PATTERN =\n+            Pattern.compile(\"([^:]+)://([^:/]+)(:((\\\\*)|([0-9]+)))?(/.*)\", Pattern.UNICODE_CASE | Pattern.CANON_EQ);\n+\n+    private final String scheme;\n+    private final String host;\n+    private final String port;\n+    private final String path;\n+    private final boolean isUserGenerated;", "originalCommit": "374987be381aeeca38d77325549b68bdb4118f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MTMzNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r471451335", "bodyText": "The boolean variable and the verbose static factory method names are indeed suboptimal. I like your proposal with the \"user\" vs \"system\" distinction (instead of the confusing \"model\" prefix). I prefer the class hierarchy solution given that the \"type\"/\"source\" aspect is a fundamental for handling of bindings in the model (which I think it is).", "author": "bjorncs", "createdAt": "2020-08-17T12:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMTkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyNzkxMg==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r469127912", "bodyText": "Suggest to say: \"Path must have '/' as prefix:\"", "author": "gjoranv", "createdAt": "2020-08-12T09:27:08Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/component/BindingPattern.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.model.container.component;\n+\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * URI binding pattern used by filter and handler bindings.\n+ *\n+ * There are two types of binding; user generated and model generated bindings.\n+ * - User generated bindings are bindings which are constructed from directly from 'binding' elements from services.xml\n+ * - Model generated bindings are binding which are implicitly constructed by the model, e.g built-in handlers.\n+ *\n+ * @author bjorncs\n+ */\n+public class BindingPattern implements Comparable<BindingPattern> {\n+\n+    private static final Pattern BINDING_PATTERN =\n+            Pattern.compile(\"([^:]+)://([^:/]+)(:((\\\\*)|([0-9]+)))?(/.*)\", Pattern.UNICODE_CASE | Pattern.CANON_EQ);\n+\n+    private final String scheme;\n+    private final String host;\n+    private final String port;\n+    private final String path;\n+    private final boolean isUserGenerated;\n+\n+    private BindingPattern(\n+            String scheme,\n+            String host,\n+            String port,\n+            String path,\n+            boolean isUserGenerated) {\n+        this.scheme = Objects.requireNonNull(scheme, \"Scheme in binding must be specified\");\n+        this.host = Objects.requireNonNull(host, \"Host must be specified\");\n+        this.port = port;\n+        this.path = validatePath(path);\n+        this.isUserGenerated = isUserGenerated;\n+    }\n+\n+    private static String validatePath(String path) {\n+        Objects.requireNonNull(path, \"Path must be specified\");\n+        if (!path.startsWith(\"/\")) throw new IllegalArgumentException(\"Path has not '/' as prefix: \" + path);", "originalCommit": "374987be381aeeca38d77325549b68bdb4118f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0OTgyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r471449821", "bodyText": "I'll change it to your proposal.", "author": "bjorncs", "createdAt": "2020-08-17T12:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyNzkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3MTY0OA==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r469171648", "bodyText": "Why is this better than the above?", "author": "gjoranv", "createdAt": "2020-08-12T10:48:48Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/builder/xml/dom/DomHandlerBuilder.java", "diffHunk": "@@ -27,11 +28,14 @@\n  */\n public class DomHandlerBuilder extends VespaDomBuilder.DomConfigProducerBuilder<Handler> {\n \n-    private static final Set<String> reservedBindings = Set.of(METRICS_V2_HANDLER_BINDING_1,\n-                                                               METRICS_V2_HANDLER_BINDING_2,\n-                                                               STATE_HANDLER_BINDING_1,\n-                                                               STATE_HANDLER_BINDING_2,\n-                                                               VIP_HANDLER_BINDING);\n+    private static final Set<BindingPattern> reservedBindings =", "originalCommit": "ab28e4eb6e67d13dce275d9d652fa833834ee0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0NTgxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r471445815", "bodyText": "That's the indentation style I prefer. Its main benefit is that the method arguments does not need reindentation if the column position of first argument is changed (e.g variable name/type changed, field modifier is added/removed)", "author": "bjorncs", "createdAt": "2020-08-17T12:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3MTY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTk4NA==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r471459984", "bodyText": "In my experience IntelliJ re-indents arguments on the following lines automatically, at least when renaming. But it's fine.", "author": "gjoranv", "createdAt": "2020-08-17T12:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3MTY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4NzA3MA==", "url": "https://github.com/vespa-engine/vespa/pull/13930#discussion_r469187070", "bodyText": "These method names are rather clunky. Perhaps it would be better to have just two methods that take the type as an extra argument?\nfromPattern(String pattern, Type type)\nfromHttpPath(String path, Type type)", "author": "gjoranv", "createdAt": "2020-08-12T11:22:10Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/component/BindingPattern.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.model.container.component;\n+\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * URI binding pattern used by filter and handler bindings.\n+ *\n+ * There are two types of binding; user generated and model generated bindings.\n+ * - User generated bindings are bindings which are constructed from directly from 'binding' elements from services.xml\n+ * - Model generated bindings are binding which are implicitly constructed by the model, e.g built-in handlers.\n+ *\n+ * @author bjorncs\n+ */\n+public class BindingPattern implements Comparable<BindingPattern> {\n+\n+    private static final Pattern BINDING_PATTERN =\n+            Pattern.compile(\"([^:]+)://([^:/]+)(:((\\\\*)|([0-9]+)))?(/.*)\", Pattern.UNICODE_CASE | Pattern.CANON_EQ);\n+\n+    private final String scheme;\n+    private final String host;\n+    private final String port;\n+    private final String path;\n+    private final boolean isUserGenerated;\n+\n+    private BindingPattern(\n+            String scheme,\n+            String host,\n+            String port,\n+            String path,\n+            boolean isUserGenerated) {\n+        this.scheme = Objects.requireNonNull(scheme, \"Scheme in binding must be specified\");\n+        this.host = Objects.requireNonNull(host, \"Host must be specified\");\n+        this.port = port;\n+        this.path = validatePath(path);\n+        this.isUserGenerated = isUserGenerated;\n+    }\n+\n+    private static String validatePath(String path) {\n+        Objects.requireNonNull(path, \"Path must be specified\");\n+        if (!path.startsWith(\"/\")) throw new IllegalArgumentException(\"Path has not '/' as prefix: \" + path);\n+        return path;\n+    }\n+\n+    public static BindingPattern createUserGeneratedFromPattern(String pattern) {\n+        return createFromBindingString(pattern, true);\n+    }\n+\n+    public static BindingPattern createUserGeneratedFromHttpPath(String path) {\n+        return new BindingPattern(\"http\", \"*\", null, path, true);\n+    }\n+\n+    public static BindingPattern createModelGeneratedFromPattern(String pattern) {\n+        return createFromBindingString(pattern, false);\n+    }\n+\n+    public static BindingPattern createModelGeneratedFromHttpPath(String path) {\n+        return new BindingPattern(\"http\", \"*\", null, path, false);\n+    }", "originalCommit": "374987be381aeeca38d77325549b68bdb4118f11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74b5e43ba17c43db561b24c798728c0a20e10057", "url": "https://github.com/vespa-engine/vespa/commit/74b5e43ba17c43db561b24c798728c0a20e10057", "message": "Introduce type for binding patterns", "committedDate": "2020-08-17T14:59:29Z", "type": "commit"}, {"oid": "d66778f6a74fe71970a5470cb139b02e752ec516", "url": "https://github.com/vespa-engine/vespa/commit/d66778f6a74fe71970a5470cb139b02e752ec516", "message": "Rename 'Binding' -> 'FilterBinding'", "committedDate": "2020-08-17T15:01:29Z", "type": "commit"}, {"oid": "4b4dfeb835e43b852858cb128e512219270d7f93", "url": "https://github.com/vespa-engine/vespa/commit/4b4dfeb835e43b852858cb128e512219270d7f93", "message": "Remove unused method", "committedDate": "2020-08-17T15:01:32Z", "type": "commit"}, {"oid": "ead8d2122f052436f5d38771df5db68483e10989", "url": "https://github.com/vespa-engine/vespa/commit/ead8d2122f052436f5d38771df5db68483e10989", "message": "Use BindingPattern to represent all types of binding in config model", "committedDate": "2020-08-17T15:04:17Z", "type": "commit"}, {"oid": "9cd0d218e9528c24cf5ac2a521e37211aa6aeb1f", "url": "https://github.com/vespa-engine/vespa/commit/9cd0d218e9528c24cf5ac2a521e37211aa6aeb1f", "message": "Restrict uri bindings for hosted applications", "committedDate": "2020-08-17T15:04:19Z", "type": "commit"}, {"oid": "b8b585399b9509a214204fd2450a5d5997dd18e4", "url": "https://github.com/vespa-engine/vespa/commit/b8b585399b9509a214204fd2450a5d5997dd18e4", "message": "Remove logging on https scheme from FilterBinding\n\nThis warning is now produced by UriBindingsValidator", "committedDate": "2020-08-17T15:04:19Z", "type": "commit"}, {"oid": "94f7cec36cb97af2a4be9bdbe087ebe857b53db8", "url": "https://github.com/vespa-engine/vespa/commit/94f7cec36cb97af2a4be9bdbe087ebe857b53db8", "message": "Allow 'https' in scheme", "committedDate": "2020-08-17T15:04:19Z", "type": "commit"}, {"oid": "efd4542b717f01798aac9dab6dc84d3f6862b9cb", "url": "https://github.com/vespa-engine/vespa/commit/efd4542b717f01798aac9dab6dc84d3f6862b9cb", "message": "Model user-generated and non user-generated bindings as separate sub-classes", "committedDate": "2020-08-17T15:04:19Z", "type": "commit"}, {"oid": "efd4542b717f01798aac9dab6dc84d3f6862b9cb", "url": "https://github.com/vespa-engine/vespa/commit/efd4542b717f01798aac9dab6dc84d3f6862b9cb", "message": "Model user-generated and non user-generated bindings as separate sub-classes", "committedDate": "2020-08-17T15:04:19Z", "type": "forcePushed"}, {"oid": "5d8292d5cad64124c2cd889fa393a973c1d98d73", "url": "https://github.com/vespa-engine/vespa/commit/5d8292d5cad64124c2cd889fa393a973c1d98d73", "message": "Improve error message", "committedDate": "2020-08-17T15:08:16Z", "type": "commit"}]}