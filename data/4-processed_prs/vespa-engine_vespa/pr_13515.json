{"pr_number": 13515, "pr_title": "Add support for new/delete with alignment that came along in c++17 wi\u2026", "pr_createdAt": "2020-06-09T08:02:19Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13515", "timeline": [{"oid": "6ef440733ef899251be945a1b3c985e76e4a6312", "url": "https://github.com/vespa-engine/vespa/commit/6ef440733ef899251be945a1b3c985e76e4a6312", "message": "Add support for new/delete with alignment that came along in c++17 with gcc 9", "committedDate": "2020-06-09T08:01:03Z", "type": "commit"}, {"oid": "994452c26a88f406fc30056b3616eee79a7da651", "url": "https://github.com/vespa-engine/vespa/commit/994452c26a88f406fc30056b3616eee79a7da651", "message": "Add comment about natural alignment in vespamalloc.", "committedDate": "2020-06-09T08:56:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NTQwNA==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437245404", "bodyText": "As of C++17 you can leave out the message parameter to static_assert and it should just use the expression itself.", "author": "vekterli", "createdAt": "2020-06-09T08:55:02Z", "path": "vespamalloc/src/tests/test1/new_test.cpp", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#include <vespa/vespalib/testkit/testapp.h>\n+#include <vespa/log/log.h>\n+\n+LOG_SETUP(\"new_test\");\n+\n+void cmp(const void *a, const void *b) {\n+    EXPECT_EQUAL(a, b);\n+}\n+void cmp(const void *base, size_t offset, const void *p) {\n+    cmp((static_cast<const char *>(base) + offset), p);\n+}\n+\n+TEST(\"verify new with normal alignment\") {\n+    struct S {\n+        int a;\n+        long b;\n+        int c;\n+    };\n+    static_assert(sizeof(S) == 24, \"sizeof(S) == 16\");", "originalCommit": "6ef440733ef899251be945a1b3c985e76e4a6312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDY1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437284651", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-06-09T09:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NTA1Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437255057", "bodyText": "For these tests, should we additionally check the returned pointer alignment itself? The struct field alignments should be up to the compiler to get right. Might be enough to add a templated checker function that verifies  (uintptr_t(s.get()) % alignof(S)) == 0?", "author": "vekterli", "createdAt": "2020-06-09T09:07:03Z", "path": "vespamalloc/src/tests/test1/new_test.cpp", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#include <vespa/vespalib/testkit/testapp.h>\n+#include <vespa/log/log.h>\n+\n+LOG_SETUP(\"new_test\");\n+\n+void cmp(const void *a, const void *b) {\n+    EXPECT_EQUAL(a, b);\n+}\n+void cmp(const void *base, size_t offset, const void *p) {\n+    cmp((static_cast<const char *>(base) + offset), p);\n+}\n+\n+TEST(\"verify new with normal alignment\") {\n+    struct S {\n+        int a;\n+        long b;\n+        int c;\n+    };\n+    static_assert(sizeof(S) == 24, \"sizeof(S) == 16\");\n+    auto s = std::make_unique<S>();\n+    cmp(s.get(), &s->a);\n+    cmp(s.get(), 8, &s->b);\n+    cmp(s.get(), 16, &s->c);", "originalCommit": "994452c26a88f406fc30056b3616eee79a7da651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NTgwNA==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437285804", "bodyText": "Done, and I also remembered that only vespamalloc is naturally aligned. vespamallocd and vespamallocdst is not as they add preamble and postamble. So they need to be propagated.", "author": "baldersheim", "createdAt": "2020-06-09T09:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NTA1Nw=="}], "type": "inlineReview"}, {"oid": "10d787f8be2bbdf3e8c49999d256c22404bdd5e3", "url": "https://github.com/vespa-engine/vespa/commit/10d787f8be2bbdf3e8c49999d256c22404bdd5e3", "message": "Add test of alignment.", "committedDate": "2020-06-09T09:52:00Z", "type": "commit"}, {"oid": "b3c970b449bec64d0a3f7a91a08a9237400016ef", "url": "https://github.com/vespa-engine/vespa/commit/b3c970b449bec64d0a3f7a91a08a9237400016ef", "message": "Handle alignment in vespamallocd too.", "committedDate": "2020-06-09T11:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MDUyNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437360525", "bodyText": "Both these could be constexpr (though the compiler will do this in practice anyway)", "author": "vekterli", "createdAt": "2020-06-09T12:14:05Z", "path": "vespamalloc/src/vespamalloc/malloc/memblockboundscheck.h", "diffHunk": "@@ -45,6 +59,12 @@ class MemBlockBoundsCheckBaseTBase : public CommonT<5>\n     void verifyFill() const __attribute__((noinline));\n \n     void setSize(size_t sz) { static_cast<uint64_t *>(_ptr)[0] = sz; }\n+    static size_t preambleOverhead(std::align_val_t alignment) {\n+        return std::max(4*sizeof(unsigned), size_t(alignment));\n+    }\n+    static size_t preambleOverhead() {\n+        return 4*sizeof(unsigned);\n+    }", "originalCommit": "b3c970b449bec64d0a3f7a91a08a9237400016ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MTAzMg==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437381032", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-06-09T12:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MDUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MTQ4NA==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437361484", "bodyText": "These could also be constexpr", "author": "vekterli", "createdAt": "2020-06-09T12:15:58Z", "path": "vespamalloc/src/vespamalloc/malloc/memblockboundscheck.h", "diffHunk": "@@ -121,13 +141,23 @@ class MemBlockBoundsCheckBaseT : public MemBlockBoundsCheckBaseTBase\n         }\n         return StackTraceLen;\n     }\n-    static size_t adjustSize(size_t sz)   { return sz + ((4+1)*sizeof(unsigned) + StackTraceLen*sizeof(void *)); }\n-    static size_t unAdjustSize(size_t sz) { return sz - ((4+1)*sizeof(unsigned) + StackTraceLen*sizeof(void *)); }\n+    static size_t adjustSize(size_t sz)   { return sz + overhead(); }\n+    static size_t adjustSize(size_t sz, std::align_val_t alignment)   { return sz + overhead(alignment); }\n+    static size_t unAdjustSize(size_t sz) { return sz - overhead(); }\n     static void dumpInfo(size_t level) __attribute__((noinline));\n     static size_t getMinSizeForAlignment(size_t align, size_t sz) { return sz + align; }\n     void info(FILE * os, unsigned level=0) const __attribute__((noinline));\n \n protected:\n+    static size_t postambleOverhead() {\n+        return sizeof(unsigned) + StackTraceLen*sizeof(void *);\n+    }\n+    static size_t overhead() {\n+        return preambleOverhead() + postambleOverhead();\n+    }\n+    static size_t overhead(std::align_val_t alignment) {\n+        return preambleOverhead(alignment) + postambleOverhead();\n+    }", "originalCommit": "b3c970b449bec64d0a3f7a91a08a9237400016ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MTE2NA==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437381164", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-06-09T12:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MjcwMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437362701", "bodyText": "Could also be return std::max(preambleOverhead(), size_t(alignment));", "author": "vekterli", "createdAt": "2020-06-09T12:18:05Z", "path": "vespamalloc/src/vespamalloc/malloc/memblockboundscheck.h", "diffHunk": "@@ -45,6 +59,12 @@ class MemBlockBoundsCheckBaseTBase : public CommonT<5>\n     void verifyFill() const __attribute__((noinline));\n \n     void setSize(size_t sz) { static_cast<uint64_t *>(_ptr)[0] = sz; }\n+    static size_t preambleOverhead(std::align_val_t alignment) {\n+        return std::max(4*sizeof(unsigned), size_t(alignment));", "originalCommit": "b3c970b449bec64d0a3f7a91a08a9237400016ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MTI5OA==", "url": "https://github.com/vespa-engine/vespa/pull/13515#discussion_r437381298", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-06-09T12:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MjcwMQ=="}], "type": "inlineReview"}, {"oid": "a3b94caca5d92adc8330f22d0cb952d81cbc5dbc", "url": "https://github.com/vespa-engine/vespa/commit/a3b94caca5d92adc8330f22d0cb952d81cbc5dbc", "message": "Add ignore for test executables.", "committedDate": "2020-06-09T12:24:51Z", "type": "commit"}, {"oid": "1ab52f43ca7877c08b93408d7bcf8b0355c007e4", "url": "https://github.com/vespa-engine/vespa/commit/1ab52f43ca7877c08b93408d7bcf8b0355c007e4", "message": "Add some constexpr", "committedDate": "2020-06-09T12:41:04Z", "type": "commit"}, {"oid": "642a5f52a2bbdcb5f02aea4415d502af10331593", "url": "https://github.com/vespa-engine/vespa/commit/642a5f52a2bbdcb5f02aea4415d502af10331593", "message": "Store alignmnet so that tail magic is computed correctly.", "committedDate": "2020-06-09T14:14:23Z", "type": "commit"}, {"oid": "ec811c16e5edfabb2ef9e7e9f3e515e52d0ae6c1", "url": "https://github.com/vespa-engine/vespa/commit/ec811c16e5edfabb2ef9e7e9f3e515e52d0ae6c1", "message": "Must check validity before setting new size and alignment.", "committedDate": "2020-06-10T04:56:54Z", "type": "commit"}]}