{"pr_number": 12462, "pr_title": "add generic ReusableSet", "pr_createdAt": "2020-03-05T13:31:28Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12462", "timeline": [{"oid": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "url": "https://github.com/vespa-engine/vespa/commit/31f4b914d502f01f5a7887b03158d80e2ab9e330", "message": "add generic ReusableSet", "committedDate": "2020-03-05T13:29:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2NTYzOA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388765638", "bodyText": "Please add class comment.", "author": "geirst", "createdAt": "2020-03-06T08:20:18Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_pool.h", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+#include \"reusable_set_handle.h\"\n+\n+#include <mutex>\n+\n+namespace vespalib {\n+\n+class ReusableSetPool", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2NTY5OA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388765698", "bodyText": "Please add class comment.", "author": "geirst", "createdAt": "2020-03-06T08:20:27Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_handle.h", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+\n+namespace vespalib {\n+\n+class ReusableSetPool;\n+\n+class ReusableSetHandle", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2ODc4MA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388768780", "bodyText": "I think we should use vespalib::Array instead as that uses the vespalib::AutoAllocator as default. This will for instance use mmapping if allocated size is large.", "author": "geirst", "createdAt": "2020-03-06T08:28:11Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set.h", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <vector>\n+#include <memory>\n+#include <cstring>\n+\n+namespace vespalib {\n+\n+struct ReusableSet\n+{\n+    using Mark = unsigned short;\n+\n+    Mark *bits;", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2OTE0MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388769141", "bodyText": "Consider snake case: is_marked", "author": "geirst", "createdAt": "2020-03-06T08:29:04Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set.h", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <vector>\n+#include <memory>\n+#include <cstring>\n+\n+namespace vespalib {\n+\n+struct ReusableSet\n+{\n+    using Mark = unsigned short;\n+\n+    Mark *bits;\n+    Mark curval;\n+    size_t sz;\n+\n+    explicit ReusableSet(size_t size)\n+      : bits((Mark *)malloc(size * sizeof(Mark))),\n+        curval(-1),\n+        sz(size)\n+    {\n+        clear();\n+    }\n+\n+    ~ReusableSet() {\n+        free(bits);\n+    }\n+\n+    void clear() {\n+        if (++curval == 0) {\n+            memset(bits, 0, sz * sizeof(Mark));\n+            ++curval;\n+        }\n+    }\n+\n+    void mark(size_t id) {\n+        bits[id] = curval;\n+    }\n+\n+    bool isMarked(size_t id) const {", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDQwNw==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388770407", "bodyText": "Please add class comment.", "author": "geirst", "createdAt": "2020-03-06T08:32:02Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set.h", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <vector>\n+#include <memory>\n+#include <cstring>\n+\n+namespace vespalib {\n+\n+struct ReusableSet", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjA4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388782086", "bodyText": "Also consider changing to a class and hide member variables if this is ever to be used directly. Reference to Mark and curval can be exposed via functions for ReusableSetHandle, or ReusableSetHandle can call mark() and is_marked() directly if we don't think the indirection to be a problem.", "author": "geirst", "createdAt": "2020-03-06T08:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTE3MA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388771170", "bodyText": "Consider snake case: is_marked.", "author": "geirst", "createdAt": "2020-03-06T08:33:56Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_handle.h", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+\n+namespace vespalib {\n+\n+class ReusableSetPool;\n+\n+class ReusableSetHandle\n+{\n+private:\n+    using Mark = ReusableSet::Mark;\n+    using RSUP = std::unique_ptr<ReusableSet>;\n+\n+    Mark *_bits;\n+    Mark _curval;\n+    RSUP _owned;\n+    ReusableSetPool &_pool;\n+\n+public:\n+    ReusableSetHandle(RSUP backing, ReusableSetPool& owner)\n+      : _bits(backing->bits),\n+        _curval(backing->curval),\n+        _owned(std::move(backing)),\n+        _pool(owner)\n+    {}\n+\n+    ~ReusableSetHandle();\n+\n+    void mark(uint32_t id) {\n+        _bits[id] = _curval;\n+    }\n+\n+    bool isMarked(uint32_t id) const {", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTU4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388771587", "bodyText": "To match interface of ReusableSet we should use size_t.", "author": "geirst", "createdAt": "2020-03-06T08:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ4MA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388771480", "bodyText": "To match interface of ReusableSet we should use size_t.", "author": "geirst", "createdAt": "2020-03-06T08:34:47Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_handle.h", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+\n+namespace vespalib {\n+\n+class ReusableSetPool;\n+\n+class ReusableSetHandle\n+{\n+private:\n+    using Mark = ReusableSet::Mark;\n+    using RSUP = std::unique_ptr<ReusableSet>;\n+\n+    Mark *_bits;\n+    Mark _curval;\n+    RSUP _owned;\n+    ReusableSetPool &_pool;\n+\n+public:\n+    ReusableSetHandle(RSUP backing, ReusableSetPool& owner)\n+      : _bits(backing->bits),\n+        _curval(backing->curval),\n+        _owned(std::move(backing)),\n+        _pool(owner)\n+    {}\n+\n+    ~ReusableSetHandle();\n+\n+    void mark(uint32_t id) {", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MzE2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388773162", "bodyText": "Indentation off?", "author": "geirst", "createdAt": "2020-03-06T08:38:55Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_pool.h", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+#include \"reusable_set_handle.h\"\n+\n+#include <mutex>\n+\n+namespace vespalib {\n+\n+class ReusableSetPool\n+{\n+    using RSUP = std::unique_ptr<ReusableSet>;\n+    using Guard = std::lock_guard<std::mutex>;\n+    std::vector<RSUP> _lru_stack;\n+    std::mutex _lock;\n+    size_t _reuse_count;\n+    size_t _create_count;\n+    \n+\n+    ReusableSetPool(const ReusableSetPool &) = delete;\n+    ReusableSetPool& operator= (const ReusableSetPool &) = delete;\n+\n+public:\n+    ReusableSetPool() : _lru_stack(), _lock(), _reuse_count(0), _create_count(0) {}\n+\n+    ReusableSetHandle get(size_t size) {\n+        Guard guard(_lock);\n+        while (! _lru_stack.empty()) {\n+            RSUP r = std::move(_lru_stack.back());\n+            _lru_stack.pop_back();\n+            if (r->sz >= size) {\n+                r->clear();\n+\t\t++_reuse_count;", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NDA0MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388774041", "bodyText": "Consider providing the tuning parameters in the constructor and create another constructor that sets the defaults. Also easier to change in for instance unit test if needed.", "author": "geirst", "createdAt": "2020-03-06T08:40:59Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_pool.h", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+#include \"reusable_set_handle.h\"\n+\n+#include <mutex>\n+\n+namespace vespalib {\n+\n+class ReusableSetPool\n+{\n+    using RSUP = std::unique_ptr<ReusableSet>;\n+    using Guard = std::lock_guard<std::mutex>;\n+    std::vector<RSUP> _lru_stack;\n+    std::mutex _lock;\n+    size_t _reuse_count;\n+    size_t _create_count;\n+    \n+\n+    ReusableSetPool(const ReusableSetPool &) = delete;\n+    ReusableSetPool& operator= (const ReusableSetPool &) = delete;\n+\n+public:\n+    ReusableSetPool() : _lru_stack(), _lock(), _reuse_count(0), _create_count(0) {}\n+\n+    ReusableSetHandle get(size_t size) {\n+        Guard guard(_lock);\n+        while (! _lru_stack.empty()) {\n+            RSUP r = std::move(_lru_stack.back());\n+            _lru_stack.pop_back();\n+            if (r->sz >= size) {\n+                r->clear();\n+\t\t++_reuse_count;\n+                return ReusableSetHandle(std::move(r), *this);\n+            }\n+        }\n+        RSUP r = std::make_unique<ReusableSet>(std::max((size_t)250, size*2));", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NjIyOA==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388776228", "bodyText": "I think we should have another simple test that test that mark(x) -> is_marked(x) is true for that particular id.", "author": "geirst", "createdAt": "2020-03-06T08:46:15Z", "path": "vespalib/src/tests/util/reusable_set/reusable_set_test.cpp", "diffHunk": "@@ -0,0 +1,106 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/vespalib/util/reusable_set_pool.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using namespace vespalib;\n+\n+using Mark = ReusableSet::Mark;\n+\n+void verify_set(const ReusableSet &set, size_t sz, Mark val, size_t marked) {\n+    EXPECT_EQ(sz, set.sz);\n+    EXPECT_EQ(val, set.curval);\n+    size_t count = 0;\n+    for (size_t i = 0; i < set.sz; ++i) {\n+        if (set.isMarked(i)) ++count;\n+    }\n+    EXPECT_EQ(marked, count);\n+}\n+\n+void verify_handle(const ReusableSetHandle &set, size_t sz, Mark val, size_t marked) {\n+    EXPECT_EQ(sz, set.capacity());\n+    EXPECT_EQ(val, set.generation());\n+    size_t count = 0;\n+    for (size_t i = 0; i < set.capacity(); ++i) {\n+        if (set.isMarked(i)) ++count;\n+    }\n+    EXPECT_EQ(marked, count);\n+}\n+\n+class Pool : public ::testing::Test {\n+public:\n+    ReusableSetPool pool;\n+    Pool() : pool() {}\n+    ~Pool() {}\n+    void exercise(ReusableSetHandle &set) {\n+        size_t sz = set.capacity();\n+        size_t count = 0;\n+        for (size_t i = 0; i < sz; ++i) {\n+            if (set.isMarked(i)) ++count;\n+        }\n+        EXPECT_EQ(0, count);\n+        for (int i = 0; i < 17; ++i) {\n+            set.mark((i * 711) % sz);\n+        }\n+        count = 0;\n+        for (size_t i = 0; i < sz; ++i) {\n+            if (set.isMarked(i)) ++count;\n+        }\n+        EXPECT_EQ(17, count);\n+        for (int i = 0; i < 17; ++i) {\n+            set.mark((i * 711) % sz);\n+        }\n+        count = 0;\n+        for (size_t i = 0; i < sz; ++i) {\n+            if (set.isMarked(i)) ++count;\n+        }\n+        EXPECT_EQ(17, count);\n+   }\n+};\n+\n+\n+TEST(ReusableSetTest, simple_usage)", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Mjg4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r388782885", "bodyText": "Please add function that returns vespalib::MemoryUsage, which makes it easier to integrate in other components.", "author": "geirst", "createdAt": "2020-03-06T09:01:02Z", "path": "vespalib/src/vespa/vespalib/util/reusable_set_pool.h", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"reusable_set.h\"\n+#include \"reusable_set_handle.h\"\n+\n+#include <mutex>\n+\n+namespace vespalib {\n+\n+class ReusableSetPool\n+{\n+    using RSUP = std::unique_ptr<ReusableSet>;\n+    using Guard = std::lock_guard<std::mutex>;\n+    std::vector<RSUP> _lru_stack;\n+    std::mutex _lock;\n+    size_t _reuse_count;\n+    size_t _create_count;\n+    \n+\n+    ReusableSetPool(const ReusableSetPool &) = delete;\n+    ReusableSetPool& operator= (const ReusableSetPool &) = delete;\n+\n+public:\n+    ReusableSetPool() : _lru_stack(), _lock(), _reuse_count(0), _create_count(0) {}\n+\n+    ReusableSetHandle get(size_t size) {\n+        Guard guard(_lock);\n+        while (! _lru_stack.empty()) {\n+            RSUP r = std::move(_lru_stack.back());\n+            _lru_stack.pop_back();\n+            if (r->sz >= size) {\n+                r->clear();\n+\t\t++_reuse_count;\n+                return ReusableSetHandle(std::move(r), *this);\n+            }\n+        }\n+        RSUP r = std::make_unique<ReusableSet>(std::max((size_t)250, size*2));\n+\t++_create_count;\n+        return ReusableSetHandle(std::move(r), *this);\n+    }\n+\n+    void reuse(RSUP used) {\n+        Guard guard(_lock);\n+        _lru_stack.push_back(std::move(used));\n+    }\n+", "originalCommit": "31f4b914d502f01f5a7887b03158d80e2ab9e330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b299a877a9976e758c9be34fc14ad1f9ce052c0d", "url": "https://github.com/vespa-engine/vespa/commit/b299a877a9976e758c9be34fc14ad1f9ce052c0d", "message": "review follow-up", "committedDate": "2020-03-06T11:53:14Z", "type": "commit"}, {"oid": "c369d7a3d3f270232438bb12045d53693f81aa79", "url": "https://github.com/vespa-engine/vespa/commit/c369d7a3d3f270232438bb12045d53693f81aa79", "message": "add documentation comments", "committedDate": "2020-03-06T12:24:35Z", "type": "commit"}, {"oid": "1fcb57f1c932d4516346c21ad53dbe0e377b605a", "url": "https://github.com/vespa-engine/vespa/commit/1fcb57f1c932d4516346c21ad53dbe0e377b605a", "message": "use MemoryUsage", "committedDate": "2020-03-06T13:28:25Z", "type": "commit"}, {"oid": "b435307d511b17c70127f697e57f448666fa5044", "url": "https://github.com/vespa-engine/vespa/commit/b435307d511b17c70127f697e57f448666fa5044", "message": "more testing for memory usage tracking", "committedDate": "2020-03-06T13:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMzU1OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r389613559", "bodyText": "Consider using EXPECT_LT(), which will give better error message if it fails.", "author": "geirst", "createdAt": "2020-03-09T11:54:35Z", "path": "vespalib/src/tests/util/reusable_set/reusable_set_test.cpp", "diffHunk": "@@ -83,24 +91,38 @@ TEST_F(Pool, reuse_works)\n         auto handle = pool.get(7);\n         EXPECT_EQ(i, pool.reuse_count());\n         EXPECT_EQ(1, pool.create_count());\n-        verify_handle(handle, 250, i+1, 0);\n+        verify_handle(handle, 248, i+1, 0);\n         exercise(handle);\n     }\n+    EXPECT_TRUE(500 < pool.memory_usage());", "originalCommit": "b299a877a9976e758c9be34fc14ad1f9ce052c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMzYyNQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r389613625", "bodyText": "Consider using EXPECT_GT(), which will give better error message if it fails.", "author": "geirst", "createdAt": "2020-03-09T11:54:45Z", "path": "vespalib/src/tests/util/reusable_set/reusable_set_test.cpp", "diffHunk": "@@ -83,24 +91,38 @@ TEST_F(Pool, reuse_works)\n         auto handle = pool.get(7);\n         EXPECT_EQ(i, pool.reuse_count());\n         EXPECT_EQ(1, pool.create_count());\n-        verify_handle(handle, 250, i+1, 0);\n+        verify_handle(handle, 248, i+1, 0);\n         exercise(handle);\n     }\n+    EXPECT_TRUE(500 < pool.memory_usage());\n+    EXPECT_TRUE(1000 > pool.memory_usage());", "originalCommit": "b299a877a9976e758c9be34fc14ad1f9ce052c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNDE4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r389614189", "bodyText": "Consider using EXPECT_LT() and EXPECT_GT()", "author": "geirst", "createdAt": "2020-03-09T11:55:55Z", "path": "vespalib/src/tests/util/reusable_set/reusable_set_test.cpp", "diffHunk": "@@ -83,24 +91,38 @@ TEST_F(Pool, reuse_works)\n         auto handle = pool.get(7);\n         EXPECT_EQ(i, pool.reuse_count());\n         EXPECT_EQ(1, pool.create_count());\n-        verify_handle(handle, 250, i+1, 0);\n+        verify_handle(handle, 248, i+1, 0);\n         exercise(handle);\n     }\n+    EXPECT_TRUE(500 < pool.memory_usage());\n+    EXPECT_TRUE(1000 > pool.memory_usage());\n     for (int i = 0; i < 5; ++i) {\n         auto handle = pool.get(7);\n         EXPECT_EQ(65535+i, pool.reuse_count());\n         EXPECT_EQ(1, pool.create_count());\n-        verify_handle(handle, 250, i+1, 0);\n+        verify_handle(handle, 248, i+1, 0);\n         exercise(handle);\n     }\n-    auto handle3 = pool.get(300);\n+    auto handle3 = pool.get(260);\n     EXPECT_EQ(2, pool.create_count());\n-    verify_handle(handle3, 600, 1, 0);\n+    verify_handle(handle3, 297, 1, 0);\n     exercise(handle3);\n-    auto handle7 = pool.get(700);\n-    EXPECT_EQ(3, pool.create_count());\n-    verify_handle(handle7, 1400, 1, 0);\n+    {\n+        auto handle4 = pool.get(400);\n+        EXPECT_EQ(3, pool.create_count());\n+        verify_handle(handle4, 400, 1, 0);\n+        exercise(handle4);\n+    }\n+    auto handle7 = pool.get(401);\n+    EXPECT_EQ(4, pool.create_count());\n+    verify_handle(handle7, 480, 1, 0);\n     exercise(handle7);\n+    EXPECT_TRUE(1000 < pool.memory_usage());", "originalCommit": "b299a877a9976e758c9be34fc14ad1f9ce052c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNjUxNw==", "url": "https://github.com/vespa-engine/vespa/pull/12462#discussion_r389616517", "bodyText": "Consider using EXPECT_LT() and EXPECT_GT().", "author": "geirst", "createdAt": "2020-03-09T12:01:02Z", "path": "vespalib/src/tests/util/reusable_set/reusable_set_test.cpp", "diffHunk": "@@ -123,10 +123,17 @@ TEST_F(Pool, reuse_works)\n     exercise(handle7);\n     EXPECT_TRUE(1000 < pool.memory_usage().allocatedBytes());\n     EXPECT_TRUE(3000 > pool.memory_usage().allocatedBytes());\n-    auto handle8 = pool.get(2500);\n-    auto handle9 = pool.get(2500);\n-    EXPECT_TRUE(11000 < pool.memory_usage().allocatedBytes());\n-    EXPECT_TRUE(13000 > pool.memory_usage().allocatedBytes());\n+    {\n+        auto handle8 = pool.get(2500);\n+        auto handle9 = pool.get(2500);\n+        EXPECT_TRUE(11000 < pool.memory_usage().allocatedBytes());", "originalCommit": "b435307d511b17c70127f697e57f448666fa5044", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a6faf6f2d6f2174772c4f5a79912832cec4f5c0", "url": "https://github.com/vespa-engine/vespa/commit/0a6faf6f2d6f2174772c4f5a79912832cec4f5c0", "message": "use EXPECT_LT and EXPECT_GT", "committedDate": "2020-03-10T10:03:35Z", "type": "commit"}]}