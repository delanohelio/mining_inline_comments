{"pr_number": 15572, "pr_title": "Initial support for backend reindexing visitor functionality", "pr_createdAt": "2020-12-01T15:14:41Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15572", "timeline": [{"oid": "fb96b6e254ef367428374eb4f254c248666bcd11", "url": "https://github.com/vespa-engine/vespa/commit/fb96b6e254ef367428374eb4f254c248666bcd11", "message": "Initial support for backend reindexing visitor functionality\n\nIntroduces the concept of a read-for-write visitor operation which\nblocks all mutating operations from starting for a bucket being\nvisited. This read-for-write mode is used if (and only if) the visitor\nlibrary being specified by the client is \"reindexingvisitor\".\n\nSince read-for-write visitors cannot race with concurrent write\noperations, starting such visitors are deferred until no further\nmutations are pending.\n\nAlso adds a basic reindexingvisitor implementation to the content node\nwhich sends all documents as Puts containing a special TaS token\nthat will let the operation through even if a bucket is locked. This\ntoken is cleared by the distributor before it is passed on to the\ncontent nodes.\n\nNote: this feature is not yet production ready. For now the following\ncaveats apply:\n* Mutating vs non-mutating pending ops to a bucket are not tracked\n  separately, so it\u2019s possible to starve a reindexing visitor by\n  sending constant pending read load, as read load is not blocked by\n  the operation sequencer.\n* Ideal state operations towards locked buckets are not blocked, so\n  it's possible for e.g. a split to be sent for a bucket that is being\n  visited.", "committedDate": "2020-12-01T15:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTYzNg==", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534035636", "bodyText": "Could consider making a helper function for this, taking the command is input.", "author": "geirst", "createdAt": "2020-12-02T09:55:15Z", "path": "storage/src/vespa/storage/distributor/externaloperationhandler.cpp", "diffHunk": "@@ -250,11 +253,26 @@ IMPL_MSG_COMMAND_H(ExternalOperationHandler, Put)\n         cmd->setTimestamp(getUniqueTimestamp());\n     }\n \n-    auto handle = _mutationSequencer.try_acquire(cmd->getDocumentId());\n-    if (allowMutation(handle)) {\n-        document::BucketSpace bucketSpace = cmd->getBucket().getBucketSpace();\n+    const auto bucket_space = cmd->getBucket().getBucketSpace();\n+    auto handle = _operation_sequencer.try_acquire(bucket_space, cmd->getDocumentId());\n+    bool allow = allowMutation(handle);\n+    const auto& tas_cond = cmd->getCondition();\n+    const bool bypass_bucket_lock = (tas_cond.isPresent()", "originalCommit": "fb96b6e254ef367428374eb4f254c248666bcd11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzODMxNg==", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534038316", "bodyText": "Consider adding a is_blocked_by() to SequencingHandle taking the BlockedBy enum to simplify this if statement.", "author": "geirst", "createdAt": "2020-12-02T09:59:01Z", "path": "storage/src/vespa/storage/distributor/externaloperationhandler.cpp", "diffHunk": "@@ -250,11 +253,26 @@ IMPL_MSG_COMMAND_H(ExternalOperationHandler, Put)\n         cmd->setTimestamp(getUniqueTimestamp());\n     }\n \n-    auto handle = _mutationSequencer.try_acquire(cmd->getDocumentId());\n-    if (allowMutation(handle)) {\n-        document::BucketSpace bucketSpace = cmd->getBucket().getBucketSpace();\n+    const auto bucket_space = cmd->getBucket().getBucketSpace();\n+    auto handle = _operation_sequencer.try_acquire(bucket_space, cmd->getDocumentId());\n+    bool allow = allowMutation(handle);\n+    const auto& tas_cond = cmd->getCondition();\n+    const bool bypass_bucket_lock = (tas_cond.isPresent()\n+                                     && (tas_cond.getSelection() == reindexing_bucket_lock_bypass_value()));\n+    if (bypass_bucket_lock) {\n+        if (!allow && handle.was_blocked() && (handle.blocked_by() == SequencingHandle::BlockedBy::LockedBucket)) {", "originalCommit": "fb96b6e254ef367428374eb4f254c248666bcd11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDI5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060293", "bodyText": "Consider adding class comment.", "author": "geirst", "createdAt": "2020-12-02T10:30:58Z", "path": "storage/src/vespa/storage/distributor/pendingmessagetracker.h", "diffHunk": "@@ -15,22 +15,48 @@\n #include <boost/multi_index/ordered_index.hpp>\n #include <boost/multi_index/sequenced_index.hpp>\n #include <boost/multi_index/composite_key.hpp>\n-\n #include <set>\n #include <unordered_map>\n #include <chrono>\n #include <mutex>\n \n namespace storage::distributor {\n \n-class PendingMessageTracker : public framework::HtmlStatusReporter\n-{\n+enum class TaskRunState {\n+    OK,\n+    Aborted,\n+    BucketLost\n+};\n+\n+struct DeferredTask {", "originalCommit": "fb96b6e254ef367428374eb4f254c248666bcd11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDQxOA==", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060418", "bodyText": "Consider adding class comment.", "author": "geirst", "createdAt": "2020-12-02T10:31:11Z", "path": "storage/src/vespa/storage/distributor/pendingmessagetracker.h", "diffHunk": "@@ -15,22 +15,48 @@\n #include <boost/multi_index/ordered_index.hpp>\n #include <boost/multi_index/sequenced_index.hpp>\n #include <boost/multi_index/composite_key.hpp>\n-\n #include <set>\n #include <unordered_map>\n #include <chrono>\n #include <mutex>\n \n namespace storage::distributor {\n \n-class PendingMessageTracker : public framework::HtmlStatusReporter\n-{\n+enum class TaskRunState {", "originalCommit": "fb96b6e254ef367428374eb4f254c248666bcd11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDc4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060785", "bodyText": "Consider adding class comment.", "author": "geirst", "createdAt": "2020-12-02T10:31:47Z", "path": "storage/src/vespa/storage/visiting/reindexing_visitor.h", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"visitor.h\"\n+\n+namespace storage {\n+\n+class ReindexingVisitor : public Visitor {", "originalCommit": "fb96b6e254ef367428374eb4f254c248666bcd11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4be75b9e71cc712304dd24a3b94bcaca6d269001", "url": "https://github.com/vespa-engine/vespa/commit/4be75b9e71cc712304dd24a3b94bcaca6d269001", "message": "Simplify code interacting with blocked sequencing handles", "committedDate": "2020-12-02T11:30:45Z", "type": "commit"}, {"oid": "4f4bbe5490124bab25679c6c6ac92f3ee81ba74b", "url": "https://github.com/vespa-engine/vespa/commit/4f4bbe5490124bab25679c6c6ac92f3ee81ba74b", "message": "Add top-level comments", "committedDate": "2020-12-02T11:58:25Z", "type": "commit"}]}