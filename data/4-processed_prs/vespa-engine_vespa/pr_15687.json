{"pr_number": 15687, "pr_title": "Arnej/untangle onnx from dense tensor ", "pr_createdAt": "2020-12-04T16:01:24Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15687", "timeline": [{"oid": "ea1305d578ca3ff11503eb30109a408f6c150fcb", "url": "https://github.com/vespa-engine/vespa/commit/ea1305d578ca3ff11503eb30109a408f6c150fcb", "message": "use DenseCellsValue in NearestNeighborBlueprint", "committedDate": "2020-12-06T19:59:46Z", "type": "forcePushed"}, {"oid": "6ecf2793233d3fa44fa6316e27be2220dce883ab", "url": "https://github.com/vespa-engine/vespa/commit/6ecf2793233d3fa44fa6316e27be2220dce883ab", "message": "add utility for wrapping cells vector as dense value", "committedDate": "2020-12-06T19:59:45Z", "type": "commit"}, {"oid": "c9785734e2bf04e063cb693a54f6d769a1a83704", "url": "https://github.com/vespa-engine/vespa/commit/c9785734e2bf04e063cb693a54f6d769a1a83704", "message": "untangle ONNX integration from old DenseTensor", "committedDate": "2020-12-06T19:59:45Z", "type": "commit"}, {"oid": "ea1305d578ca3ff11503eb30109a408f6c150fcb", "url": "https://github.com/vespa-engine/vespa/commit/ea1305d578ca3ff11503eb30109a408f6c150fcb", "message": "use DenseCellsValue in NearestNeighborBlueprint", "committedDate": "2020-12-06T19:59:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1MzU4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15687#discussion_r537353583", "bodyText": "should also add space used by vector", "author": "havardpe", "createdAt": "2020-12-07T09:28:42Z", "path": "eval/src/vespa/eval/eval/dense_cells_value.h", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/eval/eval/value.h>\n+#include <cassert>\n+\n+namespace vespalib::eval {\n+\n+/**\n+ * A dense-only value that just owns a vector of cells.\n+ **/\n+template<typename T>\n+class DenseCellsValue : public Value {\n+private:\n+    const ValueType &_type;\n+    std::vector<T> _cells;\n+public:\n+    DenseCellsValue(const ValueType &type_ref, std::vector<T> cells)\n+      : _type(type_ref), _cells(std::move(cells))\n+    {\n+        assert(check_cell_type<T>(_type.cell_type()));\n+    }\n+    const ValueType &type() const override { return _type; }\n+    TypedCells cells() const override { return TypedCells(_cells); }\n+    const Index &index() const override { return TrivialIndex::get(); }\n+    MemoryUsage get_memory_usage() const override {\n+        return self_memory_usage<DenseCellsValue<T>>();", "originalCommit": "ea1305d578ca3ff11503eb30109a408f6c150fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1Mzc3MA==", "url": "https://github.com/vespa-engine/vespa/pull/15687#discussion_r537353770", "bodyText": "I strongly suggest we also own the type here", "author": "havardpe", "createdAt": "2020-12-07T09:28:58Z", "path": "eval/src/vespa/eval/eval/dense_cells_value.h", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/eval/eval/value.h>\n+#include <cassert>\n+\n+namespace vespalib::eval {\n+\n+/**\n+ * A dense-only value that just owns a vector of cells.\n+ **/\n+template<typename T>\n+class DenseCellsValue : public Value {\n+private:\n+    const ValueType &_type;", "originalCommit": "ea1305d578ca3ff11503eb30109a408f6c150fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a27cdab6ab2c946e2ad61a429f96ebf23e0167ca", "url": "https://github.com/vespa-engine/vespa/commit/a27cdab6ab2c946e2ad61a429f96ebf23e0167ca", "message": "review follow-ups\n\n* own a copy of the type\n* account for cells memory\n* also assert on number of cells", "committedDate": "2020-12-08T08:48:20Z", "type": "commit"}]}