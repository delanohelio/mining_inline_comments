{"pr_number": 15133, "pr_title": "Arnej/handle hash collision", "pr_createdAt": "2020-11-02T09:49:42Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15133", "timeline": [{"oid": "8954a35cab895a766aca2d01c6fe5e6cfaff71b3", "url": "https://github.com/vespa-engine/vespa/commit/8954a35cab895a766aca2d01c6fe5e6cfaff71b3", "message": "handle add_subspace with same address (or hash collision)", "committedDate": "2020-11-02T09:45:06Z", "type": "commit"}, {"oid": "1163c6cf86a418216af628ec7f1cbaef60bb4f53", "url": "https://github.com/vespa-engine/vespa/commit/1163c6cf86a418216af628ec7f1cbaef60bb4f53", "message": "test add_subspace robustness for FastValue", "committedDate": "2020-11-02T09:45:10Z", "type": "commit"}, {"oid": "8f8b850f484edb2e8aa2cfab335903c417f81628", "url": "https://github.com/vespa-engine/vespa/commit/8f8b850f484edb2e8aa2cfab335903c417f81628", "message": "disallow duplicate add_subspace for PackedMixedTensorBuilder", "committedDate": "2020-11-02T09:46:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NDQwOA==", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515854408", "bodyText": "consider splitting into separate tests", "author": "havardpe", "createdAt": "2020-11-02T09:52:48Z", "path": "eval/src/tests/eval/fast_value/fast_value_test.cpp", "diffHunk": "@@ -56,4 +58,57 @@ TEST(FastCellsTest, add_cells_works) {\n     EXPECT_EQ(*cells.get(5), 6.0);\n }\n \n+using SA = std::vector<vespalib::stringref>;\n+\n+TEST(FastValueTest, add_subspace_robustness) {", "originalCommit": "8f8b850f484edb2e8aa2cfab335903c417f81628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NjExMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515856111", "bodyText": "consider adding compiler intrinsic indicating that adding is most likely", "author": "havardpe", "createdAt": "2020-11-02T09:55:32Z", "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "diffHunk": "@@ -135,6 +135,26 @@ class FastSparseMap\n         _map.insert(std::make_pair(Key(hash), value));\n     }\n \n+    // used to add a mapping, but in the unlikely case\n+    // of hash collision it works like lookup instead.\n+    template <typename T>\n+    size_t lookup_or_add_mapping(ConstArrayRef<T> addr) {\n+        uint64_t hash = 0;\n+        size_t old_labels_size = _labels.size();\n+        for (const auto &label: addr) {\n+            _labels.emplace_back(label);\n+            hash = 31 * hash + hash_label(_labels.back());\n+        }\n+        uint32_t value = _map.size();\n+        auto [iter, did_add] = _map.insert(std::make_pair(Key(hash), value));\n+        if (did_add) {", "originalCommit": "8f8b850f484edb2e8aa2cfab335903c417f81628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1Nzg4MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515857881", "bodyText": "consider adding compiler intrinsic indicating that adding is expected", "author": "havardpe", "createdAt": "2020-11-02T09:58:27Z", "path": "eval/src/vespa/eval/eval/fast_value.hpp", "diffHunk": "@@ -230,8 +230,11 @@ struct FastValue final : Value, ValueBuilder<T> {\n     const Value::Index &index() const override { return my_index; }\n     TypedCells cells() const override { return TypedCells(my_cells.memory, get_cell_type<T>(), my_cells.size); }\n     ArrayRef<T> add_subspace(ConstArrayRef<vespalib::stringref> addr) override {\n-        my_index.map.add_mapping(addr);\n-        return my_cells.add_cells(my_subspace_size);\n+        size_t idx = my_index.map.lookup_or_add_mapping(addr) * my_subspace_size;\n+        if (idx == my_cells.size) {", "originalCommit": "8f8b850f484edb2e8aa2cfab335903c417f81628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1OTM4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515859389", "bodyText": "I think we should just call this add_mapping and remove the old version altogether.", "author": "havardpe", "createdAt": "2020-11-02T10:00:54Z", "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "diffHunk": "@@ -135,6 +135,26 @@ class FastSparseMap\n         _map.insert(std::make_pair(Key(hash), value));\n     }\n \n+    // used to add a mapping, but in the unlikely case\n+    // of hash collision it works like lookup instead.\n+    template <typename T>\n+    size_t lookup_or_add_mapping(ConstArrayRef<T> addr) {", "originalCommit": "8f8b850f484edb2e8aa2cfab335903c417f81628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb6150b213bda462321e23ce10c66c8f9c62b48a", "url": "https://github.com/vespa-engine/vespa/commit/cb6150b213bda462321e23ce10c66c8f9c62b48a", "message": "consistent add_mapping\n\n* rename lookup_or_add_mapping to just add_mapping\n* change the other add_mapping to have same semantics\n* in FastValueIndex, check the result from add_mapping\n  each place\n* use __builtin_expect to tell both the reader and the\n  compiler what the expected path is", "committedDate": "2020-11-03T09:23:52Z", "type": "commit"}, {"oid": "a04bf607a523cab52af9eefa91623e327ed75b49", "url": "https://github.com/vespa-engine/vespa/commit/a04bf607a523cab52af9eefa91623e327ed75b49", "message": "split tests", "committedDate": "2020-11-03T12:44:13Z", "type": "commit"}]}