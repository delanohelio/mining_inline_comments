{"pr_number": 14046, "pr_title": "Use a vector backed set for speed.", "pr_createdAt": "2020-08-13T15:45:55Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14046", "timeline": [{"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "url": "https://github.com/vespa-engine/vespa/commit/7bf5c4d363334993135f9edf77d9bbed306d03e4", "message": "Use a vector backed set for speed.", "committedDate": "2020-08-13T15:38:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MjI4OA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470562288", "bodyText": "I would prefer 'add' over 'insert' here, since it implies less. Also, I would prefer 'push_back' over 'emplace_back' for values that already have the appropriate type.", "author": "havardpe", "createdAt": "2020-08-14T11:12:56Z", "path": "document/src/vespa/document/base/field.h", "diffHunk": "@@ -28,16 +28,35 @@ class Field final : public vespalib::FieldBase,\n     const DataType *_dataType;\n     int             _fieldId;\n public:\n-    typedef std::shared_ptr<const Field> CSP;\n-    typedef std::shared_ptr<Field> SP;\n+    using CSP = std::shared_ptr<const Field>;\n+    using SP = std::shared_ptr<Field>;\n+    using CPtr = const Field *;\n \n     struct FieldPtrComparator {\n-        bool operator()(const Field* f1, const Field* f2) const {\n+        bool operator()(CPtr f1, CPtr f2) const {\n             return (*f1 < *f2);\n         }\n     };\n \n-    using Set = std::set<const Field*, FieldPtrComparator>;\n+    class Set {\n+    public:\n+        class Builder {\n+        public:\n+            Builder & reserve(size_t sz) { _vector.reserve(sz); return *this; }\n+            Builder & insert(CPtr field) { _vector.emplace_back(field); return *this; }", "originalCommit": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5ODUxMA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470598510", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-08-14T12:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MjI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MzY2OA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470563668", "bodyText": "consider doing unique as well, to ensure set property", "author": "havardpe", "createdAt": "2020-08-14T11:16:23Z", "path": "document/src/vespa/document/base/field.cpp", "diffHunk": "@@ -7,9 +7,21 @@\n #include <vespa/vespalib/util/exceptions.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/util/bobhash.h>\n+#include <algorithm>\n \n namespace document {\n \n+Field::Set::Set(std::vector<CPtr> fields)\n+    : _fields(std::move(fields))\n+{\n+    std::sort(_fields.begin(), _fields.end(), Field::FieldPtrComparator());", "originalCommit": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNTg5NA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470605894", "bodyText": "Yes, thanks.", "author": "baldersheim", "createdAt": "2020-08-14T12:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDcwNg==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470564706", "bodyText": "consider adding a contains taking a Field::Set as well since it can be implemented more efficiently using the std::includes function (compared to calling contains per field in the other set)", "author": "havardpe", "createdAt": "2020-08-14T11:19:04Z", "path": "document/src/vespa/document/base/field.h", "diffHunk": "@@ -28,16 +28,35 @@ class Field final : public vespalib::FieldBase,\n     const DataType *_dataType;\n     int             _fieldId;\n public:\n-    typedef std::shared_ptr<const Field> CSP;\n-    typedef std::shared_ptr<Field> SP;\n+    using CSP = std::shared_ptr<const Field>;\n+    using SP = std::shared_ptr<Field>;\n+    using CPtr = const Field *;\n \n     struct FieldPtrComparator {\n-        bool operator()(const Field* f1, const Field* f2) const {\n+        bool operator()(CPtr f1, CPtr f2) const {\n             return (*f1 < *f2);\n         }\n     };\n \n-    using Set = std::set<const Field*, FieldPtrComparator>;\n+    class Set {\n+    public:\n+        class Builder {\n+        public:\n+            Builder & reserve(size_t sz) { _vector.reserve(sz); return *this; }\n+            Builder & insert(CPtr field) { _vector.emplace_back(field); return *this; }\n+            Set build() { return Set(std::move(_vector)); }\n+        private:\n+            std::vector<CPtr> _vector;\n+        };\n+        bool contains(const Field & field) const;", "originalCommit": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNjA0MA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470606040", "bodyText": "Good idea, done.", "author": "baldersheim", "createdAt": "2020-08-14T12:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NTM2Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470565366", "bodyText": "this should be a function on the Field::Set (see other comment)", "author": "havardpe", "createdAt": "2020-08-14T11:20:48Z", "path": "document/src/vespa/document/fieldset/fieldsets.cpp", "diffHunk": "@@ -38,25 +39,10 @@ FieldCollection::contains(const FieldSet& fields) const\n {\n     switch (fields.getType()) {\n         case Type::FIELD:\n-            return _set.find(static_cast<const Field*>(&fields)) != _set.end();\n+            return _set.contains(static_cast<const Field &>(fields));\n         case Type::SET: {\n             const auto & coll = static_cast<const FieldCollection&>(fields);\n-\n-            if (_set.size() < coll._set.size()) {\n-                return false;\n-            }\n-\n-            auto iter = coll.getFields().begin();\n-\n-            while (iter != coll.getFields().end()) {\n-                if (_set.find(*iter) == _set.end()) {\n-                    return false;\n-                }\n-\n-                ++iter;\n-            }\n-\n-            return true;\n+            return std::includes(_set.begin(), _set.end(), coll.getFields().begin(), coll.getFields().end(), Field::FieldPtrComparator());", "originalCommit": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNjEzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470606139", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-08-14T12:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NTM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2OTgwNA==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470569804", "bodyText": "consider adding a static convenience to make this case simpler.", "author": "havardpe", "createdAt": "2020-08-14T11:31:46Z", "path": "searchcore/src/vespa/searchcore/proton/server/documentretriever.cpp", "diffHunk": "@@ -82,14 +82,15 @@ ::DocumentRetriever(const DocTypeName &docTypeName,\n       _attr_manager(attr_manager),\n       _doc_store(doc_store),\n       _possiblePositionFields(),\n-      _attributeFields(),\n+      _attributeFields(document::Field::Set::Builder().build()),", "originalCommit": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5ODc1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470598751", "bodyText": "emptySet", "author": "baldersheim", "createdAt": "2020-08-14T12:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2OTgwNA=="}], "type": "inlineReview"}, {"oid": "df5a57673b782ab36ef8d24893d607f04514600e", "url": "https://github.com/vespa-engine/vespa/commit/df5a57673b782ab36ef8d24893d607f04514600e", "message": "Make sure the entries in the set are unique.\nMake both a less and equal operator so std::unique can be used to.\nAdd and interface so that whole sets can be tested effectively if they are subsets.", "committedDate": "2020-08-14T13:12:51Z", "type": "commit"}]}