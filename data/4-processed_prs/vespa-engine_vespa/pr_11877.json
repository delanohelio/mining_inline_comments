{"pr_number": 11877, "pr_title": "Balder/add noexcept to move constructors and operators", "pr_createdAt": "2020-01-21T20:37:27Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11877", "timeline": [{"oid": "4814eb34c725110f25ab4324699d6f17a291c116", "url": "https://github.com/vespa-engine/vespa/commit/4814eb34c725110f25ab4324699d6f17a291c116", "message": "Add move constructor and operator to string", "committedDate": "2020-01-21T20:25:43Z", "type": "commit"}, {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "url": "https://github.com/vespa-engine/vespa/commit/c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "message": "Add noexcept to move constructors and operators", "committedDate": "2020-01-21T20:31:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzY5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369463699", "bodyText": "Nit: \"inthe\" -> \"in the\"", "author": "vekterli", "createdAt": "2020-01-22T09:57:42Z", "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "originalCommit": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4NjAzNQ==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369586035", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-22T14:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzgwMw==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369463803", "bodyText": "Nit: \"inthe\" -> \"in the\"", "author": "vekterli", "createdAt": "2020-01-22T09:57:54Z", "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");\n+    EXPECT_NOT_EQUAL(org, moved_into_long);\n+    moved_into_long = std::move(moved_into_short);\n+    EXPECT_EQUAL(org, moved_into_long);\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    EXPECT_EQUAL(string(), moved_into_short);\n+}\n+\n+void verify_move(string org) {\n+    verify_move_constructor(org);\n+    verify_move_operator(org);\n+}\n+\n+TEST(\"test move constructor\") {\n+    TEST_DO(verify_move(\"short string\"));\n+    TEST_DO(verify_move(\"longer string than the 47 bytes that can be held inthe short string optimization.\"));", "originalCommit": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4NjEzNA==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369586134", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-22T14:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3Njc3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369476773", "bodyText": "Perhaps a bit overkill, but could add an explicit sanity check that the long string is in fact longer than the small string optimization capacity of the small_string type. Something like\ntemplate <typename T> struct small_string_inplace_capacity;\ntemplate <uint32_t N> struct small_string_inplace_capacity<small_string<N>> {\n    constexpr static size_t size = N;\n};\nEXPECT_GREATER(moved_into_long.size(), small_string_inplace_capacity<string>::size);\nand vice versa for the string expected to be smaller than the small string capacity.\n(or just use something like string().capacity() if it reflects the small string buffer size)", "author": "vekterli", "createdAt": "2020-01-22T10:22:40Z", "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "originalCommit": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4OTAxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369589019", "bodyText": "Fixed, latter solution.", "author": "baldersheim", "createdAt": "2020-01-22T14:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3Njc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzODIyMA==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369538220", "bodyText": "assign-style functions are less commonly noexcept since it's expected that the underlying allocation may throw. Since we're running under vespamalloc this shouldn't be a problem (process gets killed instead, which is much easier to reason about), but just a general observation.", "author": "vekterli", "createdAt": "2020-01-22T12:45:08Z", "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -315,12 +349,12 @@ class small_string\n         const char *found = (const char *)memchr(buf, c, _sz-start);\n         return (found != NULL) ? (found - buffer()) : (size_type)npos;\n     }\n-    small_string & assign(const char * s) { return assign(s, strlen(s)); }\n-    small_string & assign(const void * s, size_type sz);\n-    small_string & assign(stringref s, size_type pos, size_type sz) {\n+    small_string & assign(const char * s) noexcept { return assign(s, strlen(s)); }\n+    small_string & assign(const void * s, size_type sz) noexcept;\n+    small_string & assign(stringref s, size_type pos, size_type sz) noexcept {\n         return assign(s.data() + pos, sz);\n     }\n-    small_string & assign(stringref rhs) {\n+    small_string & assign(stringref rhs) noexcept {", "originalCommit": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4OTU4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369589583", "bodyText": "Agree, but added noexcept for the same reason as you gave here.", "author": "baldersheim", "createdAt": "2020-01-22T14:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzODIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzOTM1NA==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369539354", "bodyText": "Could consider factoring out the shared code between the move ctor and move assignment operator into a separate function", "author": "vekterli", "createdAt": "2020-01-22T12:47:44Z", "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -200,7 +216,25 @@ class small_string\n             free(buffer());\n         }\n     }\n-    small_string& operator= (const small_string &rhs) {\n+    small_string& operator= (small_string && rhs) noexcept {\n+        reset();\n+        _sz = rhs._sz;\n+        _bufferSize = rhs._bufferSize;\n+        if (rhs.isAllocated()) {\n+            _buf = rhs._buf;\n+            rhs._buf = rhs._stack;\n+            rhs._sz = 0;\n+            rhs._bufferSize = sizeof(rhs._stack);\n+            rhs._stack[0] = 0;\n+        } else {\n+            _buf = _stack;\n+            memcpy(_stack, rhs._stack, sizeof(_stack));\n+            rhs._sz = 0;\n+            rhs._stack[0] = 0;\n+        }", "originalCommit": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MjI0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369592243", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-22T14:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzOTM1NA=="}], "type": "inlineReview"}, {"oid": "e611cfbd4adbda424d68ac4b0054603ae667e11a", "url": "https://github.com/vespa-engine/vespa/commit/e611cfbd4adbda424d68ac4b0054603ae667e11a", "message": "Factor out common code and add more sanity checking to the tests.", "committedDate": "2020-01-22T14:31:25Z", "type": "commit"}]}