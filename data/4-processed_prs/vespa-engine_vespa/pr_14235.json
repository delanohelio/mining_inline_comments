{"pr_number": 14235, "pr_title": "- Add contained support for current  serialization formats.", "pr_createdAt": "2020-09-02T04:39:39Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14235", "timeline": [{"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "url": "https://github.com/vespa-engine/vespa/commit/4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "message": "- Add contained support for current  serialization formats.\n- Add support for future compressed formats.", "committedDate": "2020-09-02T04:25:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODYyNA==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481928624", "bodyText": "Consider adding Chunk suffix to class name.", "author": "toregge", "createdAt": "2020-09-02T09:22:23Z", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {", "originalCommit": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTY3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959675", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-09-02T10:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODg0NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481928845", "bodyText": "Consider adding Chunk suffix to class name.", "author": "toregge", "createdAt": "2020-09-02T09:22:44Z", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {", "originalCommit": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTc2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959767", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-09-02T10:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTA5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481929099", "bodyText": "Consider adding Chunk suffix to class name.", "author": "toregge", "createdAt": "2020-09-02T09:23:06Z", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// Future default chunk serialisation format\n+class XXH64Compressed : public IChunk {", "originalCommit": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTg1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959853", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-09-02T10:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzMjU4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481932585", "bodyText": "Consider throwing exception instead.", "author": "toregge", "createdAt": "2020-09-02T09:28:40Z", "path": "searchlib/src/vespa/searchlib/transactionlog/ichunk.cpp", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"chunks.h\"\n+#include <vespa/vespalib/util/stringfmt.h>\n+#include <vespa/vespalib/util/crc.h>\n+#include <xxhash.h>\n+#include <cassert>\n+\n+using std::runtime_error;\n+using std::make_unique;\n+using vespalib::make_string;\n+using vespalib::nbostream_longlivedbuf;\n+using vespalib::compression::CompressionConfig;\n+\n+namespace search::transactionlog {\n+\n+Encoding::Encoding(Crc crc, Compression compression)\n+    : _raw(crc | (compression << 4))\n+{\n+    assert(crc <= Crc::xxh64);\n+    assert(compression <= Compression::zstd);\n+}\n+\n+IChunk::~IChunk() = default;\n+\n+void\n+IChunk::add(const Packet::Entry & entry) {\n+    _entries.emplace_back(entry);\n+}\n+\n+SerialNumRange\n+IChunk::range() const {\n+    return _entries.empty()\n+           ? SerialNumRange()\n+           : SerialNumRange(_entries.front().serial(), _entries.back().serial());\n+}\n+\n+void\n+IChunk::deserializeEntries(nbostream & is) {\n+    while (is.good() && !is.empty()) {\n+        Packet::Entry e;\n+        e.deserialize(is);\n+        add(e);\n+    }\n+}\n+\n+void\n+IChunk::serializeEntries(nbostream & os) const {\n+    for (const auto & e : _entries) {\n+        e.serialize(os);\n+    }\n+}\n+\n+Encoding\n+IChunk::encode(nbostream & os) const {\n+    return onEncode(os);\n+}\n+\n+void\n+IChunk::decode(nbostream & is) {\n+    onDecode(is);\n+}\n+\n+IChunk::UP\n+IChunk::create(uint8_t chunkType) {\n+    return create(Encoding(chunkType), 9);\n+}\n+IChunk::UP\n+IChunk::create(Encoding encoding, uint8_t compressionLevel) {\n+    switch (encoding.getCrc()) {\n+        case Encoding::Crc::xxh64:\n+            switch (encoding.getCompression()) {\n+                case Encoding::Compression::none:\n+                    return make_unique<XXH64None>();\n+                case Encoding::Compression::none_multi:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::NONE_MULTI, compressionLevel);\n+                case Encoding::Compression::lz4:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);\n+                case Encoding::Compression::zstd:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::ZSTD, compressionLevel);\n+                default:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);", "originalCommit": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2NTE2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481965162", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-09-02T10:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzMjU4NQ=="}], "type": "inlineReview"}, {"oid": "05c5a7341b39a63299d7c95ca88045a34f21e3f7", "url": "https://github.com/vespa-engine/vespa/commit/05c5a7341b39a63299d7c95ca88045a34f21e3f7", "message": "Add Chunk as suffix for types and throw instead of making a guess.", "committedDate": "2020-09-02T10:26:44Z", "type": "commit"}]}