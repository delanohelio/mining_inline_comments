{"pr_number": 11822, "pr_title": "Balder/reduce bytebuffer exposure", "pr_createdAt": "2020-01-16T15:44:12Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11822", "timeline": [{"oid": "6abc05684fc3fe46da2b159b8944fae9adb086a4", "url": "https://github.com/vespa-engine/vespa/commit/6abc05684fc3fe46da2b159b8944fae9adb086a4", "message": "GC unused constructors.", "committedDate": "2020-01-16T15:41:23Z", "type": "commit"}, {"oid": "d3cf455cba32ef3f5280634470858e80761d8450", "url": "https://github.com/vespa-engine/vespa/commit/d3cf455cba32ef3f5280634470858e80761d8450", "message": "Unify towards nbostream", "committedDate": "2020-01-16T15:41:23Z", "type": "commit"}, {"oid": "b1bc742e8ac18dd41ea8f19919005257fbfa277b", "url": "https://github.com/vespa-engine/vespa/commit/b1bc742e8ac18dd41ea8f19919005257fbfa277b", "message": "Remove complicated option for slicing as it is not used anywhere.", "committedDate": "2020-01-16T15:41:24Z", "type": "commit"}, {"oid": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181", "url": "https://github.com/vespa-engine/vespa/commit/d092c8e45fe74f0fe7808a6d4fa363fb0a009181", "message": "GC unused code and simplify StructFieldValue.", "committedDate": "2020-01-17T09:25:04Z", "type": "commit"}, {"oid": "21aa89bea7799ef8da18c1804c3d6fddfc085449", "url": "https://github.com/vespa-engine/vespa/commit/21aa89bea7799ef8da18c1804c3d6fddfc085449", "message": "GC unused swap", "committedDate": "2020-01-17T09:41:13Z", "type": "commit"}, {"oid": "c9b92a456b0dd9980dfa17806b4f0948be60002f", "url": "https://github.com/vespa-engine/vespa/commit/c9b92a456b0dd9980dfa17806b4f0948be60002f", "message": "GC unused code", "committedDate": "2020-01-17T09:59:48Z", "type": "commit"}, {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6", "url": "https://github.com/vespa-engine/vespa/commit/5eaae9afb93ad82a931e117a14babdbb271762c6", "message": "Simplify as functionality is abandoned.", "committedDate": "2020-01-17T12:30:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNjY2NA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367936664", "bodyText": "Could consider wrapping the \"deserialize document from working byte buffer\" case in its own utility method to avoid duplication", "author": "vekterli", "createdAt": "2020-01-17T13:34:07Z", "path": "documentapi/src/vespa/documentapi/messagebus/routablefactories60.cpp", "diffHunk": "@@ -540,7 +542,9 @@ RoutableFactories60::MapVisitorReplyFactory::doEncode(const DocumentReply &, ves\n \n void\n RoutableFactories60::PutDocumentMessageFactory::decodeInto(PutDocumentMessage & msg, document::ByteBuffer & buf) const {\n-    msg.setDocument(make_shared<document::Document>(_repo, buf));\n+    vespalib::nbostream stream(buf.getBufferAtPos(), buf.getRemaining());\n+    msg.setDocument(make_shared<document::Document>(_repo, stream));\n+    buf.incPos(buf.getRemaining() - stream.size());", "originalCommit": "d3cf455cba32ef3f5280634470858e80761d8450", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMjY4NQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368822685", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-21T05:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNjY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0MjcwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367942709", "bodyText": "Nit: missing whitespace after comma", "author": "vekterli", "createdAt": "2020-01-17T13:47:50Z", "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "diffHunk": "@@ -34,6 +34,22 @@ SerializableArray::SerializableArray()\n {\n }\n \n+SerializableArray::SerializableArray(EntryMap entries, ByteBuffer::UP buffer,\n+                                     CompressionConfig::Type comp_type,uint32_t uncompressed_length)", "originalCommit": "b1bc742e8ac18dd41ea8f19919005257fbfa277b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMDMzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368820331", "bodyText": "Added", "author": "baldersheim", "createdAt": "2020-01-21T05:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0MjcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367948053", "bodyText": "I'm not sure about testing the size of STL types, as these are implementation defined. Though I suppose we already transitively depend on these since we're checking the sizes of more complex types that include STL types in them...\nCould also make these static_assert instead to catch at compile time, since they don't depend on any runtime info.", "author": "vekterli", "createdAt": "2020-01-17T13:59:38Z", "path": "document/src/tests/documenttestcase.cpp", "diffHunk": "@@ -28,10 +30,15 @@ using namespace fieldvalue;\n \n TEST(DocumentTest, testSizeOf)\n {\n+    EXPECT_EQ(24u, sizeof(std::vector<char>));", "originalCommit": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzY1MA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368823650", "bodyText": "I will keep as is to monitor changes.", "author": "baldersheim", "createdAt": "2020-01-21T06:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0OTkxNg==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367949916", "bodyText": "Since this changes the behavior from using chunk 1 to chunk 0 in the case of (legacy) 2 chunks, I presume we rather want to put it into the \"header\" chunk anyway?", "author": "vekterli", "createdAt": "2020-01-17T14:03:42Z", "path": "document/src/vespa/document/fieldvalue/structfieldvalue.cpp", "diffHunk": "@@ -262,7 +261,7 @@ StructFieldValue::setFieldValue(const Field& field, FieldValue::UP value)\n         _chunks.push_back(std::make_unique<SerializableArray>());\n     }\n \n-    _chunks.back().set(fieldId, std::move(serialized));\n+    _chunks[0].set(fieldId, std::move(serialized));", "originalCommit": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0NTkxNA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368645914", "bodyText": "yes.", "author": "baldersheim", "createdAt": "2020-01-20T16:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0OTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1OTg2NA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367959864", "bodyText": "Consider updating comment to reflect new semantics", "author": "vekterli", "createdAt": "2020-01-17T14:24:10Z", "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -93,14 +73,11 @@ class ByteBuffer\n     /** @return Returns the index of the current position in the buffer. */\n     size_t getPos() const { return _pos; }\n \n-    /** @return Returns the limit. */\n-    size_t getLimit() const { return _limit; }\n-\n     /**\n      * @return Returns the number of bytes remaining in the buffer - that is,\n      *         getLimit()-getPos().\n     */\n-    size_t getRemaining() const { return _limit-_pos; }\n+    size_t getRemaining() const { return _len -_pos; }", "originalCommit": "5eaae9afb93ad82a931e117a14babdbb271762c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODAzNw==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648037", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-01-20T16:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1OTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTM2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367961369", "bodyText": "Since getRemaining now has different semantics than it used to, is there any other code that might be expecting the old behavior and may now change in subtle ways?", "author": "vekterli", "createdAt": "2020-01-17T14:27:04Z", "path": "document/src/tests/testbytebuffer.cpp", "diffHunk": "@@ -136,251 +53,248 @@ TEST(ByteBuffer_Test, test_copy_constructor)\n \n TEST(ByteBuffer_Test, test_putGetFlip)\n {\n-    ByteBuffer* newBuf=new ByteBuffer(100);\n+    ByteBuffer newBuf(100);\n \n     try {\n-        newBuf->putInt(10);\n+        newBuf.putInt(10);\n         int test;\n-        newBuf->flip();\n+        newBuf.flip();\n \n-        newBuf->getInt(test);\n-        EXPECT_TRUE(test==10);\n+        newBuf.getInt(test);\n+        EXPECT_EQ(test, 10);\n \n-        newBuf->clear();\n-        newBuf->putDouble(3.35);\n-        newBuf->flip();\n-        EXPECT_TRUE(newBuf->getRemaining()==sizeof(double));\n+        newBuf.clear();\n+        newBuf.putDouble(3.35);\n+        newBuf.flip();\n+        EXPECT_EQ(newBuf.getRemaining(), 100);", "originalCommit": "5eaae9afb93ad82a931e117a14babdbb271762c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODU5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648599", "bodyText": "I think that now that length is const and flip, clear, and setPos are gone we are fine.", "author": "baldersheim", "createdAt": "2020-01-20T16:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjI2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367962265", "bodyText": "Consider updating comment to reflect new semantics", "author": "vekterli", "createdAt": "2020-01-17T14:28:51Z", "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -134,17 +100,13 @@ class ByteBuffer\n \n     void incPosNoCheck(size_t pos) {\n         _pos += pos;\n-#ifdef __FORCE_VALGRIND_ON_SERIALIZE__\n-        forceValgrindStart2Pos();\n-#endif\n     }\n \n     /**\n      * Resets pos to 0, and sets limit to old pos. Use this before reading\n      * from a buffer you have written to\n      */\n     void flip() {\n-        _limit = _pos;\n         _pos = 0;", "originalCommit": "5eaae9afb93ad82a931e117a14babdbb271762c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODE2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648167", "bodyText": "Code removed", "author": "baldersheim", "createdAt": "2020-01-20T16:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjI2NQ=="}], "type": "inlineReview"}, {"oid": "1d3fe1bedb648cfd497eeee61478fa45f332255b", "url": "https://github.com/vespa-engine/vespa/commit/1d3fe1bedb648cfd497eeee61478fa45f332255b", "message": "GC a load of unused code. ByteBuffer towards read only.", "committedDate": "2020-01-20T13:04:49Z", "type": "commit"}, {"oid": "1f9cb926b91659840e687f9cab0f508522d58690", "url": "https://github.com/vespa-engine/vespa/commit/1f9cb926b91659840e687f9cab0f508522d58690", "message": "Make it known that getting serialized size will always be expensive.", "committedDate": "2020-01-20T15:50:01Z", "type": "commit"}, {"oid": "543360cbd31917ab0ba71bed0e89ee7b4b1b359c", "url": "https://github.com/vespa-engine/vespa/commit/543360cbd31917ab0ba71bed0e89ee7b4b1b359c", "message": "Make length const.", "committedDate": "2020-01-20T16:24:24Z", "type": "commit"}, {"oid": "ce14cf6fb4d97902205107968ed0455784a3a3e7", "url": "https://github.com/vespa-engine/vespa/commit/ce14cf6fb4d97902205107968ed0455784a3a3e7", "message": "32bit size is more than enough here.", "committedDate": "2020-01-20T16:37:17Z", "type": "commit"}, {"oid": "cc1be38ff2d4328dd6a0ca0e633b7ecafeee30c6", "url": "https://github.com/vespa-engine/vespa/commit/cc1be38ff2d4328dd6a0ca0e633b7ecafeee30c6", "message": "Update comments", "committedDate": "2020-01-20T16:54:19Z", "type": "commit"}, {"oid": "9a43c6a6228ead44bd6a5ad27a578adc53a207ab", "url": "https://github.com/vespa-engine/vespa/commit/9a43c6a6228ead44bd6a5ad27a578adc53a207ab", "message": "GC unused constructor", "committedDate": "2020-01-20T17:06:27Z", "type": "commit"}, {"oid": "bafbb6423c7b628fce955c8ae2136e2b1be761ef", "url": "https://github.com/vespa-engine/vespa/commit/bafbb6423c7b628fce955c8ae2136e2b1be761ef", "message": "GC unused code", "committedDate": "2020-01-20T17:20:08Z", "type": "commit"}, {"oid": "d47460a83e0cc3938ccc69327f433f110a6cf2da", "url": "https://github.com/vespa-engine/vespa/commit/d47460a83e0cc3938ccc69327f433f110a6cf2da", "message": "Fix typo", "committedDate": "2020-01-20T17:22:30Z", "type": "commit"}, {"oid": "d6a77cbf0cf342f2091c9c92c58ace6ed4951b89", "url": "https://github.com/vespa-engine/vespa/commit/d6a77cbf0cf342f2091c9c92c58ace6ed4951b89", "message": "Add TODO for next commit.", "committedDate": "2020-01-20T17:29:16Z", "type": "commit"}, {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5", "url": "https://github.com/vespa-engine/vespa/commit/da91b7fd521edc6b00498247c91a58a3d8c132b5", "message": "Unify and factor out common code.", "committedDate": "2020-01-21T06:03:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNjk0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369016943", "bodyText": "Consider adding a data() function to nbostream, since c_str() implies a zero-terminated C string (I don't think we guarantee zero termination of nbostream buffers?)", "author": "vekterli", "createdAt": "2020-01-21T14:02:11Z", "path": "document/src/tests/documentupdatetestcase.cpp", "diffHunk": "@@ -83,25 +82,25 @@ void testRoundtripSerialize(const UpdateType& update, const DataType &type) {\n }\n \n void\n-writeBufferToFile(const ByteBuffer &buf, const vespalib::string &fileName)\n+writeBufferToFile(const nbostream &buf, const vespalib::string &fileName)\n {\n     auto file = std::fstream(fileName, std::ios::out | std::ios::binary);\n-    file.write(buf.getBuffer(), buf.getPos());\n+    file.write(buf.c_str(), buf.size());", "originalCommit": "da91b7fd521edc6b00498247c91a58a3d8c132b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDIyOA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369190228", "bodyText": "Fixed", "author": "baldersheim", "createdAt": "2020-01-21T19:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNjk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369031162", "bodyText": "As a bit of an aside, what is the rationale behind us zero-terminating ByteBuffers during copy construction? I'm not sure if this is an invariant we maintain when constructing ByteBuffers from raw buffers. Seems like if we e.g. try to alloc page-aligned sizes, this behavior will cause copied allocs to use one more page than intended from the one added byte.", "author": "vekterli", "createdAt": "2020-01-21T14:27:11Z", "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -65,21 +84,17 @@ ByteBuffer::ByteBuffer(const ByteBuffer& rhs) :\n       _ownedBuffer()\n {\n     if (rhs._len > 0 && rhs._buffer) {\n-        Alloc::alloc(rhs._len + 1).swap(_ownedBuffer);\n-        _buffer = static_cast<char *>(_ownedBuffer.get());\n-        memcpy(_buffer, rhs._buffer, rhs._len);\n-        _buffer[rhs._len] = 0;\n+        Alloc buf = Alloc::alloc(rhs._len + 1);\n+        memcpy(buf.get(), rhs._buffer, rhs._len);\n+        static_cast<char *>(buf.get())[rhs._len] = 0;", "originalCommit": "da91b7fd521edc6b00498247c91a58a3d8c132b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDgyNg==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369190826", "bodyText": "I have no clue. This is the only place we do so and it is not consistent. I will try to remove it and see how it goes.", "author": "baldersheim", "createdAt": "2020-01-21T19:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwODEzNA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369208134", "bodyText": "Removed.", "author": "baldersheim", "createdAt": "2020-01-21T19:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNTQ2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369035462", "bodyText": "Consider replacing these reinterpret_casts with memcpy instead for happier days with less casts", "author": "vekterli", "createdAt": "2020-01-21T14:34:32Z", "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -132,309 +128,44 @@ void ByteBuffer::getNumericNetwork(int16_t & v) {\n     if (__builtin_expect(getRemaining() < sizeof(v), 0)) {\n         throwOutOfBounds(getRemaining(), sizeof(v));\n     } else {\n-        uint16_t val = *(uint16_t *) (void *) getBufferAtPos();\n+        uint16_t val = *reinterpret_cast<const uint16_t *>(getBufferAtPos());", "originalCommit": "da91b7fd521edc6b00498247c91a58a3d8c132b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNTEyMw==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369205123", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-01-21T19:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwOTU3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369109575", "bodyText": "Consider adding explicit operator<< for ReturnCode; it is used in many unit test macros so having it ostreamable makes \"expectation vs. reality\" printing much better.\nThis would also remove need to add toString() calls in a lot of the result printing functions.", "author": "vekterli", "createdAt": "2020-01-21T16:33:46Z", "path": "storageapi/src/vespa/storageapi/messageapi/returncode.h", "diffHunk": "@@ -121,8 +102,7 @@ class ReturnCode : public document::Deserializable,\n     bool isShutdownRelated() const;\n     bool isBucketDisappearance() const;\n     bool isNonCriticalForIntegrityChecker() const;\n+    vespalib::string toString() const;", "originalCommit": "da91b7fd521edc6b00498247c91a58a3d8c132b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDY4NA==", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369204684", "bodyText": "Done", "author": "baldersheim", "createdAt": "2020-01-21T19:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwOTU3NQ=="}], "type": "inlineReview"}, {"oid": "28e18ba48168b6ea3ca09164c647c96fe261a74a", "url": "https://github.com/vespa-engine/vespa/commit/28e18ba48168b6ea3ca09164c647c96fe261a74a", "message": "c_str -> data", "committedDate": "2020-01-21T19:09:50Z", "type": "commit"}, {"oid": "e7c1a4fc8c55795f707e83ce6d5607e0b41f5099", "url": "https://github.com/vespa-engine/vespa/commit/e7c1a4fc8c55795f707e83ce6d5607e0b41f5099", "message": "Add stream method and use memcpy over casting.", "committedDate": "2020-01-21T19:41:33Z", "type": "commit"}, {"oid": "aa0bfb11d05381a555c197a2ab26ee117c0758e6", "url": "https://github.com/vespa-engine/vespa/commit/aa0bfb11d05381a555c197a2ab26ee117c0758e6", "message": "Remove zero termination.", "committedDate": "2020-01-21T19:47:36Z", "type": "commit"}]}