{"pr_number": 14592, "pr_title": "Arnej/new sparse tensor value 2", "pr_createdAt": "2020-09-28T12:15:18Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14592", "timeline": [{"oid": "5ae7c946cfe7d88ef8d568b466dcfe687ee12458", "url": "https://github.com/vespa-engine/vespa/commit/5ae7c946cfe7d88ef8d568b466dcfe687ee12458", "message": "add SparseTensorValue class and builder", "committedDate": "2020-09-28T12:06:34Z", "type": "commit"}, {"oid": "0508f5625ccf3ce2107e15d17336ef771015c25b", "url": "https://github.com/vespa-engine/vespa/commit/0508f5625ccf3ce2107e15d17336ef771015c25b", "message": "subspaces may be serialized in any order\n\n* in particular, SparseTensor uses a hash-table and its\n  cell arrive in \"random\" order.", "committedDate": "2020-09-28T12:06:34Z", "type": "commit"}, {"oid": "416681c8a5a80bf3ddb960aafc9c3db98363b049", "url": "https://github.com/vespa-engine/vespa/commit/416681c8a5a80bf3ddb960aafc9c3db98363b049", "message": "ensure zero termination", "committedDate": "2020-09-28T12:06:35Z", "type": "commit"}, {"oid": "4390afc15f1de2600a89ed14cffef1881dbf6e62", "url": "https://github.com/vespa-engine/vespa/commit/4390afc15f1de2600a89ed14cffef1881dbf6e62", "message": "add DoubleValueBuilder", "committedDate": "2020-09-28T12:06:35Z", "type": "commit"}, {"oid": "55b186000b19bec24008eefeae9e4c23a476e91e", "url": "https://github.com/vespa-engine/vespa/commit/55b186000b19bec24008eefeae9e4c23a476e91e", "message": "add DenseTensorValueBuilder", "committedDate": "2020-09-28T12:06:35Z", "type": "commit"}, {"oid": "bb304f3b6961292182f5f480a2789e5921746713", "url": "https://github.com/vespa-engine/vespa/commit/bb304f3b6961292182f5f480a2789e5921746713", "message": "add DefaultValueBuilderFactory", "committedDate": "2020-09-28T12:06:35Z", "type": "commit"}, {"oid": "0d15851c160648486389ef3a2154abdc4aeced7c", "url": "https://github.com/vespa-engine/vespa/commit/0d15851c160648486389ef3a2154abdc4aeced7c", "message": "optimize views", "committedDate": "2020-09-28T12:11:30Z", "type": "commit"}, {"oid": "24692327c04f076551c831b450e2c05bcafbbaed", "url": "https://github.com/vespa-engine/vespa/commit/24692327c04f076551c831b450e2c05bcafbbaed", "message": "add unit test for new factory\nno real need for SparseTensorValue to be templated", "committedDate": "2020-09-28T12:11:34Z", "type": "commit"}, {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "url": "https://github.com/vespa-engine/vespa/commit/42e08d6a2649d4e9421ba64de1d310e1e82cc262", "message": "benchmark with new \"adaptive\" factory", "committedDate": "2020-09-28T12:11:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTQ1MA==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495899450", "bodyText": "test name seems a bit off...", "author": "havardpe", "createdAt": "2020-09-28T12:27:17Z", "path": "eval/src/tests/tensor/default_value_builder_factory/default_value_builder_factory_test.cpp", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/value_codec.h>\n+#include <vespa/eval/eval/tensor_spec.h>\n+#include <vespa/eval/tensor/default_value_builder_factory.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value.h>\n+#include <vespa/eval/tensor/dense/dense_tensor.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using namespace vespalib;\n+using namespace vespalib::eval;\n+using namespace vespalib::tensor;\n+using namespace vespalib::eval::packed_mixed_tensor;\n+\n+Value::UP v_of(const TensorSpec &spec) {\n+    return value_from_spec(spec, DefaultValueBuilderFactory::get());\n+}\n+\n+TEST(MakeInputTest, print_some_test_input) {", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwODYzNw==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495908637", "bodyText": "I suggest just dropping unneeded parameters; num_mapped_in and expected_subspaces", "author": "havardpe", "createdAt": "2020-09-28T12:43:43Z", "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.h", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"dense_tensor.h\"\n+\n+namespace vespalib::tensor {\n+\n+/**\n+ * A builder for DenseTensor objects\n+ **/\n+template<typename T>\n+class DenseTensorValueBuilder : public eval::ValueBuilder<T>\n+{\n+private:\n+    eval::ValueType _type;\n+    std::vector<T> _cells;\n+public:\n+    DenseTensorValueBuilder(const eval::ValueType &type, size_t num_mapped_in,", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwOTU4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495909587", "bodyText": "I am a bit sceptical about adding too many loop-based asserts to the code we want to benchmark for fastness.", "author": "havardpe", "createdAt": "2020-09-28T12:45:17Z", "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.cpp", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"dense_tensor_value_builder.h\"\n+\n+namespace vespalib::tensor {\n+\n+template<typename T>\n+DenseTensorValueBuilder<T>::DenseTensorValueBuilder(\n+        const eval::ValueType &type,\n+        size_t num_mapped_in,\n+        size_t subspace_size_in,\n+        size_t)\n+  : _type(type), \n+    _cells(subspace_size_in)\n+{\n+    assert(type.is_dense());", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMTMwMg==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495911302", "bodyText": "prefer using mapped_dims and subspace_size directly instead of 're-calculating' them.", "author": "havardpe", "createdAt": "2020-09-28T12:48:03Z", "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"default_value_builder_factory.h\"\n+#include <vespa/vespalib/util/typify.h>\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/double_value_builder.h>\n+#include <vespa/eval/tensor/dense/dense_tensor_value_builder.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor_builder.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value_builder.h>\n+\n+using namespace vespalib::eval;\n+\n+namespace vespalib::tensor {\n+\n+//-----------------------------------------------------------------------------\n+\n+namespace {\n+\n+struct CreateDefaultValueBuilderBase {\n+    template <typename T> static std::unique_ptr<ValueBuilderBase> invoke(const ValueType &type,\n+                                                                          size_t num_mapped_dims_in,\n+                                                                          size_t subspace_size_in,\n+                                                                          size_t expected_subspaces)\n+    {\n+        assert(check_cell_type<T>(type.cell_type()));\n+        if (type.is_double()) {\n+            return std::make_unique<DoubleValueBuilder>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_dense()) {", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMTM3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495911372", "bodyText": "prefer using mapped_dims and subspace_size directly instead of 're-calculating' them.", "author": "havardpe", "createdAt": "2020-09-28T12:48:09Z", "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"default_value_builder_factory.h\"\n+#include <vespa/vespalib/util/typify.h>\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/double_value_builder.h>\n+#include <vespa/eval/tensor/dense/dense_tensor_value_builder.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor_builder.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value_builder.h>\n+\n+using namespace vespalib::eval;\n+\n+namespace vespalib::tensor {\n+\n+//-----------------------------------------------------------------------------\n+\n+namespace {\n+\n+struct CreateDefaultValueBuilderBase {\n+    template <typename T> static std::unique_ptr<ValueBuilderBase> invoke(const ValueType &type,\n+                                                                          size_t num_mapped_dims_in,\n+                                                                          size_t subspace_size_in,\n+                                                                          size_t expected_subspaces)\n+    {\n+        assert(check_cell_type<T>(type.cell_type()));\n+        if (type.is_double()) {\n+            return std::make_unique<DoubleValueBuilder>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_dense()) {\n+            return std::make_unique<DenseTensorValueBuilder<T>>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_sparse()) {", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMjAzNg==", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495912036", "bodyText": "consider dropping unneeded parameters", "author": "havardpe", "createdAt": "2020-09-28T12:49:16Z", "path": "eval/src/vespa/eval/eval/double_value_builder.h", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value.h\"\n+\n+namespace vespalib::eval {\n+\n+/**\n+ * A trivial builder for DoubleValue objects\n+ **/\n+class DoubleValueBuilder : public ValueBuilder<double>\n+{\n+private:\n+    double _value;\n+public:\n+    DoubleValueBuilder(const ValueType &type, size_t num_mapped_in,", "originalCommit": "42e08d6a2649d4e9421ba64de1d310e1e82cc262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e533d6f97052838eaa47268f086d9bbc560c20a9", "url": "https://github.com/vespa-engine/vespa/commit/e533d6f97052838eaa47268f086d9bbc560c20a9", "message": "we need templated SparseTensorValue after all", "committedDate": "2020-09-28T13:37:02Z", "type": "commit"}, {"oid": "0285fe78515a40aeef8fa2e601cd1e9e744408d9", "url": "https://github.com/vespa-engine/vespa/commit/0285fe78515a40aeef8fa2e601cd1e9e744408d9", "message": "just hold std::vector<T> inside SparseTensorValue", "committedDate": "2020-09-28T13:57:37Z", "type": "commit"}, {"oid": "574b67881df1e48c21069dba9bd59ad1a3dc2670", "url": "https://github.com/vespa-engine/vespa/commit/574b67881df1e48c21069dba9bd59ad1a3dc2670", "message": "minor refactoring", "committedDate": "2020-09-28T14:03:18Z", "type": "commit"}, {"oid": "64770dcc3e0db3fd020c03857bc781d6a4e80e98", "url": "https://github.com/vespa-engine/vespa/commit/64770dcc3e0db3fd020c03857bc781d6a4e80e98", "message": "less asserts and parameters", "committedDate": "2020-09-28T14:15:34Z", "type": "commit"}, {"oid": "ad6340c70b603b4e924088a8f396d92c03bcf944", "url": "https://github.com/vespa-engine/vespa/commit/ad6340c70b603b4e924088a8f396d92c03bcf944", "message": "fix naming in test", "committedDate": "2020-09-28T14:30:23Z", "type": "commit"}, {"oid": "52e63a912e0dd705c2885f11e5f9230e3ccd8a22", "url": "https://github.com/vespa-engine/vespa/commit/52e63a912e0dd705c2885f11e5f9230e3ccd8a22", "message": "use provided variables", "committedDate": "2020-09-28T14:39:49Z", "type": "commit"}]}