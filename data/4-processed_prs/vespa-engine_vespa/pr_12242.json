{"pr_number": 12242, "pr_title": "Implement TLS client SNI and hostname validation in OpenSSL codec", "pr_createdAt": "2020-02-18T11:56:57Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12242", "timeline": [{"oid": "79ef6b54da01e4819291ae10faa0fe5e832ac1a2", "url": "https://github.com/vespa-engine/vespa/commit/79ef6b54da01e4819291ae10faa0fe5e832ac1a2", "message": "Implement TLS client SNI and hostname validation in OpenSSL codec\n\nAlso adds `disable-hostname-validation` config entry to TLS JSON\nconfig file parsing in C++.\n\nFor the time being, hostname validation is implicitly disabled\nunless explicitly specified in the config file. This will be\ngradually changed over to be implicitly enabled by default.\nSNI is always sent when a valid connection spec is provided.", "committedDate": "2020-02-17T16:40:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDgxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12242#discussion_r383814811", "bodyText": "set hostname yes/no validation explicitly?", "author": "havardpe", "createdAt": "2020-02-25T11:14:20Z", "path": "vespalib/src/tests/net/tls/openssl_impl/openssl_impl_test.cpp", "diffHunk": "@@ -57,11 +57,23 @@ void print_decode_result(const char* mode, const DecodeResult& res) {\n             decode_state_to_str(res.state));\n }\n \n+TransportSecurityOptions ts_from_pems(vespalib::stringref ca_certs_pem,\n+                                      vespalib::stringref cert_chain_pem,\n+                                      vespalib::stringref private_key_pem)\n+{\n+    auto ts_builder = TransportSecurityOptions::Params().\n+            ca_certs_pem(ca_certs_pem).\n+            cert_chain_pem(cert_chain_pem).\n+            private_key_pem(private_key_pem).\n+            authorized_peers(AuthorizedPeers::allow_all_authenticated());\n+    return TransportSecurityOptions(std::move(ts_builder));", "originalCommit": "79ef6b54da01e4819291ae10faa0fe5e832ac1a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxODc1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12242#discussion_r383818756", "bodyText": "consider using private ctor tag trick", "author": "havardpe", "createdAt": "2020-02-25T11:22:53Z", "path": "vespalib/src/vespa/vespalib/net/tls/impl/openssl_crypto_codec_impl.cpp", "diffHunk": "@@ -230,6 +234,59 @@ OpenSslCryptoCodecImpl::OpenSslCryptoCodecImpl(std::shared_ptr<OpenSslTlsContext\n \n OpenSslCryptoCodecImpl::~OpenSslCryptoCodecImpl() = default;\n \n+std::unique_ptr<OpenSslCryptoCodecImpl>\n+OpenSslCryptoCodecImpl::make_client_codec(std::shared_ptr<OpenSslTlsContextImpl> ctx,\n+                                          const SocketSpec& peer_spec,\n+                                          const SocketAddress& peer_address)\n+{\n+    // Naked new due to private ctor", "originalCommit": "79ef6b54da01e4819291ae10faa0fe5e832ac1a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgyMDk1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/12242#discussion_r383820953", "bodyText": "should giving an invalid peer spec fail the handshake if hostname validation is enabled?", "author": "havardpe", "createdAt": "2020-02-25T11:27:44Z", "path": "vespalib/src/vespa/vespalib/net/tls/impl/openssl_crypto_codec_impl.cpp", "diffHunk": "@@ -230,6 +234,59 @@ OpenSslCryptoCodecImpl::OpenSslCryptoCodecImpl(std::shared_ptr<OpenSslTlsContext\n \n OpenSslCryptoCodecImpl::~OpenSslCryptoCodecImpl() = default;\n \n+std::unique_ptr<OpenSslCryptoCodecImpl>\n+OpenSslCryptoCodecImpl::make_client_codec(std::shared_ptr<OpenSslTlsContextImpl> ctx,\n+                                          const SocketSpec& peer_spec,\n+                                          const SocketAddress& peer_address)\n+{\n+    // Naked new due to private ctor\n+    return std::unique_ptr<OpenSslCryptoCodecImpl>(\n+            new OpenSslCryptoCodecImpl(std::move(ctx), peer_spec, peer_address, Mode::Client));\n+}\n+std::unique_ptr<OpenSslCryptoCodecImpl>\n+OpenSslCryptoCodecImpl::make_server_codec(std::shared_ptr<OpenSslTlsContextImpl> ctx,\n+                                          const SocketAddress& peer_address)\n+{\n+    // Naked new due to private ctor\n+    return std::unique_ptr<OpenSslCryptoCodecImpl>(\n+            new OpenSslCryptoCodecImpl(std::move(ctx), SocketSpec::invalid, peer_address, Mode::Server));\n+}\n+\n+void OpenSslCryptoCodecImpl::enable_hostname_validation_if_requested() {\n+    if (_peer_spec.valid() && !_ctx->transport_security_options().disable_hostname_validation()) {", "originalCommit": "79ef6b54da01e4819291ae10faa0fe5e832ac1a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}