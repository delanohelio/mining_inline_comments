{"pr_number": 15566, "pr_title": "use TensorSpec::from_expr", "pr_createdAt": "2020-12-01T13:54:28Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15566", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNTM1NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15566#discussion_r533435355", "bodyText": "I suggest using ValueType::from_spec(...)::is_scalar combined with TensorSpec::as_double here", "author": "havardpe", "createdAt": "2020-12-01T14:11:04Z", "path": "eval/src/apps/eval_expr/eval_expr.cpp", "diffHunk": "@@ -19,17 +19,11 @@ int main(int argc, char **argv) {\n         fprintf(stderr, \"expression error: %s\\n\", function->get_error().c_str());\n         return 1;\n     }\n-    InterpretedFunction interpreted(SimpleTensorEngine::ref(), *function, NodeTypes());\n-    InterpretedFunction::Context ctx(interpreted);\n-    SimpleParams params({});\n-    const Value &result = interpreted.eval(ctx, params);\n-    if (result.is_double()) {\n-        fprintf(stdout, \"%.32g\\n\", result.as_double());\n-    } else if (result.is_tensor()) {\n-        vespalib::string str = SimpleTensorEngine::ref().to_spec(result).to_string();\n-        fprintf(stdout, \"%s\\n\", str.c_str());\n+    auto result = TensorSpec::from_expr(argv[1]);\n+    if (result.type() == \"double\" && result.cells().size() == 1) {\n+        fprintf(stdout, \"%.32g\\n\", result.cells().begin()->second.value);", "originalCommit": "733238e6e2d089639e4da03dc0d3708d7f53b9e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY2MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15566#discussion_r533436661", "bodyText": "consider keeping the \"error\" case if ValueType::form_spec gives error type", "author": "havardpe", "createdAt": "2020-12-01T14:12:52Z", "path": "eval/src/apps/eval_expr/eval_expr.cpp", "diffHunk": "@@ -19,17 +19,11 @@ int main(int argc, char **argv) {\n         fprintf(stderr, \"expression error: %s\\n\", function->get_error().c_str());\n         return 1;\n     }\n-    InterpretedFunction interpreted(SimpleTensorEngine::ref(), *function, NodeTypes());\n-    InterpretedFunction::Context ctx(interpreted);\n-    SimpleParams params({});\n-    const Value &result = interpreted.eval(ctx, params);\n-    if (result.is_double()) {\n-        fprintf(stdout, \"%.32g\\n\", result.as_double());\n-    } else if (result.is_tensor()) {\n-        vespalib::string str = SimpleTensorEngine::ref().to_spec(result).to_string();\n-        fprintf(stdout, \"%s\\n\", str.c_str());\n+    auto result = TensorSpec::from_expr(argv[1]);\n+    if (result.type() == \"double\" && result.cells().size() == 1) {\n+        fprintf(stdout, \"%.32g\\n\", result.cells().begin()->second.value);\n     } else {\n-        fprintf(stdout, \"error\\n\");\n+        fprintf(stdout, \"%s\\n\", result.to_string().c_str());", "originalCommit": "733238e6e2d089639e4da03dc0d3708d7f53b9e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ec576774dddfaf3437048629f3a135a41c245ba", "url": "https://github.com/vespa-engine/vespa/commit/4ec576774dddfaf3437048629f3a135a41c245ba", "message": "use TensorSpec::from_expr", "committedDate": "2020-12-02T08:45:51Z", "type": "commit"}, {"oid": "85b9c11d6bbecad72b6f596392063b4c096e932e", "url": "https://github.com/vespa-engine/vespa/commit/85b9c11d6bbecad72b6f596392063b4c096e932e", "message": "check for error and scalar via ValueType", "committedDate": "2020-12-02T08:45:51Z", "type": "commit"}, {"oid": "85b9c11d6bbecad72b6f596392063b4c096e932e", "url": "https://github.com/vespa-engine/vespa/commit/85b9c11d6bbecad72b6f596392063b4c096e932e", "message": "check for error and scalar via ValueType", "committedDate": "2020-12-02T08:45:51Z", "type": "forcePushed"}]}