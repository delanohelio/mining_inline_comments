{"pr_number": 9024, "pr_title": "MULE-18316: Refactor life cycle tests", "pr_createdAt": "2020-07-03T18:39:04Z", "pr_url": "https://github.com/mulesoft/mule/pull/9024", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MDk3Ng==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449680976", "bodyText": "use the rule instead of the runner", "author": "elrodro83", "createdAt": "2020-07-03T18:45:26Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MTAyMA==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449681020", "bodyText": "static import", "author": "elrodro83", "createdAt": "2020-07-03T18:45:36Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+@Feature(CONFIGURATION_COMPONENT_LOCATOR)\n+@Story(ComponentLifeCycle.COMPONENT_LIFE_CYCLE)\n+public class LazyComponentInitializerAdapterTestCase extends AbstractDslModelTestCase {", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MTM2MQ==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449681361", "bodyText": "since this is just a move/refactor of tests, the issue should point to the original one, not the refactor one", "author": "elrodro83", "createdAt": "2020-07-03T18:47:25Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+@Feature(CONFIGURATION_COMPONENT_LOCATOR)\n+@Story(ComponentLifeCycle.COMPONENT_LIFE_CYCLE)\n+public class LazyComponentInitializerAdapterTestCase extends AbstractDslModelTestCase {\n+\n+  private LazyMuleArtifactContext lazyMuleArtifactContext;\n+\n+  private static final String MY_FLOW = \"myFlow\";\n+\n+  private ElementDeclarer declarer;\n+\n+  @Mock\n+  private ExtensionManager extensionManager;\n+\n+  @Mock\n+  private OptionalObjectsController optionalObjectsController;\n+\n+  @Mock\n+  private LockFactory lockFactory;\n+\n+  @Mock(extraInterfaces = {Initialisable.class, Disposable.class, Startable.class, Stoppable.class})\n+  private Processor targetProcessor;\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private MuleContextWithRegistry muleContext;\n+\n+  private Set<ExtensionModel> extensions;\n+\n+  private AtomicInteger initializations;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initializations = new AtomicInteger(0);\n+\n+    declarer = forExtension(EXTENSION_NAME);\n+    muleContext = mockContextWithServices();\n+    extensions = ImmutableSet.<ExtensionModel>builder()\n+        .add(getExtensionModel())\n+        .add(mockExtension)\n+        .build();\n+\n+    MessageProcessorChainBuilder messageProcessorChainBuilder = new DefaultMessageProcessorChainBuilder().chain(targetProcessor);\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleRegistry mockedRegistry = muleContext.getRegistry();\n+\n+    when(extensionManager.getExtensions()).thenReturn(extensions);\n+    when(muleContext.getExecutionClassLoader()).thenReturn(currentThread().getContextClassLoader());\n+    when(muleContext.getExtensionManager()).thenReturn(extensionManager);\n+    when(mockedRegistry.lookupObject(MY_FLOW)).thenReturn(messageProcessorChainBuilder);\n+    when(mockedRegistry.get(OBJECT_REGISTRY)).thenReturn(new DefaultRegistry(muleContext));\n+\n+    lazyMuleArtifactContext = createLazyMuleArtifactContextStub(beanFactory);\n+\n+    doAnswer(a -> {\n+      initializations.incrementAndGet();\n+      return null;\n+    }).when((Initialisable) targetProcessor).initialise();\n+  }\n+\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationRequest() {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(1));\n+\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MTM3NA==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449681374", "bodyText": "since this is just a move/refactor of tests, the issue should point to the original one, not the refactor one", "author": "elrodro83", "createdAt": "2020-07-03T18:47:31Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+@Feature(CONFIGURATION_COMPONENT_LOCATOR)\n+@Story(ComponentLifeCycle.COMPONENT_LIFE_CYCLE)\n+public class LazyComponentInitializerAdapterTestCase extends AbstractDslModelTestCase {\n+\n+  private LazyMuleArtifactContext lazyMuleArtifactContext;\n+\n+  private static final String MY_FLOW = \"myFlow\";\n+\n+  private ElementDeclarer declarer;\n+\n+  @Mock\n+  private ExtensionManager extensionManager;\n+\n+  @Mock\n+  private OptionalObjectsController optionalObjectsController;\n+\n+  @Mock\n+  private LockFactory lockFactory;\n+\n+  @Mock(extraInterfaces = {Initialisable.class, Disposable.class, Startable.class, Stoppable.class})\n+  private Processor targetProcessor;\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private MuleContextWithRegistry muleContext;\n+\n+  private Set<ExtensionModel> extensions;\n+\n+  private AtomicInteger initializations;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initializations = new AtomicInteger(0);\n+\n+    declarer = forExtension(EXTENSION_NAME);\n+    muleContext = mockContextWithServices();\n+    extensions = ImmutableSet.<ExtensionModel>builder()\n+        .add(getExtensionModel())\n+        .add(mockExtension)\n+        .build();\n+\n+    MessageProcessorChainBuilder messageProcessorChainBuilder = new DefaultMessageProcessorChainBuilder().chain(targetProcessor);\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleRegistry mockedRegistry = muleContext.getRegistry();\n+\n+    when(extensionManager.getExtensions()).thenReturn(extensions);\n+    when(muleContext.getExecutionClassLoader()).thenReturn(currentThread().getContextClassLoader());\n+    when(muleContext.getExtensionManager()).thenReturn(extensionManager);\n+    when(mockedRegistry.lookupObject(MY_FLOW)).thenReturn(messageProcessorChainBuilder);\n+    when(mockedRegistry.get(OBJECT_REGISTRY)).thenReturn(new DefaultRegistry(muleContext));\n+\n+    lazyMuleArtifactContext = createLazyMuleArtifactContextStub(beanFactory);\n+\n+    doAnswer(a -> {\n+      initializations.incrementAndGet();\n+      return null;\n+    }).when((Initialisable) targetProcessor).initialise();\n+  }\n+\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationRequest() {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(1));\n+\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldCreateBeansForSameLocationRequestIfDifferentPhaseApplied() throws InitialisationException {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location, false);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(2));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MTM5Mg==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449681392", "bodyText": "since this is just a move/refactor of tests, the issue should point to the original one, not the refactor one", "author": "elrodro83", "createdAt": "2020-07-03T18:47:35Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+@Feature(CONFIGURATION_COMPONENT_LOCATOR)\n+@Story(ComponentLifeCycle.COMPONENT_LIFE_CYCLE)\n+public class LazyComponentInitializerAdapterTestCase extends AbstractDslModelTestCase {\n+\n+  private LazyMuleArtifactContext lazyMuleArtifactContext;\n+\n+  private static final String MY_FLOW = \"myFlow\";\n+\n+  private ElementDeclarer declarer;\n+\n+  @Mock\n+  private ExtensionManager extensionManager;\n+\n+  @Mock\n+  private OptionalObjectsController optionalObjectsController;\n+\n+  @Mock\n+  private LockFactory lockFactory;\n+\n+  @Mock(extraInterfaces = {Initialisable.class, Disposable.class, Startable.class, Stoppable.class})\n+  private Processor targetProcessor;\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private MuleContextWithRegistry muleContext;\n+\n+  private Set<ExtensionModel> extensions;\n+\n+  private AtomicInteger initializations;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initializations = new AtomicInteger(0);\n+\n+    declarer = forExtension(EXTENSION_NAME);\n+    muleContext = mockContextWithServices();\n+    extensions = ImmutableSet.<ExtensionModel>builder()\n+        .add(getExtensionModel())\n+        .add(mockExtension)\n+        .build();\n+\n+    MessageProcessorChainBuilder messageProcessorChainBuilder = new DefaultMessageProcessorChainBuilder().chain(targetProcessor);\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleRegistry mockedRegistry = muleContext.getRegistry();\n+\n+    when(extensionManager.getExtensions()).thenReturn(extensions);\n+    when(muleContext.getExecutionClassLoader()).thenReturn(currentThread().getContextClassLoader());\n+    when(muleContext.getExtensionManager()).thenReturn(extensionManager);\n+    when(mockedRegistry.lookupObject(MY_FLOW)).thenReturn(messageProcessorChainBuilder);\n+    when(mockedRegistry.get(OBJECT_REGISTRY)).thenReturn(new DefaultRegistry(muleContext));\n+\n+    lazyMuleArtifactContext = createLazyMuleArtifactContextStub(beanFactory);\n+\n+    doAnswer(a -> {\n+      initializations.incrementAndGet();\n+      return null;\n+    }).when((Initialisable) targetProcessor).initialise();\n+  }\n+\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationRequest() {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(1));\n+\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldCreateBeansForSameLocationRequestIfDifferentPhaseApplied() throws InitialisationException {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location, false);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(2));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationFilterRequest() {\n+    ComponentLocationFilter filter = loc -> loc.getLocation().equals(MY_FLOW);\n+\n+    lazyMuleArtifactContext.initializeComponents(filter);\n+    lazyMuleArtifactContext.initializeComponents(filter);\n+\n+    assertThat(initializations.get(), is(1));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MTU0Mg==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r449681542", "bodyText": "if the param is a mock why do you need this no-op methods?", "author": "elrodro83", "createdAt": "2020-07-03T18:48:35Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.api.component.location.Location.builderFromStringRepresentation;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.forExtension;\n+import static org.mule.runtime.app.declaration.api.fluent.ElementDeclarer.newArtifact;\n+import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_REGISTRY;\n+import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.APP;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.MULE_NAME;\n+import static org.mule.runtime.core.api.extension.MuleExtensionModelProvider.getExtensionModel;\n+import static org.mule.runtime.internal.dsl.DslConstants.FLOW_ELEMENT_IDENTIFIER;\n+import static org.mule.tck.util.MuleContextUtils.mockContextWithServices;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.CONFIGURATION_COMPONENT_LOCATOR;\n+import static org.mule.test.allure.AllureConstants.ConfigurationComponentLocatorFeature.ComponentLifeCycle;\n+\n+import java.util.HashMap;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.lock.LockFactory;\n+import org.mule.runtime.api.meta.model.ExtensionModel;\n+import org.mule.runtime.app.declaration.api.ArtifactDeclaration;\n+import org.mule.runtime.app.declaration.api.fluent.ElementDeclarer;\n+import org.mule.runtime.config.api.LazyComponentInitializer.ComponentLocationFilter;\n+import org.mule.runtime.config.dsl.model.AbstractDslModelTestCase;\n+import org.mule.runtime.core.api.extension.ExtensionManager;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.runtime.core.internal.context.MuleContextWithRegistry;\n+import org.mule.runtime.core.internal.registry.DefaultRegistry;\n+import org.mule.runtime.core.internal.registry.MuleRegistry;\n+import org.mule.runtime.core.privileged.processor.chain.DefaultMessageProcessorChainBuilder;\n+import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Issue;\n+import io.qameta.allure.Story;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+@Feature(CONFIGURATION_COMPONENT_LOCATOR)\n+@Story(ComponentLifeCycle.COMPONENT_LIFE_CYCLE)\n+public class LazyComponentInitializerAdapterTestCase extends AbstractDslModelTestCase {\n+\n+  private LazyMuleArtifactContext lazyMuleArtifactContext;\n+\n+  private static final String MY_FLOW = \"myFlow\";\n+\n+  private ElementDeclarer declarer;\n+\n+  @Mock\n+  private ExtensionManager extensionManager;\n+\n+  @Mock\n+  private OptionalObjectsController optionalObjectsController;\n+\n+  @Mock\n+  private LockFactory lockFactory;\n+\n+  @Mock(extraInterfaces = {Initialisable.class, Disposable.class, Startable.class, Stoppable.class})\n+  private Processor targetProcessor;\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private MuleContextWithRegistry muleContext;\n+\n+  private Set<ExtensionModel> extensions;\n+\n+  private AtomicInteger initializations;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initializations = new AtomicInteger(0);\n+\n+    declarer = forExtension(EXTENSION_NAME);\n+    muleContext = mockContextWithServices();\n+    extensions = ImmutableSet.<ExtensionModel>builder()\n+        .add(getExtensionModel())\n+        .add(mockExtension)\n+        .build();\n+\n+    MessageProcessorChainBuilder messageProcessorChainBuilder = new DefaultMessageProcessorChainBuilder().chain(targetProcessor);\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleRegistry mockedRegistry = muleContext.getRegistry();\n+\n+    when(extensionManager.getExtensions()).thenReturn(extensions);\n+    when(muleContext.getExecutionClassLoader()).thenReturn(currentThread().getContextClassLoader());\n+    when(muleContext.getExtensionManager()).thenReturn(extensionManager);\n+    when(mockedRegistry.lookupObject(MY_FLOW)).thenReturn(messageProcessorChainBuilder);\n+    when(mockedRegistry.get(OBJECT_REGISTRY)).thenReturn(new DefaultRegistry(muleContext));\n+\n+    lazyMuleArtifactContext = createLazyMuleArtifactContextStub(beanFactory);\n+\n+    doAnswer(a -> {\n+      initializations.incrementAndGet();\n+      return null;\n+    }).when((Initialisable) targetProcessor).initialise();\n+  }\n+\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationRequest() {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(1));\n+\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldCreateBeansForSameLocationRequestIfDifferentPhaseApplied() throws InitialisationException {\n+    Location location = builderFromStringRepresentation(MY_FLOW).build();\n+\n+    lazyMuleArtifactContext.initializeComponent(location, false);\n+    lazyMuleArtifactContext.initializeComponent(location);\n+\n+    assertThat(initializations.get(), is(2));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldNotCreateBeansForSameLocationFilterRequest() {\n+    ComponentLocationFilter filter = loc -> loc.getLocation().equals(MY_FLOW);\n+\n+    lazyMuleArtifactContext.initializeComponents(filter);\n+    lazyMuleArtifactContext.initializeComponents(filter);\n+\n+    assertThat(initializations.get(), is(1));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18316\")\n+  public void shouldCreateBeansForSameLocationFilterRequestIfDifferentPhaseApplied() {\n+    ComponentLocationFilter filter = loc -> loc.getLocation().equals(MY_FLOW);\n+\n+    lazyMuleArtifactContext.initializeComponents(filter, false);\n+    lazyMuleArtifactContext.initializeComponents(filter);\n+\n+    assertThat(initializations.get(), is(2));\n+  }\n+\n+  @Override\n+  protected void initializeExtensionMock(ExtensionModel extension) {\n+    when(extension.getName()).thenReturn(EXTENSION_NAME);\n+  }\n+\n+  private ArtifactDeclaration getSimpleApp() {\n+    return newArtifact()\n+        .withGlobalElement(forExtension(MULE_NAME)\n+            .newConstruct(FLOW_ELEMENT_IDENTIFIER)\n+            .withRefName(MY_FLOW)\n+            .getDeclaration())\n+        .getDeclaration();\n+  }\n+\n+  private LazyMuleArtifactContext createLazyMuleArtifactContextStub(DefaultListableBeanFactory beanFactory) {\n+    LazyMuleArtifactContext muleArtifactContext =\n+        new LazyMuleArtifactContext(muleContext, new ConfigResource[0], getSimpleApp(),\n+                                    optionalObjectsController, new HashMap<>(), APP,\n+                                    emptyList(), empty(), empty(), true, lockFactory) {\n+\n+          @Override\n+          protected DefaultListableBeanFactory createBeanFactory() {\n+            return beanFactory;\n+          }\n+\n+          @Override\n+          protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\n+            // Bean factory is mocked, so no bean registering here", "originalCommit": "e36e5420fae25b50a42708a7ac45a0354f1421ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee40a311d524a28cd1326d268baeb81095aae9f3", "url": "https://github.com/mulesoft/mule/commit/ee40a311d524a28cd1326d268baeb81095aae9f3", "message": "MULE-18316: Refactor life cycle tests", "committedDate": "2020-07-06T18:56:33Z", "type": "commit"}, {"oid": "7369c2a0cf30ee2dce224d8ba7984caca278fcb3", "url": "https://github.com/mulesoft/mule/commit/7369c2a0cf30ee2dce224d8ba7984caca278fcb3", "message": "Small changes based on PR comments", "committedDate": "2020-07-06T18:56:33Z", "type": "commit"}, {"oid": "7369c2a0cf30ee2dce224d8ba7984caca278fcb3", "url": "https://github.com/mulesoft/mule/commit/7369c2a0cf30ee2dce224d8ba7984caca278fcb3", "message": "Small changes based on PR comments", "committedDate": "2020-07-06T18:56:33Z", "type": "forcePushed"}, {"oid": "8c87174206741c27ad46fdc3bcbead89473178d1", "url": "https://github.com/mulesoft/mule/commit/8c87174206741c27ad46fdc3bcbead89473178d1", "message": "Mock BeanFactory", "committedDate": "2020-07-06T22:29:53Z", "type": "commit"}, {"oid": "8c87174206741c27ad46fdc3bcbead89473178d1", "url": "https://github.com/mulesoft/mule/commit/8c87174206741c27ad46fdc3bcbead89473178d1", "message": "Mock BeanFactory", "committedDate": "2020-07-06T22:29:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTAyMA==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r450525020", "bodyText": "no * imports", "author": "elrodro83", "createdAt": "2020-07-06T23:11:19Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/LazyComponentInitializerAdapterTestCase.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.config.internal;\n+\n+import static java.lang.Thread.currentThread;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.junit.MockitoJUnit.*;", "originalCommit": "8c87174206741c27ad46fdc3bcbead89473178d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NDI5MA==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r450554290", "bodyText": "done", "author": "szaffarano", "createdAt": "2020-07-07T00:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTUyOQ==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r450525529", "bodyText": "what is this?", "author": "elrodro83", "createdAt": "2020-07-06T23:13:00Z", "path": "modules/spring-config/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "originalCommit": "8c87174206741c27ad46fdc3bcbead89473178d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NDI1NQ==", "url": "https://github.com/mulesoft/mule/pull/9024#discussion_r450554255", "bodyText": "This file enables a feature to allow mocking final methods (more info here).  We need it to mock beanFactory.getSingletonMutex()", "author": "szaffarano", "createdAt": "2020-07-07T00:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTUyOQ=="}], "type": "inlineReview"}, {"oid": "9f987f3e7625836cc333cfe12c7db932bb1cfd2b", "url": "https://github.com/mulesoft/mule/commit/9f987f3e7625836cc333cfe12c7db932bb1cfd2b", "message": "Code format", "committedDate": "2020-07-07T00:52:29Z", "type": "commit"}]}