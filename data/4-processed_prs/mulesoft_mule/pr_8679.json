{"pr_number": 8679, "pr_title": "MULE-18047: Add the component that generated a cursor provider", "pr_createdAt": "2020-02-25T23:19:34Z", "pr_url": "https://github.com/mulesoft/mule/pull/8679", "timeline": [{"oid": "1279a3c8e2a16e9b3723bd1ab9be7f84a624808a", "url": "https://github.com/mulesoft/mule/commit/1279a3c8e2a16e9b3723bd1ab9be7f84a624808a", "message": "MULE-18047: Add the component that generated a cursor provider", "committedDate": "2020-02-25T22:55:03Z", "type": "commit"}, {"oid": "91daf6cb2304f200b47e3c483347655e67496609", "url": "https://github.com/mulesoft/mule/commit/91daf6cb2304f200b47e3c483347655e67496609", "message": "Eliminate unused imports", "committedDate": "2020-02-25T23:31:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTIwMQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r384479201", "bodyText": "mention just setting a property. This is valid for command line, but in CH or runtime fabric these are set differently", "author": "elrodro83", "createdAt": "2020-02-26T13:06:24Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderAlreadyClosedException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.String.format;\n+import static java.util.Optional.empty;\n+import static org.mule.runtime.api.streaming.CursorProvider.TRACK_CURSOR_PROVIDER_CLOSE;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+\n+/**\n+ * This {@link RuntimeException} is thrown when it is trying to open a closed\n+ * {@link org.mule.runtime.api.streaming.CursorProvider}. It can contain optionally the\n+ * {@link org.mule.runtime.api.component.location.ComponentLocation} where the Cursor was created.\n+ * \n+ * @since 4.3.0\n+ */\n+public class CursorProviderAlreadyClosedException extends RuntimeException {\n+\n+  private final Optional<ComponentLocation> originatingLocation;\n+\n+  public CursorProviderAlreadyClosedException(String message) {\n+    this(message, empty());\n+  }\n+\n+  public CursorProviderAlreadyClosedException(String message, Optional<ComponentLocation> originatingLocation) {\n+    this(message, originatingLocation, empty());\n+  }\n+\n+  public CursorProviderAlreadyClosedException(String message, Optional<ComponentLocation> originatingLocation,\n+                                              Optional<Exception> closerResponsible) {\n+    super(resolveMessage(message, originatingLocation, closerResponsible));\n+\n+    this.originatingLocation = originatingLocation;\n+  }\n+\n+  public Optional<ComponentLocation> getOriginatingLocation() {\n+    return originatingLocation;\n+  }\n+\n+  private static String resolveMessage(String message, Optional<ComponentLocation> originatingLocation,\n+                                       Optional<Exception> closerResponsible) {\n+    String openedByDescription = format(\"The cursor provider was open by %s\", originatingLocation.map(cl -> cl.getLocation())\n+        .orElse(\"unknown\"));\n+\n+    String responsibleDescription = closerResponsible.map(r -> {\n+      StringWriter stringWriter = new StringWriter();\n+      r.printStackTrace(new PrintWriter(stringWriter));\n+      return format(\"The cursor provider was closed by: \\n %s\", stringWriter.toString());\n+    }).orElse(format(\"Run with -M-D%s=true for more details\", TRACK_CURSOR_PROVIDER_CLOSE));", "originalCommit": "91daf6cb2304f200b47e3c483347655e67496609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NTU5OQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r384765599", "bodyText": "Do you mean that we should provide an alternative method to enable this feature?", "author": "szaffarano", "createdAt": "2020-02-26T21:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMzIyNA==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r385913224", "bodyText": "no, just saying that there are other ways of sessing system properties other than command line", "author": "elrodro83", "createdAt": "2020-02-28T20:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDY4NQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r387094685", "bodyText": "I changed the message to a more generic one.", "author": "szaffarano", "createdAt": "2020-03-03T15:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTIwMQ=="}], "type": "inlineReview"}, {"oid": "562e7338bd0c5f25d79b471b3f1427655412c949", "url": "https://github.com/mulesoft/mule/commit/562e7338bd0c5f25d79b471b3f1427655412c949", "message": "Update reference to CursorProvider constant", "committedDate": "2020-02-26T13:34:50Z", "type": "commit"}, {"oid": "479f84a3d3762b22f456e99811301d9b684a73b5", "url": "https://github.com/mulesoft/mule/commit/479f84a3d3762b22f456e99811301d9b684a73b5", "message": "Move troubleshooting related stuff to implementation", "committedDate": "2020-02-27T20:32:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwODE3Mg==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386608172", "bodyText": "do this AFTER setting the closed flag", "author": "marianogonzalez", "createdAt": "2020-03-02T19:40:28Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/AbstractCursorStreamProvider.java", "diffHunk": "@@ -51,6 +80,9 @@ public final CursorStream openCursor() {\n    */\n   @Override\n   public void close() {\n+    if (TRACK_CURSOR_PROVIDER_CLOSE) {", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwODQ5NQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386608495", "bodyText": "add the version in which it was deprecated", "author": "marianogonzalez", "createdAt": "2020-03-02T19:41:04Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/InMemoryCursorStreamProvider.java", "diffHunk": "@@ -28,14 +29,34 @@\n    * @param wrappedStream the stream to buffer from\n    * @param config        the config of the generated buffer\n    * @param bufferManager the {@link ByteBufferManager} that will be used to allocate all buffers\n+   * @param originatingLocation indicates where the cursor was created\n    */\n   public InMemoryCursorStreamProvider(InputStream wrappedStream,\n                                       InMemoryCursorStreamConfig config,\n-                                      ByteBufferManager bufferManager) {\n-    super(wrappedStream);\n+                                      ByteBufferManager bufferManager,\n+                                      ComponentLocation originatingLocation) {\n+    super(wrappedStream, originatingLocation);\n     buffer = new InMemoryStreamBuffer(wrappedStream, config, bufferManager);\n   }\n \n+  /**\n+   * Creates a new instance\n+   *\n+   * @param wrappedStream the stream to buffer from\n+   * @param config        the config of the generated buffer\n+   * @param bufferManager the {@link ByteBufferManager} that will be used to allocate all buffers\n+   * \n+   * @deprecated Please use", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwOTUwMg==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386609502", "bodyText": "the SP should not be consumed here. This should be just a final instance attribute provided by the constructor. Otherwise, we don't only loose the ability to spot enable it, it also requires ugly reflection on the test cases. The SystemProperty should be consumed on the AbstractCursorProviderFactory", "author": "marianogonzalez", "createdAt": "2020-03-02T19:43:12Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/AbstractCursorStreamProvider.java", "diffHunk": "@@ -28,21 +33,45 @@\n \n   private final AtomicBoolean closed = new AtomicBoolean(false);\n \n+  private final ComponentLocation originatingLocation;\n+\n+  private Exception closerResponsible;\n+\n+  private static final boolean TRACK_CURSOR_PROVIDER_CLOSE = getBoolean(TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY);", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMDA3MQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386610071", "bodyText": "add imports", "author": "marianogonzalez", "createdAt": "2020-03-02T19:44:23Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderAlreadyClosedException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.String.format;\n+import static java.util.Optional.empty;\n+import static org.mule.runtime.api.util.MuleSystemProperties.TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+\n+/**\n+ * This {@link RuntimeException} is thrown when it is trying to open a closed\n+ * {@link org.mule.runtime.api.streaming.CursorProvider}. It can contain optionally the", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMDc2NA==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386610764", "bodyText": "same as before. The SP should be consumed in one unique spot and then propagated through constructors", "author": "marianogonzalez", "createdAt": "2020-03-02T19:45:45Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/AbstractCursorIteratorProvider.java", "diffHunk": "@@ -23,22 +28,45 @@\n \n   protected final Iterator stream;\n   private final AtomicBoolean closed = new AtomicBoolean(false);\n+  private final ComponentLocation originatingLocation;\n+  private Exception closerResponsible;\n+\n+  private static final boolean TRACK_CURSOR_PROVIDER_CLOSE = getBoolean(TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY);", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMDkwNA==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386610904", "bodyText": "invert", "author": "marianogonzalez", "createdAt": "2020-03-02T19:46:00Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/AbstractCursorIteratorProvider.java", "diffHunk": "@@ -47,6 +75,9 @@ public final CursorIterator openCursor() {\n    */\n   @Override\n   public void close() {\n+    if (TRACK_CURSOR_PROVIDER_CLOSE) {", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMTA1MQ==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r386611051", "bodyText": "@since", "author": "marianogonzalez", "createdAt": "2020-03-02T19:46:20Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/InMemoryCursorIteratorProvider.java", "diffHunk": "@@ -26,13 +27,27 @@\n    *\n    * @param stream the stream to buffer from\n    * @param config        the config of the generated buffer\n+   * @param originatingLocation indicates where the cursor was created\n    */\n-  public InMemoryCursorIteratorProvider(Iterator stream, InMemoryCursorIteratorConfig config) {\n-    super(stream);\n+  public InMemoryCursorIteratorProvider(Iterator stream, InMemoryCursorIteratorConfig config,", "originalCommit": "479f84a3d3762b22f456e99811301d9b684a73b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e2d06ec3793c3687aa217a6e38d6a02db5ae3200", "url": "https://github.com/mulesoft/mule/commit/e2d06ec3793c3687aa217a6e38d6a02db5ae3200", "message": "Changes suggested by PR comments", "committedDate": "2020-03-03T15:07:23Z", "type": "commit"}, {"oid": "4371383124f8ac3583bc6b64c1d2674f078ab239", "url": "https://github.com/mulesoft/mule/commit/4371383124f8ac3583bc6b64c1d2674f078ab239", "message": "Remove unnecessary methods", "committedDate": "2020-03-03T15:20:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNzg1OA==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r387237858", "bodyText": "static", "author": "marianogonzalez", "createdAt": "2020-03-03T19:17:59Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "diffHunk": "@@ -34,6 +36,7 @@\n \n   protected final ByteBufferManager bufferManager;\n   protected final StreamingManager streamingManager;\n+  protected final boolean trackCursorProviderClose;", "originalCommit": "4371383124f8ac3583bc6b64c1d2674f078ab239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzODg1OA==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r387238858", "bodyText": "unused", "author": "marianogonzalez", "createdAt": "2020-03-03T19:19:56Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/AbstractTroubleshootCursorProviderTestCase.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.System.setProperty;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.rules.ExpectedException.none;\n+import static org.junit.runners.Parameterized.Parameter;\n+import static org.junit.runners.Parameterized.Parameters;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.junit.MockitoJUnit.*;\n+import static org.mule.runtime.api.util.MuleSystemProperties.TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY;\n+import static org.mule.runtime.dsl.api.component.config.DefaultComponentLocation.fromSingleComponent;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoRule;\n+import org.mule.runtime.api.event.EventContext;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.runtime.core.api.streaming.StreamingManager;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Issue;\n+\n+@RunWith(Parameterized.class)\n+public abstract class AbstractTroubleshootCursorProviderTestCase extends AbstractMuleTestCase {\n+\n+  @Rule\n+  public ExpectedException expectedException = none();\n+\n+  @Rule\n+  public MockitoRule mockitoRule = rule();\n+\n+  @Parameter\n+  public Boolean trackStackTrace;\n+\n+  @Parameter(1)\n+  public boolean setComponentLocation;\n+\n+  @Mock\n+  protected EventContext eventContext;\n+\n+  @Mock\n+  protected StreamingManager streamingManager;\n+\n+  private CursorProvider cursorProvider;\n+\n+  @Parameters(name = \"Track StackTrace: {0}, set ComponentLocation: {1}\")\n+  public static Object[] getParameters() {\n+    return new Object[][] {\n+        {false, false},\n+        {false, true},\n+        {true, false},\n+        {true, true}\n+    };\n+  }\n+\n+  @Before\n+  public void before() throws NoSuchFieldException, IllegalAccessException {\n+    setProperty(TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY, trackStackTrace.toString());\n+\n+    when(eventContext.getOriginatingLocation()).then(a -> setComponentLocation ? fromSingleComponent(\"log\") : null);\n+\n+    when(streamingManager.manage(any(CursorProvider.class), any(EventContext.class))).then(a -> a.getArgument(0));\n+\n+    cursorProvider = createCursorProvider();\n+  }\n+\n+  @After\n+  public void after() {\n+    cursorProvider.close();\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18047\")\n+  @Description(\"The cursor provider should have a component location reference\")\n+  public void hasComponentLocation() {\n+    if (setComponentLocation) {\n+      assertThat(cursorProvider.getOriginatingLocation().orElse(null), is(notNullValue()));\n+    } else {\n+      assertThat(cursorProvider.getOriginatingLocation().orElse(null), is(nullValue()));\n+    }\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18047\")\n+  @Description(\"Verifies which exception is thrown when trying to open a closed cursor provided\")\n+  public void failIfProviderClosed() {\n+    expectedException.expect(CursorProviderAlreadyClosedException.class);\n+    expectedException.expectMessage(containsString(\"Cannot open a new cursor on a closed\"));\n+    expectedException.expectMessage(containsString(\"The cursor provider was open by\"));\n+    if (trackStackTrace) {\n+      expectedException.expectMessage(containsString(\"The cursor provider was closed by\"));\n+    } else {\n+      expectedException.expectMessage(containsString(\"for more details\"));\n+    }\n+\n+    cursorProvider.close();\n+\n+    cursorProvider.openCursor();\n+  }\n+\n+  protected abstract CursorProvider createCursorProvider();\n+\n+  private void setStaticField(Class cls, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {", "originalCommit": "4371383124f8ac3583bc6b64c1d2674f078ab239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f34289f5cbd0e9486dce6e3af347f02974ff0370", "url": "https://github.com/mulesoft/mule/commit/f34289f5cbd0e9486dce6e3af347f02974ff0370", "message": "Apply PR comments", "committedDate": "2020-03-03T20:33:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MTQ3Mg==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r387281472", "bodyText": "don't just make it static... resolve the value statically.. the original comment aims to not resolving the SP each time the factory is created", "author": "marianogonzalez", "createdAt": "2020-03-03T20:42:33Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "diffHunk": "@@ -36,7 +36,7 @@\n \n   protected final ByteBufferManager bufferManager;\n   protected final StreamingManager streamingManager;\n-  protected final boolean trackCursorProviderClose;\n+  protected static boolean trackCursorProviderClose;", "originalCommit": "f34289f5cbd0e9486dce6e3af347f02974ff0370", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92fb6afaafd72864794e706df5ac9f75f75915a8", "url": "https://github.com/mulesoft/mule/commit/92fb6afaafd72864794e706df5ac9f75f75915a8", "message": "Make SP to enable close providers tracking static", "committedDate": "2020-03-03T20:58:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjM0Ng==", "url": "https://github.com/mulesoft/mule/pull/8679#discussion_r387316346", "bodyText": "I don't understand how this test can pass. First parametrization runs fine, but for the second one, this value is not updated.\nTo avoid reflection hackerism, you can add a setCursorProviderCloseTracking(boolean enabled) method on the abstract factories (not in the API interface)", "author": "marianogonzalez", "createdAt": "2020-03-03T21:53:09Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "diffHunk": "@@ -32,11 +32,10 @@\n public abstract class AbstractCursorIteratorProviderFactory implements CursorIteratorProviderFactory {\n \n   protected final StreamingManager streamingManager;\n-  protected final boolean trackCursorProviderClose;\n+  protected final static boolean trackCursorProviderClose = getBoolean(TRACK_CURSOR_PROVIDER_CLOSE_PROPERTY);", "originalCommit": "92fb6afaafd72864794e706df5ac9f75f75915a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}