{"pr_number": 9459, "pr_title": "MULE-18794: Cannot access application resources from KeyResolver for Configurations Part 2", "pr_createdAt": "2020-09-24T19:46:19Z", "pr_url": "https://github.com/mulesoft/mule/pull/9459", "timeline": [{"oid": "936ea50276cc3f93880b67c06f210dcb4427c521", "url": "https://github.com/mulesoft/mule/commit/936ea50276cc3f93880b67c06f210dcb4427c521", "message": "fix and tests", "committedDate": "2020-09-24T19:41:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzAyMQ==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217021", "bodyText": "I would set the type resolver for a specific operation you want to modify, or create a new one.", "author": "ndinu", "createdAt": "2020-10-01T12:48:16Z", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/ClassLoadingExtension.java", "diffHunk": "@@ -11,12 +11,14 @@\n import org.mule.runtime.extension.api.annotation.Extension;\n import org.mule.runtime.extension.api.annotation.connectivity.ConnectionProviders;\n import org.mule.runtime.extension.api.annotation.dsl.xml.Xml;\n+import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;\n import org.mule.test.classloading.api.ClassLoadingHelper;\n \n @Extension(name = \"ClassLoading\")\n @Xml(prefix = \"classloading\")\n @ConnectionProviders({CLPoolingConnectionProvider.class, CLCachedConnectionProvider.class, CLNoneConnectionProvider.class})\n @Configurations(CLConfiguration.class)\n+@MetadataScope(keysResolver = CLKeysResolver.class)", "originalCommit": "936ea50276cc3f93880b67c06f210dcb4427c521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMjg0OQ==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498432849", "bodyText": "This is needed for configs to be annotated with the KeysResolver annotation in the model. That then allows the following line to be called in the tests:\nmetadataService.getMetadataKeys(builder().globalName(\"none\").build());\nand that will trigger getting the metadata keys.", "author": "SebaElizalde", "createdAt": "2020-10-01T18:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzUyOQ==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217529", "bodyText": "call the field metadataService", "author": "ndinu", "createdAt": "2020-10-01T12:49:09Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "diffHunk": "@@ -29,13 +34,18 @@\n import java.util.Map;\n import java.util.Set;\n \n+import javax.inject.Inject;\n+\n import org.hamcrest.Matcher;\n import org.hamcrest.core.StringContains;\n import org.junit.Rule;\n import org.junit.Test;\n \n public class ClassLoadingOnConnectionsTestCase extends AbstractExtensionFunctionalTestCase {\n \n+  @Inject\n+  private MetadataService metadataManager;", "originalCommit": "936ea50276cc3f93880b67c06f210dcb4427c521", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzkyNA==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217924", "bodyText": "I don't feel that this test belongs in this class.", "author": "ndinu", "createdAt": "2020-10-01T12:49:44Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "diffHunk": "@@ -72,6 +82,12 @@ public void allOptionalParameterGroup() throws Exception {\n     verifyUsedClassLoaders(ALL_OPTIONAL_PARAMETER_GROUP);\n   }\n \n+  @Test\n+  public void operationWithMetadataResolver() throws Exception {", "originalCommit": "936ea50276cc3f93880b67c06f210dcb4427c521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDk0Mg==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498430942", "bodyText": "will refactor", "author": "SebaElizalde", "createdAt": "2020-10-01T18:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498219123", "bodyText": "If you are going to assert that the operation metadata key resolution and source metadata key resolution are using the correct class loader, I would make them use two different resolvers, and use the addClassLoader method with different values.", "author": "ndinu", "createdAt": "2020-10-01T12:51:39Z", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLKeysResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.classloading;\n+\n+import static org.mule.metadata.api.model.MetadataFormat.JAVA;\n+import static org.mule.test.classloading.api.ClassLoadingHelper.addClassLoader;\n+\n+import org.mule.metadata.api.builder.BaseTypeBuilder;\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+import org.mule.runtime.api.metadata.MetadataKey;\n+import org.mule.runtime.api.metadata.MetadataKeyBuilder;\n+import org.mule.runtime.api.metadata.MetadataResolvingException;\n+import org.mule.runtime.api.metadata.resolving.OutputTypeResolver;\n+import org.mule.runtime.api.metadata.resolving.TypeKeysResolver;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+public class CLKeysResolver implements TypeKeysResolver, OutputTypeResolver {", "originalCommit": "936ea50276cc3f93880b67c06f210dcb4427c521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDg1MA==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498430850", "bodyText": "They both end up calling the same method, so I don't feel like there is a need to distinguish between sources and operations by making 2 separate tests.", "author": "SebaElizalde", "createdAt": "2020-10-01T18:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMzMwMw==", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498433303", "bodyText": "I think that calling the same method is an implementation detail, we should cover both cases.", "author": "ndinu", "createdAt": "2020-10-01T18:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw=="}], "type": "inlineReview"}, {"oid": "6f8a6b772aca9bbe305587c693567e4d09463d5a", "url": "https://github.com/mulesoft/mule/commit/6f8a6b772aca9bbe305587c693567e4d09463d5a", "message": "PR review", "committedDate": "2020-10-01T20:27:04Z", "type": "commit"}, {"oid": "27f7225b6e2d4431c77909e0a67b7017e1efea21", "url": "https://github.com/mulesoft/mule/commit/27f7225b6e2d4431c77909e0a67b7017e1efea21", "message": "removed unused import", "committedDate": "2020-10-01T20:31:30Z", "type": "commit"}, {"oid": "04f2ed1530c7aa348d30a2b7a403b38865149185", "url": "https://github.com/mulesoft/mule/commit/04f2ed1530c7aa348d30a2b7a403b38865149185", "message": "unnecessary metadata scope", "committedDate": "2020-10-05T17:40:40Z", "type": "commit"}]}