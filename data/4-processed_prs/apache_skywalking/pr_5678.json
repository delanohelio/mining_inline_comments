{"pr_number": 5678, "pr_title": "Fix application start duration log \"Failed to load class org.slf4j.impl.StaticLoggerBinder.\"", "pr_createdAt": "2020-10-16T06:06:19Z", "pr_url": "https://github.com/apache/skywalking/pull/5678", "timeline": [{"oid": "a74e721e0fd650913175ec63c9e39321669dda3e", "url": "https://github.com/apache/skywalking/commit/a74e721e0fd650913175ec63c9e39321669dda3e", "message": "Fix application start duration log \"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\" when use kafka reporter. because kafka reporter use slf4j-api, but no implementor for slf4j.", "committedDate": "2020-10-16T05:57:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMzIxOA==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506103218", "bodyText": "should be log.info(t, msg); ?", "author": "dmsolr", "createdAt": "2020-10-16T07:00:11Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);", "originalCommit": "a74e721e0fd650913175ec63c9e39321669dda3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMzM0OA==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506103348", "bodyText": "log.info(...) ?", "author": "dmsolr", "createdAt": "2020-10-16T07:00:31Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(final Marker marker) {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg, final Throwable t) {\n+        log.error(t, msg);", "originalCommit": "a74e721e0fd650913175ec63c9e39321669dda3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwNDEzMQ==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506104131", "bodyText": "still need to delegate ILog", "author": "dmsolr", "createdAt": "2020-10-16T07:02:05Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(final Marker marker) {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled() {\n+        return log.isWarnEnable();\n+    }\n+\n+    @Override\n+    public void warn(final String msg) {\n+        log.warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object arg) {\n+        log.warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object... arguments) {\n+        log.warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object arg1, final Object arg2) {\n+        log.warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(final String msg, final Throwable t) {\n+        log.warn(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(final Marker marker) {\n+        return log.isWarnEnable();\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String msg) {\n+        log.warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object arg) {\n+        log.warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object... arguments) {\n+        log.warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String msg, final Throwable t) {\n+        log.warn(msg, t);\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled() {\n+        return log.isErrorEnable();\n+    }\n+\n+    @Override\n+    public void error(final String msg) {\n+        log.error(msg);\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object... arguments) {\n+\n+    }", "originalCommit": "a74e721e0fd650913175ec63c9e39321669dda3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0", "url": "https://github.com/apache/skywalking/commit/dca3f4fd057eb739e922e19d69b4eb35be5f75a0", "message": "Polishing.", "committedDate": "2020-10-16T08:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE5Njc2OA==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506196768", "bodyText": "Please help with updating logging.level in the agent setup doc. Add all available values in the documentation.", "author": "wu-sheng", "createdAt": "2020-10-16T09:04:14Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/LogLevel.java", "diffHunk": "@@ -19,5 +19,5 @@\n package org.apache.skywalking.apm.agent.core.logging.core;\n \n public enum LogLevel {\n-    DEBUG, INFO, WARN, ERROR, OFF\n+    TRACE, DEBUG, INFO, WARN, ERROR, OFF", "originalCommit": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e681425fdbe734fbf0991b208f5d2a906c8f1038", "url": "https://github.com/apache/skywalking/commit/e681425fdbe734fbf0991b208f5d2a906c8f1038", "message": "Adapter slf4j Logger of agent used to skywalking agent Logger.", "committedDate": "2020-10-16T10:36:29Z", "type": "commit"}, {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af", "url": "https://github.com/apache/skywalking/commit/ba300c629b2ee64acb8213326b3276b6b2a436af", "message": "Merge branch 'master' into hanfei", "committedDate": "2020-10-16T12:43:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQzODM1NA==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506438354", "bodyText": "Why this class needs to locate in org.apache.skywalking.apm.dependencies.org.slf4j.impl? I think I have asked you to place this in the org.apache.skywalking.apm.agent.core.logging.adaptor", "author": "wu-sheng", "createdAt": "2020-10-16T13:44:53Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/dependencies/org/slf4j/impl/StaticLoggerBinder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.dependencies.org.slf4j.impl;", "originalCommit": "ba300c629b2ee64acb8213326b3276b6b2a436af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4ODMyMA==", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506488320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * SLF4J LoggerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an\n          \n          \n            \n             * SLF4J logger provider implementation.\n          \n          \n            \n             * The slf4j-api would try to load org.slf4j.impl.StaticLoggerBinder internal. In the agent core, we add our own implementation\n          \n          \n            \n             * for bridging to SkyWalking internal log component. \n          \n          \n            \n             * Therefore, logs of netty/grpc/kafka(agent shaded components) would output through the SkyWalking's log.\n          \n          \n            \n             *\n          \n          \n            \n             * Don't move this class to any other package, its package must be as same as the shaded org.apache.skywalking.apm.dependencies.org.slf4j.impl", "author": "wu-sheng", "createdAt": "2020-10-16T14:31:50Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/dependencies/org/slf4j/impl/StaticLoggerBinder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.dependencies.org.slf4j.impl;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.spi.LoggerFactoryBinder;\n+\n+/**\n+ * SLF4J LoggerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an\n+ * SLF4J logger provider implementation.", "originalCommit": "ba300c629b2ee64acb8213326b3276b6b2a436af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76ad4c50b5bf62c59d29ae55d6ced567de835f9c", "url": "https://github.com/apache/skywalking/commit/76ad4c50b5bf62c59d29ae55d6ced567de835f9c", "message": "Make the comments more accurate.", "committedDate": "2020-10-16T14:41:56Z", "type": "commit"}]}