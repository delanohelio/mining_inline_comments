{"pr_number": 5425, "pr_title": "Introduce label system to histogram", "pr_createdAt": "2020-09-01T15:27:11Z", "pr_url": "https://github.com/apache/skywalking/pull/5425", "timeline": [{"oid": "aa7f9cf1f479bd0b00f42d44f5f7555fc083712d", "url": "https://github.com/apache/skywalking/commit/aa7f9cf1f479bd0b00f42d44f5f7555fc083712d", "message": "Add labeled histogram\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-08-31T04:24:57Z", "type": "commit"}, {"oid": "535469e5fe7a4950be712388551b96f1cdebd05d", "url": "https://github.com/apache/skywalking/commit/535469e5fe7a4950be712388551b96f1cdebd05d", "message": "Merge branch 'master' into meter-histogram", "committedDate": "2020-09-01T00:51:24Z", "type": "commit"}, {"oid": "9d1d1c7119c07dc86c76d19f3e2a2730c2d4372d", "url": "https://github.com/apache/skywalking/commit/9d1d1c7119c07dc86c76d19f3e2a2730c2d4372d", "message": "Support labeled histogram and percentile\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-09-01T15:17:51Z", "type": "commit"}, {"oid": "0bc490f21e5240893b2e250be5c955489ebf7b10", "url": "https://github.com/apache/skywalking/commit/0bc490f21e5240893b2e250be5c955489ebf7b10", "message": "Merge branch 'master' into meter-histogram", "committedDate": "2020-09-01T15:39:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0Nzk5NA==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481247994", "bodyText": "Do you remove this for accepting different labels in 2 instances?", "author": "wu-sheng", "createdAt": "2020-09-01T15:53:05Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java", "diffHunk": "@@ -83,33 +84,39 @@ public void accept(final MeterEntity entity, final BucketedValues value) {\n \n         this.entityId = entity.id();\n \n+        String template = \"%s\";\n+        if (!Strings.isNullOrEmpty(value.getGroup())) {\n+            template   = value.getGroup() + \":%s\";\n+        }\n         final long[] values = value.getValues();\n         for (int i = 0; i < values.length; i++) {\n-            String bucketName = String.valueOf(value.getBuckets()[i]);\n-            summation.valueAccumulation(bucketName, values[i]);\n-            count.valueAccumulation(bucketName, 1L);\n+            long bucket = value.getBuckets()[i];\n+            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n+            String key = String.format(template, bucketName);\n+            summation.valueAccumulation(key, values[i]);\n+            count.valueAccumulation(key, 1L);\n         }\n     }\n \n     @Override\n     public void combine(final Metrics metrics) {\n         AvgHistogramFunction histogram = (AvgHistogramFunction) metrics;\n-\n-        if (!summation.keysEqual(histogram.getSummation())) {", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NDYwMQ==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481454601", "bodyText": "exactly.", "author": "hanahmily", "createdAt": "2020-09-01T21:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0Nzk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODc1MA==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481248750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Set<String> keys = summation.keys();\n          \n          \n            \n                    for (String key : keys) {\n          \n          \n            \n                    for (String key : summation.keys()) {", "author": "wu-sheng", "createdAt": "2020-09-01T15:54:14Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java", "diffHunk": "@@ -83,33 +84,39 @@ public void accept(final MeterEntity entity, final BucketedValues value) {\n \n         this.entityId = entity.id();\n \n+        String template = \"%s\";\n+        if (!Strings.isNullOrEmpty(value.getGroup())) {\n+            template   = value.getGroup() + \":%s\";\n+        }\n         final long[] values = value.getValues();\n         for (int i = 0; i < values.length; i++) {\n-            String bucketName = String.valueOf(value.getBuckets()[i]);\n-            summation.valueAccumulation(bucketName, values[i]);\n-            count.valueAccumulation(bucketName, 1L);\n+            long bucket = value.getBuckets()[i];\n+            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n+            String key = String.format(template, bucketName);\n+            summation.valueAccumulation(key, values[i]);\n+            count.valueAccumulation(key, 1L);\n         }\n     }\n \n     @Override\n     public void combine(final Metrics metrics) {\n         AvgHistogramFunction histogram = (AvgHistogramFunction) metrics;\n-\n-        if (!summation.keysEqual(histogram.getSummation())) {\n-            log.warn(\"Incompatible input [{}}] for current HistogramFunction[{}], entity {}\",\n-                     histogram, this, entityId\n-            );\n-            return;\n-        }\n         this.summation.append(histogram.summation);\n         this.count.append(histogram.count);\n     }\n \n     @Override\n     public void calculate() {\n-        final List<String> sortedKeys = summation.sortedKeys(Comparator.comparingInt(Integer::parseInt));\n-        for (String key : sortedKeys) {\n-            dataset.put(key, summation.get(key) / count.get(key));\n+        final Set<String> keys = summation.keys();\n+        for (String key : keys) {", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0OTIxMQ==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481249211", "bodyText": "Did you forget to serialize this field?", "author": "wu-sheng", "createdAt": "2020-09-01T15:54:53Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java", "diffHunk": "@@ -157,6 +165,7 @@ public void deserialize(final RemoteData remoteData) {\n \n         remoteBuilder.addDataObjectStrings(count.toStorageData());\n         remoteBuilder.addDataObjectStrings(summation.toStorageData());\n+        remoteBuilder.addDataObjectStrings(dataset.toStorageData());", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NTczMA==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481455730", "bodyText": "yep. With the unit test's help, I found this issue.", "author": "hanahmily", "createdAt": "2020-09-01T21:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0OTIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MDAwMw==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481250003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        template   = value.getBucketedValues().getGroup() + \":%s\";\n          \n          \n            \n                        template  = value.getBucketedValues().getGroup() + \":%s\";", "author": "wu-sheng", "createdAt": "2020-09-01T15:55:59Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramPercentileFunction.java", "diffHunk": "@@ -125,11 +135,17 @@ public void accept(final MeterEntity entity, final AvgPercentileArgument value)\n \n         this.entityId = entity.id();\n \n+        String template = \"%s\";\n+        if (!Strings.isNullOrEmpty(value.getBucketedValues().getGroup())) {\n+            template   = value.getBucketedValues().getGroup() + \":%s\";", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MDM3MA==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481250370", "bodyText": "Could you add comments about how you format this key?", "author": "wu-sheng", "createdAt": "2020-09-01T15:56:31Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramPercentileFunction.java", "diffHunk": "@@ -125,11 +135,17 @@ public void accept(final MeterEntity entity, final AvgPercentileArgument value)\n \n         this.entityId = entity.id();\n \n+        String template = \"%s\";\n+        if (!Strings.isNullOrEmpty(value.getBucketedValues().getGroup())) {\n+            template   = value.getBucketedValues().getGroup() + \":%s\";\n+        }\n         final long[] values = value.getBucketedValues().getValues();\n         for (int i = 0; i < values.length; i++) {\n-            String bucketName = String.valueOf(value.getBucketedValues().getBuckets()[i]);\n-            summation.valueAccumulation(bucketName, values[i]);\n-            count.valueAccumulation(bucketName, 1L);\n+            long bucket = value.getBucketedValues().getBuckets()[i];\n+            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n+            String key = String.format(template, bucketName);\n+            summation.valueAccumulation(key, values[i]);", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MTk3Nw==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481461977", "bodyText": "It's <group>:<percentile> which is composed of some lines above.", "author": "hanahmily", "createdAt": "2020-09-01T22:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MDM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MTE5OQ==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481251199", "bodyText": "So, according to this, the name:99 is formated from here, right?", "author": "wu-sheng", "createdAt": "2020-09-01T15:57:25Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramPercentileFunction.java", "diffHunk": "@@ -168,38 +178,64 @@ public void combine(final Metrics metrics) {\n     @Override\n     public void calculate() {\n         if (!isCalculated) {\n-            final List<String> sortedKeys = summation.sortedKeys(Comparator.comparingInt(Integer::parseInt));\n-            for (String key : sortedKeys) {\n-                dataset.put(key, summation.get(key) / count.get(key));\n-            }\n-\n-            long total = dataset.sumOfValues();\n-\n-            int[] roofs = new int[ranks.size()];\n-            for (int i = 0; i < ranks.size(); i++) {\n-                roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n-            }\n-\n-            int count = 0;\n-            int loopIndex = 0;\n-\n-            for (int i = 0; i < sortedKeys.size(); i++) {\n-                String key = sortedKeys.get(i);\n-                final Long value = dataset.get(key);\n-\n-                count += value;\n-                for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n-                    int roof = roofs[rankIdx];\n-\n-                    if (count >= roof) {\n-                        long latency = (i + 1 == sortedKeys.size()) ? Long.MAX_VALUE : Long.parseLong(sortedKeys.get(i + 1));\n-                        percentileValues.put(String.valueOf(ranks.get(rankIdx)), latency);\n-                        loopIndex++;\n-                    } else {\n-                        break;\n+            final Set<String> keys = summation.keys();\n+            for (String key : keys) {\n+                long value = 0;\n+                if (count.get(key) != 0) {\n+                    value = summation.get(key) / count.get(key);\n+                    if (value == 0L && summation.get(key) > 0L) {\n+                        value = 1;\n                     }\n                 }\n+                dataset.put(key, value);\n             }\n+            dataset.keys().stream()\n+                .map(key -> {\n+                    if (key.contains(\":\")) {\n+                        String[] kk = key.split(\":\");\n+                        return Tuple.of(kk[0], key);\n+                    } else {\n+                        return Tuple.of(DEFAULT_GROUP, key);\n+                    }\n+                })\n+                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n+                    DataTable::new,\n+                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n+                    DataTable::append))))\n+                .forEach((group, subDataset) -> {\n+                    long total;\n+                    total = subDataset.sumOfValues();\n+\n+                    int[] roofs = new int[ranks.size()];\n+                    for (int i = 0; i < ranks.size(); i++) {\n+                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n+                    }\n+\n+                    int count = 0;\n+                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n+\n+                    int loopIndex = 0;\n+\n+                    for (String key : sortedKeys) {\n+                        final Long value = subDataset.get(key);\n+\n+                        count += value;\n+                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n+                            int roof = roofs[rankIdx];\n+\n+                            if (count >= roof) {\n+                                if (group.equals(DEFAULT_GROUP)) {\n+                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n+                                } else {\n+                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));", "originalCommit": "0bc490f21e5240893b2e250be5c955489ebf7b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MjQ2MA==", "url": "https://github.com/apache/skywalking/pull/5425#discussion_r481462460", "bodyText": "Exactly. : is the splitter.", "author": "hanahmily", "createdAt": "2020-09-01T22:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MTE5OQ=="}], "type": "inlineReview"}, {"oid": "5c51752346c931124b18d5b492cf675d114059e3", "url": "https://github.com/apache/skywalking/commit/5c51752346c931124b18d5b492cf675d114059e3", "message": "Update oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-09-01T21:57:02Z", "type": "commit"}, {"oid": "d5bdc64f709d305f13623cc155333e039c15670b", "url": "https://github.com/apache/skywalking/commit/d5bdc64f709d305f13623cc155333e039c15670b", "message": "Update oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramPercentileFunction.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-09-01T21:59:27Z", "type": "commit"}, {"oid": "a7e21f36f8c86aa456ac6c5beb26ef0171834faf", "url": "https://github.com/apache/skywalking/commit/a7e21f36f8c86aa456ac6c5beb26ef0171834faf", "message": "Cleanup imports\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-09-01T22:12:58Z", "type": "commit"}, {"oid": "bdd915f5cc7f4310abfd99d88a8cf1aa7d8146e7", "url": "https://github.com/apache/skywalking/commit/bdd915f5cc7f4310abfd99d88a8cf1aa7d8146e7", "message": "Filter null label\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-09-04T03:01:25Z", "type": "commit"}, {"oid": "582da6f7f0b500217a091625b74989e5c9c12449", "url": "https://github.com/apache/skywalking/commit/582da6f7f0b500217a091625b74989e5c9c12449", "message": "Merge branch 'master' into meter-histogram", "committedDate": "2020-09-04T03:02:02Z", "type": "commit"}]}