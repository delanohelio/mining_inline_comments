{"pr_number": 4327, "pr_title": "Tag annotation supports returned expression", "pr_createdAt": "2020-02-08T11:52:38Z", "pr_url": "https://github.com/apache/skywalking/pull/4327", "timeline": [{"oid": "b5cd69d412904468afbce6f335a9c50909cde5d1", "url": "https://github.com/apache/skywalking/commit/b5cd69d412904468afbce6f335a9c50909cde5d1", "message": "tag annotation support return expression", "committedDate": "2020-02-08T11:33:35Z", "type": "commit"}, {"oid": "2847eaee37359650774752475383723788d8daa5", "url": "https://github.com/apache/skywalking/commit/2847eaee37359650774752475383723788d8daa5", "message": "Merge branch 'master' into master", "committedDate": "2020-02-08T12:30:10Z", "type": "commit"}, {"oid": "8e171e37fa5d09a2a1b1fe576c1e0ea847051e04", "url": "https://github.com/apache/skywalking/commit/8e171e37fa5d09a2a1b1fe576c1e0ea847051e04", "message": "tag annotation support return expression", "committedDate": "2020-02-08T12:34:44Z", "type": "commit"}, {"oid": "1342cfa58011e46b9d2938b0f04fad1521b657af", "url": "https://github.com/apache/skywalking/commit/1342cfa58011e46b9d2938b0f04fad1521b657af", "message": "Merge branch 'master' of https://github.com/lxliuxuankb/skywalking", "committedDate": "2020-02-08T12:35:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwNzY5Ng==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376707696", "bodyText": "Remove author, please.", "author": "wu-sheng", "createdAt": "2020-02-08T12:35:42Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+/**\n+ * @author: lxliuxuan Date: 2020/02/08", "originalCommit": "2847eaee37359650774752475383723788d8daa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea", "url": "https://github.com/apache/skywalking/commit/a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea", "message": "rm tagUtil author", "committedDate": "2020-02-08T12:47:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg2Ng==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709866", "bodyText": "Why length==2 is required?", "author": "wu-sheng", "createdAt": "2020-02-08T13:23:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {\n+    public static void tagParamsSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                     String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseExpression(value, context));\n+    }\n+\n+    public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                         String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseReturnExpression(value, context));\n+    }\n+\n+    public static Boolean isReturnTag(String expression) {\n+        String[] es = expression.split(\"\\\\.\");\n+        return es.length == 2 && \"returnedObj\".equals(es[0]);", "originalCommit": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODg4Nw==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768887", "bodyText": "because expression just support string like returnedObj.xxxxx", "author": "lxliuxuankb", "createdAt": "2020-02-09T09:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709890", "bodyText": "Why do we need a Util at this core level?", "author": "wu-sheng", "createdAt": "2020-02-08T13:23:23Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "originalCommit": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTkyOA==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709928", "bodyText": "You are just changing a single plugin, don't change anything in the core level, unless it is really necessary. For this case, it doesn't seem so.", "author": "wu-sheng", "createdAt": "2020-02-08T13:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODgxNg==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768816", "bodyText": "because TraceAnnotationMethodInterceptor  and TagAnnotationMethodInterceptor also have some same methods, so move these method into TagUtil", "author": "lxliuxuankb", "createdAt": "2020-02-09T09:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODkyMg==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768922", "bodyText": "But you moved the TagUtil into the core, that is not right.", "author": "wu-sheng", "createdAt": "2020-02-09T09:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2OTAzMg==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376769032", "bodyText": "ok ,i will fix this", "author": "lxliuxuankb", "createdAt": "2020-02-09T09:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTk2Ng==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709966", "bodyText": "Why remove this method out of here?", "author": "wu-sheng", "createdAt": "2020-02-08T13:25:35Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -54,19 +54,18 @@ public void beforeMethod(\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {", "originalCommit": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODgxMg==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768812", "bodyText": "because TraceAnnotationMethodInterceptor  and TagAnnotationMethodInterceptor also have this method, so move this method into TagUtil", "author": "lxliuxuankb", "createdAt": "2020-02-09T09:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTk2Ng=="}], "type": "inlineReview"}, {"oid": "eb680cb3cc1e5962d9553cbc13e62af64fe878b8", "url": "https://github.com/apache/skywalking/commit/eb680cb3cc1e5962d9553cbc13e62af64fe878b8", "message": "mv TagUtil into toolkit activation", "committedDate": "2020-02-09T11:47:20Z", "type": "commit"}, {"oid": "8e5b8ba06f3e14c305bbf4b98c0181560cf54a9b", "url": "https://github.com/apache/skywalking/commit/8e5b8ba06f3e14c305bbf4b98c0181560cf54a9b", "message": "Merge branch 'master' into master", "committedDate": "2020-02-09T12:32:55Z", "type": "commit"}, {"oid": "fa470d53bef1f2d85226ad5fca4a1424a79b7505", "url": "https://github.com/apache/skywalking/commit/fa470d53bef1f2d85226ad5fca4a1424a79b7505", "message": "update test plugin", "committedDate": "2020-02-10T12:07:07Z", "type": "commit"}, {"oid": "50e71c2dd491c7d9d2fac8fc18f253e6b648f6f1", "url": "https://github.com/apache/skywalking/commit/50e71c2dd491c7d9d2fac8fc18f253e6b648f6f1", "message": "Merge branch 'master' of https://github.com/lxliuxuankb/skywalking", "committedDate": "2020-02-10T12:07:39Z", "type": "commit"}, {"oid": "fbf912c0c52b491e51bc94f6d04af53db654df20", "url": "https://github.com/apache/skywalking/commit/fbf912c0c52b491e51bc94f6d04af53db654df20", "message": "Merge branch 'master' into master", "committedDate": "2020-02-10T12:27:16Z", "type": "commit"}, {"oid": "fe9c78df25c422769062ce53289fcf51c1a83af4", "url": "https://github.com/apache/skywalking/commit/fe9c78df25c422769062ce53289fcf51c1a83af4", "message": "update test plugin", "committedDate": "2020-02-10T12:33:20Z", "type": "commit"}, {"oid": "a120cf338e364878e62dcea0ed61b14ce7db3a2c", "url": "https://github.com/apache/skywalking/commit/a120cf338e364878e62dcea0ed61b14ce7db3a2c", "message": "Merge branch 'master' of https://github.com/lxliuxuankb/skywalking", "committedDate": "2020-02-10T12:33:37Z", "type": "commit"}, {"oid": "86163a34f2ba6022d211eff83f48e84b5cd841d6", "url": "https://github.com/apache/skywalking/commit/86163a34f2ba6022d211eff83f48e84b5cd841d6", "message": "update test plugin", "committedDate": "2020-02-10T12:34:20Z", "type": "commit"}, {"oid": "bff646b763361d288c7b34172b7877093cb8269e", "url": "https://github.com/apache/skywalking/commit/bff646b763361d288c7b34172b7877093cb8269e", "message": "Revert \"update test plugin\"\n\nThis reverts commit 86163a34f2ba6022d211eff83f48e84b5cd841d6.", "committedDate": "2020-02-10T12:44:05Z", "type": "commit"}, {"oid": "a021d7c2f07ec69bfd1305dd1d512d514bedd1fe", "url": "https://github.com/apache/skywalking/commit/a021d7c2f07ec69bfd1305dd1d512d514bedd1fe", "message": "Revert \"update test plugin\"\n\nThis reverts commit fe9c78df25c422769062ce53289fcf51c1a83af4.", "committedDate": "2020-02-10T12:44:39Z", "type": "commit"}, {"oid": "45e163262be72d65f00da022d4384f54b752dce9", "url": "https://github.com/apache/skywalking/commit/45e163262be72d65f00da022d4384f54b752dce9", "message": "update test plugin for tag Annotation", "committedDate": "2020-02-10T12:46:53Z", "type": "commit"}, {"oid": "a2df8036aef961baf01635e4c178e849ad305351", "url": "https://github.com/apache/skywalking/commit/a2df8036aef961baf01635e4c178e849ad305351", "message": "add license into User", "committedDate": "2020-02-11T01:21:51Z", "type": "commit"}, {"oid": "f709daeac49a6b2d940d1661bf54c8b464e416e5", "url": "https://github.com/apache/skywalking/commit/f709daeac49a6b2d940d1661bf54c8b464e416e5", "message": "Merge branch 'master' into master", "committedDate": "2020-02-11T02:12:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzMzEyOA==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377433128", "bodyText": "Move these two lines into the final block.", "author": "wu-sheng", "createdAt": "2020-02-11T03:28:27Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -75,6 +74,25 @@ public Object afterMethod(\n         final Object[] allArguments,\n         final Class<?>[] argumentsTypes,\n         final Object ret) {\n+        if (ret == null || !ContextManager.isActive()) {\n+            ContextManager.stopSpan();\n+            return ret;", "originalCommit": "f709daeac49a6b2d940d1661bf54c8b464e416e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzMzMzMQ==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377433331", "bodyText": "returnedObj has a specific meaning, should be adding into the document. https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "author": "wu-sheng", "createdAt": "2020-02-11T03:29:48Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+import org.apache.skywalking.apm.toolkit.trace.Tag;\n+\n+public class TagUtil {\n+    public static void tagParamsSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                     final Tag tag) {\n+        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n+    }\n+\n+    public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                         final Tag tag) {\n+        new StringTag(tag.key()).set(span, CustomizeExpression.parseReturnExpression(tag.value(), context));\n+    }\n+\n+    public static Boolean isReturnTag(String expression) {\n+        String[] es = expression.split(\"\\\\.\");\n+        return es.length == 2 && \"returnedObj\".equals(es[0]);", "originalCommit": "f709daeac49a6b2d940d1661bf54c8b464e416e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88bb90bbac16fd0aaaa8d3493e68fba7fc36cd55", "url": "https://github.com/apache/skywalking/commit/88bb90bbac16fd0aaaa8d3493e68fba7fc36cd55", "message": "Merge branch 'master' into master", "committedDate": "2020-02-11T11:51:18Z", "type": "commit"}, {"oid": "c8ec8e46c4186da0e611e6d0dfd924d1f31be627", "url": "https://github.com/apache/skywalking/commit/c8ec8e46c4186da0e611e6d0dfd924d1f31be627", "message": "mv  ContextManager.stopSpan() into finally block and add tag Annotation doc", "committedDate": "2020-02-11T12:31:10Z", "type": "commit"}, {"oid": "ee6364e592d2a9d4c5a70551eb22a7710ddd2c79", "url": "https://github.com/apache/skywalking/commit/ee6364e592d2a9d4c5a70551eb22a7710ddd2c79", "message": "merge master", "committedDate": "2020-02-11T12:47:39Z", "type": "commit"}, {"oid": "f711954954d9637350f6ab5b59edec536489a6cc", "url": "https://github.com/apache/skywalking/commit/f711954954d9637350f6ab5b59edec536489a6cc", "message": "Merge branch 'master' into master", "committedDate": "2020-02-11T12:59:19Z", "type": "commit"}, {"oid": "be62c8edb38c5855f0623c86a9f933ff37145092", "url": "https://github.com/apache/skywalking/commit/be62c8edb38c5855f0623c86a9f933ff37145092", "message": "Revert submodule updates", "committedDate": "2020-02-11T14:09:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTg5Ng==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377671896", "bodyText": "Sorry, this is not right. This could be NPE, if ContextManager.isActive() == false, right? In #beforeMethod,  there is\nif (!ContextManager.isActive()) {\n            return;\n        }", "author": "wu-sheng", "createdAt": "2020-02-11T14:35:30Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -46,23 +46,47 @@ public void beforeMethod(final EnhancedInstance objInst, final Method method, fi\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag);\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n \n     @Override\n-    public Object afterMethod(final EnhancedInstance objInst, final Method method, final Object[] allArguments,\n-        final Class<?>[] argumentsTypes, final Object ret) {\n+    public Object afterMethod(\n+        final EnhancedInstance objInst,\n+        final Method method,\n+        final Object[] allArguments,\n+        final Class<?>[] argumentsTypes,\n+        final Object ret) {\n+        try {\n+            if (ret == null || !ContextManager.isActive()) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "originalCommit": "be62c8edb38c5855f0623c86a9f933ff37145092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzQ1OQ==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377997459", "bodyText": "We don't create span in the #beforeMethod, so please remove the stopSpan() here, we  cannot stop a span by mistake here", "author": "kezhenxu94", "createdAt": "2020-02-12T01:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTk4Ng==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377671986", "bodyText": "Same here.", "author": "wu-sheng", "createdAt": "2020-02-11T14:35:40Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationMethodInterceptor.java", "diffHunk": "@@ -56,24 +56,41 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(localSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(localSpan, context, tag);\n+                }\n             }\n         }\n-\n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(localSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(localSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n-\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        ContextManager.stopSpan();\n+        try {\n+            if (ret == null) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "originalCommit": "be62c8edb38c5855f0623c86a9f933ff37145092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzMwMA==", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377997300", "bodyText": "Same here.\n\nThere is no conditional creation of span in the #beforeMethod, so it's right here", "author": "kezhenxu94", "createdAt": "2020-02-12T01:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTk4Ng=="}], "type": "inlineReview"}, {"oid": "f34c03f8c3797f5bb50acb0996c47a5a54313c88", "url": "https://github.com/apache/skywalking/commit/f34c03f8c3797f5bb50acb0996c47a5a54313c88", "message": "remove ContextManager.stop() in TagAnnotationMethodInterceptor", "committedDate": "2020-02-12T02:02:56Z", "type": "commit"}, {"oid": "3ad49e76b638f57a2458dbcd3aee58144c3bb8c7", "url": "https://github.com/apache/skywalking/commit/3ad49e76b638f57a2458dbcd3aee58144c3bb8c7", "message": "fix code style", "committedDate": "2020-02-12T02:56:11Z", "type": "commit"}, {"oid": "6ae89220c2820c3a70f1cb784f4fcfad55ea595f", "url": "https://github.com/apache/skywalking/commit/6ae89220c2820c3a70f1cb784f4fcfad55ea595f", "message": "fix TagAnnotationTest", "committedDate": "2020-02-12T03:57:44Z", "type": "commit"}]}