{"pr_number": 4462, "pr_title": "[Agent Core] Support lazy ContextCarrier injection and lazy peer id setting ", "pr_createdAt": "2020-03-08T07:02:57Z", "pr_url": "https://github.com/apache/skywalking/pull/4462", "timeline": [{"oid": "1414ce7cdb16ccc051646f238e1040279bb4a3ce", "url": "https://github.com/apache/skywalking/commit/1414ce7cdb16ccc051646f238e1040279bb4a3ce", "message": "Support lazy ContextCarrier injection and lazy peer id setting for exit span", "committedDate": "2020-03-08T06:46:57Z", "type": "commit"}, {"oid": "05a4e684dd30454894b4c2e10c9785ba63141d62", "url": "https://github.com/apache/skywalking/commit/05a4e684dd30454894b4c2e10c9785ba63141d62", "message": "Close the set component id for exit and local spans", "committedDate": "2020-03-08T06:58:58Z", "type": "commit"}, {"oid": "3be61959cb4906954820194c0683ddbe5c4f69a0", "url": "https://github.com/apache/skywalking/commit/3be61959cb4906954820194c0683ddbe5c4f69a0", "message": "Merge branch 'master' into exist-span-inject", "committedDate": "2020-03-08T07:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389342564", "bodyText": "why add the leading _", "author": "kezhenxu94", "createdAt": "2020-03-08T07:18:25Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java", "diffHunk": "@@ -31,6 +31,15 @@\n      */\n     void inject(ContextCarrier carrier);\n \n+    /**\n+     * Prepare for the cross-process propagation based on the given exit span. The given exit span should belong to the\n+     * current context. How to initialize the carrier, depends on the implementation.\n+     *\n+     * @param carrier  to carry the context for crossing process.\n+     * @param exitSpan to represent the scope of current injection.\n+     */\n+    void _inject(AbstractSpan exitSpan, ContextCarrier carrier);", "originalCommit": "3be61959cb4906954820194c0683ddbe5c4f69a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzQ0Nw==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389343447", "bodyText": "I was wanting people think this could be used as an open API. That is the only repo. Do you want to keep the same method name? inject?", "author": "wu-sheng", "createdAt": "2020-03-08T07:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NDI4Mg==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389344282", "bodyText": "I was wanting people think this could be used as an open API.\n\nAll methods in an interface are OPEN API IMO, there's no conventions that methods start with _ is private or open in Java, on the contrary, many languages use the leading _ to indicate that the method is private", "author": "kezhenxu94", "createdAt": "2020-03-08T07:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NDYxNg==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389344616", "bodyText": "From my idea, the interface is just open at the codes level, in here, to balance the noop tracing context and real tracing context. Anyway, I could change it to inject to more clear comment.", "author": "wu-sheng", "createdAt": "2020-03-08T07:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NDk5Mw==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389344993", "bodyText": "Done.", "author": "wu-sheng", "createdAt": "2020-03-08T07:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjAyOQ==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389346029", "bodyText": "I was wanting people think this could be used as an open API.\n\nWell, I think you just expressed the opposite meanings (\"want people NOT to used as an open API\"), which makes me more confused why add this method here, instead of in TracingContext, the ExitSpan holds an instance of TracingContext instead of AbstractTracerContext, it should illuminate both our concerns", "author": "kezhenxu94", "createdAt": "2020-03-08T08:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Njc4Mw==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389346783", "bodyText": "Good point. Let me do that.", "author": "wu-sheng", "createdAt": "2020-03-08T08:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjkzMw==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389346933", "bodyText": "Fixed, should be better now.", "author": "wu-sheng", "createdAt": "2020-03-08T08:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzMxOQ==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389343319", "bodyText": "Consider returning this for chaining", "author": "kezhenxu94", "createdAt": "2020-03-08T07:31:10Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitTypeSpan.java", "diffHunk": "@@ -18,8 +18,15 @@\n \n package org.apache.skywalking.apm.agent.core.context.trace;\n \n-public interface WithPeerInfo {\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+\n+/**\n+ * The exit span has some additional behaviours\n+ */\n+public interface ExitTypeSpan {\n     int getPeerId();\n \n     String getPeer();\n+\n+    void inject(ContextCarrier carrier);", "originalCommit": "3be61959cb4906954820194c0683ddbe5c4f69a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzQ2MQ==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389343461", "bodyText": "After the tests pass, will do.", "author": "wu-sheng", "createdAt": "2020-03-08T07:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mzc0Mw==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389343743", "bodyText": "From the API level, I could only return ExitTypeSpan, is that useful?", "author": "wu-sheng", "createdAt": "2020-03-08T07:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NDE4NQ==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389344185", "bodyText": "From the API level, I could only return ExitTypeSpan, is that useful?\n\nYes, from the interface you have to return ExitTypeSpan, but you can return ExitSpan in its implementations, and chaining with the more specific types", "author": "kezhenxu94", "createdAt": "2020-03-08T07:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NDk5NA==", "url": "https://github.com/apache/skywalking/pull/4462#discussion_r389344994", "bodyText": "Done.", "author": "wu-sheng", "createdAt": "2020-03-08T07:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MzMxOQ=="}], "type": "inlineReview"}, {"oid": "9795dbc986f3f63cf38bd62ad8b56ffce47e31e0", "url": "https://github.com/apache/skywalking/commit/9795dbc986f3f63cf38bd62ad8b56ffce47e31e0", "message": "Follow the review.", "committedDate": "2020-03-08T07:54:03Z", "type": "commit"}, {"oid": "0bdafded9278ae001bc5c4e5cba7441d4227d2f2", "url": "https://github.com/apache/skywalking/commit/0bdafded9278ae001bc5c4e5cba7441d4227d2f2", "message": "Remove `void inject(AbstractSpan exitSpan, ContextCarrier carrier)` from AbstractTracerContext", "committedDate": "2020-03-08T08:22:38Z", "type": "commit"}]}