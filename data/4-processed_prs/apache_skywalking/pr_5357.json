{"pr_number": 5357, "pr_title": "JsonLogger implementation (#5356)", "pr_createdAt": "2020-08-20T02:39:03Z", "pr_url": "https://github.com/apache/skywalking/pull/5357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473559448", "bodyText": "Please read the existing source codes, all config should be controlled through Config, which has supported dynamic injection already.", "author": "wu-sheng", "createdAt": "2020-08-20T03:02:08Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -203,4 +213,25 @@ public void onError(final String typeName,\n         public void onComplete(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n         }\n     }\n+\n+    static void configureLogger() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTY2OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473561669", "bodyText": "The problem here is now the resolver is set to PatternResolver by default.\nWe have to setup the resolver before any LogManager.getLogger(...) is called. So this method is supposed to used in the static block of SkywalkingAgent.", "author": "lujiajing1126", "createdAt": "2020-08-20T03:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2NDAwNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473564005", "bodyText": "I am not saying this, take a closer look about how we initialize the Config's fields.", "author": "wu-sheng", "createdAt": "2020-08-20T03:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3MTkwNw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473571907", "bodyText": "I am not saying this, take a closer look about how we initialize the Config's fields.\n\nYes. I understand the dynamic injection is implemented in SnifferConfigInitializer with the help of ConfigInitializer.\nNow I take advantage of ConfigInitializer, in which the logger is declared but actually not used, to inject the system properties, though limitation is still there.", "author": "lujiajing1126", "createdAt": "2020-08-20T03:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMDYxMw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473610613", "bodyText": "The variable should not be injected through the way you did.", "author": "wu-sheng", "createdAt": "2020-08-20T05:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY0NzI1Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473647252", "bodyText": "The variable should not be injected through the way you did.\n\nWell. I remove this static block and first init config as it previously did. Then I reconfigure the Logger after config initialization finishes.\nThe procedure now completely follows the rules except the first few log calls in SnifferConfigInitializer will still use the default logger.", "author": "lujiajing1126", "createdAt": "2020-08-20T06:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473559557", "bodyText": "I don't think these belong to Config.", "author": "wu-sheng", "createdAt": "2020-08-20T03:02:34Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -259,6 +260,43 @@\n          * @see org.apache.skywalking.apm.agent.core.logging.core.PatternLogger#DEFAULT_CONVERTER_MAP\n          */\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n+\n+        public static class JSON {\n+            /**\n+             * Key of the AgentName\n+             */\n+            public static String AGENT_NAME_KEY = \"agent_name\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1MzQ4MQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473653481", "bodyText": "This question is unresolved, who will set these keys? Are these configurable?", "author": "wu-sheng", "createdAt": "2020-08-20T06:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODg1NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473688854", "bodyText": "This question is unresolved, who will set these keys? Are these configurable?\n\nYes. It can be configured. They are used as key of the generated json map", "author": "lujiajing1126", "createdAt": "2020-08-20T07:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTQzMQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473759431", "bodyText": "Technically, yes, my question is more about, why and who will config this.", "author": "wu-sheng", "createdAt": "2020-08-20T08:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwODY1OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473808659", "bodyText": "Technically, yes, my question is more about, why and who will config this.\n\nThe application developer can configure these keys provided that they use a different json key set for their application. So unification of these keys may be necessary for them.", "author": "lujiajing1126", "createdAt": "2020-08-20T09:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyMDg0OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473820849", "bodyText": "I think know why they are necessary. I prefer don't provide an over-configurable feature. If someone wants it, they could add them by providing a real use case.", "author": "wu-sheng", "createdAt": "2020-08-20T09:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNDI5MA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473924290", "bodyText": "I think know why they are necessary. I prefer don't provide an over-configurable feature. If someone wants it, they could add them by providing a real use case.\n\nI partially agree in the sense that some keys like agent_name are rarely used by real application, so it can be just a constant (I can remove it).\nBut the others, for example the concepts of \"@timestamp\", \"message\", \"class\" are also adopted by other logging framework. In order to simplify the preference of collectors, I suppose it is necessary to just keep these configurations here. They are very similar to what \"pattern\" does here.\nI think the most users can keep the default settings like we always do.", "author": "lujiajing1126", "createdAt": "2020-08-20T12:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NjQ2Ng==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473956466", "bodyText": "for example the concepts of \"@timestamp\", \"message\", \"class\" are also adopted by other logging framework.\n\nPlease provide the official documentation. If they are there, we could adopt it. But either way, still it is not necessary to make them configurable.", "author": "wu-sheng", "createdAt": "2020-08-20T13:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5OTY5Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r476999697", "bodyText": "The @timestamp is used in logstash by default, the source code can be found here, https://github.com/elastic/logstash/blob/0d82bc064ca8184722d159e3e8036ffe1931e666/logstash-core/src/main/java/org/logstash/Event.java#L54\nThe classic/official logback-json module uses the following json layout,\nhttps://github.com/qos-ch/logback-contrib/blob/c68c2e5ddc0ed589b0f1e24bac7b9300a0ea5153/json/classic/src/main/java/ch/qos/logback/contrib/json/classic/JsonLayout.java#L105-L113\nI suppose so far this is the only controversial part.\nI agree in this PR, we can just keep the layout a constant with some reasonable choices of the default keys. And then wait for the feedback from the community.\nI will remove them later.", "author": "lujiajing1126", "createdAt": "2020-08-26T02:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MDc0NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479350744", "bodyText": "Fixed", "author": "lujiajing1126", "createdAt": "2020-08-28T14:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473654692", "bodyText": "Why change this?", "author": "wu-sheng", "createdAt": "2020-08-20T06:40:35Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java", "diffHunk": "@@ -40,7 +42,7 @@\n  * The <code>SnifferConfigInitializer</code> initializes all configs in several way.\n  */\n public class SnifferConfigInitializer {\n-    private static final ILog logger = LogManager.getLogger(SnifferConfigInitializer.class);\n+    private static ILog LOGGER = LogManager.getLogger(SnifferConfigInitializer.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NTUyNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473655525", "bodyText": "The name logger cannot pass style-check. Maybe something wrong with the style-check preference?", "author": "lujiajing1126", "createdAt": "2020-08-20T06:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2Mjk1MQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473762951", "bodyText": "It used to be able to pass, then it still can. All codes in the master branch have to pass the style check. Please recheck again.\nIn the rule, we set an exception for the logger due to the legacy issue.", "author": "wu-sheng", "createdAt": "2020-08-20T08:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NjEyNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473786125", "bodyText": "@lujiajing1126 , if you have a final, it can be lowercase logger, why remove final?", "author": "kezhenxu94", "createdAt": "2020-08-20T08:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTIzOA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473805238", "bodyText": "@lujiajing1126 , if you have a final, it can be lowercase logger, why remove final?\n\nYes, exactly. It cannot pass without final.\nI remove final here because I want to re-create the logger instance with the updated logger resolver set up just after the config initialization.  On line 105 the logger will possibly be called again.", "author": "lujiajing1126", "createdAt": "2020-08-20T09:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyMTk4Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473821987", "bodyText": "Then, I have a feeling, this PR should be after the all logger and the exception rule to be removed. I don't want the codes with 2 style logger.", "author": "wu-sheng", "createdAt": "2020-08-20T09:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0Mzk5MA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473843990", "bodyText": "Then, I have a feeling, this PR should be after the all logger and the exception rule to be removed. I don't want the codes with 2 style logger.\n\nAgree. I have reverted the styles, just wait for the polish of the style-check rules.", "author": "lujiajing1126", "createdAt": "2020-08-20T10:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4MzcyNw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473883727", "bodyText": "Would you like to do that first? I may not have time to do this recently. You could remove the old exception rule, once style check passed, you have changed all of them.", "author": "wu-sheng", "createdAt": "2020-08-20T10:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNDg4Mw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473914883", "bodyText": "Would you like to do that first? I may not have time to do this recently. You could remove the old exception rule, once style check passed, you have changed all of them.\n\nSure. I can do this. Do you prefer a new PR with only rule changes?", "author": "lujiajing1126", "createdAt": "2020-08-20T11:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MjU4Ng==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473952586", "bodyText": "Rule change and code adoption, otherwise, the CI will fail.", "author": "wu-sheng", "createdAt": "2020-08-20T13:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NTYxOA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473655618", "bodyText": "This is not a good way to do this switch. I am waiting for the PMC confirmation about whether JSON format is acceptable. If YES, we need to improve this.", "author": "wu-sheng", "createdAt": "2020-08-20T06:41:52Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java", "diffHunk": "@@ -207,4 +212,15 @@ private static InputStreamReader loadConfig() throws AgentPackageNotFoundExcepti\n         }\n         throw new ConfigNotFoundException(\"Failed to load agent.config.\");\n     }\n+\n+    static void configureLogger() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NzM3Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473757377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static ResolverType LOGGER = ResolverType.PATTERN;\n          \n          \n            \n                    public static ResolverType RESOLVER = ResolverType.PATTERN;", "author": "wu-sheng", "createdAt": "2020-08-20T08:26:43Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -249,6 +251,11 @@\n          */\n         public static LogOutput OUTPUT = LogOutput.FILE;\n \n+        /**\n+         * The log resolver type. Default is PATTERN which will create PatternLogResolver later.\n+         */\n+        public static ResolverType LOGGER = ResolverType.PATTERN;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTczMw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473829733", "bodyText": "Changed here", "author": "lujiajing1126", "createdAt": "2020-08-20T09:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NzM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTcyMw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473759723", "bodyText": "Why starting with @ in JSON?", "author": "wu-sheng", "createdAt": "2020-08-20T08:29:20Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -259,6 +266,43 @@\n          * @see org.apache.skywalking.apm.agent.core.logging.core.PatternLogger#DEFAULT_CONVERTER_MAP\n          */\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n+\n+        public static class JSON {\n+            /**\n+             * Key of the AgentName\n+             */\n+            public static String AGENT_NAME_KEY = \"agent_name\";\n+\n+            /**\n+             * Key of the timestamp\n+             */\n+            public static String TIMESTAMP_KEY = \"@timestamp\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxMDU3Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473810572", "bodyText": "Just a convention used in logstash-logback-encoder", "author": "lujiajing1126", "createdAt": "2020-08-20T09:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4MTc1NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473881754", "bodyText": "Why we need to adopt logstash?", "author": "wu-sheng", "createdAt": "2020-08-20T10:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNjIyOQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473916229", "bodyText": "Why we need to adopt logstash?\n\nI suppose it would be better to comply to the conventions which are common used by the community?", "author": "lujiajing1126", "createdAt": "2020-08-20T12:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NjY3NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473956674", "bodyText": "Discussion continues on https://github.com/apache/skywalking/pull/5357/files#r473956466", "author": "wu-sheng", "createdAt": "2020-08-20T13:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1OTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2OTQ2OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473769468", "bodyText": "Once you add this, why need a default implementation?", "author": "wu-sheng", "createdAt": "2020-08-20T08:40:03Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/Converter.java", "diffHunk": "@@ -19,10 +19,13 @@\n package org.apache.skywalking.apm.agent.core.logging.core;\n \n /**\n- * The Converter, It is used to convert the LogEvent to the String.\n+ * The Converter, it is used to convert the LogEvent to the String.\n  */\n public interface Converter {\n \n     String convert(LogEvent logEvent);\n \n+    default String getKey() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNjE2NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473806164", "bodyText": "Once you add this, why need a default implementation?\n\nWe don't need to implement getKey() for LiteralConverter", "author": "lujiajing1126", "createdAt": "2020-08-20T09:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2OTQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTY1NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473771654", "bodyText": "Why you hide the expression? What happens once these happen?", "author": "wu-sheng", "createdAt": "2020-08-20T08:42:31Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/JsonLogger.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.logging.core;\n+\n+import com.google.gson.Gson;\n+import org.apache.skywalking.apm.agent.core.logging.core.converters.LiteralConverter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class JsonLogger extends AbstractLogger {\n+    private final Gson gson;\n+\n+    public JsonLogger(Class<?> targetClass, Gson gson) {\n+        this(targetClass.getSimpleName(), gson);\n+    }\n+\n+    public JsonLogger(String targetClass, Gson gson) {\n+        super(targetClass);\n+        this.gson = gson;\n+        for (Map.Entry<String, Class<? extends Converter>> entry : DEFAULT_CONVERTER_MAP.entrySet()) {\n+            try {\n+                if (converters instanceof LiteralConverter) {\n+                    continue;\n+                }\n+                converters.add(entry.getValue().newInstance());\n+            } catch (IllegalAccessException | InstantiationException ignore) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzNDE1MQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473834151", "bodyText": "This would happen if and only if someone change the constructor of the Converters to private or so. But it would be very rare.\nIt will just iterate over the next Converter without having side effect.", "author": "lujiajing1126", "createdAt": "2020-08-20T09:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4Mjc1OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473882758", "bodyText": "But eating the exception is not expected in the core.", "author": "wu-sheng", "createdAt": "2020-08-20T10:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNzMyNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473927325", "bodyText": "I see. Then re-throwing another RuntimeException may be better here.", "author": "lujiajing1126", "createdAt": "2020-08-20T12:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk4ODAyOQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r476988029", "bodyText": "Fixed", "author": "lujiajing1126", "createdAt": "2020-08-26T02:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MTY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjA1OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473776059", "bodyText": "Why need to override this method? I think this method should be in AbstractLogger too, and the two implementations only have their own format method(an abstract method in the parent).", "author": "wu-sheng", "createdAt": "2020-08-20T08:46:54Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/JsonLogger.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.logging.core;\n+\n+import com.google.gson.Gson;\n+import org.apache.skywalking.apm.agent.core.logging.core.converters.LiteralConverter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class JsonLogger extends AbstractLogger {\n+    private final Gson gson;\n+\n+    public JsonLogger(Class<?> targetClass, Gson gson) {\n+        this(targetClass.getSimpleName(), gson);\n+    }\n+\n+    public JsonLogger(String targetClass, Gson gson) {\n+        super(targetClass);\n+        this.gson = gson;\n+        for (Map.Entry<String, Class<? extends Converter>> entry : DEFAULT_CONVERTER_MAP.entrySet()) {\n+            try {\n+                if (converters instanceof LiteralConverter) {\n+                    continue;\n+                }\n+                converters.add(entry.getValue().newInstance());\n+            } catch (IllegalAccessException | InstantiationException ignore) {\n+            }\n+        }\n+    }\n+\n+    protected void logger(LogLevel level, String message, Throwable e) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxMTI1OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473811259", "bodyText": "Good idea", "author": "lujiajing1126", "createdAt": "2020-08-20T09:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTQxMQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473829411", "bodyText": "Implemented", "author": "lujiajing1126", "createdAt": "2020-08-20T09:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3Nzc5Ng==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473777796", "bodyText": "Traditionally, we put the benchmark result in the class comments. Then other developers could have a clear result at the first time, rather than running on its own laptop.", "author": "wu-sheng", "createdAt": "2020-08-20T08:48:57Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/logging/core/LoggingBenchmark.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.logging.core;\n+\n+import com.google.gson.Gson;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class LoggingBenchmark {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTI3OQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473829279", "bodyText": "Report added", "author": "lujiajing1126", "createdAt": "2020-08-20T09:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3Nzc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MTg5MA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473781890", "bodyText": "You should make SnifferConfigInitializer.initializeCoreConfig(agentArgs); in a separate try/catch/finally to reset the logger, please do this so many times.", "author": "wu-sheng", "createdAt": "2020-08-20T08:53:31Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -65,63 +66,68 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n \n             pluginFinder = new PluginFinder(new PluginBootstrap().loadPlugins());\n         } catch (AgentPackageNotFoundException ape) {\n-            logger.error(ape, \"Locate agent.jar failure. Shutting down.\");\n+            LOGGER = LogManager.getLogger(SkyWalkingAgent.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MjQ4Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473842482", "bodyText": "Pls check again the current modification", "author": "lujiajing1126", "createdAt": "2020-08-20T10:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxMjI5NQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473812295", "bodyText": "But this could be a potential bug in the future, as getKey returns empty string in default, so they could override with each other.", "author": "wu-sheng", "createdAt": "2020-08-20T09:30:03Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/JsonLogger.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.logging.core;\n+\n+import com.google.gson.Gson;\n+import org.apache.skywalking.apm.agent.core.logging.core.converters.LiteralConverter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class JsonLogger extends AbstractLogger {\n+    private final Gson gson;\n+\n+    public JsonLogger(Class<?> targetClass, Gson gson) {\n+        this(targetClass.getSimpleName(), gson);\n+    }\n+\n+    public JsonLogger(String targetClass, Gson gson) {\n+        super(targetClass);\n+        this.gson = gson;\n+        for (Map.Entry<String, Class<? extends Converter>> entry : DEFAULT_CONVERTER_MAP.entrySet()) {\n+            try {\n+                if (converters instanceof LiteralConverter) {\n+                    continue;\n+                }\n+                converters.add(entry.getValue().newInstance());\n+            } catch (IllegalAccessException | InstantiationException ignore) {\n+            }\n+        }\n+    }\n+\n+    protected void logger(LogLevel level, String message, Throwable e) {\n+        WriterFactory.getLogWriter().write(generateJson(level, message, e));\n+    }\n+\n+    String generateJson(LogLevel level, String message, Throwable e) {\n+        LogEvent logEvent = new LogEvent(level, message, e, this.targetClass);\n+        Map<String, String> log = new HashMap<>();\n+        for (Converter converter : this.converters) {\n+            log.put(converter.getKey(), converter.convert(logEvent));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMTQ0MA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473831440", "bodyText": "I agree. Default behavior has been removed", "author": "lujiajing1126", "createdAt": "2020-08-20T09:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxMjI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDc4Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473954782", "bodyText": "This reformat seems very strange. Why do this? If you want to reformat, this is a better choice.\n        AgentBuilder agentBuilder = new AgentBuilder.Default(byteBuddy).ignore(\n            nameStartsWith(\"net.bytebuddy.\")\n                .or(nameStartsWith(\"org.slf4j.\"))\n                .or(nameStartsWith(\"org.groovy.\"))\n                .or(nameContains(\"javassist\"))\n                .or(nameContains(\".asm.\"))\n                .or(nameContains(\".reflectasm.\"))\n                .or(nameStartsWith(\"sun.reflect\"))\n                .or(allSkyWalkingAgentExcludeToolkit())\n                .or(ElementMatchers.isSynthetic()));", "author": "wu-sheng", "createdAt": "2020-08-20T13:07:33Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -75,14 +84,14 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n         final ByteBuddy byteBuddy = new ByteBuddy().with(TypeValidation.of(Config.Agent.IS_OPEN_DEBUGGING_CLASS));\n \n         AgentBuilder agentBuilder = new AgentBuilder.Default(byteBuddy).ignore(\n-            nameStartsWith(\"net.bytebuddy.\").or(nameStartsWith(\"org.slf4j.\"))\n-                                            .or(nameStartsWith(\"org.groovy.\"))\n-                                            .or(nameContains(\"javassist\"))\n-                                            .or(nameContains(\".asm.\"))\n-                                            .or(nameContains(\".reflectasm.\"))\n-                                            .or(nameStartsWith(\"sun.reflect\"))\n-                                            .or(allSkyWalkingAgentExcludeToolkit())\n-                                            .or(ElementMatchers.isSynthetic()));\n+                nameStartsWith(\"net.bytebuddy.\").or(nameStartsWith(\"org.slf4j.\"))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAxMjA0OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r474012048", "bodyText": "Oh. Just something strange with my editor, I will try to improve them.\nAny standard format plugin or rules we can use for IDEA?", "author": "lujiajing1126", "createdAt": "2020-08-20T14:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk4NjM0NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r476986344", "bodyText": "Fixed", "author": "lujiajing1126", "createdAt": "2020-08-26T02:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDkxOQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r473954919", "bodyText": "Same strange format here.", "author": "wu-sheng", "createdAt": "2020-08-20T13:07:50Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -109,10 +118,10 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n         }\n \n         agentBuilder.type(pluginFinder.buildMatch())\n-                    .transform(new Transformer(pluginFinder))\n-                    .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)\n-                    .with(new Listener())\n-                    .installOn(instrumentation);\n+                .transform(new Transformer(pluginFinder))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk4NjI1Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r476986257", "bodyText": "Fixed", "author": "lujiajing1126", "createdAt": "2020-08-26T02:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDkxOQ=="}], "type": "inlineReview"}, {"oid": "a59682b1e2e3bf8c2a4701d79f8461320eb7f631", "url": "https://github.com/apache/skywalking/commit/a59682b1e2e3bf8c2a4701d79f8461320eb7f631", "message": "add json logger", "committedDate": "2020-08-26T01:51:32Z", "type": "commit"}, {"oid": "3385a2fc15e305df8a23ce6fad6090c83ffef5ff", "url": "https://github.com/apache/skywalking/commit/3385a2fc15e305df8a23ce6fad6090c83ffef5ff", "message": "add unit test", "committedDate": "2020-08-26T01:51:36Z", "type": "commit"}, {"oid": "f1b8d92701e29bc73b03a957ff0f25466edf5328", "url": "https://github.com/apache/skywalking/commit/f1b8d92701e29bc73b03a957ff0f25466edf5328", "message": "catch illegal logger exception", "committedDate": "2020-08-26T01:51:36Z", "type": "commit"}, {"oid": "ba9fd9924ac3eedfe1757c6cd371a205a4e529e4", "url": "https://github.com/apache/skywalking/commit/ba9fd9924ac3eedfe1757c6cd371a205a4e529e4", "message": "add test for agent", "committedDate": "2020-08-26T01:51:36Z", "type": "commit"}, {"oid": "210a69aaba1efff5eb6aae86ca21e419ab893313", "url": "https://github.com/apache/skywalking/commit/210a69aaba1efff5eb6aae86ca21e419ab893313", "message": "fix style issues", "committedDate": "2020-08-26T01:51:36Z", "type": "commit"}, {"oid": "e8b17290499ef6d9f8754ff5842df52d55862013", "url": "https://github.com/apache/skywalking/commit/e8b17290499ef6d9f8754ff5842df52d55862013", "message": "use ConfigInitializer", "committedDate": "2020-08-26T01:53:11Z", "type": "commit"}, {"oid": "9be6e96b1cc6506828932ce2f87fe448e808b327", "url": "https://github.com/apache/skywalking/commit/9be6e96b1cc6506828932ce2f87fe448e808b327", "message": "add benchmark", "committedDate": "2020-08-26T01:53:14Z", "type": "commit"}, {"oid": "dbe4d32684cd111331b3fa594af5611b6adda686", "url": "https://github.com/apache/skywalking/commit/dbe4d32684cd111331b3fa594af5611b6adda686", "message": "init logger in SnifferConfigInitializer", "committedDate": "2020-08-26T01:54:52Z", "type": "commit"}, {"oid": "d845b7300879fb8701c802b28c591b0f44ba4b51", "url": "https://github.com/apache/skywalking/commit/d845b7300879fb8701c802b28c591b0f44ba4b51", "message": "refactor AbstractLogger", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "fe9e5f8f77129199bab9afe0d29c69040745ad5b", "url": "https://github.com/apache/skywalking/commit/fe9e5f8f77129199bab9afe0d29c69040745ad5b", "message": "revert logger name", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "42c8a75e153872e478a3620b1af5f76dc56742a8", "url": "https://github.com/apache/skywalking/commit/42c8a75e153872e478a3620b1af5f76dc56742a8", "message": "use RESOLVER instead of LOGGER", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "5db8be15c0005e270039f2987d1e7dd273019801", "url": "https://github.com/apache/skywalking/commit/5db8be15c0005e270039f2987d1e7dd273019801", "message": "add benchmark result", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "c2ff5d706b0c1a3f8c498ea26b7976c9f744f289", "url": "https://github.com/apache/skywalking/commit/c2ff5d706b0c1a3f8c498ea26b7976c9f744f289", "message": "refactor interface not to use default method for getKey()", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "c6c3e8b9f8b4bb6780c817eb0a17ff8fcee21f8b", "url": "https://github.com/apache/skywalking/commit/c6c3e8b9f8b4bb6780c817eb0a17ff8fcee21f8b", "message": "separate try/catch/finally for SnifferConfigInitializer.initializeCoreConfig", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "d3625fb942804ad330036f32db483fd87bc26a57", "url": "https://github.com/apache/skywalking/commit/d3625fb942804ad330036f32db483fd87bc26a57", "message": "polish", "committedDate": "2020-08-26T01:54:53Z", "type": "commit"}, {"oid": "96c92eae89f6e1d2d667d883d9da5c4f095ec718", "url": "https://github.com/apache/skywalking/commit/96c92eae89f6e1d2d667d883d9da5c4f095ec718", "message": "fix LOGGER style after rebase master", "committedDate": "2020-08-26T02:14:38Z", "type": "commit"}, {"oid": "1b24bbef7e3673c0b8504782cd9ba5526168b19f", "url": "https://github.com/apache/skywalking/commit/1b24bbef7e3673c0b8504782cd9ba5526168b19f", "message": "improve style", "committedDate": "2020-08-26T02:18:46Z", "type": "commit"}, {"oid": "8b600d2a7ac32191373068043133f9e1191fb0f6", "url": "https://github.com/apache/skywalking/commit/8b600d2a7ac32191373068043133f9e1191fb0f6", "message": "improve code format", "committedDate": "2020-08-26T02:19:14Z", "type": "commit"}, {"oid": "61614375052f07c6030d50ca0768e2ef1c4d7f8d", "url": "https://github.com/apache/skywalking/commit/61614375052f07c6030d50ca0768e2ef1c4d7f8d", "message": "re-throw exception if creating converter fails", "committedDate": "2020-08-26T02:22:24Z", "type": "commit"}, {"oid": "b94b80bd7166bc2aa78d25410cdbe6f6c51c9571", "url": "https://github.com/apache/skywalking/commit/b94b80bd7166bc2aa78d25410cdbe6f6c51c9571", "message": "Merge branch 'master' into master", "committedDate": "2020-08-26T02:24:49Z", "type": "commit"}, {"oid": "c0cfa7311d436715976641d9a023194de922406f", "url": "https://github.com/apache/skywalking/commit/c0cfa7311d436715976641d9a023194de922406f", "message": "remove configuration for json logger", "committedDate": "2020-08-26T02:51:54Z", "type": "commit"}, {"oid": "ca9e321be6f576e8a2fb23c4bcc6707d7b77ba35", "url": "https://github.com/apache/skywalking/commit/ca9e321be6f576e8a2fb23c4bcc6707d7b77ba35", "message": "fix test", "committedDate": "2020-08-26T02:55:41Z", "type": "commit"}, {"oid": "ee7dd0fae63c794e21e86a1ed523f2ac9373edae", "url": "https://github.com/apache/skywalking/commit/ee7dd0fae63c794e21e86a1ed523f2ac9373edae", "message": "add docs", "committedDate": "2020-08-26T03:19:05Z", "type": "commit"}, {"oid": "2f48ca0e9102f9fc0a684a821f7473d2def7e792", "url": "https://github.com/apache/skywalking/commit/2f48ca0e9102f9fc0a684a821f7473d2def7e792", "message": "Merge branch 'master' into master", "committedDate": "2020-08-26T05:23:13Z", "type": "commit"}, {"oid": "970364d996214a4a230ff489bef0c8edc7d06f93", "url": "https://github.com/apache/skywalking/commit/970364d996214a4a230ff489bef0c8edc7d06f93", "message": "Merge branch 'master' into master", "committedDate": "2020-08-26T08:49:53Z", "type": "commit"}, {"oid": "f3009c39d3fca70e1cba217b11502f0144b26da0", "url": "https://github.com/apache/skywalking/commit/f3009c39d3fca70e1cba217b11502f0144b26da0", "message": "Merge branch 'master' into master", "committedDate": "2020-08-26T15:35:56Z", "type": "commit"}, {"oid": "c0dab0008fa9494e5bc3bfa723d05036aa095a26", "url": "https://github.com/apache/skywalking/commit/c0dab0008fa9494e5bc3bfa723d05036aa095a26", "message": "Merge branch 'master' into master", "committedDate": "2020-08-26T15:51:13Z", "type": "commit"}, {"oid": "3c8390cfad1ea86e5d7a893af9debac4afeea029", "url": "https://github.com/apache/skywalking/commit/3c8390cfad1ea86e5d7a893af9debac4afeea029", "message": "Merge branch 'master' into master", "committedDate": "2020-08-28T06:28:26Z", "type": "commit"}, {"oid": "7658d69e41460d181b2448dc64e2aae4216874f4", "url": "https://github.com/apache/skywalking/commit/7658d69e41460d181b2448dc64e2aae4216874f4", "message": "fix wrong key issue", "committedDate": "2020-08-28T08:32:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NDYwMA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r478944600", "bodyText": "You are adding this.", "author": "wu-sheng", "createdAt": "2020-08-28T08:33:51Z", "path": "pom.xml", "diffHunk": "@@ -250,6 +250,14 @@\n             <version>${jmh.version}</version>\n             <scope>test</scope>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.openjdk.jmh</groupId>\n+            <artifactId>jmh-generator-annprocess</artifactId>\n+            <version>${jmh.version}</version>\n+            <scope>test</scope>\n+        </dependency>", "originalCommit": "3c8390cfad1ea86e5d7a893af9debac4afeea029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjQwMg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r478946402", "bodyText": "Oh, what's wrong with this dependency?\nI didn't manage to run the micro benchmark without this module.", "author": "lujiajing1126", "createdAt": "2020-08-28T08:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0ODI1NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r478948254", "bodyText": "Take a close look at the CI error log, you posted to me. You are the one taking care of new things.\nI am not saying anything is wrong, I am pointing you out, your changes trigger errors.", "author": "wu-sheng", "createdAt": "2020-08-28T08:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MTc2Mw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r478951763", "bodyText": "You are adding this.\n\nI see what's wrong here. I am trying to resolve this.", "author": "lujiajing1126", "createdAt": "2020-08-28T08:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MDUxNA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479350514", "bodyText": "Fixed", "author": "lujiajing1126", "createdAt": "2020-08-28T14:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NDYwMA=="}], "type": "inlineReview"}, {"oid": "121db31f481ab77e7fb884f023a1524bf9c71951", "url": "https://github.com/apache/skywalking/commit/121db31f481ab77e7fb884f023a1524bf9c71951", "message": "move jmh-annotation-processor to dependencyManagement", "committedDate": "2020-08-28T09:38:15Z", "type": "commit"}, {"oid": "5eff29e091211351dca57f1c3fc8f351083a875e", "url": "https://github.com/apache/skywalking/commit/5eff29e091211351dca57f1c3fc8f351083a875e", "message": "explicitly exclude generated benchmarks", "committedDate": "2020-08-28T10:02:00Z", "type": "commit"}, {"oid": "15a976445378b36a77a0549bad949a9e4d443ecf", "url": "https://github.com/apache/skywalking/commit/15a976445378b36a77a0549bad949a9e4d443ecf", "message": "Merge branch 'master' into master", "committedDate": "2020-08-28T14:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479376702", "bodyText": "Could you share which part generates these classes?\nAnd please move this to the last one.", "author": "wu-sheng", "createdAt": "2020-08-28T15:25:54Z", "path": "pom.xml", "diffHunk": "@@ -581,6 +588,7 @@\n                     </resourceExcludes>\n                     <excludes>\n                         **/target/generated-test-sources/**,\n+                        org/apache/skywalking/apm/agent/core/logging/core/generated/LoggingBenchmark*.java,", "originalCommit": "15a976445378b36a77a0549bad949a9e4d443ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4ODU2OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479388568", "bodyText": "Fixed.\nThese synthetic codes are generated by the \"jmh-annotation-processor\" according to the document.\nIn the past, this dependency is not included even if there is another benchmark LinkedArrayBenchmark. I guess this was the trick.", "author": "lujiajing1126", "createdAt": "2020-08-28T15:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5MjE5Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479392192", "bodyText": "Could you highlight which parts of documents talking about this code generation?", "author": "wu-sheng", "createdAt": "2020-08-28T15:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5MjY1OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479392658", "bodyText": "LinkedArrayBenchmark doesn' generate codes, as you can see from the excludes list, nothing about DataCarrier packages.", "author": "wu-sheng", "createdAt": "2020-08-28T15:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5MzUwNA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479393504", "bodyText": "In the \"Basic Considerations\" section, it reads\n\nIn all cases, the key to using JMH is enabling the annotation- or bytecode-processors to generate the synthetic benchmark code.", "author": "lujiajing1126", "createdAt": "2020-08-28T15:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5OTQ0NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479399444", "bodyText": "LinkedArrayBenchmark doesn' generate codes, as you can see from the excludes list, nothing about DataCarrier packages.\n\nCould you check why this? Even now, it doesn't generate new codes. I prefer we don't need to generate anything.\nLess dependency(even test scope only), less maintenance.", "author": "wu-sheng", "createdAt": "2020-08-28T16:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NDg2OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479594868", "bodyText": "Also, without adding this dependency, LinkedArrayBenchmark still is able to run in the IntelliJ, what is the difference or do I miss anything?", "author": "wu-sheng", "createdAt": "2020-08-29T02:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYwMzY4OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479603688", "bodyText": "Also, without adding this dependency, LinkedArrayBenchmark still is able to run in the IntelliJ, what is the difference or do I miss anything?\n\nI've tried to run this benchmark, but I failed. An error is reported,\nException in thread \"main\" java.lang.RuntimeException: ERROR: Unable to find the resource: /META-INF/BenchmarkList\n\tat org.openjdk.jmh.runner.AbstractResourceReader.getReaders(AbstractResourceReader.java:98)\n\tat org.openjdk.jmh.runner.BenchmarkList.find(BenchmarkList.java:122)\n\tat org.openjdk.jmh.runner.Runner.internalRun(Runner.java:263)\n\tat org.openjdk.jmh.runner.Runner.run(Runner.java:209)\n\tat org.apache.skywalking.apm.commons.datacarrier.LinkedArrayBenchmark.main(LinkedArrayBenchmark.java:176)\n\nHow can you run this benchmark in IDEA?", "author": "lujiajing1126", "createdAt": "2020-08-29T03:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYwNDIzOA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479604238", "bodyText": "Probably you have some special setup with your IDE? Actually I found some issues related to the \"jmh-generator-annprocess\",\nartyushov/idea-jmh-plugin#13\nundertow-io/undertow#833", "author": "lujiajing1126", "createdAt": "2020-08-29T04:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYwNDM4Ng==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479604386", "bodyText": "@kezhenxu94 Can you also kindly make a cross-check?", "author": "lujiajing1126", "createdAt": "2020-08-29T04:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYxNzc0MQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479617741", "bodyText": "@kezhenxu94 Can you also kindly make a cross-check?\n\nThe same error as yours", "author": "kezhenxu94", "createdAt": "2020-08-29T07:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYxOTg4NA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479619884", "bodyText": "But why that benchmark doesn't generate anything? That is why I am asking the question.", "author": "wu-sheng", "createdAt": "2020-08-29T07:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMjEwNA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479622104", "bodyText": "But why that benchmark doesn't generate anything? That is why I am asking the question.\n\nI am not clear about what happened in the past. I guess it was a trick to avoid the style-check issue. But I am sure the dependency should have been declared there.\nI am still curious why you can run it seamlessly?\nAs I understand, this LOC should help, but actually not\n\n  \n    \n      skywalking/pom.xml\n    \n    \n         Line 583\n      in\n      cbb2e17\n    \n    \n    \n    \n\n        \n          \n           **/target/generated-test-sources/**,", "author": "lujiajing1126", "createdAt": "2020-08-29T07:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMzMyNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479623325", "bodyText": "I am still curious why you can run it seamlessly?\n\nI am not sure either. The dependency seems not an issue. I am just checking the inconsistent issue, two benchmarks having different exclusion configuration concerns me.\n\nAs I understand, this LOC should help\n\nThen why your benchmark isn't excluded?", "author": "wu-sheng", "createdAt": "2020-08-29T08:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjkwNA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479376904", "bodyText": "Add comments for this.", "author": "wu-sheng", "createdAt": "2020-08-28T15:26:16Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -62,7 +63,15 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n         final PluginFinder pluginFinder;\n         try {\n             SnifferConfigInitializer.initializeCoreConfig(agentArgs);\n+        } catch (Exception e) {\n+            LogManager.getLogger(SkyWalkingAgent.class)\n+                    .error(e, \"SkyWalking agent initialized failure. Shutting down.\");\n+            return;\n+        } finally {\n+            LOGGER = LogManager.getLogger(SkyWalkingAgent.class);", "originalCommit": "15a976445378b36a77a0549bad949a9e4d443ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5MTczMg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479391732", "bodyText": "Added", "author": "lujiajing1126", "createdAt": "2020-08-28T15:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NjkwNA=="}], "type": "inlineReview"}, {"oid": "7a90ce66ee5542cbc97be3fce9a5598a0cf5825a", "url": "https://github.com/apache/skywalking/commit/7a90ce66ee5542cbc97be3fce9a5598a0cf5825a", "message": "change order of exclude rules", "committedDate": "2020-08-28T15:43:15Z", "type": "commit"}, {"oid": "ed2bd6df8112406bcfd6bc186dc50b752d1baf3b", "url": "https://github.com/apache/skywalking/commit/ed2bd6df8112406bcfd6bc186dc50b752d1baf3b", "message": "add comment for agent", "committedDate": "2020-08-28T15:52:19Z", "type": "commit"}, {"oid": "50346fdd7709a77cb3fb9c5285bcef6abe613ff2", "url": "https://github.com/apache/skywalking/commit/50346fdd7709a77cb3fb9c5285bcef6abe613ff2", "message": "Merge branch 'master' into master", "committedDate": "2020-08-29T07:30:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMDMxNA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479620314", "bodyText": "Could you recheck, whether we are going to use timestamp or @timestamp.", "author": "wu-sheng", "createdAt": "2020-08-29T07:34:30Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/JsonLogger.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.logging.core;\n+\n+import com.google.gson.Gson;\n+import org.apache.skywalking.apm.agent.core.logging.core.converters.LiteralConverter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An alternative logger for the SkyWalking agent. The default layout is\n+ * {\n+ *     \"timestamp\": \"\", // timestamp", "originalCommit": "50346fdd7709a77cb3fb9c5285bcef6abe613ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMjQ4OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479622488", "bodyText": "A typo here. Should be @timestamp. Fixed", "author": "lujiajing1126", "createdAt": "2020-08-29T07:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMDMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTQyOA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479621428", "bodyText": "This is not required, right? As you have used the dependency management.", "author": "wu-sheng", "createdAt": "2020-08-29T07:36:35Z", "path": "apm-sniffer/apm-agent-core/pom.xml", "diffHunk": "@@ -104,6 +104,12 @@\n             <version>${ststem-rules.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.openjdk.jmh</groupId>\n+            <artifactId>jmh-generator-annprocess</artifactId>\n+            <version>${jmh.version}</version>", "originalCommit": "50346fdd7709a77cb3fb9c5285bcef6abe613ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMjM4NQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479622385", "bodyText": "Yes. Removed now", "author": "lujiajing1126", "createdAt": "2020-08-29T07:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTUyNQ==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479621525", "bodyText": "Why I can't find the dependency on the DataCarrier pom.xml?", "author": "wu-sheng", "createdAt": "2020-08-29T07:37:16Z", "path": "pom.xml", "diffHunk": "@@ -290,6 +291,12 @@\n                 <version>${powermock.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+            <dependency>\n+                <groupId>org.openjdk.jmh</groupId>\n+                <artifactId>jmh-generator-annprocess</artifactId>\n+                <version>${jmh.version}</version>\n+                <scope>test</scope>\n+            </dependency>", "originalCommit": "50346fdd7709a77cb3fb9c5285bcef6abe613ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMjQyNw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479622427", "bodyText": "I am also curious", "author": "lujiajing1126", "createdAt": "2020-08-29T07:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMzQ2Nw==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479623467", "bodyText": "I mean you should, my local IDE may be set differently, but as you are adding this, we should make sure this is added in all necessary places.", "author": "wu-sheng", "createdAt": "2020-08-29T08:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNTk5Ng==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479625996", "bodyText": "I mean you should, my local IDE may be set differently, but as you are adding this, we should make sure this is added in all necessary places.\n\nI have added this dependency to all necessary modules to ensure those benchmarks can be run locally.\nAlso two general exclude rules are introduced to exclude all jmh generated classes.\n**/generated/*_jmhType*.java,\n**/generated/*_jmhTest.java", "author": "lujiajing1126", "createdAt": "2020-08-29T08:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjk2Mg==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479626962", "bodyText": "**/generated/*_jmhType*.java,\n**/generated/*_jmhTest.java\n\nThis is good.", "author": "wu-sheng", "createdAt": "2020-08-29T08:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyMTUyNQ=="}], "type": "inlineReview"}, {"oid": "ed94bc706d0898d6dcfe1fb3c14d53a8c6117d2d", "url": "https://github.com/apache/skywalking/commit/ed94bc706d0898d6dcfe1fb3c14d53a8c6117d2d", "message": "remove version of jmh-generator-annprocess as dep management is used", "committedDate": "2020-08-29T07:48:04Z", "type": "commit"}, {"oid": "5369d54b68202a22f2a01064c702b2d0caa32f2c", "url": "https://github.com/apache/skywalking/commit/5369d54b68202a22f2a01064c702b2d0caa32f2c", "message": "Merge branch 'master' of github.com:lujiajing1126/skywalking into master", "committedDate": "2020-08-29T07:48:32Z", "type": "commit"}, {"oid": "adc88c982712c9881eb9970ac9ea08813d361294", "url": "https://github.com/apache/skywalking/commit/adc88c982712c9881eb9970ac9ea08813d361294", "message": "fix typo", "committedDate": "2020-08-29T07:49:22Z", "type": "commit"}, {"oid": "44f4a7ebc8d4b666108a1d38c77cf55ebb3a190c", "url": "https://github.com/apache/skywalking/commit/44f4a7ebc8d4b666108a1d38c77cf55ebb3a190c", "message": "update agent settings docs", "committedDate": "2020-08-29T07:59:11Z", "type": "commit"}, {"oid": "81ffebdbef41f35ccc69630e2795170e03d481b5", "url": "https://github.com/apache/skywalking/commit/81ffebdbef41f35ccc69630e2795170e03d481b5", "message": "add necessary jmh processor to all modules containing Benchmark codes. And generally exclude jmh generated classes", "committedDate": "2020-08-29T08:31:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMTY3OA==", "url": "https://github.com/apache/skywalking/pull/5357#discussion_r479631678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `logging.resolver`|Logger resovler: `PATTERN` or `JSON`. Default is `PATTERN` with which `PatternLogger` will be used. `JSON`: `JsonLogger` is used after initialization. |`PATTERN`|\n          \n          \n            \n            `logging.resolver`|Logger resolver: `PATTERN` or `JSON`. The default is `PATTERN`, which uses `logging.pattern` to print traditional text logs. `JSON` resolver prints logs in JSON format. |`PATTERN`|", "author": "wu-sheng", "createdAt": "2020-08-29T09:42:55Z", "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -96,7 +96,8 @@ property key | Description | Default |\n `logging.file_name`|Log file name.|`skywalking-api.log`|\n `logging.output`| Log output. Default is FILE. Use CONSOLE means output to stdout. |`FILE`|\n `logging.dir`|Log files directory. Default is blank string, means, use \"{theSkywalkingAgentJarDir}/logs  \" to output logs. {theSkywalkingAgentJarDir} is the directory where the skywalking agent jar file is located |`\"\"`|\n-`logging.pattern `|logging format. There are all conversion specifiers: <br>&nbsp;&nbsp;* `%level` means log level. <br>&nbsp;&nbsp;*  `%timestamp` means now of time with format `yyyy-MM-dd HH:mm:ss:SSS`.<br>&nbsp;&nbsp;*   `%thread` means name of current thread.<br>&nbsp;&nbsp;*   `%msg` means some message which user logged. <br>&nbsp;&nbsp;*  `%class` means SimpleName of TargetClass. <br>&nbsp;&nbsp;*  `%throwable` means a throwable which user called. <br>&nbsp;&nbsp;*  `%agent_name` means `agent.service_name`  |`%level %timestamp %thread %class : %msg %throwable`|\n+`logging.resolver`|Logger resovler: `PATTERN` or `JSON`. Default is `PATTERN` with which `PatternLogger` will be used. `JSON`: `JsonLogger` is used after initialization. |`PATTERN`|", "originalCommit": "81ffebdbef41f35ccc69630e2795170e03d481b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f146b120d34d9a1a68c175e96ccedecfae5d02eb", "url": "https://github.com/apache/skywalking/commit/f146b120d34d9a1a68c175e96ccedecfae5d02eb", "message": "Update docs/en/setup/service-agent/java-agent/README.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-08-29T09:51:39Z", "type": "commit"}, {"oid": "79391aeca4409352c7dc4b145a23182141634b85", "url": "https://github.com/apache/skywalking/commit/79391aeca4409352c7dc4b145a23182141634b85", "message": "check every output in PatterLoggerTest", "committedDate": "2020-08-29T10:51:33Z", "type": "commit"}, {"oid": "4ce3cf927d2b8d9eb31303a72fba6961a4ec8543", "url": "https://github.com/apache/skywalking/commit/4ce3cf927d2b8d9eb31303a72fba6961a4ec8543", "message": "use LogMatch to do the test", "committedDate": "2020-08-29T13:08:39Z", "type": "commit"}, {"oid": "985098c6c97749a0923700ade38bda5b785fe7b8", "url": "https://github.com/apache/skywalking/commit/985098c6c97749a0923700ade38bda5b785fe7b8", "message": "fix style issues", "committedDate": "2020-08-29T13:12:34Z", "type": "commit"}]}