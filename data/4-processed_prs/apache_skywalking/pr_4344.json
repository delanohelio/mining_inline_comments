{"pr_number": 4344, "pr_title": "supprt gRPC alarm hook.", "pr_createdAt": "2020-02-10T09:44:48Z", "pr_url": "https://github.com/apache/skywalking/pull/4344", "timeline": [{"oid": "788a416b90e721cfffc300023ebd1ff05c50d6d8", "url": "https://github.com/apache/skywalking/commit/788a416b90e721cfffc300023ebd1ff05c50d6d8", "message": "support gRPC hook.", "committedDate": "2020-02-10T09:37:55Z", "type": "commit"}, {"oid": "7f8926144931812a19fdc1dd0a4b8ce305edea71", "url": "https://github.com/apache/skywalking/commit/7f8926144931812a19fdc1dd0a4b8ce305edea71", "message": "Merge branch 'master' into grpc_alarm\n\n# Conflicts:\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java", "committedDate": "2020-02-10T09:42:10Z", "type": "commit"}, {"oid": "69bdcf75e0a67c1148ebdb1acef3344d75b99adc", "url": "https://github.com/apache/skywalking/commit/69bdcf75e0a67c1148ebdb1acef3344d75b99adc", "message": "revert submodule commit.", "committedDate": "2020-02-10T09:50:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1OTY3Ng==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r376959676", "bodyText": "If you are using gRPC stream, you should use wait for the onComplete event to avoid the memory leak. What do you think?", "author": "wu-sheng", "createdAt": "2020-02-10T09:53:15Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ *\n+ * @author jian.tan\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+        if (alarmSetting != null) {\n+            GRPCClient client = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+            client.connect();\n+            alarmServiceStub = AlarmServiceGrpc.newStub(client.getChannel());\n+        }\n+    }\n+\n+    @Override public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmServiceStub == null) {\n+            return;\n+        }\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override public void onNext(Response response) {\n+\n+                }\n+\n+                @Override public void onError(Throwable throwable) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+\n+                }\n+\n+                @Override public void onCompleted() {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        if (log.isDebugEnabled()) {", "originalCommit": "7f8926144931812a19fdc1dd0a4b8ce305edea71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MDY4OQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r376960689", "bodyText": "Yeah", "author": "JaredTan95", "createdAt": "2020-02-10T09:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1OTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMDA0MQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377000041", "bodyText": "Waiting for your update.", "author": "wu-sheng", "createdAt": "2020-02-10T11:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1OTY3Ng=="}], "type": "inlineReview"}, {"oid": "3613ff6e9b9de3ee2170aaf7a38d35847d8f66ce", "url": "https://github.com/apache/skywalking/commit/3613ff6e9b9de3ee2170aaf7a38d35847d8f66ce", "message": "revert submodule commitid.", "committedDate": "2020-02-10T09:53:49Z", "type": "commit"}, {"oid": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756", "url": "https://github.com/apache/skywalking/commit/b7605f7bb3eedfa9e13bf2da8bdab863e957c756", "message": "Merge branch 'master' into grpc_alarm", "committedDate": "2020-02-10T11:11:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTU4Nw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377105587", "bodyText": "This code language  could be protobuf. It will result as following:\nmessage AlarmMessage {\n    int64 scopeId = 1;\n    string scope = 2;\n    string name = 3;\n    int64 id0 = 4;\n    int64 id1 = 5;\n    string ruleName = 6;\n    string alarmMessage = 7;\n    int64 startTime = 8;\n}", "author": "JohnNiang", "createdAt": "2020-02-10T14:45:47Z", "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -113,6 +114,24 @@ Example as following\n }]\n ```\n \n+## gRPCHook\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n+\n+Example as following\n+```text", "originalCommit": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwNTcyMw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377605723", "bodyText": "@JaredTan95 This should be fixed.", "author": "wu-sheng", "createdAt": "2020-02-11T12:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDQ4OA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377630488", "bodyText": "make sense", "author": "JaredTan95", "createdAt": "2020-02-11T13:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTU4Nw=="}], "type": "inlineReview"}, {"oid": "194df3e78407479b2042cb3ba6fcdc6103418ac5", "url": "https://github.com/apache/skywalking/commit/194df3e78407479b2042cb3ba6fcdc6103418ac5", "message": "finish logical.", "committedDate": "2020-02-11T01:18:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMTc0Mg==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377411742", "bodyText": "Don't add @author, all these will be removed by @kezhenxu94 's PR once for all.", "author": "wu-sheng", "createdAt": "2020-02-11T01:30:54Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/exporter/ExportData.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.exporter;\n+\n+import lombok.Getter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.MetricsMetaInfo;\n+\n+/**\n+ * @author jian.tan", "originalCommit": "194df3e78407479b2042cb3ba6fcdc6103418ac5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9d3ef4eaf0697bb0b2154f800028ba30fa40fe4", "url": "https://github.com/apache/skywalking/commit/c9d3ef4eaf0697bb0b2154f800028ba30fa40fe4", "message": "remove author anonatation.", "committedDate": "2020-02-11T01:39:28Z", "type": "commit"}, {"oid": "afa8e9834335cee408c52844d7ff9111bc7b98dd", "url": "https://github.com/apache/skywalking/commit/afa8e9834335cee408c52844d7ff9111bc7b98dd", "message": "Merge branch 'master' into grpc_alarm", "committedDate": "2020-02-11T03:31:13Z", "type": "commit"}, {"oid": "17e5b333894cca4e4d513e421cbe9751ba7c0c49", "url": "https://github.com/apache/skywalking/commit/17e5b333894cca4e4d513e421cbe9751ba7c0c49", "message": "fix ci.", "committedDate": "2020-02-11T04:08:14Z", "type": "commit"}, {"oid": "11f0ea1d1ef9164bd5719ee134c5165299aa3a87", "url": "https://github.com/apache/skywalking/commit/11f0ea1d1ef9164bd5719ee134c5165299aa3a87", "message": "Merge commit '5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2' into grpc_alarm\n\n# Conflicts:\n#\toap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporter.java\n#\toap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporterTest.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "committedDate": "2020-02-11T10:05:43Z", "type": "commit"}, {"oid": "f81fd13759d416ed72b45ced199c0d6d1c3850e0", "url": "https://github.com/apache/skywalking/commit/f81fd13759d416ed72b45ced199c0d6d1c3850e0", "message": "Merge branch 'master' into grpc_alarm", "committedDate": "2020-02-11T10:06:21Z", "type": "commit"}, {"oid": "2f5a4ee7453dfe82cd0ae6f4a8f27382a9336b44", "url": "https://github.com/apache/skywalking/commit/2f5a4ee7453dfe82cd0ae6f4a8f27382a9336b44", "message": "revert submodule.", "committedDate": "2020-02-11T10:13:19Z", "type": "commit"}, {"oid": "c86f56c5fb583a92f2deec7d86a80d469b28382a", "url": "https://github.com/apache/skywalking/commit/c86f56c5fb583a92f2deec7d86a80d469b28382a", "message": "Merge branch 'master' into grpc_alarm", "committedDate": "2020-02-11T12:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTA3Mw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377609073", "bodyText": "Why isn't this private?", "author": "wu-sheng", "createdAt": "2020-02-11T12:39:41Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;", "originalCommit": "c86f56c5fb583a92f2deec7d86a80d469b28382a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTQ3Mw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377609473", "bodyText": "Look like this setting isn't supporting dynamic change? But the HTTP could. I think we should keep this consistent?", "author": "wu-sheng", "createdAt": "2020-02-11T12:40:44Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+        if (alarmSetting != null) {\n+            GRPCClient client = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "originalCommit": "c86f56c5fb583a92f2deec7d86a80d469b28382a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDc2Ng==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377630766", "bodyText": "Agree", "author": "JaredTan95", "createdAt": "2020-02-11T13:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTQ3Mw=="}], "type": "inlineReview"}, {"oid": "5a362985e456e75627704bbac565be94d6449923", "url": "https://github.com/apache/skywalking/commit/5a362985e456e75627704bbac565be94d6449923", "message": "update logical.", "committedDate": "2020-02-11T13:22:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMjcwNQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377632705", "bodyText": "This way may not appropriate. I am working on it~", "author": "JaredTan95", "createdAt": "2020-02-11T13:28:25Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "originalCommit": "5a362985e456e75627704bbac565be94d6449923", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzNDIyOQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377634229", "bodyText": "Take a look at how HTTP works, it should be similar, just keep the existing client settings, and only create the new stub when settings changed.", "author": "wu-sheng", "createdAt": "2020-02-11T13:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMjcwNQ=="}], "type": "inlineReview"}, {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423", "url": "https://github.com/apache/skywalking/commit/2bb16b193074a1398db260a8ea658f22da7e0423", "message": "update logical.", "committedDate": "2020-02-11T13:56:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MDEwOA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377650108", "bodyText": "This is not example, this is the message protocol :)", "author": "wu-sheng", "createdAt": "2020-02-11T13:59:20Z", "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -115,9 +115,11 @@ Example as following\n ```\n \n ## gRPCHook\n-This code language could be `Protobuf` which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n-It will result as following:\n-```text\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n+\n+Example as following", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTA4OQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377651089", "bodyText": "Why this extends ModuleConfig?", "author": "wu-sheng", "createdAt": "2020-02-11T14:01:06Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCAlarmSetting.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import java.util.Objects;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+\n+@Setter\n+@Getter\n+public class GRPCAlarmSetting extends ModuleConfig {", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjA3NA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652074", "bodyText": "mistake, i will remove it.", "author": "JaredTan95", "createdAt": "2020-02-11T14:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTA4OQ=="}], "type": "inlineReview"}, {"oid": "3b26c16720d5c694d8720b2b88042eaf86c32701", "url": "https://github.com/apache/skywalking/commit/3b26c16720d5c694d8720b2b88042eaf86c32701", "message": "update logical.", "committedDate": "2020-02-11T14:06:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjUzOQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652539", "bodyText": "equals and hashCode methods could be replaced by Lombok annotation: @EqualsAndHashCode(callSuper = false)", "author": "JohnNiang", "createdAt": "2020-02-11T14:03:44Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCAlarmSetting.java", "diffHunk": "@@ -27,4 +28,20 @@\n public class GRPCAlarmSetting extends ModuleConfig {\n     private String targetHost;\n     private int targetPort;\n+\n+    @Override\n+    public boolean equals(final Object o) {", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjAzNw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652037", "bodyText": "There is a connection leak here, the old one should be closed.", "author": "wu-sheng", "createdAt": "2020-02-11T14:02:49Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.debug(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort(), sleepTime\n+                );\n+                cycle = 2000L;\n+            }\n+        }\n+    }\n+\n+    private void onGRPCAlarmSettingUpdated(GRPCAlarmSetting grpcAlarmSetting) {\n+        if (!grpcAlarmSetting.equals(alarmSetting)) {\n+            grpcClient = new GRPCClient(grpcAlarmSetting.getTargetHost(), grpcAlarmSetting.getTargetPort());", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjM1MA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652350", "bodyText": "I think we should not create stub and connect every time. Right?", "author": "wu-sheng", "createdAt": "2020-02-11T14:03:23Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDI5MQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377664291", "bodyText": "But, we should reconnect when client settings changed.", "author": "JaredTan95", "createdAt": "2020-02-11T14:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2ODkwNw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377668907", "bodyText": "We should, but, the setting could not change here.", "author": "wu-sheng", "createdAt": "2020-02-11T14:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjY5NQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652695", "bodyText": "This should be a warning?", "author": "wu-sheng", "createdAt": "2020-02-11T14:04:00Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.debug(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),", "originalCommit": "2bb16b193074a1398db260a8ea658f22da7e0423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDkzNA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377664934", "bodyText": "Yeah, warn is enough.", "author": "JaredTan95", "createdAt": "2020-02-11T14:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjY5NQ=="}], "type": "inlineReview"}, {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "url": "https://github.com/apache/skywalking/commit/415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "message": "fix", "committedDate": "2020-02-11T14:29:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDM1Nw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377670357", "bodyText": "We may not need to show \"Part of protocol\" file, my suggestion is to link to the alarm-hook.proto file directly, because the gRPC receiver may be implemented in any language, and the proto file is fundamental in any kind of implementation. If I were the user, I'd like to click the link and navigate to the proto file directly, instead of finding in the souce codes myself.", "author": "kezhenxu94", "createdAt": "2020-02-11T14:33:02Z", "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -113,6 +114,24 @@ Example as following\n }]\n ```\n \n+## gRPCHook\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.", "originalCommit": "3b26c16720d5c694d8720b2b88042eaf86c32701", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNDEyMw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377734123", "bodyText": "I agree with you, but link alarm-hook.proto from docs to source code dir looks weird. show part of alarm-hook.proto and explain alarm-hook.proto's location may be more friendly.", "author": "JaredTan95", "createdAt": "2020-02-11T16:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377694858", "bodyText": "There may be thread-visibility issue,  org.apache.skywalking.oap.server.core.exporter.ExportStatus#done is not volatile, BTW, ExportStatus can be annotated with Lombok annotations", "author": "kezhenxu94", "createdAt": "2020-02-11T15:09:44Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {", "originalCommit": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwNjQzMw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377706433", "bodyText": "Yes, I agree. I missed that last time.", "author": "wu-sheng", "createdAt": "2020-02-11T15:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMTQ5Mg==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377711492", "bodyText": "ExportStatus is in exporter, why use it in the alarm?\n\nMaybe a CountDownLatch is enough to make it more convenient and safe (in terms of thread visibility)?", "author": "kezhenxu94", "createdAt": "2020-02-11T15:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNjgyNg==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377716826", "bodyText": "It works, or move ExportStatus to higher-level package, such as library-util.", "author": "wu-sheng", "createdAt": "2020-02-11T15:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0Mzc3NA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377743774", "bodyText": "Considering exporter grpc(\n  \n    \n      skywalking/oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporter.java\n    \n    \n         Line 173\n      in\n      5b255ba\n    \n    \n    \n    \n\n        \n          \n           while (!status.isDone()) { \n        \n    \n  \n\n)  have the same problem and for reuse ExportStatus, move to higher-level package looks good.", "author": "JaredTan95", "createdAt": "2020-02-11T16:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTEzOQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377695139", "bodyText": "Dangling Javadoc comment", "author": "kezhenxu94", "createdAt": "2020-02-11T15:10:11Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**", "originalCommit": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwOTI0MQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377709241", "bodyText": "ExportStatus is in exporter, why use it in the alarm?", "author": "wu-sheng", "createdAt": "2020-02-11T15:30:25Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;", "originalCommit": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9079ed0407691933cd770c3601441242183bed5a", "url": "https://github.com/apache/skywalking/commit/9079ed0407691933cd770c3601441242183bed5a", "message": "fix", "committedDate": "2020-02-12T00:29:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzU3MQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377987571", "bodyText": "What if the user delete the gRPC hooks entirely? Say target host and port is empty", "author": "kezhenxu94", "createdAt": "2020-02-12T00:56:30Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+import org.apache.skywalking.oap.server.library.util.GRPCStreamStatus;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        GRPCStreamStatus status = new GRPCStreamStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+\n+        // For memory safe of oap, we must wait for the peer confirmation.\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.warn(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),\n+                         alarmSetting.getTargetHost(), alarmSetting.getTargetPort(), sleepTime\n+                );\n+                cycle = 2000L;\n+            }\n+        }\n+    }\n+\n+    private void onGRPCAlarmSettingUpdated(GRPCAlarmSetting grpcAlarmSetting) {\n+        if (!grpcAlarmSetting.equals(alarmSetting)) {\n+            grpcClient.shutdown();\n+            grpcClient = new GRPCClient(grpcAlarmSetting.getTargetHost(), grpcAlarmSetting.getTargetPort());", "originalCommit": "9079ed0407691933cd770c3601441242183bed5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODAwOA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377988008", "bodyText": "Alarm is rare in most cases, this client may be lazily initialized (in doAlarm method)?", "author": "kezhenxu94", "createdAt": "2020-02-12T00:58:12Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+import org.apache.skywalking.oap.server.library.util.GRPCStreamStatus;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "originalCommit": "9079ed0407691933cd770c3601441242183bed5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDM5Ng==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377990396", "bodyText": "If that, GRPCClient instance will be initialized every time indoAlarm mthoid, may not appropriate.", "author": "JaredTan95", "createdAt": "2020-02-12T01:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NjQxNA==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377996414", "bodyText": "If that, GRPCClient instance will be initialized every time indoAlarm mthoid, may not appropriate.\n\nOf course you should take care whether the client is initialized or not", "author": "kezhenxu94", "createdAt": "2020-02-12T01:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NjgyMg==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377996822", "bodyText": "Anyway, not important thing, mark as resolved", "author": "kezhenxu94", "createdAt": "2020-02-12T01:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODAwOA=="}], "type": "inlineReview"}, {"oid": "b63fda47101a488fa431147ddf1ee55b8790a072", "url": "https://github.com/apache/skywalking/commit/b63fda47101a488fa431147ddf1ee55b8790a072", "message": "fix empty settings.", "committedDate": "2020-02-12T02:45:45Z", "type": "commit"}, {"oid": "0635bbe9b637a9baabd2ca244cdf99e6d9f62efe", "url": "https://github.com/apache/skywalking/commit/0635bbe9b637a9baabd2ca244cdf99e6d9f62efe", "message": "fix.", "committedDate": "2020-02-12T02:57:07Z", "type": "commit"}, {"oid": "abaee0f41da3873f90e208e200176086ed45bb98", "url": "https://github.com/apache/skywalking/commit/abaee0f41da3873f90e208e200176086ed45bb98", "message": "Merge branch 'master' into grpc_alarm", "committedDate": "2020-02-12T06:08:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1OTM5OQ==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r378059399", "bodyText": "FYI @kezhenxu94 By following your style, do we have a format way to make sure all these imports are in the same order rather than different people using different orders.", "author": "wu-sheng", "createdAt": "2020-02-12T06:24:22Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java", "diffHunk": "@@ -18,23 +18,22 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider;\n \n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.alarm.AlarmModule;\n+import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCAlarmSetting;", "originalCommit": "abaee0f41da3873f90e208e200176086ed45bb98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMzkyMw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r378103923", "bodyText": "FYI @kezhenxu94 By following your style, do we have a format way to make sure all these imports are in the same order rather than different people using different orders.\n\nFollowing the codeStyle.xml, the import order is deterministic, these changes are expected because I didn't format them before", "author": "kezhenxu94", "createdAt": "2020-02-12T08:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1OTM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExMTUwNw==", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r378111507", "bodyText": "Got it. I was expected the format check will do in a strict way, it will make the changelog more clear for everyone.", "author": "wu-sheng", "createdAt": "2020-02-12T08:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1OTM5OQ=="}], "type": "inlineReview"}]}