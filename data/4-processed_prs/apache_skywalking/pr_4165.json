{"pr_number": 4165, "pr_title": "Add kotlin coroutine plugin", "pr_createdAt": "2020-01-02T15:14:13Z", "pr_url": "https://github.com/apache/skywalking/pull/4165", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUxMjg4MA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362512880", "bodyText": "This should not be added. COROUTINE is a local span. Should not be Layer.", "author": "wu-sheng", "createdAt": "2020-01-02T15:27:48Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/SpanLayer.java", "diffHunk": "@@ -26,7 +26,8 @@\n     RPC_FRAMEWORK(2),\n     HTTP(3),\n     MQ(4),\n-    CACHE(5);\n+    CACHE(5),\n+    COROUTINE(6);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUxMzg4Nw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362513887", "bodyText": "Got it, I create it for other incoming coroutine plugins, like goroutine etc.", "author": "devkanro", "createdAt": "2020-01-02T15:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUxMjg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUxNjgwNA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362516804", "bodyText": "Why is kotlin coroutine plugin as bootstrap plugin? From my understanding, Kotlin still run inside JVM, and compiled as .class files. Bootstrap plugins should be rt.jar level injection. Does koltin plugin require this?", "author": "wu-sheng", "createdAt": "2020-01-02T15:38:22Z", "path": "apm-sniffer/bootstrap-plugins/pom.xml", "diffHunk": "@@ -43,6 +43,7 @@\n     <modules>\n         <module>jdk-http-plugin</module>\n         <module>jdk-threading-plugin</module>\n+        <module>kotlin-coroutine-plugin</module>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMDMwOQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362520309", "bodyText": "I have another implementation for this plugin, it based on ThreadContextElement which is Kotlin coroutine context for syncing thread context, it needs to create interceptor point in newCoroutineContext, but I got some bugs with creating the key object of ThreadContextElement(singleton be created twice), I change this plugin into bootstrap plugin, It works fine, I will do more test for it, and I will change it to a normal plugin after those test.", "author": "devkanro", "createdAt": "2020-01-02T15:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUxNjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMDI3OQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362520279", "bodyText": "I meant this, although the name is \u201cstdlib\u201d, but for Java it is not really standard, all the classes/functions in it will cause ClassNotFoundException when users are using vanilla Java", "author": "kezhenxu94", "createdAt": "2020-01-02T15:47:26Z", "path": "apm-sniffer/bootstrap-plugins/kotlin-coroutine-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.skywalking</groupId>\n+        <artifactId>bootstrap-plugins</artifactId>\n+        <version>7.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-kotlin-coroutine-plugin</artifactId>\n+    <name>kotlin-coroutine-plugin</name>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <kotlin.version>1.3.61</kotlin.version>\n+        <kotlinx.coroutine.version>1.3.3</kotlinx.coroutine.version>\n+        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMzU5Mw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362523593", "bodyText": "Yeah, you are right, I assumed people who will use this plugin must be a Kotlin project, I will try to rewrite it in java.", "author": "devkanro", "createdAt": "2020-01-02T15:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMDI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMDU4MQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362520581", "bodyText": "Obviously it\u2019s not bootstrap plugin", "author": "kezhenxu94", "createdAt": "2020-01-02T15:48:11Z", "path": "apm-sniffer/bootstrap-plugins/kotlin-coroutine-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.skywalking</groupId>\n+        <artifactId>bootstrap-plugins</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMjI5MA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362522290", "bodyText": "@wu-sheng has commented it too, I have reply to him, check it.\n\nI have another implementation for this plugin, it based on ThreadContextElement which is Kotlin coroutine context for syncing thread context, it needs to create interceptor point in newCoroutineContext, but I got some bugs with creating the key object of ThreadContextElement(singleton be created twice), I change this plugin into bootstrap plugin, It works fine, I will do more test for it, and I will change it to a normal plugin after those test.", "author": "devkanro", "createdAt": "2020-01-02T15:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjUyMDU4MQ=="}], "type": "inlineReview"}, {"oid": "8ad1ad64fbb00a03851932c0ea899c4a6f8b311b", "url": "https://github.com/apache/skywalking/commit/8ad1ad64fbb00a03851932c0ea899c4a6f8b311b", "message": "Kotlin coroutine plugin write in Java", "committedDate": "2020-01-02T17:13:33Z", "type": "commit"}, {"oid": "8ad1ad64fbb00a03851932c0ea899c4a6f8b311b", "url": "https://github.com/apache/skywalking/commit/8ad1ad64fbb00a03851932c0ea899c4a6f8b311b", "message": "Kotlin coroutine plugin write in Java", "committedDate": "2020-01-02T17:13:33Z", "type": "forcePushed"}, {"oid": "47cbf78f5cb8139f79724ecb700b730f0f0a46e4", "url": "https://github.com/apache/skywalking/commit/47cbf78f5cb8139f79724ecb700b730f0f0a46e4", "message": "Add license", "committedDate": "2020-01-03T07:03:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcyMTEzNA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362721134", "bodyText": "Do we need it?", "author": "dmsolr", "createdAt": "2020-01-03T07:15:21Z", "path": "apm-sniffer/optional-plugins/kotlin-coroutine-plugin/src/main/java/org/apache/skywalking/apm/plugin/kotlin/coroutine/TracingRunnable.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kotlin.coroutine;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+/**\n+ * {@link Runnable} wrapper with trace context snapshot, it will create span\n+ * with context snapshot around {@link Runnable} runs.\n+ * <p>\n+ * A class implementation will be cheaper cost than lambda with captured\n+ * variables implementation.\n+ */\n+class TracingRunnable implements Runnable {\n+    private static final String COROUTINE = \"/Kotlin/Coroutine\";\n+\n+    private ContextSnapshot snapshot;\n+    private Runnable delegate;\n+    private String tracingId;\n+\n+    private TracingRunnable(ContextSnapshot snapshot, Runnable delegate, String tracingId) {\n+        this.snapshot = snapshot;\n+        this.delegate = delegate;\n+        this.tracingId = tracingId;\n+    }\n+\n+    private TracingRunnable(ContextSnapshot snapshot, Runnable delegate) {\n+        this(snapshot, delegate, ContextManager.getGlobalTraceId());\n+    }\n+\n+    /**\n+     * Wrap {@link Runnable} by {@link TracingRunnable} if active trace context\n+     * existed.\n+     *\n+     * @param delegate {@link Runnable} to wrap.\n+     *\n+     * @return Wrapped {@link TracingRunnable} or original {@link Runnable} if\n+     * trace context not existed.\n+     */\n+    public static Runnable wrapOrNot(Runnable delegate) {\n+        // Just wrap continuation with active trace context\n+        if (ContextManager.isActive()) {\n+            return new TracingRunnable(ContextManager.capture(), delegate);\n+        } else {\n+            return delegate;\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (ContextManager.getGlobalTraceId().equals(tracingId)) {\n+            // Trace id same with before dispatching, skip restore snapshot.\n+            delegate.run();\n+            return;\n+        }", "originalCommit": "47cbf78f5cb8139f79724ecb700b730f0f0a46e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc0MjUzMw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r362742533", "bodyText": "Sometimes coroutine or suspend function will not switch the thread, we can skip creating a \"/Kotlin/Coroutine\" span for simplifying tracing.", "author": "devkanro", "createdAt": "2020-01-03T09:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcyMTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAwNTQ5NQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363005495", "bodyText": "Please use core API to do this check. snapshot#isFromCurrent(). Segment id is more accurate to do thread-switch check", "author": "wu-sheng", "createdAt": "2020-01-04T01:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcyMTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAwNTgwNg==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363005806", "bodyText": "Before doing this, you need to do ContextManager#isActive, making sure there is a context activated in the current thread.", "author": "wu-sheng", "createdAt": "2020-01-04T01:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcyMTEzNA=="}], "type": "inlineReview"}, {"oid": "c237385d33d116864fd9770cabc5cd3052e5e778", "url": "https://github.com/apache/skywalking/commit/c237385d33d116864fd9770cabc5cd3052e5e778", "message": "Add licens for plugin def file", "committedDate": "2020-01-03T09:34:40Z", "type": "commit"}, {"oid": "6927733408eae5efc85e13552affa6726b25a658", "url": "https://github.com/apache/skywalking/commit/6927733408eae5efc85e13552affa6726b25a658", "message": "Merge branch 'master' into kt", "committedDate": "2020-01-03T13:58:39Z", "type": "commit"}, {"oid": "2bb159554fe0452d7eee4279bde1946095d14e79", "url": "https://github.com/apache/skywalking/commit/2bb159554fe0452d7eee4279bde1946095d14e79", "message": "Add test case", "committedDate": "2020-01-03T20:51:17Z", "type": "commit"}, {"oid": "55c46557a01abad9f48b724259b91d4d6bb7bfce", "url": "https://github.com/apache/skywalking/commit/55c46557a01abad9f48b724259b91d4d6bb7bfce", "message": "Fix review and update plugin test", "committedDate": "2020-01-04T05:39:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAxODM2Nw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363018367", "bodyText": "missed startScript: ./bin/startup.sh", "author": "kezhenxu94", "createdAt": "2020-01-04T05:59:18Z", "path": "test/plugin/scenarios/kotlin-coroutine-scenario/configuration.yml", "diffHunk": "@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+type: jvm\n+entryService: http://localhost:8080/kotlin-coroutine-scenario/case/h2\n+healthCheck: http://localhost:8080/kotlin-coroutine-scenario/case/healthCheck\n+framework: kt-coroutine\n+runningMode: with_optional\n+withPlugins: apm-kotlin-coroutine-plugin-*.jar", "originalCommit": "55c46557a01abad9f48b724259b91d4d6bb7bfce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d8d467381f1d45f1ba3c3669551d77d35527264", "url": "https://github.com/apache/skywalking/commit/3d8d467381f1d45f1ba3c3669551d77d35527264", "message": "Fix missed configuration 'startScript'", "committedDate": "2020-01-04T06:02:32Z", "type": "commit"}, {"oid": "415436de6069f0b4a04f07a9000057b3793fd037", "url": "https://github.com/apache/skywalking/commit/415436de6069f0b4a04f07a9000057b3793fd037", "message": "Add docs for kotlin coroutine plugin", "committedDate": "2020-01-04T06:04:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAxODg1OA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363018858", "bodyText": "You don't need this plugin, instead, you need this, otherwise the packaged jar is not executable:\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot-version}</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>", "author": "kezhenxu94", "createdAt": "2020-01-04T06:13:37Z", "path": "test/plugin/scenarios/kotlin-coroutine-scenario/pom.xml", "diffHunk": "@@ -0,0 +1,157 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <groupId>org.apache.skywalking.apm.testcase</groupId>\n+    <artifactId>kotlin-coroutine-scenario</artifactId>\n+    <version>1.0.0</version>\n+    <packaging>jar</packaging>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compiler.version>1.8</compiler.version>\n+        <os-maven-plugin.version>1.6.2</os-maven-plugin.version>\n+\n+        <spring-boot-version>2.1.6.RELEASE</spring-boot-version>\n+        <kotlin.version>1.3.61</kotlin.version>\n+        <kotlinx.coroutine.version>1.3.3</kotlinx.coroutine.version>\n+    </properties>\n+\n+    <name>skywalking-kotlin-coroutine-scenario</name>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-dependencies</artifactId>\n+                <version>${spring-boot-version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <artifactId>jul-to-slf4j</artifactId>\n+                    <groupId>org.slf4j</groupId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>1.4.196</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-dbcp</groupId>\n+            <artifactId>commons-dbcp</artifactId>\n+            <version>1.4</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib</artifactId>\n+            <version>${kotlin.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlinx</groupId>\n+            <artifactId>kotlinx-coroutines-core</artifactId>\n+            <version>${kotlinx.coroutine.version}</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <finalName>kotlin-coroutine-scenario</finalName>\n+        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n+        <plugins>\n+            <plugin>\n+                <groupId>kr.motd.maven</groupId>\n+                <artifactId>os-maven-plugin</artifactId>\n+                <version>${os-maven-plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <phase>initialize</phase>\n+                        <goals>\n+                            <goal>detect</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>", "originalCommit": "415436de6069f0b4a04f07a9000057b3793fd037", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAxODg3MQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363018871", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - {kotlin-coroutine: nq 0}\n          \n          \n            \n                - {kotlin-coroutine-scenario: nq 0}", "author": "kezhenxu94", "createdAt": "2020-01-04T06:14:06Z", "path": "test/plugin/scenarios/kotlin-coroutine-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,121 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+registryItems:\n+  applications:\n+    - {kotlin-coroutine: nq 0}", "originalCommit": "415436de6069f0b4a04f07a9000057b3793fd037", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAxODg3NA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363018874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - {kotlin-coroutine: 1}\n          \n          \n            \n                - {kotlin-coroutine-scenario: 1}", "author": "kezhenxu94", "createdAt": "2020-01-04T06:14:16Z", "path": "test/plugin/scenarios/kotlin-coroutine-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,121 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+registryItems:\n+  applications:\n+    - {kotlin-coroutine: nq 0}\n+  instances:\n+    - {kotlin-coroutine: 1}", "originalCommit": "415436de6069f0b4a04f07a9000057b3793fd037", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b318bd747362275ba89adb20eecb6440650217f0", "url": "https://github.com/apache/skywalking/commit/b318bd747362275ba89adb20eecb6440650217f0", "message": "Fix wrong configs", "committedDate": "2020-01-04T06:21:00Z", "type": "commit"}, {"oid": "67560402694fa4877f1b8cc18d1689c30dedc99b", "url": "https://github.com/apache/skywalking/commit/67560402694fa4877f1b8cc18d1689c30dedc99b", "message": "Update expectedData.yaml", "committedDate": "2020-01-04T06:34:07Z", "type": "commit"}, {"oid": "b891f1fa99844f8900b5468e9ea6c2fd2c43a153", "url": "https://github.com/apache/skywalking/commit/b891f1fa99844f8900b5468e9ea6c2fd2c43a153", "message": "Fix typo", "committedDate": "2020-01-04T06:37:08Z", "type": "commit"}, {"oid": "8d0e4efffdee024c939fd6277f22364c8b299323", "url": "https://github.com/apache/skywalking/commit/8d0e4efffdee024c939fd6277f22364c8b299323", "message": "Fix operation names", "committedDate": "2020-01-04T07:28:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDM2OA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363024368", "bodyText": "If you want to provide screenshots, you need to host the images in Apache repo. Should create a folder named 7.0.0/kotlin/coroutine at here https://github.com/apache/skywalking-website/tree/master/docs/.vuepress/public/screenshots", "author": "wu-sheng", "createdAt": "2020-01-04T08:52:04Z", "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Kotlin-Coroutine-plugin.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# Skywalking with Kotlin coroutine\n+This PR provided an auto instrument support plugin for Kotlin coroutine based on context snapshot.\n+\n+## Description\n+We have known there are some limits with skywalking and coroutine, because of the trace context based on `ThreadLocal`.\n+\n+But skywalking provided context snapshot for cross-thread tracing, I create this plugin for resolving context losing in Kotlin coroutine.\n+\n+## Implementation principle\n+As we know, Kotlin coroutine switches the execution thread by `CoroutineDispatcher`.\n+\n+01. Create a snapshot of the current context before dispatch the continuation.\n+02. Then create a coroutine span after thread switched, mark the span continued with the snapshot.\n+03. Every new span which created in the new thread will be a child of this coroutine span. So we can link those span together in a tracing.\n+04. After the original runnable executed, we need to stop the coroutine span for cleaning thread state.\n+\n+## Some screenshots\n+### Run without the plugin\n+We run a Kotlin coroutine based gRPC server without this coroutine plugin.  \n+You can find, the one call (client -> server1 -> server2) has been split two tracing paths.\n+\n+01. Server1 without exit span and server2 tracing path.\n+![Without kotlin plugin1](https://user-images.githubusercontent.com/9367842/71715581-dd18be80-2e4c-11ea-9316-60937ee2c03d.jpg)\n+02. Server2 tracing path.\n+![Without kotlin plugin2](https://user-images.githubusercontent.com/9367842/71715588-e0ac4580-2e4c-11ea-95fd-de9d276caefd.jpg)", "originalCommit": "8d0e4efffdee024c939fd6277f22364c8b299323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjAyMA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363026020", "bodyText": "PR created #76.", "author": "devkanro", "createdAt": "2020-01-04T09:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDM5OA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363024398", "bodyText": "As an optional plugin, this doc should be linked from https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/README.md#optional-plugins", "author": "wu-sheng", "createdAt": "2020-01-04T08:53:02Z", "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Kotlin-Coroutine-plugin.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# Skywalking with Kotlin coroutine", "originalCommit": "8d0e4efffdee024c939fd6277f22364c8b299323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDU5Mw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363024593", "bodyText": "Is only 1.3.0 supported? Or 1.3.x, or 1.0+?\nAccording to the central repo, there are many coroutine releases, https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core. We should set the boundary clear.", "author": "wu-sheng", "createdAt": "2020-01-04T08:58:19Z", "path": "test/plugin/scenarios/kotlin-coroutine-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,16 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+1.3.0", "originalCommit": "8d0e4efffdee024c939fd6277f22364c8b299323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNTMzOA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363025338", "bodyText": "Maybe 1.0+, Should I list all versions in this file?\nLike:\n1.3.3\n1.3.2\n1.3.1\n1.3.0\n# versions\n1.1.0\n1.0.1\n1.0.0\n\nOr just major version\n1.3.0\n1.2.0\n1.1.0\n1.0.0", "author": "devkanro", "createdAt": "2020-01-04T09:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNTUwMw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363025503", "bodyText": "I think at least for the latest of every major release version, such as 1.3.3 for 1.3.x", "author": "wu-sheng", "createdAt": "2020-01-04T09:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjI4NQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363026285", "bodyText": "I am not sure about is lastest Kotlin version compatible with every Kotlin Coroutine version.", "author": "devkanro", "createdAt": "2020-01-04T09:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNzkwNg==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363027906", "bodyText": "Test passed, it seems to look fine", "author": "devkanro", "createdAt": "2020-01-04T10:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDU5Mw=="}], "type": "inlineReview"}, {"oid": "760c4fef751a194f803d9ea4ab7f825127a68bea", "url": "https://github.com/apache/skywalking/commit/760c4fef751a194f803d9ea4ab7f825127a68bea", "message": "Add more kotlin coroutine to test", "committedDate": "2020-01-04T09:49:29Z", "type": "commit"}, {"oid": "c9ad4d825201095da6597c261d2687b9512ff0fe", "url": "https://github.com/apache/skywalking/commit/c9ad4d825201095da6597c261d2687b9512ff0fe", "message": "Update docs", "committedDate": "2020-01-04T09:49:47Z", "type": "commit"}, {"oid": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "url": "https://github.com/apache/skywalking/commit/dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "message": "Update image url", "committedDate": "2020-01-04T09:53:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTQwOQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029409", "bodyText": "You miss this update.", "author": "wu-sheng", "createdAt": "2020-01-04T11:07:09Z", "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -86,6 +86,8 @@\n   * [Spring @Async](https://github.com/spring-projects/spring-framework) 4.x and 5.x\n * Cache\n   * [Ehcache](https://www.ehcache.org/) 2.x\n+* Kotlin\n+  * [Coroutine](https://kotlinlang.org/docs/reference/coroutines-overview.html) 1.3.x (Optional\u00b2)", "originalCommit": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTQxOA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029418", "bodyText": "This plugin, not PR", "author": "wu-sheng", "createdAt": "2020-01-04T11:07:39Z", "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Kotlin-Coroutine-plugin.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# Skywalking with Kotlin coroutine\n+This PR provided an auto instrument support plugin for Kotlin coroutine based on context snapshot.", "originalCommit": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTY2Mw==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029663", "bodyText": "Provided to provides", "author": "wu-sheng", "createdAt": "2020-01-04T11:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTUxNA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029514", "bodyText": "With no -> Without\nBusiness code changed -> changing codes manually.\nTracing path -> spans", "author": "wu-sheng", "createdAt": "2020-01-04T11:10:26Z", "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Kotlin-Coroutine-plugin.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# Skywalking with Kotlin coroutine\n+This PR provided an auto instrument support plugin for Kotlin coroutine based on context snapshot.\n+\n+## Description\n+We have known there are some limits with skywalking and coroutine, because of the trace context based on `ThreadLocal`.\n+\n+But skywalking provided context snapshot for cross-thread tracing, I create this plugin for resolving context losing in Kotlin coroutine.\n+\n+## Implementation principle\n+As we know, Kotlin coroutine switches the execution thread by `CoroutineDispatcher`.\n+\n+01. Create a snapshot of the current context before dispatch the continuation.\n+02. Then create a coroutine span after thread switched, mark the span continued with the snapshot.\n+03. Every new span which created in the new thread will be a child of this coroutine span. So we can link those span together in a tracing.\n+04. After the original runnable executed, we need to stop the coroutine span for cleaning thread state.\n+\n+## Some screenshots\n+### Run without the plugin\n+We run a Kotlin coroutine based gRPC server without this coroutine plugin.  \n+You can find, the one call (client -> server1 -> server2) has been split two tracing paths.\n+\n+01. Server1 without exit span and server2 tracing path.\n+![Without kotlin plugin1](http://skywalking.apache.org/screenshots/7.0.0/kotlin/coroutine/without-coroutine-plugin-server1.jpg)\n+02. Server2 tracing path.\n+![Without kotlin plugin2](http://skywalking.apache.org/screenshots/7.0.0/kotlin/coroutine/without-coroutine-plugin-server2.jpg)\n+\n+### Run with the plugin\n+With no business code changed, just install the plugin. We can find the tracing paths be connected together. We can get all info of one client call.", "originalCommit": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTY1OA==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029658", "bodyText": "We need to add the reason of optional plugin.\nPlugin of Kotlin coroutine provides the tracing across coroutines automatically. As it will add local spans to all across routines scenarios, Please assess the performance impact.", "author": "wu-sheng", "createdAt": "2020-01-04T11:13:59Z", "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -135,6 +135,7 @@ Now, we have the following known optional plugins.\n * [Customize enhance](Customize-enhance-trace.md) Trace methods based on description files, rather than write plugin or change source codes.\n * Plugin of Spring Cloud Gateway 2.1.x in optional plugin folder. Please only active this plugin when you install agent in Spring Gateway. spring-cloud-gateway-2.x-plugin and spring-webflux-5.x-plugin are both required.\n * Plugin of Spring Transaction in optional plugin folder. The reason of being optional plugin is, many local span are generated, which also spend more CPU, memory and network.\n+* [Plugin of Kotlin coroutine](agent-optional-plugins/Kotlin-Coroutine-plugin.md)", "originalCommit": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTczNQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029735", "bodyText": "Description official document should like\nSkyWalking provide tracing context propagation inside thread. In order to support Kotlin Coroutine, we provide this additional plugin.", "author": "wu-sheng", "createdAt": "2020-01-04T11:16:00Z", "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Kotlin-Coroutine-plugin.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# Skywalking with Kotlin coroutine\n+This PR provided an auto instrument support plugin for Kotlin coroutine based on context snapshot.\n+\n+## Description", "originalCommit": "dcbfaf3ac48e46b5000b5287f4fc41e054725e69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTc2MQ==", "url": "https://github.com/apache/skywalking/pull/4165#discussion_r363029761", "bodyText": "Your description is PR context.", "author": "wu-sheng", "createdAt": "2020-01-04T11:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTczNQ=="}], "type": "inlineReview"}, {"oid": "81bd37c974c1193dcac7abbb0184ec413866e329", "url": "https://github.com/apache/skywalking/commit/81bd37c974c1193dcac7abbb0184ec413866e329", "message": "Fix docs", "committedDate": "2020-01-04T12:15:26Z", "type": "commit"}, {"oid": "5abf643f59a93be6d50fa9bbe8095fffe7815927", "url": "https://github.com/apache/skywalking/commit/5abf643f59a93be6d50fa9bbe8095fffe7815927", "message": "Merge branch 'master' into kt", "committedDate": "2020-01-04T12:31:57Z", "type": "commit"}]}