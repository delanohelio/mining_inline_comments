{"pr_number": 5101, "pr_title": "update the live templates", "pr_createdAt": "2020-12-07T00:53:20Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/5101", "timeline": [{"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "url": "https://github.com/flutter/flutter-intellij/commit/7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "message": "update the live templates", "committedDate": "2020-12-07T00:48:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTg5MA==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537535890", "bodyText": "Nit: we don't use travis anymore. We generate the github actions file now.", "author": "stevemessick", "createdAt": "2020-12-07T14:11:20Z", "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -589,21 +591,21 @@ https://plugins.jetbrains.com/plugin/uploadPlugin\n   }\n }\n \n-/// Generate the plugin.xml from the plugin.xml.template file.\n-/// If the --release argument is given, create a git branch and\n-/// commit the new file to it, assuming the release checks pass.\n+/// Generate the plugin.xml from the plugin.xml.template file. If the --release\n+/// argument is given, create a git branch and commit the new file to it,\n+/// assuming the release checks pass.\n ///\n-/// Note: The product-matrix.json file includes a build spec for the\n-/// EAP version at the end. When the EAP version is released that needs\n-/// to be updated.\n+/// Note: The product-matrix.json file includes a build spec for the EAP version\n+/// at the end. When the EAP version is released that needs to be updated.\n class GenerateCommand extends ProductCommand {\n   final BuildCommandRunner runner;\n \n   GenerateCommand(this.runner) : super('generate');\n \n-  String get description =>\n-      'Generate a valid plugin.xml and .travis.yml for the Flutter plugin.\\n'\n-      'The plugin.xml.template and product-matrix.json are used as input.';\n+  String get description => 'Generate plugin.xml, .travis.yml, and '", "originalCommit": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDUxMg==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537630512", "bodyText": "updates", "author": "devoncarew", "createdAt": "2020-12-07T16:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTk2Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537535966", "bodyText": "Maybe add a README explaining double quotes are not allowed and new templates have to be manually added to the xml file?", "author": "stevemessick", "createdAt": "2020-12-07T14:11:27Z", "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');", "originalCommit": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDY0NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537630645", "bodyText": "Good idea - I'll add one.", "author": "devoncarew", "createdAt": "2020-12-07T16:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjA0MA==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537536040", "bodyText": "I don't understand this constraint. It makes it hard to add new live templates. I understand we need to control the size of the pop-up but this means we have to manually add a new one to the xml file.", "author": "stevemessick", "createdAt": "2020-12-07T14:11:34Z", "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';", "originalCommit": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjE3Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537636176", "bodyText": "Yeah, this is only here so that we can provide feedback if an entry isn't found during the copy / in-line stage. We don't have enough info in the txt files to create a full xml entry in the live templates file.\nWhen adding a new template, people will need to create a new entry both in the xml file and create a new txt file. I added that into - how to add a new live template - to the readme.", "author": "devoncarew", "createdAt": "2020-12-07T16:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjEzNg==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537536136", "bodyText": "Nit: \"content\"", "author": "stevemessick", "createdAt": "2020-12-07T14:11:40Z", "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';\n+      }\n+\n+      // Replace the existing content in the xml live template file with the\n+      // contwnt from the template $name.txt file.", "originalCommit": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjQyMg==", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537636422", "bodyText": "done", "author": "devoncarew", "createdAt": "2020-12-07T16:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjEzNg=="}], "type": "inlineReview"}, {"oid": "f0cff4b98272dfb96d9e51bea4beadfa3af47ca2", "url": "https://github.com/flutter/flutter-intellij/commit/f0cff4b98272dfb96d9e51bea4beadfa3af47ca2", "message": "Merge branch 'master' into update_live_templates", "committedDate": "2020-12-07T16:08:10Z", "type": "commit"}, {"oid": "a281ffb364e887b229ee3c704aca1be7de1946d5", "url": "https://github.com/flutter/flutter-intellij/commit/a281ffb364e887b229ee3c704aca1be7de1946d5", "message": "review comments", "committedDate": "2020-12-07T16:19:13Z", "type": "commit"}, {"oid": "e01003277613473c35c43f99e111f6ae540c3de7", "url": "https://github.com/flutter/flutter-intellij/commit/e01003277613473c35c43f99e111f6ae540c3de7", "message": "Merge branch 'master' into update_live_templates", "committedDate": "2020-12-07T16:45:51Z", "type": "commit"}]}