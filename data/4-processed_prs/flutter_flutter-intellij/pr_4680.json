{"pr_number": 4680, "pr_title": "Flutter news", "pr_createdAt": "2020-07-01T21:01:42Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4680", "timeline": [{"oid": "a7894701e1a893dd1bb371a2c58503a973effd76", "url": "https://github.com/flutter/flutter-intellij/commit/a7894701e1a893dd1bb371a2c58503a973effd76", "message": "Android hacks", "committedDate": "2020-07-01T20:28:50Z", "type": "commit"}, {"oid": "8efd52115efffda466af95d015b4508ff64b006c", "url": "https://github.com/flutter/flutter-intellij/commit/8efd52115efffda466af95d015b4508ff64b006c", "message": "Add Flutter News panel for release notes", "committedDate": "2020-07-01T20:28:50Z", "type": "commit"}, {"oid": "5f88f32f085ec8fccc169b42de80ad3c015d8477", "url": "https://github.com/flutter/flutter-intellij/commit/5f88f32f085ec8fccc169b42de80ad3c015d8477", "message": "Clean up for review", "committedDate": "2020-07-01T20:54:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNjI3Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4680#discussion_r448636272", "bodyText": "Is the argument toolWindowManager the same as what's retrieved here?", "author": "helin24", "createdAt": "2020-07-01T21:54:17Z", "path": "src/io/flutter/actions/OpenFlutterNewsSidePanelAction.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.actions;\n+\n+import com.android.tools.idea.assistant.AssistantBundleCreator;\n+import com.android.tools.idea.assistant.OpenAssistSidePanelAction;\n+import com.intellij.ide.actions.WhatsNewAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.actionSystem.Presentation;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.project.ProjectManagerListener;\n+import com.intellij.openapi.wm.ToolWindow;\n+import com.intellij.openapi.wm.ToolWindowManager;\n+import com.intellij.openapi.wm.ex.ToolWindowManagerListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.assistant.whatsnew.FlutterNewsBundleCreator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.jetbrains.annotations.NotNull;\n+\n+// Adapted from com.android.tools.idea.whatsnew.assistant.WhatsNewSidePanelAction.\n+public class OpenFlutterNewsSidePanelAction extends OpenAssistSidePanelAction {\n+  @NotNull\n+  private static final WhatsNewAction action = new WhatsNewAction();\n+  @NotNull\n+  private static final Set<Project> openProjectTools = new HashSet<>();\n+\n+  @NotNull\n+  private final Map<Project, FlutterNewsToolWindowListener> myProjectToListenerMap;\n+\n+  public OpenFlutterNewsSidePanelAction() {\n+    myProjectToListenerMap = new HashMap<>();\n+  }\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    // Project being null can happen when Studio first starts and doesn't have window focus\n+    Presentation presentation = e.getPresentation();\n+    if (e.getProject() == null) {\n+      presentation.setEnabled(false);\n+    }\n+    else if (!presentation.isEnabled()) {\n+      presentation.setEnabled(true);\n+    }\n+\n+    action.update(e);\n+    presentation.setText(\"What's New in Flutter\");\n+    presentation.setDescription(\"See the recent updates to Flutter and the plugin.\");\n+  }\n+\n+  @Override\n+  public void actionPerformed(@NotNull AnActionEvent event) {\n+    openWhatsNewSidePanel(Objects.requireNonNull(event.getProject()), false);\n+  }\n+\n+  public void openWhatsNewSidePanel(@NotNull Project project, boolean isAutoOpened) {\n+    FlutterNewsBundleCreator bundleCreator = AssistantBundleCreator.EP_NAME.findExtension(FlutterNewsBundleCreator.class);\n+    if (bundleCreator == null) {\n+      return;\n+    }\n+\n+    FlutterNewsToolWindowListener.fireOpenEvent(project, isAutoOpened);\n+    openWindow(FlutterNewsBundleCreator.BUNDLE_ID, project);\n+\n+    // Only register a new listener if there isn't already one, to avoid multiple OPEN/CLOSE events\n+    myProjectToListenerMap.computeIfAbsent(project, this::newFlutterNewsToolWindowListener);\n+  }\n+\n+  @NotNull\n+  private OpenFlutterNewsSidePanelAction.FlutterNewsToolWindowListener newFlutterNewsToolWindowListener(@NotNull Project project) {\n+    FlutterNewsToolWindowListener listener = new FlutterNewsToolWindowListener(project, myProjectToListenerMap);\n+    project.getMessageBus().connect(project).subscribe(ToolWindowManagerListener.TOPIC, listener);\n+    return listener;\n+  }\n+\n+  static class FlutterNewsToolWindowListener implements ToolWindowManagerListener {\n+    @NotNull private final Project myProject;\n+    @NotNull Map<Project, FlutterNewsToolWindowListener> myProjectToListenerMap;\n+    private boolean isOpen;\n+\n+    private FlutterNewsToolWindowListener(@NotNull Project project,\n+                                          @NotNull Map<Project, FlutterNewsToolWindowListener> projectToListenerMap) {\n+      myProject = project;\n+      myProjectToListenerMap = projectToListenerMap;\n+      isOpen = true; // Start off as opened so we don't fire an extra opened event\n+\n+      // Need an additional listener for project close, because the below invokeLater isn't fired in time before closing\n+      project.getMessageBus().connect(project).subscribe(ProjectManager.TOPIC, new ProjectManagerListener() {\n+        @Override\n+        public void projectClosed(@NotNull Project project) {\n+          if (!project.equals(myProject)) {\n+            return;\n+          }\n+          if (isOpen) {\n+            fireClosedEvent(myProject);\n+            isOpen = false;\n+          }\n+          myProjectToListenerMap.remove(project);\n+        }\n+      });\n+    }\n+\n+    @Override\n+    public void toolWindowRegistered(@NotNull String id) {\n+    }\n+\n+    @Override\n+    public void toolWindowUnregistered(@NotNull String id, @NotNull ToolWindow toolWindow) {\n+      if (id.equals(OpenAssistSidePanelAction.TOOL_WINDOW_TITLE)) {\n+        myProjectToListenerMap.remove(myProject);\n+      }\n+    }\n+\n+    /**\n+     * Fire metrics and update the actual state after a state change is received.\n+     * The logic is wrapped in invokeLater because dragging and dropping the StripeButton temporarily\n+     * hides and then shows the window. Otherwise, the handler would think the window was closed,\n+     * even though it was only dragged.\n+     */\n+    @Override\n+    public void stateChanged(@NotNull ToolWindowManager toolWindowManager) {\n+      ApplicationManager.getApplication().invokeLater(() -> {\n+        if (myProject.isDisposed()) {\n+          myProjectToListenerMap.remove(myProject);\n+          return;\n+        }\n+\n+        ToolWindow window = ToolWindowManager.getInstance(myProject).getToolWindow(OpenAssistSidePanelAction.TOOL_WINDOW_TITLE);", "originalCommit": "5f88f32f085ec8fccc169b42de80ad3c015d8477", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NjI1Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4680#discussion_r448646252", "bodyText": "Not necessarily. The tool window manager is project-specific. This could have been triggered by a different project. It might make sense to check that it is same and do nothing if not.", "author": "stevemessick", "createdAt": "2020-07-01T22:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNjI3Mg=="}], "type": "inlineReview"}, {"oid": "4a37b779f20282529dd5623f6df296a4f6693dcd", "url": "https://github.com/flutter/flutter-intellij/commit/4a37b779f20282529dd5623f6df296a4f6693dcd", "message": "Move to flutter-studio", "committedDate": "2020-07-06T21:06:26Z", "type": "commit"}]}