{"pr_number": 4454, "pr_title": "Update the build for AS canary 4.1", "pr_createdAt": "2020-04-01T23:06:58Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4454", "timeline": [{"oid": "8c542b095620c8a9bf286dce8955a90d9689d6e5", "url": "https://github.com/flutter/flutter-intellij/commit/8c542b095620c8a9bf286dce8955a90d9689d6e5", "message": "Update build for AS 4.1 canary 4", "committedDate": "2020-04-01T22:28:44Z", "type": "commit"}, {"oid": "d94eb5fa2f0085580591da4b194fc0f9a45cded0", "url": "https://github.com/flutter/flutter-intellij/commit/d94eb5fa2f0085580591da4b194fc0f9a45cded0", "message": "add stub file", "committedDate": "2020-04-01T22:56:10Z", "type": "commit"}, {"oid": "0d273367b649ee0985e6b6ccd2cc6ddef142d1c6", "url": "https://github.com/flutter/flutter-intellij/commit/0d273367b649ee0985e6b6ccd2cc6ddef142d1c6", "message": "cleanup", "committedDate": "2020-04-01T23:03:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1OTM4OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4454#discussion_r402359389", "bodyText": "These first three items (and the new supported platforms) would be good fodder for the blog.", "author": "devoncarew", "createdAt": "2020-04-02T14:31:24Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,18 @@\n+# 45.0\n+- Add support for 'flutter pub outdated' (#4444)\n+- Improve how we calculate when to summarize flutter errors (#4447)\n+- Fix an issue with discovering hyperlinks in test consoles (#4443)", "originalCommit": "0d273367b649ee0985e6b6ccd2cc6ddef142d1c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MDU3NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4454#discussion_r402360575", "bodyText": "We may have issues w/ local development, for people developing against something like IntelliJ CE?", "author": "devoncarew", "createdAt": "2020-04-02T14:32:54Z", "path": "src/io/flutter/utils/AndroidLocationProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.utils;\n+\n+import com.android.tools.idea.gradle.dsl.model.BuildModelContext;", "originalCommit": "0d273367b649ee0985e6b6ccd2cc6ddef142d1c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTg4Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4454#discussion_r402391882", "bodyText": "Yes, Until we have time to devise a proper solution people can replace AndroidLocationProvider with its stub file content.", "author": "stevemessick", "createdAt": "2020-04-02T15:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MDU3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY0OA==", "url": "https://github.com/flutter/flutter-intellij/pull/4454#discussion_r402361648", "bodyText": "Do we want this restore code to happen on an exception, or in a finally?", "author": "devoncarew", "createdAt": "2020-04-02T14:34:15Z", "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -638,121 +638,161 @@ class BuildCommand extends ProductCommand {\n       var processedFile, source;\n \n       // TODO: Remove this when we no longer support the corresponding version.\n-\n-      if (spec.version.startsWith('3.5') || spec.version.startsWith('3.6')) {\n-        processedFile = File(\n-            'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        if (spec.version.startsWith('3.5')) {\n+      try {\n+        if (spec.version.startsWith('3.5') || spec.version.startsWith('3.6')) {\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          if (spec.version.startsWith('3.5')) {\n+            source = source.replaceAll(\n+              'androidProject.init(null);',\n+              'androidProject.init();',\n+            );\n+          }\n+          if (spec.version.startsWith('3.5')) {\n+            // This version does not define the init() method, so remove it.\n+            var last = 'static final String TEMPLATE_PROJECT_NAME = ';\n+            var end = source.indexOf(last);\n+            // Change the initializer to use null, equivalent to original code.\n+            source = '${source.substring(0, end + last.length)}null;\\n}}';\n+          }\n           source = source.replaceAll(\n-            'androidProject.init(null);',\n-            'androidProject.init();',\n+            'super(filePath',\n+            'super(filePath.toString()',\n           );\n+          if (spec.version.startsWith('3.6')) {\n+            // Starting with 3.6 we need to call a simplified init().\n+            // This is where the $PROJECT_FILE$ macro is defined, #registerComponents.\n+            source = source.replaceAll(\n+              'getStateStore().setPath(path',\n+              'getStateStore().setPath(path.toString()',\n+            );\n+          }\n+          processedFile.writeAsStringSync(source);\n         }\n+\n         if (spec.version.startsWith('3.5')) {\n-          // This version does not define the init() method, so remove it.\n-          var last = 'static final String TEMPLATE_PROJECT_NAME = ';\n-          var end = source.indexOf(last);\n-          // Change the initializer to use null, equivalent to original code.\n-          source = '${source.substring(0, end + last.length)}null;\\n}}';\n-        }\n-        source = source.replaceAll(\n-          'super(filePath',\n-          'super(filePath.toString()',\n-        );\n-        if (spec.version.startsWith('3.6')) {\n-          // Starting with 3.6 we need to call a simplified init().\n-          // This is where the $PROJECT_FILE$ macro is defined, #registerComponents.\n+          processedFile =\n+              File('flutter-studio/src/io/flutter/utils/AddToAppUtils.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n           source = source.replaceAll(\n-            'getStateStore().setPath(path',\n-            'getStateStore().setPath(path.toString()',\n+            'connection.subscribe(DebuggerManagerListener.TOPIC, makeAddToAppAttachListener(project));',\n+            '',\n           );\n+          processedFile.writeAsStringSync(source);\n         }\n-        processedFile.writeAsStringSync(source);\n-      }\n \n-      if (spec.version.startsWith('3.5')) {\n-        processedFile =\n-            File('flutter-studio/src/io/flutter/utils/AddToAppUtils.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        source = source.replaceAll(\n-          'connection.subscribe(DebuggerManagerListener.TOPIC, makeAddToAppAttachListener(project));',\n-          '',\n-        );\n-        processedFile.writeAsStringSync(source);\n-      }\n+        if (!spec.version.startsWith('4.')) {\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          source = source.replaceAll(\n+            'import com.android.tools.idea.projectsystem.SourceProvidersFactory;',\n+            '',\n+          );\n+          source = source.replaceAll(' SourceProvidersFactory ', ' Object ');\n+          source = source.replaceAll(\n+            'gradleProjectSystem.getSourceProvidersFactory()',\n+            'new Object()',\n+          );\n+          source = source.replaceAll(\n+            'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+            'Collections.emptyList()',\n+          );\n+          if (spec.version.startsWith('3.5') ||\n+              spec.version.startsWith('3.6')) {\n+            source = source.replaceAll(\n+              'gradleProjectSystem.getSubmodules()',\n+              'new java.util.ArrayList()',\n+            );\n+          }\n+          processedFile.writeAsStringSync(source);\n \n-      if (!spec.version.startsWith('4.')) {\n-        processedFile = File(\n-            'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        source = source.replaceAll(\n-          'import com.android.tools.idea.projectsystem.SourceProvidersFactory;',\n-          '',\n-        );\n-        source = source.replaceAll(' SourceProvidersFactory ', ' Object ');\n-        source = source.replaceAll(\n-          'gradleProjectSystem.getSourceProvidersFactory()',\n-          'new Object()',\n-        );\n-        source = source.replaceAll(\n-          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n-          'Collections.emptyList()',\n-        );\n-        if (spec.version.startsWith('3.5') || spec.version.startsWith('3.6')) {\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n           source = source.replaceAll(\n-            'gradleProjectSystem.getSubmodules()',\n-            'new java.util.ArrayList()',\n+            'import com.android.tools.idea.npw.model.ProjectSyncInvoker',\n+            'import com.android.tools.idea.npw.model.NewModuleModel',\n           );\n+          source = source.replaceAll(\n+            'createStep(@NotNull Project model, @NotNull ProjectSyncInvoker invoker, String parent)',\n+            'createStep(@NotNull NewModuleModel model)',\n+          );\n+          source = source.replaceAll(\n+            'FlutterProjectModel model(@NotNull Project project,',\n+            'FlutterProjectModel model(@NotNull NewModuleModel project,',\n+          );\n+          source = source.replaceAll(\n+            'mySharedModel.getValue().project().setValue(project);',\n+            'mySharedModel.getValue().project().setValue(project.getProject().getValue());',\n+          );\n+          processedFile.writeAsStringSync(source);\n+        } else if (spec.version.startsWith('4.0')) {\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          source = source.replaceAll(\n+            'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+            'Collections.emptyList()',\n+          );\n+          processedFile.writeAsStringSync(source);\n+\n         }\n-        processedFile.writeAsStringSync(source);\n-\n-        processedFile = File(\n-            'flutter-studio/src/io/flutter/project/FlutterProjectCreator.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        source = source.replaceAll(\n-          'Paths.get(baseDir.getPath())',\n-          'baseDir.getPath()',\n-        );\n-        processedFile.writeAsStringSync(source);\n-\n-        processedFile = File(\n-            'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        source = source.replaceAll(\n-          'import com.android.tools.idea.npw.model.ProjectSyncInvoker',\n-          'import com.android.tools.idea.npw.model.NewModuleModel',\n-        );\n-        source = source.replaceAll(\n-          'createStep(@NotNull Project model, @NotNull ProjectSyncInvoker invoker, String parent)',\n-          'createStep(@NotNull NewModuleModel model)',\n-        );\n-        source = source.replaceAll(\n-          'FlutterProjectModel model(@NotNull Project project,',\n-          'FlutterProjectModel model(@NotNull NewModuleModel project,',\n-        );\n-        source = source.replaceAll(\n-          'mySharedModel.getValue().project().setValue(project);',\n-          'mySharedModel.getValue().project().setValue(project.getProject().getValue());',\n-        );\n-        processedFile.writeAsStringSync(source);\n+        if (!spec.version.startsWith('4.1')) {\n \n-      } else if (spec.version.startsWith('4.0')) {\n+          processedFile = File(\n+              'src/io/flutter/utils/AndroidUtils.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          source = source.replaceAll(\n+            'import com.android.tools.idea.gradle.dsl.model.BuildModelContext;',\n+            'import com.android.tools.idea.gradle.dsl.parser.BuildModelContext;',\n+          );\n+          processedFile.writeAsStringSync(source);\n \n-        processedFile = File(\n-            'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n-        source = processedFile.readAsStringSync();\n-        files[processedFile] = source;\n-        source = source.replaceAll(\n-          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n-          'Collections.emptyList()',\n-        );\n-        processedFile.writeAsStringSync(source);\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/actions/FlutterShowStructureSettingsAction.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          source = source.replaceAll(\n+            'import com.android.tools.idea.gradle.structure.actions.AndroidShowStructureSettingsAction;',\n+            'import com.android.tools.idea.gradle.actions.AndroidShowStructureSettingsAction;',\n+          );\n+          processedFile.writeAsStringSync(source);\n+\n+          processedFile = File(\n+              'flutter-studio/src/io/flutter/actions/OpenAndroidModule.java');\n+          source = processedFile.readAsStringSync();\n+          files[processedFile] = source;\n+          source = source.replaceAll(\n+            'findGradleTarget', // 3 matches\n+            'findImportTarget',\n+          );\n+          processedFile.writeAsStringSync(source);\n+        }\n+      } catch (ex) {\n+        // Restore sources.", "originalCommit": "0d273367b649ee0985e6b6ccd2cc6ddef142d1c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTgzNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4454#discussion_r402391836", "bodyText": "It happens in a finally after the compiler is finished.", "author": "stevemessick", "createdAt": "2020-04-02T15:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY0OA=="}], "type": "inlineReview"}, {"oid": "8683fadd66ba1829d638b01f9eb99432b1eb2073", "url": "https://github.com/flutter/flutter-intellij/commit/8683fadd66ba1829d638b01f9eb99432b1eb2073", "message": "Update test driver to 2019.3", "committedDate": "2020-04-02T19:41:18Z", "type": "commit"}, {"oid": "f948bdbe72cb5ee5639238779acfc9f7ffce20d1", "url": "https://github.com/flutter/flutter-intellij/commit/f948bdbe72cb5ee5639238779acfc9f7ffce20d1", "message": "update version range", "committedDate": "2020-04-02T20:03:28Z", "type": "commit"}]}