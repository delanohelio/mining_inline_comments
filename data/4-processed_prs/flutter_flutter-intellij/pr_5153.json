{"pr_number": 5153, "pr_title": "Track time lapsed to start analysis server and finish indexing", "pr_createdAt": "2020-12-28T18:50:27Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/5153", "timeline": [{"oid": "6de66dc20d559b9f0f25f57df5c5befcd30a119e", "url": "https://github.com/flutter/flutter-intellij/commit/6de66dc20d559b9f0f25f57df5c5befcd30a119e", "message": "Add time tracking service", "committedDate": "2020-12-23T19:56:49Z", "type": "commit"}, {"oid": "5a2f8577e2c87e694eceea34ae6448b8fb7721cb", "url": "https://github.com/flutter/flutter-intellij/commit/5a2f8577e2c87e694eceea34ae6448b8fb7721cb", "message": "Report computed errors time to analytics", "committedDate": "2020-12-23T19:56:49Z", "type": "commit"}, {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "url": "https://github.com/flutter/flutter-intellij/commit/e326aa4d6b56d893cb09e9efb238d65316133d9f", "message": "Report index finishing time", "committedDate": "2020-12-28T18:39:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTE1Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455157", "bodyText": "We usually great a getService method on classes instead that passes in a Project instance. That is a bit cleaner than calling getService on the project itself.", "author": "jacob314", "createdAt": "2020-12-28T19:04:39Z", "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -40,12 +42,15 @@\n public class ProjectOpenActivity implements StartupActivity, DumbAware {\n   public static final ProjectType FLUTTER_PROJECT_TYPE = new ProjectType(\"io.flutter\");\n   private static final Logger LOG = Logger.getInstance(ProjectOpenActivity.class);\n+  private boolean indexingFinished = false;\n \n   public ProjectOpenActivity() {\n   }\n \n   @Override\n   public void runActivity(@NotNull Project project) {\n+    project.getService(TimeTracker.class).setProjectOpenTime();", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTYxNA==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455614", "bodyText": "Is this method ever actually called with (indexingFinished == true)?\nIf you are trying to catch an internal logic error, change this to\nassert(!indexingFinished) to clarify the intent.", "author": "jacob314", "createdAt": "2020-12-28T19:06:24Z", "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -71,6 +76,21 @@ public void runActivity(@NotNull Project project) {\n     // TODO(messick) Re-enable this after dropping support for 2020.2.\n     //excludeAndroidFrameworkDetector(project);\n \n+    // Report time when indexing finishes.\n+    DumbService.getInstance(project).runWhenSmart(() -> {\n+      if (!indexingFinished) {", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NTY5Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549475692", "bodyText": "Oh right. I don't need this, was thinking this might run multiple times but that's not the case.", "author": "helin24", "createdAt": "2020-12-28T20:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTg2NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455865", "bodyText": "make this like the other services in the project that have a getInstance method that takes a project.", "author": "jacob314", "createdAt": "2020-12-28T19:07:18Z", "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjIwOA==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456208", "bodyText": "nit: avoid starting methods that aren't setters with the word set. Maybe call this: onProjectOpen()", "author": "jacob314", "createdAt": "2020-12-28T19:08:32Z", "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {\n+    this.project = project;\n+  }\n+\n+  public void setProjectOpenTime() {", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjQxOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456419", "bodyText": "Avoid methods that return boxed numbers. Add an assert that projectOpenTime != null and return a long.\nPerhaps return 0 if the project hasn't been opened.", "author": "jacob314", "createdAt": "2020-12-28T19:09:19Z", "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {\n+    this.project = project;\n+  }\n+\n+  public void setProjectOpenTime() {\n+    this.projectOpenTime = System.currentTimeMillis();\n+  }\n+\n+  public Long millisSinceProjectOpen() {", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjU2Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456566", "bodyText": "add a separate isProjectOpen instead of using a null Long to indicate unopened.", "author": "jacob314", "createdAt": "2020-12-28T19:09:51Z", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -77,7 +81,25 @@ public void serverConnected(String s) {\n           sendSubscriptions();\n         }\n       }\n+\n+      @Override\n+      public void computedErrors(String file, List<AnalysisError> errors) {\n+        if (!hasComputedErrors) {\n+          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1Njc0Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456747", "bodyText": "if you have to convert the long to an int, return it as an int instead.", "author": "jacob314", "createdAt": "2020-12-28T19:10:40Z", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -77,7 +81,25 @@ public void serverConnected(String s) {\n           sendSubscriptions();\n         }\n       }\n+\n+      @Override\n+      public void computedErrors(String file, List<AnalysisError> errors) {\n+        if (!hasComputedErrors) {\n+          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();\n+          if (millisSinceProjectOpen != null) {\n+            FlutterInitializer.getAnalytics().sendEventMetric(\n+              \"startup\",\n+              \"analysisComputedErrors\",\n+              millisSinceProjectOpen.intValue()", "originalCommit": "e326aa4d6b56d893cb09e9efb238d65316133d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9a1bccc9dc6a9c714e303a16494d1cd8208628a", "url": "https://github.com/flutter/flutter-intellij/commit/d9a1bccc9dc6a9c714e303a16494d1cd8208628a", "message": "Return int and clean up", "committedDate": "2020-12-28T20:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NjI3Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549476276", "bodyText": "use TimeTracker.getInstance here as well.", "author": "jacob314", "createdAt": "2020-12-28T20:23:38Z", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -84,22 +84,18 @@ public void serverConnected(String s) {\n \n       @Override\n       public void computedErrors(String file, List<AnalysisError> errors) {\n-        if (!hasComputedErrors) {\n-          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();\n-          if (millisSinceProjectOpen != null) {\n-            FlutterInitializer.getAnalytics().sendEventMetric(\n-              \"startup\",\n-              \"analysisComputedErrors\",\n-              millisSinceProjectOpen.intValue()\n-            );\n-          }\n+        if (!hasComputedErrors && project.isOpen()) {\n+          FlutterInitializer.getAnalytics().sendEventMetric(\n+            \"startup\",\n+            \"analysisComputedErrors\",\n+            project.getService(TimeTracker.class).millisSinceProjectOpen()", "originalCommit": "d9a1bccc9dc6a9c714e303a16494d1cd8208628a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "395fd30b51f450ad41a8dde8b15f7c3d208b2033", "url": "https://github.com/flutter/flutter-intellij/commit/395fd30b51f450ad41a8dde8b15f7c3d208b2033", "message": "Use getInstance for time tracker", "committedDate": "2020-12-28T21:14:18Z", "type": "commit"}]}