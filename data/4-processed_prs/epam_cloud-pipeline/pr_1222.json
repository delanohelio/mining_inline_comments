{"pr_number": 1222, "pr_title": "Issue #1038: \"Serverless\" Cloud Pipeline API - fixes", "pr_createdAt": "2020-07-16T12:19:27Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1222", "timeline": [{"oid": "4fd656a5429988a80e7dbe573182ae2b853f719f", "url": "https://github.com/epam/cloud-pipeline/commit/4fd656a5429988a80e7dbe573182ae2b853f719f", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - fix for stop after", "committedDate": "2020-07-15T13:36:51Z", "type": "commit"}, {"oid": "f4a8d99432861b9777995cddbf62c0cc46d37f4d", "url": "https://github.com/epam/cloud-pipeline/commit/f4a8d99432861b9777995cddbf62c0cc46d37f4d", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - transactions fix", "committedDate": "2020-07-16T09:11:45Z", "type": "commit"}, {"oid": "04f838acd9566114b1e2d20c3439cfd4ebe9d831", "url": "https://github.com/epam/cloud-pipeline/commit/04f838acd9566114b1e2d20c3439cfd4ebe9d831", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - token added to cookie", "committedDate": "2020-07-16T11:23:33Z", "type": "commit"}, {"oid": "0d452a7d4c9b12423df45b131816e290631ce4ab", "url": "https://github.com/epam/cloud-pipeline/commit/0d452a7d4c9b12423df45b131816e290631ce4ab", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - refactor for serverless run", "committedDate": "2020-07-16T12:19:04Z", "type": "commit"}, {"oid": "ba0cafd86038eac71f5ea92c6d6fdafb2499ccc6", "url": "https://github.com/epam/cloud-pipeline/commit/ba0cafd86038eac71f5ea92c6d6fdafb2499ccc6", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - checkstyle fix", "committedDate": "2020-07-16T12:25:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NDkxMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457564911", "bodyText": "I'd suggest to move this method to StopServerlessRunDao class", "author": "mzueva", "createdAt": "2020-07-20T17:11:17Z", "path": "api/src/main/java/com/epam/pipeline/dao/pipeline/PipelineRunDao.java", "diffHunk": "@@ -449,11 +450,9 @@ public void deleteRunSidsByPipelineId(final Long pipelineId) {\n                 .findFirst();\n     }\n \n-    public List<PipelineRun> loadServerlessRunsToStop(final LocalDateTime maxLastUpdate) {\n-        final MapSqlParameterSource params = new MapSqlParameterSource();\n-        params.addValue(\"MAX_LAST_UPDATE\", maxLastUpdate);\n+    public List<StopServerlessRun> loadServerlessRunsToStop() {\n         return ListUtils.emptyIfNull(getNamedParameterJdbcTemplate()", "originalCommit": "ba0cafd86038eac71f5ea92c6d6fdafb2499ccc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4MDY1NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457980655", "bodyText": "Thanks, done", "author": "ekazachkova", "createdAt": "2020-07-21T09:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTU5Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457565597", "bodyText": "For most classes we keep Mandatory propagation at DAO level, why do we need Required in this case?", "author": "mzueva", "createdAt": "2020-07-20T17:12:26Z", "path": "api/src/main/java/com/epam/pipeline/dao/pipeline/StopServerlessRunDao.java", "diffHunk": "@@ -38,21 +39,22 @@\n     private String updateServerlessRunQuery;\n     private String loadAllServerlessRunsQuery;\n     private String deleteByRunIdServerlessRunQuery;\n+    private String loadServerlessunByRunIdQuery;\n \n     @Transactional(propagation = Propagation.MANDATORY)\n     public Long createServerlessRunId() {\n         return daoHelper.createId(serverlessRunSequenceQuery);\n     }\n \n-    @Transactional(propagation = Propagation.MANDATORY)\n+    @Transactional(propagation = Propagation.REQUIRED)\n     public void createServerlessRun(final StopServerlessRun run) {\n         final Long id = createServerlessRunId();\n         run.setId(id);\n         getNamedParameterJdbcTemplate().update(saveServerlessRunQuery,\n                 StopServerlessRunParameters.getParameters(run));\n     }\n \n-    @Transactional(propagation = Propagation.MANDATORY)\n+    @Transactional(propagation = Propagation.REQUIRED)", "originalCommit": "ba0cafd86038eac71f5ea92c6d6fdafb2499ccc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4MjU2OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457982568", "bodyText": "We need Required here due to this method called from non-transaction context.\nI added a new class StopServerlessRunManager to manage transactions.", "author": "ekazachkova", "createdAt": "2020-07-21T10:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzg3NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457567875", "bodyText": "We also need to handle situation when LAUNCH_SERVERLESS_STOP_TIMEOUT is null - consider run non-expired in this case", "author": "mzueva", "createdAt": "2020-07-20T17:16:33Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ResourceMonitoringManager.java", "diffHunk": "@@ -408,11 +409,21 @@ private void setInstanceTypeMap(final Map<String, InstanceType> instanceTypeMap)\n         }\n \n         private void processServerlessRuns() {\n-            final Integer timeout = preferenceManager.getPreference(SystemPreferences.LAUNCH_SERVERLESS_STOP_TIMEOUT);\n-            final LocalDateTime maxLastUpdate = LocalDateTime.now().minusMinutes(timeout);\n-            final List<PipelineRun> runs = ListUtils.emptyIfNull(\n-                    pipelineRunManager.loadExpiredServerlessRuns(maxLastUpdate));\n-            runs.forEach(run -> pipelineRunManager.stopServerlessRun(run.getId()));\n+            final List<StopServerlessRun> activeServerlessRuns = ListUtils.emptyIfNull(\n+                    pipelineRunManager.loadActiveServerlessRuns());\n+            activeServerlessRuns.stream()\n+                    .filter(this::serverlessRunIsExpired)\n+                    .forEach(run -> pipelineRunManager.stopServerlessRun(run.getId()));\n+        }\n+\n+        private boolean serverlessRunIsExpired(final StopServerlessRun run) {\n+            return run.getLastUpdate().isBefore(LocalDateTime.now().minusMinutes(getTimeoutMinutes(run)));\n+        }\n+\n+        private Long getTimeoutMinutes(final StopServerlessRun run) {\n+            return Objects.nonNull(run.getStopAfter())\n+                    ? run.getStopAfter()\n+                    : preferenceManager.getPreference(SystemPreferences.LAUNCH_SERVERLESS_STOP_TIMEOUT).longValue();", "originalCommit": "ba0cafd86038eac71f5ea92c6d6fdafb2499ccc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4MjY5OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1222#discussion_r457982699", "bodyText": "Thanks, done", "author": "ekazachkova", "createdAt": "2020-07-21T10:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzg3NQ=="}], "type": "inlineReview"}, {"oid": "a0420a804eb023407e2079af5ff125f937db16b1", "url": "https://github.com/epam/cloud-pipeline/commit/a0420a804eb023407e2079af5ff125f937db16b1", "message": "Issue #1038: \"Serverless\" Cloud Pipeline API - refactoring", "committedDate": "2020-07-21T09:54:15Z", "type": "commit"}]}