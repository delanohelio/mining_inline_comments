{"pr_number": 1481, "pr_title": "Issue #1404: implemented tests for ClusterApiService", "pr_createdAt": "2020-10-08T14:12:38Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1481", "timeline": [{"oid": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "url": "https://github.com/epam/cloud-pipeline/commit/44f1669d54f99fd04970a8be0eabc30b328cabe1", "message": "Issue #1404: implemented tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-12T02:02:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NzEwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657109", "bodyText": "Could you please add access modifier?", "author": "ekazachkova", "createdAt": "2020-10-14T13:01:19Z", "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -144,6 +146,12 @@\n     @MockBean\n     protected CloudRegionManager mockCloudRegionManager;\n \n+    @MockBean\n+    protected NodeDiskManager mockNodeDiskManager;\n+\n+    @MockBean\n+    UsageMonitoringManager mockUsageMonitoringManager;", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NzUyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657528", "bodyText": "Cleanup please", "author": "ekazachkova", "createdAt": "2020-10-14T13:01:54Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -322,9 +438,9 @@ protected DataStorageManager mockDataStorageManager() {\n     }\n \n     @Bean\n-    protected FolderCrudManager mockCrudManager() {\n+    protected FolderCrudManager mockFolderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n-    }\n+    } /////", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1Nzg0Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657846", "bodyText": "Why we need such import?", "author": "ekazachkova", "createdAt": "2020-10-14T13:02:20Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +41,11 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NDQ2MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504664461", "bodyText": "Why we need UserManager real bean?", "author": "ekazachkova", "createdAt": "2020-10-14T13:11:42Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +41,11 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n+        \"com.epam.pipeline.security.run\",\n+        \"com.epam.pipeline.manager.security\",\n+        \"com.epam.pipeline.manager.user\"})", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODA0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504668047", "bodyText": "Let's remove empty lines between fields.", "author": "ekazachkova", "createdAt": "2020-10-14T13:16:41Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NDA0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504684042", "bodyText": "Also, cold you please place fields autowired fields declaration?", "author": "ekazachkova", "createdAt": "2020-10-14T13:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2OTU4OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504669588", "bodyText": "Let's create a new build method in creators package. This  method may accept id, name, owner arguments.", "author": "ekazachkova", "createdAt": "2020-10-14T13:18:57Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTIxOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504675219", "bodyText": "Let's not confuse packages: PipelineRun is not in cluster package. We need to create a new package/class for PipelineRun object creating methods.", "author": "ekazachkova", "createdAt": "2020-10-14T13:26:37Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -86,4 +99,20 @@ public static AllowedInstanceAndPriceTypes getDefaultAllowedInstanceAndPriceType\n     public static NodeDisk getDefaultNodeDisk() {\n         return new NodeDisk(ID, TEST_STRING, LDT);\n     }\n+\n+    public static PipelineRun getPipelineRun() {", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTc3Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504675776", "bodyText": "The same for creators below", "author": "ekazachkova", "createdAt": "2020-10-14T13:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3Njg4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504676882", "bodyText": "Let's  inline test class field initiliazations and get rid of setUp method.", "author": "ekazachkova", "createdAt": "2020-10-14T13:28:58Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NzA3Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504677073", "bodyText": "Do not forget final please", "author": "ekazachkova", "createdAt": "2020-10-14T13:29:16Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n+\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(OWNER_USER);\n+        nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n+\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n+\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3ODY5Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504678693", "bodyText": "Could we use contains method here?", "author": "ekazachkova", "createdAt": "2020-10-14T13:31:27Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n+\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(OWNER_USER);\n+        nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n+\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n+\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1);", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3OTMwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504679302", "bodyText": "Looks like this field was not initialized", "author": "ekazachkova", "createdAt": "2020-10-14T13:32:15Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NzEzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506247134", "bodyText": "Could you please add final to fields here and in other places?", "author": "ekazachkova", "createdAt": "2020-10-16T10:01:18Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -51,6 +53,24 @@ public static NodeInstance getDefaultNodeInstance() {\n         return new NodeInstance();\n     }\n \n+    public static NodeInstance getNodeInstanceWithPermission() {\n+        NodeInstance nodeInstance = new NodeInstance();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTkyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506261927", "bodyText": "The private methods shell be after all public methods", "author": "ekazachkova", "createdAt": "2020-10-16T10:20:35Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NDU0NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506274545", "bodyText": "Could we use here\nassertThat(resultStatsList).hasSize(1).contains(monitoringStats);\n\nAnd in other such places too.", "author": "ekazachkova", "createdAt": "2020-10-16T10:34:48Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NTY5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506285696", "bodyText": "It seems that we can just use basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"}", "author": "ekazachkova", "createdAt": "2020-10-16T10:48:52Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +39,10 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4ODE4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506288186", "bodyText": "Could you please rename this class to ClusterCreatorUtils? This class should consist of creators for entities from cluster package.", "author": "ekazachkova", "createdAt": "2020-10-16T10:51:53Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -23,6 +23,7 @@\n import com.epam.pipeline.entity.cluster.MasterNode;\n import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4ODkyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506288923", "bodyText": "Could you move this method to ClusterCreatorUtils?", "author": "ekazachkova", "createdAt": "2020-10-16T10:52:43Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java", "diffHunk": "@@ -55,4 +56,8 @@ public static ContextualPreferenceVO getContextualPreferenceVO() {\n                 TEST_STRING, TEST_STRING, PREFERENCE_TYPE, getCPExternalResource()\n         );\n     }\n+\n+    public static MonitoringStats getMonitoringStats() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5MTc4MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506291780", "bodyText": "It is absolutely not clear what is meant permission", "author": "ekazachkova", "createdAt": "2020-10-16T10:56:12Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NzE2OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506297168", "bodyText": "Let's avoid some test case specific naming in such classes. For example, for current situation we need only one method  for this class - getPipelineRun that will return PipelineRun object and accepts all required argument: id, name, owner... You may take the ObjectCreatorUtils class as a basis.", "author": "ekazachkova", "createdAt": "2020-10-16T11:03:13Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5Nzk2NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506297964", "bodyText": "see PipelineCreatorUtils comment", "author": "ekazachkova", "createdAt": "2020-10-16T11:04:09Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -51,6 +53,24 @@ public static NodeInstance getDefaultNodeInstance() {\n         return new NodeInstance();\n     }\n \n+    public static NodeInstance getNodeInstanceWithPermission() {\n+        NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setId(ID);\n+        nodeInstance.setOwner(\"OWNER\");\n+        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithPermission());\n+        nodeInstance.setName(TEST_STRING);\n+        return nodeInstance;\n+    }\n+\n+    public static NodeInstance getNodeInstanceWithoutPermission() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5ODgzNg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506298836", "bodyText": "Do not forget to make variables final", "author": "ekazachkova", "createdAt": "2020-10-16T11:05:12Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMTM5Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506301397", "bodyText": "It seems this initialization is redundant.", "author": "ekazachkova", "createdAt": "2020-10-16T11:08:09Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjIyMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506302221", "bodyText": "Format code please", "author": "ekazachkova", "createdAt": "2020-10-16T11:09:09Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNDY3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506314678", "bodyText": "It seems for such simple and short cases we can merge these two lines:\nassertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);", "author": "ekazachkova", "createdAt": "2020-10-16T11:25:00Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNDQ0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506334447", "bodyText": "Could you check it for other methods too?", "author": "ekazachkova", "createdAt": "2020-10-16T11:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNzg0NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506317844", "bodyText": "Maybe we shell consider creating a common for *ApiServiceTest classes method to build a single user permissions?", "author": "ekazachkova", "createdAt": "2020-10-16T11:28:59Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMTI4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506321282", "bodyText": "Looks like this initialization is redundant", "author": "ekazachkova", "createdAt": "2020-10-16T11:33:33Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzMjE4MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506332181", "bodyText": "Could you check it for other methods too?", "author": "ekazachkova", "createdAt": "2020-10-16T11:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMTI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NjQyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506346423", "bodyText": "Maybe we shell add @AclMask tests? (for merging entity permissions with parent permissions)\nP.S.: see AclAspect", "author": "ekazachkova", "createdAt": "2020-10-16T12:05:21Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExNjI3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509116272", "bodyText": "Could you please check if all of the changes in this class are relevant to the pull request? It seems that mocks like PipelineDao have nothing to do with acl tests.", "author": "tcibinan", "createdAt": "2020-10-21T09:09:11Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -17,47 +17,79 @@\n package com.epam.pipeline.test.acl;", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExODkyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509118927", "bodyText": "I'm afraid that this change can be harmful if some api method has NodeInstance class in request body. For example as part of PipelineRun class. Let's revert the change until we have implemented tests for all the controllers.", "author": "tcibinan", "createdAt": "2020-10-21T09:13:20Z", "path": "api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java", "diffHunk": "@@ -45,7 +45,6 @@\n public class NodeInstance extends AbstractSecuredEntity {\n \n     private UUID uid;\n-    private String name;", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTU5Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509119597", "bodyText": "Could you please replace the field usages with CommonCreatorConstants.TEST_STRING.", "author": "tcibinan", "createdAt": "2020-10-21T09:14:16Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3ODM1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509178357", "bodyText": "I already have four static imports in this class, and, if i'm not mistaken, PMD avoid amount of static imports more than four.", "author": "YouKofan", "createdAt": "2020-10-21T10:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMTYyNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509121624", "bodyText": "I suppose we can call the second one just anotherNodeInstance.", "author": "tcibinan", "createdAt": "2020-10-21T09:17:17Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNjQ2NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509136464", "bodyText": "Method initSingleNodeInstanceList() returns list which doesn't contain nodeInstanceWithoutPermission so this test is not testing what it should. Probably we can even get rid of methods like initSingleNodeInstanceList and always initialiaze lists like the following\nCollections.singletonList(node);\n// or\nArrays.asList(node1, node2);", "author": "tcibinan", "createdAt": "2020-10-21T09:39:10Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MTgwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509141809", "bodyText": "Let's specify explicitly why the access is denied like shouldDenyAccessToNodeWhenPermissionIsNotGranted.", "author": "tcibinan", "createdAt": "2020-10-21T09:47:13Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNode() {", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0Nzk5MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509147991", "bodyText": "I wonder if we can extract all this duplicated mocking calls into some methods like the following:\nmockUser();\nmockStats();\nmockNodeInstance();\nmockPipelineRun();", "author": "tcibinan", "createdAt": "2020-10-21T09:56:46Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5ODQzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r510698434", "bodyText": "Could you please use generic type to return List<T> rather then List<Object>. It probably is a good idea because it increases the possibility that this method will be reused.", "author": "tcibinan", "createdAt": "2020-10-23T07:48:52Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java", "diffHunk": "@@ -131,4 +132,10 @@ public Sid toSid() {\n             return new GrantedAuthoritySid(authorityName);\n         }\n     }\n+\n+    protected List<Object> mutableListOf(Object... objects) {", "originalCommit": "b783a146609e9b69f05d82d5e8487ce0bb6857d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxMzA1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r510713057", "bodyText": "Probably this mocking call makes thing even more complicated then before. For example in this case nodeInstance used for acl is not the same instance that will be used in initMocksBehavior. Also this true\\false flag is not intuitive. Just imagine that there will be another boolean parameter.\nI still think that it will be better to use separate calls for mocks which will just remove a need to write the whole\ndoReturn().when().call() chain. For example in this case we can use something like the following. It does not contain less lines then the original version. But it is not the point, isn't it? The following code is declarative as plain mockito calls but it is also much simpler. And in case f.e. pipeline run mocking mechanism will have to change in the future then we will just have to change a single method mockRun.\nmockUser(SIMPLE_USER); // Mock any user related calls that are used in the tests.\nmockNode(nodeInstance); // Mock all node instance calls that are used in the tests.\nmockRun(pipelineRun); // Mock all pipeline run calls that are used in the tests.\npublic void mockNode(final NodeInstance nodeInstance) {\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n}\nWhat do you think?", "author": "tcibinan", "createdAt": "2020-10-23T08:15:28Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initMocksBehavior(true);", "originalCommit": "5c317b5ac7100eac63135f3e14d1251234969cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNjg2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r511826869", "bodyText": "It does look like we can just replace it with the new method mockNode. Some similar cases with terminateNode calls in different tests too. You can just add terminateNode to mockNode and everything seems to be just fine.", "author": "tcibinan", "createdAt": "2020-10-26T09:36:52Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,444 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n+                .isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        mockUser();\n+        mockRun(pipelineRun);\n+\n+        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());", "originalCommit": "01febba00d8ffb21d4f4ae621c898d2bad0cec19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "url": "https://github.com/epam/cloud-pipeline/commit/bf67280253bcc69263b1123ccefaaa2c35d96a55", "message": "Issue #1404: Minor refactoring done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-26T10:37:35Z", "type": "forcePushed"}, {"oid": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "url": "https://github.com/epam/cloud-pipeline/commit/82c057ac723a7a40750f14e3f33dab1e67adf2fd", "message": "Issue #1404: tests for the first method in the ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:29:23Z", "type": "commit"}, {"oid": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "url": "https://github.com/epam/cloud-pipeline/commit/24a40feb30c2b790ad1c83374c4dde2c79d73f06", "message": "Issue #1404: implemented tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:32:47Z", "type": "commit"}, {"oid": "b713464980ca18071bff2affee16237e96622694", "url": "https://github.com/epam/cloud-pipeline/commit/b713464980ca18071bff2affee16237e96622694", "message": "Issue #1404: Fixes and improvements for tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:33:41Z", "type": "commit"}, {"oid": "6c4390756ebdefd9f7767d6a188efe76ea32ce8d", "url": "https://github.com/epam/cloud-pipeline/commit/6c4390756ebdefd9f7767d6a188efe76ea32ce8d", "message": "Issue #1404: Minor style improvements\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:13Z", "type": "commit"}, {"oid": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "url": "https://github.com/epam/cloud-pipeline/commit/d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "message": "Issue #1404: Improvement tests for ClusterApiService and Creator utils refactoring\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "url": "https://github.com/epam/cloud-pipeline/commit/4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "message": "Issue #1404: Refactoring initAclEntity method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "f64b25fe398480c21040fb9e3421f798a9116097", "url": "https://github.com/epam/cloud-pipeline/commit/f64b25fe398480c21040fb9e3421f798a9116097", "message": "Issue #1404: Added valid masks check and fixes @WithMockUser arguments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "url": "https://github.com/epam/cloud-pipeline/commit/d992cff3e9c7e3d8f9f820dddf711c6143d73153", "message": "Issue #1404: Tests improvements, redundant beans deleted, etc\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:36Z", "type": "commit"}, {"oid": "7122f50a1bc793226f27aedfc96c4960675f1370", "url": "https://github.com/epam/cloud-pipeline/commit/7122f50a1bc793226f27aedfc96c4960675f1370", "message": "Issue #1404: Refactoring in creatorUtils classes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:39Z", "type": "commit"}, {"oid": "c3237f3d382b414f66cb99688468c0695047be92", "url": "https://github.com/epam/cloud-pipeline/commit/c3237f3d382b414f66cb99688468c0695047be92", "message": "Issue #1404: Added license to the PipelineCreatorUtils and other minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:39Z", "type": "commit"}, {"oid": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "url": "https://github.com/epam/cloud-pipeline/commit/56eb51d9abb9460ccbae1ef5702f62a8982733c8", "message": "Issue #1404: Improvements in the tests and in the mutableListOf method, changes in the PMD rules\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:59Z", "type": "commit"}, {"oid": "931c37811a89c4bfab582dde776e553cc335edac", "url": "https://github.com/epam/cloud-pipeline/commit/931c37811a89c4bfab582dde776e553cc335edac", "message": "Issue #1404: Minor test fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:08Z", "type": "commit"}, {"oid": "7e15b144352a5a05c200d537980c996e3901c89a", "url": "https://github.com/epam/cloud-pipeline/commit/7e15b144352a5a05c200d537980c996e3901c89a", "message": "Issue #1404: Minor refactoring done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:08Z", "type": "commit"}, {"oid": "407592030a6c68e0b23dc152e1bdd18487f38e08", "url": "https://github.com/epam/cloud-pipeline/commit/407592030a6c68e0b23dc152e1bdd18487f38e08", "message": "Issue #1404: Style (valid indentations) fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:09Z", "type": "commit"}, {"oid": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "url": "https://github.com/epam/cloud-pipeline/commit/7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "message": "Issue #1404: Merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:51:58Z", "type": "commit"}, {"oid": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "url": "https://github.com/epam/cloud-pipeline/commit/7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "message": "Issue #1404: Merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:51:58Z", "type": "forcePushed"}]}