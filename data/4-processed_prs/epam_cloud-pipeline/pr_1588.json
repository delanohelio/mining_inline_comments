{"pr_number": 1588, "pr_title": "Issue #1404: Implemented tests for EntityApiService", "pr_createdAt": "2020-11-20T14:22:55Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1588", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNDE4NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1588#discussion_r529624185", "bodyText": "It seems that AbstractDataStorage already has aclClass fields set to AclClass.DATA_STORAGE. Do we really need that to be specified explicitly?", "author": "tcibinan", "createdAt": "2020-11-24T15:17:05Z", "path": "api/src/test/java/com/epam/pipeline/acl/entity/EntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.entity;\n+\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclSid;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.HierarchicalEntityManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class EntityApiServiceTest extends AbstractAclTest {\n+\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final Map<AclClass, List<AbstractSecuredEntity>> aclEntityMap =\n+            Collections.singletonMap(AclClass.DATA_STORAGE, Collections.singletonList(s3bucket));\n+    private final AclSid aclSid = SecurityCreatorUtils.getAclSid();\n+\n+    @Autowired\n+    private EntityApiService entityApiService;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private HierarchicalEntityManager mockHierarchicalEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadEntityForAdmin() {\n+        doReturn(s3bucket).when(mockEntityManager).loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING);\n+\n+        assertThat(entityApiService.loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadEntityWhenPermissionIsGranted() {\n+        s3bucket.setAclClass(AclClass.DATA_STORAGE);", "originalCommit": "438fe37cc70370992a8aaceb9f82729cf4369710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyODU1Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1588#discussion_r529628552", "bodyText": "Let's move it to AclTestBeans.", "author": "tcibinan", "createdAt": "2020-11-24T15:22:23Z", "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -214,6 +215,9 @@\n     @MockBean\n     protected PipelineRunDockerOperationManager pipelineRunDockerOperationManager;\n \n+    @MockBean", "originalCommit": "438fe37cc70370992a8aaceb9f82729cf4369710", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5NzgyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1588#discussion_r531597823", "bodyText": "Class AclTestConfiguration configures environment for test classes which doesn't have anything in common with the pull request test classes. The change is only required because acl classes are moved between packages.", "author": "tcibinan", "createdAt": "2020-11-27T13:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyODU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyODk5NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1588#discussion_r529628994", "bodyText": "Not required brackets can be omitted.", "author": "tcibinan", "createdAt": "2020-11-24T15:22:55Z", "path": "api/src/test/java/com/epam/pipeline/acl/entity/EntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.entity;\n+\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclSid;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.HierarchicalEntityManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class EntityApiServiceTest extends AbstractAclTest {\n+\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final Map<AclClass, List<AbstractSecuredEntity>> aclEntityMap =\n+            Collections.singletonMap(AclClass.DATA_STORAGE, Collections.singletonList(s3bucket));\n+    private final AclSid aclSid = SecurityCreatorUtils.getAclSid();\n+\n+    @Autowired\n+    private EntityApiService entityApiService;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private HierarchicalEntityManager mockHierarchicalEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadEntityForAdmin() {\n+        doReturn(s3bucket).when(mockEntityManager).loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING);\n+\n+        assertThat(entityApiService.loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadEntityWhenPermissionIsGranted() {\n+        s3bucket.setAclClass(AclClass.DATA_STORAGE);\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(s3bucket).when(mockEntityManager).loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING);\n+        doReturn(s3bucket).when(mockEntityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockSecurityContext();\n+        assertThat(entityApiService.loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadEntityWhenPermissionIsNotGranted() {\n+        s3bucket.setAclClass(AclClass.DATA_STORAGE);\n+        initAclEntity(s3bucket);\n+        doReturn(s3bucket).when(mockEntityManager).loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING);\n+        doReturn(s3bucket).when(mockEntityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                entityApiService.loadByNameOrId(AclClass.DATA_STORAGE, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAvailableEntityForAdmin() {\n+        doReturn(aclEntityMap).when(mockHierarchicalEntityManager).loadAvailable(aclSid, AclClass.DATA_STORAGE);\n+\n+        assertThat(entityApiService.loadAvailable(aclSid, AclClass.DATA_STORAGE)).isEqualTo(aclEntityMap);\n+    }\n+\n+    @Test\n+    @WithMockUser()", "originalCommit": "438fe37cc70370992a8aaceb9f82729cf4369710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ba7267f98afa279a4e47fb163e20fed27bce3c2", "url": "https://github.com/epam/cloud-pipeline/commit/5ba7267f98afa279a4e47fb163e20fed27bce3c2", "message": "Issue #1404: Implemented tests for EntityApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T08:33:03Z", "type": "commit"}, {"oid": "cf995cb7a8fd2e3ec6958dfe2ca93097c24fd4f9", "url": "https://github.com/epam/cloud-pipeline/commit/cf995cb7a8fd2e3ec6958dfe2ca93097c24fd4f9", "message": "Issue #1404: Minor improvements in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T08:33:14Z", "type": "commit"}, {"oid": "473c4517eb32b7908fe54aa85e83d59976e7045b", "url": "https://github.com/epam/cloud-pipeline/commit/473c4517eb32b7908fe54aa85e83d59976e7045b", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T08:46:27Z", "type": "commit"}, {"oid": "473c4517eb32b7908fe54aa85e83d59976e7045b", "url": "https://github.com/epam/cloud-pipeline/commit/473c4517eb32b7908fe54aa85e83d59976e7045b", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T08:46:27Z", "type": "forcePushed"}]}