{"pr_number": 543, "pr_title": "Deserialize records on the fly.", "pr_createdAt": "2020-03-02T18:46:24Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/543", "timeline": [{"oid": "d8c93e1a7b4712938462547f1af8622395762ad2", "url": "https://github.com/vmware/differential-datalog/commit/d8c93e1a7b4712938462547f1af8622395762ad2", "message": "Deserialize records on the fly.\n\nConsider a scenario where input relations contain JSON strings.  These\nstrings are parsed using the recently added JSON lib and then DDlog goes\non to compute on the parsed data.  When working with large JSON\ndocuments where only a handful of attributes are actually used by DDlog,\nDDlog's memory footprint is dominated by unparsed JSON inputs.\n\nTo avoid this waste, we introduce a new record type that contains\nserialized data represented as a string.  DDlog parses this string using\nappropriate deserializer (currently, only json is supported) and drops\nthe string on the floor, keeping only the extracted data in memory.\n\nSyntactically, the new type of record is written down as\n`@<format><string_token>`, where `<string_token>` can be either a quoted\nstring literal or a reference to a file, e.g.:\n\n```\ninsert json_test.Deserialized[@json\"{\\\"@type\\\": \\\"t.V1\\\", \\\"b\\\": true}\"]\n```", "committedDate": "2020-03-02T20:23:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjExOA==", "url": "https://github.com/vmware/differential-datalog/pull/543#discussion_r386676118", "bodyText": "Do you want to document this particular format?\nHow does one register a new deserializer?", "author": "mbudiu-vmw", "createdAt": "2020-03-02T21:59:08Z", "path": "rust/template/cmd_parser/parse.rs", "diffHunk": "@@ -406,6 +414,28 @@ fn test_string() {\n     );\n }\n \n+named!(serialized_val<&[u8], Record>,\n+    do_parse!(\n+        tag!(\"@\")", "originalCommit": "d8c93e1a7b4712938462547f1af8622395762ad2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NjI5Ng==", "url": "https://github.com/vmware/differential-datalog/pull/543#discussion_r386696296", "bodyText": "yes, there are a couple of other recent undocumented extensions.  Let will submit a separate documentation PR.", "author": "ryzhyk", "createdAt": "2020-03-02T22:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjExOA=="}], "type": "inlineReview"}, {"oid": "c9a7934beeaac4c2b52ff836a6cdd0c18cc32eea", "url": "https://github.com/vmware/differential-datalog/commit/c9a7934beeaac4c2b52ff836a6cdd0c18cc32eea", "message": "Deserialize records on the fly.\n\nConsider a scenario where input relations contain JSON strings.  These\nstrings are parsed using the recently added JSON lib and then DDlog goes\non to compute on the parsed data.  When working with large JSON\ndocuments where only a handful of attributes are actually used by DDlog,\nDDlog's memory footprint is dominated by unparsed JSON inputs.\n\nTo avoid this waste, we introduce a new record type that contains\nserialized data represented as a string.  DDlog parses this string using\nappropriate deserializer (currently, only json is supported) and drops\nthe string on the floor, keeping only the extracted data in memory.\n\nSyntactically, the new type of record is written down as\n`@<format><string_token>`, where `<string_token>` can be either a quoted\nstring literal or a reference to a file, e.g.:\n\n```\ninsert json_test.Deserialized[@json\"{\\\"@type\\\": \\\"t.V1\\\", \\\"b\\\": true}\"]\n```", "committedDate": "2020-03-02T22:52:39Z", "type": "commit"}, {"oid": "c9a7934beeaac4c2b52ff836a6cdd0c18cc32eea", "url": "https://github.com/vmware/differential-datalog/commit/c9a7934beeaac4c2b52ff836a6cdd0c18cc32eea", "message": "Deserialize records on the fly.\n\nConsider a scenario where input relations contain JSON strings.  These\nstrings are parsed using the recently added JSON lib and then DDlog goes\non to compute on the parsed data.  When working with large JSON\ndocuments where only a handful of attributes are actually used by DDlog,\nDDlog's memory footprint is dominated by unparsed JSON inputs.\n\nTo avoid this waste, we introduce a new record type that contains\nserialized data represented as a string.  DDlog parses this string using\nappropriate deserializer (currently, only json is supported) and drops\nthe string on the floor, keeping only the extracted data in memory.\n\nSyntactically, the new type of record is written down as\n`@<format><string_token>`, where `<string_token>` can be either a quoted\nstring literal or a reference to a file, e.g.:\n\n```\ninsert json_test.Deserialized[@json\"{\\\"@type\\\": \\\"t.V1\\\", \\\"b\\\": true}\"]\n```", "committedDate": "2020-03-02T22:52:39Z", "type": "forcePushed"}]}