{"pr_number": 833, "pr_title": "Expose 'Modify' command in Rust/C/Java API ", "pr_createdAt": "2020-12-01T19:35:07Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODkwNg==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533758906", "bodyText": "Better to call this getStructFieldUnchecked.", "author": "lalithsuresh", "createdAt": "2020-12-01T22:18:32Z", "path": "java/ddlogapi/DDlogRecord.java", "diffHunk": "@@ -380,12 +397,20 @@ public String getStructName() {\n         return DDlogAPI.ddlog_get_constructor(this.handle);\n     }\n \n-    public DDlogRecord getStructField(int index) {\n+    public DDlogRecord getStructField(int index) throws DDlogException {\n         if (!this.isStruct())\n             throw new RuntimeException(\"Value is not a struct\");\n         return fromSharedHandle(DDlogAPI.ddlog_get_struct_field(this.handle, index));\n     }\n \n+    public DDlogRecord getStructFieldNoEx(int index) {", "originalCommit": "e7690c409fe48f867218bd0dbde76751df6a5da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDAwMw==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533770003", "bodyText": "It's checked, but not a checked exception.", "author": "mbudiu-vmw", "createdAt": "2020-12-01T22:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDA5OQ==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533770099", "bodyText": "Nit: might be cleaner to just use a goto to jump to the end of the function and call the frees you need.", "author": "lalithsuresh", "createdAt": "2020-12-01T22:40:27Z", "path": "java/ddlogapi.c", "diffHunk": "@@ -792,6 +792,55 @@ JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1struct(\n     return (jlong)result;\n }\n \n+JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1named_1struct(\n+    JNIEnv *env, jclass obj, jstring s, jobjectArray names, jlongArray handles) {\n+    const char* str = (*env)->GetStringUTFChars(env, s, NULL);\n+    jsize len = (*env)->GetArrayLength(env, handles);\n+    jlong *a = (*env)->GetLongArrayElements(env, handles, NULL);\n+    if (a == NULL)\n+        return -1;\n+    jsize nameLen = (*env)->GetArrayLength(env, names);\n+    if (nameLen != len) {\n+        throwDDlogException(env, \"number of names does not match number of values\");\n+        return -1;\n+    }\n+    ddlog_record** fields = malloc(len * sizeof(ddlog_record*));\n+    if (fields == NULL) {\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d fields.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++)\n+        fields[i] = (ddlog_record*)a[i];\n+\n+    const char** fieldNames = malloc(len * sizeof(char*));\n+    if (fieldNames == NULL) {\n+        free(fields);\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d names.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++) {\n+        jobject jname = (*env)->GetObjectArrayElement(env, names, i);\n+        if (jname == NULL) {\n+            free(fields);", "originalCommit": "e7690c409fe48f867218bd0dbde76751df6a5da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODAyMg==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533778022", "bodyText": "This is also true for the code above that does not free str on error.", "author": "ryzhyk", "createdAt": "2020-12-01T22:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTIwNQ==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533845205", "bodyText": "Not  a good choice of name, imo.  This argument describes a change to apply to the value.  delta coule be a better name, but it's already used with a different meaning in this API. Perhaps patch?", "author": "ryzhyk", "createdAt": "2020-12-02T02:00:18Z", "path": "rust/template/ddlog.h", "diffHunk": "@@ -1507,4 +1556,24 @@ extern ddlog_cmd* ddlog_delete_val_cmd(table_id table, ddlog_record *rec);\n  */\n extern ddlog_cmd* ddlog_delete_key_cmd(table_id table, ddlog_record *rec);\n \n+/*\n+ * Create a modify-by-key command.\n+ *\n+ * `table` - input table to delete from.\n+ * `key` - key to modify.  The function takes ownership of this record.\n+ * `values` - values to modify.  The function takes ownership of this record.", "originalCommit": "e7690c409fe48f867218bd0dbde76751df6a5da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NzQyMQ==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533857421", "bodyText": "Or modification.", "author": "lalithsuresh", "createdAt": "2020-12-02T02:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTUyOQ==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533845529", "bodyText": "Actually, Rust is correct, you should probably use an iterator, not a range loop.  I would do that rather than disable the warning.", "author": "ryzhyk", "createdAt": "2020-12-02T02:01:17Z", "path": "rust/template/differential_datalog/record.rs", "diffHunk": "@@ -1,6 +1,6 @@\n //! An untyped representation of DDlog values and database update commands.\n \n-#![allow(unknown_lints)]\n+#![allow(unknown_lints,clippy::needless_range_loop)]", "originalCommit": "e7690c409fe48f867218bd0dbde76751df6a5da6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53e31f80d101bf61b44030ec1fdf8401ccfb5847", "url": "https://github.com/vmware/differential-datalog/commit/53e31f80d101bf61b44030ec1fdf8401ccfb5847", "message": "ddvalue.rs: Comment out safety checks.\n\nI haven't done thorough evaluation, but the safety checks `partial_cmp`,\n`eq`, and `cmp` appear to add small but non-trivial overhead, e.g., on\nthe redist_opt benchmarks.  Disabling these checks, as they should\nanyway be redundant: assuming the compiler is correct and the\ningest-time type checking is working properly, types are guaranteed to\nmatch.\n\nExpose 'Modify' command in Rust/C/Java API\nSupport for mutators for positional records", "committedDate": "2020-12-03T02:35:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NjE1Mg==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r535586152", "bodyText": "Looks like this PR somehow contains pieces of an unrelated earlier MR.", "author": "ryzhyk", "createdAt": "2020-12-03T20:41:21Z", "path": "rust/template/differential_datalog/ddval/ddvalue.rs", "diffHunk": "@@ -97,39 +97,41 @@ impl Debug for DDValue {\n ", "originalCommit": "53e31f80d101bf61b44030ec1fdf8401ccfb5847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNzk1NQ==", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r535707955", "bodyText": "The underscore is needed here to avoid warnings for structs with no fields.", "author": "ryzhyk", "createdAt": "2020-12-03T22:58:10Z", "path": "rust/template/differential_datalog/record.rs", "diffHunk": "@@ -1734,11 +1813,22 @@ macro_rules! decl_record_mutator_struct {\n         {\n             fn mutate(&self, _x: &mut $n<$($targ),*>) -> ::std::result::Result<(), String> {\n                 match self {\n-                    $crate::record::Record::PosStruct(..) => {\n-                        return ::std::result::Result::Err(format!(\"Cannot use positional struct as mutator\"));\n+                    $crate::record::Record::PosStruct(_, args) => {\n+                        let mut index = 0;\n+                        $(\n+                            if index == args.len() {\n+                                return ::std::result::Result::Err(format!(\"Positional struct mutator does not contain all elements\"));\n+                            };\n+                            let arg_upd = &args[index];\n+                            index = index + 1;\n+                            <dyn $crate::record::Mutator<$type>>::mutate(arg_upd, &mut _x.$arg)?;\n+                        )*\n+                        if index != args.len() {\n+                            return ::std::result::Result::Err(format!(\"Positional struct mutator has too many elements\"));\n+                        }\n                     },\n-                    $crate::record::Record::NamedStruct(_, _args) => {\n-                        $(if let Some(arg_upd) = $crate::record::arg_find(_args, stringify!($arg)) {\n+                    $crate::record::Record::NamedStruct(_, args) => {", "originalCommit": "53e31f80d101bf61b44030ec1fdf8401ccfb5847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "472c8208a30b17e28eab5d9e8fcd5dd88169af25", "url": "https://github.com/vmware/differential-datalog/commit/472c8208a30b17e28eab5d9e8fcd5dd88169af25", "message": "Added support for 'Modify' API command in C and Java.  This required some support in Rust too.", "committedDate": "2020-12-04T00:15:53Z", "type": "commit"}, {"oid": "472c8208a30b17e28eab5d9e8fcd5dd88169af25", "url": "https://github.com/vmware/differential-datalog/commit/472c8208a30b17e28eab5d9e8fcd5dd88169af25", "message": "Added support for 'Modify' API command in C and Java.  This required some support in Rust too.", "committedDate": "2020-12-04T00:15:53Z", "type": "forcePushed"}]}