{"pr_number": 615, "pr_title": "Add Go bindings for ddlog_transaction_commit_dump_changes_as_array", "pr_createdAt": "2020-04-07T01:53:14Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/615", "timeline": [{"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6", "url": "https://github.com/vmware/differential-datalog/commit/29b75b3986c65a8200a3561981e544bbe5b524b6", "message": "Add Go bindings for ddlog_transaction_commit_dump_changes_as_array\n\nThe new API is called CommitTransactionChangesAsArray.\n\nUnfortunately we do not see a noticable improvement in benchmarks:\nBenchmarkTransaction-4                 \t     339\t   3867018 ns/op\nBenchmarkTransactionChangesAsArray-4   \t     350\t   3448197 ns/op\nBenchmarkRecord-4                      \t  764809\t      1499 ns/op\n\n^ this is one of the better results\n\nIt makes sense, since at least for this benchmark it seems that the\nbottleneck is the actual processing of the transaction by DDlog:\n\n      flat  flat%   sum%        cum   cum%\n        2s 71.17% 71.17%         2s 71.17%  [libtypesTest_ddlog.so]\n     0.47s 16.73% 87.90%      0.47s 16.73%  [libc-2.27.so]\n     0.15s  5.34% 93.24%      0.15s  5.34%  [libpthread-2.27.so]\n     0.11s  3.91% 97.15%      0.11s  3.91%  runtime.cgocall\n\nA real life example (Antrea) did not seem to benefit from this change\neither. Even though Antrea shows more overhead caused by\nruntime.cgocall (10%), most of this overhead seems to be caused by\ncreating / consuming records using the record API. Still, if we ever\nhave a more efficient way of creating / consuming records from Go, the\nrelative improvement offered by CommitTransactionChangesAsArray may\nbecome more significant.", "committedDate": "2020-04-07T01:44:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDc5Mw==", "url": "https://github.com/vmware/differential-datalog/pull/615#discussion_r404490793", "bodyText": "@ryzhyk I am assuming that there is no need to call ddlog_free_record_updates in that case", "author": "antoninbas", "createdAt": "2020-04-07T01:53:53Z", "path": "go/pkg/ddlog/ddlog.go", "diffHunk": "@@ -32,6 +32,18 @@ static int ddlogTransactionCommitDumpChanges(ddlog_prog hprog, uintptr_t arg) {\n     return ddlog_transaction_commit_dump_changes(hprog, dumpChangesCb, arg);\n }\n \n+extern void handleOutRecordArray(uintptr_t progIdx, ddlog_record_update *changes, size_t num_changes);\n+\n+static int ddlogTransactionCommitDumpChangesAsArray(ddlog_prog hprog, uintptr_t progIdx) {\n+    ddlog_record_update *changes;\n+    size_t num_changes;\n+    int rc = ddlog_transaction_commit_dump_changes_as_array(hprog, &changes, &num_changes);\n+    if (rc != 0 || num_changes == 0) return rc;", "originalCommit": "29b75b3986c65a8200a3561981e544bbe5b524b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NjMwMw==", "url": "https://github.com/vmware/differential-datalog/pull/615#discussion_r404496303", "bodyText": "correct", "author": "ryzhyk", "createdAt": "2020-04-07T02:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDk1MQ==", "url": "https://github.com/vmware/differential-datalog/pull/615#discussion_r404490951", "bodyText": "for the record, I tried batching callbacks as this level as well and I didn't observe any improvement", "author": "antoninbas", "createdAt": "2020-04-07T01:54:29Z", "path": "go/pkg/ddlog/ddlog.go", "diffHunk": "@@ -302,6 +314,19 @@ func (p *Program) CommitTransaction() error {\n \treturn nil\n }\n \n+// CommitTransactionChangesAsArray commits a transaction. It uses a different implementation from\n+// CommitTransaction, which may yield better performance when many output records are\n+// generated. Unlike with CommitTransaction, DDlog will not generate one callback for each output\n+// record, but will return an array of output records (with polarity). Note that we still generate\n+// one OutRecordHandler callback for each output record.", "originalCommit": "29b75b3986c65a8200a3561981e544bbe5b524b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}