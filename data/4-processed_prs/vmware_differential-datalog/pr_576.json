{"pr_number": 576, "pr_title": "lib/regex.dl: Two new functions.", "pr_createdAt": "2020-03-25T22:42:41Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/576", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzUwNg==", "url": "https://github.com/vmware/differential-datalog/pull/576#discussion_r398217506", "bodyText": "I wonder whether you may want to have an extern type for regex, which is a compiled regular expression.\nIf you want to use a regex in a rule it would be nice to be able to compile it.", "author": "mbudiu-vmw", "createdAt": "2020-03-25T22:48:34Z", "path": "lib/regex.dl", "diffHunk": "@@ -11,4 +11,17 @@\n  * Returns false if `regex` is not a valid regular expression or if no match was\n  * found.\n  */\n-extern function regex_match(regex: string, str: string): bool\n+extern function regex_match(regex: string, text: string): bool", "originalCommit": "02bd349542b8d3abf5f214a2fc47a342d6299fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0ODMxMw==", "url": "https://github.com/vmware/differential-datalog/pull/576#discussion_r398248313", "bodyText": "The current API is a convenience API that combines regex compilation and matching. It works nicely for our existing use cases when we are porting, e.g., Groovy code like str =~ /^[\\d\\.v]+/.\nI agree that a complete regex library would have the API that separates compilation from matching.", "author": "ryzhyk", "createdAt": "2020-03-26T00:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0ODQ2Mw==", "url": "https://github.com/vmware/differential-datalog/pull/576#discussion_r398248463", "bodyText": "(and we should build this library at some point)", "author": "ryzhyk", "createdAt": "2020-03-26T00:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzUwNg=="}], "type": "inlineReview"}, {"oid": "1749e64a07bd14d79ff4019c13e3cc00977d4428", "url": "https://github.com/vmware/differential-datalog/commit/1749e64a07bd14d79ff4019c13e3cc00977d4428", "message": "lib/regex.dl: Two new functions.\n\nAlso added tests for this library in `test/datalog_tests/regex_test.dl`.\n\n```\n/*\n * Returns the leftmost-first match in `text`. If `regex` is not a valid regular\n * expression or no match exists, then `None` is returned.\n */\nextern function regex_first_match(regex: string, text: string): Option<string>\n\n/*\n * Returns all successive non-overlapping matches in `text`.\n * If `regex` is not a valid regular expression or no match exists,\n * an empty vector is returned.\n */\nextern function regex_all_matches(regex: string, text: string): Vec<string>\n```", "committedDate": "2020-03-26T00:15:28Z", "type": "commit"}, {"oid": "1749e64a07bd14d79ff4019c13e3cc00977d4428", "url": "https://github.com/vmware/differential-datalog/commit/1749e64a07bd14d79ff4019c13e3cc00977d4428", "message": "lib/regex.dl: Two new functions.\n\nAlso added tests for this library in `test/datalog_tests/regex_test.dl`.\n\n```\n/*\n * Returns the leftmost-first match in `text`. If `regex` is not a valid regular\n * expression or no match exists, then `None` is returned.\n */\nextern function regex_first_match(regex: string, text: string): Option<string>\n\n/*\n * Returns all successive non-overlapping matches in `text`.\n * If `regex` is not a valid regular expression or no match exists,\n * an empty vector is returned.\n */\nextern function regex_all_matches(regex: string, text: string): Vec<string>\n```", "committedDate": "2020-03-26T00:15:28Z", "type": "forcePushed"}]}