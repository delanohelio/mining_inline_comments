{"pr_number": 610, "pr_title": "New syntax for functions.", "pr_createdAt": "2020-04-04T21:16:59Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUyNDI4MQ==", "url": "https://github.com/vmware/differential-datalog/pull/610#discussion_r403524281", "bodyText": "Just take it out of the doc if you want to deprecate it", "author": "mbudiu-vmw", "createdAt": "2020-04-04T21:31:57Z", "path": "doc/language_reference/language_reference.md", "diffHunk": "@@ -217,7 +217,7 @@ body.\n ```EBNF\n function ::= \"function\" func_name \"(\" [arg(,arg)*]\")\"\n               \":\" simple_type_spec (* return type *)\n-              [\"=\" expr]\n+              (\"{\" expr \"} | \"=\" expr) (* body of the function *)", "originalCommit": "05eb945df48b19f41d0a3de130650fe2313f974a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1dc7425010f7ff46a72754fad9281d82e376f5d", "url": "https://github.com/vmware/differential-datalog/commit/f1dc7425010f7ff46a72754fad9281d82e376f5d", "message": "New syntax for function.\n\n(Addresses #603)\n\nThis code\n\n```\nrelation &X(x: string)\nfunction myfunc(x: string): string = { x }\n&X(\"foo\").\n```\n\nfails to compile with:\n\n```\nddlog: Failed to parse input file: \"playpen3.dl\" (line 3, column 3):\nunexpected '('\nexpecting \"#\", \"import\", \"typedef\", \"extern\", \"input\", \"output\", \"relation\", \"index\", \"function\", \"transformer\", variable name, \"&\", relation name, \"apply\", \"for\" or end of input\n```\n\nThe problem is that the syntax with optional curly braces is\ninherently ambiguous.  In addition, the `=` between function\ndeclaration and body is bad aesthetically in most cases.\n\nWe introduce new, more conventional, syntax without `=` and with\nmandatory braces.  It eliminates the ambiguity and looks better imo.\n\nWe still support the old syntax to avoid breaking people's code.  We may\nphase it out in the future, but I don't see much harm in it.", "committedDate": "2020-04-04T21:41:24Z", "type": "forcePushed"}, {"oid": "cc76174d874b4c06f1e60761b5ad8fa35e91e35f", "url": "https://github.com/vmware/differential-datalog/commit/cc76174d874b4c06f1e60761b5ad8fa35e91e35f", "message": "New syntax for function.\n\n(Addresses #603)\n\nThis code\n\n```\nrelation &X(x: string)\nfunction myfunc(x: string): string = { x }\n&X(\"foo\").\n```\n\nfails to compile with:\n\n```\nddlog: Failed to parse input file: \"playpen3.dl\" (line 3, column 3):\nunexpected '('\nexpecting \"#\", \"import\", \"typedef\", \"extern\", \"input\", \"output\", \"relation\", \"index\", \"function\", \"transformer\", variable name, \"&\", relation name, \"apply\", \"for\" or end of input\n```\n\nThe problem is that the syntax with optional curly braces is\ninherently ambiguous.  In addition, the `=` between function\ndeclaration and body is bad aesthetically in most cases.\n\nWe introduce new, more conventional, syntax without `=` and with\nmandatory braces.  It eliminates the ambiguity and looks better imo.\n\nWe still support the old syntax to avoid breaking people's code.  We may\nphase it out in the future, but I don't see much harm in it.", "committedDate": "2020-04-04T22:05:47Z", "type": "forcePushed"}, {"oid": "da535c0e345fd7a03b1a9107a63fe8edd3a237f6", "url": "https://github.com/vmware/differential-datalog/commit/da535c0e345fd7a03b1a9107a63fe8edd3a237f6", "message": "New syntax for function.\n\n(Addresses #603)\n\nThis code\n\n```\nrelation &X(x: string)\nfunction myfunc(x: string): string = { x }\n&X(\"foo\").\n```\n\nfails to compile with:\n\n```\nddlog: Failed to parse input file: \"playpen3.dl\" (line 3, column 3):\nunexpected '('\nexpecting \"#\", \"import\", \"typedef\", \"extern\", \"input\", \"output\", \"relation\", \"index\", \"function\", \"transformer\", variable name, \"&\", relation name, \"apply\", \"for\" or end of input\n```\n\nThe problem is that the syntax with optional curly braces is\ninherently ambiguous.  In addition, the `=` between function\ndeclaration and body is bad aesthetically in most cases.\n\nWe introduce new, more conventional, syntax without `=` and with\nmandatory braces.  It eliminates the ambiguity and looks better imo.\n\nWe still support the old syntax to avoid breaking people's code.  We may\nphase it out in the future, but I don't see much harm in it.", "committedDate": "2020-04-04T23:03:20Z", "type": "commit"}, {"oid": "da535c0e345fd7a03b1a9107a63fe8edd3a237f6", "url": "https://github.com/vmware/differential-datalog/commit/da535c0e345fd7a03b1a9107a63fe8edd3a237f6", "message": "New syntax for function.\n\n(Addresses #603)\n\nThis code\n\n```\nrelation &X(x: string)\nfunction myfunc(x: string): string = { x }\n&X(\"foo\").\n```\n\nfails to compile with:\n\n```\nddlog: Failed to parse input file: \"playpen3.dl\" (line 3, column 3):\nunexpected '('\nexpecting \"#\", \"import\", \"typedef\", \"extern\", \"input\", \"output\", \"relation\", \"index\", \"function\", \"transformer\", variable name, \"&\", relation name, \"apply\", \"for\" or end of input\n```\n\nThe problem is that the syntax with optional curly braces is\ninherently ambiguous.  In addition, the `=` between function\ndeclaration and body is bad aesthetically in most cases.\n\nWe introduce new, more conventional, syntax without `=` and with\nmandatory braces.  It eliminates the ambiguity and looks better imo.\n\nWe still support the old syntax to avoid breaking people's code.  We may\nphase it out in the future, but I don't see much harm in it.", "committedDate": "2020-04-04T23:03:20Z", "type": "forcePushed"}]}