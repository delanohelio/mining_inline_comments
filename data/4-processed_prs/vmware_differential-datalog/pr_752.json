{"pr_number": 752, "pr_title": "Worked on std", "pr_createdAt": "2020-08-25T21:20:43Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/752", "timeline": [{"oid": "3223d02dd64aa8f576c1ecb5b0bf53a4853edec4", "url": "https://github.com/vmware/differential-datalog/commit/3223d02dd64aa8f576c1ecb5b0bf53a4853edec4", "message": "Worked on std", "committedDate": "2020-08-25T18:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4Mzc2OA==", "url": "https://github.com/vmware/differential-datalog/pull/752#discussion_r476883768", "bodyText": "I was a bit paranoid about doing this.  This type is designed for use in auto-generated code where we usually don't want any magic conversions.  I cannot think of a specific scenario where this would cause problems though, so I guess it's ok.", "author": "ryzhyk", "createdAt": "2020-08-25T23:54:31Z", "path": "lib/internment.rs", "diffHunk": "@@ -54,7 +54,13 @@ impl<A: Eq + Hash + Send + Sync + 'static> internment_Intern<A> {\n             intern: arc_interner::ArcIntern::new(x),\n         }\n     }\n-    pub fn as_ref(&self) -> &A {\n+}\n+\n+impl<A> AsRef<A> for internment_Intern<A>", "originalCommit": "3223d02dd64aa8f576c1ecb5b0bf53a4853edec4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyODk5NQ==", "url": "https://github.com/vmware/differential-datalog/pull/752#discussion_r476928995", "bodyText": "It really shouldn't matter since AsRef is in the prelude, worst comes to worst we can use qualified syntax with AsRef::as_ref(thing) instead of thing.as_ref()", "author": "Kixiron", "createdAt": "2020-08-26T00:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4Mzc2OA=="}], "type": "inlineReview"}]}