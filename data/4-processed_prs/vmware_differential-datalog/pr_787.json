{"pr_number": 787, "pr_title": "Eliminate the `Value` wrapper around DDlog values.", "pr_createdAt": "2020-10-27T19:47:21Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/787", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDg2MQ==", "url": "https://github.com/vmware/differential-datalog/pull/787#discussion_r513050861", "bodyText": "forgot to delete a dash", "author": "mbudiu-vmw", "createdAt": "2020-10-27T21:43:34Z", "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -585,17 +573,15 @@ compile d_unoptimized specname modules rs_code toml_code dir crate_types = do\n -- * 'value' crate that declares relations and value types.\n -- * 'main' crate that contains rule definitions in Rust and imports the other two.\n --\n-compileLib :: (?cfg::Config) => DatalogProgram -> String -> [DatalogModule] -> M.Map ModuleName Doc -> (M.Map ModuleName Doc, Doc, Doc)\n-compileLib d specname modules rs_code = (typeLibAllFuncs, valueLib, mainLib)\n+compileLib :: (?cfg::Config) => DatalogProgram -> String -> [DatalogModule] -> M.Map ModuleName Doc -> (M.Map ModuleName Doc, Doc)\n+compileLib d specname modules rs_code = (typeLib, mainLib)\n     where\n     modules' = addMissingModules modules\n     statics = collectStatics d\n-    -- Start with empty modules, except the main module that contains statics\n-    -- declarations.\n+    -- Start with empty modules, except the main module that contains statics- declarations.", "originalCommit": "0b865c77752711b41ae54066d63b8d7cf1820629", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "url": "https://github.com/vmware/differential-datalog/commit/68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "message": "Eliminate the `Value` wrapper around DDlog values.\n\nThis commit eliminates the `Value` wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\n`DDValConvert` trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n`__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval`.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate `value` crate that had to be imported by\nclients.\n\nAn alternative to the wrapper is to implement `trait DDlogConvert` for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, `differential_datalog`) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since `DDlogConvert` can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\n`differential_datalog`.  On the other hand, we also cannot implement it\nin the `types` crate, since tuples are a builtin Rust type.\n\nThe workaround is to replace tuples with custom tuple structs\n`tuple2<T1,T2>`, `tuple3<T1,T2,T3>`.  We already declare those in the\n`types` crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to `tupleN`\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\n\nWith this change, we can eliminate the `Value` wrapper and place all\n`DDlogConvert` implementations either in the `differential_datalog`\ncrate (for Rust types like `uNN`, `iNN`, `String`, `bool`, ...) or\nin the `types` crate.\n\nWe more remaining contents of the `value` crate to the top-level\ngenerated crate and get rid of `value` altogether.", "committedDate": "2020-10-27T21:59:42Z", "type": "commit"}, {"oid": "68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "url": "https://github.com/vmware/differential-datalog/commit/68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "message": "Eliminate the `Value` wrapper around DDlog values.\n\nThis commit eliminates the `Value` wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\n`DDValConvert` trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n`__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval`.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate `value` crate that had to be imported by\nclients.\n\nAn alternative to the wrapper is to implement `trait DDlogConvert` for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, `differential_datalog`) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since `DDlogConvert` can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\n`differential_datalog`.  On the other hand, we also cannot implement it\nin the `types` crate, since tuples are a builtin Rust type.\n\nThe workaround is to replace tuples with custom tuple structs\n`tuple2<T1,T2>`, `tuple3<T1,T2,T3>`.  We already declare those in the\n`types` crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to `tupleN`\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\n\nWith this change, we can eliminate the `Value` wrapper and place all\n`DDlogConvert` implementations either in the `differential_datalog`\ncrate (for Rust types like `uNN`, `iNN`, `String`, `bool`, ...) or\nin the `types` crate.\n\nWe more remaining contents of the `value` crate to the top-level\ngenerated crate and get rid of `value` altogether.", "committedDate": "2020-10-27T21:59:42Z", "type": "forcePushed"}]}