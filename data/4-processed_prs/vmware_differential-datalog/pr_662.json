{"pr_number": 662, "pr_title": "ddlog.h: Delta API.", "pr_createdAt": "2020-05-12T21:42:37Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/662", "timeline": [{"oid": "eb95f18e97f237bf13bacb35069414167213a139", "url": "https://github.com/vmware/differential-datalog/commit/eb95f18e97f237bf13bacb35069414167213a139", "message": "wip", "committedDate": "2020-05-09T02:10:32Z", "type": "commit"}, {"oid": "32f7d9a7bd8d7110b4e1bfcf8af8a672316b10f9", "url": "https://github.com/vmware/differential-datalog/commit/32f7d9a7bd8d7110b4e1bfcf8af8a672316b10f9", "message": "fixup", "committedDate": "2020-05-09T02:11:20Z", "type": "commit"}, {"oid": "9e1ebab006e4ac7193a5e0f64af980d3b784f9fa", "url": "https://github.com/vmware/differential-datalog/commit/9e1ebab006e4ac7193a5e0f64af980d3b784f9fa", "message": "wip", "committedDate": "2020-05-09T02:12:47Z", "type": "commit"}, {"oid": "a8dc7fbec5e277093b332ae4486fbe1a63b13495", "url": "https://github.com/vmware/differential-datalog/commit/a8dc7fbec5e277093b332ae4486fbe1a63b13495", "message": "OVSDB: Support for output-only tables.\n\nThe OVSDB adapter normally works by comparing the desired output state\ncomputed by DDlog against realized state in the database and computing\nthe delta between the two.  This is only necessary if the table can\nbe modified outside of northd (e.g., by the user or a hypervisor).  When\nnorthd is the only writer, it is sufficient to just send desired state\nchanges derectly to OVSDB.  This eliminates expensive delta computation.\n\nThis commit implements a new ovsdb2ddlog flag `--output-only TABLE` that\ndisables delta table generation for `TABLE` and labels the output\nrelation computed by DDlog (`Out_TABLE`) as `output`, so that changes to\nit can be forwarded directly to OVSDB.", "committedDate": "2020-05-10T18:16:22Z", "type": "commit"}, {"oid": "888c4c5a5d676b0f2ed3c2e1f8be9870b7338a1e", "url": "https://github.com/vmware/differential-datalog/commit/888c4c5a5d676b0f2ed3c2e1f8be9870b7338a1e", "message": "ddlog.h: Delta API.\n\nThis commit improves the C API for processing output table updates\nproduced by DDlog.  A successful transaction generates a set of inserts\nand deletes to multiple output tables.  We refer to this set of changes\nas \"delta\".  In the Rust API it is represented by the `DeltaMap` data\ntype.\n\nA delta is generated by the `ddlog_transaction_commit_dump_changes()`\nmethod.  In the Rust API it returns an instance of `DeltaMap`, allowing\nthe caller to manipulate the delta in a number of ways:\n\n- Return it directly to the user.\n- Merge it with previous deltas to maintain a snapshot of output tables.\n- Merge deltas over several transactions and clean them up once the\n  whole bunch has been processed.\n- Some combination of the above.\n\nThe C API did not have the same flexibility, as instead of returning the\ndelta object it simply invoked a callback for each record in the output.\n\nThis commit exports deltas to C as a new type of opaque handle with the\nfollowing API:\n\n```\n/* Creates an empty delta.  */\nextern ddlog_delta* ddlog_new_delta(void);\n\n/* Retrieve changes to a specific table.  */\nextern ddlog_delta* ddlog_delta_get_table(const ddlog_delta *delta, table_id table);\n\n/* Enumerate changes in this delta. */\nextern void ddlog_delta_enumerate(\n    const ddlog_delta *delta,\n    void (*cb)(uintptr_t arg,\n               table_id table,\n               const ddlog_record *rec,\n               bool polarity),\n    uintptr_t cb_arg);\n\n/* Remove changes to the specified table from `delta` and return them as a separate\n * delta. */\nextern void ddlog_delta_clear_table(ddlog_delta *delta, table_id table);\n\n/* Remove changes to the specified table from `delta`. */\nextern ddlog_delta* ddlog_delta_remove_table(ddlog_delta *delta, table_id table);\n\n/* Clear changes to all tables.  Leaves `delta` empty. */\nextern void ddlog_delta_clear(ddlog_delta *delta);\n\n/* Adds the contents of `new_delta` to `delta`. */\nextern void ddlog_delta_union(ddlog_delta *delta, const ddlog_delta *new_delta);\n\n/* Deallocate delta.  Invalidates the pointer. */\nextern void ddlog_free_delta(ddlog_delta *delta);\n\n```", "committedDate": "2020-05-12T17:35:05Z", "type": "commit"}, {"oid": "bf142c689ec5b688b73325024e2597e651163550", "url": "https://github.com/vmware/differential-datalog/commit/bf142c689ec5b688b73325024e2597e651163550", "message": "Blacklist new failing souffle tests.", "committedDate": "2020-05-12T17:38:28Z", "type": "commit"}, {"oid": "ce3946a0bf12e4fa0ff980279080ab44a12e17e7", "url": "https://github.com/vmware/differential-datalog/commit/ce3946a0bf12e4fa0ff980279080ab44a12e17e7", "message": "Update OVN test to ddlog_ci2 branch.\n\nIn addition, disable diff for the scale test, since reference output is\ngetting too large due to the major mismatch between the input log\nproduced by an old scale test and DDlog's output.", "committedDate": "2020-05-12T21:35:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMjY0OA==", "url": "https://github.com/vmware/differential-datalog/pull/662#discussion_r424112648", "bodyText": "you swapped this comment with the next.", "author": "mbudiu-vmw", "createdAt": "2020-05-13T00:47:48Z", "path": "rust/template/ddlog.h", "diffHunk": "@@ -495,6 +492,149 @@ extern int ddlog_dump_table(ddlog_prog prog, table_id table,\n                             bool (*cb)(uintptr_t arg, const ddlog_record *rec),\n                             uintptr_t cb_arg);\n \n+/**********************************************************************\n+ * Delta API.\n+ **********************************************************************/\n+\n+/*\n+ * Creates an empty delta.\n+ */\n+extern ddlog_delta* ddlog_new_delta(void);\n+\n+/*\n+ * Retrieve changes to a specific table.\n+ *\n+ * Returns a delta that only contains changes to one table.\n+ */\n+extern ddlog_delta* ddlog_delta_get_table(const ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Enumerate changes in this delta.\n+ *\n+ * Invokes `cb` for each record in `delta`.\n+ *\n+ * `cb_arg` is an opaque handle passed to each `cb invocation`.\n+ */\n+extern void ddlog_delta_enumerate(\n+    const ddlog_delta *delta,\n+    void (*cb)(uintptr_t arg,\n+               table_id table,\n+               const ddlog_record *rec,\n+               bool polarity),\n+    uintptr_t cb_arg);\n+\n+/*", "originalCommit": "ce3946a0bf12e4fa0ff980279080ab44a12e17e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMzExOQ==", "url": "https://github.com/vmware/differential-datalog/pull/662#discussion_r424113119", "bodyText": "just wait until we add multisets", "author": "mbudiu-vmw", "createdAt": "2020-05-13T00:49:42Z", "path": "rust/template/ddlog.h", "diffHunk": "@@ -495,6 +492,149 @@ extern int ddlog_dump_table(ddlog_prog prog, table_id table,\n                             bool (*cb)(uintptr_t arg, const ddlog_record *rec),\n                             uintptr_t cb_arg);\n \n+/**********************************************************************\n+ * Delta API.\n+ **********************************************************************/\n+\n+/*\n+ * Creates an empty delta.\n+ */\n+extern ddlog_delta* ddlog_new_delta(void);\n+\n+/*\n+ * Retrieve changes to a specific table.\n+ *\n+ * Returns a delta that only contains changes to one table.\n+ */\n+extern ddlog_delta* ddlog_delta_get_table(const ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Enumerate changes in this delta.\n+ *\n+ * Invokes `cb` for each record in `delta`.\n+ *\n+ * `cb_arg` is an opaque handle passed to each `cb invocation`.\n+ */\n+extern void ddlog_delta_enumerate(\n+    const ddlog_delta *delta,\n+    void (*cb)(uintptr_t arg,\n+               table_id table,\n+               const ddlog_record *rec,\n+               bool polarity),\n+    uintptr_t cb_arg);\n+\n+/*\n+ * Remove changes to the specified table from `delta` and return them as a separate\n+ * delta.  The caller is responsible for deallocating the new delta.\n+ */\n+extern void ddlog_delta_clear_table(ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Remove changes to the specified table from `delta`.\n+ */\n+extern ddlog_delta* ddlog_delta_remove_table(ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Clear changes to all tables.  Leaves `delta` empty.\n+ */\n+extern void ddlog_delta_clear(ddlog_delta *delta);\n+\n+/*\n+ * Adds the contents of `new_delta` to `delta`.\n+ *\n+ * Example 1: `delta` does not contain record `r`; `new_delta` contains record\n+ * `r` with polarity `p`.  `r` gets added to `delta` with polarity `p`.\n+ *\n+ * Example 2: `delta` contains record `r` with polarity `p`; `new_delta` does\n+ * not contain `r`.  The state of `r` in `delta` does not change.\n+ *\n+ * Example 3: `delta` contains record `r` with polarity `p`; `new_delta`\n+ * contains the same record with the opposite polarity. The two changes\n+ * cancel out, and the record gets removed from `delta`.\n+ *\n+ * Example 4: `delta` and `new_delta` contain `r` with the same polarities.", "originalCommit": "ce3946a0bf12e4fa0ff980279080ab44a12e17e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d31e64aca71f44e22168c8cf3b250d59d594496c", "url": "https://github.com/vmware/differential-datalog/commit/d31e64aca71f44e22168c8cf3b250d59d594496c", "message": "Review comments.", "committedDate": "2020-05-13T06:54:06Z", "type": "commit"}]}