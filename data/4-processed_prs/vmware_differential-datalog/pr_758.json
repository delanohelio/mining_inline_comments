{"pr_number": 758, "pr_title": "Allow a semicolon after a sequence of expressions.", "pr_createdAt": "2020-09-01T07:28:23Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/758", "timeline": [{"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "url": "https://github.com/vmware/differential-datalog/commit/0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "message": "Allow a semicolon after a sequence of expressions.\n\nWe used to disallow a semicolon after a sequence of expressions, e.g.,\n`{ e1; e2; }` was illegal and had to be written as either\n`{ e1; e2 }` (to return the value of `e2`) or `{ e1; e2; ()}`\nto discard the result of `e2` and return an empty tuple.\n\nThis annoyed most users, including yours truly.  So we now allow\n`{ e1; e2; }`, which gets desugared into `{ e1; e2; () }`.\n\nAlong the way, I fixed a bug in type inference when the type of\n`continue`, `break`, or `return` is not constrained by the environment.\nInstead of crashing, we now assign unit type to them.", "committedDate": "2020-09-01T16:02:02Z", "type": "commit"}, {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "url": "https://github.com/vmware/differential-datalog/commit/0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "message": "Allow a semicolon after a sequence of expressions.\n\nWe used to disallow a semicolon after a sequence of expressions, e.g.,\n`{ e1; e2; }` was illegal and had to be written as either\n`{ e1; e2 }` (to return the value of `e2`) or `{ e1; e2; ()}`\nto discard the result of `e2` and return an empty tuple.\n\nThis annoyed most users, including yours truly.  So we now allow\n`{ e1; e2; }`, which gets desugared into `{ e1; e2; () }`.\n\nAlong the way, I fixed a bug in type inference when the type of\n`continue`, `break`, or `return` is not constrained by the environment.\nInstead of crashing, we now assign unit type to them.", "committedDate": "2020-09-01T16:02:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NDU3Mg==", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481374572", "bodyText": "I am not sure this is a good idea. I think it will trip a lot of people who come from a C-like language.\nI think it should be a warning.", "author": "mbudiu-vmw", "createdAt": "2020-09-01T19:16:05Z", "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -734,7 +734,15 @@ function addr_port(ip: ip_addr_t, proto: string, preferred_port: bit<16>): strin\n \n The result computed by a function is the value of the last expression evaluated\n or the value produced by the first `return` statement encountered when\n-evaluating the function.  If the `else` is missing the value `()` (empty tuple)\n+evaluating the function.  A semicolon at the end of a sequence of expressions", "originalCommit": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MzU2Nw==", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481443567", "bodyText": "There is no room for confusion here.  If the expression is expected to return a type that is not an empty tuple, you will get a type error.  If it returns (), then discarding it is a no-op.", "author": "ryzhyk", "createdAt": "2020-09-01T21:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NDU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTg0OA==", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481445848", "bodyText": "the type error may be confusing, especially if it involves some form of unification.", "author": "mbudiu-vmw", "createdAt": "2020-09-01T21:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NDU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NTk1OA==", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481375958", "bodyText": "the sql compiler may need to change because of this too.", "author": "mbudiu-vmw", "createdAt": "2020-09-01T19:18:50Z", "path": "src/Language/DifferentialDatalog/Syntax.hs", "diffHunk": "@@ -799,7 +799,7 @@ instance PP e => PP (ExprNode e) where\n                                $$\n                                \"}\"\n     pp (EVarDecl _ v)        = \"var\" <+> pp v\n-    pp (ESeq _ l r)          = parens $ (pp l <> semi) $$ pp r\n+    pp (ESeq _ l r)          = braces $ (pp l <> semi) $$ pp r", "originalCommit": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}