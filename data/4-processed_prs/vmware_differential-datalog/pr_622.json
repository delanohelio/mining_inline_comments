{"pr_number": 622, "pr_title": "Support for time datatype", "pr_createdAt": "2020-04-14T01:41:07Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/622", "timeline": [{"oid": "f32732090352b221774e5f817487e0991bf25725", "url": "https://github.com/vmware/differential-datalog/commit/f32732090352b221774e5f817487e0991bf25725", "message": "Support for time datatype", "committedDate": "2020-04-14T01:36:15Z", "type": "commit"}, {"oid": "a6cab037d89328c1d12820c57244178821d1d4f5", "url": "https://github.com/vmware/differential-datalog/commit/a6cab037d89328c1d12820c57244178821d1d4f5", "message": "rust lint", "committedDate": "2020-04-14T01:38:43Z", "type": "commit"}, {"oid": "6ffd35bf79138cad42df239c720f40e1665b7a15", "url": "https://github.com/vmware/differential-datalog/commit/6ffd35bf79138cad42df239c720f40e1665b7a15", "message": "rust lint", "committedDate": "2020-04-14T01:39:18Z", "type": "commit"}, {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "url": "https://github.com/vmware/differential-datalog/commit/ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "message": "rust lint", "committedDate": "2020-04-14T01:39:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNzI5NA==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407817294", "bodyText": "Can we have some comments (presumably copied from the time crate)?", "author": "ryzhyk", "createdAt": "2020-04-14T01:46:38Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNzg2OQ==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407817869", "bodyText": "I'd prefer to call it Time with a capital T.", "author": "ryzhyk", "createdAt": "2020-04-14T01:48:45Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxOTQ0NQ==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407819445", "bodyText": "I'd rather keep FLATBUF on by default, so we keep testing it on as many examples as possible.  I just found a bug in flatbufs in a completely unrelated test.", "author": "ryzhyk", "createdAt": "2020-04-14T01:54:23Z", "path": "test/datalog_tests/run-test.sh", "diffHunk": "@@ -2,8 +2,10 @@\n # Run one datalog test\n \n PROFILE=0\n+# If 1 use flatbuf\n+FLATBUF=0", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407820590", "bodyText": "If you want to test your from/to_flatbuf implementation, you need to feed and dump some records through CLI.", "author": "ryzhyk", "createdAt": "2020-04-14T01:58:34Z", "path": "test/datalog_tests/time_test.dat", "diffHunk": "@@ -0,0 +1,4 @@\n+start;", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzODUyNQ==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408338525", "bodyText": "Flatbuf is not supported. It's not clear what needs to be changed to support extern types in flatbuf.", "author": "mbudiu-vmw", "createdAt": "2020-04-14T18:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTI3OQ==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408339279", "bodyText": "CLI does not use flatbuf.", "author": "ryzhyk", "createdAt": "2020-04-14T18:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMzI2Ng==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407823266", "bodyText": "Can you add examples of supported input formats?", "author": "ryzhyk", "createdAt": "2020-04-14T02:08:32Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<time, string>\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function midnight(): time\n+extern function hour(t: time): bit<8>\n+extern function minute(t: time): bit<8>\n+extern function second(t: time): bit<8>\n+extern function millisecond(t: time): bit<16>\n+extern function microsecond(t: time): bit<32>\n+extern function nanosecond(t: time): bit<32>\n+extern function time2string(t: time): string\n+extern function parse(s: string, format: string): Result<time, string>", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNTI4MA==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407825280", "bodyText": "Can we also have a version of 2string that takes format string?", "author": "ryzhyk", "createdAt": "2020-04-14T02:15:37Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<time, string>\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function midnight(): time\n+extern function hour(t: time): bit<8>\n+extern function minute(t: time): bit<8>\n+extern function second(t: time): bit<8>\n+extern function millisecond(t: time): bit<16>\n+extern function microsecond(t: time): bit<32>\n+extern function nanosecond(t: time): bit<32>\n+extern function time2string(t: time): string", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjE4OQ==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407826189", "bodyText": "I would prefix all these functions with time_. Alternatively, users can import this module using qualified name import time as time, but then what happens when you start adding support for dates and date-times?", "author": "ryzhyk", "createdAt": "2020-04-14T02:19:03Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>", "originalCommit": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODQzNw==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408518437", "bodyText": "I've done everything but add this prefix.", "author": "mbudiu-vmw", "createdAt": "2020-04-15T00:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjE4OQ=="}], "type": "inlineReview"}, {"oid": "bdb5a35528702ca8e2bef782e6d8521fbc7b60c3", "url": "https://github.com/vmware/differential-datalog/commit/bdb5a35528702ca8e2bef782e6d8521fbc7b60c3", "message": "Date and DateTime support", "committedDate": "2020-04-15T00:10:39Z", "type": "commit"}, {"oid": "0d298157a83cc7defb0882dcbdaa70564e79d163", "url": "https://github.com/vmware/differential-datalog/commit/0d298157a83cc7defb0882dcbdaa70564e79d163", "message": "rust lint", "committedDate": "2020-04-15T00:14:48Z", "type": "commit"}, {"oid": "dea84468ac71ee925a5458615f752ebe1bec2256", "url": "https://github.com/vmware/differential-datalog/commit/dea84468ac71ee925a5458615f752ebe1bec2256", "message": "rust lint", "committedDate": "2020-04-15T00:16:49Z", "type": "commit"}, {"oid": "a80d18128edc79f978e19da1d0be39ca7d06a16a", "url": "https://github.com/vmware/differential-datalog/commit/a80d18128edc79f978e19da1d0be39ca7d06a16a", "message": "Added time tests to CI", "committedDate": "2020-04-15T00:50:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3ODMzNg==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r409178336", "bodyText": "should this be time_format?", "author": "ryzhyk", "createdAt": "2020-04-15T22:47:27Z", "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,182 @@\n+/// Library supporting dates, times, and date-times\n+/// This parallels closely the Rust time crate\n+/// https://time-rs.github.io/time/time/struct.Time.html\n+\n+///////////////////////////////////////////////////////////////////////////////////////////\n+/// The clock time within a given date. Nanosecond precision.\n+/// All minutes are assumed to have exactly 60 seconds; no attempt is\n+/// made to handle leap seconds (either positive or negative).\n+/// When comparing two Times, they are assumed to be in the same\n+/// calendar date.\n+\n+extern type Time\n+\n+/// Create a Time that is exactly midnight.\n+extern function midnight(): Time\n+\n+/// Attempt to create a Time from the hour, minute, and second.\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and millisecond.\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and microsecond.\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and nanosecond.\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>\n+\n+/// Get the clock hour.  The returned value will always be in the range 0..24.\n+extern function hour(t: Time): bit<8>\n+\n+/// Get the minute within the hour.  The returned value will always be in the range 0..60.\n+extern function minute(t: Time): bit<8>\n+\n+/// Get the second within the minute.  The returned value will always be in the range 0..60.\n+extern function second(t: Time): bit<8>\n+\n+/// Get the milliseconds within the second.  The returned value will always be in the range 0..1000.\n+extern function millisecond(t: Time): bit<16>\n+\n+/// Get the microseconds within the second.  The returned value will always be in the range 0..1000000.\n+extern function microsecond(t: Time): bit<32>\n+\n+/// Get the nanoseconds within the second.  The returned value will always be in the range 0..1000000000.\n+extern function nanosecond(t: Time): bit<32>\n+\n+// Here is a list of the format specifiers:\n+// Spec\tReplaced by                                                             Example\n+// %a\tAbbreviated weekday name                                                Thu\n+// %A\tFull weekday name\t                                                Thursday\n+// %b\tAbbreviated month name\t                                                Aug\n+// %B\tFull month name\t                                                        August\n+// %c\tDate and time representation, equivalent to %a %b %-d %-H:%M:%S %-Y\tThu Aug 23 14:55:02 2001\n+// %C\tYear divided by 100 and truncated to integer (00-99)\t                20\n+// %d\tDay of the month, zero-padded (01-31)\t                                23\n+// %D\tShort MM/DD/YY date, equivalent to %-m/%d/%y\t                        8/23/01\n+// %F\tShort YYYY-MM-DD date, equivalent to %-Y-%m-%d\t                        2001-08-23\n+// %g\tWeek-based year, last two digits (00-99)\t                        01\n+// %G\tWeek-based year\t                                                        2001\n+// %H\tHour in 24h format (00-23)\t                                        14\n+// %I\tHour in 12h format (01-12)\t                                        02\n+// %j\tDay of the year (001-366)\t                                        235\n+// %m\tMonth as a decimal number (01-12)\t                                08\n+// %M\tMinute (00-59)\t                                                        55\n+// %N\tSubsecond nanoseconds. Always 9 digits\t                                012345678\n+// %p\tam or pm designation\t                                                pm\n+// %P\tAM or PM designation\t                                                PM\n+// %r\t12-hour clock time, equivalent to %-I:%M:%S %p\t                        2:55:02 pm\n+// %R\t24-hour HH:MM time, equivalent to %-H:%M\t                        14:55\n+// %S\tSecond (00-59)\t                                                        02\n+// %T\t24-hour clock time with seconds, equivalent to %-H:%M:%S\t        14:55:02\n+// %u\tISO 8601 weekday as number with Monday as 1 (1-7)\t                4\n+// %U\tWeek number with the first Sunday as the start of week one (00-53)\t33\n+// %V\tISO 8601 week number (01-53)\t                                        34\n+// %w\tWeekday as a decimal number with Sunday as 0 (0-6)\t                4\n+// %W\tWeek number with the first Monday as the start of week one (00-53)\t34\n+// %y\tYear, last two digits (00-99)\t                                        01\n+// %Y\tFull year, including + if >= 10,000\t                                2001\n+// %z\tISO 8601 offset from UTC in timezone (+HHMM)\t                        +0100\n+// %%\tLiteral %\t                                                        %\n+\n+// All specifiers that are strictly numerical have modifiers for formatting.\n+// Adding a modifier to a non-supporting specifier is a no-op.\n+// Modifier\t     Behavior\t         Example\n+// - (dash)\t     No padding\t         %-d => 5\n+// _ (underscore)    Pad with spaces\t %_d =>  5\n+// 0\t             Pad with zeros\t %0d => 05\n+\n+/// Convert the time to a string using a default format.\n+extern function time2string(t: Time): string\n+\n+/// Convert the string to a time using a default format.  Inverse of time2string.\n+extern function string2time(s: string): Result<Time, string>\n+\n+/// Format the Time using the provided string.\n+extern function format(t: Time, format: string): string", "originalCommit": "a80d18128edc79f978e19da1d0be39ca7d06a16a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTYwMg==", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r409189602", "bodyText": "why did you have to change this. The new method will produce output that does not look good, e.g., Instant { tv_sec: 5122222, tv_nsec: 893024142 }", "author": "ryzhyk", "createdAt": "2020-04-15T23:19:59Z", "path": "rust/template/src/main.rs", "diffHunk": "@@ -95,7 +94,7 @@ fn handle_cmd(\n         Command::Comment => Ok(()),\n         Command::Rollback => hddlog.transaction_rollback(),\n         Command::Timestamp => {\n-            println!(\"Timestamp: {}\", precise_time_ns());\n+            println!(\"Timestamp: {:#?}\", std::time::Instant::now());", "originalCommit": "a80d18128edc79f978e19da1d0be39ca7d06a16a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d21bcadeb865736fab0b629c0ce8b9f2fb97d97e", "url": "https://github.com/vmware/differential-datalog/commit/d21bcadeb865736fab0b629c0ce8b9f2fb97d97e", "message": "Added missing format functions", "committedDate": "2020-04-15T23:47:53Z", "type": "commit"}, {"oid": "9c21eb8282a80e1b86b6c5964a1407201c01a140", "url": "https://github.com/vmware/differential-datalog/commit/9c21eb8282a80e1b86b6c5964a1407201c01a140", "message": "Rust lint", "committedDate": "2020-04-15T23:48:39Z", "type": "commit"}, {"oid": "b75913a62c0e46b2c1000bba3395a68e315c2629", "url": "https://github.com/vmware/differential-datalog/commit/b75913a62c0e46b2c1000bba3395a68e315c2629", "message": "main.rs: Print timestamp since the start of execution.\n\nThe old method of printing timestamps is deprecated in the new `time`\ncrate.  The new approach is to compute duration in ns since the start\nof the program, which is even more helpful.", "committedDate": "2020-04-16T00:29:47Z", "type": "commit"}, {"oid": "ce7bf6089c706da0a407957fd2fb11be161ff7f2", "url": "https://github.com/vmware/differential-datalog/commit/ce7bf6089c706da0a407957fd2fb11be161ff7f2", "message": "Added unix timestamp library function", "committedDate": "2020-04-16T00:46:04Z", "type": "commit"}]}