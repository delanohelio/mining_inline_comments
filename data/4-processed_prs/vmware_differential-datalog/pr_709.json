{"pr_number": 709, "pr_title": "Infinite recursion in type inference.", "pr_createdAt": "2020-07-20T15:30:36Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/709", "timeline": [{"oid": "7f264b544b02ca65f4297e7e2ab2b790f70d166b", "url": "https://github.com/vmware/differential-datalog/commit/7f264b544b02ca65f4297e7e2ab2b790f70d166b", "message": "Infinite recursion in type inference.\n\nThis addresses issue #649 that existed in the earlier version of the\ntype inference engine and was successfully replicated in the new one.\n\nWhen performing type inference on recursive types, the algorithm tried\nto expand type aliases proactively, leading to infinite recursion.  The\nsolution is to do it on-demand instead.\n\nOnce the problem was fixed, I ran into another issue--Rust does not Rust\nrecursive type aliases, e.g., this is ok:\n\n```\ntypedef TSeq = TSeq1{x: (string, Ref<TSeq>)}\n             | TSeqNone\n```\n\nbut not this:\n\n```\ntypedef TSeq = Option<(string, Ref<TSeq>)>\n```\n\n(the difference is that the latter is a type alias).\n\nSo I added a new check to disallow such definitions.", "committedDate": "2020-07-20T07:56:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMTE2Ng==", "url": "https://github.com/vmware/differential-datalog/pull/709#discussion_r457531166", "bodyText": "We still have builtin2string?", "author": "mbudiu-vmw", "createdAt": "2020-07-20T16:15:13Z", "path": "test/datalog_tests/lib_test.debug.ast.expected", "diffHunk": "@@ -1392,21 +1392,21 @@ internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}:\n internment_test::OInternedString[(internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event((32'd279, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", __internment_test_allinternedstring0, (internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)).\n internment_test::OInternedString[(internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s1: internment::Intern<string>)}: internment_test::AllInternedString))], internment_test::AllInternedString[(__internment_test_allinternedstring1@ (internment_test::AllInternedString{.ix=(s2: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event_join((32'd280, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __internment_test_allinternedstring0, __internment_test_allinternedstring1, (internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)).\n internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=(\"x=\" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)] :- internment_test::IStruct[(__internment_test_istruct0@ ((&(i: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd281, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", __internment_test_istruct0, (internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=(\"x=\" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd282, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f2=\" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(t@ (internment_test::Tag2{.f2=(f2: bit<32>), .f3=(_: string)}: internment_test::IUnion))): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd285, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f2=\" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f3=\" ++ f3)}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(t@ ((&(internment_test::Tag2{.f2=(_: bit<32>), .f3=(f3: string)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>)), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd286, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f3=\" ++ f3)}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd282, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)).", "originalCommit": "7f264b544b02ca65f4297e7e2ab2b790f70d166b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}