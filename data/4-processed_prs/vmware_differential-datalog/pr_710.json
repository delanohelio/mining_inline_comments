{"pr_number": 710, "pr_title": "?-operator", "pr_createdAt": "2020-07-22T00:30:57Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/710", "timeline": [{"oid": "2a6f6f453de18a9be2554616fa8e4e2e7c833310", "url": "https://github.com/vmware/differential-datalog/commit/2a6f6f453de18a9be2554616fa8e4e2e7c833310", "message": "?-operator.\n\nSee RFC #707.\n\nWe introduce Rust-style error handling operator `?`.\n\nThe `?` operator can placed after an expression that returns `Option<>` or\n`Result<>` inside a function scope.  Similar to `unwrap_` functions, it\nextracts the inner value on success.  On error, it returns the error value\n(or `None`) from the function, e.g.:\n\n```\n/* Lookup item in the inventory and return its price in cents. */\nfunction get_price_in_cents_(inventory: Map<string, string>, item: string): Option<u64> {\n    Some{ inventory.get(item)?.parse_dec_u64()? * 100 }\n}\n```\n\nis equivalent to\n\n```\nfunction get_price_in_cents(inventory: Map<string, string>, item: string): Option<u64> {\n    match (inventory.get(item)) {\n        None -> None,\n        Some{price} -> match (parse_dec_u64(price)) {\n                           None    -> None,\n                           Some{p} -> Some{100 * p}\n                       }\n    }\n}\n\n```\n\nThe `?` operator can only be used inside a function whose return type is\n`Option` or `Result`.  The following table summarizes the behvaior of `?`\nfor various combinations of expression type and function return type.\n\n| Function return type |     Expression type    | Expression value |  ? behaves as  |\n|:--------------------:|:----------------------:|------------------|:--------------:|\n| Option<T1>           | Option<T2>             | None             |   return None  |\n| Option<T1>           | Option<T2>             | Some{x}          |        x       |\n| Option<T1>           | Result<V,E>            | Err{e}           |   return None  |\n| Option<T1>           | Result<V,E>            | Ok{v}            |        v       |\n| Result<X,E>          | Result<Y,E>            | Err{e}           | return Err{e}  |\n| Result<X,E>          | Result<Y,E>            | Ok{v}            |        v       |\n| Result<V,E>          | Option<T>              |                  |     invalid    |\n| Result<X,E1>         | Result<Y,E2>, E2 != E1 |                  |     invalid    |", "committedDate": "2020-07-21T23:03:17Z", "type": "commit"}, {"oid": "f6f1e510076cc455486cbe3013c8c75923286f9f", "url": "https://github.com/vmware/differential-datalog/commit/f6f1e510076cc455486cbe3013c8c75923286f9f", "message": "Disable another souffle test.", "committedDate": "2020-07-21T23:16:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzOTYyNw==", "url": "https://github.com/vmware/differential-datalog/pull/710#discussion_r458839627", "bodyText": "Is there any danger of a name clash?", "author": "mbudiu-vmw", "createdAt": "2020-07-22T14:34:33Z", "path": "src/Language/DifferentialDatalog/TypeInference.hs", "diffHunk": "@@ -444,6 +444,24 @@ inferTypes d es = do\n                  EBreak{}    -> annotated\n                  EReturn{}   -> annotated\n                  ERef{}      -> annotated\n+                 ETry{..} | isOption ?d inner_type && isOption ?d funcType\n+                             -> E $ EMatch (pos e) inner_expr\n+                                    [(eStruct nONE_CONSTRUCTOR [] inner_type, eReturn (eStruct nONE_CONSTRUCTOR [] funcType) t),\n+                                     (eStruct sOME_CONSTRUCTOR [(\"x\", eVarDecl \"__x\" t)] inner_type, eVar \"__x\")]", "originalCommit": "f6f1e510076cc455486cbe3013c8c75923286f9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjYzMg==", "url": "https://github.com/vmware/differential-datalog/pull/710#discussion_r458942632", "bodyText": "There is, hence the undescores.", "author": "ryzhyk", "createdAt": "2020-07-22T16:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzOTYyNw=="}], "type": "inlineReview"}]}