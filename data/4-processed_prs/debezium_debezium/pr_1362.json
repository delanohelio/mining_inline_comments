{"pr_number": 1362, "pr_title": "DBZ-1807 Converters in Debezium engine", "pr_createdAt": "2020-03-25T07:23:58Z", "pr_url": "https://github.com/debezium/debezium/pull/1362", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MDIyNA==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r397840224", "bodyText": "What's the need for the Change parameter? Couldn't it be DebeziumEngine<String>, while still exposing Change<String> to consumers?", "author": "gunnarmorling", "createdAt": "2020-03-25T13:11:07Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.fest.assertions.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.fest.assertions.Assertions;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.CompletionCallback;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Change;\n+import io.debezium.engine.format.Json;\n+import io.debezium.util.LoggingContext;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration tests for Debezium Engine API\n+ *\n+ * @author Jiri Pechanec\n+ */\n+public class DebeziumEngineIT {\n+\n+    protected static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"connector-offsets.txt\").toAbsolutePath();\n+\n+    @Before\n+    public void before() throws SQLException {\n+        OFFSET_STORE_PATH.getParent().toFile().mkdirs();\n+        OFFSET_STORE_PATH.toFile().delete();\n+        TestHelper.dropAllSchemas();\n+        TestHelper.execute(\n+                \"CREATE SCHEMA engine;\",\n+                \"CREATE TABLE engine.test (id INT PRIMARY KEY, val VARCHAR(32));\",\n+                \"INSERT INTO engine.test VALUES(1, 'value1');\");\n+    }\n+\n+    @Test\n+    public void shouldSerializeToJson() throws Exception {\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"0\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        CountDownLatch allLatch = new CountDownLatch(1);\n+\n+        final ExecutorService executor = Executors.newFixedThreadPool(1);\n+        try (final DebeziumEngine<Change<String>> engine = DebeziumEngine.create(Json.class).using(props)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5ODM2MQ==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r397898361", "bodyText": "@gunnarmorling The Change is needed so we get both key and value - it is container for them.", "author": "jpechane", "createdAt": "2020-03-25T14:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMjQ1MQ==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r397912451", "bodyText": "Yes, I'm not saying it should go away, but is it needed as a type parameter on DebeziumEngine? Couldn't it be DebeziumEngine<String> here, and then expecting Consumer<Change<String>>?", "author": "gunnarmorling", "createdAt": "2020-03-25T14:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDc3Nw==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r397914777", "bodyText": "The problem is with SourceRecord, it is on the same level as Change and I don't think we can express in generics to have both the content of the Change container and SourceRecord without Change.", "author": "jpechane", "createdAt": "2020-03-25T14:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MDIyNA=="}], "type": "inlineReview"}, {"oid": "15331e9d66556b05dba51870142908abb0b66cc4", "url": "https://github.com/debezium/debezium/commit/15331e9d66556b05dba51870142908abb0b66cc4", "message": "DBZ-1807 Support for JSON Converter", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "4307575a8a59c3923060f2ebfcbc0da143e2c3bf", "url": "https://github.com/debezium/debezium/commit/4307575a8a59c3923060f2ebfcbc0da143e2c3bf", "message": "DBZ-1807 Support for Avro converters", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "url": "https://github.com/debezium/debezium/commit/bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "message": "DBZ-1807 Support for CloudEvents converter", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "url": "https://github.com/debezium/debezium/commit/bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "message": "DBZ-1807 Support for CloudEvents converter", "committedDate": "2020-04-08T12:41:45Z", "type": "forcePushed"}, {"oid": "26b0ee5936e87a9161ccab95aa2e02a993075895", "url": "https://github.com/debezium/debezium/commit/26b0ee5936e87a9161ccab95aa2e02a993075895", "message": "DBZ-1807 Misc. adjustments;\n\n* Adding @TestFor annotations\n* Change -> ChangeEvent", "committedDate": "2020-04-15T14:27:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTc4Mg==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r408865782", "bodyText": "I'll push a commit to rename it to ChangeEvent; a bit more meaningful and in line with the term we use in blogs, presentations etc.\nSlightly more problematic: it assumes that key and value are of the same type, I don't think that generally holds. I think we need to have two type parameters here, for key and value. Note the bootstrap method for getting an engine could be overloaded, i.e. there would be the one with one parameter, so to use the same converter for both key and value, but there'd be another one, allowing for two separate converters.", "author": "gunnarmorling", "createdAt": "2020-04-15T14:01:32Z", "path": "debezium-api/src/main/java/io/debezium/engine/format/Change.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.engine.format;\n+\n+public class Change<T> {", "originalCommit": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODkzOQ==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r408878939", "bodyText": "What is this needed for? Can we get rid of it by splitting this up into a public interface and internal implementation?", "author": "gunnarmorling", "createdAt": "2020-04-15T14:19:28Z", "path": "debezium-api/src/main/java/io/debezium/engine/format/Change.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.engine.format;\n+\n+public class Change<T> {\n+    public final T key;\n+    public final T value;\n+    private final Object backReference;\n+\n+    public Change(T key, T value, Object backReference) {\n+        this.key = key;\n+        this.value = value;\n+        this.backReference = backReference;\n+    }\n+\n+    public Object reference() {", "originalCommit": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}