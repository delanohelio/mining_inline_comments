{"pr_number": 1387, "pr_title": "DBZ-1930 Support for SMTs in embedded engine", "pr_createdAt": "2020-04-02T16:45:30Z", "pr_url": "https://github.com/debezium/debezium/pull/1387", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ab960020de6197736e3d559e8feac8dcab12b8f9", "url": "https://github.com/debezium/debezium/commit/ab960020de6197736e3d559e8feac8dcab12b8f9", "message": "DBZ-1930 Support for SMTs in embedded engine", "committedDate": "2020-04-02T16:50:11Z", "type": "commit"}, {"oid": "ab960020de6197736e3d559e8feac8dcab12b8f9", "url": "https://github.com/debezium/debezium/commit/ab960020de6197736e3d559e8feac8dcab12b8f9", "message": "DBZ-1930 Support for SMTs in embedded engine", "committedDate": "2020-04-02T16:50:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTkwMw==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403295903", "bodyText": "Could you please move the stream operators (filter, map, collect) to a new line each? Otherwise it's a nightmare to debug.", "author": "gunnarmorling", "createdAt": "2020-04-03T20:10:25Z", "path": "debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java", "diffHunk": "@@ -763,6 +781,11 @@ public OffsetStorageReader offsetStorageReader() {\n                             try {\n                                 if (changeRecords != null && !changeRecords.isEmpty()) {\n                                     logger.debug(\"Received {} records from the task\", changeRecords.size());\n+                                    changeRecords = changeRecords.stream().map(transformations::transform).filter(x -> x != null).collect(Collectors.toList());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMjE2Mg==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403832162", "bodyText": "Done", "author": "jpechane", "createdAt": "2020-04-06T05:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NjA4OQ==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403296089", "bodyText": "logger -> static LOGGER", "author": "gunnarmorling", "createdAt": "2020-04-03T20:10:42Z", "path": "debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java", "diffHunk": "@@ -763,6 +781,11 @@ public OffsetStorageReader offsetStorageReader() {\n                             try {\n                                 if (changeRecords != null && !changeRecords.isEmpty()) {\n                                     logger.debug(\"Received {} records from the task\", changeRecords.size());\n+                                    changeRecords = changeRecords.stream().map(transformations::transform).filter(x -> x != null).collect(Collectors.toList());\n+                                }\n+\n+                                if (changeRecords != null && !changeRecords.isEmpty()) {\n+                                    logger.debug(\"Received {} transformed records from the task\", changeRecords.size());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMjM2OA==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403832368", "bodyText": "Done as a separate commit", "author": "jpechane", "createdAt": "2020-04-06T05:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NjA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NzAyNg==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403297026", "bodyText": "New line missing.", "author": "gunnarmorling", "createdAt": "2020-04-03T20:12:07Z", "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");\n+        }\n+    }\n+\n+    public SourceRecord transform(SourceRecord record) {\n+        for (Transformation<SourceRecord> t : transforms) {\n+            record = t.apply(record);\n+            if (record == null) {\n+                break;\n+            }\n+        }\n+        return record;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        for (Transformation<SourceRecord> t : transforms) {\n+            try {\n+                t.close();\n+            }\n+            catch (Exception e) {\n+                LOGGER.warn(\"Error while closing transformation\", e);\n+            }\n+        }\n+    }\n+}", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMjQxOQ==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403832419", "bodyText": "Done", "author": "jpechane", "createdAt": "2020-04-06T05:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5OTA5Mg==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403299092", "bodyText": "You might end up with a wrapped DebeziumException here.", "author": "gunnarmorling", "createdAt": "2020-04-03T20:15:00Z", "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMjQ0Mw==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403832443", "bodyText": "Done", "author": "jpechane", "createdAt": "2020-04-06T05:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5OTA5Mg=="}], "type": "inlineReview"}, {"oid": "28a5ad669de504bae0efb66daa92f2ca99f3472f", "url": "https://github.com/debezium/debezium/commit/28a5ad669de504bae0efb66daa92f2ca99f3472f", "message": "DBZ-1930 Test invalid config and filtering", "committedDate": "2020-04-06T05:05:39Z", "type": "commit"}, {"oid": "aba899b180cc654f530d462695f73f305fb47024", "url": "https://github.com/debezium/debezium/commit/aba899b180cc654f530d462695f73f305fb47024", "message": "DBZ-1930 Change logger to static", "committedDate": "2020-04-06T05:07:28Z", "type": "commit"}, {"oid": "aba899b180cc654f530d462695f73f305fb47024", "url": "https://github.com/debezium/debezium/commit/aba899b180cc654f530d462695f73f305fb47024", "message": "DBZ-1930 Change logger to static", "committedDate": "2020-04-06T05:07:28Z", "type": "forcePushed"}, {"oid": "eef01322f0d9f122902b5de631d8f88f9e2aa420", "url": "https://github.com/debezium/debezium/commit/eef01322f0d9f122902b5de631d8f88f9e2aa420", "message": "DBZ-1930 Misc. clean-up", "committedDate": "2020-04-07T07:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NDYzMg==", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r404584632", "bodyText": "The source exception should be propagated.", "author": "gunnarmorling", "createdAt": "2020-04-07T07:12:32Z", "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (DebeziumException e) {\n+            throw e;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");", "originalCommit": "aba899b180cc654f530d462695f73f305fb47024", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}