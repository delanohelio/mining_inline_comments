{"pr_number": 1275, "pr_title": "DBZ-1134 Support for user provided converters", "pr_createdAt": "2020-02-19T11:25:50Z", "pr_url": "https://github.com/debezium/debezium/pull/1275", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "46b563c58af5122f23e7694518df6b30100cc4d8", "url": "https://github.com/debezium/debezium/commit/46b563c58af5122f23e7694518df6b30100cc4d8", "message": "DBZ-1134 Support for user provided converters", "committedDate": "2020-02-26T11:38:33Z", "type": "commit"}, {"oid": "069ef53618444d1e1cb11efee93003087b6359e9", "url": "https://github.com/debezium/debezium/commit/069ef53618444d1e1cb11efee93003087b6359e9", "message": "DBZ-1134 Make converted field type parametrized", "committedDate": "2020-02-26T11:38:35Z", "type": "commit"}, {"oid": "069ef53618444d1e1cb11efee93003087b6359e9", "url": "https://github.com/debezium/debezium/commit/069ef53618444d1e1cb11efee93003087b6359e9", "message": "DBZ-1134 Make converted field type parametrized", "committedDate": "2020-02-26T11:38:35Z", "type": "forcePushed"}, {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335", "url": "https://github.com/debezium/debezium/commit/3aef8ea4618894861c109544b700ab00cbdaa335", "message": "DBZ-1134 Fix annotation name", "committedDate": "2020-02-26T11:44:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjM0MQ==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566341", "bodyText": "OptionalInt?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:27:06Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjQ0MA==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566440", "bodyText": "OptionalInt?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:27:14Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566784", "bodyText": "Optional<String>?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:27:39Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwOTgyOA==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384609828", "bodyText": "I don't think so - the type expression is always at least the type name", "author": "jpechane", "createdAt": "2020-02-26T16:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTM3Mg==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384645372", "bodyText": "Ok, I was kinda wondering whether it should be empty for a plain name. But works that way.", "author": "gunnarmorling", "createdAt": "2020-02-26T17:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567026", "bodyText": "Optional<Object>?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:27:59Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMzk0OQ==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384613949", "bodyText": "This is a little bit tricky as there is three-state value\n\nno default value\ndefault value set to null\ndefalt value\n\nThe problem is that it is a little bit cunterintuitive to use Optional to express it.\nWe could use logic\n\nnull - no default value\nOptional.empty() - NULL default value\nOptional.of - default value\n\nThe problem is that the usual convention is that Optional methods does not return null. So that's why we opted for defaultValue/hasDefaultValue combo.\nThe most clean solution migt be to use <Optional<Optional<Object>> but that onle looks little bit ugly.", "author": "jpechane", "createdAt": "2020-02-26T16:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTc5Mw==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384645793", "bodyText": "Ah yes, I remember that discussion now. The current design seems most reasonable in that light.", "author": "gunnarmorling", "createdAt": "2020-02-26T17:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzI0MQ==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567241", "bodyText": "Obsolete as per above?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:28:15Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();\n+\n+    /**\n+     * Determine whether this column's has a default value\n+     *\n+     * @return {@code true} if the default value was provided, or {@code false} otherwise\n+     */\n+    boolean hasDefaultValue();", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384573447", "bodyText": "Did you consider a pair of boolean appliesTo(Field field) and ConverterDefinition converterFor(Field field), too? Might make it more explicit, but not sure. Thoughts?", "author": "gunnarmorling", "createdAt": "2020-02-26T15:37:07Z", "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "originalCommit": "3aef8ea4618894861c109544b700ab00cbdaa335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTI4OQ==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384585289", "bodyText": "Or maybe even:\ninterface CustomConverter<S, F extends ConvertedField> {\n    boolean appliesTo(Field field);\n    S schemaFor(Field field);\n    Object convert(Field field, Object value);\n}\n\nAvoiding a concrete class in the SPI definition at all.", "author": "gunnarmorling", "createdAt": "2020-02-26T15:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMzc4Ng==", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384603786", "bodyText": "@gunnarmorling Yes I was considering that but then I decided against it - the reason was that if you want to apply more complex rules then you'd need to do the rule evaluation in each method.\nSo I decided it might be more conveninet to do it in a single step.", "author": "jpechane", "createdAt": "2020-02-26T16:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw=="}], "type": "inlineReview"}, {"oid": "b068d5685fc4181825b03352deba5cad9fb06338", "url": "https://github.com/debezium/debezium/commit/b068d5685fc4181825b03352deba5cad9fb06338", "message": "DBZ-1134 Use OptionalInts", "committedDate": "2020-02-26T16:41:48Z", "type": "commit"}, {"oid": "4dc220c76d0e31c7ac4b35c38fbabee249f4a96f", "url": "https://github.com/debezium/debezium/commit/4dc220c76d0e31c7ac4b35c38fbabee249f4a96f", "message": "DBZ-1134 Making converter registry thread-safe; misc. clean-up", "committedDate": "2020-02-27T11:37:25Z", "type": "commit"}, {"oid": "496e4f43452058a6a625a98b435b3332bcb9738e", "url": "https://github.com/debezium/debezium/commit/496e4f43452058a6a625a98b435b3332bcb9738e", "message": "DBZ-1134 Avoiding concrete class in SPI by introducing receiver parameter", "committedDate": "2020-02-27T12:10:54Z", "type": "commit"}, {"oid": "bd74b6ab78a1df3d00318f48abf5ea68430328ee", "url": "https://github.com/debezium/debezium/commit/bd74b6ab78a1df3d00318f48abf5ea68430328ee", "message": "DBZ-1134 Fix tests for new API", "committedDate": "2020-02-28T10:40:53Z", "type": "commit"}, {"oid": "e83de1863b22b03ca7c7672bf68d3587e98d1cb1", "url": "https://github.com/debezium/debezium/commit/e83de1863b22b03ca7c7672bf68d3587e98d1cb1", "message": "DBZ-1134 JavaDoc", "committedDate": "2020-02-28T20:58:02Z", "type": "commit"}]}