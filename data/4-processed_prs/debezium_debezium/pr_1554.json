{"pr_number": 1554, "pr_title": "DBZ-2118 Close TX after type query", "pr_createdAt": "2020-06-03T13:06:26Z", "pr_url": "https://github.com/debezium/debezium/pull/1554", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTI3NA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434655274", "bodyText": "Why does it commit here, in particular for each iteration in the result set?", "author": "gunnarmorling", "createdAt": "2020-06-03T15:28:17Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/TypeRegistry.java", "diffHunk": "@@ -405,6 +405,9 @@ private PostgresType loadType(Connection connection, PreparedStatement statement\n             while (rs.next()) {\n                 PostgresType result = createTypeBuilderFromResultSet(connection, rs, typeInfo, sqlTypeMapper).build();\n                 addType(result);\n+                if (!connection.getAutoCommit() ) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MzEzNQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434673135", "bodyText": "@gunnarmorling Please note the return statement just after the commit, it terminates the loop...", "author": "jpechane", "createdAt": "2020-06-03T15:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTI3NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDM3Ng==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434844376", "bodyText": "So where is this transaction started? For the sake of symmetry, I  think BEGIN/COMMIT should be in one and the same method.", "author": "gunnarmorling", "createdAt": "2020-06-03T20:48:31Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/TypeRegistry.java", "diffHunk": "@@ -405,6 +405,9 @@ private PostgresType loadType(Connection connection, PreparedStatement statement\n             while (rs.next()) {\n                 PostgresType result = createTypeBuilderFromResultSet(connection, rs, typeInfo, sqlTypeMapper).build();\n                 addType(result);\n+                if (!connection.getAutoCommit()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MTczOQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434971739", "bodyText": "@gunnarmorling Don't forget that JDBC interface does not offer explicit begin. This is started when a first statement is executed.", "author": "jpechane", "createdAt": "2020-06-04T03:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDM3Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "df57008446bcdd2049c8169c2ce42c422852d818", "url": "https://github.com/debezium/debezium/commit/df57008446bcdd2049c8169c2ce42c422852d818", "message": "DBZ-2118 Close TX after type query", "committedDate": "2020-06-04T06:52:29Z", "type": "commit"}, {"oid": "df57008446bcdd2049c8169c2ce42c422852d818", "url": "https://github.com/debezium/debezium/commit/df57008446bcdd2049c8169c2ce42c422852d818", "message": "DBZ-2118 Close TX after type query", "committedDate": "2020-06-04T06:52:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435169611", "bodyText": "This assertion is failing for me locally with PG 10. There are two transactions:\nSELECT        result.TABLE_CAT,        result.TABLE_SCHEM,        result.TABLE_NAME,        result.COLUMN_NAME,        result.KEY_SEQ,        result.PK_NAME FROM      (SELECT NULL AS TABLE_CAT, n.nspname AS TABLE_SCHEM,   ct.relname AS TABLE_NAME, a.attname AS COLUMN_NAME,   (information_schema._pg_expandarray(i.indkey)).n AS KEY_SEQ, ci.relname AS PK_NAME,   information_schema._pg_expandarray(i.indkey) AS KEYS, a.attnum AS A_ATTNUM FROM pg_catalog.pg_class ct   JOIN pg_catalog.pg_attribute a ON (ct.oid = a.attrelid)   JOIN pg_catalog.pg_namespace n ON (ct.relnamespace = n.oid)   JOIN pg_catalog.pg_index i ON ( a.attrelid = i.indrelid)   JOIN pg_catalog.pg_class ci ON (ci.oid = i.indexrelid) WHERE true  AND n.nspname = 's1' AND ct.relname = 'b' AND i.indisprimary  ) result where  result.A_ATTNUM = (result.KEYS).x  ORDER BY result.table_name, result.pk_name, result.key_seq\n\nSELECT query FROM pg_stat_activity WHERE backend_xmin IS NOT NULL ORDER BY age(backend_xmin) DESC", "author": "gunnarmorling", "createdAt": "2020-06-04T11:01:01Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -826,6 +826,43 @@ public void shouldRemoveWhiteSpaceChars() throws Exception {\n         assertThat(sourceTable).isEqualTo(\"b\");\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2118\")\n+    public void shouldCloseTxAfterTypeQuery() throws Exception {\n+        String setupStmt = SETUP_TABLES_STMT;\n+\n+        TestHelper.execute(setupStmt);\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.SCHEMA_WHITELIST, \"s1\")\n+                .with(PostgresConnectorConfig.TABLE_WHITELIST, \"s1.b\");\n+\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+        waitForSnapshotToBeCompleted();\n+\n+        TestHelper.execute(\"CREATE TABLE s1.b (pk SERIAL, aa isbn, PRIMARY KEY(pk));\", \"INSERT INTO s1.b (aa) VALUES ('978-0-393-04002-9')\");\n+        SourceRecords actualRecords = consumeRecordsByTopic(1);\n+\n+        List<SourceRecord> records = actualRecords.recordsForTopic(topicName(\"s1.b\"));\n+        assertThat(records.size()).isEqualTo(1);\n+\n+        SourceRecord record = records.get(0);\n+        VerifyRecord.isValidInsert(record, PK_FIELD, 1);\n+\n+        try (final PostgresConnection connection = TestHelper.create()) {\n+            try {\n+                Awaitility.await()\n+                        .atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                        .until(() -> getActiveTransactions(connection).size() == 1);\n+            }\n+            catch (ConditionTimeoutException e) {\n+            }\n+            assertThat(getActiveTransactions(connection)).hasSize(1);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MzU2OQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435183569", "bodyText": "And it works on Postgres 9 :-(", "author": "jpechane", "createdAt": "2020-06-04T11:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzM0OQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435217349", "bodyText": "Maybe checking that there aren't any transactions with the state idle in transaction (aborted) or idle in transaction would be easier to work with.", "author": "grantcooksey", "createdAt": "2020-06-04T12:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzcxNQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435903715", "bodyText": "So it seems to work now for all versions. @jpechane, what has changed?", "author": "gunnarmorling", "createdAt": "2020-06-05T12:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NjMzMA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r436446330", "bodyText": "I opted for fully manual tx management", "author": "jpechane", "createdAt": "2020-06-08T03:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMDA0MA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r436500040", "bodyText": "Ok, cool. Yes, much better now, I think.", "author": "gunnarmorling", "createdAt": "2020-06-08T07:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTc5OQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435169799", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Objects.requireNonNull(typeRegistry, \"Conection does not provide type registry\");\n          \n          \n            \n                    Objects.requireNonNull(typeRegistry, \"Connection does not provide type registry\");", "author": "gunnarmorling", "createdAt": "2020-06-04T11:01:26Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java", "diffHunk": "@@ -483,6 +494,7 @@ protected int resolveJdbcType(int metadataJdbcType, int nativeType) {\n     }\n \n     public TypeRegistry getTypeRegistry() {\n+        Objects.requireNonNull(typeRegistry, \"Conection does not provide type registry\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435170714", "bodyText": "Shouldn't it rather be true by default?", "author": "gunnarmorling", "createdAt": "2020-06-04T11:03:05Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java", "diffHunk": "@@ -66,13 +67,23 @@\n      * Creates a Postgres connection using the supplied configuration.\n      *\n      * @param config {@link Configuration} instance, may not be null.\n+     * @param provideTypeRegistry {@code true} if type registry should be created\n      */\n-    public PostgresConnection(Configuration config) {\n+    public PostgresConnection(Configuration config, boolean provideTypeRegistry) {\n         super(config, FACTORY, PostgresConnection::validateServerVersion, PostgresConnection::defaultSettings);\n-        this.typeRegistry = new TypeRegistry(this);\n+        this.typeRegistry = provideTypeRegistry ? new TypeRegistry(this) : null;\n         databaseCharset = determineDatabaseCharset();\n     }\n \n+    /**\n+     * Creates a Postgres connection using the supplied configuration.\n+     *\n+     * @param config {@link Configuration} instance, may not be null.\n+     */\n+    public PostgresConnection(Configuration config) {\n+        this(config, false);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MTE5Nw==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435171197", "bodyText": "That said, I don't quite get how it's meant to work to begin with. Could you comment in the test? Thx!", "author": "gunnarmorling", "createdAt": "2020-06-04T11:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3ODg1OA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435178858", "bodyText": "ok, let me explain. Right now when you create a postgresconnection then in all instances it creates internal map of types which means additional queries and transactions. The map is needed for only one single specific connection. So I decided it makes sense to handle this connection spcefically and by default not to create the type registry for connections that does not need it.", "author": "jpechane", "createdAt": "2020-06-04T11:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5MTk3OQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435491979", "bodyText": "OK, gotcha. Could you put this as a source comment into a sensible location. Thx!", "author": "gunnarmorling", "createdAt": "2020-06-04T19:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4MTQwMQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435681401", "bodyText": "Added, should be ready for review now.", "author": "jpechane", "createdAt": "2020-06-05T04:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNjQwNw==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435806407", "bodyText": "Thx!", "author": "gunnarmorling", "createdAt": "2020-06-05T09:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829", "url": "https://github.com/debezium/debezium/commit/db382e3b716fe93d085e9da62b59a27afb8a8829", "message": "DBZ-2118 Type registry provided only for dedicated connections", "committedDate": "2020-06-04T11:16:08Z", "type": "commit"}, {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829", "url": "https://github.com/debezium/debezium/commit/db382e3b716fe93d085e9da62b59a27afb8a8829", "message": "DBZ-2118 Type registry provided only for dedicated connections", "committedDate": "2020-06-04T11:16:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyOTM2OA==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435229368", "bodyText": "This looks like it could be race condition. Relying on the 5 ms poll in consumeRecordsByTopic to ensure that the connector picked up the records seems flaky. A specific case where this would be problematic is if a developer wanted to use a debugger on the connecter during this test. What about polling on the JMX field totalNumberOfEventsSeen to wait till we are sure the connector pushed the record?", "author": "grantcooksey", "createdAt": "2020-06-04T12:53:46Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -826,6 +826,43 @@ public void shouldRemoveWhiteSpaceChars() throws Exception {\n         assertThat(sourceTable).isEqualTo(\"b\");\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2118\")\n+    public void shouldCloseTxAfterTypeQuery() throws Exception {\n+        String setupStmt = SETUP_TABLES_STMT;\n+\n+        TestHelper.execute(setupStmt);\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.SCHEMA_WHITELIST, \"s1\")\n+                .with(PostgresConnectorConfig.TABLE_WHITELIST, \"s1.b\");\n+\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+        waitForSnapshotToBeCompleted();\n+\n+        TestHelper.execute(\"CREATE TABLE s1.b (pk SERIAL, aa isbn, PRIMARY KEY(pk));\", \"INSERT INTO s1.b (aa) VALUES ('978-0-393-04002-9')\");\n+        SourceRecords actualRecords = consumeRecordsByTopic(1);", "originalCommit": "db382e3b716fe93d085e9da62b59a27afb8a8829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5OTkzMQ==", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435899931", "bodyText": "While I agree in theory, it's not a problem in practice. The poll timeout is 5 seconds and it's tried three times, i.e. 15 sec overall. That's more than enough even on our slow CI environment and this method doesn't show caus any troubles there (that said, we do have flaky tests due to similar causes, but that's not one of them). In terms of debugging, you'd typically have two breakpoints: one in the event loop and one in the main thread, right before this call. Then you can take all the time you need to step through the event loop.", "author": "gunnarmorling", "createdAt": "2020-06-05T12:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyOTM2OA=="}], "type": "inlineReview"}, {"oid": "0bf9d11a168df3613574ba656731115bc62b9b09", "url": "https://github.com/debezium/debezium/commit/0bf9d11a168df3613574ba656731115bc62b9b09", "message": "DBZ-2118 Switch to manual tx management", "committedDate": "2020-06-04T13:31:58Z", "type": "commit"}, {"oid": "f5cce8624248edb17adc32291b5980a18380e9b3", "url": "https://github.com/debezium/debezium/commit/f5cce8624248edb17adc32291b5980a18380e9b3", "message": "DBZ-2118 Slot dropping more resilient to race", "committedDate": "2020-06-04T13:54:35Z", "type": "commit"}, {"oid": "c4767abac1bc17144f2a49da04f70ad9b73e8495", "url": "https://github.com/debezium/debezium/commit/c4767abac1bc17144f2a49da04f70ad9b73e8495", "message": "DBZ-2118 Document type registry connection capability", "committedDate": "2020-06-05T04:17:14Z", "type": "commit"}]}