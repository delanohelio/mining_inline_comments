{"pr_number": 1445, "pr_title": "DBZ-2000 Content based router SMT", "pr_createdAt": "2020-04-23T13:47:29Z", "pr_url": "https://github.com/debezium/debezium/pull/1445", "timeline": [{"oid": "9a0b33a8c0578311f7bddc8fdf59e61a64b6e47b", "url": "https://github.com/debezium/debezium/commit/9a0b33a8c0578311f7bddc8fdf59e61a64b6e47b", "message": "DBZ-2000 Content based router SMT", "committedDate": "2020-04-23T13:46:46Z", "type": "commit"}, {"oid": "7ae9bfec837bcc4e3b788841b890d2fba151c2aa", "url": "https://github.com/debezium/debezium/commit/7ae9bfec837bcc4e3b788841b890d2fba151c2aa", "message": "DBZ-2000 Misc. clean-up", "committedDate": "2020-04-24T10:20:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NTc0OQ==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414465749", "bodyText": "How about naming it topic.expression? That'll be more in line with topic.regex as known from the existing logical table router.", "author": "gunnarmorling", "createdAt": "2020-04-24T10:22:10Z", "path": "debezium-core/src/test/java/io/debezium/transforms/RouterTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms;\n+\n+import static org.fest.assertions.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.junit.Test;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.data.Envelope;\n+\n+/**\n+ * @author Jiri Pechanec\n+ */\n+public class RouterTest {\n+\n+    private static final String LANGUAGE = \"language\";\n+    private static final String EXPRESSION = \"topic\";", "originalCommit": "9a0b33a8c0578311f7bddc8fdf59e61a64b6e47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNzMyMg==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414537322", "bodyText": "@gunnarmorling Renamed and docs added", "author": "jpechane", "createdAt": "2020-04-24T12:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0NTY5NQ==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414545695", "bodyText": "Thx!", "author": "gunnarmorling", "createdAt": "2020-04-24T12:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NTc0OQ=="}], "type": "inlineReview"}, {"oid": "5fa681f82ce69b995e1d0a096859448680e38d79", "url": "https://github.com/debezium/debezium/commit/5fa681f82ce69b995e1d0a096859448680e38d79", "message": "DBZ-2000 Change expression param name; add docs", "committedDate": "2020-04-24T12:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MTg5MQ==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414551891", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The current implementation supports two languages in which the expression can be written: Groovy and JavaScript.\n          \n          \n            \n            The current implementation supports any scripting language which integrates with https://jcp.org/en/jsr/detail?id=223[JSR 223] (Scripting for the Java(TM) Platform).", "author": "gunnarmorling", "createdAt": "2020-04-24T12:52:17Z", "path": "documentation/modules/ROOT/pages/configuration/content-based-routing.adoc", "diffHunk": "@@ -0,0 +1,111 @@\n+= Content-Based Routing\n+include::../_attributes.adoc[]\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+[NOTE]\n+====\n+This SMT is currently in incubating state, i.e. exact semantics, configuration options etc. may change in future revisions, based on the feedback we receive. Please let us know if you encounter any problems while using this routing transformation.\n+====\n+\n+With real-life applications, it is often necessary to route the events not only to a static topic but to a topic based on the message content.\n+This is expressed as the https://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html[Content-Based Router] integration pattern.\n+Kafka Connect provides a generic mechanism to do the routing in the form of link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect[Simple Message Transforms] (SMT).\n+\n+The SMT is a Java class that encodes the routing logic.\n+This is a very powerful mechanism but has two drawbacks:\n+\n+* It is necessary to compile the transformation upfront and deploy it to Kafka Connect.\n+* Every change needs code recompilation and redeployment, leading to inflexible operations.\n+\n+To solve this problem, Debezium comes with the Content-Based Router SMT.\n+This SMT allows the operator to write an expression that is evaluated for each event and according to the result, it is either kept in the original topic or re-routed to another one.\n+The current implementation supports two languages in which the expression can be written: Groovy and JavaScript.", "originalCommit": "5fa681f82ce69b995e1d0a096859448680e38d79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MjM2OA==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414552368", "bodyText": "Haha, now it's you who adds an empty note :)", "author": "gunnarmorling", "createdAt": "2020-04-24T12:53:07Z", "path": "documentation/modules/ROOT/pages/configuration/content-based-routing.adoc", "diffHunk": "@@ -0,0 +1,111 @@\n+= Content-Based Routing\n+include::../_attributes.adoc[]\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+[NOTE]\n+====\n+This SMT is currently in incubating state, i.e. exact semantics, configuration options etc. may change in future revisions, based on the feedback we receive. Please let us know if you encounter any problems while using this routing transformation.\n+====\n+\n+With real-life applications, it is often necessary to route the events not only to a static topic but to a topic based on the message content.\n+This is expressed as the https://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html[Content-Based Router] integration pattern.\n+Kafka Connect provides a generic mechanism to do the routing in the form of link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect[Simple Message Transforms] (SMT).\n+\n+The SMT is a Java class that encodes the routing logic.\n+This is a very powerful mechanism but has two drawbacks:\n+\n+* It is necessary to compile the transformation upfront and deploy it to Kafka Connect.\n+* Every change needs code recompilation and redeployment, leading to inflexible operations.\n+\n+To solve this problem, Debezium comes with the Content-Based Router SMT.\n+This SMT allows the operator to write an expression that is evaluated for each event and according to the result, it is either kept in the original topic or re-routed to another one.\n+The current implementation supports two languages in which the expression can be written: Groovy and JavaScript.\n+\n+The Content-Based Router SMT can be used like so:\n+\n+[source]\n+----\n+...\n+transforms=route\n+transforms.route.type=io.debezium.transforms.ContentBasedRouter\n+transforms.route.language=jsr223.groovy\n+transforms.route.topic.expression=value.op == 'u' ? 'updates' : null\n+...\n+----\n+\n+In this example, we are using `Groovy` as the expression language, and we're re-routing all update records to the `updates` topic and the others into the default one.\n+\n+[IMPORTANT]\n+====\n+Debezium does not come with the language implementations in its installation packages.\n+It is the user's responsibility to provide an implementation, such as link:https://groovy-lang.org/[Groovy 3] or link:https://github.com/graalvm/graaljs[GraalVM JavaScript], on the classpath.\n+Bootstrapping is done exclusively via the JSR 223 API currently, so the engine's support for this API must be provided as well.\n+====\n+\n+Debezium binds four variables into the evaluation context:\n+\n+* `key` - a key of the message\n+* `value` - a value of the message\n+* `keySchema` - the schema of the message key\n+* `valueSchema` - the schema of the message value\n+\n+The `key` and `value` are of type `org.apache.kafka.connect.data.Struct` and `keySchema` and `valueSchema` are variables of type `org.apache.kafka.connect.data.Schema`.\n+The expression can invoke arbitrary methods on the variables and should evaluate into a boolean value that decides whether the message is removed `true` or kept.\n+Expressions should be side-effect free, i.e. they should *not* modify the passed variables in any way.\n+\n+[NOTE]", "originalCommit": "5fa681f82ce69b995e1d0a096859448680e38d79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MjU1OQ==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414552559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [NOTE]\n          \n          \n            \n            ====\n          \n          \n            \n            \n          \n          \n            \n            ====", "author": "gunnarmorling", "createdAt": "2020-04-24T12:53:26Z", "path": "documentation/modules/ROOT/pages/configuration/content-based-routing.adoc", "diffHunk": "@@ -0,0 +1,111 @@\n+= Content-Based Routing\n+include::../_attributes.adoc[]\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+[NOTE]\n+====\n+This SMT is currently in incubating state, i.e. exact semantics, configuration options etc. may change in future revisions, based on the feedback we receive. Please let us know if you encounter any problems while using this routing transformation.\n+====\n+\n+With real-life applications, it is often necessary to route the events not only to a static topic but to a topic based on the message content.\n+This is expressed as the https://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html[Content-Based Router] integration pattern.\n+Kafka Connect provides a generic mechanism to do the routing in the form of link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect[Simple Message Transforms] (SMT).\n+\n+The SMT is a Java class that encodes the routing logic.\n+This is a very powerful mechanism but has two drawbacks:\n+\n+* It is necessary to compile the transformation upfront and deploy it to Kafka Connect.\n+* Every change needs code recompilation and redeployment, leading to inflexible operations.\n+\n+To solve this problem, Debezium comes with the Content-Based Router SMT.\n+This SMT allows the operator to write an expression that is evaluated for each event and according to the result, it is either kept in the original topic or re-routed to another one.\n+The current implementation supports two languages in which the expression can be written: Groovy and JavaScript.\n+\n+The Content-Based Router SMT can be used like so:\n+\n+[source]\n+----\n+...\n+transforms=route\n+transforms.route.type=io.debezium.transforms.ContentBasedRouter\n+transforms.route.language=jsr223.groovy\n+transforms.route.topic.expression=value.op == 'u' ? 'updates' : null\n+...\n+----\n+\n+In this example, we are using `Groovy` as the expression language, and we're re-routing all update records to the `updates` topic and the others into the default one.\n+\n+[IMPORTANT]\n+====\n+Debezium does not come with the language implementations in its installation packages.\n+It is the user's responsibility to provide an implementation, such as link:https://groovy-lang.org/[Groovy 3] or link:https://github.com/graalvm/graaljs[GraalVM JavaScript], on the classpath.\n+Bootstrapping is done exclusively via the JSR 223 API currently, so the engine's support for this API must be provided as well.\n+====\n+\n+Debezium binds four variables into the evaluation context:\n+\n+* `key` - a key of the message\n+* `value` - a value of the message\n+* `keySchema` - the schema of the message key\n+* `valueSchema` - the schema of the message value\n+\n+The `key` and `value` are of type `org.apache.kafka.connect.data.Struct` and `keySchema` and `valueSchema` are variables of type `org.apache.kafka.connect.data.Schema`.\n+The expression can invoke arbitrary methods on the variables and should evaluate into a boolean value that decides whether the message is removed `true` or kept.\n+Expressions should be side-effect free, i.e. they should *not* modify the passed variables in any way.\n+\n+[NOTE]\n+====\n+\n+====", "originalCommit": "5fa681f82ce69b995e1d0a096859448680e38d79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MzQxNA==", "url": "https://github.com/debezium/debezium/pull/1445#discussion_r414553414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The current implementation is tested with two languages in which the expression can be written: Groovy and JavaScript.\n          \n          \n            \n            The current implementation supports any scripting language which integrates with https://jcp.org/en/jsr/detail?id=223[JSR 223] (Scripting for the Java(TM) Platform).", "author": "gunnarmorling", "createdAt": "2020-04-24T12:54:47Z", "path": "documentation/modules/ROOT/pages/configuration/filtering.adoc", "diffHunk": "@@ -25,7 +25,7 @@ This is a very powerful mechanism but has two drawbacks:\n \n To solve this problem, Debezium comes with the Filtering SMT.\n This SMT allows the operator to write an expression that is evaluated for each event and according to the result, it is either filtered out or passed on for further processing.\n-The current implementation supports two languages in which the expression can be written: Groovy and JavaScript.\n+The current implementation is tested with two languages in which the expression can be written: Groovy and JavaScript.", "originalCommit": "5fa681f82ce69b995e1d0a096859448680e38d79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c58196ef560f53f6467a153a16ff2326d797f7b", "url": "https://github.com/debezium/debezium/commit/5c58196ef560f53f6467a153a16ff2326d797f7b", "message": "DBZ-2000 Docs improvements\n\nCo-Authored-By: Gunnar Morling <gunnar.morling@googlemail.com>", "committedDate": "2020-04-24T13:18:49Z", "type": "commit"}]}