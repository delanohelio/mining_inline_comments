{"pr_number": 1922, "pr_title": "DBZ-2662 Handle ChangeEventQueue by the size in bytes", "pr_createdAt": "2020-10-29T20:20:48Z", "pr_url": "https://github.com/debezium/debezium/pull/1922", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMzQ2Mg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515003462", "bodyText": "I think a newer version of the ObjectSizeCalculator is available here: https://github.com/twitter/util/blob/develop/util-core/src/test/java/com/twitter/util/ObjectSizeCalculator.java but it's not available on maven central and twitter only uses it for unit tests.", "author": "rk3rn3r", "createdAt": "2020-10-30T10:33:32Z", "path": "debezium-core/pom.xml", "diffHunk": "@@ -101,6 +101,12 @@\n             <artifactId>kafka-connect-avro-converter</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <!-- open libraries -->\n+        <dependency>\n+            <groupId>com.twitter.common</groupId>\n+            <artifactId>objectsize</artifactId>\n+            <version>0.0.12</version>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NTY1Mg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517345652", "bodyText": "@rk3rn3r should we use the code at the link or the latest maven?", "author": "vanhoale", "createdAt": "2020-11-04T13:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515858235", "bodyText": "@vanhoale Would it be possible to handle queue size set to zero as a special value that disables the rate limitng and calculation of the  object size?", "author": "jpechane", "createdAt": "2020-11-02T09:59:03Z", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3OTAxMQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515979011", "bodyText": "Could you elaborate on the idea? As I know this line of code is called after a batch is processed completely and it doesn't call frequently.", "author": "vanhoale", "createdAt": "2020-11-02T13:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDA4MQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517944081", "bodyText": "@vanhoale\nField::isPositiveLong would become Field::isNonNegativeLong and description will be updated, default value will be 0\nthis line will be encapusalted in If (maxQueueSizeInBytes > 0)\nSo if the config value is not set or is set to zero the calculation will not be triggered. The waiting loop above will wait only for non zero maxQueueSizeInBytes", "author": "jpechane", "createdAt": "2020-11-05T10:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4NjQwMA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517986400", "bodyText": "is it returned DEFAULT_MAX_QUEUE_SIZE_IN_BYTES if I don't pass the max.queue.size.in.bytes variable?", "author": "vanhoale", "createdAt": "2020-11-05T11:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODQ0MA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517998440", "bodyText": "Yes and we want to disable queue size limitng by default, hence choosign the 0.", "author": "jpechane", "createdAt": "2020-11-05T12:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMjIwNA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518002204", "bodyText": "ah, got your point, so you want a logic like: if we don't pass the maxQueueSizeInBytes then we shouldn't use ObjectSizeCalculator.getObjectSize() method?", "author": "vanhoale", "createdAt": "2020-11-05T12:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMDg5Ng==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518010896", "bodyText": "Exactly!", "author": "jpechane", "createdAt": "2020-11-05T12:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMjQzMg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518012432", "bodyText": "I like it, will update it", "author": "vanhoale", "createdAt": "2020-11-05T12:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDM0Mg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517944342", "bodyText": "Instead of hardoced value I recommend to reuse pollInterval", "author": "jpechane", "createdAt": "2020-11-05T10:26:55Z", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4NTA4NQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517985085", "bodyText": "Thanks! I will update it", "author": "vanhoale", "createdAt": "2020-11-05T11:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r514805363", "bodyText": "I did 2 tests: the average time that the method used for the records\n\n\nof 1.6MB is about 679718 nanoseconds\n\n\nof 16KB is about 126651 nanoseconds", "author": "vanhoale", "createdAt": "2020-10-30T03:56:23Z", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);\n+        }\n         // this will also raise an InterruptedException if the thread is interrupted while waiting for space in the queue\n         queue.put(record);\n+        currentQueueSizeInBytes.addAndGet(ObjectSizeCalculator.getObjectSize(record));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NDMwOA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r516644308", "bodyText": "I got a snapshot of performance calculation for the method getObjectSize", "author": "vanhoale", "createdAt": "2020-11-03T12:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0Nzc3MA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r516647770", "bodyText": "In the first few minutes, it may take around 600000 ns for an average processing time of 1.6MB, but when it's stable it decreases in half.\nI set -Xmx to 2GB, maxQueueSizeInBytes=500MB, and it ran without OOM.", "author": "vanhoale", "createdAt": "2020-11-03T12:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMjk1MA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517402950", "bodyText": "here is the random message size from ~1KB to ~1.6MB, maxQueueSizeInBytes=256MB:\n\npgbench -c 2 -j 4 -T 1000 -P 30 -n -f big_text_external_insert.sql\nINSERT INTO pgbench_ext (val) SELECT repeat(md5(random()::TEXT), random_between(32,50000) + ceil(random() * 25)::INT) ;", "author": "vanhoale", "createdAt": "2020-11-04T14:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNjA1NQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r514806055", "bodyText": "Not sure if we should variable the sleep time", "author": "vanhoale", "createdAt": "2020-10-30T03:57:12Z", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODAwNg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518018006", "bodyText": "@jpechane should I set the default value to 0/nagative value, so I can check it to calculate the object size or not?", "author": "vanhoale", "createdAt": "2020-11-05T12:36:06Z", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -242,6 +242,7 @@ public static BinaryHandlingMode parse(String value, String defaultValue) {\n     public static final String DATABASE_CONFIG_PREFIX = \"database.\";\n     private static final String CONVERTER_TYPE_SUFFIX = \".type\";\n     public static final long DEFAULT_RETRIABLE_RESTART_WAIT = 10000L;\n+    public static final long DEFAULT_MAX_QUEUE_SIZE_IN_BYTES = 500 * 1000 * 1024L; // 500MB;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NDM5Mw==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518054393", "bodyText": "Why -1 and not 0?", "author": "jpechane", "createdAt": "2020-11-05T13:35:41Z", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -242,6 +242,7 @@ public static BinaryHandlingMode parse(String value, String defaultValue) {\n     public static final String DATABASE_CONFIG_PREFIX = \"database.\";\n     private static final String CONVERTER_TYPE_SUFFIX = \".type\";\n     public static final long DEFAULT_RETRIABLE_RESTART_WAIT = 10000L;\n+    public static final long DEFAULT_MAX_QUEUE_SIZE_IN_BYTES = -1; // In case we don't want to pass max.queue.size.in.bytes;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4MzEwMg==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518083102", "bodyText": "I can update it to 0", "author": "vanhoale", "createdAt": "2020-11-05T14:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NDM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjU0NA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518056544", "bodyText": "I don't think this is correct. IMHO sum of the object sizes does not equal the size of array of the same objects.\nAlso using this approach you are effectively doubling the price of the object calcaulation - once on the input and once on the removal.", "author": "jpechane", "createdAt": "2020-11-05T13:39:02Z", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +174,9 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            if (maxQueueSizeInBytes > 0) {\n+                currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4MjU0NQ==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518082545", "bodyText": "@jpechane Confirmed! it's not equal, should I wrap the record in a key-pair object so I can get the key that can be referred to the object size later?", "author": "vanhoale", "createdAt": "2020-11-05T14:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MDY2MA==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r520340660", "bodyText": "Test looks good but this is a brittle approach. PLease check io.debezium.embedded.AbstractConnectorTest.waitForStreamingRunning(String, String, String) code how to use Awaitility lib and use until to wait for CurrentQueueSizeInBytes > 0 and QueueRemainingCapacity == 9\nPlease follow the same approach in other tests.\nThe timeout should be based upon io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "author": "jpechane", "createdAt": "2020-11-10T07:20:40Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "diffHunk": "@@ -190,6 +191,66 @@ private void assertStreamingMetrics() throws Exception {\n         // Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"MonitoredTables\")).isEqualTo(new String[] {\"public.simple\"});\n     }\n \n+    @Test\n+    public void twoRecordsInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10000L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(8);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isEqualTo(0L);\n+        stopConnector();\n+    }\n+\n+    @Test\n+    public void oneRecordInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MTA1Mw==", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r520341053", "bodyText": "This should be unnecessary, the queue should already be of size 0 at time of all records being consumed", "author": "jpechane", "createdAt": "2020-11-10T07:21:36Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "diffHunk": "@@ -190,6 +191,66 @@ private void assertStreamingMetrics() throws Exception {\n         // Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"MonitoredTables\")).isEqualTo(new String[] {\"public.simple\"});\n     }\n \n+    @Test\n+    public void twoRecordsInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10000L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(8);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isEqualTo(0L);\n+        stopConnector();\n+    }\n+\n+    @Test\n+    public void oneRecordInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(9);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83ea2e805a71fe6fb8f59c5f7c420512c5749d0a", "url": "https://github.com/debezium/debezium/commit/83ea2e805a71fe6fb8f59c5f7c420512c5749d0a", "message": "DBZ-2662 Handle ChangeEventQueue by the size in bytes", "committedDate": "2020-11-16T07:21:50Z", "type": "commit"}]}