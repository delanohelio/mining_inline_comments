{"pr_number": 1408, "pr_title": "DBZ-1949 Return BitSet instead of short/int/long", "pr_createdAt": "2020-04-13T17:47:49Z", "pr_url": "https://github.com/debezium/debezium/pull/1408", "timeline": [{"oid": "f68326218ba460598114609b24b98e573c25d603", "url": "https://github.com/debezium/debezium/commit/f68326218ba460598114609b24b98e573c25d603", "message": "DBZ-1949 Return byte array instead of short/int/long\n\nWhen converting Postgres bit varying column, convert to byte array\ninstead of short/int/long to handle cases where the value is larger than\nLong.MAX_VALUE", "committedDate": "2020-04-13T17:42:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzk3NA==", "url": "https://github.com/debezium/debezium/pull/1408#discussion_r408137974", "bodyText": "Why is it this got changed?", "author": "gunnarmorling", "createdAt": "2020-04-14T13:31:44Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/AbstractRecordsProducerTest.java", "diffHunk": "@@ -525,8 +525,9 @@ private Schema hstoreMapSchema() {\n     protected List<SchemaAndValueField> schemaAndValuesForBinTypes() {\n         return Arrays.asList(new SchemaAndValueField(\"ba\", Schema.OPTIONAL_BYTES_SCHEMA, ByteBuffer.wrap(new byte[]{ 1, 2, 3 })),\n                 new SchemaAndValueField(\"bol\", Schema.OPTIONAL_BOOLEAN_SCHEMA, false),\n-                new SchemaAndValueField(\"bs\", Bits.builder(2).optional().build(), new byte[]{ 3, 0 }), // bitsets get converted from two's complement", "originalCommit": "f68326218ba460598114609b24b98e573c25d603", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDQ5NQ==", "url": "https://github.com/debezium/debezium/pull/1408#discussion_r408954495", "bodyText": "Thanks for the review!\nThis was updated due to PostgresValueConverter.convertBits now using byte arrays only (no longer using short/int/long) and how debezium-core/src/main/java/io/debezium/jdbc/JdbcValueConverters.convertBits handles byte arrays vs short/int/long.\nIn the case of short/int/long, JdbcValueConverters.convertBits returns an array with length equal to the data type's length (2 for short, 4 for int, 8 for long) no matter if all elements are significant or not.\nIn the case of byte arrays, JdbcValueConverters.convertBits returns the array as is (except to convert to little-endian when necessary).\nA value of '11' in the database was translated to a short of 3 which would create an array of {0,3} with the 0 being insignificant. Now, it is translated directly to a byte array of {3}.\nPlease let me know if ive misunderstood anything. Thanks again", "author": "dajerome", "createdAt": "2020-04-15T15:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzMzYxNA==", "url": "https://github.com/debezium/debezium/pull/1408#discussion_r411333614", "bodyText": "Ok, understood. Yes, agreed that the leading 0 is non-significant and it makes sense to get rid of it. This made me realize though that there's a problem with the currently proposed change: it reverses the endian-ness of the produced data (i.e. the order of the byte array).\nThis becomes apparent when using some values longer than a byte (the previous test data is really lacking in that regard...). E.g. consider a value like B'000000110000001000000001' (bytes 3, 2 and 1). Before your change, it would have been emitted as [1, 2, 3, 0]. I.e. \"little-endian\", with least significant byte as the first. Whereas now, with your change, it's [3, 2, 1, 0]. It actually should be [1, 2, 3] (little-endian as before, insignificant 0's removed). This means the expected value for your new column should be [0, 0, 0, 0, 0, 0, 0, -128].\nNote the little-endian byte ordering seems a bit odd IMHO, but it's the existing behavior and it also is described as such in the connector docs. Hence we should stick to it, yet removing insignificant leading 0's.\nDoes that make sense?\n@jpechane, if you could double-check what I wrote, that'd be much appreciated. Thanks!", "author": "gunnarmorling", "createdAt": "2020-04-20T12:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1ODMzMA==", "url": "https://github.com/debezium/debezium/pull/1408#discussion_r411658330", "bodyText": "Thanks again for the review @gunnarmorling and nice catch. I have updated to use BitSet instead of BigInteger/byte arrays and added an additional test case.", "author": "dajerome", "createdAt": "2020-04-20T20:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzk3NA=="}], "type": "inlineReview"}, {"oid": "a1e7e0fcccae764d7264a1c4374755c77135ba12", "url": "https://github.com/debezium/debezium/commit/a1e7e0fcccae764d7264a1c4374755c77135ba12", "message": "DBZ-1949 Return BitSet instead of short/int/long\n\nWhen converting Postgres bit varying column, convert to BitSet\ninstead of short/int/long to handle cases where the value is larger than\nLong.MAX_VALUE", "committedDate": "2020-04-20T18:41:30Z", "type": "commit"}, {"oid": "7837e5c3c633388fa186714a51b6aaa8dfe684ce", "url": "https://github.com/debezium/debezium/commit/7837e5c3c633388fa186714a51b6aaa8dfe684ce", "message": "DBZ-1949 Resolve formatting issues", "committedDate": "2020-04-20T19:19:31Z", "type": "commit"}]}