{"pr_number": 1928, "pr_title": "DBZ-2724 DBZ-2602 Add integration tests for DBZ-2617 and migrate Testcontainers related changes on DebeziumContainer from UI PoC backend", "pr_createdAt": "2020-11-04T10:07:56Z", "pr_url": "https://github.com/debezium/debezium/pull/1928", "timeline": [{"oid": "d6c78642191ad9400717bdaa4466ea2e14c8c0be", "url": "https://github.com/debezium/debezium/commit/d6c78642191ad9400717bdaa4466ea2e14c8c0be", "message": "DBZ-2724 Add integration tests for DBZ-2617 (fix Postgres was not able to shutdown with shutdown mode \"fast\")\nDBZ-2602 Migrate Testcontainers related changes on DebeziumContainer from UI PoC backend to Debezium main repo", "committedDate": "2020-11-04T10:00:38Z", "type": "commit"}, {"oid": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "url": "https://github.com/debezium/debezium/commit/4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "message": "DBZ-2724 unrelated cleanup", "committedDate": "2020-11-04T10:02:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMTIzMg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517231232", "bodyText": "unrelated cleanup in separate commit", "author": "rk3rn3r", "createdAt": "2020-11-04T10:08:38Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresChangeRecordEmitter.java", "diffHunk": "@@ -273,7 +273,7 @@ private boolean schemaChanged(List<ReplicationMessage.Column> columns, Table tab\n \n         // go through the list of columns from the message to figure out if any of them are new or have changed their type based\n         // on what we have in the table metadata....\n-        return columns.stream().filter(message -> {\n+        return columns.stream().anyMatch(message -> {", "originalCommit": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMTMyNA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517231324", "bodyText": "unrelated cleanup in separate commit", "author": "rk3rn3r", "createdAt": "2020-11-04T10:08:48Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "diffHunk": "@@ -224,16 +224,15 @@ else if (message.getOperation() == Operation.COMMIT) {\n                     offsetContext.updateWalPosition(lsn, lastCompletelyProcessedLsn, message.getCommitTime(), message.getTransactionId(), tableId,\n                             taskContext.getSlotXmin(connection));\n \n-                    boolean dispatched = (message.getOperation() == Operation.NOOP) ? false\n-                            : dispatcher.dispatchDataChangeEvent(\n-                                    tableId,\n-                                    new PostgresChangeRecordEmitter(\n-                                            offsetContext,\n-                                            clock,\n-                                            connectorConfig,\n-                                            schema,\n-                                            connection,\n-                                            message));\n+                    boolean dispatched = message.getOperation() != Operation.NOOP && dispatcher.dispatchDataChangeEvent(", "originalCommit": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMjMzNg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517232336", "bodyText": "unrelated change (1000 seconds is about 16,6 minutes) but I think we don't have to wait so long? wdyt?", "author": "rk3rn3r", "createdAt": "2020-11-04T10:10:26Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -353,7 +354,7 @@ public void taskStarted() {\n             engine.run();\n         });\n         try {\n-            if (!latch.await(1000, TimeUnit.SECONDS)) {\n+            if (!latch.await(5, TimeUnit.MINUTES)) {", "originalCommit": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNDcxNA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517234714", "bodyText": "Not sure, but maybe this could be <scope>provided</scope> , but I'm not sure about it. Also debezium-testing-testcontainers is only a test scope dependency it should not impact production JARs negatively, wdyt?", "author": "rk3rn3r", "createdAt": "2020-11-04T10:14:27Z", "path": "debezium-testing/debezium-testing-testcontainers/pom.xml", "diffHunk": "@@ -41,6 +41,10 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-databind</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>postgresql</artifactId>", "originalCommit": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4OTU1Ng==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517289556", "bodyText": "Why it can't saty test scope as it was before?", "author": "jpechane", "createdAt": "2020-11-04T11:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NTgwNA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517385804", "bodyText": "Because it is used in ./src/ now.", "author": "rk3rn3r", "createdAt": "2020-11-04T14:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNDcxNA=="}], "type": "inlineReview"}, {"oid": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "url": "https://github.com/debezium/debezium/commit/0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "message": "DBZ-2724 add missing license file header and class doc", "committedDate": "2020-11-04T10:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTAzOA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517279038", "bodyText": "Should not be here test scope too?", "author": "jpechane", "createdAt": "2020-11-04T11:31:02Z", "path": "debezium-connector-postgres/pom.xml", "diffHunk": "@@ -108,6 +108,16 @@\n             <artifactId>kafka-connect-avro-converter</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-testing-testcontainers</artifactId>\n+            <version>${project.version}</version>", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1Mzc4OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517353788", "bodyText": "Yep", "author": "rk3rn3r", "createdAt": "2020-11-04T13:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NDkzMg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517284932", "bodyText": "I think you should read the property value and set it to the previous one not making any assumptions", "author": "jpechane", "createdAt": "2020-11-04T11:42:42Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTA1Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517351053", "bodyText": "Good point.", "author": "rk3rn3r", "createdAt": "2020-11-04T13:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTQ2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517285469", "bodyText": "Check io.debezium.jdbc.JdbcConnection.singleResultMapper(ResultSetExtractor<T>, String)", "author": "jpechane", "createdAt": "2020-11-04T11:43:45Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2OTY5NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517369695", "bodyText": "That makes it easier! Thx", "author": "rk3rn3r", "createdAt": "2020-11-04T14:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTg1Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517285853", "bodyText": "Please derive it from io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "author": "jpechane", "createdAt": "2020-11-04T11:44:30Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjA0Mg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286042", "bodyText": "System.out should not be used", "author": "jpechane", "createdAt": "2020-11-04T11:44:54Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MjcyMA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517372720", "bodyText": "Ooops!", "author": "rk3rn3r", "createdAt": "2020-11-04T14:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjIzMw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286233", "bodyText": "See mapper above", "author": "jpechane", "createdAt": "2020-11-04T11:45:16Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjM2NA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286364", "bodyText": "System.out", "author": "jpechane", "createdAt": "2020-11-04T11:45:36Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjQ4Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286487", "bodyText": "System.out", "author": "jpechane", "createdAt": "2020-11-04T11:45:50Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");\n+        Container.ExecResult result = infrastructure.getPostgresContainer()\n+                .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n+        System.out.println(result.toString());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4Njk5OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286999", "bodyText": "Please derive it from io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "author": "jpechane", "createdAt": "2020-11-04T11:46:46Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");\n+        Container.ExecResult result = infrastructure.getPostgresContainer()\n+                .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n+        System.out.println(result.toString());\n+\n+        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        waitForPostgresShutdown();\n+\n+        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+    }\n+\n+    private void waitForPostgresShutdown() {\n+        Awaitility.await()\n+                .pollInterval(200, TimeUnit.MILLISECONDS)\n+                .atMost(2, TimeUnit.MINUTES)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODI2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517288269", "bodyText": "As you are doing the unrelated changes please again replace it with a value derived from configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T11:49:14Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -1052,12 +1053,23 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n                 .atMost(60, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NjAxOA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518686018", "bodyText": "will do", "author": "rk3rn3r", "createdAt": "2020-11-06T11:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODgwNA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517288804", "bodyText": "Channge to call of isStreamingRunning", "author": "jpechane", "createdAt": "2020-11-04T11:50:16Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -1052,12 +1053,23 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n                 .atMost(60, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> {\n-                    boolean connected = (boolean) mbeanServer\n-                            .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\");\n+                .until(() -> (boolean) mbeanServer", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4OTgwMg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517289802", "bodyText": "final", "author": "jpechane", "createdAt": "2020-11-04T11:52:14Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java", "diffHunk": "@@ -18,11 +18,11 @@\n  */\n public class ConnectorConfiguration {\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n     private final ObjectNode configNode;\n \n     protected ConnectorConfiguration() {\n-        this.configNode = this.mapper.createObjectNode();\n+        ObjectMapper mapper = new ObjectMapper();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDE2OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517290168", "bodyText": "Should be KAFKA_CONNECT_PORT?", "author": "jpechane", "createdAt": "2020-11-04T11:53:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -68,10 +77,42 @@ public DebeziumContainer withKafka(final Network network, final String bootstrap\n         return self();\n     }\n \n+    public String getTarget() {\n+        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MTM1Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517391357", "bodyText": "That's the same method as before it just moved up. the env var is container specific. this code uses the Testcontainers API to get the correct values.", "author": "rk3rn3r", "createdAt": "2020-11-04T14:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDk5MA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517290990", "bodyText": "final", "author": "jpechane", "createdAt": "2020-11-04T11:54:40Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTUwOA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517291508", "bodyText": "Is it necessary? You use try with resources. Then you can also use only return without helper variable.", "author": "jpechane", "createdAt": "2020-11-04T11:55:39Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwNjgzMQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517406831", "bodyText": "I thought that as well, but there were warnings when I introduced it without the manual closing about not closing it properly (with quarkus + resteasy) and they were gone after adding it everywhere.", "author": "rk3rn3r", "createdAt": "2020-11-04T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MjE5MQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517292191", "bodyText": "Make it configurable - mind CI", "author": "jpechane", "createdAt": "2020-11-04T11:56:56Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293169", "bodyText": "final", "author": "jpechane", "createdAt": "2020-11-04T11:58:47Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzUwOQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293509", "bodyText": "Method signature contains IOException - why do you encapsulate it?", "author": "jpechane", "createdAt": "2020-11-04T11:59:23Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjQ5MA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518642490", "bodyText": "The signature was old code, I removed the exception on the signature now. This is used for integration testing. When we are not able to talk to the Container it should imo be a RuntimeException and fail because the reason can only be a wrong state created by the testing code.", "author": "rk3rn3r", "createdAt": "2020-11-06T09:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzc2NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293765", "bodyText": "Try with resources", "author": "jpechane", "createdAt": "2020-11-04T11:59:51Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMDIzNw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517410237", "bodyText": "see above", "author": "rk3rn3r", "createdAt": "2020-11-04T15:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzk1NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293955", "bodyText": "Try with resources", "author": "jpechane", "createdAt": "2020-11-04T12:00:12Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDE0MQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294141", "bodyText": "Configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T12:00:34Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MDQ2Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518690463", "bodyText": "Done", "author": "rk3rn3r", "createdAt": "2020-11-06T11:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDMzMw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294333", "bodyText": "Configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T12:00:57Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NDI3Mg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518644272", "bodyText": "same as above", "author": "rk3rn3r", "createdAt": "2020-11-06T10:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDc0Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294747", "bodyText": "final", "author": "jpechane", "createdAt": "2020-11-04T12:01:47Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDkxMQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294911", "bodyText": "Use try witf resorces", "author": "jpechane", "createdAt": "2020-11-04T12:02:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTA1OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295059", "bodyText": "final", "author": "jpechane", "createdAt": "2020-11-04T12:02:23Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTE4NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295185", "bodyText": "try with resources", "author": "jpechane", "createdAt": "2020-11-04T12:02:39Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295369", "bodyText": "Configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T12:03:00Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM5OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295398", "bodyText": "Configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T12:03:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n+    }\n+\n+    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NDc1Ng==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518644756", "bodyText": "same here as well", "author": "rk3rn3r", "createdAt": "2020-11-06T10:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTQ4OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295488", "bodyText": "Configurable timeout", "author": "jpechane", "createdAt": "2020-11-04T12:03:16Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n+    }\n+\n+    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == status);\n+    }\n+\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTE1NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518645155", "bodyText": "same here", "author": "rk3rn3r", "createdAt": "2020-11-06T10:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTQ4OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "db1013080455093ef5190c940a0da6c9d94132a1", "url": "https://github.com/debezium/debezium/commit/db1013080455093ef5190c940a0da6c9d94132a1", "message": "DBZ-2724 cleanup code and apply PR feedback", "committedDate": "2020-11-09T12:49:10Z", "type": "commit"}, {"oid": "db1013080455093ef5190c940a0da6c9d94132a1", "url": "https://github.com/debezium/debezium/commit/db1013080455093ef5190c940a0da6c9d94132a1", "message": "DBZ-2724 cleanup code and apply PR feedback", "committedDate": "2020-11-09T12:49:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4Mjk0OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r519782948", "bodyText": "@jpechane it says isStreamingRunning(String, String) is not a defined symbol.\nBut AbstractConnectorTest which has isStreamingRunning is the parent class.\nWth am I doing wrong? I'm blind to whatever mistake I did....", "author": "rk3rn3r", "createdAt": "2020-11-09T12:51:00Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.connector.postgresql.connection.PostgresConnection;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+    private String oldContainerPort;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        oldContainerPort = System.getProperty(\"database.port\", \"5432\");\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", oldContainerPort);\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        logger.info(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n+        Container.ExecResult result = infrastructure.getPostgresContainer()\n+                .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n+        logger.info(result.toString());\n+\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n+        waitForPostgresShutdown();\n+\n+        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));", "originalCommit": "db1013080455093ef5190c940a0da6c9d94132a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MzIxNg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r519783216", "bodyText": "@jpechane  but it's defined here.", "author": "rk3rn3r", "createdAt": "2020-11-09T12:51:30Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -1044,20 +1050,28 @@ public static void waitForStreamingRunning(String connector, String server) thro\n         waitForStreamingRunning(connector, server, \"streaming\");\n     }\n \n-    public static void waitForStreamingRunning(String connector, String server, String contextName) throws InterruptedException {\n-        final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n+    public static void waitForStreamingRunning(String connector, String server, String contextName) {\n         Awaitility.await()\n                 .alias(\"Streaming was not started on time\")\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n-                .atMost(60, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> {\n-                    boolean connected = (boolean) mbeanServer\n-                            .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\");\n+                .until(() -> isStreamingRunning(connector, server, contextName));\n+    }\n \n-                    return connected;\n-                });\n+    public static boolean isStreamingRunning(String connector, String server) {", "originalCommit": "db1013080455093ef5190c940a0da6c9d94132a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}