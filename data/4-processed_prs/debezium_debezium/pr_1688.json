{"pr_number": 1688, "pr_title": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming", "pr_createdAt": "2020-07-09T17:47:43Z", "pr_url": "https://github.com/debezium/debezium/pull/1688", "timeline": [{"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "url": "https://github.com/debezium/debezium/commit/8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "message": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming", "committedDate": "2020-07-09T17:57:21Z", "type": "commit"}, {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "url": "https://github.com/debezium/debezium/commit/8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "message": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming", "committedDate": "2020-07-09T17:57:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NzA2OQ==", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452467069", "bodyText": "I think we did 100ms elsewhere for shorter turn-around.", "author": "gunnarmorling", "createdAt": "2020-07-09T20:20:06Z", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {", "originalCommit": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2OTYyNw==", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452469627", "bodyText": "Can the original exception be passed?", "author": "gunnarmorling", "createdAt": "2020-07-09T20:25:14Z", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {\n+                        if (!connection.getMaxLsn().isAvailable()) {\n+                            return false;\n+                        }\n+\n+                        for (SqlServerChangeTable ct : connection.listOfChangeTables()) {\n+                            final String ctTableName = ct.getChangeTableId().table();\n+                            if (ctTableName.endsWith(\"dbo_\" + connection.getNameOfChangeTable(tableName))) {\n+                                try {\n+                                    final Lsn minLsn = connection.getMinLsn(ctTableName);\n+                                    final Lsn maxLsn = connection.getMaxLsn();\n+                                    final AtomicReference<Boolean> found = new AtomicReference(false);\n+                                    SqlServerChangeTable[] tables = Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});\n+                                    connection.getChangesForTables(tables, minLsn, maxLsn, resultsets -> {\n+                                        final ResultSet rs = resultsets[0];\n+                                        while (rs.next()) {\n+                                            if (handler.apply(rs)) {\n+                                                found.set(true);\n+                                                break;\n+                                            }\n+                                        }\n+                                    });\n+                                    return found.get();\n+                                }\n+                                catch (Exception e) {\n+                                    if (e.getMessage().contains(\"An insufficient number of arguments were supplied\")) {\n+                                        // This can happen if the request to get changes for tables happens too quickly.\n+                                        // In this case, we're going to ignore it.\n+                                        return false;\n+                                    }\n+                                    org.junit.Assert.fail(\"Failed to fetch changes for \" + tableName + \": \" + e.getMessage());", "originalCommit": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MDMxNg==", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452470316", "bodyText": "Extracting a method might help to avoid having to modify the atomic reference as a side-effect. We do that elsewhere too and I generally don't really like it.", "author": "gunnarmorling", "createdAt": "2020-07-09T20:26:34Z", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {\n+                        if (!connection.getMaxLsn().isAvailable()) {\n+                            return false;\n+                        }\n+\n+                        for (SqlServerChangeTable ct : connection.listOfChangeTables()) {\n+                            final String ctTableName = ct.getChangeTableId().table();\n+                            if (ctTableName.endsWith(\"dbo_\" + connection.getNameOfChangeTable(tableName))) {\n+                                try {\n+                                    final Lsn minLsn = connection.getMinLsn(ctTableName);\n+                                    final Lsn maxLsn = connection.getMaxLsn();\n+                                    final AtomicReference<Boolean> found = new AtomicReference(false);\n+                                    SqlServerChangeTable[] tables = Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});\n+                                    connection.getChangesForTables(tables, minLsn, maxLsn, resultsets -> {\n+                                        final ResultSet rs = resultsets[0];\n+                                        while (rs.next()) {\n+                                            if (handler.apply(rs)) {\n+                                                found.set(true);", "originalCommit": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "94b10c3732b9db8b81df87f41504ec203ee068d1", "url": "https://github.com/debezium/debezium/commit/94b10c3732b9db8b81df87f41504ec203ee068d1", "message": "DBZ-2324 Suggested changes", "committedDate": "2020-07-10T13:47:13Z", "type": "commit"}]}