{"pr_number": 1454, "pr_title": "DBZ-1969 Add support for enum arrays", "pr_createdAt": "2020-04-27T19:38:58Z", "pr_url": "https://github.com/debezium/debezium/pull/1454", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416946255", "bodyText": "This test isn't working for some reason. After adding a bunch of logging, it looks like my type registry is getting cleared out or something. I see the enum array type get added to the type registry, but at some point it is no longer in my type registry. Any ideas here?", "author": "bradengroom", "createdAt": "2020-04-28T21:52:18Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -2088,6 +2088,100 @@ public void shouldStreamEnumAsKnownType() throws Exception {\n         assertThat(consumer.isEmpty()).isTrue();\n     }\n \n+    // @Test\n+    // public void shouldStreamEnumArrayAsKnownType() throws Exception {\n+    // // Specifically enable `column.propagate.source.type` here to validate later that the actual\n+    // // type, length, and scale values are resolved correctly when paired with Enum types.\n+    // TestHelper.execute(\"CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk));\");\n+    // startConnector(config -> config\n+    // .with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES, true)\n+    // .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+    // .with(\"column.propagate.source.type\", \"public.enum_array_table.value\")\n+    // .with(PostgresConnectorConfig.TABLE_WHITELIST, \"public.enum_array_table\"), false);\n+\n+    // waitForStreamingToStart();\n+\n+    // // We create the enum type after streaming started to simulate some future schema change\n+\n+    // TestHelper.execute(\"CREATE TYPE test_type AS ENUM ('V1','V2');\");\n+    // TestHelper.execute(\"ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0MjkyMg==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417042922", "bodyText": "Things seem to work fine if I create the type before the table for some reason. Creating the table and then adding the type later results in:\norg.junit.ComparisonFailure: [field name: value] expected:<'{\"type\" : \"[ARRAY\", \"optional\" : \"false\", \"value\" : {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}]}'> but was:<'{\"type\" : \"[BYTES\", \"optional\" : \"false\"]}'>", "author": "bradengroom", "createdAt": "2020-04-29T03:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MjMwMw==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417052303", "bodyText": "Aaaaah. I think I know why this doesn't work when altering the table. There's a mechanism for resolving unknown types in the type registry. It looks like it's only hooked up to work with non array types. I think that's my issue.", "author": "bradengroom", "createdAt": "2020-04-29T03:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA4MzQ5Mg==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417083492", "bodyText": "Yup, that did it \ud83d\ude00\n9cf96c3", "author": "bradengroom", "createdAt": "2020-04-29T06:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416946943", "bodyText": "This is returning false for some reason, but I'm not sure why. The values appear to be the same when I print them:\nvalueSchemasEqual: false\nSCHEMA 1: {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}\nSCHEMA 2: {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}\n\nAny ideas?", "author": "bradengroom", "createdAt": "2020-04-28T21:53:52Z", "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,11 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            // TODO:\n+            // valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NzQzMg==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417057432", "bodyText": "Correct me if I'm wrong, but I think the issue here is that this testing code assumes the objects for schema1 and schema2 will be the same. We're comparing by reference instead of value. I think this has been okay so far because other tests that hit this branch use a shared constant like SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA). This isn't true for my case, so this falls apart. I think I just have to make this comparison logic compare by value rather than reference.", "author": "bradengroom", "createdAt": "2020-04-29T04:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1ODQxMw==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417058413", "bodyText": "I imagine there might be a better way of doing this, but I'll start with this and see what suggestions others might have.\nc9c8b0a", "author": "bradengroom", "createdAt": "2020-04-29T04:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTYzMw==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417201633", "bodyText": "I think it failed because the expected value for the UPDATE case was not correct: the schema parameters should still be V1,V2, also after the UPDATE, as it only affects the actual column value, but not the allowed enum constants. I've pushed a commit for adjusting this.", "author": "gunnarmorling", "createdAt": "2020-04-29T10:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzY4Mw==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416947683", "bodyText": "I had to add this or else my test would just get an array of bytes. It looks like this file is responsible for the protobuf decoder? Do I need to do anything to make sure things work with native logical replication & wal2json?", "author": "bradengroom", "createdAt": "2020-04-28T21:55:34Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/pgproto/PgProtoColumnValue.java", "diffHunk": "@@ -325,6 +325,9 @@ public Object asDefault(TypeRegistry typeRegistry, int columnType, String column\n                 type.getOid() == typeRegistry.hstoreArrayOid()) {\n             return asArray(columnName, type, fullType, connection);\n         }\n+        if (type.isArrayType() && type.getElementType().isEnumType()) {\n+            return asArray(columnName, type, fullType, connection);\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5MTE3Ng==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417191176", "bodyText": "That's a good catch, call flow shouldn't get here for an array type in the first place. I've pushed a commit for rectifying this, fixing the isArray() method which didn't handle these types correctly.", "author": "gunnarmorling", "createdAt": "2020-04-29T09:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzY4Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMDk4NA==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417200984", "bodyText": "I've pushed a commit for changing the previous string-based comparison to calling this method again for the value schema. It revealed one glitch in the expected schema for the UPDATE case. Could you double-check that last commit I've added? Thanks!", "author": "gunnarmorling", "createdAt": "2020-04-29T10:01:24Z", "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,7 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            valueSchemasEqual = areConnectSchemasEqual(schema1.valueSchema(), schema2.valueSchema());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2MDE1OA==", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417360158", "bodyText": "Ah, I don't know why I didn't think to just recurse on this method. This seems like the way to go. Thanks!", "author": "bradengroom", "createdAt": "2020-04-29T14:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMDk4NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "2ff60dd30df5e21322734ee4be90a791d2428cc1", "url": "https://github.com/debezium/debezium/commit/2ff60dd30df5e21322734ee4be90a791d2428cc1", "message": "DBZ-1969 Add support for Postgres enum arrays", "committedDate": "2020-04-29T14:52:16Z", "type": "commit"}, {"oid": "8ced6dc2276ec53436ad30c08ab562b54451ec7a", "url": "https://github.com/debezium/debezium/commit/8ced6dc2276ec53436ad30c08ab562b54451ec7a", "message": "DBZ-1969 Simplifying array handling in PgProtoColumnValue", "committedDate": "2020-04-29T14:52:24Z", "type": "commit"}, {"oid": "34a8651b60c18a9356dd6fc3b4afd53de7bf74e7", "url": "https://github.com/debezium/debezium/commit/34a8651b60c18a9356dd6fc3b4afd53de7bf74e7", "message": "DBZ-1969 Fixing incorrect assertion and utility which concealed this", "committedDate": "2020-04-29T14:52:24Z", "type": "commit"}, {"oid": "34a8651b60c18a9356dd6fc3b4afd53de7bf74e7", "url": "https://github.com/debezium/debezium/commit/34a8651b60c18a9356dd6fc3b4afd53de7bf74e7", "message": "DBZ-1969 Fixing incorrect assertion and utility which concealed this", "committedDate": "2020-04-29T14:52:24Z", "type": "forcePushed"}, {"oid": "31aafd091a8fcc8f606a00c87377b35d7c010be4", "url": "https://github.com/debezium/debezium/commit/31aafd091a8fcc8f606a00c87377b35d7c010be4", "message": "DBZ-1969 Have isArray return false for Postgres LTree arrays", "committedDate": "2020-04-29T15:43:08Z", "type": "commit"}, {"oid": "622c8d672a953cedaa65b17110158ff741905b9f", "url": "https://github.com/debezium/debezium/commit/622c8d672a953cedaa65b17110158ff741905b9f", "message": "DBZ-1969 Update convertLtreeArray to handle List instances", "committedDate": "2020-04-29T16:22:05Z", "type": "commit"}]}