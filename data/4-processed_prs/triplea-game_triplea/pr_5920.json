{"pr_number": 5920, "pr_title": "Simplify token parsing", "pr_createdAt": "2020-02-09T14:13:17Z", "pr_url": "https://github.com/triplea-game/triplea/pull/5920", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTc1MQ==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851751", "bodyText": "Any objection to adding a comment to explain this regex a bit and give an example of what it matches?\nCan we simplify the regex, does it have to be this long or maybe strict? It is a bit scary looking and seems to be more specified than what we had. I'm not sure if we need it to be extremely \"strict\".", "author": "DanVanAtta", "createdAt": "2020-02-15T19:41:58Z", "path": "game-core/src/main/java/games/strategy/engine/random/MartiDiceRoller.java", "diffHunk": "@@ -35,12 +35,15 @@\n import org.apache.http.util.EntityUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n-@Log\n @Builder\n public final class MartiDiceRoller implements IRemoteDiceServer {\n   private static final int MESSAGE_MAX_LENGTH = 200;\n   private static final String DICE_ROLLER_PATH = \"/MARTI.php\";\n \n+  private final Pattern errorPattern = Pattern.compile(\"fatal error:(.*)!\");\n+  private final Pattern dicePattern =\n+      Pattern.compile(\"your dice are:\\\\s*((?:\\\\d(?:,\\\\d+)*)?)\\\\s*<p>\");", "originalCommit": "0f5284cf242257eb2d3a585fbdd398eadbd5d389", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjQxMw==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379852413", "bodyText": "The \"benefit\" of this regex being rather strict is that it allows us to avoid any further exception handling down below.\nSo we could of course simply it quite a bit, but would then have to re-introduce a try catch block below that rethrows an exception.\nBut yeah adding a comment is a good idea", "author": "RoiEXLab", "createdAt": "2020-02-15T19:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTg2NQ==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851865", "bodyText": "nit, missing either display name and/or assertion comment to explain why we expect this test to pass. I'd lean to an assertion comment personally to spell it out a bit.", "author": "DanVanAtta", "createdAt": "2020-02-15T19:43:44Z", "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {", "originalCommit": "0f5284cf242257eb2d3a585fbdd398eadbd5d389", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTk5Mg==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851992", "bodyText": "nit, potentially over-specified test-case here. It's often not best to look for exact exception messages, instead if we check that key information is in the exception message than we get more flexibility. For example, we may want to change the message to be `Email 'user@mail.invalid' is not registered', which would fail this test. If we check instead that the marti URL and email address are present, then we are pretty sure the message is sufficient.\nSecond, the marti URL being hardcode is potentially something that is likely to change at some point, is there a constant somewhere that represents the same?", "author": "DanVanAtta", "createdAt": "2020-02-15T19:46:03Z", "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {\n+    final Integer[] dice =\n+        Arrays.stream(martiDiceRoller.getDice(successMessage, 0)).boxed().toArray(Integer[]::new);\n+\n+    assertThat(dice, is(array(equalTo(1), equalTo(4), equalTo(0))));\n+  }\n+\n+  @Test\n+  void unsuccessfulMessageExtraction() {\n+    final Exception exception =\n+        assertThrows(\n+            InvocationTargetException.class, () -> martiDiceRoller.getDice(failureMessage, 0));\n+    assertThat(\n+        exception.getMessage(),\n+        is(\n+            \" Emails [user@mail.invalid] are not registered.\"", "originalCommit": "0f5284cf242257eb2d3a585fbdd398eadbd5d389", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjkyOA==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379852928", "bodyText": "I had mixed feelings when writing the test cases.\nMy number one goal was to ensure nothing breaks with this change. That's why I simply went ahead an just copy-pasted an actual response from MARTI (and changed the email afterwards) to ensure that 1. the tests work with the original code and 2. they work with my new code which so we can be rather sure that nothing breaks.\nAfter that I wasn't sure if I should simplify the test to make it more readable, but also lose some of the safety guarantees", "author": "RoiEXLab", "createdAt": "2020-02-15T20:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTc0NA==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379855744", "bodyText": "That's a good approach in general, I think we can relax the assertions made in this line without losing that or over-simplifying.", "author": "DanVanAtta", "createdAt": "2020-02-15T20:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379852046", "bodyText": "Why is this assertion useful? Is it needed for correctness that the exception thrown have no cause?\nSide-note, it's really questionable already we are using exception for control-flow handling. The exception being thrown makes it hard to tell if we are seeing a case where the dice-roller is down, no network, or the totally expected case where a user is not yet registered.", "author": "DanVanAtta", "createdAt": "2020-02-15T19:47:08Z", "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {\n+    final Integer[] dice =\n+        Arrays.stream(martiDiceRoller.getDice(successMessage, 0)).boxed().toArray(Integer[]::new);\n+\n+    assertThat(dice, is(array(equalTo(1), equalTo(4), equalTo(0))));\n+  }\n+\n+  @Test\n+  void unsuccessfulMessageExtraction() {\n+    final Exception exception =\n+        assertThrows(\n+            InvocationTargetException.class, () -> martiDiceRoller.getDice(failureMessage, 0));\n+    assertThat(\n+        exception.getMessage(),\n+        is(\n+            \" Emails [user@mail.invalid] are not registered.\"\n+                + \" Please register them at https://dice.marti.triplea-game.org/register.php .\"));\n+    assertThat(exception.getCause(), is(nullValue()));", "originalCommit": "0f5284cf242257eb2d3a585fbdd398eadbd5d389", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzQwMQ==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379853401", "bodyText": "Not really, it only sort-of ensures that this isn't some generic InvocationTargetException that is actually thrown for some legitimate reason.\nI mean I'm convinced the designers of InvocationTargetException made the cause a mandatory argument for a reason in the constructor, in 99% of all cases there should be a cause", "author": "RoiEXLab", "createdAt": "2020-02-15T20:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTgzOQ==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379855839", "bodyText": "Hmm, isn't 99% of all cases a user not being registered? It seems like almost everyone hits that case and before this exception message was the thing to tell you to register. It was a common problem that people would not grok the error message and were just left confused how to make the system work.\nOverall, I think the root problem is we are dealing with control-flow-by-exception-handling anti-pattern.\nIf we are verifying those criteria, we can add messages to the assertion to document the reasoning and perhaps check the instance of the exception as well.", "author": "DanVanAtta", "createdAt": "2020-02-15T21:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1Nzc5NQ==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379857795", "bodyText": "Do you think it would help using an unchecked custom exception and throwing that and just catching a generic RuntimeException somewhere else?\nIn this case neither the exception message nor any exception causes would be relevant", "author": "RoiEXLab", "createdAt": "2020-02-15T21:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1OTY0Nw==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379859647", "bodyText": "My thinking, at a low level, there should be something that does the send test and returns a payload that has an error message or a success flag. Any exception would then be for cases where we can't connect or cannot send. If there is a difference in how we would recover from such a scenario, then different exceptions would be appropriate.\nCatching unchecked exceptions, or throwing a custom exception and then doing a catch-all to catch any runtime exception does not seem super easy to grok. Exceptions are effectively glorified GOTO statements after-all.\nGetting back to this test case, I think the things to do, to make the test clear, would be:\n\n\nadd an assertion comment to explain why we are verifying the condition. You stated so much in response to my questions earlier: \"it only sort-of ensures that this isn't some generic InvocationTargetException that is actually thrown for some legitimate reason.\"\n\n\nPerhaps also verify the instance type of the exception is an InvocationTargetException", "author": "DanVanAtta", "createdAt": "2020-02-15T22:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5NDk0NA==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r382094944", "bodyText": "@DanVanAtta I re-did some of the Exceptions.\nBasically explicit server error messages like \"wrong/missing email\" etc. now have their own exception type and the code has to explicitly catch that.\nSemantic Errors like the server returning an invalid string that doesn't match the pattern is now treated as IllegalStateException, never explicitly caught and is supposed to be a likely programmer error.\nAll kind of network related exceptions are now treaded as such. As user-fixable errors and provides a link to the forum in case the error doesn't go away.\nLet me know what you think, I tested all 3 scenarios (by changing the source code to invalid servers/URLs and entering non existing emails) and I believe the error pop-up seems appropriate in each case and provides the right amount of information to debug the issue.", "author": "RoiEXLab", "createdAt": "2020-02-20T16:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng=="}], "type": "inlineReview"}, {"oid": "75af4fb908717202aee9bc451c88cf1884b88c35", "url": "https://github.com/triplea-game/triplea/commit/75af4fb908717202aee9bc451c88cf1884b88c35", "message": "Add characterisation tests", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "5eb281c4eac57149f0529a0c909e74d25e8842de", "url": "https://github.com/triplea-game/triplea/commit/5eb281c4eac57149f0529a0c909e74d25e8842de", "message": "Use regex instead of custom substring logic", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "bbc571c42c8c4c862ac64050a3de377f0b878dca", "url": "https://github.com/triplea-game/triplea/commit/bbc571c42c8c4c862ac64050a3de377f0b878dca", "message": "Fix checkstyle", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "7e2350a2931c7f1a7f5be959bdfcd68bbfe9f6f3", "url": "https://github.com/triplea-game/triplea/commit/7e2350a2931c7f1a7f5be959bdfcd68bbfe9f6f3", "message": "Add comment explaining RegEx", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "5be20202db5c81b421d23fee9c5240f503705175", "url": "https://github.com/triplea-game/triplea/commit/5be20202db5c81b421d23fee9c5240f503705175", "message": "Simplify Test Strings & Rename Test Methods", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3", "url": "https://github.com/triplea-game/triplea/commit/c1ee406d4c51feb36653cb31f7b46dacac68bba3", "message": "Redo Exception flow", "committedDate": "2020-02-20T15:38:07Z", "type": "commit"}, {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3", "url": "https://github.com/triplea-game/triplea/commit/c1ee406d4c51feb36653cb31f7b46dacac68bba3", "message": "Redo Exception flow", "committedDate": "2020-02-20T15:38:07Z", "type": "forcePushed"}, {"oid": "8df5c772addee7a6490a7bcc2b8196dda7cc9043", "url": "https://github.com/triplea-game/triplea/commit/8df5c772addee7a6490a7bcc2b8196dda7cc9043", "message": "Add precondition", "committedDate": "2020-02-20T16:04:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4ODkxMg==", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r382888912", "bodyText": "Nit, we should keep in mind the audience of exception messages. Things like \"String\" is geared towards a developer, would not otherwise make sense to an end user. They want to know what happened and what they should do about it if anything.\nWith that said, this exception type and message are fine for now. We may though want to consider creating some infrastructure that would suffix an error message with something like \"This is an unexpected error and indicates a bug. Please report this to TripleA development\"", "author": "DanVanAtta", "createdAt": "2020-02-22T05:45:02Z", "path": "game-core/src/main/java/games/strategy/engine/random/MartiDiceRoller.java", "diffHunk": "@@ -96,16 +95,15 @@ public String postRequest(\n   }\n \n   @Override\n-  public int[] getDice(final String string, final int count)\n-      throws IOException, InvocationTargetException {\n+  public int[] getDice(final String string, final int count) throws DiceServerException {\n     final Matcher errorMatcher = errorPattern.matcher(string);\n     if (errorMatcher.find()) {\n-      throw new InvocationTargetException(null, errorMatcher.group(1));\n+      throw new DiceServerException(errorMatcher.group(1));\n     }\n \n     final Matcher diceMatcher = dicePattern.matcher(string);\n     if (!diceMatcher.find()) {\n-      throw new IOException(\"String '\" + string + \"' has an invalid format.\");\n+      throw new IllegalStateException(\"String '\" + string + \"' has an invalid format.\");", "originalCommit": "c1ee406d4c51feb36653cb31f7b46dacac68bba3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}