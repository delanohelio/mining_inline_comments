{"pr_number": 7412, "pr_title": "Feature: Add ability for game client to download map listing from maps server", "pr_createdAt": "2020-08-22T05:06:06Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NzUxMQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047511", "bodyText": "This method is moved to a dedicated class.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:07:43Z", "path": "game-core/src/main/java/games/strategy/engine/ClientContext.java", "diffHunk": "@@ -55,11 +50,4 @@ public static DownloadCoordinator downloadCoordinator() {\n   public static Version engineVersion() {\n     return instance.productConfiguration.getVersion();\n   }\n-\n-  public static List<DownloadFileDescription> getMapDownloadList() {", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NzY2Ng==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047666", "bodyText": "The 'all args constructor' in this class is replaced by annotation.\nThe construction mechanism and overall this class was simplified and refactored.\nThere is a utility constructor that omits the 'image' parameter. That was removed by simplifying updating clients to use the all arg constructor, which in turn use the constructor defined by the lombok parameter. We then add a conversion constructor to go from a 'MapFileDownloadListing' to a 'DownloadListing'.\nOf note, we introduce a new class 'MapFileDownloadListing' so that we can transmit pure strings (no enums and no Version object) over network. This gives us more flexibility for compatibility, hence the need for a conversion constructor.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:09:36Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -3,14 +3,22 @@\n import com.google.common.base.MoreObjects;\n import games.strategy.engine.ClientFileSystemHelper;\n import java.io.File;\n+import java.util.Arrays;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import org.triplea.http.client.maps.listing.MapDownloadListing;\n import org.triplea.util.Version;\n \n /**\n  * This class represents the essential data for downloading a TripleA map. Where to get it, where to\n  * install it, version, etc..\n  */\n @EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+@Getter\n+@Builder\n+@AllArgsConstructor", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047752", "bodyText": "These 'from' methods are used by conversion constructor. Of note we create a 'default' case to map to an enum value to give us flexibiity in case we change this going in the forward and then old clients do not have the new values. In this case the new clients will use the default value.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:10:24Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -23,7 +31,17 @@\n   enum DownloadType {\n     MAP,\n     MAP_SKIN,\n-    MAP_TOOL\n+    MAP_TOOL;\n+\n+    static DownloadType fromString(final String type) {", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyMzA3Nw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475223077", "bodyText": "Would you mind adding this information to the javadoc?", "author": "RoiEXLab", "createdAt": "2020-08-23T13:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNTQ0MA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475235440", "bodyText": "I'm a little torn on this. On one hand it's good information. On the other we two things:\n\nIt should probably be convention for us to never use Enum.valueOf. It's gotten us into trouble before and it's kinda notorious if you add new elements and then have 'old' clients, it then causes errors. Hence, we should always be defaulting or allowing enum string representations to be empty. Any straight usages of \"Enum.valueOf\" for enums that have any possibility to change is a potential problem.\nThe visibility is class protected, could be private\n\nWould it be agreeable to add a note about this to our developer documentation? Such comments should apply to all enums, hence I'm hesitant to add the same boilerplate comment to each.", "author": "DanVanAtta", "createdAt": "2020-08-23T15:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNTUyMw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475235523", "bodyText": "Method visibility lowered to private in: 4b75d4c", "author": "DanVanAtta", "createdAt": "2020-08-23T15:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MDE0MQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475290141", "bodyText": "Hmm I mainly wanted to suggest documenting that the method returns \"MAP\" for unknown values instead of throwing an exception, not sure if this sort of API docuentation makes sense for private methods, but I still think it would be nice nevertheless", "author": "RoiEXLab", "createdAt": "2020-08-24T00:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwOTEwMg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475309102", "bodyText": "I'm not sure if it'd really just be faster to read the method to see it does not throw.\nFWIW, this method is updated soon and eventually goes away completely in a future revision.", "author": "DanVanAtta", "createdAt": "2020-08-24T02:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc3OA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047778", "bodyText": "All clients that used this constructor now use the all-args constructor directly.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:10:46Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -45,53 +63,26 @@\n     public String toString() {\n       return outputLabel;\n     }\n-  }\n-\n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory) {\n-    this(url, description, mapName, version, downloadType, mapCategory, \"\");", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzc5Mg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047792", "bodyText": "this constructor is replaced by lombok", "author": "DanVanAtta", "createdAt": "2020-08-22T05:10:56Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -45,53 +63,26 @@\n     public String toString() {\n       return outputLabel;\n     }\n-  }\n-\n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory) {\n-    this(url, description, mapName, version, downloadType, mapCategory, \"\");\n-  }\n \n-  DownloadFileDescription(", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NzgwOQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047809", "bodyText": "Getters are replaced by lombok", "author": "DanVanAtta", "createdAt": "2020-08-22T05:11:16Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -45,53 +63,26 @@\n     public String toString() {\n       return outputLabel;\n     }\n-  }\n-\n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory) {\n-    this(url, description, mapName, version, downloadType, mapCategory, \"\");\n-  }\n \n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory,\n-      final String img) {\n-    this.url = url;\n-    this.description = description;\n-    this.mapName = mapName;\n-    this.version = version;\n-    this.downloadType = downloadType;\n-    this.mapCategory = mapCategory;\n-    this.img = img;\n-  }\n-\n-  String getUrl() {\n-    return url;\n-  }\n-\n-  String getDescription() {\n-    return description;\n-  }\n-\n-  String getMapName() {\n-    return mapName;\n-  }\n-\n-  Version getVersion() {", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NzgyNg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047826", "bodyText": "This is the new conversion constructor, the main update to this class.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:11:32Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -45,53 +63,26 @@\n     public String toString() {\n       return outputLabel;\n     }\n-  }\n-\n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory) {\n-    this(url, description, mapName, version, downloadType, mapCategory, \"\");\n-  }\n \n-  DownloadFileDescription(\n-      final String url,\n-      final String description,\n-      final String mapName,\n-      final Version version,\n-      final DownloadType downloadType,\n-      final MapCategory mapCategory,\n-      final String img) {\n-    this.url = url;\n-    this.description = description;\n-    this.mapName = mapName;\n-    this.version = version;\n-    this.downloadType = downloadType;\n-    this.mapCategory = mapCategory;\n-    this.img = img;\n-  }\n-\n-  String getUrl() {\n-    return url;\n-  }\n-\n-  String getDescription() {\n-    return description;\n-  }\n-\n-  String getMapName() {\n-    return mapName;\n-  }\n-\n-  Version getVersion() {\n-    return version;\n+    static MapCategory fromString(final String category) {\n+      return Arrays.stream(values())\n+          .filter(mapCategory -> mapCategory.outputLabel.equalsIgnoreCase(category))\n+          .findAny()\n+          .orElse(EXPERIMENTAL);\n+    }\n   }\n \n-  MapCategory getMapCategory() {\n-    return mapCategory;\n+  public static DownloadFileDescription ofMapDownloadListing(", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0Nzg3NQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047875", "bodyText": "This is a bit of a fix. If we get an empty list and no other error, then clicking the 'download maps' button does nothing. Removing this filter at least has the button doing something, albeit we show an empty download maps window, but at least that is something.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:12:11Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadMapsWindow.java", "diffHunk": "@@ -217,7 +217,6 @@ private void initialize(final Collection<String> mapNames) {\n \n       Interruptibles.awaitResult(SingletonManager::getMapDownloadListInBackground)\n           .result\n-          .filter(not(Collection::isEmpty))", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0NzkzNw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475047937", "bodyText": "This 'if' statement is new and is logic to grab the map download listing from server (behind beta flag). The 'else' block is existing logic that is executed if the beta flag is not turned on (default)", "author": "DanVanAtta", "createdAt": "2020-08-22T05:13:06Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/listing/MapListingFetcher.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package games.strategy.engine.framework.map.listing;\n+\n+import games.strategy.engine.framework.map.download.DownloadFileDescription;\n+import games.strategy.engine.framework.map.download.DownloadRunnable;\n+import games.strategy.engine.framework.system.DevOverrides;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.http.client.maps.listing.MapDownloadListing;\n+import org.triplea.http.client.maps.listing.MapsListingClient;\n+import org.triplea.live.servers.LiveServersFetcher;\n+\n+/** Fetches the full listing of maps that are available for download. */\n+@UtilityClass\n+public class MapListingFetcher {\n+\n+  public static List<DownloadFileDescription> getMapDownloadList() {\n+    if (ClientSetting.useMapsServerBetaFeature.getValue().orElse(false)) {", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0ODEyNA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475048124", "bodyText": "This class is all new. Instead of creating client setting override settings that can get very tricky and involves radio buttons, instead we have a props file where we add values, comment them out, and then can uncomment them to activate them. I was looking at replicating the lobby server override setting and it would have been complex to replicate that for another server.\nThough, having a client setting config to allow all users switch between production and prerelease is still useful, so we want to be sure we keep in mind non-dev's that are testing our software and that they are given the proper override controls. For now and for maps server this seemed like the most easy & direct way to get overrides.", "author": "DanVanAtta", "createdAt": "2020-08-22T05:15:33Z", "path": "game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.system;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.java.Log;\n+\n+/**\n+ * Utility class to read override values present on local file system. These overrides are not meant\n+ * to be used by an end user but instead during development. If the file is present and if a\n+ * property has a value set, then we will use it.\n+ */\n+@UtilityClass\n+@Log\n+public class DevOverrides {\n+  private static final String OVERRIDE_FILE_NAME = \"dev-overrides.properties\";", "originalCommit": "ba92c137c151cbf50f7e88d78e5648d9774e2740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNDgxNA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475224814", "bodyText": "So just to get this straight: The \"regular user\" will not see another entry in client settings, correct?", "author": "RoiEXLab", "createdAt": "2020-08-23T14:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0ODEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNTk4Mg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475235982", "bodyText": "FWIW, being able to build an override mechanism was almost a compelling reason to merge the two servers together. This is an area where we see potential scaling problems.\nPutting that to the side, we will need a way for 'regular users', and really us, to be able to select between a prerelease and prod server. That could be as simple as a radio button, a free-form text field perhaps could do too. It might be feasible to have the override file available as part of the distribution, essentially a properties file. I think the latter might be best so we can keep the coding a bit simpler. The current fields to override the lobby server are pretty involved, making that generic would be doable but I think would be very complex.\nSo, in short, regular users will probably not see a setting to override the maps server, either it might be a simple radio button or a config file that can be modified. TBD exactly which though, in part \"we'll see soon\".\nDoes that clear up your question? Let me know if it quite doesn't or if you have follow-on questions I could help with.", "author": "DanVanAtta", "createdAt": "2020-08-23T16:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0ODEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MDE5Ng==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475290196", "bodyText": "Makes sense", "author": "RoiEXLab", "createdAt": "2020-08-24T00:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA0ODEyNA=="}], "type": "inlineReview"}, {"oid": "b48b3663c0881dbb8c8955507a234112741401c8", "url": "https://github.com/triplea-game/triplea/commit/b48b3663c0881dbb8c8955507a234112741401c8", "message": "Add ability for game client to download map listing from maps server\n\n- Refactor: move 'fetch maps' functionality from ClientContext to a dedicated class\n  'MapListingFetcher'\n- Add map server URI to servers listing\n- Adds a new map server URI override mechanism with a 'dev-overrides.properties' file.\n  Uncommenting properties in that file will have them take effect and override config.\n  This is a simpler way to inject overrides compared to using ClientSettings. We have\n  such a mechanism for lobby server and likely that will be migrated as it's simpler.\n  Of note, the dev-overrides.properties file is not required and we do not expect\n  it to be present when the game is distributed.\n- Adds an HTTP client to fetch map listing from the maps server\n- Adds a 'beta' switch to use the maps server for map listing download. If the switch\n  is set then we use the maps server. In this case we'll use the new http client\n  to download the map listing from the maps server.\n- Fixes download map listing logic where the download maps window is not rendered\n  if the map download list. In such cases, the map download button would appear\n  to do nothing to the user, so better to show a download map window with\n  nothing available, at least it is something.", "committedDate": "2020-08-22T05:17:45Z", "type": "forcePushed"}, {"oid": "ec8d43eccef54852cd21c7fb1248e2055a18f20b", "url": "https://github.com/triplea-game/triplea/commit/ec8d43eccef54852cd21c7fb1248e2055a18f20b", "message": "Add ability for game client to download map listing from maps server\n\n- Refactor: move 'fetch maps' functionality from ClientContext to a dedicated class\n  'MapListingFetcher'\n- Add map server URI to servers listing\n- Adds a new map server URI override mechanism with a 'dev-overrides.properties' file.\n  Uncommenting properties in that file will have them take effect and override config.\n  This is a simpler way to inject overrides compared to using ClientSettings. We have\n  such a mechanism for lobby server and likely that will be migrated as it's simpler.\n  Of note, the dev-overrides.properties file is not required and we do not expect\n  it to be present when the game is distributed.\n- Adds an HTTP client to fetch map listing from the maps server\n- Adds a 'beta' switch to use the maps server for map listing download. If the switch\n  is set then we use the maps server. In this case we'll use the new http client\n  to download the map listing from the maps server.\n- Fixes download map listing logic where the download maps window is not rendered\n  if the map download list. In such cases, the map download button would appear\n  to do nothing to the user, so better to show a download map window with\n  nothing available, at least it is something.", "committedDate": "2020-08-22T05:31:36Z", "type": "commit"}, {"oid": "ec8d43eccef54852cd21c7fb1248e2055a18f20b", "url": "https://github.com/triplea-game/triplea/commit/ec8d43eccef54852cd21c7fb1248e2055a18f20b", "message": "Add ability for game client to download map listing from maps server\n\n- Refactor: move 'fetch maps' functionality from ClientContext to a dedicated class\n  'MapListingFetcher'\n- Add map server URI to servers listing\n- Adds a new map server URI override mechanism with a 'dev-overrides.properties' file.\n  Uncommenting properties in that file will have them take effect and override config.\n  This is a simpler way to inject overrides compared to using ClientSettings. We have\n  such a mechanism for lobby server and likely that will be migrated as it's simpler.\n  Of note, the dev-overrides.properties file is not required and we do not expect\n  it to be present when the game is distributed.\n- Adds an HTTP client to fetch map listing from the maps server\n- Adds a 'beta' switch to use the maps server for map listing download. If the switch\n  is set then we use the maps server. In this case we'll use the new http client\n  to download the map listing from the maps server.\n- Fixes download map listing logic where the download maps window is not rendered\n  if the map download list. In such cases, the map download button would appear\n  to do nothing to the user, so better to show a download map window with\n  nothing available, at least it is something.", "committedDate": "2020-08-22T05:31:36Z", "type": "forcePushed"}, {"oid": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "url": "https://github.com/triplea-game/triplea/commit/4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "message": "Auto-Formatting", "committedDate": "2020-08-22T05:33:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyMzY3Nw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475223677", "bodyText": "What would you think of the following construct?\ntry {\n  return DownloadType.valueOf(type);\n} catch (final IllegalArgumentException e) {\n  return MAP;\n}\nIt's not the same as the current code (case-sensitive), but it might be a bit cleaner than having a lot of if-else cases chained", "author": "RoiEXLab", "createdAt": "2020-08-23T14:05:21Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/DownloadFileDescription.java", "diffHunk": "@@ -23,7 +31,17 @@\n   enum DownloadType {\n     MAP,\n     MAP_SKIN,\n-    MAP_TOOL\n+    MAP_TOOL;\n+\n+    static DownloadType fromString(final String type) {\n+      if (type.equalsIgnoreCase(MAP_SKIN.name())) {\n+        return MAP_SKIN;\n+      } else if (type.equalsIgnoreCase(MAP_TOOL.name())) {\n+        return MAP_TOOL;\n+      } else {\n+        return MAP;\n+      }", "originalCommit": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNjMyMQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475236321", "bodyText": "We could upper-case the parameter to make that case insensitive.\nAs-is, I don't think there are too many if/else cases, it's quite tame. I think moving away from an enum is very possible here as the client probably should not be so aware of all of the categories.\nThe suggestion is not unreasonable, I had considered that. I don't like the fact though that the exception is ignored and we have a return statement from the catch block (feels a lot like control-flow-by-exception-handling).", "author": "DanVanAtta", "createdAt": "2020-08-23T16:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyMzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNDUwNw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475224507", "bodyText": "I wonder how well this out-of-date mechanism can be improved.\nMaybe calculating the hash sum of the zip and double check with the server that caches the hash values?", "author": "RoiEXLab", "createdAt": "2020-08-23T14:13:52Z", "path": "game-core/src/main/java/games/strategy/engine/framework/map/download/MapDownloadController.java", "diffHunk": "@@ -26,7 +26,7 @@ private MapDownloadController() {}\n   public static void checkDownloadedMapsAreLatest() {\n     try {\n       final Collection<String> outOfDateMapNames =\n-          getOutOfDateMapNames(ClientContext.getMapDownloadList());\n+          getOutOfDateMapNames(MapListingFetcher.getMapDownloadList());", "originalCommit": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNjQ5Mg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475236492", "bodyText": "My plan is to keep using version numbers but remove the auto-incrementing version number from map-maker visibility, have it be auto-managed, and make map uploads be immutable. I think there will be a place for hashes to ensure integrity of a map, for checking identity though I think that might be too costly (and perhaps hard to organize on the file system)", "author": "DanVanAtta", "createdAt": "2020-08-23T16:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNDUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475225863", "bodyText": "To go with java.nio APIs:\n  private Properties readPropertiesFromOverrideFile() {\n    final Properties properties = new Properties();\n    findOverrideFile()\n        .ifPresent(\n            overrideFile -> {\n              try (var bufferedReader = Files.newBufferedReader(overrideFile)) { // Side-Note: Should the charset be set here?\n                properties.load(bufferedReader);\n              } catch (final IOException e) {\n                log.log(\n                    Level.SEVERE,\n                    \"Failed to read override file: \" + overrideFile.toAbsolutePath(),\n                    e);\n              }\n            });\n    return properties;\n  }\n\n  /**\n   * Tries to find the override file at different paths. Depending on how we launch TripleA the\n   * context path can be at different locations.\n   */\n  private Optional<Path> findOverrideFile() {\n    return findAtPath(Path.of(OVERRIDE_FILE_NAME))\n        .or(() -> findAtPath(Path.of(\"game-headed\", OVERRIDE_FILE_NAME)));\n  }\n\n  private static Optional<Path> findAtPath(final Path path) {\n    return Optional.of(path).filter(Files::exists);\n  }", "author": "RoiEXLab", "createdAt": "2020-08-23T14:26:04Z", "path": "game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.system;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.java.Log;\n+\n+/**\n+ * Utility class to read override values present on local file system. These overrides are not meant\n+ * to be used by an end user but instead during development. If the file is present and if a\n+ * property has a value set, then we will use it.\n+ */\n+@UtilityClass\n+@Log\n+public class DevOverrides {\n+  private static final String OVERRIDE_FILE_NAME = \"dev-overrides.properties\";\n+\n+  public static Optional<URI> readMapServerOverride() {\n+    final Properties properties = readPropertiesFromOverrideFile();\n+\n+    final String value = properties.getProperty(\"maps.server\", \"\");\n+    return value.isBlank() ? Optional.empty() : Optional.of(URI.create(value));\n+  }\n+\n+  private Properties readPropertiesFromOverrideFile() {\n+    final Properties properties = new Properties();\n+    findOverrideFile()\n+        .ifPresent(\n+            overrideFile -> {\n+              try {\n+                properties.load(new FileInputStream(overrideFile));\n+              } catch (final IOException e) {\n+                log.log(\n+                    Level.SEVERE,\n+                    \"Failed to read override file: \" + overrideFile.getAbsolutePath(),\n+                    e);\n+              }\n+            });\n+    return properties;\n+  }\n+\n+  /**\n+   * Tries to find the override file at different paths. Depending on how we launch TripleA the\n+   * context path can be at different locations.\n+   */\n+  private Optional<File> findOverrideFile() {\n+    return findAtPath(Path.of(OVERRIDE_FILE_NAME))\n+        .or(() -> findAtPath(Path.of(\"game-headed\", OVERRIDE_FILE_NAME)));\n+  }\n+\n+  private static Optional<File> findAtPath(final Path path) {\n+    final File file = path.toFile();\n+    if (file.exists()) {\n+      return Optional.of(file);\n+    } else {\n+      return Optional.empty();\n+    }\n+  }", "originalCommit": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNzE5Nw==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475237197", "bodyText": "Any strong reason for buffered reader over just an input stream?", "author": "DanVanAtta", "createdAt": "2020-08-23T16:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNzU2Ng==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475237566", "bodyText": "Updated this to use Files.newInputStream and ensured that the input stream was closed: a9f60b9", "author": "DanVanAtta", "createdAt": "2020-08-23T16:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTgyOA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475291828", "bodyText": "AFAIK BufferedInputStream or BufferedReader which uses the former internally, is more efficient.\nOther than that there shouldn't be a huge difference.", "author": "RoiEXLab", "createdAt": "2020-08-24T00:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxMDIyMg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475310222", "bodyText": "Is it more efficient because you can read back in the stream? Barring any compelling reason otherwise I'm thinking to keep it simple here.", "author": "DanVanAtta", "createdAt": "2020-08-24T02:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNTQyNg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475315426", "bodyText": "First answer to this SO gets into this topic:  https://stackoverflow.com/questions/3122422/usage-of-bufferedinputstream", "author": "DanVanAtta", "createdAt": "2020-08-24T02:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNTg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNjEyMA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475226120", "bodyText": "If you decide not to use java.nio here, this FileInputStream should be closed after this regardless", "author": "RoiEXLab", "createdAt": "2020-08-23T14:27:57Z", "path": "game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.system;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.java.Log;\n+\n+/**\n+ * Utility class to read override values present on local file system. These overrides are not meant\n+ * to be used by an end user but instead during development. If the file is present and if a\n+ * property has a value set, then we will use it.\n+ */\n+@UtilityClass\n+@Log\n+public class DevOverrides {\n+  private static final String OVERRIDE_FILE_NAME = \"dev-overrides.properties\";\n+\n+  public static Optional<URI> readMapServerOverride() {\n+    final Properties properties = readPropertiesFromOverrideFile();\n+\n+    final String value = properties.getProperty(\"maps.server\", \"\");\n+    return value.isBlank() ? Optional.empty() : Optional.of(URI.create(value));\n+  }\n+\n+  private Properties readPropertiesFromOverrideFile() {\n+    final Properties properties = new Properties();\n+    findOverrideFile()\n+        .ifPresent(\n+            overrideFile -> {\n+              try {\n+                properties.load(new FileInputStream(overrideFile));", "originalCommit": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNzU5Ng==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475237596", "bodyText": "Thanks for spotting that, fixed in: a9f60b9", "author": "DanVanAtta", "createdAt": "2020-08-23T16:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNjEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzA2OA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475227068", "bodyText": "I personally think avoiding dashes in subdomains is better, so instead of prerelease-maps.triplea-game.org I'd like to go with prerelease.maps.triplea-game.org, so the production version can either be maps.triplea-game.org or prod.maps.triplea-game.org.\nIn either case I don't think the way we give out names to subdomains is really consistent at the moment, so ideally we'd agree on something rather sooner than later deprecating (but keeping in case we need backwards compatibility) the current subdomains", "author": "RoiEXLab", "createdAt": "2020-08-23T14:35:49Z", "path": "servers.yml", "diffHunk": "@@ -2,6 +2,7 @@ latest: 2.2.20790\n servers:\n   - version: \"2.0.20057\"\n     lobby_uri: https://prod2-lobby.triplea-game.org\n+    maps_uri: https://prerelease-maps.triplea-game.org", "originalCommit": "4ffb74aa5d2c4a45eff12b3614a09bfe39fdc5a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNzgyMA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475237820", "bodyText": "This strongly seems like something we should take into an issue to discuss. For now we have the convention <env>-<server>.triplea-game.org\nSo for example: prod2-bot01.triplea-game.org\nAFAIK that is somewhat consistently done. I don't know if we are far enough down the rabbit hole where it'll be more difficult than it is worth changing.. We'll certainly have to have both domain aliases for some time to migrate. Again though, such a consideration needs agreement, planning, and execution that is all very far beyond the scope of this code update.", "author": "DanVanAtta", "createdAt": "2020-08-23T16:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MDkxMg==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475290912", "bodyText": "It's not bad right now but I was thinking about abbreviations:\nWhy isn't it production-lobby.triplea-game.org or 02-production-lobby.triplea-game.org or something like that?\nWhy isn't it 01-prerelease-maps.triplea-game.org then?\nBut yeah, agreeing on a consistent scheme would be really nice, even if we don't share the same style preferences", "author": "RoiEXLab", "createdAt": "2020-08-24T00:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzA2OA=="}], "type": "inlineReview"}, {"oid": "4b75d4c4f58d87989745fd6b2e356400d9f3bd68", "url": "https://github.com/triplea-game/triplea/commit/4b75d4c4f58d87989745fd6b2e356400d9f3bd68", "message": "Reduce method visibility from package default to private.", "committedDate": "2020-08-23T15:58:08Z", "type": "commit"}, {"oid": "a9f60b953ec519d2e177a7bad573253b06965f8b", "url": "https://github.com/triplea-game/triplea/commit/a9f60b953ec519d2e177a7bad573253b06965f8b", "message": "Ensure file input stream is closed when reading dev overrride properties file.", "committedDate": "2020-08-23T16:17:53Z", "type": "commit"}, {"oid": "fd9ef11f0b43eab15cb64331b23ddab6d6b31bf6", "url": "https://github.com/triplea-game/triplea/commit/fd9ef11f0b43eab15cb64331b23ddab6d6b31bf6", "message": "Merge remote-tracking branch 'origin/master' into download-maps-from-server", "committedDate": "2020-08-23T16:34:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTI2MQ==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475291261", "bodyText": "No need to convert it to java.io.File first\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Failed to read override file: \" + overrideFile.toFile().getAbsolutePath(),\n          \n          \n            \n                                \"Failed to read override file: \" + overrideFile.toAbsolutePath(),", "author": "RoiEXLab", "createdAt": "2020-08-24T00:49:06Z", "path": "game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package games.strategy.engine.framework.system;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.java.Log;\n+\n+/**\n+ * Utility class to read override values present on local file system. These overrides are not meant\n+ * to be used by an end user but instead during development. If the file is present and if a\n+ * property has a value set, then we will use it.\n+ */\n+@UtilityClass\n+@Log\n+public class DevOverrides {\n+  private static final String OVERRIDE_FILE_NAME = \"dev-overrides.properties\";\n+\n+  public static Optional<URI> readMapServerOverride() {\n+    final Properties properties = readPropertiesFromOverrideFile();\n+\n+    final String value = properties.getProperty(\"maps.server\", \"\");\n+    return value.isBlank() ? Optional.empty() : Optional.of(URI.create(value));\n+  }\n+\n+  private Properties readPropertiesFromOverrideFile() {\n+    final Properties properties = new Properties();\n+    findOverrideFile()\n+        .ifPresent(\n+            overrideFile -> {\n+              try (InputStream fileInput = Files.newInputStream(overrideFile)) {\n+                properties.load(fileInput);\n+              } catch (final IOException e) {\n+                log.log(\n+                    Level.SEVERE,\n+                    \"Failed to read override file: \" + overrideFile.toFile().getAbsolutePath(),", "originalCommit": "fd9ef11f0b43eab15cb64331b23ddab6d6b31bf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTQ4MA==", "url": "https://github.com/triplea-game/triplea/pull/7412#discussion_r475291480", "bodyText": "Not sure if you noticed, but you can use a different notation here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Files.exists(path)) {\n          \n          \n            \n                  return Optional.of(path);\n          \n          \n            \n                } else {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                return Optional.of(path).filter(Files::exists);", "author": "RoiEXLab", "createdAt": "2020-08-24T00:50:31Z", "path": "game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package games.strategy.engine.framework.system;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.java.Log;\n+\n+/**\n+ * Utility class to read override values present on local file system. These overrides are not meant\n+ * to be used by an end user but instead during development. If the file is present and if a\n+ * property has a value set, then we will use it.\n+ */\n+@UtilityClass\n+@Log\n+public class DevOverrides {\n+  private static final String OVERRIDE_FILE_NAME = \"dev-overrides.properties\";\n+\n+  public static Optional<URI> readMapServerOverride() {\n+    final Properties properties = readPropertiesFromOverrideFile();\n+\n+    final String value = properties.getProperty(\"maps.server\", \"\");\n+    return value.isBlank() ? Optional.empty() : Optional.of(URI.create(value));\n+  }\n+\n+  private Properties readPropertiesFromOverrideFile() {\n+    final Properties properties = new Properties();\n+    findOverrideFile()\n+        .ifPresent(\n+            overrideFile -> {\n+              try (InputStream fileInput = Files.newInputStream(overrideFile)) {\n+                properties.load(fileInput);\n+              } catch (final IOException e) {\n+                log.log(\n+                    Level.SEVERE,\n+                    \"Failed to read override file: \" + overrideFile.toFile().getAbsolutePath(),\n+                    e);\n+              }\n+            });\n+    return properties;\n+  }\n+\n+  /**\n+   * Tries to find the override file at different paths. Depending on how we launch TripleA the\n+   * context path can be at different locations.\n+   */\n+  private Optional<Path> findOverrideFile() {\n+    return findAtPath(Path.of(OVERRIDE_FILE_NAME))\n+        .or(() -> findAtPath(Path.of(\"game-headed\", OVERRIDE_FILE_NAME)));\n+  }\n+\n+  private static Optional<Path> findAtPath(final Path path) {\n+    if (Files.exists(path)) {\n+      return Optional.of(path);\n+    } else {\n+      return Optional.empty();\n+    }", "originalCommit": "fd9ef11f0b43eab15cb64331b23ddab6d6b31bf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8384607c5d9f98ff9afe39dc9ab443de01bbdce1", "url": "https://github.com/triplea-game/triplea/commit/8384607c5d9f98ff9afe39dc9ab443de01bbdce1", "message": "Update game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java\n\nCo-authored-by: RoiEX <8350879+RoiEXLab@users.noreply.github.com>", "committedDate": "2020-08-24T02:24:41Z", "type": "commit"}, {"oid": "b4b0673501e42357be9d600bd589f7df3590293a", "url": "https://github.com/triplea-game/triplea/commit/b4b0673501e42357be9d600bd589f7df3590293a", "message": "Update game-core/src/main/java/games/strategy/engine/framework/system/DevOverrides.java\n\nCo-authored-by: RoiEX <8350879+RoiEXLab@users.noreply.github.com>", "committedDate": "2020-08-24T02:29:25Z", "type": "commit"}]}