{"pr_number": 5852, "pr_title": "Encrypt passwords/secrets for prelease & production", "pr_createdAt": "2020-01-19T09:03:11Z", "pr_url": "https://github.com/triplea-game/triplea/pull/5852", "timeline": [{"oid": "774f1fa4f89d067a2acbf74bc3b944c2208dc703", "url": "https://github.com/triplea-game/triplea/commit/774f1fa4f89d067a2acbf74bc3b944c2208dc703", "message": "Encrypt passwords/secrets for prelease & production\n\n- Encrypt passwords using ansible vault\n- Drop from configuration.yml, bcrypted_salt, not used and will not be needed.\n- Add utility script 'create_secret' to make it a bit easier to create secrets\n- Set password for the 'postgres' db user", "committedDate": "2020-01-19T08:59:50Z", "type": "commit"}, {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17", "url": "https://github.com/triplea-game/triplea/commit/da782713ca5072c1739c421531588c9ab6a6bf17", "message": "Shorten & clarify README documentation", "committedDate": "2020-01-19T09:47:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM3Ng==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280376", "bodyText": "Unordered list style", "author": "codeclimate", "createdAt": "2020-01-19T09:49:40Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4MA==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280380", "bodyText": "Unordered list style", "author": "codeclimate", "createdAt": "2020-01-19T09:49:40Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4Mw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280383", "bodyText": "Unordered list style", "author": "codeclimate", "createdAt": "2020-01-19T09:49:40Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4Ng==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280386", "bodyText": "Unordered list style", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4OQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280389", "bodyText": "Unordered list style", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A\n+  variable named \"my-value\" will likely result in a \"variable 'my' not found\"\n+- favor placing variables in defaults unless they are shared or vary by environment", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5MQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280391", "bodyText": "Trailing spaces", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called ", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5Mw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280393", "bodyText": "Trailing spaces", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that ", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5Nw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280397", "bodyText": "Trailing spaces", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where ", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5OQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280399", "bodyText": "Trailing spaces", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to ", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwMg==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280402", "bodyText": "Line length", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwNQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280405", "bodyText": "Headers should be surrounded by blank lines", "author": "codeclimate", "createdAt": "2020-01-19T09:49:41Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwNg==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280406", "bodyText": "Lists should be surrounded by blank lines", "author": "codeclimate", "createdAt": "2020-01-19T09:49:42Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwOQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280409", "bodyText": "Lists should be surrounded by blank lines", "author": "codeclimate", "createdAt": "2020-01-19T09:49:42Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQxMA==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280410", "bodyText": "Lists should be surrounded by blank lines", "author": "codeclimate", "createdAt": "2020-01-19T09:49:42Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQxMw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280413", "bodyText": "Bare URL used", "author": "codeclimate", "createdAt": "2020-01-19T09:49:42Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/", "originalCommit": "da782713ca5072c1739c421531588c9ab6a6bf17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "url": "https://github.com/triplea-game/triplea/commit/762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "message": "Improve README style", "committedDate": "2020-01-19T09:53:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDk1MA==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280950", "bodyText": "Lists should be surrounded by blank lines", "author": "codeclimate", "createdAt": "2020-01-19T09:56:53Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,56 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called\n+'production' and we we can then define a 'group_vars/production.yml' file that\n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+## Variables\n+\n+* Ansible allows variables to be defined in many places with differing", "originalCommit": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzQ3Nw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368283477", "bodyText": "Test?", "author": "RoiEXLab", "createdAt": "2020-01-19T10:35:42Z", "path": "infrastructure/ansible/roles/http_server/defaults/main.yml", "diffHunk": "@@ -14,7 +14,6 @@ http_server_db_port: \"5432\"\n \n http_server_db_name: \"{{ lobby_db_name }}\"\n http_server_db_user: \"{{ lobby_db_user }}\"\n-http_server_db_password: \"{{ lobby_db_password }}\"\n \n-## TODO: encrypt all of the below variables\n-http_server_bcrypt_salt: $2a$10$IhIXWg4HkQRWrZqjj9kV0u\n+create_issues_github_api_token: test", "originalCommit": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNzQyMw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368327423", "bodyText": "Note the value in the configuration.yml used for local development and automated tests:\n\nhttps://github.com/triplea-game/triplea/blob/master/http-server/configuration.yml#L6\n\nNote that the value is specific, used as a magic flag to not send API requests if the value is equal to test:\n\nhttps://github.com/triplea-game/triplea/blob/master/http-clients/src/main/java/org/triplea/http/client/github/issues/GithubIssueClient.java#L38\nhttps://github.com/triplea-game/triplea/blob/master/http-server/src/main/java/org/triplea/server/error/reporting/CreateIssueStrategy.java#L41\n\nWith this PR, note that the vagrant/prerelease/production configuration.yml is parameterized for this value:\n\nhttps://github.com/triplea-game/triplea/pull/5852/files#diff-448e030bac09cb5b6eaf84f89d4b5d54R2\n\nThe value we have here is the default, so we will use that unless there is an override present. That is intentional so that 'vagrant' will work without any overrides.\nThen finally note the 'linode' group_var override that will override this for linode environments:\n\nhttps://github.com/triplea-game/triplea/pull/5852/files#diff-8a634d36d006538798cff653e9e28b53R18\n\nFinally, we update inventory to define prerelease and production as children of 'linode' so that the override will take effect for those environments:\n\nhttps://github.com/triplea-game/triplea/pull/5852/files#diff-b3216fe9376fa99bf180b01fe4bd1a55R16\nhttps://github.com/triplea-game/triplea/pull/5852/files#diff-6f7a9a9749d18379ef4b4f7cf267c018R19", "author": "DanVanAtta", "createdAt": "2020-01-19T22:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NDk0Nw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368754947", "bodyText": "Thanks for clarifying \ud83d\udc4d", "author": "RoiEXLab", "createdAt": "2020-01-20T23:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368283953", "bodyText": "Hmm, not sure if I like the pattern of relying on some specific files to exist.\nIn my opinion we should be able to pass a filename and/or fall back to a default value.", "author": "RoiEXLab", "createdAt": "2020-01-19T10:42:38Z", "path": "infrastructure/create_secret", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/bin/bash\n+\n+\n+function usage() {\n+  echo \"Usage: ./$0 [variable-name]\"\n+  echo \"  eg: ./$0 lobby_db_password\"\n+  echo \"\"\n+  echo \"This script will encode a secret value that can be embedded in ansible\"\n+  echo \"and decrypted when ansible runs given the vault password\"\n+  echo \"\"\n+  echo \"This script expects the secret value to be encrypted to be written\" \n+  echo \"to a file called 'secret'\"\n+  echo \"This script expects a second file to contain the ansible vault password\"\n+  echo \"named 'vault_password'\"\n+  exit 1\n+}\n+\n+variable_name=$1\n+\n+set -eu\n+\n+if [ ! -f \"secret\" ]; then", "originalCommit": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNzAyOQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368327029", "bodyText": "The files are temporary and are added to .gitignore to avoid accidental checkin. The file is there so you don't type the command on prompt (avoid accidental typo) nor have to add the secret via command line arg (insecure).\nUsing 'create_secret' is one time, the vault password file and secret file should be removed afterwards. See the README update for the command that is being replaced, this is really a wrapper around a one-liner.\nLet me know if that makes sense.", "author": "DanVanAtta", "createdAt": "2020-01-19T22:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1ODcxMQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368758711", "bodyText": "Are all files temporary?\nIf they are, why not create files in /tmp and reference them in other parts of the script?\nThis way there's no chance it can be checked in accidentally.\nEither way, the current system \"enforces\" some arbitrary filenames, that might conflict with pre-existing files for some reason (when used). The typo argument is valid, but at least I'm personally using tab-autcompletion for files to prevent exactly that.\nI just think it's more natural to be explicit about the files your specifying this as input.\nTo me this feels like if grep would only accept input files called \"input\" in the current directory, and you'd have to copy files or use symlinks to run it on any other file.\nDifferent thought: What about using STDIN for the secret? Avoids the problem with the secret being stored in bash history, in if you're really paranoid you can also use read -s SECRET to read from the terminal in a hidden way and store them into $SECRET.", "author": "RoiEXLab", "createdAt": "2020-01-20T23:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxMzI5NQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368813295", "bodyText": "Are all files temporary?\n\nMostly temporary, we should not be keeping secrets, either the vault password or unencrypted secret files, on our systems for very long. Those values represent a security concern/vulnerability and should be deleted in a reasonable time frame.\n\nIf they are, why not create files in /tmp and reference them in other parts of the script?\n\nBeing in /tmp might help them be cleaned up, but probably better for it to be explicit as we should know what we're doing when dealing with secrets.\nThe vault-password file is used by ansible-playbook commands proper, having it be in a known location is preferable.\nSecond, '/tmp' tends to have more lenient read permissions, isn't it a bit more locked down to have it in a folder owned by only the current user?\nRe: typo -- I'm concerned about typo's using STDIN.\n\nI just think it's more natural to be explicit about the files your specifying this as input.\n\nThe issue I see with this is then parameter ordering becomes extremely significant. If we go the args flags, I seriously raise the prospect we are over-engineering this.\n\nTo me this feels like if grep would only accept input files called \"input\" in the current directory, and you'd have to copy files or use symlinks to run it on any other file.\n\nThe idea is you encrypt one secret at a time. Update 'secret' with the secret, pass the variable name as a parameter name to this script, copy the output into a '.yml' file, repeat until you encrypted all the variables you want, then delete the 'secrets' file. Once done testing, delete also the 'vault-password' file.", "author": "DanVanAtta", "createdAt": "2020-01-21T05:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwODk0NQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r370708945", "bodyText": "Ok, I get why tmp files are maybe not the right way to go. Tmp has special permissions so that only the owner of a file can actually delete it, I guess if adjusting the read permission, we probably could keep the file private, blocked for other users. But this is just my assumption at this point.\nI personally think that the read command is very intriguing; there's no need for a magic file to exist, and if you're still concerned about potential typos, you could still pipe a magic file into the script so it stays the same.\nLet me know what you think.\nIf you disagree, feel free to merge but I'm convinced this is definitely an option worth considering", "author": "RoiEXLab", "createdAt": "2020-01-24T15:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDA1OQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368284059", "bodyText": "Maybe a stupid question, but what exactly is the vars folder, and why shouldn't it be used?", "author": "RoiEXLab", "createdAt": "2020-01-19T10:44:46Z", "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,56 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called\n+'production' and we we can then define a 'group_vars/production.yml' file that\n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+## Variables\n+\n+* Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where\n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to\n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+\n+* do not use `vars` folder", "originalCommit": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjg5OQ==", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368326899", "bodyText": "Role vars are number 15 out of the 22 levels of precedence and places where variables can be defined: https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#ansible-variable-precedence\nWhy not use vars?\nIt's a similar problem to using an overly strong CSS selector, when trying to override it, it can be really difficult and artificial to find a selector with a stronger strength.\nIn our case we should not need vars, just use defaults; essentially favoring the weakest precedence to give the most flexibility for overrides.\n'vars' are probably best when re-using an existing role via some sort of import, even then I'm not sure if that's really a cleaner why to go compared to using a group_var maybe, can depend on the context. Regardless, the point is that we're limiting where you can define variables to 3 or 4 locations to simplify that list of 22 down to just a few.", "author": "DanVanAtta", "createdAt": "2020-01-19T22:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDA1OQ=="}], "type": "inlineReview"}]}