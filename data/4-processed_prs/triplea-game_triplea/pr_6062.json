{"pr_number": 6062, "pr_title": "Remove websocket dependency", "pr_createdAt": "2020-03-19T16:42:52Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6062", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMDUxNg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395320516", "bodyText": "The server will disconnect banned clients, this is probably not a case where we want to do logging. Likely we want to show an info message, probably just let the connection closed listener handle it.", "author": "DanVanAtta", "createdAt": "2020-03-19T21:08:31Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -49,17 +58,67 @@\n       onMethod_ = {@VisibleForTesting})\n   private boolean connectionIsOpen = false;\n \n+  @Setter(\n+      value = AccessLevel.PACKAGE,\n+      onMethod_ = {@VisibleForTesting})\n+  private HttpClient httpClient = HttpClient.newHttpClient();\n+\n   private final URI serverUri;\n \n   private boolean closed = false;\n \n+  private WebSocket client;\n+\n   @Getter(\n       value = AccessLevel.PACKAGE,\n       onMethod_ = {@VisibleForTesting})\n-  @Setter(\n-      value = AccessLevel.PACKAGE,\n-      onMethod_ = {@VisibleForTesting})\n-  private WebSocketClient client;\n+  private final WebSocket.Listener webSocketListener =\n+      new Listener() {\n+        private final StringBuilder textAccumulator = new StringBuilder();\n+\n+        @Override\n+        public void onOpen(final WebSocket webSocket) {\n+          synchronized (queuedMessages) {\n+            client = webSocket;\n+            connectionIsOpen = true;\n+            queuedMessages.forEach(\n+                message ->\n+                    client\n+                        .sendText(message, true)\n+                        .exceptionally(logWebSocketError(\"Failed to send queued text.\")));\n+            queuedMessages.clear();\n+          }\n+          webSocket.request(1);\n+        }\n+\n+        @Override\n+        public CompletionStage<?> onText(\n+            final WebSocket webSocket, final CharSequence data, final boolean last) {\n+          textAccumulator.append(data);\n+          if (last) {\n+            listener.messageReceived(textAccumulator.toString());\n+            textAccumulator.setLength(0);\n+          }\n+          webSocket.request(1);\n+          return null;\n+        }\n+\n+        @Override\n+        public CompletionStage<?> onClose(\n+            final WebSocket webSocket, final int statusCode, final String reason) {\n+          if (!reason.equals(CLIENT_DISCONNECT_MESSAGE)) {\n+            log.severe(\"Connection to server closed: \" + reason);", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTQyNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395321425", "bodyText": "I like that we continue to abstract away the underlying API, though CharSequence and boolean last seem to be not as nice of an API. I think this websocket library loses points here.", "author": "DanVanAtta", "createdAt": "2020-03-19T21:10:21Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -49,17 +58,67 @@\n       onMethod_ = {@VisibleForTesting})\n   private boolean connectionIsOpen = false;\n \n+  @Setter(\n+      value = AccessLevel.PACKAGE,\n+      onMethod_ = {@VisibleForTesting})\n+  private HttpClient httpClient = HttpClient.newHttpClient();\n+\n   private final URI serverUri;\n \n   private boolean closed = false;\n \n+  private WebSocket client;\n+\n   @Getter(\n       value = AccessLevel.PACKAGE,\n       onMethod_ = {@VisibleForTesting})\n-  @Setter(\n-      value = AccessLevel.PACKAGE,\n-      onMethod_ = {@VisibleForTesting})\n-  private WebSocketClient client;\n+  private final WebSocket.Listener webSocketListener =\n+      new Listener() {\n+        private final StringBuilder textAccumulator = new StringBuilder();\n+\n+        @Override\n+        public void onOpen(final WebSocket webSocket) {\n+          synchronized (queuedMessages) {\n+            client = webSocket;\n+            connectionIsOpen = true;\n+            queuedMessages.forEach(\n+                message ->\n+                    client\n+                        .sendText(message, true)\n+                        .exceptionally(logWebSocketError(\"Failed to send queued text.\")));\n+            queuedMessages.clear();\n+          }\n+          webSocket.request(1);\n+        }\n+\n+        @Override\n+        public CompletionStage<?> onText(\n+            final WebSocket webSocket, final CharSequence data, final boolean last) {", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MjA3MA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395392070", "bodyText": "Not a real fan of it either, but by looking at the documentation it seems that the API in theory allows you to do everything async, including message processing of messages that get split.\nI actually believe we could ignore the last boolean. When debugging some issue I was having (due to wrong usage of the API) I realized that the data messages seem complete for the most part.", "author": "RoiEXLab", "createdAt": "2020-03-20T00:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxOTk3NA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395419974", "bodyText": "If we're receiving message concurrently, how do we know we'll have an in-order message stream?", "author": "DanVanAtta", "createdAt": "2020-03-20T03:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTkzNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395321935", "bodyText": "If the ping cannot be sent, would it maybe mean the connection is already closed?\nWould we also want users to submit bug reports whenever this happens?\nI suspect we may want to no-op if the ping cannot be sent.", "author": "DanVanAtta", "createdAt": "2020-03-19T21:11:21Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -68,52 +127,28 @@\n \n   WebSocketConnection(final URI serverUri) {\n     this.serverUri = serverUri;\n-    client =\n-        new WebSocketClient(serverUri) {\n-          @Override\n-          public void onOpen(final ServerHandshake serverHandshake) {\n-            synchronized (queuedMessages) {\n-              connectionIsOpen = true;\n-              queuedMessages.forEach(this::send);\n-              queuedMessages.clear();\n-            }\n-          }\n-\n-          @Override\n-          public void onMessage(final String message) {\n-            listener.messageReceived(message);\n-          }\n-\n-          @Override\n-          public void onClose(final int code, final String reason, final boolean remote) {\n-            if (remote) {\n-              log.severe(\"Connection to server closed: \" + reason);\n-            }\n-            pingSender.cancel();\n-            listener.connectionClosed(reason);\n-          }\n-\n-          @Override\n-          public void onError(final Exception exception) {\n-            listener.handleError(exception);\n-          }\n-        };\n     pingSender =\n         Timers.fixedRateTimer(\"websocket-ping-sender\")\n             .period(45, TimeUnit.SECONDS)\n             .delay(45, TimeUnit.SECONDS)\n             .task(\n                 () -> {\n-                  if (client.isOpen()) {\n-                    client.sendPing();\n+                  if (!client.isOutputClosed()) {\n+                    client\n+                        .sendPing(ByteBuffer.wrap(\"Ping\".getBytes(StandardCharsets.UTF_8)))\n+                        .exceptionally(logWebSocketError(\"Failed to send ping.\"));", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MDc5Nw==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395390797", "bodyText": "Could potentially be the case if we close it between actually sending the ping and the if check, but the exception type will be IOException, so we'll have to check the outputstream again to be sure", "author": "RoiEXLab", "createdAt": "2020-03-20T00:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzg3Mg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395433872", "bodyText": "Would we also want users to submit bug reports whenever this happens?\n\nMy implication with this was that given the current handling, we are offering users to submit bug reports. Severe logging means \"the application crashed, it should not have, the error is likely unrecoverable, the user should submit a bug report as the situation should never happen\"\nWe should not be getting bug reports where our response is: \"yeah, that's normal, we'll close this now.\"", "author": "DanVanAtta", "createdAt": "2020-03-20T04:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMjI4Ng==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395322286", "bodyText": "This builder is kinda nice, this library gains a point IMO here for this.", "author": "DanVanAtta", "createdAt": "2020-03-19T21:12:08Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -123,39 +158,28 @@ void close() {\n    * @throws IllegalStateException Thrown if connection is already open (eg: connect called twice).\n    * @throws IllegalStateException Thrown if connection has been closed (ie: 'close()' was called)\n    */\n-  CompletableFuture<Boolean> connect(\n+  CompletableFuture<WebSocket> connect(\n       final WebSocketConnectionListener listener, final Consumer<String> errorHandler) {\n     this.listener = Preconditions.checkNotNull(listener);\n-    Preconditions.checkState(!client.isOpen());\n+    Preconditions.checkState(client == null);\n     Preconditions.checkState(!closed);\n \n     return connectAsync()\n         .whenComplete(\n-            (connected, throwable) -> {\n-              if (connected && throwable == null) {\n+            (webSocket, throwable) -> {\n+              if (webSocket != null && throwable == null) {\n                 pingSender.start();\n               } else {\n                 errorHandler.accept(\"Failed to connect to: \" + serverUri);\n               }\n             });\n   }\n \n-  private CompletableFuture<Boolean> connectAsync() {\n-    final CompletableFuture<Boolean> completableFuture = new CompletableFuture<>();\n-    // execute the connection attempt\n-    new Thread(\n-            () -> {\n-              boolean connected;\n-              try {\n-                connected =\n-                    client.connectBlocking(DEFAULT_CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n-              } catch (final InterruptedException ignored) {\n-                connected = false;\n-              }\n-              completableFuture.complete(connected);\n-            })\n-        .start();\n-    return completableFuture;\n+  private CompletableFuture<WebSocket> connectAsync() {\n+    return httpClient\n+        .newWebSocketBuilder()\n+        .connectTimeout(Duration.ofMillis(DEFAULT_CONNECT_TIMEOUT_MILLIS))\n+        .buildAsync(serverUri, webSocketListener);", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzk4MA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395417980", "bodyText": "We have to specify a ping message? Does this trigger the server 'onMessage'?\nI wonder at what point the jdk api implementation is truly worth it..", "author": "DanVanAtta", "createdAt": "2020-03-20T02:48:20Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -68,52 +127,28 @@\n \n   WebSocketConnection(final URI serverUri) {\n     this.serverUri = serverUri;\n-    client =\n-        new WebSocketClient(serverUri) {\n-          @Override\n-          public void onOpen(final ServerHandshake serverHandshake) {\n-            synchronized (queuedMessages) {\n-              connectionIsOpen = true;\n-              queuedMessages.forEach(this::send);\n-              queuedMessages.clear();\n-            }\n-          }\n-\n-          @Override\n-          public void onMessage(final String message) {\n-            listener.messageReceived(message);\n-          }\n-\n-          @Override\n-          public void onClose(final int code, final String reason, final boolean remote) {\n-            if (remote) {\n-              log.severe(\"Connection to server closed: \" + reason);\n-            }\n-            pingSender.cancel();\n-            listener.connectionClosed(reason);\n-          }\n-\n-          @Override\n-          public void onError(final Exception exception) {\n-            listener.handleError(exception);\n-          }\n-        };\n     pingSender =\n         Timers.fixedRateTimer(\"websocket-ping-sender\")\n             .period(45, TimeUnit.SECONDS)\n             .delay(45, TimeUnit.SECONDS)\n             .task(\n                 () -> {\n-                  if (client.isOpen()) {\n-                    client.sendPing();\n+                  if (!client.isOutputClosed()) {\n+                    client\n+                        .sendPing(ByteBuffer.wrap(\"Ping\".getBytes(StandardCharsets.UTF_8)))", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNDA4MA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399704080", "bodyText": "We don't have to, I could as well use an empty array,\nQuoting the websocket spec:\n\nA Ping frame MAY include \"Application data\".", "author": "RoiEXLab", "createdAt": "2020-03-28T20:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxODE4OQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395418189", "bodyText": "If a websocket is not closed properly on client side, is that something that a user should send us a bug report over? Secondarily, a pop-up message that says \"failed to close\" may not be very helpful to a user. If we show an error message to a user, it would be best to inform them of what happened and what they should do about it. Given there is no real impact to them, I'm not sure if we really need to show them any message at all.", "author": "DanVanAtta", "createdAt": "2020-03-20T02:49:44Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -68,52 +127,28 @@\n \n   WebSocketConnection(final URI serverUri) {\n     this.serverUri = serverUri;\n-    client =\n-        new WebSocketClient(serverUri) {\n-          @Override\n-          public void onOpen(final ServerHandshake serverHandshake) {\n-            synchronized (queuedMessages) {\n-              connectionIsOpen = true;\n-              queuedMessages.forEach(this::send);\n-              queuedMessages.clear();\n-            }\n-          }\n-\n-          @Override\n-          public void onMessage(final String message) {\n-            listener.messageReceived(message);\n-          }\n-\n-          @Override\n-          public void onClose(final int code, final String reason, final boolean remote) {\n-            if (remote) {\n-              log.severe(\"Connection to server closed: \" + reason);\n-            }\n-            pingSender.cancel();\n-            listener.connectionClosed(reason);\n-          }\n-\n-          @Override\n-          public void onError(final Exception exception) {\n-            listener.handleError(exception);\n-          }\n-        };\n     pingSender =\n         Timers.fixedRateTimer(\"websocket-ping-sender\")\n             .period(45, TimeUnit.SECONDS)\n             .delay(45, TimeUnit.SECONDS)\n             .task(\n                 () -> {\n-                  if (client.isOpen()) {\n-                    client.sendPing();\n+                  if (!client.isOutputClosed()) {\n+                    client\n+                        .sendPing(ByteBuffer.wrap(\"Ping\".getBytes(StandardCharsets.UTF_8)))\n+                        .exceptionally(logWebSocketError(\"Failed to send ping.\"));\n                   }\n                 });\n   }\n \n   /** Does an async close of the current websocket connection. */\n   void close() {\n     closed = true;\n-    client.close();\n+    if (!client.isOutputClosed()) {\n+      client\n+          .sendClose(WebSocket.NORMAL_CLOSURE, CLIENT_DISCONNECT_MESSAGE)\n+          .exceptionally(logWebSocketError(\"Failed to close\"));", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxODU3Ng==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395418576", "bodyText": "connected does not really make sense as a boolean parameter.\nassertThat(connected, is(webSocket)); is pretty odd.", "author": "DanVanAtta", "createdAt": "2020-03-20T02:52:04Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -104,20 +148,29 @@ void tearDown() {\n     @Test\n     @DisplayName(\"Verify connect initiates connection and starts the pinger\")\n     void connectWillInitiateConnection() throws Exception {\n-      givenWebSocketConnects(true);\n-\n-      final boolean connected =\n+      final HttpClient httpClient = mockHttpClient();\n+      webSocketConnection.setHttpClient(httpClient);\n+      final WebSocket connected =", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzExNA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395433114", "bodyText": "I'm seeing this test fail when run from IDE:\norg.opentest4j.AssertionFailedError: Expected java.util.concurrent.ExecutionException to be thrown, but nothing was thrown.\n\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:71)\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:37)\n\tat org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:2952)\n\tat org.triplea.http.client.web.socket.WebSocketConnectionTest$SendMessageAndConnect.connectionFailure(WebSocketConnectionTest.java:186)\n\nI think I'd quibble a bit more with the test case otherwise. The @DisplayName message is not really accurate anymore. It's also very notable that we can/need to rely on exception handling.\nIt's also notable as well that the method does not document the ExecutionException as being a possibility for somethign to be thrown:\n   * @throws IllegalStateException Thrown if connection is already open (eg: connect called twice).\n   * @throws IllegalStateException Thrown if connection has been closed (ie: 'close()' was called)\n   */\n\nThird, we pass an error handler to the method, yet we also have an exception that is possible to be thrown. Part of the purpose of the error handler is to invoke that instead of throwing an exception.\nThe local IDE failure does need to be sorted out, we can't have tests being non-deterministic and breaking when run from one context and not another. I suspect getting back to a boolean returning only method and not allowing an exception to be thrown, returning false and invoking the error handler would be more inline with the original method contract.", "author": "DanVanAtta", "createdAt": "2020-03-20T04:17:49Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -127,21 +180,13 @@ private void verifyPingerIsStarted() {\n           is(true));\n     }\n \n-    private void givenWebSocketConnects(final boolean connects) throws Exception {\n-      when(webSocketClient.connectBlocking(\n-              WebSocketConnection.DEFAULT_CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS))\n-          .thenReturn(connects);\n-    }\n-\n     @Test\n     @DisplayName(\"Verify connect failing invokes error handler and pinger is not running\")\n-    void connectionFailure() throws Exception {\n-      givenWebSocketConnects(false);\n-\n-      final boolean connected =\n-          webSocketConnection.connect(webSocketConnectionListener, errorHandler).get();\n+    void connectionFailure() {", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzAzMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399717032", "bodyText": "For me the test case works fine, even when running it 10000 times.\nThe test basically checks if connecting to wss://server.invalid fails, which should always be the case because .invalid is a reserved invalid TLD unless you changed something in your host file.\nThe ExecutionException is not thrown by the method itself, it's thrown by Future#get to wrap the underlying IOException that is thrown inside the future. I update the documentation to clarify the future behaviour.", "author": "RoiEXLab", "createdAt": "2020-03-28T22:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzIxMQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395433211", "bodyText": "Why is this test no longer applicable?", "author": "DanVanAtta", "createdAt": "2020-03-20T04:18:26Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -154,52 +199,36 @@ private void verifyErrorHandlerWasCalled() {\n       verify(errorHandler).accept(any());\n     }\n \n-    @Test\n-    @DisplayName(\n-        \"Verify connect failing with exception invokes error handler and pinger is not running\")", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxODY0NA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399718644", "bodyText": "After my changes there was no longer an InterruptedException to be thrown so the \"interrupted\" and the \"errored\" test cases wer suddenly the same", "author": "RoiEXLab", "createdAt": "2020-03-28T22:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzM0NQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395433345", "bodyText": "It does not seem to matter what the disconnect message is, or does it? We probably do not need to assert a specific message.", "author": "DanVanAtta", "createdAt": "2020-03-20T04:19:23Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -154,52 +199,36 @@ private void verifyErrorHandlerWasCalled() {\n       verify(errorHandler).accept(any());\n     }\n \n-    @Test\n-    @DisplayName(\n-        \"Verify connect failing with exception invokes error handler and pinger is not running\")\n-    void connectionFailureWithInterruptedException() throws Exception {\n-      givenConnectionAttemptThrows();\n-\n-      final boolean connected =\n-          webSocketConnection.connect(webSocketConnectionListener, errorHandler).get();\n-\n-      assertThat(connected, is(false));\n-      verifyPingerNotStarted();\n-      verifyErrorHandlerWasCalled();\n-    }\n-\n-    private void givenConnectionAttemptThrows() throws Exception {\n-      doThrow(new InterruptedException(\"test exception\"))\n-          .when(webSocketClient)\n-          .connectBlocking(\n-              WebSocketConnection.DEFAULT_CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n-    }\n-\n     @Test\n     @DisplayName(\"Close will close the underlying socket and stops the pinger\")\n     void close() {\n+      webSocketConnection.getWebSocketListener().onOpen(webSocket);\n+      requiresCloseAction();\n       webSocketConnection.close();\n \n-      verify(webSocketClient).close();\n+      verify(webSocket)\n+          .sendClose(WebSocket.NORMAL_CLOSURE, WebSocketConnection.CLIENT_DISCONNECT_MESSAGE);", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNjEwOQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399716109", "bodyText": "It does no longer matter when we don't check for it.\n(There's this check that logs an \"exception\" when the connection is closed server side, which you suggested should be removed)", "author": "RoiEXLab", "createdAt": "2020-03-28T22:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzUwMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395433502", "bodyText": "This method seems out of order, it is invoked much further down in the test, right?\nSecond, why does this method make sense, what does requiring a close action mean and have to do with a send close returning a nullable future?", "author": "DanVanAtta", "createdAt": "2020-03-20T04:20:29Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -93,7 +128,16 @@ void queuedMessagesAreFlushedOnConnectionOpen() {\n     @BeforeEach\n     void setup() {\n       webSocketConnection = new WebSocketConnection(INVALID_URI);\n-      webSocketConnection.setClient(webSocketClient);\n+    }\n+\n+    private void requiresSendTextAction() {\n+      when(webSocket.sendText(any(), anyBoolean()))\n+          .thenReturn(CompletableFuture.completedFuture(null));\n+    }\n+\n+    private void requiresCloseAction() {", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMTYwNg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399721606", "bodyText": "The name is perhaps slightly misleading.\nThe idea is that tests that \"require a close action\"/run code that invokes sendClose at some point should call this method.\nSuggestions for the name?", "author": "RoiEXLab", "createdAt": "2020-03-28T23:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMTczMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399721732", "bodyText": "Nevermind, I'll just inline this function, it is only used once anyways", "author": "RoiEXLab", "createdAt": "2020-03-28T23:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDEwOQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395434109", "bodyText": "Not sure if you're getting a bit over-paranoid with replaceFirst, the regex ^ really guarantees one match here.\nIt seems like we are defending against the protocol from being shttp? Otherwise the protocol string being equal to https was surefire already.\nDo we have to replace http protocol with ws?", "author": "DanVanAtta", "createdAt": "2020-03-20T04:24:07Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -43,9 +43,9 @@ public GenericWebSocketClient(final URI lobbyUri, final Consumer<String> errorHa\n   }\n \n   @VisibleForTesting\n-  static URI swapHttpsToWssProtocol(final URI uri) {\n-    return uri.getScheme().equals(\"https\")\n-        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n+  static URI swapHttpToWsProtocol(final URI uri) {\n+    return uri.getScheme().matches(\"^https?$\")\n+        ? URI.create(uri.toString().replaceFirst(\"^http\", \"ws\"))", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4Nzc4MQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399687781", "bodyText": "Yes, because the JDK API requires the protocol to be wss, http doesn't work", "author": "RoiEXLab", "createdAt": "2020-03-28T17:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDMxMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395434312", "bodyText": "This block is notable as the error handling is pretty screwed up to begin with. We have an error handler passed to the connect function, yet we still choose to have our own custom error handling on this out layer. Really the inner call connect should take care of the exceptionally case and invoke the error handler. As-is, it seems like the error-handler is a violation of DRY (expressing the same idea in multiple places) or arguably SRP.", "author": "DanVanAtta", "createdAt": "2020-03-20T04:25:28Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -57,7 +57,7 @@ public void registerListenerAndConnect(final Consumer<ServerMessageEnvelope> mes\n             throwable -> {\n               log.log(\n                   Level.SEVERE, \"Unexpected exception completing websocket connection\", throwable);\n-              return false;\n+              return null;", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDUyNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395434525", "bodyText": "I think we may need some additional test cases that exercise concurrency with multiple, broken up messages. I'm concerned about that scenario.", "author": "DanVanAtta", "createdAt": "2020-03-20T04:26:47Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -52,39 +55,71 @@ void tearDown() {\n \n     @Test\n     void onMessage() {\n-      webSocketConnection.getClient().onMessage(MESSAGE);\n+      webSocketConnection.getWebSocketListener().onText(mock(WebSocket.class), MESSAGE, true);\n       verify(webSocketConnectionListener).messageReceived(MESSAGE);\n     }\n \n+    @Test\n+    void verifyListenerAccumulatesMessagesUntilLast() {", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMjM3Mw==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399722373", "bodyText": "As I already mentioned, the JDK API won't invoke the listener again unless we call webSocket.request(1 or higher).\nFrom the documentation:\n\nA receive method is any of the onText, onBinary, onPing, onPong and onClose methods of Listener. WebSocket initiates a receive operation by invoking a receive method on the listener. The listener then must return a CompletionStage which completes once the operation has completed.\nTo control receiving of messages, a WebSocket maintains an internal counter. This counter's value is a number of times the WebSocket has yet to invoke a receive method. While this counter is zero the WebSocket does not invoke receive methods. The counter is incremented by n when request(n) is called. The counter is decremented by one when the WebSocket invokes a receive method.\n\nAlso the WebSocket.Listener documentation states:\n\nThe strict sequential order of invocations from WebSocket to Listener means, in particular, that the Listener's methods are treated as non-reentrant. This means that Listener implementations do not need to be concerned with possible recursion or the order in which they invoke WebSocket.request in relation to their processing logic.\nCareful attention may be required if a listener is associated with more than a single WebSocket. In this case invocations related to different instances of WebSocket may not be ordered and may even happen concurrently.\n\nSo as long as we're not re-using a listener for multiple websockets we are fine", "author": "RoiEXLab", "createdAt": "2020-03-28T23:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDY4Nw==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r395434687", "bodyText": "Have you considered making the websocket listener a stand-alone class? This kind of test is a smell, (law of demeter violation). It we simpliy injected the listener implementation we might be able to decompose the test cases more thoroughly.", "author": "DanVanAtta", "createdAt": "2020-03-20T04:27:50Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -52,39 +55,71 @@ void tearDown() {\n \n     @Test\n     void onMessage() {\n-      webSocketConnection.getClient().onMessage(MESSAGE);\n+      webSocketConnection.getWebSocketListener().onText(mock(WebSocket.class), MESSAGE, true);", "originalCommit": "b0390aa6121579fd8607c2558b45ed59ae694e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNTk4OQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399725989", "bodyText": "I did consider it, but the current implementation is tied too much to the WebSocketConnection class.\nI cleaned up the test cases a bit though", "author": "RoiEXLab", "createdAt": "2020-03-29T00:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNDY4Nw=="}], "type": "inlineReview"}, {"oid": "8122e2debbf8a9a05b9116cb18fb81618626985d", "url": "https://github.com/triplea-game/triplea/commit/8122e2debbf8a9a05b9116cb18fb81618626985d", "message": "Replace Java-Websocket with native JDK library", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "4ff157babc0f23113d2169aec479d3859aaa279c", "url": "https://github.com/triplea-game/triplea/commit/4ff157babc0f23113d2169aec479d3859aaa279c", "message": "Fix tests", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "387c933adbf5bea254486d7b7b92c5dcf40aac85", "url": "https://github.com/triplea-game/triplea/commit/387c933adbf5bea254486d7b7b92c5dcf40aac85", "message": "Add additional test cases", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "ffe0e68bb42862389f4bf9a3a9ca096f63a8a103", "url": "https://github.com/triplea-game/triplea/commit/ffe0e68bb42862389f4bf9a3a9ca096f63a8a103", "message": "Auto-Formatting", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "9a16234508372bee0a0fc4eabdae4f1e6f8c378b", "url": "https://github.com/triplea-game/triplea/commit/9a16234508372bee0a0fc4eabdae4f1e6f8c378b", "message": "Remove sl4j version variable", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "cc0487589994f57eda00f071146099b928ddce01", "url": "https://github.com/triplea-game/triplea/commit/cc0487589994f57eda00f071146099b928ddce01", "message": "Fix websocket protocol", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "400351a0c2d192d481cdfbb2988b5b87ccde1be8", "url": "https://github.com/triplea-game/triplea/commit/400351a0c2d192d481cdfbb2988b5b87ccde1be8", "message": "Fix URI replacement", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "28d21bd6f915a11b42ce51a018e11fd289aeaa0a", "url": "https://github.com/triplea-game/triplea/commit/28d21bd6f915a11b42ce51a018e11fd289aeaa0a", "message": "Fix unit test", "committedDate": "2020-03-28T22:47:06Z", "type": "commit"}, {"oid": "6bdafaf2bb376bf7eade4421d4e78b4dd53f1a09", "url": "https://github.com/triplea-game/triplea/commit/6bdafaf2bb376bf7eade4421d4e78b4dd53f1a09", "message": "Update documentation and test case", "committedDate": "2020-03-28T22:47:32Z", "type": "commit"}, {"oid": "23c855c0eebdbfc074b3b41e875a9e3c3da9c617", "url": "https://github.com/triplea-game/triplea/commit/23c855c0eebdbfc074b3b41e875a9e3c3da9c617", "message": "Remove close reason handling", "committedDate": "2020-03-28T23:16:41Z", "type": "commit"}, {"oid": "52c2152fe8e3f55bdb65f96d425841a3186299ed", "url": "https://github.com/triplea-game/triplea/commit/52c2152fe8e3f55bdb65f96d425841a3186299ed", "message": "Remove custom ping message", "committedDate": "2020-03-28T23:16:54Z", "type": "commit"}, {"oid": "d1e687cb006cd81723ef54f389a98a99233a968b", "url": "https://github.com/triplea-game/triplea/commit/d1e687cb006cd81723ef54f389a98a99233a968b", "message": "Rename variable", "committedDate": "2020-03-28T23:21:23Z", "type": "commit"}, {"oid": "a0f236c179a973d8452a53f1c7de7caca6cadf59", "url": "https://github.com/triplea-game/triplea/commit/a0f236c179a973d8452a53f1c7de7caca6cadf59", "message": "Inline method", "committedDate": "2020-03-28T23:34:03Z", "type": "commit"}, {"oid": "a0f236c179a973d8452a53f1c7de7caca6cadf59", "url": "https://github.com/triplea-game/triplea/commit/a0f236c179a973d8452a53f1c7de7caca6cadf59", "message": "Inline method", "committedDate": "2020-03-28T23:34:03Z", "type": "forcePushed"}, {"oid": "82c9f2efb56cb53cc2f70397bce023c95a76eee7", "url": "https://github.com/triplea-game/triplea/commit/82c9f2efb56cb53cc2f70397bce023c95a76eee7", "message": "Simplify error handling API", "committedDate": "2020-03-28T23:57:47Z", "type": "commit"}, {"oid": "59d03c7bb572527b9eaee9152f07e79e58d41ea3", "url": "https://github.com/triplea-game/triplea/commit/59d03c7bb572527b9eaee9152f07e79e58d41ea3", "message": "Use lighter logging levels", "committedDate": "2020-03-29T00:03:33Z", "type": "commit"}, {"oid": "79b9756978d09bc2826b174a0a17f51555264b6c", "url": "https://github.com/triplea-game/triplea/commit/79b9756978d09bc2826b174a0a17f51555264b6c", "message": "Make listener inner class", "committedDate": "2020-03-29T00:21:22Z", "type": "commit"}, {"oid": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "url": "https://github.com/triplea-game/triplea/commit/8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "message": "Fix potential NPE", "committedDate": "2020-03-29T00:53:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzM0Mw==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399737343", "bodyText": "The error handler should be taking care of any logging that is needed, whether that is a message to a user or a message to the logs.", "author": "DanVanAtta", "createdAt": "2020-03-29T03:02:08Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -153,23 +153,27 @@ void close() {\n    * @param errorHandler Invoked if there is a failure to connect.\n    * @throws IllegalStateException Thrown if connection is already open (eg: connect called twice).\n    * @throws IllegalStateException Thrown if connection has been closed (ie: 'close()' was called)\n-   * @return A {@link CompletableFuture} behaving like the {@link CompletableFuture} returned by\n-   *     {@link WebSocket.Builder#buildAsync(URI, Listener)} in case of an error.\n    */\n-  CompletableFuture<WebSocket> connect(\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  void connect(final WebSocketConnectionListener listener, final Consumer<String> errorHandler) {\n+    connectInternal(listener, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  CompletableFuture<Void> connectInternal(\n       final WebSocketConnectionListener listener, final Consumer<String> errorHandler) {\n     this.listener = Preconditions.checkNotNull(listener);\n     Preconditions.checkState(client == null);\n     Preconditions.checkState(!closed);\n \n     return connectAsync()\n-        .whenComplete(\n-            (webSocket, throwable) -> {\n-              if (webSocket != null && throwable == null) {\n-                pingSender.start();\n-              } else {\n-                errorHandler.accept(\"Failed to connect to: \" + serverUri);\n-              }\n+        .thenRun(pingSender::start)\n+        .exceptionally(\n+            throwable -> {\n+              errorHandler.accept(\"Failed to connect to: \" + serverUri);\n+              log.log(", "originalCommit": "82c9f2efb56cb53cc2f70397bce023c95a76eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDI3Mg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399780272", "bodyText": "I'm a little bit concerned we might lose the stacktrace in case an actual unintentional error occurs, thoughts?", "author": "RoiEXLab", "createdAt": "2020-03-29T10:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzM0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MDg2NA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399850864", "bodyText": "I'm touching code close to this, can see about following up.\nThe 'severe' logging shows a pop-up to headed game clients, the same for the error handler. We'd wind up showing two error messages to a user along with any others. The stack trace is of some value, but only if a user is reporting the problem via error reporter (stack traces are not useful to users).\nIf we want to control whether we have a stack trace or not, the error handler perhaps should accept a nullable throwable.", "author": "DanVanAtta", "createdAt": "2020-03-29T20:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzQxNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399737415", "bodyText": "Why are we returning a value here, just for testing maybe?", "author": "DanVanAtta", "createdAt": "2020-03-29T03:03:15Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -153,23 +153,27 @@ void close() {\n    * @param errorHandler Invoked if there is a failure to connect.\n    * @throws IllegalStateException Thrown if connection is already open (eg: connect called twice).\n    * @throws IllegalStateException Thrown if connection has been closed (ie: 'close()' was called)\n-   * @return A {@link CompletableFuture} behaving like the {@link CompletableFuture} returned by\n-   *     {@link WebSocket.Builder#buildAsync(URI, Listener)} in case of an error.\n    */\n-  CompletableFuture<WebSocket> connect(\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  void connect(final WebSocketConnectionListener listener, final Consumer<String> errorHandler) {\n+    connectInternal(listener, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  CompletableFuture<Void> connectInternal(", "originalCommit": "82c9f2efb56cb53cc2f70397bce023c95a76eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDM4MQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399780381", "bodyText": "Exactly, I wasn't sure how I could wait for the future to complete otherwise", "author": "RoiEXLab", "createdAt": "2020-03-29T10:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODAyNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399738025", "bodyText": "Why mockHttpClient() instead of using @Mock HttpClient httpClient?", "author": "DanVanAtta", "createdAt": "2020-03-29T03:12:32Z", "path": "http-clients/src/test/java/org/triplea/http/client/web/socket/WebSocketConnectionTest.java", "diffHunk": "@@ -104,20 +142,27 @@ void tearDown() {\n     @Test\n     @DisplayName(\"Verify connect initiates connection and starts the pinger\")\n     void connectWillInitiateConnection() throws Exception {\n-      givenWebSocketConnects(true);\n-\n-      final boolean connected =\n-          webSocketConnection.connect(webSocketConnectionListener, errorHandler).get();\n+      final HttpClient httpClient = mockHttpClient();", "originalCommit": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzMTExMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399831112", "bodyText": "AFAIK the mockito strict stups policy prevents declaring mocks that might not be used by all tests.\nI'll create a nested test case to clean that up a bit", "author": "RoiEXLab", "createdAt": "2020-03-29T17:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1OTY1MA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399859650", "bodyText": "Strict stubs should mean that if you define a mock expectation, it must be invoked. Simply declaring a mock that is not used everywhere, or even at all is fine. For example, we create mocks that are injected into builders and/or all arg constructors (via injectmocks), and sometimes they are not used.", "author": "DanVanAtta", "createdAt": "2020-03-29T21:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODYxMA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399738610", "bodyText": "These two variables are named a bit too similarly, it's a bit difficult to keep them straight:\n  private WebSocketConnectionListener listener;\n  private final WebSocket.Listener webSocketListener = new WebSocketListener();\n\nCan they be renamed reasonably or restructured perhaps?", "author": "DanVanAtta", "createdAt": "2020-03-29T03:20:50Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -49,17 +57,21 @@\n       onMethod_ = {@VisibleForTesting})\n   private boolean connectionIsOpen = false;\n \n+  @Setter(\n+      value = AccessLevel.PACKAGE,\n+      onMethod_ = {@VisibleForTesting})\n+  private HttpClient httpClient = HttpClient.newHttpClient();\n+\n   private final URI serverUri;\n \n   private boolean closed = false;\n \n+  private WebSocket client;\n+\n   @Getter(\n       value = AccessLevel.PACKAGE,\n       onMethod_ = {@VisibleForTesting})\n-  @Setter(\n-      value = AccessLevel.PACKAGE,\n-      onMethod_ = {@VisibleForTesting})\n-  private WebSocketClient client;\n+  private final WebSocket.Listener webSocketListener = new WebSocketListener();", "originalCommit": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzMjA1NQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399832055", "bodyText": "I renamed them to make the difference a little bit clearer.", "author": "RoiEXLab", "createdAt": "2020-03-29T18:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODcxNQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399738715", "bodyText": "Is it very burdensome to keep client non-nullable? Also wondering why it's nullable now.", "author": "DanVanAtta", "createdAt": "2020-03-29T03:22:36Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -68,52 +80,28 @@\n \n   WebSocketConnection(final URI serverUri) {\n     this.serverUri = serverUri;\n-    client =\n-        new WebSocketClient(serverUri) {\n-          @Override\n-          public void onOpen(final ServerHandshake serverHandshake) {\n-            synchronized (queuedMessages) {\n-              connectionIsOpen = true;\n-              queuedMessages.forEach(this::send);\n-              queuedMessages.clear();\n-            }\n-          }\n-\n-          @Override\n-          public void onMessage(final String message) {\n-            listener.messageReceived(message);\n-          }\n-\n-          @Override\n-          public void onClose(final int code, final String reason, final boolean remote) {\n-            if (remote) {\n-              log.severe(\"Connection to server closed: \" + reason);\n-            }\n-            pingSender.cancel();\n-            listener.connectionClosed(reason);\n-          }\n-\n-          @Override\n-          public void onError(final Exception exception) {\n-            listener.handleError(exception);\n-          }\n-        };\n     pingSender =\n         Timers.fixedRateTimer(\"websocket-ping-sender\")\n             .period(45, TimeUnit.SECONDS)\n             .delay(45, TimeUnit.SECONDS)\n             .task(\n                 () -> {\n-                  if (client.isOpen()) {\n-                    client.sendPing();\n+                  if (!client.isOutputClosed()) {\n+                    client\n+                        .sendPing(ByteBuffer.allocate(0))\n+                        .exceptionally(logWebSocketError(Level.INFO, \"Failed to send ping.\"));\n                   }\n                 });\n   }\n \n   /** Does an async close of the current websocket connection. */\n   void close() {\n     closed = true;\n-    client.close();\n+    if (client != null && !client.isOutputClosed()) {", "originalCommit": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDEwMg==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399780102", "bodyText": "I'm actually not sure about this, but when testing the customHost thingy I got an NPE in this line, presumably because a connection never got opened (maybe concurrency related) and the connection was closed before that ever happened", "author": "RoiEXLab", "createdAt": "2020-03-29T10:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzODkzMA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399838930", "bodyText": "I just tried to debug this issue and it's gone. Seems like the issue really was that the initial connection took too long, so that the connection was closed before it even really opened.\nI'll add a comment clarifying that", "author": "RoiEXLab", "createdAt": "2020-03-29T19:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTExMw==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399739113", "bodyText": "It takes a lot of convincing that this is threadsafe. Messages coming in will be concurrent, ie: multiple chatters to server and those being handled on different threads then sending back messages concurrently to this listener.\nPerhaps a documentation reference and some commentary on why we are guaranteed to be threadsafe here would be useful for the future. A naive maintainer might look at this and decide we must have a sync lock or start to think the implementation is broken. It seems like an obvious problem if two 'onText' events come in at the same time and they are both not last, then we'll mix the messages together.", "author": "DanVanAtta", "createdAt": "2020-03-29T03:28:20Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -173,8 +156,63 @@ void sendMessage(final String message) {\n       if (!connectionIsOpen) {\n         queuedMessages.add(message);\n       } else {\n-        client.send(message);\n+        client\n+            .sendText(message, true)\n+            .exceptionally(logWebSocketError(Level.SEVERE, \"Failed to send text.\"));\n       }\n     }\n   }\n+\n+  private <T> Function<Throwable, T> logWebSocketError(\n+      final Level level, final String errorMessage) {\n+    return throwable -> {\n+      log.log(level, errorMessage, throwable);\n+      return null;\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  class WebSocketListener implements Listener {\n+    private final StringBuilder textAccumulator = new StringBuilder();\n+\n+    @Override\n+    public void onOpen(final WebSocket webSocket) {\n+      synchronized (queuedMessages) {\n+        client = webSocket;\n+        connectionIsOpen = true;\n+        queuedMessages.forEach(\n+            message ->\n+                client\n+                    .sendText(message, true)\n+                    .exceptionally(logWebSocketError(Level.SEVERE, \"Failed to send queued text.\")));\n+        queuedMessages.clear();\n+      }\n+      webSocket.request(1);\n+    }\n+\n+    @Override\n+    public CompletionStage<?> onText(\n+        final WebSocket webSocket, final CharSequence data, final boolean last) {\n+      textAccumulator.append(data);", "originalCommit": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzMDA4MA==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399830080", "bodyText": "If that helps the code is almost 1:1 taken from an example implementation from the documentation: https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/WebSocket.html#request(long) so this is the way it's meant to be used.\nI haven't actually thought of that and I see how it bothers you. I'll add some documentation which should hopefully clarify that.", "author": "RoiEXLab", "createdAt": "2020-03-29T17:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTE2OQ==", "url": "https://github.com/triplea-game/triplea/pull/6062#discussion_r399739169", "bodyText": "This line perhaps could use a comment, why are we requesting to the websocket, and why 1?", "author": "DanVanAtta", "createdAt": "2020-03-29T03:28:53Z", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketConnection.java", "diffHunk": "@@ -173,8 +156,63 @@ void sendMessage(final String message) {\n       if (!connectionIsOpen) {\n         queuedMessages.add(message);\n       } else {\n-        client.send(message);\n+        client\n+            .sendText(message, true)\n+            .exceptionally(logWebSocketError(Level.SEVERE, \"Failed to send text.\"));\n       }\n     }\n   }\n+\n+  private <T> Function<Throwable, T> logWebSocketError(\n+      final Level level, final String errorMessage) {\n+    return throwable -> {\n+      log.log(level, errorMessage, throwable);\n+      return null;\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  class WebSocketListener implements Listener {\n+    private final StringBuilder textAccumulator = new StringBuilder();\n+\n+    @Override\n+    public void onOpen(final WebSocket webSocket) {\n+      synchronized (queuedMessages) {\n+        client = webSocket;\n+        connectionIsOpen = true;\n+        queuedMessages.forEach(\n+            message ->\n+                client\n+                    .sendText(message, true)\n+                    .exceptionally(logWebSocketError(Level.SEVERE, \"Failed to send queued text.\")));\n+        queuedMessages.clear();\n+      }\n+      webSocket.request(1);\n+    }\n+\n+    @Override\n+    public CompletionStage<?> onText(\n+        final WebSocket webSocket, final CharSequence data, final boolean last) {\n+      textAccumulator.append(data);\n+      if (last) {\n+        listener.messageReceived(textAccumulator.toString());\n+        textAccumulator.setLength(0);\n+      }\n+      webSocket.request(1);", "originalCommit": "8e9c9267142becd3521a26a99a3f0156b6dcf7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ab79d7cd037a67dfb7506723d51cd27ce702cd9", "url": "https://github.com/triplea-game/triplea/commit/5ab79d7cd037a67dfb7506723d51cd27ce702cd9", "message": "Add clarifying comments", "committedDate": "2020-03-29T17:48:07Z", "type": "commit"}, {"oid": "9cf3a92b20f99042f3599665d4e2df298057a9d1", "url": "https://github.com/triplea-game/triplea/commit/9cf3a92b20f99042f3599665d4e2df298057a9d1", "message": "Use nested class for testing", "committedDate": "2020-03-29T17:56:16Z", "type": "commit"}, {"oid": "e1b6e4fb4d580a9d7a7287b1febd268a421a6c4f", "url": "https://github.com/triplea-game/triplea/commit/e1b6e4fb4d580a9d7a7287b1febd268a421a6c4f", "message": "Rename variable and inner class", "committedDate": "2020-03-29T18:03:08Z", "type": "commit"}, {"oid": "b9de84771e521124ff65f3bf337ca6a5d9661414", "url": "https://github.com/triplea-game/triplea/commit/b9de84771e521124ff65f3bf337ca6a5d9661414", "message": "Clarify NPE prevention", "committedDate": "2020-03-29T19:04:59Z", "type": "commit"}]}