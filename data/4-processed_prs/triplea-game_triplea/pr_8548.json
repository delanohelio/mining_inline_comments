{"pr_number": 8548, "pr_title": "Add initial work for creating diffusion maps and lanchester calculator", "pr_createdAt": "2020-12-30T02:12:42Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8548", "timeline": [{"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8", "url": "https://github.com/triplea-game/triplea/commit/bc01f522d923a3fd846fe3180a57f73506603bf8", "message": "Add initial work for creating diffusion maps and lanchester calculator", "committedDate": "2020-12-30T02:11:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjQ0MA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912440", "bodyText": "Without this line, the ai tests don't work.  It needs the compiled test files from the game-core.", "author": "trevan", "createdAt": "2020-12-30T02:13:25Z", "path": "ai/build.gradle", "diffHunk": "@@ -3,4 +3,7 @@ description = 'TripleA ai implementations'\n dependencies {\n     implementation project(\":game-core\")\n     implementation project(\":java-extras\")\n+    implementation project(\":swing-lib\")\n+    testImplementation project(\":test-common\")\n+    testCompile project(':game-core').sourceSets.test.output", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1NzY1OA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550557658", "bodyText": "I'm a bit concerned that we have a dependeny on test data from game-core. I'm interested to learn more about this.\nMeanwhile, testCompile is legacy and will not be supported in a near future release of gradle. You should be able to swap this for testImplementation, does that cause issue doing so?", "author": "DanVanAtta", "createdAt": "2020-12-31T16:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjU1Nw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912557", "bodyText": "This code of adding the two diffusions is not the final thing.  It is there just to make sure things are building and showing up.", "author": "trevan", "createdAt": "2020-12-30T02:14:14Z", "path": "ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAi.java", "diffHunk": "@@ -3,41 +3,174 @@\n import games.strategy.engine.data.GameData;\n import games.strategy.engine.data.GamePlayer;\n import games.strategy.engine.data.GameState;\n+import games.strategy.engine.data.Resource;\n import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.engine.player.IPlayerBridge;\n+import games.strategy.triplea.Constants;\n import games.strategy.triplea.ai.AbstractAi;\n import games.strategy.triplea.delegate.remote.IAbstractPlaceDelegate;\n import games.strategy.triplea.delegate.remote.IMoveDelegate;\n import games.strategy.triplea.delegate.remote.IPurchaseDelegate;\n import games.strategy.triplea.delegate.remote.ITechDelegate;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import games.strategy.triplea.ui.menubar.DebugMenu;\n+import java.awt.event.ActionEvent;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import lombok.Getter;\n+import org.triplea.ai.flowfield.map.DiffusionMap;\n+import org.triplea.ai.flowfield.map.DiffusionType;\n+import org.triplea.ai.flowfield.map.TerritoryDebugUiAction;\n+import org.triplea.ai.flowfield.map.offense.EnemyCapitals;\n+import org.triplea.ai.flowfield.map.offense.ResourceToGet;\n+import org.triplea.ai.flowfield.odds.LanchesterDebugUiAction;\n+import org.triplea.swing.SwingAction;\n \n public class FlowFieldAi extends AbstractAi {\n+\n+  @Getter private final Map<String, DiffusionMap> diffusions = new HashMap<>();\n+  private int round = -1;\n+\n   public FlowFieldAi(final String name, final PlayerTypes.AiType playerType) {\n     super(name, playerType);\n   }\n \n+  @Override\n+  public void initialize(final IPlayerBridge playerBridge, final GamePlayer gamePlayer) {\n+    super.initialize(playerBridge, gamePlayer);\n+    DebugMenu.registerMenuCallback(getName(), this::addDebugMenuItems);\n+\n+    final DiffusionType enemyCapitals =", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjY1NQ==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912655", "bodyText": "This is where diffusion maps will be calculated as well as the rest of the turn calculations.  The @Override methods from the ai player will just utilize the data that is generated in this method (and its helpers).", "author": "trevan", "createdAt": "2020-12-30T02:15:07Z", "path": "ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAi.java", "diffHunk": "@@ -3,41 +3,174 @@\n import games.strategy.engine.data.GameData;\n import games.strategy.engine.data.GamePlayer;\n import games.strategy.engine.data.GameState;\n+import games.strategy.engine.data.Resource;\n import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.engine.player.IPlayerBridge;\n+import games.strategy.triplea.Constants;\n import games.strategy.triplea.ai.AbstractAi;\n import games.strategy.triplea.delegate.remote.IAbstractPlaceDelegate;\n import games.strategy.triplea.delegate.remote.IMoveDelegate;\n import games.strategy.triplea.delegate.remote.IPurchaseDelegate;\n import games.strategy.triplea.delegate.remote.ITechDelegate;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import games.strategy.triplea.ui.menubar.DebugMenu;\n+import java.awt.event.ActionEvent;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import lombok.Getter;\n+import org.triplea.ai.flowfield.map.DiffusionMap;\n+import org.triplea.ai.flowfield.map.DiffusionType;\n+import org.triplea.ai.flowfield.map.TerritoryDebugUiAction;\n+import org.triplea.ai.flowfield.map.offense.EnemyCapitals;\n+import org.triplea.ai.flowfield.map.offense.ResourceToGet;\n+import org.triplea.ai.flowfield.odds.LanchesterDebugUiAction;\n+import org.triplea.swing.SwingAction;\n \n public class FlowFieldAi extends AbstractAi {\n+\n+  @Getter private final Map<String, DiffusionMap> diffusions = new HashMap<>();\n+  private int round = -1;\n+\n   public FlowFieldAi(final String name, final PlayerTypes.AiType playerType) {\n     super(name, playerType);\n   }\n \n+  @Override\n+  public void initialize(final IPlayerBridge playerBridge, final GamePlayer gamePlayer) {\n+    super.initialize(playerBridge, gamePlayer);\n+    DebugMenu.registerMenuCallback(getName(), this::addDebugMenuItems);\n+\n+    final DiffusionType enemyCapitals =\n+        EnemyCapitals.build(getGamePlayer(), getGameData().getPlayerList(), getGameData().getMap());\n+    diffusions.put(\n+        enemyCapitals.getName(),\n+        new DiffusionMap(\n+            enemyCapitals, territory -> getGameData().getMap().getNeighbors(territory)));\n+    final Resource pus = getGameData().getResourceList().getResource(Constants.PUS);\n+    final DiffusionType resourcesToGet =\n+        ResourceToGet.build(\n+            getGamePlayer(), getGameData().getRelationshipTracker(), getGameData().getMap(), pus);\n+    diffusions.put(\n+        resourcesToGet.getName(),\n+        new DiffusionMap(\n+            resourcesToGet, territory -> getGameData().getMap().getNeighbors(territory)));\n+  }\n+\n+  private Collection<JMenuItem> addDebugMenuItems(final TripleAFrame frame) {\n+    final Map<JRadioButtonMenuItem, TerritoryDebugUiAction> actions = new HashMap<>();\n+    final JMenu heatmapMenu = new JMenu(\"HeatMap\");\n+    final ButtonGroup heatmapGroup = new ButtonGroup();\n+\n+    // add an entry that will clear the heatmaps and other listeners\n+    final JRadioButtonMenuItem clearHeatmap =\n+        new JRadioButtonMenuItem(\n+            SwingAction.of(\n+                \"None\",\n+                new AbstractAction() {\n+                  @Override\n+                  public void actionPerformed(final ActionEvent e) {\n+                    getGameData()\n+                        .getMap()\n+                        .getTerritories()\n+                        .forEach(\n+                            territory -> {\n+                              frame.getMapPanel().clearTerritoryOverlay(territory);\n+                            });\n+                    frame.getMapPanel().repaint();\n+                  }\n+                }));\n+    clearHeatmap.setSelected(true);\n+    clearHeatmap.addItemListener(\n+        e ->\n+            actions.entrySet().stream()\n+                .filter(entry -> entry.getKey() != e.getSource())\n+                .forEach(entry -> entry.getValue().unselect()));\n+    heatmapGroup.add(clearHeatmap);\n+    heatmapMenu.add(clearHeatmap);\n+\n+    // add a button for each of the maps\n+    diffusions.forEach(\n+        (name, diffusion) -> {\n+          final TerritoryDebugUiAction action =\n+              new TerritoryDebugUiAction(frame, diffusion, getGameData().getMap());\n+          final JRadioButtonMenuItem menuItem =\n+              new JRadioButtonMenuItem(SwingAction.of(name, action));\n+          actions.put(menuItem, action);\n+          menuItem.addItemListener(\n+              e ->\n+                  actions.entrySet().stream()\n+                      .filter(entry -> entry.getKey() != e.getSource())\n+                      .forEach(entry -> entry.getValue().unselect()));\n+          heatmapGroup.add(menuItem);\n+          heatmapMenu.add(menuItem);\n+        });\n+\n+    return List.of(\n+        heatmapMenu,\n+        new JMenuItem(SwingAction.of(\"Lanchester\", new LanchesterDebugUiAction(frame, this))));\n+  }\n+\n+  @Override\n+  public void stopGame() {\n+    super.stopGame();\n+  }\n+\n   @Override\n   protected void purchase(\n       final boolean purchaseForBid,\n       final int pusToSpend,\n       final IPurchaseDelegate purchaseDelegate,\n       final GameData data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n+\n+  private boolean isNewRound(final int round) {\n+    if (round != this.round) {\n+      this.round = round;\n+      return true;\n+    }\n+    return false;\n+  }\n \n   @Override\n   protected void tech(\n-      final ITechDelegate techDelegate, final GameData data, final GamePlayer player) {}\n+      final ITechDelegate techDelegate, final GameData data, final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n \n   @Override\n   protected void move(\n       final boolean nonCombat,\n       final IMoveDelegate moveDel,\n       final GameData data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n \n   @Override\n   protected void place(\n       final boolean placeForBid,\n       final IAbstractPlaceDelegate placeDelegate,\n       final GameState data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n+\n+  private void calculateTurn() {}", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1NjEzOA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550556138", "bodyText": "Wouldn't be bad to either throw new UnsupportedException(\"TODO\") or add a comment to this method body that the implementation will be landing. I'd recommend creating a Project so that you can have a project number that you can prefix such comments and then find them and clean them up.", "author": "DanVanAtta", "createdAt": "2020-12-31T16:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk1ODAyOA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550958028", "bodyText": "@DanVanAtta , I just tried to create a Project and it doesn't look like I have permissions to do that.  So could you create the project?", "author": "trevan", "createdAt": "2021-01-03T05:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA0NzAzMg==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r551047032", "bodyText": "https://github.com/triplea-game/triplea/projects/22\nLet me know if you have any issues managing or adding items to the project", "author": "DanVanAtta", "createdAt": "2021-01-03T19:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjgyNQ==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912825", "bodyText": "neighbors needs to be excluded because otherwise lombok will create an equals and hashcode that recurses n itself.", "author": "trevan", "createdAt": "2020-12-30T02:16:08Z", "path": "ai/src/main/java/org/triplea/ai/flowfield/map/FieldTerritory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.triplea.ai.flowfield.map;\n+\n+import games.strategy.engine.data.Territory;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+@Data\n+@EqualsAndHashCode(exclude = \"neighbors\")", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1NDk4Nw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550554987", "bodyText": "This is one pitfall of lombok, I would suggest to document this in a test-case, by doing a quick test-case that sets up a minimal FieldTerritory, adds data to the list that would recurse and doing an equals call. In case someone were to try and be clever and remove this exclude, or somehow trigger it otherwise, we'd have the test case to catch it.", "author": "DanVanAtta", "createdAt": "2020-12-31T16:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzA0Nw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913047", "bodyText": "I'd rather this just be a Set since FieldTerritory has a reference to its Territory.  But when I did that, for some reason, I'd get duplicate neighbors in the set.", "author": "trevan", "createdAt": "2020-12-30T02:17:31Z", "path": "ai/src/main/java/org/triplea/ai/flowfield/map/FieldTerritory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.triplea.ai.flowfield.map;\n+\n+import games.strategy.engine.data.Territory;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+@Data\n+@EqualsAndHashCode(exclude = \"neighbors\")\n+public class FieldTerritory {\n+  private Territory territory;\n+  private long value;\n+  @ToString.Exclude private final Map<Territory, FieldTerritory> neighbors = new HashMap<>();", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzQ5OA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913498", "bodyText": "This debug item only works in Global40.  My hopes are to make this be able to calculate what the lanchenster attrition order is so that map makers could then add that to a file in their map.  It currently just runs a battle simulation and a lanchester calculation and displays the two results.", "author": "trevan", "createdAt": "2020-12-30T02:21:05Z", "path": "ai/src/main/java/org/triplea/ai/flowfield/odds/LanchesterDebugUiAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.triplea.ai.flowfield.odds;\n+\n+import static games.strategy.triplea.Constants.PLAYER_NAME_GERMANS;\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.power.calculator.CombatValueBuilder;\n+import games.strategy.triplea.delegate.power.calculator.PowerStrengthAndRolls;\n+import games.strategy.triplea.formatter.MyFormatter;\n+import games.strategy.triplea.odds.calculator.AggregateResults;\n+import games.strategy.triplea.odds.calculator.ConcurrentBattleCalculator;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.swing.AbstractAction;\n+import lombok.RequiredArgsConstructor;\n+import org.triplea.ai.flowfield.FlowFieldAi;\n+\n+@RequiredArgsConstructor\n+public class LanchesterDebugUiAction extends AbstractAction {\n+  private static final long serialVersionUID = -919496373521710039L;\n+\n+  private final TripleAFrame frame;\n+  private final FlowFieldAi ai;\n+\n+  @Override\n+  public void actionPerformed(final ActionEvent e) {", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1MzcyMQ==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550553721", "bodyText": "My hopes are to make this be able to calculate what the lanchenster attrition order is so that map makers could then add that to a file in their map.\n\nWe need to discuss this. It's hell to support run-time dependencies that exist on hard disks. It is something we will forever have to support and potentially retrofit all maps to have such a file. A per-AI, per-map configuration IMO is a last resort, maybe a non-starter.\nAn example of this has been supporting save-game files, supporting network communication, and supporting variations of Map-XMLs, all have been challenges and each has resulted in bug reports and many hours of additional maintenance effort.", "author": "DanVanAtta", "createdAt": "2020-12-31T16:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzgyMQ==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913821", "bodyText": "I thought setTerritoryOverlay would be what I wanted but it only colors the border of the territory.  And that isn't very visible.  So, this new method uses the FILL operation so that the entire territory is colored.", "author": "trevan", "createdAt": "2020-12-30T02:23:28Z", "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/TileManager.java", "diffHunk": "@@ -567,6 +567,20 @@ public void setTerritoryOverlay(\n     updateTerritory(territory, data, mapData);\n   }\n \n+  public void setTerritoryOverlayForTile(\n+      final Territory territory,\n+      final Color color,\n+      final int alpha,\n+      final GameData data,\n+      final MapData mapData) {\n+    synchronized (mutex) {\n+      final IDrawable drawable =\n+          new TerritoryOverLayDrawable(color, territory.getName(), alpha, Operation.FILL);", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNDA1NA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549914054", "bodyText": "These two methods (addAdditionalTerritoryDetailsFunction and removeAdditionalTerritoryDetailsFunction) allow the ai to add text to the territory details panel.  This, with the heat map overlay, makes it really easy to see what the territory valuations are.", "author": "trevan", "createdAt": "2020-12-30T02:24:52Z", "path": "game-core/src/main/java/games/strategy/triplea/ui/TerritoryDetailPanel.java", "diffHunk": "@@ -108,6 +112,14 @@ public void setGameData(final GameData data) {\n     territoryChanged(null);\n   }\n \n+  public void addAdditionalTerritoryDetailsFunction(final Function<Territory, String> method) {", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7bae241374686f535f517a599f4f3ed6d700b232", "url": "https://github.com/triplea-game/triplea/commit/7bae241374686f535f517a599f4f3ed6d700b232", "message": "Separate territory neighbor calculator from the diffusion maps\n\nBuild diffusion maps for all unit types. Start work on creating unique\nterritory neighbors per unit type.", "committedDate": "2020-12-30T15:47:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550347761", "bodyText": "The swing dependencies in AI would be great to break. It would very much allow for an easier path to JavaFX and perhaps be better general decoupling of AI with UI.\nCan we convert the dependencies to be data dependencies instead of actual UI components? What kinds of things do we need UI components for in this AI?", "author": "DanVanAtta", "createdAt": "2020-12-30T22:44:06Z", "path": "ai/build.gradle", "diffHunk": "@@ -3,4 +3,7 @@ description = 'TripleA ai implementations'\n dependencies {\n     implementation project(\":game-core\")\n     implementation project(\":java-extras\")\n+    implementation project(\":swing-lib\")", "originalCommit": "bc01f522d923a3fd846fe3180a57f73506603bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0ODI0OA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550348248", "bodyText": "It is the debug menu and dialogs.  Maybe I should create a \"ai-swing-debug\" package that is dependent on \"swing-lib\".  Then \"ai\" can depend on \"ai-swing-debug\" but use the new package for all of the debug ui creation stuff.", "author": "trevan", "createdAt": "2020-12-30T22:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3NDU2Nw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550374567", "bodyText": "That might just be punting the problem. Perhaps the game can provide an API that AI can use to send debug data and let the game handle the UI elements. Then it'll be up to game-core to bind data to UI.", "author": "DanVanAtta", "createdAt": "2020-12-31T01:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3ODIyNw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550378227", "bodyText": "\"swing-lib\" brings in SwingAction which is used to handle JMenuItem actions.  So, if you don't want \"swing-lib\", then the ai can't build JMenuItems.  Instead, I guess it will have to send back a map of TripleaUiActions that have the name of the item, any child TripleaUiActions, and whether it is a checkbox, radio button, or regular item.\nThe other 5 interactions with swing code that the debug uses is\nTripleAFrame.getTerritoryDetails().addAdditionalTerritoryDetailsFunction(territoryDetailMethod);    TripleAFrame.getTerritoryDetails().removeAdditionalTerritoryDetailsFunction(territoryDetailMethod);\nTripleAFrame.getMapPanel().setTerritoryOverlayForTile(territory, color, 100);\nTripleAFrame.getMapPanel().clearTerritoryOverlay(territory);\nTripleAFrame.getMapPanel().repaint();\n\n(see TerritoryDebugUiAction)\nI was also planning on having LanchesterDebugUiAction show the calculated attributionFactor or maybe hooking into the BattleCalculator somehow.  This isn't done yet.", "author": "trevan", "createdAt": "2020-12-31T02:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM5MDM3NA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550390374", "bodyText": "Just a few quick comments:\n\nMap<Integer, Integer> = TreeMap<>, List<Tuple<Integer, Integer>>, List` are all effectively the same data structure, the latter is the most descriptive though. To avoid javascript'esque typing, we can create interfaces that describe the data being passed. IE:\n\ninterface DebugMenuItem() {\n   String getTitle();\n   void renderContent(Consumer<Supplier> sendDataToMe);\n}\n\nWe can probably do very similar to hide the 'mapPanel' and 'territory' details as well. EG:\nConsumer<TerritoryName>  territoryClearFunction =  TripleAFrame.getMapPanel()::clearTerritoryOverlay\n\nIs that workable at all? I think there just needs to be an inversion, java 8 functional interfaces potentially being very useful here to bind specific method calls to functions needed by AI. One example where this was used was with LobbyWatcher, instead of having a HeadlessLobbyWatcher and Headed, the only difference needing to be how errors were handled, the two were unified and accepted a Consumer<String> errorReporter that was in one case bound to a UI window and in the other was just a Logger call.", "author": "DanVanAtta", "createdAt": "2020-12-31T03:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM5MjA4Nw==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550392087", "bodyText": "I'm not exactly sure what the first comment is about.\nBut the DebugMenuItem interface won't cut it.  You'd need a class like:\n@Value\nclass UiMenuItem {\n  enum MenuType {\n    CHECKBOX,\n    RADIOBUTTON,\n    DEFAULT,\n    MENU,\n  }\n  String title;\n  MenuType menuType;\n  List<UiMenuItem> children;\n  Consumer<DebugMenuActions> performAction;\n}\n\nThen DebugMenuActions would look like:\ninterface DebugMenuActions {\n  Consumer<Map<Territory, String>> addAdditionalTerritoryDetails;\n  Consumer<Map<Territory, String>> removeAdditionalTerritoryDetails;\n  Consumer<TerritoryOverlayDetails> addTerritoryOverlay;\n  @Value\n  class TerritoryOverlayDetails {\n    Territory territory;\n    Color color; // Color is awt so that might need to change to some other abstraction\n    int alpha;\n  };\n  Consumer<Territory> clearTerritoryOverlay;\n  Runnable repaintMap;\n}\n\nThe DebugMenuActions, though, will slowly get bigger as other debug requirements are added.", "author": "trevan", "createdAt": "2020-12-31T04:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM5NDA3OA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550394078", "bodyText": "And that api doesn't come close to encompassing what the ProAi needs for its debug menu and dialog.  It needs to not only create menu items but a dialog with buttons, text areas, checkboxes, etc.  It needs action listeners and probably many other things.", "author": "trevan", "createdAt": "2020-12-31T04:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUzODM1OA==", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550538358", "bodyText": "The first comment is about unstructured data. Any class with string fields could arguably be represented as a Map. Hence, rather than representing data as a map, more structure can be added. For example, map.get(\"x\")  and Tuple.getFirst() are both less structured variants of Point.getX()\n\nAnd that api doesn't come close to encompassing what the ProAi needs for its debug menu and dialog.\n\nIt was not meant to be a comprehensive example. I would not worry about ProAi for just now and focus on creating a clean interface for the new debug and avoid adding to any existing problems (particularly at this early phase where patterns are being set and would be carried forward, further consolidating and exacerbating unresolved anti-patterns).\nUiMenuItem seems to still be very coupled to UI. As a suggestion, here is a slightly more fleshed out example for interfaces that game-core could provide:\ninterface AiDebugMenu {\n   Map<PlayerType, AiPlayerDebugOption> getPerPlayerDebugOptions;\n   Set<AiDebugOption> getAiDebugOptions;\n}\n\ninterface AiPlayerDebugOption {    \n    /** Used by game-core to set the menu item title */\n    String getTitle();\n\n    /** This is a callback into the AI code that should tell it to invoke the renderDelegate to do debug */\n    void setEnabled(String playerName, boolean enabled);\n\n    /** This will be called by game-core during game initialization to provide a render \n         delegate to the AI code so it can access drawing routines */\n    void setRenderDelegate(DebugMapRenderer renderDelegate);\n\n    /** This set to true converts us from checkbox to radioButton */\n    boolean isMutuallyExclusive() ;\n\n    /** This returning a non-null and/or a non-empty list makes the current object a parent of a checkbox or a radio button list */\n    List<AiPlayerDebugOption> getSubCategoryDebugOptions();\n}\n\n/** interface for providing an API for AI to draw on the map */\ninterface DebugMapRenderer {\n     void drawOnTerritory(String territoryName, String textValue);\n     void colorTerritory(String territoryName, Color color, double transparency);\n     void clear();\n}\n\n/** Interface for debug option that is generic to AI, EG: 'draw lancaster'\ninterface AiDebugOption {\n    String getOptionTitle();\n    void setEnabled(boolean enabled);\n    void setRenderDelegate(DebugMapRenderer renderDelegate);\n    /** This returning a non-empty list will make the current debug option a parent of a checkbox or a radio button list */\n    List<AiDebugOption> getSubCategoryDebugOptions();\n}\n\nIn above, for game-core to render game menus, it would take a collection of debug options and check:\n\ndoes this have children? If so, it's the parent of a sub-menu\nfor all remaining, group them into two:\n\nmutually exclusive (radio button group)\nnot mutually exclusive (check boxes)\n\n\n\nExample implementation for  'DrawLancasterDebugOption':\n\n@AllArgsConstructor\nclass DrawLancasterDebugOption {\n   private final MapData mapData; // or collection of territories, the base data AI is using\n   private boolean enabled;\n   private DebugMapRenderer debugMapRenderer;\n\n   void setRenderDelegate(DebugMapRenderer renderDelegate) {\n      this.debugMapRenderer = debugMapRenderer;\n   }\n\n   boolean setEnabled(boolean enabled) {\n        this.enabled = enabled;\n        if(enabled) {\n             drawDebugToMap();\n         }\n   }\n   \n   void onUpdate() {\n         if(enabled) {\n             drawDebugToMap();\n         }\n    }\n\n    private void drawDebugToMap() {\n           Map<String, Color> territoryShadings = ...;\n          territoryShadings.entrySet.forEach(entry -> renderDelegate.shadeTerritory(entry.getKey(), entry.getValue());         \n    }\n}\n\nHopefully that gives a more useful and concrete example. Please follow up with comments & questions for further discussion.", "author": "DanVanAtta", "createdAt": "2020-12-31T16:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ=="}], "type": "inlineReview"}, {"oid": "1743366cc9c622419524b6181e880a9af30a5a22", "url": "https://github.com/triplea-game/triplea/commit/1743366cc9c622419524b6181e880a9af30a5a22", "message": "Rename from diffusion to influence. Diffuse unit information from targets", "committedDate": "2021-01-02T02:29:18Z", "type": "commit"}, {"oid": "af22281644bb5f9c9d0a2ebaf5b33cf3cab1315a", "url": "https://github.com/triplea-game/triplea/commit/af22281644bb5f9c9d0a2ebaf5b33cf3cab1315a", "message": "Merge remote-tracking branch 'upstream/master' into flow-field-ai-initial-work", "committedDate": "2021-01-02T02:58:14Z", "type": "commit"}, {"oid": "eadf2190b900adac8f0b58314d82c62f2cfdc2d8", "url": "https://github.com/triplea-game/triplea/commit/eadf2190b900adac8f0b58314d82c62f2cfdc2d8", "message": "Build debug menu w/  AiPlayerDebugAction/AiPlayerDebugOption instead of JMenuItems\n\nWhen an ai player registers a debug menu, it no longer needs access to\nJMenuItems or other swing related code. It uses AiPlayerDebugActions and\nAiPlayerDebugOptions.", "committedDate": "2021-01-02T06:52:39Z", "type": "commit"}, {"oid": "1c37c6f91885b674ba23fd40dc1853056d068607", "url": "https://github.com/triplea-game/triplea/commit/1c37c6f91885b674ba23fd40dc1853056d068607", "message": "Use the test resources in game-core instead of copying to ai", "committedDate": "2021-01-02T18:09:11Z", "type": "commit"}, {"oid": "9ae0f7167317f1cb6bfcc1d8547a2a9a7486836f", "url": "https://github.com/triplea-game/triplea/commit/9ae0f7167317f1cb6bfcc1d8547a2a9a7486836f", "message": "Improve debug menu options", "committedDate": "2021-01-03T04:30:03Z", "type": "commit"}]}