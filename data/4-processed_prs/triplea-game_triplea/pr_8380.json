{"pr_number": 8380, "pr_title": "Add tests for UnitUtils#translateAttributesToOtherUnits", "pr_createdAt": "2020-12-08T04:21:29Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8380", "timeline": [{"oid": "8f9e297571dd5b50d54d4cac8cb278572c825b0e", "url": "https://github.com/triplea-game/triplea/commit/8f9e297571dd5b50d54d4cac8cb278572c825b0e", "message": "Add tests for UnitUtils#translateAttributesToOtherUnits", "committedDate": "2020-12-08T04:21:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMjU5NQ==", "url": "https://github.com/triplea-game/triplea/pull/8380#discussion_r538922595", "bodyText": "\ud83d\udc4d\nLike the comment on the assertion, I was wondering why the 100 was translated to 20, this comment answered that perfectly.", "author": "DanVanAtta", "createdAt": "2020-12-09T00:56:36Z", "path": "game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea;\n+\n+import static games.strategy.triplea.delegate.GameDataTestUtil.germans;\n+import static games.strategy.triplea.delegate.GameDataTestUtil.territory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.Collection;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class UnitUtilsTest {\n+\n+  private final GameData gameData = TestMapGameData.WW2V3_1942.getGameData();\n+  private final GamePlayer player = germans(gameData);\n+  private final Territory seaZone = territory(\"13 Sea Zone\", gameData);\n+  private final Territory landZone = territory(\"Germany\", gameData);\n+  private final UnitType battleship = GameDataTestUtil.battleship(gameData);\n+  private final UnitType factory = GameDataTestUtil.factory(gameData);\n+\n+  @Nested\n+  class TranslateAttributesToOtherUnits {\n+\n+    @Test\n+    void noChangesIfNothingToTransfer() {\n+      final Unit oldUnit = battleship.create(1, player).get(0);\n+      final Collection<Unit> newUnits = battleship.create(1, player);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+\n+      assertThat(changes.isEmpty(), is(true));\n+    }\n+\n+    @Test\n+    void hitsAreTransferred() {\n+      final Unit oldUnit = battleship.create(1, player).get(0);\n+      final List<Unit> newUnits = battleship.create(1, player);\n+      oldUnit.setHits(1);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(newUnits.get(0).getHits(), is(1));\n+    }\n+\n+    @Test\n+    void hitsAreTransferredToAllUnits() {\n+      final Unit oldUnit = battleship.create(1, player).get(0);\n+      final List<Unit> newUnits = battleship.create(2, player);\n+      oldUnit.setHits(1);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(newUnits.get(0).getHits(), is(1));\n+      assertThat(newUnits.get(1).getHits(), is(1));\n+    }\n+\n+    @Test\n+    void newUnitHasAtLeast1HP() {\n+      final Unit oldUnit = battleship.create(1, player).get(0);\n+      final List<Unit> newUnits = battleship.create(1, player);\n+      oldUnit.setHits(2);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(\n+          \"The new unit will always have at least 1 HP, even if the number of hits to transfer \"\n+              + \"would have set it to 0 HP.\",\n+          newUnits.get(0).getHits(),\n+          is(1));\n+    }\n+\n+    @Test\n+    void bombingDamageIsTransferred() {\n+      final Unit oldUnit = factory.create(1, player).get(0);\n+      final List<Unit> newUnits = factory.create(1, player);\n+      oldUnit.setUnitDamage(5);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, landZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(newUnits.get(0).getUnitDamage(), is(5));\n+    }\n+\n+    @Test\n+    void bombingDamageIsLimited() {\n+      final Unit oldUnit = factory.create(1, player).get(0);\n+      final List<Unit> newUnits = factory.create(1, player);\n+      // force a really large amount of damage\n+      oldUnit.setUnitDamage(100);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, landZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(\n+          \"Factory can only have 20 damage in Germany\", newUnits.get(0).getUnitDamage(), is(20));", "originalCommit": "8f9e297571dd5b50d54d4cac8cb278572c825b0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}