{"pr_number": 6549, "pr_title": "MustFightBattle#determineStepStrings unittests", "pr_createdAt": "2020-05-31T02:27:55Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6549", "timeline": [{"oid": "f986c5685c453942f8a83742b857d383075eee4a", "url": "https://github.com/triplea-game/triplea/commit/f986c5685c453942f8a83742b857d383075eee4a", "message": "Move determineStepStrings to a utility class for refactoring", "committedDate": "2020-05-30T15:08:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1Mw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903453", "bodyText": "Consider simplifying this complex logical expression.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:21Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1NA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903454", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:21Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/SubsChecks.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.MustFightBattle;\n+import java.util.Collection;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+public class SubsChecks {\n+  public static boolean defenderSubsFireFirst(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull GameData gameData) {\n+    return returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData)\n+            == MustFightBattle.ReturnFire.ALL\n+        && returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData)\n+            == MustFightBattle.ReturnFire.NONE;\n+  }\n+\n+  public static MustFightBattle.ReturnFire returnFireAgainstAttackingSubs(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull GameData gameData) {\n+    final boolean attackingSubsSneakAttack =\n+        defendingUnits.stream().noneMatch(Matches.unitIsDestroyer());\n+    final boolean defendingSubsSneakAttack =\n+        defendingSubsSneakAttackAndNoAttackingDestroyers(attackingUnits, gameData);\n+    final MustFightBattle.ReturnFire returnFireAgainstAttackingSubs;\n+    if (!attackingSubsSneakAttack) {\n+      returnFireAgainstAttackingSubs = MustFightBattle.ReturnFire.ALL;\n+    } else if (defendingSubsSneakAttack || Properties.getWW2V2(gameData)) {\n+      returnFireAgainstAttackingSubs = MustFightBattle.ReturnFire.SUBS;\n+    } else {\n+      returnFireAgainstAttackingSubs = MustFightBattle.ReturnFire.NONE;\n+    }\n+    return returnFireAgainstAttackingSubs;\n+  }\n+\n+  public static MustFightBattle.ReturnFire returnFireAgainstDefendingSubs(", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1NQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903455", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:22Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/SubsChecks.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.MustFightBattle;\n+import java.util.Collection;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+public class SubsChecks {\n+  public static boolean defenderSubsFireFirst(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull GameData gameData) {\n+    return returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData)\n+            == MustFightBattle.ReturnFire.ALL\n+        && returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData)\n+            == MustFightBattle.ReturnFire.NONE;\n+  }\n+\n+  public static MustFightBattle.ReturnFire returnFireAgainstAttackingSubs(", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1Ng==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903456", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:22Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1Nw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903457", "bodyText": "Method get has 161 lines of code (exceeds 30 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:22Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1OA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903458", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:22Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ1OQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903459", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:22Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2MA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903460", "bodyText": "Method canAttackerRetreatSubs has 5 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:23Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/RetreatChecks.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Supplier;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@UtilityClass\n+public class RetreatChecks {\n+  public static boolean canAttackerRetreatSubs(\n+      final @NonNull Collection<Unit> defendingUnits,", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2MQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903461", "bodyText": "Method canDefenderRetreatSubs has 6 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:23Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/RetreatChecks.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Supplier;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@UtilityClass\n+public class RetreatChecks {\n+  public static boolean canAttackerRetreatSubs(\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull Collection<Unit> defendingWaitingToDie,\n+      final @NonNull GameData gameData,\n+      final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories,\n+      final @NonNull Boolean isAmphibious) {\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsDestroyer())) {\n+      return false;\n+    }\n+    return defendingWaitingToDie.stream().noneMatch(Matches.unitIsDestroyer())\n+        && (canAttackerRetreat(\n+                defendingUnits, gameData, getAttackerRetreatTerritories, isAmphibious)\n+            || Properties.getSubmersibleSubs(gameData));\n+  }\n+\n+  public static boolean canDefenderRetreatSubs(\n+      final @NonNull Collection<Unit> attackingUnits,", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2Mg==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903462", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:23Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2Mw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903463", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:23Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called\n+    //       at the beginning of the battle and at the end of each round.\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?\n+    if (defendingUnitsAliveAndDamaged.stream().anyMatch(Matches.unitCanNotTargetAll())\n+        && !defenderSubsFireFirst\n+        && (defendingSubsFireWithAllDefenders || defendingSubsFireWithAllDefendersAlways)) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    // Air Units can't attack subs without Destroyers present\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && attackingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(attackingUnits, defendingUnitsAliveAndDamaged)) {\n+      steps.add(AIR_DEFEND_NON_SUBS);\n+    }\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2NA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903464", "bodyText": "Method get has a Cognitive Complexity of 77 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2NQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903465", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2Ng==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903466", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/RetreatChecks.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Supplier;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@UtilityClass\n+public class RetreatChecks {\n+  public static boolean canAttackerRetreatSubs(\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull Collection<Unit> defendingWaitingToDie,\n+      final @NonNull GameData gameData,\n+      final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories,\n+      final @NonNull Boolean isAmphibious) {\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsDestroyer())) {\n+      return false;\n+    }\n+    return defendingWaitingToDie.stream().noneMatch(Matches.unitIsDestroyer())\n+        && (canAttackerRetreat(\n+                defendingUnits, gameData, getAttackerRetreatTerritories, isAmphibious)\n+            || Properties.getSubmersibleSubs(gameData));\n+  }\n+\n+  public static boolean canDefenderRetreatSubs(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull Collection<Unit> attackingWaitingToDie,\n+      final @NonNull GamePlayer defender,\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+              getEmptyOrFriendlySeaNeighbors) {\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsDestroyer())) {\n+      return false;\n+    }\n+    return attackingWaitingToDie.stream().noneMatch(Matches.unitIsDestroyer())\n+        && (getEmptyOrFriendlySeaNeighbors\n+                    .apply(\n+                        defender,\n+                        CollectionUtils.getMatches(defendingUnits, Matches.unitCanEvade()))\n+                    .size()\n+                != 0\n+            || Properties.getSubmersibleSubs(gameData));\n+  }\n+\n+  public static boolean canAttackerRetreatPartialAmphib(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull Boolean isAmphibious) {\n+    if (isAmphibious && Properties.getPartialAmphibiousRetreat(gameData)) {\n+      // Only include land units when checking for allow amphibious retreat\n+      final List<Unit> landUnits = CollectionUtils.getMatches(attackingUnits, Matches.unitIsLand());\n+      for (final Unit unit : landUnits) {\n+        if (!unit.getWasAmphibious()) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  public static boolean canAttackerRetreatPlanes(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull Boolean isAmphibious) {\n+    // TODO: BUG? Why must it be amphibious to retreat planes", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2Nw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903467", "bodyText": "BUG found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/RetreatChecks.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Supplier;\n+import lombok.NonNull;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@UtilityClass\n+public class RetreatChecks {\n+  public static boolean canAttackerRetreatSubs(\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull Collection<Unit> defendingWaitingToDie,\n+      final @NonNull GameData gameData,\n+      final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories,\n+      final @NonNull Boolean isAmphibious) {\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsDestroyer())) {\n+      return false;\n+    }\n+    return defendingWaitingToDie.stream().noneMatch(Matches.unitIsDestroyer())\n+        && (canAttackerRetreat(\n+                defendingUnits, gameData, getAttackerRetreatTerritories, isAmphibious)\n+            || Properties.getSubmersibleSubs(gameData));\n+  }\n+\n+  public static boolean canDefenderRetreatSubs(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull Collection<Unit> attackingWaitingToDie,\n+      final @NonNull GamePlayer defender,\n+      final @NonNull Collection<Unit> defendingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+              getEmptyOrFriendlySeaNeighbors) {\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsDestroyer())) {\n+      return false;\n+    }\n+    return attackingWaitingToDie.stream().noneMatch(Matches.unitIsDestroyer())\n+        && (getEmptyOrFriendlySeaNeighbors\n+                    .apply(\n+                        defender,\n+                        CollectionUtils.getMatches(defendingUnits, Matches.unitCanEvade()))\n+                    .size()\n+                != 0\n+            || Properties.getSubmersibleSubs(gameData));\n+  }\n+\n+  public static boolean canAttackerRetreatPartialAmphib(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull Boolean isAmphibious) {\n+    if (isAmphibious && Properties.getPartialAmphibiousRetreat(gameData)) {\n+      // Only include land units when checking for allow amphibious retreat\n+      final List<Unit> landUnits = CollectionUtils.getMatches(attackingUnits, Matches.unitIsLand());\n+      for (final Unit unit : landUnits) {\n+        if (!unit.getWasAmphibious()) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  public static boolean canAttackerRetreatPlanes(\n+      final @NonNull Collection<Unit> attackingUnits,\n+      final @NonNull GameData gameData,\n+      final @NonNull Boolean isAmphibious) {\n+    // TODO: BUG? Why must it be amphibious to retreat planes", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2OA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903468", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ2OQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903469", "bodyText": "BUG found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ3MA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903470", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called\n+    //       at the beginning of the battle and at the end of each round.\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ3MQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903471", "bodyText": "BUG found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:25Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called\n+    //       at the beginning of the battle and at the end of each round.\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzQ3Mg==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432903472", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-05-31T02:29:25Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    // TODO: BUG? defendingWaitingToDie is always empty since this function is only called\n+    //       at the beginning of the battle and at the end of each round.\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?\n+    if (defendingUnitsAliveAndDamaged.stream().anyMatch(Matches.unitCanNotTargetAll())\n+        && !defenderSubsFireFirst\n+        && (defendingSubsFireWithAllDefenders || defendingSubsFireWithAllDefendersAlways)) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    // Air Units can't attack subs without Destroyers present\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && attackingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(attackingUnits, defendingUnitsAliveAndDamaged)) {\n+      steps.add(AIR_DEFEND_NON_SUBS);\n+    }\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(defender.getName() + FIRE);\n+      steps.add(attacker.getName() + SELECT_CASUALTIES);\n+    }\n+    // remove casualties\n+    steps.add(REMOVE_CASUALTIES);\n+    // retreat attacking subs\n+    if (attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?", "originalCommit": "2ccde7081470c53de9f4c67f877cef2adae047fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ebd38a18d7e085e879ba158c77bc2b13c2335982", "url": "https://github.com/triplea-game/triplea/commit/ebd38a18d7e085e879ba158c77bc2b13c2335982", "message": "Rename StepStrings to BattleSteps and test it", "committedDate": "2020-05-31T02:43:17Z", "type": "commit"}, {"oid": "56ff38338f32166fef90bdf64269795a1908dddf", "url": "https://github.com/triplea-game/triplea/commit/56ff38338f32166fef90bdf64269795a1908dddf", "message": "Move shared code into utility classes", "committedDate": "2020-05-31T02:43:17Z", "type": "commit"}, {"oid": "56ff38338f32166fef90bdf64269795a1908dddf", "url": "https://github.com/triplea-game/triplea/commit/56ff38338f32166fef90bdf64269795a1908dddf", "message": "Move shared code into utility classes", "committedDate": "2020-05-31T02:43:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwNDE1Mg==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432904152", "bodyText": "BUG found", "author": "codeclimate", "createdAt": "2020-05-31T02:45:02Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?\n+    if (defendingUnitsAliveAndDamaged.stream().anyMatch(Matches.unitCanNotTargetAll())\n+        && !defenderSubsFireFirst\n+        && (defendingSubsFireWithAllDefenders || defendingSubsFireWithAllDefendersAlways)) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    // Air Units can't attack subs without Destroyers present\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && attackingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(attackingUnits, defendingUnitsAliveAndDamaged)) {\n+      steps.add(AIR_DEFEND_NON_SUBS);\n+    }\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(defender.getName() + FIRE);\n+      steps.add(attacker.getName() + SELECT_CASUALTIES);\n+    }\n+    // remove casualties\n+    steps.add(REMOVE_CASUALTIES);\n+    // retreat attacking subs\n+    if (attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwNDE1Mw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432904153", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-05-31T02:45:02Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?\n+    if (defendingUnitsAliveAndDamaged.stream().anyMatch(Matches.unitCanNotTargetAll())\n+        && !defenderSubsFireFirst\n+        && (defendingSubsFireWithAllDefenders || defendingSubsFireWithAllDefendersAlways)) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    // Air Units can't attack subs without Destroyers present\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && attackingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(attackingUnits, defendingUnitsAliveAndDamaged)) {\n+      steps.add(AIR_DEFEND_NON_SUBS);\n+    }\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(defender.getName() + FIRE);\n+      steps.add(attacker.getName() + SELECT_CASUALTIES);\n+    }\n+    // remove casualties\n+    steps.add(REMOVE_CASUALTIES);\n+    // retreat attacking subs\n+    if (attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?\n+        if (!Properties.getSubRetreatBeforeBattle(gameData)) {\n+          steps.add(attacker.getName() + SUBS_SUBMERGE);\n+        }\n+      } else {\n+        if (RetreatChecks.canAttackerRetreatSubs(\n+            defendingUnits,\n+            defendingWaitingToDie,\n+            gameData,\n+            getAttackerRetreatTerritories,\n+            isAmphibious)) {\n+          steps.add(attacker.getName() + SUBS_WITHDRAW);\n+        }\n+      }\n+    }\n+    // if we are a sea zone, then we may not be able to retreat\n+    // (ie a sub traveled under another unit to get to the battle site)\n+    // or an enemy sub retreated to our sea zone\n+    // however, if all our sea units die, then the air units can still retreat, so if we have any\n+    // air units attacking in\n+    // a sea zone, we always have to have the retreat option shown\n+    // later, if our sea units die, we may ask the user to retreat\n+    final boolean someAirAtSea =\n+        isBattleSiteWater && attackingUnits.stream().anyMatch(Matches.unitIsAir());\n+    if (RetreatChecks.canAttackerRetreat(\n+            defendingUnits, gameData, getAttackerRetreatTerritories, isAmphibious)\n+        || someAirAtSea\n+        || RetreatChecks.canAttackerRetreatPartialAmphib(attackingUnits, gameData, isAmphibious)\n+        || RetreatChecks.canAttackerRetreatPlanes(attackingUnits, gameData, isAmphibious)) {\n+      steps.add(attacker.getName() + ATTACKER_WITHDRAW);\n+    }\n+    // retreat defending subs\n+    if (defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwNDE1NA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432904154", "bodyText": "BUG found", "author": "codeclimate", "createdAt": "2020-05-31T02:45:02Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {\n+\n+    final List<String> steps = new ArrayList<>();\n+    if (canFireOffensiveAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(offensiveAa)) {\n+        steps.add(attacker.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(defender.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(defender.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (canFireDefendingAa) {\n+      for (final String typeAa : UnitAttachment.getAllOfTypeAas(defendingAa)) {\n+        steps.add(defender.getName() + \" \" + typeAa + AA_GUNS_FIRE_SUFFIX);\n+        steps.add(attacker.getName() + SELECT_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+        steps.add(attacker.getName() + REMOVE_PREFIX + typeAa + CASUALTIES_SUFFIX);\n+      }\n+    }\n+    if (showFirstRun) {\n+      if (!isBattleSiteWater && !bombardingUnits.isEmpty()) {\n+        steps.add(NAVAL_BOMBARDMENT);\n+        steps.add(SELECT_NAVAL_BOMBARDMENT_CASUALTIES);\n+      }\n+      if (!isBattleSiteWater && TechAttachment.isAirTransportable(attacker)) {\n+        final Collection<Unit> bombers =\n+            CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n+        if (!bombers.isEmpty()) {\n+          final Collection<Unit> dependents = getDependentUnits.apply(bombers);\n+          if (!dependents.isEmpty()) {\n+            steps.add(LAND_PARATROOPS);\n+          }\n+        }\n+      }\n+    }\n+    // Check if defending subs can submerge before battle\n+    if (Properties.getSubRetreatBeforeBattle(gameData)) {\n+      if (defendingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(attacker.getName() + SUBS_SUBMERGE);\n+      }\n+      if (attackingUnits.stream().noneMatch(Matches.unitIsDestroyer())\n+          && defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+        steps.add(defender.getName() + SUBS_SUBMERGE);\n+      }\n+    }\n+    // See if there any unescorted transports\n+    if (isBattleSiteWater && Properties.getTransportCasualtiesRestricted(gameData)) {\n+      if (attackingUnits.stream().anyMatch(Matches.unitIsTransport())\n+          || defendingUnits.stream().anyMatch(Matches.unitIsTransport())) {\n+        steps.add(REMOVE_UNESCORTED_TRANSPORTS);\n+      }\n+    }\n+    final boolean defenderSubsFireFirst =\n+        SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n+    final ReturnFire returnFireAgainstDefendingSubs =\n+        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n+    // if attacker has no sneak attack subs, then defender sneak attack subs fire first and remove\n+    // casualties\n+    if (defenderSubsFireFirst && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    final boolean onlyAttackerSneakAttack =\n+        !defenderSubsFireFirst\n+            && returnFireAgainstAttackingSubs == ReturnFire.NONE\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // attacker subs sneak attack, no sneak attack if destroyers are present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(attacker.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+      if (onlyAttackerSneakAttack) {\n+        steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+      }\n+    }\n+    // ww2v2 rules, all subs fire FIRST in combat, regardless of presence of destroyers.\n+    final boolean defendingSubsFireWithAllDefenders =\n+        !defenderSubsFireFirst\n+            && !Properties.getWW2V2(gameData)\n+            && returnFireAgainstDefendingSubs == ReturnFire.ALL;\n+    // defender subs sneak attack, no sneak attack in Pacific/Europe Theaters or if destroyers are\n+    // present\n+    final boolean defendingSubsFireWithAllDefendersAlways =\n+        !SubsChecks.defendingSubsSneakAttack(gameData);\n+    if (!defendingSubsFireWithAllDefendersAlways\n+        && !defendingSubsFireWithAllDefenders\n+        && !defenderSubsFireFirst\n+        && defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike())) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    if ((attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike())\n+            || defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike()))\n+        && !defenderSubsFireFirst\n+        && !onlyAttackerSneakAttack\n+        && (returnFireAgainstDefendingSubs != ReturnFire.ALL\n+            || returnFireAgainstAttackingSubs != ReturnFire.ALL)) {\n+      steps.add(REMOVE_SNEAK_ATTACK_CASUALTIES);\n+    }\n+    // Air units can't attack subs without Destroyers present\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && defendingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(defendingUnits, attackingUnits)) {\n+      steps.add(SUBMERGE_SUBS_VS_AIR_ONLY);\n+      steps.add(AIR_ATTACK_NON_SUBS);\n+    }\n+    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(attacker.getName() + FIRE);\n+      steps.add(defender.getName() + SELECT_CASUALTIES);\n+    }\n+    // classic rules, subs fire with all defenders\n+    // also, ww2v3/global rules, defending subs without sneak attack fire with all defenders\n+    final Collection<Unit> defendingUnitsAliveAndDamaged = new ArrayList<>(defendingUnits);\n+    defendingUnitsAliveAndDamaged.addAll(defendingWaitingToDie);\n+    // TODO: BUG? why is unitCanNotTargetAll used instead of unitIsFirstStrike?\n+    if (defendingUnitsAliveAndDamaged.stream().anyMatch(Matches.unitCanNotTargetAll())\n+        && !defenderSubsFireFirst\n+        && (defendingSubsFireWithAllDefenders || defendingSubsFireWithAllDefendersAlways)) {\n+      steps.add(defender.getName() + FIRST_STRIKE_UNITS_FIRE);\n+      steps.add(attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES);\n+    }\n+    // Air Units can't attack subs without Destroyers present\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsAir())\n+        && attackingUnits.stream().anyMatch(Matches.unitCanNotBeTargetedByAll())\n+        && !canAirAttackSubs(attackingUnits, defendingUnitsAliveAndDamaged)) {\n+      steps.add(AIR_DEFEND_NON_SUBS);\n+    }\n+    if (defendingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n+      steps.add(defender.getName() + FIRE);\n+      steps.add(attacker.getName() + SELECT_CASUALTIES);\n+    }\n+    // remove casualties\n+    steps.add(REMOVE_CASUALTIES);\n+    // retreat attacking subs\n+    if (attackingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?\n+        if (!Properties.getSubRetreatBeforeBattle(gameData)) {\n+          steps.add(attacker.getName() + SUBS_SUBMERGE);\n+        }\n+      } else {\n+        if (RetreatChecks.canAttackerRetreatSubs(\n+            defendingUnits,\n+            defendingWaitingToDie,\n+            gameData,\n+            getAttackerRetreatTerritories,\n+            isAmphibious)) {\n+          steps.add(attacker.getName() + SUBS_WITHDRAW);\n+        }\n+      }\n+    }\n+    // if we are a sea zone, then we may not be able to retreat\n+    // (ie a sub traveled under another unit to get to the battle site)\n+    // or an enemy sub retreated to our sea zone\n+    // however, if all our sea units die, then the air units can still retreat, so if we have any\n+    // air units attacking in\n+    // a sea zone, we always have to have the retreat option shown\n+    // later, if our sea units die, we may ask the user to retreat\n+    final boolean someAirAtSea =\n+        isBattleSiteWater && attackingUnits.stream().anyMatch(Matches.unitIsAir());\n+    if (RetreatChecks.canAttackerRetreat(\n+            defendingUnits, gameData, getAttackerRetreatTerritories, isAmphibious)\n+        || someAirAtSea\n+        || RetreatChecks.canAttackerRetreatPartialAmphib(attackingUnits, gameData, isAmphibious)\n+        || RetreatChecks.canAttackerRetreatPlanes(attackingUnits, gameData, isAmphibious)) {\n+      steps.add(attacker.getName() + ATTACKER_WITHDRAW);\n+    }\n+    // retreat defending subs\n+    if (defendingUnits.stream().anyMatch(Matches.unitCanEvade())) {\n+      if (Properties.getSubmersibleSubs(gameData)) {\n+        // TODO: BUG? Should the presence of destroyers be checked?", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTUzMg==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432989532", "bodyText": "Would you mind describing the reasoning to implement BattleStepStrings?", "author": "DanVanAtta", "createdAt": "2020-05-31T22:10:25Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5Mjk2Nw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432992967", "bodyText": "Sure.  Almost all of the constants in that class are used by determineStepStrings.  Since I moved that code into a new class, I thought I would just implement it just like MustFightBattle.  I'm not sure why it was implemented by MustFightBattle vs importing the constants directly and just wanted to follow the existing convention.", "author": "trevan", "createdAt": "2020-05-31T22:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTY0Ng==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432989646", "bodyText": "get() is the method for a Supplier, should this class implement  Supplier<List<String>>?\nOtherwise, seeing the usage, I would have thought that this class were a supplier.", "author": "DanVanAtta", "createdAt": "2020-05-31T22:11:42Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;\n+  final @NonNull Boolean canFireDefendingAa;\n+  final @NonNull Boolean showFirstRun;\n+  final @NonNull GamePlayer attacker;\n+  final @NonNull GamePlayer defender;\n+  final @NonNull Collection<Unit> offensiveAa;\n+  final @NonNull Collection<Unit> defendingAa;\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+  final @NonNull Collection<Unit> attackingWaitingToDie;\n+  final @NonNull Collection<Unit> defendingWaitingToDie;\n+  final @NonNull Territory battleSite;\n+  final @NonNull GameData gameData;\n+  final @NonNull Collection<Unit> bombardingUnits;\n+  final @NonNull Function<Collection<Unit>, Collection<Unit>> getDependentUnits;\n+  final @NonNull Boolean isBattleSiteWater;\n+  final @NonNull Boolean isAmphibious;\n+  final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+  final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n+      getEmptyOrFriendlySeaNeighbors;\n+\n+  public List<String> get() {", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MzEwNQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432993105", "bodyText": "No, this isn't supposed to be a supplier.  I'm just bad with names.", "author": "trevan", "createdAt": "2020-05-31T22:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MDgwOA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432990808", "bodyText": "Have you consider decomposing this class further?  It would likely simplify the testing substantially as well as this class itself.\nTo illustrate, the main 'get' method of this class would look something like this:\nfinal List<String> steps = new ArrayList<>();\nsteps.addAll(aaBattleStepBuilder.apply(battleStepParameters);\nsteps.addAll(firstRunBattleStepBuilder.apply(battleStepParameters);\nsteps.addAll(submergeSubsBattleStepBuilder.apply(battleStepParameters);\n:\n:\n\nImplied in the above, the class properties here would be extracted to a value object that would hold all of the parameters.\nTo enable test you would want to be able to inject implementations. That could be done by making the class have the following structure:\n@Builder\npublic class BattleSteps {\n  @Nonnull private final Function<BattleStepParameters, List<String>> aaBattleStepBuilder;\n  :\n  :\n\n  // This method call it from test code but do nothing with it, just verify you can invoke this and \n  // and have no errors, that everything can be constructed, that will be an integration test.\n  static newBattleStepBuilder() {\n     return builder()\n           .aaBattleStepBuilder(new AaBattleStepBuilder())\n           :\n           .build();\n  }\n\n} \n\nIn the above, you can use test code to call builder() and inject mock implementations. Then when testing get all you need to do is to verify that you invoked each battle step builder, have each one return a stubbed value and then be sure that all of the stubbed values are present on the returned list.\nEG:\n\n@Mock\nprivate Function<BattleStepParameters, List<String>> aaBatttleStepBuilder;\n\nprivate BattleSteps battleSteps;\n\n@Mock\nprivate BattleStepParameters battleStepParameters;\n\n@BeforeEach\nvoid setup() {\n  battleSteps = BattleSteps.builder()\n     .aaBattleStepBuilder(aaBattleStepBuilder)\n    :\n    :\n    .build();\n}\n\n@Test\nvoid get() {\nwhen(aaBattleStepBuilder.apply(battleStepParameters)).thenReturn(\"aaBattleStep\"));\n:\n:\n\nList<String> battleSteps = battleSteps.get(battleStepParameters);\n\n// using explicit static imports as an example, favor statically importing the matchers below\nassertThat(battleSteps, IsCollectionWithSize.hasSize( x ));\nassertThat(battleSteps, IsIterativeWithItems.hasItems(\n   \"aaBattleSteps\",\n   :\n   :\n   ));\n}\n\nFinally from there, you can implement each set of battle steps one-by-one and test them each individually.\nWDYT?", "author": "DanVanAtta", "createdAt": "2020-05-31T22:26:25Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleStepStrings;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Get the steps that will occurr in the battle */\n+@Builder\n+public class BattleSteps implements BattleStepStrings {\n+\n+  final @NonNull Boolean canFireOffensiveAa;", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MzMxMw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432993313", "bodyText": "Oh, I absolutely plan to reconstruct this class.  This PR is just the first step.  I wanted a small PR where everything was unittested.  Then I can create further PRs where I start to reconstruct it.\nHave you seen my ideas on the forum - https://forums.triplea-game.org/topic/2011/refactoring-mustfightbattle?  I'd like to combine this code with the step executable code.  Each step would be its own separate class, like you mentioned.", "author": "trevan", "createdAt": "2020-05-31T23:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MDgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MTE2OA==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432991168", "bodyText": "Explicit input/output of test setup methods can help make for more explicit unit tests. This method for example could possibly be changed to:\nprivate Unit givenUnitWithAttachment(UnitAttachment unitAttachment) {\n  Unit unit = mock(Unit.class);\n  UnitType unitType = mock(UnitType.class);\n  when(unit.getType).thenReturn(unitType);\n  when(unitType.getAttachment(anyString()).thenReturn(unitAttachment);\n  return unit;\n}\n\nThen a test, for at least this, can be a bit more self-contained, eg:\n    players();\n    attackerRetreat();\n    Unit unit1 = givenUnitWithAttachment(mockUnit1Attachment);\n    unit2();\n    final List<String> steps =\n        getStepBuilder()\n            .attackingUnits(List.of(unit1))\n            .defendingUnits(List.of(unit2))\n            .isBattleSiteWater(false)\n            .build()\n            .get();\n\nIn the above, it's pretty clear the usage of 'unitAttachment' is a side-effect somewhere. Following the above pattern should eventually have unitAttachment become a parameter or a return value of some setup method, so at least you could see where it is configured (which should make the test a bit more self-explanatory and self-contained).\nWDYT of this approach?", "author": "DanVanAtta", "createdAt": "2020-05-31T22:31:58Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -0,0 +1,2199 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.Constants.ATTACKER_RETREAT_PLANES;\n+import static games.strategy.triplea.Constants.DEFENDING_SUBS_SNEAK_ATTACK;\n+import static games.strategy.triplea.Constants.PARTIAL_AMPHIBIOUS_RETREAT;\n+import static games.strategy.triplea.Constants.SUBMERSIBLE_SUBS;\n+import static games.strategy.triplea.Constants.SUB_RETREAT_BEFORE_BATTLE;\n+import static games.strategy.triplea.Constants.TRANSPORT_CASUALTIES_RESTRICTED;\n+import static games.strategy.triplea.Constants.WW2V2;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AA_GUNS_FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_ATTACK_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_DEFEND_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.CASUALTIES_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRST_STRIKE_UNITS_FIRE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.LAND_PARATROOPS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARDMENT;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_SNEAK_ATTACK_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_UNESCORTED_TRANSPORTS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_FIRST_STRIKE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_NAVAL_BOMBARDMENT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBMERGE_SUBS_VS_AIR_ONLY;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_SUBMERGE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.steps.BattleSteps.FIRE;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class BattleStepsTest {\n+\n+  @Mock GameData mockGameData;\n+  @Mock GameProperties mockGameProperties;\n+  @Mock Function<Collection<Unit>, Collection<Unit>> mockGetDependentUnits;\n+  @Mock Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+\n+  @Mock\n+  BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>> getEmptyOrFriendlySeaNeighbors;\n+\n+  @Mock Territory mockBattleSite;\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+  @Mock TechAttachment techAttachment;\n+  @Mock Unit unit1;\n+  @Mock UnitType mockUnit1Type;\n+  @Mock UnitAttachment mockUnit1Attachment;\n+  @Mock Unit unit2;\n+  @Mock UnitType mockUnit2Type;\n+  @Mock UnitAttachment mockUnit2Attachment;\n+  @Mock Unit unit3;\n+  @Mock UnitType mockUnit3Type;\n+  @Mock UnitAttachment mockUnit3Attachment;\n+  @Mock Unit unit4;\n+  @Mock UnitType mockUnit4Type;\n+  @Mock UnitAttachment mockUnit4Attachment;\n+\n+  @BeforeEach\n+  void setupMocks() {\n+    when(mockGameData.getProperties()).thenReturn(mockGameProperties);\n+  }\n+\n+  private void players() {\n+    when(attacker.getName()).thenReturn(\"mockAttacker\");\n+    when(defender.getName()).thenReturn(\"mockDefender\");\n+  }\n+\n+  private void unit1() {", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NDAyMw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432994023", "bodyText": "Interesting idea.  I just recently tried out a different approach where I did something like:\nprivate Unit newUnit() {\n   Unit unit = mock(Unit.class);\n   UnitType unitType = mock(UnitType.class);\n   UnitAttachment unitAttachment = mock(UnitAttachment.class);\n   when(unit.getType).thenReturn(unitType);\n   when(unitType.getAttachment(anyString()).thenReturn(unitAttachment);\n   return unit;\n}\n\nAnd then it is used like:\nUnit unit = newUnit();\nUnitAttachment attachment = unit.getAttachment(\"\");\nwhen(attachment.getTypeAa()).thenReturn(\"AA\");\n\nIn this approach, it reduces the need to create the attachment first or to pass it around.  So I could create helper functions that wrap newUnit and edit the attachment.", "author": "trevan", "createdAt": "2020-05-31T23:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MTE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNjEyMw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r433016123", "bodyText": "The only criticism I would have for that would be this line:\nunit.getAttachment(\"\");\n\nIt takes some guess work why the empty string returns something useful. At this juncture, IMO the simplest would be to have a helper method that would allow you to write something like:\nUnit aaUnit = givenUnitWithAaType(\"AntiAirGun\");", "author": "DanVanAtta", "createdAt": "2020-06-01T02:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MTE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MTI1MQ==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432991251", "bodyText": "nit: I used to personally have a style of prefixing mocks with mock, I think that style is a bit outdated now and the preference is to omit the mock prefix on mock variable names. IE: this variable would be just battleSite.", "author": "DanVanAtta", "createdAt": "2020-05-31T22:32:59Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -0,0 +1,2199 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.Constants.ATTACKER_RETREAT_PLANES;\n+import static games.strategy.triplea.Constants.DEFENDING_SUBS_SNEAK_ATTACK;\n+import static games.strategy.triplea.Constants.PARTIAL_AMPHIBIOUS_RETREAT;\n+import static games.strategy.triplea.Constants.SUBMERSIBLE_SUBS;\n+import static games.strategy.triplea.Constants.SUB_RETREAT_BEFORE_BATTLE;\n+import static games.strategy.triplea.Constants.TRANSPORT_CASUALTIES_RESTRICTED;\n+import static games.strategy.triplea.Constants.WW2V2;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AA_GUNS_FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_ATTACK_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_DEFEND_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.CASUALTIES_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRST_STRIKE_UNITS_FIRE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.LAND_PARATROOPS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARDMENT;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_SNEAK_ATTACK_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_UNESCORTED_TRANSPORTS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_FIRST_STRIKE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_NAVAL_BOMBARDMENT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBMERGE_SUBS_VS_AIR_ONLY;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_SUBMERGE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.steps.BattleSteps.FIRE;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class BattleStepsTest {\n+\n+  @Mock GameData mockGameData;\n+  @Mock GameProperties mockGameProperties;\n+  @Mock Function<Collection<Unit>, Collection<Unit>> mockGetDependentUnits;\n+  @Mock Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+\n+  @Mock\n+  BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>> getEmptyOrFriendlySeaNeighbors;\n+\n+  @Mock Territory mockBattleSite;", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MTQ0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6549#discussion_r432991447", "bodyText": "The helper setup methods are good things \ud83d\udc4d\nExplicit input/output for them would not be bad though, as mentioned in another comment.\nAnother way to do the explicit input/output, for this method, as an example, woudl be:\nprivate static void givneUnitHasAttachment(Unit unit, UnitAttachment unitAttachment) {\n  UnitAttachment unitAttachment = mock(UnitAttachment.class);\n   when(unit.getType).thenReturn(unitAttachment);\n   when(unitAttachment.getAttachment(anyString()).thenReturn(unitAttachment);\n}\n\nThen as usage:\ngivenUnitHasAttachment(unit3, mockUnit3Attachment);\n\nIn the above you can see explicitly which variables are being configured.\nThese should complement well, how tests are done, for example:\nUnit aaUnit = givenUnitWithAttachment(unitAttachment1);\nwhen(unitAttachment.getTypeAa()).thenReturn(\"AntiAirGun\");\n\nUnit notAaUnit = givenUnitWithAttachment(unitAttachment2);\nwhen(unitAttachment.getTypeAa()).thenReturn(\"\");\n\nIn the above, later when you use aaUnit and notAaUnit it'll be a bit more explicit how they were configured and why we have expectations for one unit or another to be in an output list.\nIf you go the route of breaking up BattleStep, then it'll potentially start to make sense to have even more involved helper methods for the test, ie:\nUnit aaUnit = givenUnitWithAaType(\"AntiAirGun\");\nUnit notAaUnit = givenUnitWithAaType(\"\");\n:\n:", "author": "DanVanAtta", "createdAt": "2020-05-31T22:35:55Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -0,0 +1,2199 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.Constants.ATTACKER_RETREAT_PLANES;\n+import static games.strategy.triplea.Constants.DEFENDING_SUBS_SNEAK_ATTACK;\n+import static games.strategy.triplea.Constants.PARTIAL_AMPHIBIOUS_RETREAT;\n+import static games.strategy.triplea.Constants.SUBMERSIBLE_SUBS;\n+import static games.strategy.triplea.Constants.SUB_RETREAT_BEFORE_BATTLE;\n+import static games.strategy.triplea.Constants.TRANSPORT_CASUALTIES_RESTRICTED;\n+import static games.strategy.triplea.Constants.WW2V2;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AA_GUNS_FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_ATTACK_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_DEFEND_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.CASUALTIES_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRST_STRIKE_UNITS_FIRE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.LAND_PARATROOPS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARDMENT;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_SNEAK_ATTACK_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.REMOVE_UNESCORTED_TRANSPORTS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_FIRST_STRIKE_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_NAVAL_BOMBARDMENT_CASUALTIES;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_PREFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBMERGE_SUBS_VS_AIR_ONLY;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_SUBMERGE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.steps.BattleSteps.FIRE;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class BattleStepsTest {\n+\n+  @Mock GameData mockGameData;\n+  @Mock GameProperties mockGameProperties;\n+  @Mock Function<Collection<Unit>, Collection<Unit>> mockGetDependentUnits;\n+  @Mock Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n+\n+  @Mock\n+  BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>> getEmptyOrFriendlySeaNeighbors;\n+\n+  @Mock Territory mockBattleSite;\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+  @Mock TechAttachment techAttachment;\n+  @Mock Unit unit1;\n+  @Mock UnitType mockUnit1Type;\n+  @Mock UnitAttachment mockUnit1Attachment;\n+  @Mock Unit unit2;\n+  @Mock UnitType mockUnit2Type;\n+  @Mock UnitAttachment mockUnit2Attachment;\n+  @Mock Unit unit3;\n+  @Mock UnitType mockUnit3Type;\n+  @Mock UnitAttachment mockUnit3Attachment;\n+  @Mock Unit unit4;\n+  @Mock UnitType mockUnit4Type;\n+  @Mock UnitAttachment mockUnit4Attachment;\n+\n+  @BeforeEach\n+  void setupMocks() {\n+    when(mockGameData.getProperties()).thenReturn(mockGameProperties);\n+  }\n+\n+  private void players() {\n+    when(attacker.getName()).thenReturn(\"mockAttacker\");\n+    when(defender.getName()).thenReturn(\"mockDefender\");\n+  }\n+\n+  private void unit1() {\n+    when(unit1.getType()).thenReturn(mockUnit1Type);\n+    when(mockUnit1Type.getAttachment(anyString())).thenReturn(mockUnit1Attachment);\n+  }\n+\n+  private void unit2() {\n+    when(unit2.getType()).thenReturn(mockUnit2Type);\n+    when(mockUnit2Type.getAttachment(anyString())).thenReturn(mockUnit2Attachment);\n+  }\n+\n+  private void unit3() {", "originalCommit": "56ff38338f32166fef90bdf64269795a1908dddf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c044c6a6d6206b6047681a664f858b6f1f844ce", "url": "https://github.com/triplea-game/triplea/commit/4c044c6a6d6206b6047681a664f858b6f1f844ce", "message": "Remove mock prefix", "committedDate": "2020-05-31T23:19:19Z", "type": "commit"}, {"oid": "3d436e3d27c22cc1a77d28d8852ab3c0a438af2a", "url": "https://github.com/triplea-game/triplea/commit/3d436e3d27c22cc1a77d28d8852ab3c0a438af2a", "message": "Merge remote-tracking branch 'origin/master' into step-strings-unittest", "committedDate": "2020-06-01T02:16:08Z", "type": "commit"}]}