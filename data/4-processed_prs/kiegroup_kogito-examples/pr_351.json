{"pr_number": 351, "pr_title": "KOGITO-3211 Introducting CI example with Kogito SW, Knative and Camel", "pr_createdAt": "2020-09-02T21:08:42Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/351", "timeline": [{"oid": "1189e917bb3adec11111298ceaf78809423e6df8", "url": "https://github.com/kiegroup/kogito-examples/commit/1189e917bb3adec11111298ceaf78809423e6df8", "message": "[KOGITO-3211] - Introducting CI example with Kogito SW, Knative and Camel-K\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-08T14:42:16Z", "type": "forcePushed"}, {"oid": "d3ef8fcb51d93a3b70b8245e6623c18d2552a456", "url": "https://github.com/kiegroup/kogito-examples/commit/d3ef8fcb51d93a3b70b8245e6623c18d2552a456", "message": "Fixing SW workflow, adding headers and manually set jbpm props\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-21T21:37:27Z", "type": "forcePushed"}, {"oid": "50a101ed5767a544fa7621277deb7f24d16a09d2", "url": "https://github.com/kiegroup/kogito-examples/commit/50a101ed5767a544fa7621277deb7f24d16a09d2", "message": "fixing Istio routing with smee\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-23T15:16:27Z", "type": "forcePushed"}, {"oid": "e02535c703a80c373c9cc5bd9c52c4e7c741e48d", "url": "https://github.com/kiegroup/kogito-examples/commit/e02535c703a80c373c9cc5bd9c52c4e7c741e48d", "message": "Reviewing SW workflow, unit tests for github service calls\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-24T21:08:20Z", "type": "forcePushed"}, {"oid": "46ae4a310a94a8f258e59c45d9122a303ab2f0a3", "url": "https://github.com/kiegroup/kogito-examples/commit/46ae4a310a94a8f258e59c45d9122a303ab2f0a3", "message": "[KOGITO-3211] - Introducting CI example with Kogito SW, Knative and Camel\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-25T20:06:00Z", "type": "forcePushed"}, {"oid": "0f7ceb961291d87fcd7bc97c158d2e2f9ccbc5f8", "url": "https://github.com/kiegroup/kogito-examples/commit/0f7ceb961291d87fcd7bc97c158d2e2f9ccbc5f8", "message": "Documentation and infra deployment for Notification service\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-30T21:31:30Z", "type": "forcePushed"}, {"oid": "0769ab3dbf85b18fa4ab8c2fd772763f265f42cc", "url": "https://github.com/kiegroup/kogito-examples/commit/0769ab3dbf85b18fa4ab8c2fd772763f265f42cc", "message": "Adding SW deployment on Kubernetes\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-01T21:14:56Z", "type": "forcePushed"}, {"oid": "426cac31766c4a03af8d9ac9a7d72e19fac2b68d", "url": "https://github.com/kiegroup/kogito-examples/commit/426cac31766c4a03af8d9ac9a7d72e19fac2b68d", "message": "[KOGITO-3211] - Introducting CI example with Kogito SW, Knative and Camel\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-02T20:30:23Z", "type": "commit"}, {"oid": "426cac31766c4a03af8d9ac9a7d72e19fac2b68d", "url": "https://github.com/kiegroup/kogito-examples/commit/426cac31766c4a03af8d9ac9a7d72e19fac2b68d", "message": "[KOGITO-3211] - Introducting CI example with Kogito SW, Knative and Camel\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-02T20:30:23Z", "type": "forcePushed"}, {"oid": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "url": "https://github.com/kiegroup/kogito-examples/commit/5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "message": "Fixing gitignore for virtual service patch\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-06T13:02:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NjE0MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500686141", "bodyText": "@ricardozanini could you move this to the root .gitignore so its shared everywhere.", "author": "cristianonicolai", "createdAt": "2020-10-07T01:33:46Z", "path": "serverless-workflow-github-showcase/github-service/.gitignore", "diffHunk": "@@ -0,0 +1,5 @@\n+# we don't want sensible information to get exposed", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4Njk0MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500686941", "bodyText": "just to keep consistency, can you move the versions to root pom.xml", "author": "cristianonicolai", "createdAt": "2020-10-07T01:36:55Z", "path": "serverless-workflow-github-showcase/github-service/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>serverless-workflow-github-showcase</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>github-service</artifactId>\n+  <name>Kogito Examples :: Serverless Workflow Github Showcase :: GitHub Service</name>\n+\n+  <properties>\n+    <version.kohsuke.github>1.116</version.kohsuke.github>", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NzQ2NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500687464", "bodyText": "same here, better move to root pom.xml", "author": "cristianonicolai", "createdAt": "2020-10-07T01:39:03Z", "path": "serverless-workflow-github-showcase/notification-service/pom.xml", "diffHunk": "@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>serverless-workflow-github-showcase</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>notification-service</artifactId>\n+  <name>Kogito Examples :: Serverless Workflow Github Showcase :: Notification Service</name>\n+\n+  <properties>\n+    <version.org.camel>1.0.1</version.org.camel>", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NzcwMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500687702", "bodyText": "same regarding moving versions to root pom.xml", "author": "cristianonicolai", "createdAt": "2020-10-07T01:39:56Z", "path": "serverless-workflow-github-showcase/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <properties>\n+    <surefire-plugin.version>2.22.1</surefire-plugin.version>", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NzkxNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500687917", "bodyText": "yep, again :P", "author": "cristianonicolai", "createdAt": "2020-10-07T01:40:41Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/pom.xml", "diffHunk": "@@ -0,0 +1,174 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>serverless-workflow-github-showcase</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>pr-checker-workflow</artifactId>\n+  <name>Kogito Examples :: Serverless Workflow Github Showcase :: PR Checker Workflow</name>\n+\n+  <properties>\n+    <version.wiremock>2.27.2</version.wiremock>", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyODI5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500328298", "bodyText": "I would prefer to have a placeholder here because this value must be changed by the user", "author": "danielezonca", "createdAt": "2020-10-06T14:23:38Z", "path": "serverless-workflow-github-showcase/github-service/kubernetes/application.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+org.kogito.examples.sw.github.service.key=/opt/data/github-app-key.der", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MDQzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501070433", "bodyText": "oh this one is built with the container and it's the expected path for the volume mount, shouldn't supposed to be changed. The one the user would change has a placeholder.", "author": "ricardozanini", "createdAt": "2020-10-07T14:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyODI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyOTkyMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500329920", "bodyText": "Isn't this available as dependeycManagement as part of quarkus-bom?", "author": "danielezonca", "createdAt": "2020-10-06T14:25:14Z", "path": "serverless-workflow-github-showcase/github-service/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>serverless-workflow-github-showcase</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>github-service</artifactId>\n+  <name>Kogito Examples :: Serverless Workflow Github Showcase :: GitHub Service</name>\n+\n+  <properties>\n+    <version.kohsuke.github>1.116</version.kohsuke.github>\n+    <version.io.jjwt>0.11.2</version.io.jjwt>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-cache</artifactId>\n+      <version>${version.io.quarkus}</version>", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MTAzNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501071034", "bodyText": "weird, now it's. I removed the version and it's working. First time wasn't :(", "author": "ricardozanini", "createdAt": "2020-10-07T14:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyOTkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDAwNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500334007", "bodyText": "I think this doesn't work in native mode. Is this example supposed to run in native mode?", "author": "danielezonca", "createdAt": "2020-10-06T14:29:14Z", "path": "serverless-workflow-github-showcase/github-service/src/main/java/org/kogito/examples/sw/github/service/TokenProvider.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kogito.examples.sw.github.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import com.google.common.io.Files;\n+import io.jsonwebtoken.JwtBuilder;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.quarkus.cache.CacheResult;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kohsuke.github.GHAppInstallation;\n+import org.kohsuke.github.GHPermissionType;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.GitHubBuilder;\n+\n+/**\n+ * Provides the installation token to interact with the GitHub API via GitHub App Installation\n+ *\n+ * @see <a href=\"https://github-api.kohsuke.org/githubappjwtauth.html\">GitHub App Authentication via JWT token</a>\n+ */\n+@ApplicationScoped\n+public class TokenProvider {\n+\n+    private static final int expirationMillis = 600000;\n+    private static final int cacheExpirationMillis = 300000;\n+\n+    @ConfigProperty(name = \"org.kogito.examples.sw.github.service.app_id\")\n+    String appId;\n+\n+    @ConfigProperty(name = \"org.kogito.examples.sw.github.service.key\")\n+    String privateKeyPath;\n+\n+    @ConfigProperty(name = \"org.kogito.examples.sw.github.service.installation_id\")\n+    Long installationId;\n+\n+    public TokenProvider() {\n+\n+    }\n+\n+    private PrivateKey getPrivateKey() throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n+        byte[] keyBytes = Files.toByteArray(new File(privateKeyPath));", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MzEwOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501073108", "bodyText": "Would be nice to work on native, I'll give it a try, build the image and update the docs. The problem is the dependency from io.jsonwebtoken, not sure if it's compatible :*", "author": "ricardozanini", "createdAt": "2020-10-07T14:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MjU1OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501162559", "bodyText": "I just ran some tests, and the problem of targeting native for this particular service is the GitHub client library we're using. I won't spend to much time looking into this, maybe in the future.", "author": "ricardozanini", "createdAt": "2020-10-07T16:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjI5NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500336294", "bodyText": "Why not ubi-8?", "author": "danielezonca", "createdAt": "2020-10-06T14:31:43Z", "path": "serverless-workflow-github-showcase/notification-service/Dockerfile", "diffHunk": "@@ -0,0 +1,7 @@\n+FROM adoptopenjdk:11-jre-hotspot", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NDI0Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501074247", "bodyText": "Lighter and has JDK 11 working outside of the box. I'll take a second look, though. Another problem is that community members would have to have a RH account to download ubi8 images. :(\nThis example should be accessible to anyone.", "author": "ricardozanini", "createdAt": "2020-10-07T14:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MjkwMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501162900", "bodyText": "Changed to ubi8 based on Quarkus examples.", "author": "ricardozanini", "createdAt": "2020-10-07T16:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNzg4NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r500917885", "bodyText": "What about create a test/dummy project as part of kiegroup?", "author": "danielezonca", "createdAt": "2020-10-07T10:51:49Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/src/main/resources/pr-checker.sw.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"prchecker\",\n+  \"name\": \"Github PR Checker Workflow\",\n+  \"version\": \"1.0\",\n+  \"functions\": [\n+    {\n+      \"name\": \"FetchPRFiles\",\n+      \"type\": \"service\",\n+      \"metadata\": {\n+        \"interface\": \"org.kogito.examples.sw.github.workflow.GitHubService\",\n+        \"operation\": \"fetchPRFiles\"\n+      }\n+    },\n+    {\n+      \"name\": \"AddLabels\",\n+      \"type\": \"service\",\n+      \"metadata\": {\n+        \"interface\": \"org.kogito.examples.sw.github.workflow.GitHubService\",\n+        \"operation\": \"addLabels\"\n+      }\n+    },\n+    {\n+      \"name\": \"AddReviewers\",\n+      \"type\": \"service\",\n+      \"metadata\": {\n+        \"interface\": \"org.kogito.examples.sw.github.workflow.GitHubService\",\n+        \"operation\": \"addReviewers\"\n+      }\n+    }\n+  ],\n+  \"events\": [\n+    {\n+      \"name\": \"PullRequest\",\n+      \"source\": \"https://github.com/ricardozanini/kogito-sw-demo\",", "originalCommit": "5404b1fde0ae36eb81091605f44a1f65ee76c9c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NjM4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r501076384", "bodyText": "It's supposed to be created by the user since requires admin access to the repo to install the bot and etc.. we can evolve in the future to have one of our own. I'll remove this with a placeholder, I forgot to change. Thanks!", "author": "ricardozanini", "createdAt": "2020-10-07T14:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNzg4NQ=="}], "type": "inlineReview"}, {"oid": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "url": "https://github.com/kiegroup/kogito-examples/commit/90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "message": "Incorporating round 1 of reviews\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-07T16:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwNzQ0NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507807444", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              echo \"---> Script to deploy the GitHub service to the Kubernetes cluster. Usage:\"\n          \n          \n            \n              echo \"---> Script to deploy the Notification service to the Kubernetes cluster. Usage:\"", "author": "sutaakar", "createdAt": "2020-10-19T14:39:17Z", "path": "serverless-workflow-github-showcase/notification-service/configure.sh", "diffHunk": "@@ -0,0 +1,63 @@\n+#!/bin/bash\n+# Copyright 2020 Red Hat, Inc. and/or its affiliates\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+QUAY_NAMESPACE=$1\n+SLACK_WEBHOOK=$2\n+\n+CURR_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\n+# shellcheck source=../scripts/common.sh\n+source \"${CURR_DIR}/../scripts/common.sh\"\n+\n+function print_usage() {\n+  echo \"---> Script to deploy the GitHub service to the Kubernetes cluster. Usage:\"", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjcxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507826713", "bodyText": "It is solved now :)", "author": "sutaakar", "createdAt": "2020-10-19T15:03:27Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/kubernetes/base/05-pr-checker-default-http-svc.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+# TODO: remove once https://issues.redhat.com/browse/KOGITO-3516 is solved", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNDQ5NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507824494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or you can ask an administrator to install the prereqs for you.\n          \n          \n            \n            Or you can ask an administrator to install the prerequesites for you.", "author": "radtriste", "createdAt": "2020-10-19T15:00:35Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTMzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507825333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            5. **Kogito Operator** installed in the namespace `kogito-github`. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=kogito-github ./hack/install.sh`\n          \n          \n            \n            5. **Kogito Operator** installed in the created namespace. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=<YOUR_NAMESPACE> ./hack/install.sh`", "author": "radtriste", "createdAt": "2020-10-19T15:01:42Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n+3. [**Istio**](https://istio.io/docs/setup/install/istioctl/) installed. \n+You can follow the [Knative documentation](https://knative.dev/development/install/installing-istio) for a very basic and simple installation.\n+4. **Knative** Serving and Eventing components installed. \n+We recommend [installing the Knative Operator](https://knative.dev/docs/install/knative-with-operators/) and install the rest of the components\n+through it as described in their documentation.\n+5. **Kogito Operator** installed in the namespace `kogito-github`. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=kogito-github ./hack/install.sh`", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4ODQyOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507888429", "bodyText": "Same as above", "author": "ricardozanini", "createdAt": "2020-10-19T16:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTU1MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507825550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n          \n          \n            \n            2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns <YOUR_NAMESPACE>`", "author": "radtriste", "createdAt": "2020-10-19T15:01:56Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDk1MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507884950", "bodyText": "Actually kustomize needs a fixed namespace. I could sed into the file, but this would be simpler, that's why I kept this name constant.", "author": "ricardozanini", "createdAt": "2020-10-19T16:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMDczNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507920734", "bodyText": "then you should mention it somewhere that it should remain", "author": "radtriste", "createdAt": "2020-10-19T17:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTg5OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507825899", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n          \n          \n            \n            To deploy this example in your Kubernetes/OpenShift cluster, you will need (replace `<YOUR_NAMESPACE>` placeholder):", "author": "radtriste", "createdAt": "2020-10-19T15:02:24Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4ODIwMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507888203", "bodyText": "I will leave as is because we need that namespace for the example to work.", "author": "ricardozanini", "createdAt": "2020-10-19T16:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjkxOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507826918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. To clone this repository: `https://github.com/kiegroup/kogito-examples.git && cd serverless-workflow-github-showcase`\n          \n          \n            \n            1. To clone this repository and go to `serverless-workflow-github-showcase` directory (`git clone https://github.com/kiegroup/kogito-examples.git && cd serverless-workflow-github-showcase`)", "author": "radtriste", "createdAt": "2020-10-19T15:03:44Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n+3. [**Istio**](https://istio.io/docs/setup/install/istioctl/) installed. \n+You can follow the [Knative documentation](https://knative.dev/development/install/installing-istio) for a very basic and simple installation.\n+4. **Knative** Serving and Eventing components installed. \n+We recommend [installing the Knative Operator](https://knative.dev/docs/install/knative-with-operators/) and install the rest of the components\n+through it as described in their documentation.\n+5. **Kogito Operator** installed in the namespace `kogito-github`. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=kogito-github ./hack/install.sh`\n+\n+In your local machine you will need:\n+\n+1. To clone this repository: `https://github.com/kiegroup/kogito-examples.git && cd serverless-workflow-github-showcase`", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODk0MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507828940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This service responsibility is to manage GitHub API calls and to provide authentication\n          \n          \n            \n            This service's responsibility is to manage GitHub API calls and to provide authentication", "author": "radtriste", "createdAt": "2020-10-19T15:06:27Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyOTk3NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507829975", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n          \n          \n            \n            When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. Then, in \"Subscribe to Events\" section set \"Pull request\".", "author": "radtriste", "createdAt": "2020-10-19T15:07:49Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDE0Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507830146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n          \n          \n            \n            This way you will be able to make changes in the repositories' PRs where you've installed the GitHub App.", "author": "radtriste", "createdAt": "2020-10-19T15:08:05Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMTM1Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507831352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n          \n          \n            \n            org.kogito.examples.sw.github.service.key=<LOCAL PATH TO YOUR DER FILE>", "author": "radtriste", "createdAt": "2020-10-19T15:09:46Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMTUwMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507831500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n          \n          \n            \n            Replace `<LOCAL PATH TO YOUR DER FILE>` with the absolute path of the converted private key file (DER format).", "author": "radtriste", "createdAt": "2020-10-19T15:09:59Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMzM1NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507833354", "bodyText": "please precise that user should be authenticated to the Kube cluster", "author": "radtriste", "createdAt": "2020-10-19T15:12:28Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n+\n+`<APP INSTALLATION ID>` can be grabbed in the [Installations Dashboard](https://github.com/settings/installations/).\n+Just click in \"Configure\" button next to the app name, and you will be redirected to the Installation page. \n+The installation id is in the end of the URL, e.g.: `https://github.com/settings/installations/12345`.\n+\n+The `<APP_ID>` is the number displayed in the App Dashboard. \n+Click in the \"App settings\" link to be redirected to the dashboard.\n+\n+Having everything in place, start the Quarkus application with the following command:\n+\n+```shell script\n+mvn clean quarkus:dev\n+```\n+\n+Then access the Swagger UI to play around with the API: http://localhost:8080/swagger-ui\n+\n+:warning: **Important**:\n+\n+1. Open a test PR to have some data to play with\n+2. Invite a friend to be a contributor to your repo, so you can make the service request for their review in the PRs :kissing:\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MjY2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507892660", "bodyText": "Incorporated to all 3 services! Thanks!", "author": "ricardozanini", "createdAt": "2020-10-19T16:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMzM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMzg3Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507833873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.\n          \n          \n            \n            If you're running on another cluster than Minikube, the service's route exposed by Knative Serving is probably accessible to you.", "author": "radtriste", "createdAt": "2020-10-19T15:13:13Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n+\n+`<APP INSTALLATION ID>` can be grabbed in the [Installations Dashboard](https://github.com/settings/installations/).\n+Just click in \"Configure\" button next to the app name, and you will be redirected to the Installation page. \n+The installation id is in the end of the URL, e.g.: `https://github.com/settings/installations/12345`.\n+\n+The `<APP_ID>` is the number displayed in the App Dashboard. \n+Click in the \"App settings\" link to be redirected to the dashboard.\n+\n+Having everything in place, start the Quarkus application with the following command:\n+\n+```shell script\n+mvn clean quarkus:dev\n+```\n+\n+Then access the Swagger UI to play around with the API: http://localhost:8080/swagger-ui\n+\n+:warning: **Important**:\n+\n+1. Open a test PR to have some data to play with\n+2. Invite a friend to be a contributor to your repo, so you can make the service request for their review in the PRs :kissing:\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+APP_ID=\n+INSTALLATION_ID=\n+DER_FILE=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $APP_ID $INSTALLATION_ID $DER_FILE\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+// build logs surpressed\n+---> Building and pushing image using tag quay.io/ricardozanini/github-service:latest\n+STEP 1: FROM adoptopenjdk:11-jre-hotspot\n+STEP 2: RUN mkdir -p /opt/app/lib\n+--> Using cache 26183c5ad8a51a030030a250db0c99e649fdd9668ef4766d0b66782d0dad7573\n+STEP 3: COPY target/github-service-1.0.0-SNAPSHOT-runner.jar /opt/app\n+--> 31bc2627d32\n+STEP 4: COPY target/lib/*.jar /opt/app/lib\n+--> 62eae5cdde7\n+STEP 5: CMD [\"java\", \"-jar\", \"/opt/app/github-service-1.0.0-SNAPSHOT-runner.jar\"]\n+STEP 6: COMMIT quay.io/ricardozanini/github-service:latest\n+--> 7c555a3060c\n+7c555a3060c666582824552d8824f2787b59b67b506fb933b171764bde894730\n+Getting image source signatures\n+Copying blob 4b07a7bca5b7 skipped: already exists  \n+Copying blob 08aa6bd002c3 skipped: already exists  \n+Copying blob 19503f7a9eec skipped: already exists  \n+Copying blob bf509d6bc5ec skipped: already exists  \n+Copying blob 2af0e1f1e531 skipped: already exists  \n+Copying blob 88cc1a200eb9 skipped: already exists  \n+Copying blob 20d186c995c3 done  \n+Copying blob 3168c26b96c6 done  \n+Copying blob 80d01ad5c537 skipped: already exists  \n+Copying config 7c555a3060 done  \n+Writing manifest to image destination\n+Copying config 7c555a3060 [--------------------------------------] 0.0b / 6.2KiB\n+Writing manifest to image destination\n+Writing manifest to image destination\n+Storing signatures\n+---> Applying objects to the cluster in the namespace kogito-github.\n+configmap/github-service-properties unchanged\n+secret/github-app-ids unchanged\n+secret/github-app-key unchanged\n+service.serving.knative.dev/github-service configured\n+```\n+\n+To verify if the service have been correctly deployed run:\n+\n+```\n+$ kubectl get ksvc github-service  -n kogito-github\n+\n+NAME             URL                                               LATESTCREATED          LATESTREADY            READY   REASON\n+github-service   http://github-service.kogito-github.example.com   github-service-7frvw   github-service-7frvw   True    \n+```\n+\n+The `READY` column should be true.\n+\n+#### Exposing the service on Minikube\n+\n+If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDQzNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507834437", "bodyText": "Maybe add a cleanup part, for the /etc/hosts file", "author": "radtriste", "createdAt": "2020-10-19T15:14:04Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n+\n+`<APP INSTALLATION ID>` can be grabbed in the [Installations Dashboard](https://github.com/settings/installations/).\n+Just click in \"Configure\" button next to the app name, and you will be redirected to the Installation page. \n+The installation id is in the end of the URL, e.g.: `https://github.com/settings/installations/12345`.\n+\n+The `<APP_ID>` is the number displayed in the App Dashboard. \n+Click in the \"App settings\" link to be redirected to the dashboard.\n+\n+Having everything in place, start the Quarkus application with the following command:\n+\n+```shell script\n+mvn clean quarkus:dev\n+```\n+\n+Then access the Swagger UI to play around with the API: http://localhost:8080/swagger-ui\n+\n+:warning: **Important**:\n+\n+1. Open a test PR to have some data to play with\n+2. Invite a friend to be a contributor to your repo, so you can make the service request for their review in the PRs :kissing:\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+APP_ID=\n+INSTALLATION_ID=\n+DER_FILE=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $APP_ID $INSTALLATION_ID $DER_FILE\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+// build logs surpressed\n+---> Building and pushing image using tag quay.io/ricardozanini/github-service:latest\n+STEP 1: FROM adoptopenjdk:11-jre-hotspot\n+STEP 2: RUN mkdir -p /opt/app/lib\n+--> Using cache 26183c5ad8a51a030030a250db0c99e649fdd9668ef4766d0b66782d0dad7573\n+STEP 3: COPY target/github-service-1.0.0-SNAPSHOT-runner.jar /opt/app\n+--> 31bc2627d32\n+STEP 4: COPY target/lib/*.jar /opt/app/lib\n+--> 62eae5cdde7\n+STEP 5: CMD [\"java\", \"-jar\", \"/opt/app/github-service-1.0.0-SNAPSHOT-runner.jar\"]\n+STEP 6: COMMIT quay.io/ricardozanini/github-service:latest\n+--> 7c555a3060c\n+7c555a3060c666582824552d8824f2787b59b67b506fb933b171764bde894730\n+Getting image source signatures\n+Copying blob 4b07a7bca5b7 skipped: already exists  \n+Copying blob 08aa6bd002c3 skipped: already exists  \n+Copying blob 19503f7a9eec skipped: already exists  \n+Copying blob bf509d6bc5ec skipped: already exists  \n+Copying blob 2af0e1f1e531 skipped: already exists  \n+Copying blob 88cc1a200eb9 skipped: already exists  \n+Copying blob 20d186c995c3 done  \n+Copying blob 3168c26b96c6 done  \n+Copying blob 80d01ad5c537 skipped: already exists  \n+Copying config 7c555a3060 done  \n+Writing manifest to image destination\n+Copying config 7c555a3060 [--------------------------------------] 0.0b / 6.2KiB\n+Writing manifest to image destination\n+Writing manifest to image destination\n+Storing signatures\n+---> Applying objects to the cluster in the namespace kogito-github.\n+configmap/github-service-properties unchanged\n+secret/github-app-ids unchanged\n+secret/github-app-key unchanged\n+service.serving.knative.dev/github-service configured\n+```\n+\n+To verify if the service have been correctly deployed run:\n+\n+```\n+$ kubectl get ksvc github-service  -n kogito-github\n+\n+NAME             URL                                               LATESTCREATED          LATESTREADY            READY   REASON\n+github-service   http://github-service.kogito-github.example.com   github-service-7frvw   github-service-7frvw   True    \n+```\n+\n+The `READY` column should be true.\n+\n+#### Exposing the service on Minikube\n+\n+If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.\n+On Minikube there are some additional steps to be made. \n+\n+Run a new terminal window:\n+\n+```shell script\n+minikube tunnel\n+```\n+\n+Leave the process executing and then execute:\n+\n+```shell script\n+./expose-on-minikube.sh\n+```\n+\n+This script will fetch the Minikube IP exposed by the `tunnel` command and add the route to your local `/etc/hosts` file.\n+\n+You can then access the service via the service URL:\n+\n+```\n+$  kubectl get ksvc github-service  -n kogito-github --output jsonpath=\"{.status.url}\"\n+\n+http://github-service.kogito-github.example.com\n+```\n+\n+As we did when running through the `jar` file, we can access the Swagger UI and play around with the API: \n+\n+http://github-service.kogito-github.example.com/swagger-ui\n+\n+The first query may take a little time to return since Knative will start the service's pod on demand. \n+After some time the pod will just terminate. \n+\n+Congratulations! The GitHub functions is now available in the cluster ready to be consumed by the Kogito Workflow.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MDkyMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507840920", "bodyText": "and authenticated to Kube :)", "author": "radtriste", "createdAt": "2020-10-19T15:22:36Z", "path": "serverless-workflow-github-showcase/notification-service/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+## Notification Service\n+\n+This service will listen to specific [CloudEvents](https://github.com/cloudevents/spec) published by our workflow and post\n+messages in a specific Slack channel using the event data as input.\n+\n+### Creating a new Slack App\n+\n+Like in the GitHub service procedure, we are going to need an API key from a third party\n+service. \n+\n+Go to [Slack API](https://api.slack.com/apps) page and create a new app \n+(or you can reuse one you already have instead).\n+\n+Once you create the app, go to the \"Incoming WebHooks\" menu and copy the \"WebHook URL\". \n+\n+Install the app in one of the Workspaces you have and create a \"github-showcase\" channel\n+there for the service to send some messages. Since it's a demo, you don't want to annoy people with lame \n+bot messages. :)\n+\n+### Trying the service locally\n+\n+Once you have the Slack App created and the WebHook, it's time to try the application locally.\n+\n+This service is just a plain Quarkus application with the [Camel Slack component](https://camel.apache.org/components/latest/slack-component.html) to communicate\n+with the Slack API.\n+\n+Copy the WebHook URL in the `src/main/resources/application.properties` file:\n+\n+```properties\n+# URL details not shown\n+org.kogito.examples.sw.notification.slack.incoming=https://hooks.slack.com/services/(...)\n+```\n+\n+Run the application with:\n+\n+```shell script\n+$ mvn clean quarkus:dev\n+```\n+\n+This service listens to the `/` (root) path for messages in [CloudEvents format](https://github.com/cloudevents/spec/blob/v1.0/spec.md#example), but \n+we added the `/plain` endpoint as well for testing purposes. Sending a request to this\n+endpoint will post a message in the `github-showcase` channel:\n+\n+```shell script\n+curl -X POST \"http://localhost:8080/plain\" -H  \"Content-Type: text/plain\" -d \"this is a test message\"\n+``` \n+\n+As always, we included the Swagger UI in the service, access it at http:localhost:8080/swagger-ui/. \n+\n+### Deploying on Kubernetes\n+\n+> **HEADS UP!** delete the Slack WebHook from the `application.properties` file. \n+> We're going to build an image from the source, you don't want your credentials to be exposed to the world!! \n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MTYyMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507841623", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.\n          \n          \n            \n            If you're running on another cluster than Minikube, the service's route exposed by Knative Serving is probably accessible to you.", "author": "radtriste", "createdAt": "2020-10-19T15:23:32Z", "path": "serverless-workflow-github-showcase/notification-service/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+## Notification Service\n+\n+This service will listen to specific [CloudEvents](https://github.com/cloudevents/spec) published by our workflow and post\n+messages in a specific Slack channel using the event data as input.\n+\n+### Creating a new Slack App\n+\n+Like in the GitHub service procedure, we are going to need an API key from a third party\n+service. \n+\n+Go to [Slack API](https://api.slack.com/apps) page and create a new app \n+(or you can reuse one you already have instead).\n+\n+Once you create the app, go to the \"Incoming WebHooks\" menu and copy the \"WebHook URL\". \n+\n+Install the app in one of the Workspaces you have and create a \"github-showcase\" channel\n+there for the service to send some messages. Since it's a demo, you don't want to annoy people with lame \n+bot messages. :)\n+\n+### Trying the service locally\n+\n+Once you have the Slack App created and the WebHook, it's time to try the application locally.\n+\n+This service is just a plain Quarkus application with the [Camel Slack component](https://camel.apache.org/components/latest/slack-component.html) to communicate\n+with the Slack API.\n+\n+Copy the WebHook URL in the `src/main/resources/application.properties` file:\n+\n+```properties\n+# URL details not shown\n+org.kogito.examples.sw.notification.slack.incoming=https://hooks.slack.com/services/(...)\n+```\n+\n+Run the application with:\n+\n+```shell script\n+$ mvn clean quarkus:dev\n+```\n+\n+This service listens to the `/` (root) path for messages in [CloudEvents format](https://github.com/cloudevents/spec/blob/v1.0/spec.md#example), but \n+we added the `/plain` endpoint as well for testing purposes. Sending a request to this\n+endpoint will post a message in the `github-showcase` channel:\n+\n+```shell script\n+curl -X POST \"http://localhost:8080/plain\" -H  \"Content-Type: text/plain\" -d \"this is a test message\"\n+``` \n+\n+As always, we included the Swagger UI in the service, access it at http:localhost:8080/swagger-ui/. \n+\n+### Deploying on Kubernetes\n+\n+> **HEADS UP!** delete the Slack WebHook from the `application.properties` file. \n+> We're going to build an image from the source, you don't want your credentials to be exposed to the world!! \n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+SLACK_WEBHOOK=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $SLACK_WEBHOOK\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+// build logs surpressed\n+---> Building and pushing image using tag quay.io/ricardozanini/notification-service:latest\n+STEP 1: FROM adoptopenjdk:11-jre-hotspot\n+STEP 2: RUN mkdir -p /opt/app/lib\n+--> Using cache 26183c5ad8a51a030030a250db0c99e649fdd9668ef4766d0b66782d0dad7573\n+STEP 3: COPY target/notification-service-1.0.0-SNAPSHOT-runner.jar /opt/app\n+--> 2a5b658411b\n+STEP 4: COPY target/lib/*.jar /opt/app/lib\n+--> 5fedac21977\n+STEP 5: CMD [\"java\", \"-jar\", \"/opt/app/notification-service-1.0.0-SNAPSHOT-runner.jar\"]\n+STEP 6: COMMIT quay.io/ricardozanini/notification-service:latest\n+--> afe502d1940\n+afe502d1940d65f151c051008bb2057344607408c192787a726399d23d90c2d3\n+Getting image source signatures\n+Copying blob bf509d6bc5ec skipped: already exists  \n+Copying blob 2af0e1f1e531 skipped: already exists  \n+Copying blob 4b07a7bca5b7 skipped: already exists  \n+Copying blob 19503f7a9eec skipped: already exists  \n+Copying blob 88cc1a200eb9 skipped: already exists  \n+Copying blob 08aa6bd002c3 skipped: already exists  \n+Copying blob fc2e00c9333f done  \n+Copying blob 0930f7e901cc done  \n+Copying blob 80d01ad5c537 skipped: already exists  \n+Copying config afe502d194 done  \n+Writing manifest to image destination\n+Copying config afe502d194 [--------------------------------------] 0.0b / 6.2KiB\n+Writing manifest to image destination\n+Writing manifest to image destination\n+Storing signatures\n+---> Applying objects to the cluster in the namespace kogito-github.\n+configmap/notification-service-properties unchanged\n+secret/slack-ids configured\n+service.serving.knative.dev/notification-service configured\n+broker.eventing.knative.dev/default unchanged\n+trigger.eventing.knative.dev/notification-trigger unchanged\n+```\n+\n+To verify if the service have been correctly deployed run:\n+\n+```\n+$ kubectl get ksvc notification-service  -n kogito-github\n+  \n+NAME                   URL                                                     LATESTCREATED                LATESTREADY                  READY   REASON\n+notification-service   http://notification-service.kogito-github.example.com   notification-service-9mgww   notification-service-9mgww   True    \n+```\n+\n+The `READY` column should be true.\n+\n+#### Exposing the service on Minikube\n+\n+If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MjIxMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507842211", "bodyText": "and cleanup of /etc/hosts file", "author": "radtriste", "createdAt": "2020-10-19T15:24:19Z", "path": "serverless-workflow-github-showcase/notification-service/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+## Notification Service\n+\n+This service will listen to specific [CloudEvents](https://github.com/cloudevents/spec) published by our workflow and post\n+messages in a specific Slack channel using the event data as input.\n+\n+### Creating a new Slack App\n+\n+Like in the GitHub service procedure, we are going to need an API key from a third party\n+service. \n+\n+Go to [Slack API](https://api.slack.com/apps) page and create a new app \n+(or you can reuse one you already have instead).\n+\n+Once you create the app, go to the \"Incoming WebHooks\" menu and copy the \"WebHook URL\". \n+\n+Install the app in one of the Workspaces you have and create a \"github-showcase\" channel\n+there for the service to send some messages. Since it's a demo, you don't want to annoy people with lame \n+bot messages. :)\n+\n+### Trying the service locally\n+\n+Once you have the Slack App created and the WebHook, it's time to try the application locally.\n+\n+This service is just a plain Quarkus application with the [Camel Slack component](https://camel.apache.org/components/latest/slack-component.html) to communicate\n+with the Slack API.\n+\n+Copy the WebHook URL in the `src/main/resources/application.properties` file:\n+\n+```properties\n+# URL details not shown\n+org.kogito.examples.sw.notification.slack.incoming=https://hooks.slack.com/services/(...)\n+```\n+\n+Run the application with:\n+\n+```shell script\n+$ mvn clean quarkus:dev\n+```\n+\n+This service listens to the `/` (root) path for messages in [CloudEvents format](https://github.com/cloudevents/spec/blob/v1.0/spec.md#example), but \n+we added the `/plain` endpoint as well for testing purposes. Sending a request to this\n+endpoint will post a message in the `github-showcase` channel:\n+\n+```shell script\n+curl -X POST \"http://localhost:8080/plain\" -H  \"Content-Type: text/plain\" -d \"this is a test message\"\n+``` \n+\n+As always, we included the Swagger UI in the service, access it at http:localhost:8080/swagger-ui/. \n+\n+### Deploying on Kubernetes\n+\n+> **HEADS UP!** delete the Slack WebHook from the `application.properties` file. \n+> We're going to build an image from the source, you don't want your credentials to be exposed to the world!! \n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+SLACK_WEBHOOK=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $SLACK_WEBHOOK\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+// build logs surpressed\n+---> Building and pushing image using tag quay.io/ricardozanini/notification-service:latest\n+STEP 1: FROM adoptopenjdk:11-jre-hotspot\n+STEP 2: RUN mkdir -p /opt/app/lib\n+--> Using cache 26183c5ad8a51a030030a250db0c99e649fdd9668ef4766d0b66782d0dad7573\n+STEP 3: COPY target/notification-service-1.0.0-SNAPSHOT-runner.jar /opt/app\n+--> 2a5b658411b\n+STEP 4: COPY target/lib/*.jar /opt/app/lib\n+--> 5fedac21977\n+STEP 5: CMD [\"java\", \"-jar\", \"/opt/app/notification-service-1.0.0-SNAPSHOT-runner.jar\"]\n+STEP 6: COMMIT quay.io/ricardozanini/notification-service:latest\n+--> afe502d1940\n+afe502d1940d65f151c051008bb2057344607408c192787a726399d23d90c2d3\n+Getting image source signatures\n+Copying blob bf509d6bc5ec skipped: already exists  \n+Copying blob 2af0e1f1e531 skipped: already exists  \n+Copying blob 4b07a7bca5b7 skipped: already exists  \n+Copying blob 19503f7a9eec skipped: already exists  \n+Copying blob 88cc1a200eb9 skipped: already exists  \n+Copying blob 08aa6bd002c3 skipped: already exists  \n+Copying blob fc2e00c9333f done  \n+Copying blob 0930f7e901cc done  \n+Copying blob 80d01ad5c537 skipped: already exists  \n+Copying config afe502d194 done  \n+Writing manifest to image destination\n+Copying config afe502d194 [--------------------------------------] 0.0b / 6.2KiB\n+Writing manifest to image destination\n+Writing manifest to image destination\n+Storing signatures\n+---> Applying objects to the cluster in the namespace kogito-github.\n+configmap/notification-service-properties unchanged\n+secret/slack-ids configured\n+service.serving.knative.dev/notification-service configured\n+broker.eventing.knative.dev/default unchanged\n+trigger.eventing.knative.dev/notification-trigger unchanged\n+```\n+\n+To verify if the service have been correctly deployed run:\n+\n+```\n+$ kubectl get ksvc notification-service  -n kogito-github\n+  \n+NAME                   URL                                                     LATESTCREATED                LATESTREADY                  READY   REASON\n+notification-service   http://notification-service.kogito-github.example.com   notification-service-9mgww   notification-service-9mgww   True    \n+```\n+\n+The `READY` column should be true.\n+\n+#### Exposing the service on Minikube\n+\n+If you're running on another cluster than Minikube, the service route exposed by Knative Serving probably are accessible for you.\n+On Minikube there are some additional steps to be made. \n+\n+Run a new terminal window:\n+\n+```shell script\n+minikube tunnel\n+```\n+\n+Leave the process executing and then execute:\n+\n+```shell script\n+./expose-on-minikube.sh\n+```\n+\n+This script will fetch the Minikube IP exposed by the `tunnel` command and add the route to your local `/etc/hosts` file.\n+\n+You can then access the service via the service URL:\n+\n+```\n+$  kubectl get ksvc notification-service  -n kogito-github --output jsonpath=\"{.status.url}\"\n+\n+http://notification-service.kogito-github.example.com\n+```\n+\n+As we did when running through the `jar` file, we can access the Swagger UI and play around with the API: \n+\n+http://notification-service.kogito-github.example.com/swagger-ui\n+\n+The first query may take a little time to return since Knative will start the service's pod on demand. \n+After some time the pod will just terminate. \n+\n+Congratulations! The Notification service is now available in the cluster ready to be consumed by the Kogito Workflow.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MzQwMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507843403", "bodyText": "should be changed by the user ?", "author": "radtriste", "createdAt": "2020-10-19T15:25:54Z", "path": "serverless-workflow-github-showcase/notification-service/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+quarkus.swagger-ui.always-include=true\n+org.kogito.examples.sw.notification.slack.channel=github-showcase", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDAxOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507894019", "bodyText": "This is actually mentioned in the docs for the user to create a channel with this name.", "author": "ricardozanini", "createdAt": "2020-10-19T16:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MzQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTA2Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507845062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n          \n          \n            \n            Once a new PR is opened or changed in a given GitHub repository, the Knative platform will generate", "author": "radtriste", "createdAt": "2020-10-19T15:28:03Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTI5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507845298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            event to the workflow service, starting a new instance.\n          \n          \n            \n            event to the workflow service, thus starting a new instance.", "author": "radtriste", "createdAt": "2020-10-19T15:28:19Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTczNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507845737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, the workflow will verify what kind of changes have been made in the PR. \n          \n          \n            \n            Based on the files' path, a specific label and reviewer will be added to it.\n          \n          \n            \n            Then, the workflow will verify what kind of changes have been made in the PR: based on the files' path, a specific label and reviewer will be added to it.", "author": "radtriste", "createdAt": "2020-10-19T15:28:50Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NjAzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507846033", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to post a new message in a given Slack channel.\n          \n          \n            \n            to post a new message to a given Slack channel.", "author": "radtriste", "createdAt": "2020-10-19T15:29:10Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NzIxNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507847214", "bodyText": "To add: This is only in Kubernetes and the 2 other services need to be deployed already.", "author": "radtriste", "createdAt": "2020-10-19T15:30:43Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTY1NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507895655", "bodyText": "I mentioned it in the end of this section, just brought as a note to the beginning of the section", "author": "ricardozanini", "createdAt": "2020-10-19T16:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0Nzc0OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507847749", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml\n          \n          \n            \n            $ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<VERSION>/github.yaml", "author": "radtriste", "createdAt": "2020-10-19T15:31:25Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.\n+\n+Before going further, please make sure you have deployed the [GitHub](../github-service) and [Notification](../notification-service)\n+services since the workflow depends on them.\n+\n+### Review the sub-flows Labels and Reviewers\n+\n+Open the files `src/main/resources/handle-backend.sw.json` and `src/main/resources/handle-frontend.sw.json`\n+to review the labels and reviewers you wish to add to your PRs. Modify the `Inject` state\n+and save the workflow files.\n+\n+_**Note**: You can modify the workflow to call a function and set the labels and reviewers\n+in the context based on a configuration file instead. Are you up to the challenge?_\n+\n+### Review GitHub App WebHook Secret\n+\n+> **HEADS UP!** we assume you already have the GitHub App created for this demo when\n+> you deployed the GitHub service\n+\n+Go to your [GitHub Apps dashboard](https://github.com/settings/apps) and click on \"Edit\" button\n+in the application you created when deploying the [GitHub Service](../github-service). \n+\n+Edit the field \"Webhook secret (optional)\" and add the value `super-kogito-demo-secret`\n+in the text field. This secret will be used by the Knative platform to identify the incoming events.\n+\n+_**Note:** In the \"Webhook\" section you should have a link to the [smee.io](https://smee.io/) service \n+if you chose to run the demo locally or in a cluster that is not accessible from the external world.\n+Just make sure that the Webhook link is correct._ \n+\n+### Install Knative GitHub Source\n+\n+Install the GitHub source from [eventing-contrib](https://github.com/knative/eventing-contrib/releases) releases that match your Knative Eventing\n+platform. To know the Knative eventing version run:\n+\n+```shell script\n+$ kubectl get KnativeEventing knative-eventing -n knative-eventing\n+\n+NAME               VERSION   READY   REASON\n+knative-eventing   0.17.3    True  \n+```\n+\n+Then run:\n+\n+```shell script\n+$ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0ODI1MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507848250", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            Replace `VERSION` with the version of Knative Eventing.", "author": "radtriste", "createdAt": "2020-10-19T15:32:04Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.\n+\n+Before going further, please make sure you have deployed the [GitHub](../github-service) and [Notification](../notification-service)\n+services since the workflow depends on them.\n+\n+### Review the sub-flows Labels and Reviewers\n+\n+Open the files `src/main/resources/handle-backend.sw.json` and `src/main/resources/handle-frontend.sw.json`\n+to review the labels and reviewers you wish to add to your PRs. Modify the `Inject` state\n+and save the workflow files.\n+\n+_**Note**: You can modify the workflow to call a function and set the labels and reviewers\n+in the context based on a configuration file instead. Are you up to the challenge?_\n+\n+### Review GitHub App WebHook Secret\n+\n+> **HEADS UP!** we assume you already have the GitHub App created for this demo when\n+> you deployed the GitHub service\n+\n+Go to your [GitHub Apps dashboard](https://github.com/settings/apps) and click on \"Edit\" button\n+in the application you created when deploying the [GitHub Service](../github-service). \n+\n+Edit the field \"Webhook secret (optional)\" and add the value `super-kogito-demo-secret`\n+in the text field. This secret will be used by the Knative platform to identify the incoming events.\n+\n+_**Note:** In the \"Webhook\" section you should have a link to the [smee.io](https://smee.io/) service \n+if you chose to run the demo locally or in a cluster that is not accessible from the external world.\n+Just make sure that the Webhook link is correct._ \n+\n+### Install Knative GitHub Source\n+\n+Install the GitHub source from [eventing-contrib](https://github.com/knative/eventing-contrib/releases) releases that match your Knative Eventing\n+platform. To know the Knative eventing version run:\n+\n+```shell script\n+$ kubectl get KnativeEventing knative-eventing -n knative-eventing\n+\n+NAME               VERSION   READY   REASON\n+knative-eventing   0.17.3    True  \n+```\n+\n+Then run:\n+\n+```shell script\n+$ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml\n+```\n+", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0OTgyOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507849829", "bodyText": "should there be a value here ?", "author": "radtriste", "createdAt": "2020-10-19T15:34:10Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.\n+\n+Before going further, please make sure you have deployed the [GitHub](../github-service) and [Notification](../notification-service)\n+services since the workflow depends on them.\n+\n+### Review the sub-flows Labels and Reviewers\n+\n+Open the files `src/main/resources/handle-backend.sw.json` and `src/main/resources/handle-frontend.sw.json`\n+to review the labels and reviewers you wish to add to your PRs. Modify the `Inject` state\n+and save the workflow files.\n+\n+_**Note**: You can modify the workflow to call a function and set the labels and reviewers\n+in the context based on a configuration file instead. Are you up to the challenge?_\n+\n+### Review GitHub App WebHook Secret\n+\n+> **HEADS UP!** we assume you already have the GitHub App created for this demo when\n+> you deployed the GitHub service\n+\n+Go to your [GitHub Apps dashboard](https://github.com/settings/apps) and click on \"Edit\" button\n+in the application you created when deploying the [GitHub Service](../github-service). \n+\n+Edit the field \"Webhook secret (optional)\" and add the value `super-kogito-demo-secret`\n+in the text field. This secret will be used by the Knative platform to identify the incoming events.\n+\n+_**Note:** In the \"Webhook\" section you should have a link to the [smee.io](https://smee.io/) service \n+if you chose to run the demo locally or in a cluster that is not accessible from the external world.\n+Just make sure that the Webhook link is correct._ \n+\n+### Install Knative GitHub Source\n+\n+Install the GitHub source from [eventing-contrib](https://github.com/knative/eventing-contrib/releases) releases that match your Knative Eventing\n+platform. To know the Knative eventing version run:\n+\n+```shell script\n+$ kubectl get KnativeEventing knative-eventing -n knative-eventing\n+\n+NAME               VERSION   READY   REASON\n+knative-eventing   0.17.3    True  \n+```\n+\n+Then run:\n+\n+```shell script\n+$ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml\n+```\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Please do not proceed any further if you haven't deployed the [GitHub](../github-service) and [Notification](../notification-service) services.**\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes/base` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+GITHUB_REPO=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $GITHUB_REPO\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+---> Building and pushing image using tag quay.io/ricardozanini/pr-checker-workflow:latest\n+STEP 1: FROM quay.io/kiegroup/kogito-quarkus-jvm-ubi8:latest\n+STEP 2: COPY target/*-runner.jar $KOGITO_HOME/bin\n+--> 58760d128d8\n+STEP 3: COPY target/lib $KOGITO_HOME/bin/lib\n+STEP 4: COMMIT quay.io/ricardozanini/pr-checker-workflow:latest\n+--> 7bea1f647bc\n+7bea1f647bc6d530735010efc0a0898c912b76a8654e7c33a34c67edae964299\n+Getting image source signatures\n+Copying blob 2fcbd7b5b8d2 done  \n+Copying blob 26aea9dd861a done  \n+Copying blob d8e1f35641ac skipped: already exists  \n+Copying blob e9e08b319d50 skipped: already exists  \n+Copying blob b6f081e4b2b6 skipped: already exists  \n+Copying config 7bea1f647b done  \n+Writing manifest to image destination\n+Copying config 7bea1f647b [--------------------------------------] 0.0b / 2.8KiB\n+Writing manifest to image destination\n+Writing manifest to image destination\n+Storing signatures\n+---> Applying objects to the cluster in the namespace kogito-github.\n+secret/github-webhook-secret unchanged\n+service/pr-checker-workflow-default-http unchanged\n+kogitoruntime.app.kiegroup.org/pr-checker-workflow configured\n+broker.eventing.knative.dev/default unchanged\n+trigger.eventing.knative.dev/pr-checker-listener unchanged\n+githubsource.sources.knative.dev/github-event-listener unchanged\n+sinkbinding.sources.knative.dev/pr-checker-sink unchanged\n+```\n+\n+If your cluster is already ready to receive GitHub Webhooks calls, just create\n+a new PR in your repository with a file named \"backend\", and you should see the PR\n+being labeled as \"backend\", also your chosen friend will be notified to review the PR.\n+\n+If you're running on Minikube locally, proceed to the next section before trying the demo.   \n+\n+### Setting up your cluster to be publicly available\n+\n+Skip this section if your cluster is already publicly available and capable\n+to receive events from GitHub Webhooks.\n+\n+#### Minikube\n+\n+If you reach this point, you probably have tested and deployed the other services. \n+Just make sure you have a terminal window opened with:\n+\n+```\n+$ minikube tunnel\n+```\n+\n+Now run:\n+\n+```\n+$ ./expose-on-minikube.sh\n+```\n+\n+This command will create a new Istio `VirtualService` to access the Knative GitHub Source\n+from the Smee CLI tool. Since this tool adds a `Host: smee.io` in the request before redirecting\n+it to the cluster, Istio will reply with a 404 (Not Found) status code because it uses the\n+HTTP header to route requests within the cluster. \n+\n+Our just created `github-event-listener-smee` will take care of redirecting any requests \n+with `Host: smee.io` to the right service.\n+\n+Now on a new terminal window run:\n+\n+```\n+$ SMEE_WEBHOOK=", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTQ4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507851484", "bodyText": "shouldn't it be something like <YOUR_HOST> ?", "author": "radtriste", "createdAt": "2020-10-19T15:36:19Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/kubernetes/local/00-github-smee-virtualservice.yaml", "diffHunk": "@@ -0,0 +1,23 @@\n+apiVersion: networking.istio.io/v1beta1\n+kind: VirtualService\n+metadata:\n+  name: github-event-listener-smee\n+spec:\n+  gateways:\n+    - knative-serving/cluster-local-gateway\n+    - knative-serving/knative-ingress-gateway\n+  hosts:\n+    - smee.io\n+  http:\n+    - route:\n+        - destination:\n+            host: placeholder", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjgzMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507896832", "bodyText": "No, this is used internally by kustomize and our shell script", "author": "ricardozanini", "createdAt": "2020-10-19T16:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMDg4MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507920881", "bodyText": "oki", "author": "radtriste", "createdAt": "2020-10-19T17:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTYzOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507851638", "bodyText": "shouldn't it be something like <YOUR_KNATIVE_SERVICE_REVISION> ?", "author": "radtriste", "createdAt": "2020-10-19T15:36:32Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/kubernetes/local/00-github-smee-virtualservice.yaml", "diffHunk": "@@ -0,0 +1,23 @@\n+apiVersion: networking.istio.io/v1beta1\n+kind: VirtualService\n+metadata:\n+  name: github-event-listener-smee\n+spec:\n+  gateways:\n+    - knative-serving/cluster-local-gateway\n+    - knative-serving/knative-ingress-gateway\n+  hosts:\n+    - smee.io\n+  http:\n+    - route:\n+        - destination:\n+            host: placeholder\n+            port:\n+              number: 80\n+          headers:\n+            request:\n+              set:\n+                Knative-Serving-Namespace: kogito-github\n+                Knative-Serving-Revision: placeholder", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjkxNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507896915", "bodyText": "No need.", "author": "ricardozanini", "createdAt": "2020-10-19T16:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTYzOA=="}], "type": "inlineReview"}, {"oid": "0c45131bcf387df6e2fac52d6176caf8d6a6dfbb", "url": "https://github.com/kiegroup/kogito-examples/commit/0c45131bcf387df6e2fac52d6176caf8d6a6dfbb", "message": "incorporating Tristan comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-19T17:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDMwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507924301", "bodyText": "kubectl/oc", "author": "spolti", "createdAt": "2020-10-19T17:24:20Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDc0OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507924748", "bodyText": "is istio mandatory? if so, mind to add a few words about why the need to use istio?", "author": "spolti", "createdAt": "2020-10-19T17:25:07Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n+3. [**Istio**](https://istio.io/docs/setup/install/istioctl/) installed. ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwOTc0NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508309744", "bodyText": "knative typically mandates Istio (or at least a similar \"networking layer\")", "author": "evacchi", "createdAt": "2020-10-20T08:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNTMwMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507925303", "bodyText": "and about the operatorhub?", "author": "spolti", "createdAt": "2020-10-19T17:26:00Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n+3. [**Istio**](https://istio.io/docs/setup/install/istioctl/) installed. \n+You can follow the [Knative documentation](https://knative.dev/development/install/installing-istio) for a very basic and simple installation.\n+4. **Knative** Serving and Eventing components installed. \n+We recommend [installing the Knative Operator](https://knative.dev/docs/install/knative-with-operators/) and install the rest of the components\n+through it as described in their documentation.\n+5. **Kogito Operator** installed in the namespace `kogito-github`. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=kogito-github ./hack/install.sh`", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjAyMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507926022", "bodyText": "add a note for in case of issues, please let us know?", "author": "spolti", "createdAt": "2020-10-19T17:27:11Z", "path": "serverless-workflow-github-showcase/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+## Serverless Workflow GitHub Showcase\n+\n+In this example we will deploy a GitHub \"bot\" application that will\n+react upon a new PR being opened in a given GitHub project. \n+The \"bot\" is implemented via service and event orchestration approach with Kogito \n+implementation of the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification).\n+\n+The image below illustrates an overview of the architecture:\n+\n+![](docs/github-showcase-architecture-overview.png)\n+\n+The implementation relies on three services included in this repository:\n+\n+1. [**Pull Request Checker Workflow**](pr-checker-workflow): it will coordinate the changes in the PR \n+opened in a given GitHub repository. Depending on the files changed in the project,\n+different labels and reviewers will be automatically added in the PR. In the end of \n+the workflow, the service will broadcast a \"PR Verified\" event to the cluster.\n+2. [**GitHub API Wrapper Service**](github-service): calling the GitHub API as a GitHub Application\n+requires a token to be generated on a small timeframe. This service generates a valid\n+token each 5 minutes to make calls to the API. Besides token management, it wraps \n+the API and simplifies its interface just for the sake of this example.\n+3. [**Notification Service**](notification-service): a simple Camel service to interact with the Slack API to \n+notify a given channel. \n+\n+### Prerequisites\n+\n+> **IMPORTANT!** Before proceeding, please make sure you have everything listed in this section ready.\n+\n+You may use CRC or Minikube if you don't have a cluster available with cluster admin rights.\n+Or you can ask an administrator to install the prereqs for you.\n+\n+To deploy this example in your Kubernetes/OpenShift cluster, you will need:\n+\n+1. A [Quay.io](https://quay.io/repository/) account\n+2. A Kubernetes/OpenShift namespace to deploy the example: `kubectl create ns kogito-github`\n+3. [**Istio**](https://istio.io/docs/setup/install/istioctl/) installed. \n+You can follow the [Knative documentation](https://knative.dev/development/install/installing-istio) for a very basic and simple installation.\n+4. **Knative** Serving and Eventing components installed. \n+We recommend [installing the Knative Operator](https://knative.dev/docs/install/knative-with-operators/) and install the rest of the components\n+through it as described in their documentation.\n+5. **Kogito Operator** installed in the namespace `kogito-github`. [Download the latest release](https://github.com/kiegroup/kogito-cloud-operator/releases), and run: `NAMESPACE=kogito-github ./hack/install.sh`\n+\n+In your local machine you will need:\n+\n+1. To clone this repository: `https://github.com/kiegroup/kogito-examples.git && cd serverless-workflow-github-showcase`\n+2. [Java 11 SDK](https://openjdk.java.net/install/)\n+3. [Maven 3.6.3+](https://maven.apache.org/install.html)\n+4. [Podman](https://podman.io/getting-started/installation.html) or Docker to build the images\n+5. `kubectl` or `oc` client\n+\n+### Deploying the examples\n+\n+Follow the instructions for each service to try them locally as standalone services\n+and deploy them in your Kubernetes or OpenShift cluster:\n+\n+1. [GitHub Service](github-service/README.md)\n+2. [Notification Service](notification-service/README.md)\n+3. [PR Checker SW Service](pr-checker-workflow/README.md)\n+\n+Knative and Kogito will bind them together. :heart:", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzA4Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507927087", "bodyText": "why not use kogito-jvm image?", "author": "spolti", "createdAt": "2020-10-19T17:28:53Z", "path": "serverless-workflow-github-showcase/github-service/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:latest", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1NzIxOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508557218", "bodyText": "'cause it's not a Kogito service.", "author": "ricardozanini", "createdAt": "2020-10-20T14:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzgzMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507927831", "bodyText": "for what this app statnds for?", "author": "spolti", "createdAt": "2020-10-19T17:30:03Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1ODIxNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508558216", "bodyText": "To make GitHub API calls? I don't follow, do you want me to rephrase the paragraph? Have any suggestions?", "author": "ricardozanini", "createdAt": "2020-10-20T14:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMDI0NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508620245", "bodyText": "so maybe change to \"to make valid calls to the GitHub API\"?", "author": "spolti", "createdAt": "2020-10-20T15:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTg4Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507929886", "bodyText": "to make things easier, there is a script in this (what directory?) to generate..", "author": "spolti", "createdAt": "2020-10-19T17:33:02Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n+\n+`<APP INSTALLATION ID>` can be grabbed in the [Installations Dashboard](https://github.com/settings/installations/).\n+Just click in \"Configure\" button next to the app name, and you will be redirected to the Installation page. \n+The installation id is in the end of the URL, e.g.: `https://github.com/settings/installations/12345`.\n+\n+The `<APP_ID>` is the number displayed in the App Dashboard. \n+Click in the \"App settings\" link to be redirected to the dashboard.\n+\n+Having everything in place, start the Quarkus application with the following command:\n+\n+```shell script\n+mvn clean quarkus:dev\n+```\n+\n+Then access the Swagger UI to play around with the API: http://localhost:8080/swagger-ui\n+\n+:warning: **Important**:\n+\n+1. Open a test PR to have some data to play with\n+2. Invite a friend to be a contributor to your repo, so you can make the service request for their review in the PRs :kissing:\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDA1NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507930054", "bodyText": "will be generated for in", "author": "spolti", "createdAt": "2020-10-19T17:33:22Z", "path": "serverless-workflow-github-showcase/github-service/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+## GitHub API Wrapper Service\n+\n+This service responsibility is to manage GitHub API calls and to provide authentication\n+tokens every 5 minutes to make valid calls to the App API. It exposes three REST functions to interact with\n+the GitHub API. The table below lists the provided endpoints:\n+\n+| Function | Endpoint | Description |\n+|----------|----------|-------------|\n+| Add Labels        | POST `/repo/{user}/{repository}/pr/{id}/labels`    | Adds a list of labels to the given Pull Request |\n+| Add Reviewers     | POST `/repo/{user}/{repository}/pr/{id}/reviewers` | Adds a list of reviewers the the given Pull Request |\n+| Get changed files | GET `/repo/{user}/{repository}/pr/{id}/files`      | Fetches for the changed files in a given Pull Request |\n+\n+### Configuring your GitHub App\n+\n+For this service to work, you will need to create a new GitHub App and install it\n+in one or more repositories to be able to make changes to its PRs or Issues.\n+\n+By creating a GitHub App, it will provide a private key which can be used by this\n+service to interact with the GitHub API.\n+\n+#### Creating a new GitHub App\n+\n+[Follow the GitHub documentation](https://docs.github.com/en/developers/apps/setting-up-your-development-environment-to-create-a-github-app) to create a new GitHub App and \n+a private key.\n+\n+When asked to set permissions, choose \"Access: Read & Write\" for **Issues** and **Pull Requests**. In \"Subscribe to Events\" section set \"Pull request\".\n+This way you will be able to make changes in the repositories' PRs that you've installed the GitHub App.\n+\n+After creating the private key, download it locally in somewhere safe. \n+\n+#### Converting the generated private key \n+\n+Convert the downloaded private key from PEM to DER format with the following command:\n+ \n+```shell-script\n+openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+```\n+\n+Replace the file `~/github-api-app.private-key.pem` with your local path.\n+\n+This will generate a private key in DER format which we will use to generate the GitHub\n+API tokens on demand.\n+\n+#### Installing the App in one or more repositories\n+\n+It's recommended to install the GitHub App in a test repository to not mess with \n+your account or organizations.\n+\n+Create a new repository, then go to your [Developer Settings](https://github.com/settings/apps),\n+click on \"Edit\" button next to your GitHub App, then click on \"Install App\", choose your account and install it in the test repository you just created.\n+\n+### Trying the service locally\n+\n+Now you have the GitHub App, a test repository and a private key. It's time to try\n+the application locally.\n+\n+Clone this repo if you haven't yet, edit the file [`src/main/resources/application.properties`](src/main/resources/application.properties)\n+and add the following data:\n+\n+```properties\n+org.kogito.examples.sw.github.service.key=<LOCAL PATH FOR YOUR DER FILE>\n+org.kogito.examples.sw.github.service.installation_id=<APP INSTALLATION ID>\n+org.kogito.examples.sw.github.service.app_id=<APP ID>\n+``` \n+\n+Replace `<LOCAL PATH FOR YOUR DER FILE>` with the absolute path of the converted private key file (DER format).\n+\n+`<APP INSTALLATION ID>` can be grabbed in the [Installations Dashboard](https://github.com/settings/installations/).\n+Just click in \"Configure\" button next to the app name, and you will be redirected to the Installation page. \n+The installation id is in the end of the URL, e.g.: `https://github.com/settings/installations/12345`.\n+\n+The `<APP_ID>` is the number displayed in the App Dashboard. \n+Click in the \"App settings\" link to be redirected to the dashboard.\n+\n+Having everything in place, start the Quarkus application with the following command:\n+\n+```shell script\n+mvn clean quarkus:dev\n+```\n+\n+Then access the Swagger UI to play around with the API: http://localhost:8080/swagger-ui\n+\n+:warning: **Important**:\n+\n+1. Open a test PR to have some data to play with\n+2. Invite a friend to be a contributor to your repo, so you can make the service request for their review in the PRs :kissing:\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNTMzNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507935335", "bodyText": "for generic exceptions is recommended use final Exception.", "author": "spolti", "createdAt": "2020-10-19T17:40:09Z", "path": "serverless-workflow-github-showcase/github-service/src/main/java/org/kogito/examples/sw/github/service/GitHubResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kogito.examples.sw.github.service;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"/repo\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+public class GitHubResource {\n+\n+    @Inject\n+    GitHubWrapperService gitHubService;\n+\n+    @POST\n+    @Path(\"/{user}/{name}/pr/{number}/labels\")\n+    public Response addLabels(@PathParam(\"user\") String user,\n+                              @PathParam(\"name\") String repoName,\n+                              @PathParam(\"number\") Integer prNumber,\n+                              List<String> labels) {\n+        try {\n+            gitHubService.addLabels(user, repoName, prNumber, labels);\n+            return Response.ok().build();\n+        } catch (Exception e) {", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNTU3Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507935573", "bodyText": "docs?", "author": "spolti", "createdAt": "2020-10-19T17:40:22Z", "path": "serverless-workflow-github-showcase/github-service/src/main/java/org/kogito/examples/sw/github/service/GitHubWrapperService.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kogito.examples.sw.github.service;\n+\n+import java.util.List;\n+\n+public interface GitHubWrapperService {\n+\n+    void addLabels(String user, String repository, int issueId, List<String> labels) throws Exception;", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzODExNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507938115", "bodyText": "as there's no compatibility with native mode, maybe remove it?", "author": "spolti", "createdAt": "2020-10-19T17:42:35Z", "path": "serverless-workflow-github-showcase/github-service/src/test/java/org/kogito/examples/sw/github/service/NativeGitHubResourceIT.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kogito.examples.sw.github.service;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+\n+@NativeImageTest\n+public class NativeGitHubResourceIT extends GitHubResourceTest {\n+    // will run the same tests\n+}", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzODU1MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r507938550", "bodyText": "use kogito-image?", "author": "spolti", "createdAt": "2020-10-19T17:43:01Z", "path": "serverless-workflow-github-showcase/notification-service/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:latest", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NzIyMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508567221", "bodyText": "It's not a Kogito service.", "author": "ricardozanini", "createdAt": "2020-10-20T14:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzODU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyOTYxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508029613", "bodyText": "maybe suppress some messages?", "author": "spolti", "createdAt": "2020-10-19T20:05:14Z", "path": "serverless-workflow-github-showcase/notification-service/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+## Notification Service\n+\n+This service will listen to specific [CloudEvents](https://github.com/cloudevents/spec) published by our workflow and post\n+messages in a specific Slack channel using the event data as input.\n+\n+### Creating a new Slack App\n+\n+Like in the GitHub service procedure, we are going to need an API key from a third party\n+service. \n+\n+Go to [Slack API](https://api.slack.com/apps) page and create a new app \n+(or you can reuse one you already have instead).\n+\n+Once you create the app, go to the \"Incoming WebHooks\" menu and copy the \"WebHook URL\". \n+\n+Install the app in one of the Workspaces you have and create a \"github-showcase\" channel\n+there for the service to send some messages. Since it's a demo, you don't want to annoy people with lame \n+bot messages. :)\n+\n+### Trying the service locally\n+\n+Once you have the Slack App created and the WebHook, it's time to try the application locally.\n+\n+This service is just a plain Quarkus application with the [Camel Slack component](https://camel.apache.org/components/latest/slack-component.html) to communicate\n+with the Slack API.\n+\n+Copy the WebHook URL in the `src/main/resources/application.properties` file:\n+\n+```properties\n+# URL details not shown\n+org.kogito.examples.sw.notification.slack.incoming=https://hooks.slack.com/services/(...)\n+```\n+\n+Run the application with:\n+\n+```shell script\n+$ mvn clean quarkus:dev\n+```\n+\n+This service listens to the `/` (root) path for messages in [CloudEvents format](https://github.com/cloudevents/spec/blob/v1.0/spec.md#example), but \n+we added the `/plain` endpoint as well for testing purposes. Sending a request to this\n+endpoint will post a message in the `github-showcase` channel:\n+\n+```shell script\n+curl -X POST \"http://localhost:8080/plain\" -H  \"Content-Type: text/plain\" -d \"this is a test message\"\n+``` \n+\n+As always, we included the Swagger UI in the service, access it at http:localhost:8080/swagger-ui/. \n+\n+### Deploying on Kubernetes\n+\n+> **HEADS UP!** delete the Slack WebHook from the `application.properties` file. \n+> We're going to build an image from the source, you don't want your credentials to be exposed to the world!! \n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Heads up!** This service will be deployed as a Knative Service instead of a regular Kubernetes\n+Deployment.\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+SLACK_WEBHOOK=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $SLACK_WEBHOOK\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+// build logs surpressed\n+---> Building and pushing image using tag quay.io/ricardozanini/notification-service:latest\n+STEP 1: FROM adoptopenjdk:11-jre-hotspot\n+STEP 2: RUN mkdir -p /opt/app/lib\n+--> Using cache 26183c5ad8a51a030030a250db0c99e649fdd9668ef4766d0b66782d0dad7573\n+STEP 3: COPY target/notification-service-1.0.0-SNAPSHOT-runner.jar /opt/app\n+--> 2a5b658411b\n+STEP 4: COPY target/lib/*.jar /opt/app/lib\n+--> 5fedac21977\n+STEP 5: CMD [\"java\", \"-jar\", \"/opt/app/notification-service-1.0.0-SNAPSHOT-runner.jar\"]\n+STEP 6: COMMIT quay.io/ricardozanini/notification-service:latest\n+--> afe502d1940\n+afe502d1940d65f151c051008bb2057344607408c192787a726399d23d90c2d3\n+Getting image source signatures\n+Copying blob bf509d6bc5ec skipped: already exists  \n+Copying blob 2af0e1f1e531 skipped: already exists  \n+Copying blob 4b07a7bca5b7 skipped: already exists  ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTkzNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508031937", "bodyText": "is use provide some other thing than docker?\nwouldn't be better just use:\n\"${BUILDER}\" build --tag \"${image_tag}\" .\n\"${BUILDER}\" push \"${image_tag}\"\n\na error will be thrown anyway if command is wrong or don't exist.", "author": "spolti", "createdAt": "2020-10-19T20:09:18Z", "path": "serverless-workflow-github-showcase/scripts/common.sh", "diffHunk": "@@ -0,0 +1,52 @@\n+#!/bin/bash\n+# Copyright 2020 Red Hat, Inc. and/or its affiliates\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+BUILDER=podman\n+\n+function check_binaries() {\n+  local return_code=0\n+\n+  if ! command -v kubectl &>/dev/null; then\n+    echo \"---> kubectl not found, please install it to run this script\"\n+    return_code=1\n+  fi\n+\n+  if ! command -v podman &>/dev/null; then\n+    echo \"---> podman not found, setting default builder to docker\"\n+    BUILDER=docker\n+    if ! command -v docker &>/dev/null; then\n+      echo \"---> docker not found, please install it to run this script\" && return_code=1\n+    fi\n+  fi\n+\n+  return ${return_code}\n+}\n+\n+function build_push_image() {\n+  image_ns=$1\n+  image_name=$2\n+  # defining image tag\n+  image_tag=\"quay.io/${image_ns}/${image_name}:latest\"\n+\n+  echo \"---> Building and pushing image using tag ${image_tag}\"\n+  # build image\n+  if [ \"${BUILDER}\" == \"docker\" ]; then\n+    docker build --tag \"${image_tag}\" .\n+    docker push \"${image_tag}\"\n+  else", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MTIwMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508571200", "bodyText": "is use provide some other thing than docker?\n\nActually we verify if podman exists, otherwise use docker. There's no user input.", "author": "ricardozanini", "createdAt": "2020-10-20T14:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMzM3Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508033376", "bodyText": "if a error happens, who will thrown or print it to user?", "author": "spolti", "createdAt": "2020-10-19T20:12:01Z", "path": "serverless-workflow-github-showcase/notification-service/src/main/java/org/kogito/examples/sw/notification/service/NotificationResource.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kogito.examples.sw.notification.service;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.apache.camel.ProducerTemplate;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"\")\n+@ApplicationScoped\n+public class NotificationResource {\n+    \n+    @Inject\n+    ObjectMapper mapper;\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n+    @ConfigProperty(name = \"org.kogito.examples.sw.notification.slack.channel\")\n+    String channel;\n+\n+    @ConfigProperty(name = \"org.kogito.examples.sw.notification.slack.incoming\")\n+    String webHookUrl;\n+\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/plain\")\n+    public Response createSlackMessage(String message) {\n+        producerTemplate.requestBody(\"slack:#\" + channel + \"?webhookUrl=\" + webHookUrl, message);", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NTkyMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508575921", "bodyText": "It will print in the notification service logs", "author": "ricardozanini", "createdAt": "2020-10-20T14:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMzM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTg2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508055860", "bodyText": "use kogito image?", "author": "spolti", "createdAt": "2020-10-19T20:54:12Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/Dockerfile", "diffHunk": "@@ -0,0 +1,4 @@\n+FROM quay.io/kiegroup/kogito-quarkus-jvm-ubi8:latest", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NDI2MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508574261", "bodyText": "What? We are already using the Kogito image. \ud83e\udd14", "author": "ricardozanini", "createdAt": "2020-10-20T14:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMjQ1Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508622457", "bodyText": "LOL, sry, I ran out of coffee", "author": "spolti", "createdAt": "2020-10-20T15:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NjA2MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508056061", "bodyText": "to make things easier there is a script..", "author": "spolti", "createdAt": "2020-10-19T20:54:41Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.\n+\n+Before going further, please make sure you have deployed the [GitHub](../github-service) and [Notification](../notification-service)\n+services since the workflow depends on them.\n+\n+### Review the sub-flows Labels and Reviewers\n+\n+Open the files `src/main/resources/handle-backend.sw.json` and `src/main/resources/handle-frontend.sw.json`\n+to review the labels and reviewers you wish to add to your PRs. Modify the `Inject` state\n+and save the workflow files.\n+\n+_**Note**: You can modify the workflow to call a function and set the labels and reviewers\n+in the context based on a configuration file instead. Are you up to the challenge?_\n+\n+### Review GitHub App WebHook Secret\n+\n+> **HEADS UP!** we assume you already have the GitHub App created for this demo when\n+> you deployed the GitHub service\n+\n+Go to your [GitHub Apps dashboard](https://github.com/settings/apps) and click on \"Edit\" button\n+in the application you created when deploying the [GitHub Service](../github-service). \n+\n+Edit the field \"Webhook secret (optional)\" and add the value `super-kogito-demo-secret`\n+in the text field. This secret will be used by the Knative platform to identify the incoming events.\n+\n+_**Note:** In the \"Webhook\" section you should have a link to the [smee.io](https://smee.io/) service \n+if you chose to run the demo locally or in a cluster that is not accessible from the external world.\n+Just make sure that the Webhook link is correct._ \n+\n+### Install Knative GitHub Source\n+\n+Install the GitHub source from [eventing-contrib](https://github.com/knative/eventing-contrib/releases) releases that match your Knative Eventing\n+platform. To know the Knative eventing version run:\n+\n+```shell script\n+$ kubectl get KnativeEventing knative-eventing -n knative-eventing\n+\n+NAME               VERSION   READY   REASON\n+knative-eventing   0.17.3    True  \n+```\n+\n+Then run:\n+\n+```shell script\n+$ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml\n+```\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Please do not proceed any further if you haven't deployed the [GitHub](../github-service) and [Notification](../notification-service) services.**\n+\n+To make things easier for you, we left a script in this directory to generate the template", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NjIxNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508056215", "bodyText": "maybe less verbosity?", "author": "spolti", "createdAt": "2020-10-19T20:54:57Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/README.md", "diffHunk": "@@ -0,0 +1,176 @@\n+## Pull Request Checker Workflow\n+\n+This is the main service of this example, it's responsible to orchestrate the services in\n+order to verify an opened PR. The service will add labels and reviewers according\n+to the files that have been modified.\n+\n+The image below illustrates the workflow:\n+\n+![](docs/pr-checker-workflow.png)\n+\n+Once a new PR is changed or opened in a given GitHub project, the Knative platform will generate\n+a new CloudEvent containing the pull request context. The Broker will deliver this \n+event to the workflow service, starting a new instance.\n+\n+When the workflow starts, it will call the GitHub service to fetch the files changed in the PR.\n+Then, the workflow will verify what kind of changes have been made in the PR. \n+Based on the files' path, a specific label and reviewer will be added to it.\n+\n+![](docs/handle-backend.png)\n+![](docs/handle-frontend.png)\n+\n+In the end of the workflow, a new event will be created and sent to the Knative broker.\n+This event will be consumed by the [Notification service](../notification-service) \n+to post a new message in a given Slack channel.\n+\n+Before going further, please make sure you have deployed the [GitHub](../github-service) and [Notification](../notification-service)\n+services since the workflow depends on them.\n+\n+### Review the sub-flows Labels and Reviewers\n+\n+Open the files `src/main/resources/handle-backend.sw.json` and `src/main/resources/handle-frontend.sw.json`\n+to review the labels and reviewers you wish to add to your PRs. Modify the `Inject` state\n+and save the workflow files.\n+\n+_**Note**: You can modify the workflow to call a function and set the labels and reviewers\n+in the context based on a configuration file instead. Are you up to the challenge?_\n+\n+### Review GitHub App WebHook Secret\n+\n+> **HEADS UP!** we assume you already have the GitHub App created for this demo when\n+> you deployed the GitHub service\n+\n+Go to your [GitHub Apps dashboard](https://github.com/settings/apps) and click on \"Edit\" button\n+in the application you created when deploying the [GitHub Service](../github-service). \n+\n+Edit the field \"Webhook secret (optional)\" and add the value `super-kogito-demo-secret`\n+in the text field. This secret will be used by the Knative platform to identify the incoming events.\n+\n+_**Note:** In the \"Webhook\" section you should have a link to the [smee.io](https://smee.io/) service \n+if you chose to run the demo locally or in a cluster that is not accessible from the external world.\n+Just make sure that the Webhook link is correct._ \n+\n+### Install Knative GitHub Source\n+\n+Install the GitHub source from [eventing-contrib](https://github.com/knative/eventing-contrib/releases) releases that match your Knative Eventing\n+platform. To know the Knative eventing version run:\n+\n+```shell script\n+$ kubectl get KnativeEventing knative-eventing -n knative-eventing\n+\n+NAME               VERSION   READY   REASON\n+knative-eventing   0.17.3    True  \n+```\n+\n+Then run:\n+\n+```shell script\n+$ kubectl apply -f https://github.com/knative/eventing-contrib/releases/download/v<version>/github.yaml\n+```\n+\n+### Deploying on Kubernetes\n+\n+> **IMPORTANT! :warning:** we assume you have read the prerequisites section in the main\n+> [README file](../README.md). Please follow those instructions before continuing.\n+\n+**Please do not proceed any further if you haven't deployed the [GitHub](../github-service) and [Notification](../notification-service) services.**\n+\n+To make things easier for you, we left a script in this directory to generate the template\n+files, build the application and the image, and then deploy it to your Kubernetes cluster.\n+\n+You can run the script once and all the required files will be generated for you in \n+the `kubernetes/base` directory, and the image will be published to your Quay.io account.\n+\n+Fill the value for the variables as shown below and run the script:\n+\n+```shell script\n+# the script accepts positional arguments as following:\n+QUAY_NAMESPACE=\n+GITHUB_REPO=\n+\n+./deploy-kubernetes.sh $QUAY_NAMESPACE $GITHUB_REPO\n+```\n+\n+You should see a similar output like this:\n+\n+```\n+---> Building and pushing image using tag quay.io/ricardozanini/pr-checker-workflow:latest\n+STEP 1: FROM quay.io/kiegroup/kogito-quarkus-jvm-ubi8:latest\n+STEP 2: COPY target/*-runner.jar $KOGITO_HOME/bin\n+--> 58760d128d8\n+STEP 3: COPY target/lib $KOGITO_HOME/bin/lib\n+STEP 4: COMMIT quay.io/ricardozanini/pr-checker-workflow:latest\n+--> 7bea1f647bc\n+7bea1f647bc6d530735010efc0a0898c912b76a8654e7c33a34c67edae964299\n+Getting image source signatures\n+Copying blob 2fcbd7b5b8d2 done  \n+Copying blob 26aea9dd861a done  \n+Copying blob d8e1f35641ac skipped: already exists  \n+Copying blob e9e08b319d50 skipped: already exists  \n+Copying blob b6f081e4b2b6 skipped: already exists  ", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NTM1Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508075356", "bodyText": "is this env set by operator?", "author": "spolti", "createdAt": "2020-10-19T21:32:52Z", "path": "serverless-workflow-github-showcase/pr-checker-workflow/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+quarkus.log.level=INFO\n+quarkus.swagger-ui.always-include=true\n+\n+org.kogito.examples.sw.github.workflow.GitHubClient/mp-rest/url=${GITHUB_SERVICE_URI}\n+org.kogito.examples.sw.github.workflow.GitHubClient/mp-rest/scope=javax.inject.Singleton\n+\n+mp.messaging.outgoing.pr_verified.connector=smallrye-http\n+mp.messaging.outgoing.pr_verified.url=${K_SINK}", "originalCommit": "90fb1e5bcb8c4cfd981199ccabbe06196c9dd487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NDc2Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/351#discussion_r508574767", "bodyText": "By the Knative operator.", "author": "ricardozanini", "createdAt": "2020-10-20T14:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NTM1Ng=="}], "type": "inlineReview"}, {"oid": "8f62a4b05be439eb1bdba249c032616874692ace", "url": "https://github.com/kiegroup/kogito-examples/commit/8f62a4b05be439eb1bdba249c032616874692ace", "message": "incorporating Spolti and Edoardo comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-20T14:55:29Z", "type": "commit"}, {"oid": "140e3c160ffb7389d6a9d90eb1a9c274469de2bc", "url": "https://github.com/kiegroup/kogito-examples/commit/140e3c160ffb7389d6a9d90eb1a9c274469de2bc", "message": "updating to operator 0.16.0\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-20T21:14:53Z", "type": "commit"}]}