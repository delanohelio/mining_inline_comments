{"pr_number": 151, "pr_title": "KOGITO-1618: System metrics example", "pr_createdAt": "2020-03-18T09:02:52Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/151", "timeline": [{"oid": "63c732eac4f375d54121b5d4182577530d4fe4df", "url": "https://github.com/kiegroup/kogito-examples/commit/63c732eac4f375d54121b5d4182577530d4fe4df", "message": "Add metrics example", "committedDate": "2020-02-21T15:13:37Z", "type": "commit"}, {"oid": "85058396899734a6e0d336de57c820129903be10", "url": "https://github.com/kiegroup/kogito-examples/commit/85058396899734a6e0d336de57c820129903be10", "message": "Update README.md", "committedDate": "2020-02-21T15:18:47Z", "type": "commit"}, {"oid": "7dbd515701e788c849fd2f601af6a4b5abef26d4", "url": "https://github.com/kiegroup/kogito-examples/commit/7dbd515701e788c849fd2f601af6a4b5abef26d4", "message": "remove file", "committedDate": "2020-02-21T15:20:28Z", "type": "commit"}, {"oid": "4f502d40b9b931d5410264668257884013f139b2", "url": "https://github.com/kiegroup/kogito-examples/commit/4f502d40b9b931d5410264668257884013f139b2", "message": "update metrics example", "committedDate": "2020-03-04T11:45:00Z", "type": "commit"}, {"oid": "5d22636458a450487f5768715df97aa7d584062f", "url": "https://github.com/kiegroup/kogito-examples/commit/5d22636458a450487f5768715df97aa7d584062f", "message": "remove dmn model", "committedDate": "2020-03-04T11:46:12Z", "type": "commit"}, {"oid": "7dced3a771bd3fcbd2fef056ac06d4e9e6b37d52", "url": "https://github.com/kiegroup/kogito-examples/commit/7dced3a771bd3fcbd2fef056ac06d4e9e6b37d52", "message": "remove dmn file", "committedDate": "2020-03-04T11:46:31Z", "type": "commit"}, {"oid": "4236798e8ffc39a09aa6fe8f46b6cba9b23a5865", "url": "https://github.com/kiegroup/kogito-examples/commit/4236798e8ffc39a09aa6fe8f46b6cba9b23a5865", "message": "add tests", "committedDate": "2020-03-10T14:26:28Z", "type": "commit"}, {"oid": "aa6b7318aaa342cb2741a9ee7f58162e6c41df11", "url": "https://github.com/kiegroup/kogito-examples/commit/aa6b7318aaa342cb2741a9ee7f58162e6c41df11", "message": "remove logs", "committedDate": "2020-03-10T14:28:54Z", "type": "commit"}, {"oid": "3d9c04b2ccc6915bf3bcd335ce53abba0dd8c1bc", "url": "https://github.com/kiegroup/kogito-examples/commit/3d9c04b2ccc6915bf3bcd335ce53abba0dd8c1bc", "message": "Update README.md", "committedDate": "2020-03-16T10:09:10Z", "type": "commit"}, {"oid": "dbc9ad238ec06d7305ac4f4aa38c43644114b663", "url": "https://github.com/kiegroup/kogito-examples/commit/dbc9ad238ec06d7305ac4f4aa38c43644114b663", "message": "update example", "committedDate": "2020-03-16T14:28:13Z", "type": "commit"}, {"oid": "ab0baed7f07e733dfce3aa507c7334b24206ca3c", "url": "https://github.com/kiegroup/kogito-examples/commit/ab0baed7f07e733dfce3aa507c7334b24206ca3c", "message": "add metrics example", "committedDate": "2020-03-18T08:58:53Z", "type": "commit"}, {"oid": "9640f6b51f4bef437f816432ac0c26bb7edf6264", "url": "https://github.com/kiegroup/kogito-examples/commit/9640f6b51f4bef437f816432ac0c26bb7edf6264", "message": "remove old files", "committedDate": "2020-03-18T12:35:05Z", "type": "commit"}, {"oid": "b052914d8ba03581571fb11ec76acd9eda0e7d07", "url": "https://github.com/kiegroup/kogito-examples/commit/b052914d8ba03581571fb11ec76acd9eda0e7d07", "message": "update dockerfile", "committedDate": "2020-03-18T12:43:05Z", "type": "commit"}, {"oid": "4356efd363812242a0e2f723a6db4ddeccc7ddc5", "url": "https://github.com/kiegroup/kogito-examples/commit/4356efd363812242a0e2f723a6db4ddeccc7ddc5", "message": "remove generated files", "committedDate": "2020-03-18T15:09:49Z", "type": "commit"}, {"oid": "e5f2c5c516436724fec5685428a908b4edce05bd", "url": "https://github.com/kiegroup/kogito-examples/commit/e5f2c5c516436724fec5685428a908b4edce05bd", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-03-18T15:17:31Z", "type": "commit"}, {"oid": "ea4748a45bfa652f5b7e28f73e8262569887da67", "url": "https://github.com/kiegroup/kogito-examples/commit/ea4748a45bfa652f5b7e28f73e8262569887da67", "message": "update pom", "committedDate": "2020-03-18T17:04:56Z", "type": "commit"}, {"oid": "83457acf1194f86e6b82870eb15333ec78fad16b", "url": "https://github.com/kiegroup/kogito-examples/commit/83457acf1194f86e6b82870eb15333ec78fad16b", "message": "remove test dmn", "committedDate": "2020-03-18T17:05:46Z", "type": "commit"}, {"oid": "80b4ad40e736b18e71b1aa5c6e2dc72d47b69bec", "url": "https://github.com/kiegroup/kogito-examples/commit/80b4ad40e736b18e71b1aa5c6e2dc72d47b69bec", "message": "update example", "committedDate": "2020-03-19T11:31:55Z", "type": "commit"}, {"oid": "a24df37c91d648f7a30b56af51575e7a1a64b8b5", "url": "https://github.com/kiegroup/kogito-examples/commit/a24df37c91d648f7a30b56af51575e7a1a64b8b5", "message": "update dockerfile", "committedDate": "2020-03-19T14:29:04Z", "type": "commit"}, {"oid": "d8690f6206b693dc96668d6d9c0d64ddf9620e7a", "url": "https://github.com/kiegroup/kogito-examples/commit/d8690f6206b693dc96668d6d9c0d64ddf9620e7a", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-03-24T12:34:12Z", "type": "commit"}, {"oid": "7b3dac01329d37b0bb76af171c4df0b9e6bbdd0e", "url": "https://github.com/kiegroup/kogito-examples/commit/7b3dac01329d37b0bb76af171c4df0b9e6bbdd0e", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-03-26T19:15:14Z", "type": "commit"}, {"oid": "f274069cbe17feac3c4e26966655c97eae87ae6b", "url": "https://github.com/kiegroup/kogito-examples/commit/f274069cbe17feac3c4e26966655c97eae87ae6b", "message": "update dmn-drools-metrics example", "committedDate": "2020-03-30T15:08:00Z", "type": "commit"}, {"oid": "9e33c9b87464bdbb012892f575986015283991f5", "url": "https://github.com/kiegroup/kogito-examples/commit/9e33c9b87464bdbb012892f575986015283991f5", "message": "remove files", "committedDate": "2020-04-02T09:00:41Z", "type": "commit"}, {"oid": "0deb78f1ab0b46da7e5305a75a63149ac23ebbd6", "url": "https://github.com/kiegroup/kogito-examples/commit/0deb78f1ab0b46da7e5305a75a63149ac23ebbd6", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-04-02T10:33:53Z", "type": "commit"}, {"oid": "775a95db57dc911c7ce86f753fd4afe97094475e", "url": "https://github.com/kiegroup/kogito-examples/commit/775a95db57dc911c7ce86f753fd4afe97094475e", "message": "update master pom", "committedDate": "2020-04-02T11:16:24Z", "type": "commit"}, {"oid": "9b8b401e7bed33483d394be6390933713df7e548", "url": "https://github.com/kiegroup/kogito-examples/commit/9b8b401e7bed33483d394be6390933713df7e548", "message": "remove json files", "committedDate": "2020-04-02T11:18:08Z", "type": "commit"}, {"oid": "e9851fcdd3f0d62038966634b2cef4a0ee81060d", "url": "https://github.com/kiegroup/kogito-examples/commit/e9851fcdd3f0d62038966634b2cef4a0ee81060d", "message": "remove test files", "committedDate": "2020-04-02T11:27:34Z", "type": "commit"}, {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "url": "https://github.com/kiegroup/kogito-examples/commit/c9330be04eea19f3ad71168aff1c1954b0b45b79", "message": "update readme", "committedDate": "2020-04-02T11:41:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MjU4NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402352585", "bodyText": "why linux-only? (also: \"OS\").\nMaybe we can just write features specifically work best on Linux in the descriotion. If it's because of just docker, then that there is Docker for windows/mac; in that case, you may write e.g. \"Optional: a working Docker environment\"", "author": "evacchi", "createdAt": "2020-04-02T14:22:41Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO ", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0OTA2OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402449069", "bodyText": "My bad, I meant that given that I provided a run-compose.sh of course if was designed for Linux. But the feature itself is not linux-specific. I'll fix this", "author": "r00ta", "createdAt": "2020-04-02T16:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MjU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTU1Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355556", "bodyText": "i think you want to add a newline here", "author": "evacchi", "createdAt": "2020-04-02T14:26:36Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3Njg0OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402476849", "bodyText": "fixed", "author": "r00ta", "createdAt": "2020-04-02T17:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTc4MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355781", "bodyText": "it's better to explain the steps rather than just add a script. You may then add \"script run-compose.sh\" is provided for convenience.", "author": "evacchi", "createdAt": "2020-04-02T14:26:54Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzM1NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477354", "bodyText": "Yep, I updated the readme accordingly", "author": "r00ta", "createdAt": "2020-04-02T17:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjA4Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356086", "bodyText": "we usually write curl requests inline without scripts", "author": "evacchi", "createdAt": "2020-04-02T14:27:18Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzUwNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477507", "bodyText": "fixed", "author": "r00ta", "createdAt": "2020-04-02T17:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjIwNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356205", "bodyText": "same", "author": "evacchi", "createdAt": "2020-04-02T14:27:24Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzUyMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477522", "bodyText": "fixed", "author": "r00ta", "createdAt": "2020-04-02T17:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODY0OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402358648", "bodyText": "some people use hey", "author": "evacchi", "createdAt": "2020-04-02T14:30:27Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh\n+\n+```\n+\n+the service will return the decision results. You can generate some traffic with \n+\n+```sh\n+while true; do ./sample-requests/query-dmn-loan.sh; done", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzkyNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477926", "bodyText": "I just removed that, I understand it's a bit out of scope :)", "author": "r00ta", "createdAt": "2020-04-02T17:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTE5Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361192", "bodyText": "you can format this more neatly in the README using:\ncurl -X POST http://localhost:8080/fraud-scoring \\\n  -H 'Content-Type: application/json' -d '{\n  \"Transactions\": [\n    {\n      \"tRiskScore\": 1,\n      \"tCardType\": \"Debit\",\n      \"tAuthCode\": \"Authorized\",\n      \"tLocation\": \"Local\"\n    }\n  ]\n}' \nis -L (--location) needed?", "author": "evacchi", "createdAt": "2020-04-02T14:33:39Z", "path": "dmn-drools-quarkus-metrics/sample-requests/query-dmn-fraud.sh", "diffHunk": "@@ -0,0 +1 @@\n+curl --location --request POST 'http://localhost:8080/fraud-scoring' --header 'Content-Type: application/json' -d \"{  \\\"Transactions\\\" : [{\\\"tRiskScore\\\" : 1, \\\"tCardType\\\" : \\\"Debit\\\", \\\"tAuthCode\\\" : \\\"Authorized\\\", \\\"tLocation\\\" : \\\"Local\\\"}]}\"", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODQ5MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402478490", "bodyText": "I removed the fraud dmn, 'cause it was not needed. I updated the loan eligibility query accordingly", "author": "r00ta", "createdAt": "2020-04-02T17:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY4MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361680", "bodyText": "there should be no need to use sudo generally, and I would discourage to put it in a readme", "author": "evacchi", "createdAt": "2020-04-02T14:34:16Z", "path": "dmn-drools-quarkus-metrics/docker-compose/run-compose.sh", "diffHunk": "@@ -0,0 +1,9 @@\n+#!/bin/bash\n+\n+cd ../\n+mvn clean package\n+\n+cd docker-compose/ \n+cp ../target/resources/dashboards/* grafana/provisioning/dashboards\n+\n+sudo docker-compose build && sudo docker-compose up", "originalCommit": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODU2OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402478568", "bodyText": "fixed", "author": "r00ta", "createdAt": "2020-04-02T17:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY4MA=="}], "type": "inlineReview"}, {"oid": "2b3a7ed595d2b49df2d38eed5c15089c4e7361f3", "url": "https://github.com/kiegroup/kogito-examples/commit/2b3a7ed595d2b49df2d38eed5c15089c4e7361f3", "message": "resolve comments", "committedDate": "2020-04-02T17:13:02Z", "type": "commit"}, {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343", "url": "https://github.com/kiegroup/kogito-examples/commit/a0eac148e622cb99730de7637f5c79a4b5576343", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-04-23T11:34:52Z", "type": "commit"}, {"oid": "3f660e8255589b3e9e6dd2db36cc8853f06e10a7", "url": "https://github.com/kiegroup/kogito-examples/commit/3f660e8255589b3e9e6dd2db36cc8853f06e10a7", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-04-28T08:46:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzE2Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417397167", "bodyText": "Do we need to copy everything?", "author": "MarianMacik", "createdAt": "2020-04-29T15:16:46Z", "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,4 @@\n+FROM openjdk:11\n+COPY . /", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDUwNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280505", "bodyText": "Thx for the comment! I've improved the Dockerfile, let me know if that's ok for you and I'll resolve the comment", "author": "r00ta", "createdAt": "2020-05-04T08:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5ODczMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417398732", "bodyText": "Just a typo two kinds.", "author": "MarianMacik", "createdAt": "2020-04-29T15:18:49Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: ", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDU2OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280569", "bodyText": "fixed", "author": "r00ta", "createdAt": "2020-05-04T08:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5ODczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417406702", "bodyText": "Shouldn't this be localhost instead of hello?", "author": "MarianMacik", "createdAt": "2020-04-29T15:29:13Z", "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+# A scrape configuration containing exactly one endpoint to scrape:\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'kogito-app'\n+\n+    scrape_interval: 10s\n+\n+    metrics_path: /metrics\n+\n+    static_configs:\n+      - targets: ['hello:8080'] ", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4MzkzNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419083936", "bodyText": "Hi, nope: this container is running in the docker-compose enviroment and the kogito-app is reachable on hello and not localhost", "author": "r00ta", "createdAt": "2020-05-03T10:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1MDkwNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421650905", "bodyText": "I see now, thanks for explanation.", "author": "MarianMacik", "createdAt": "2020-05-07T16:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzc1OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417407758", "bodyText": "This sounds like it should be done as a part of the script, but it is already written in the yaml file, so maybe a little rewording might help.", "author": "MarianMacik", "createdAt": "2020-04-29T15:30:33Z", "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+A script `docker-compose/run-compose.sh` is provided to demonstrate how to inject the generated dashboards in the volume of the grafana container:\n+ 1. the generated dashboards are copied from `target/resources/dashboards/` to the directory `docker-compose/grafana/provisioning/dashboards` \n+ 2. The volumes of the grafana container are properly set in the `docker-compose.yml` file, so that the dashboards are properly loaded at startup.", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDk4Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280982", "bodyText": "You are right, I've changed it a bit. Let me know if you are fine with that and I'll close the comment", "author": "r00ta", "createdAt": "2020-05-04T08:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417411074", "bodyText": "I think that the hello part can be deleted as it is not used for the purposes of the example, right?", "author": "MarianMacik", "createdAt": "2020-04-29T15:34:57Z", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+\n+import org.kie.kogito.rules.DataSource;\n+import org.kie.kogito.rules.DataStore;\n+import org.kie.kogito.rules.RuleUnitData;\n+\n+public class Hello implements RuleUnitData {", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NDExMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419084113", "bodyText": "This example is covering also a drl case. So if I remove this, I should also remove the drl.", "author": "r00ta", "createdAt": "2020-05-03T10:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1MTE0NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421651145", "bodyText": "Right, I didn't notice the drl in the readme.", "author": "MarianMacik", "createdAt": "2020-05-07T16:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDE0Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417424143", "bodyText": "Same here, this is not needed.", "author": "MarianMacik", "createdAt": "2020-04-29T15:52:48Z", "path": "dmn-drools-quarkus-metrics/src/main/resources/org/kie/kogito/examples/Hello.drl", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+unit Hello;", "originalCommit": "a0eac148e622cb99730de7637f5c79a4b5576343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NDEyNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419084126", "bodyText": "Same as above", "author": "r00ta", "createdAt": "2020-05-03T10:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDE0Mw=="}], "type": "inlineReview"}, {"oid": "9a0f70e3994c68be99102ef1d44407e0ef0b724e", "url": "https://github.com/kiegroup/kogito-examples/commit/9a0f70e3994c68be99102ef1d44407e0ef0b724e", "message": "improve Dockerfile, fix typos, fix comments", "committedDate": "2020-05-04T08:22:10Z", "type": "commit"}, {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "url": "https://github.com/kiegroup/kogito-examples/commit/b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "message": "remove generated dashboards", "committedDate": "2020-05-04T08:23:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420824173", "bodyText": "Could you try to replace base image to use UBI OpenJDK 11 one ( registry.access.redhat.com/ubi8/openjdk-11 )?\nSee https://jmtd.net/log/ubi-openjdk/\nThis should simplify a lot this Dockerfile", "author": "danielezonca", "createdAt": "2020-05-06T14:12:59Z", "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "originalCommit": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzM2NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420933365", "bodyText": "@danielezonca do you have any pointer that shows how this image should be used to deploy applications? I don't find anything :)\nbtw the current Dockerfile is the one that Quarkus recommends", "author": "r00ta", "createdAt": "2020-05-06T16:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDU4Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421440582", "bodyText": "You can try with\nFROM registry.access.redhat.com/ubi8/openjdk-11\n\nCOPY target/greeter.jar /deployments/greeter.jar\n\nEXPOSE 8080\n\nUSER 1001\n\nENTRYPOINT [ \"/deployments/run-java.sh\" ]\n\nor even\nFROM registry.access.redhat.com/ubi8/openjdk-11:latest\n\nCOPY my.jar /deployments\n\nshould work", "author": "danielezonca", "createdAt": "2020-05-07T11:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjE2NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421692165", "bodyText": "Btw let's do it with another ticket so we can proceed and merge :)", "author": "danielezonca", "createdAt": "2020-05-07T18:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTc0NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825744", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-05-06T14:15:01Z", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;", "originalCommit": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTg2Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825863", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-05-06T14:15:10Z", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/MyInterceptor.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.kogito.examples;", "originalCommit": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNjEzMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420826131", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-05-06T14:15:29Z", "path": "dmn-drools-quarkus-metrics/src/test/java/org/kie/kogito/examples/LoanEligibilityTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.kie.kogito.examples;", "originalCommit": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86fb66ed67ea8031c64ab6a7419adf936c6813c2", "url": "https://github.com/kiegroup/kogito-examples/commit/86fb66ed67ea8031c64ab6a7419adf936c6813c2", "message": "add licences", "committedDate": "2020-05-06T16:47:03Z", "type": "commit"}, {"oid": "0cb6be073e2471b8acbc31e160c42ebcf47739ef", "url": "https://github.com/kiegroup/kogito-examples/commit/0cb6be073e2471b8acbc31e160c42ebcf47739ef", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example", "committedDate": "2020-05-07T08:19:01Z", "type": "commit"}, {"oid": "f3e89497f152db174825815f22b00ec763bcfe4a", "url": "https://github.com/kiegroup/kogito-examples/commit/f3e89497f152db174825815f22b00ec763bcfe4a", "message": "update licences", "committedDate": "2020-05-07T08:20:59Z", "type": "commit"}]}