{"pr_number": 242, "pr_title": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus", "pr_createdAt": "2020-04-21T15:14:09Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/242", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTIzMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413061231", "bodyText": "where is this implementation of the persistence add-on?", "author": "mswiderski", "createdAt": "2020-04-22T15:01:59Z", "path": "kogito-mongodb-persistence-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,137 @@\n+<?xml version=\"1.0\"?>\n+<project\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kogito-mongodb-persistence-quarkus</artifactId>\n+\n+  <name>Kogito-mongodb-persistence-quarkus</name>\n+  <description>Kogito with mongodb persistence - Quarkus</description>\n+\n+\n+  \n+\n+  \n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-quarkus-bom</artifactId>\n+        <version>${kogito.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-mongodb-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>mongodb-persistence-addon</artifactId>", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0MTMxOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413141319", "bodyText": "I am working on it as I have to do some code changes based on recent changes in PersistenceGenerator in codegen and other modules.I will create a PR soon.", "author": "swati-kale", "createdAt": "2020-04-22T16:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5MjMyNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413292324", "bodyText": "Without this artifact we can't test your example", "author": "ricardozanini", "createdAt": "2020-04-22T20:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyODg4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413528884", "bodyText": "@swati-kale, in that case, could you mark this PR as Draft until you have all the available bits ready to be tested?", "author": "cristianonicolai", "createdAt": "2020-04-23T05:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzA2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r438153060", "bodyText": "I have added the addon here, kiegroup/kogito-runtimes#477", "author": "swati-kale", "createdAt": "2020-06-10T14:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyODAyMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413528020", "bodyText": "no need to add, as it should be handled by root .gitignore", "author": "cristianonicolai", "createdAt": "2020-04-23T05:51:57Z", "path": "kogito-mongodb-persistence-quarkus/.gitignore", "diffHunk": "@@ -0,0 +1,20 @@\n+bin/", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyODI5MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413528291", "bodyText": "Base Java is 11 now", "author": "cristianonicolai", "createdAt": "2020-04-23T05:52:38Z", "path": "kogito-mongodb-persistence-quarkus/README.md", "diffHunk": "@@ -0,0 +1,179 @@\n+# Kogito with persistence powered by Mongo\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to mongodb is saved, you can shut down the application and restart it\n+and as long as mongodb is running after you restart you should still see the data\n+\n+It utilizes mongo sedbrver as the backend store. \n+\t\n+* Process (submitDeal.bpmn)\t\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\t\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\t\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\t\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\t\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task\t(botom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an mongodb server to be available and by default expects it to be on default port (27017) and localhost.\n+\n+\n+\n+* MongoDB installed and running\t\n+<p align=\"center\"><img src=\"docs/images/mongo.png\"></p>\n+\n+## Build and run\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 1.8.0+ installed ", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyODM1MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413528350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              - Maven 3.5.4+ installed\n          \n          \n            \n              - Maven 3.6.2+ installed", "author": "cristianonicolai", "createdAt": "2020-04-23T05:52:48Z", "path": "kogito-mongodb-persistence-quarkus/README.md", "diffHunk": "@@ -0,0 +1,179 @@\n+# Kogito with persistence powered by Mongo\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to mongodb is saved, you can shut down the application and restart it\n+and as long as mongodb is running after you restart you should still see the data\n+\n+It utilizes mongo sedbrver as the backend store. \n+\t\n+* Process (submitDeal.bpmn)\t\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\t\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\t\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\t\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\t\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task\t(botom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an mongodb server to be available and by default expects it to be on default port (27017) and localhost.\n+\n+\n+\n+* MongoDB installed and running\t\n+<p align=\"center\"><img src=\"docs/images/mongo.png\"></p>\n+\n+## Build and run\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 1.8.0+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.5.4+ installed", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyODU4Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413528586", "bodyText": "could you please remove these empty lines", "author": "cristianonicolai", "createdAt": "2020-04-23T05:53:23Z", "path": "kogito-mongodb-persistence-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,137 @@\n+<?xml version=\"1.0\"?>\n+<project\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kogito-mongodb-persistence-quarkus</artifactId>\n+\n+  <name>Kogito-mongodb-persistence-quarkus</name>\n+  <description>Kogito with mongodb persistence - Quarkus</description>\n+\n+", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyOTEwMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413529100", "bodyText": "version should be managemend via bom already. please remove.", "author": "cristianonicolai", "createdAt": "2020-04-23T05:54:39Z", "path": "kogito-mongodb-persistence-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,137 @@\n+<?xml version=\"1.0\"?>\n+<project\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kogito-mongodb-persistence-quarkus</artifactId>\n+\n+  <name>Kogito-mongodb-persistence-quarkus</name>\n+  <description>Kogito with mongodb persistence - Quarkus</description>\n+\n+\n+  \n+\n+  \n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-quarkus-bom</artifactId>\n+        <version>${kogito.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-mongodb-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>mongodb-persistence-addon</artifactId>\n+      <version>${kogito.version}</version>", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyOTI0MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r413529241", "bodyText": "missing copywrite to Java classes", "author": "cristianonicolai", "createdAt": "2020-04-23T05:55:02Z", "path": "kogito-mongodb-persistence-quarkus/src/main/java/org/acme/travels/Address.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.acme.travels;", "originalCommit": "70f2367c662e59d14daeb5c7114d1a6d70a53ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f81f0d0afc6b3bb0439e5a73ca5cec1fbf93ba5e", "url": "https://github.com/kiegroup/kogito-examples/commit/f81f0d0afc6b3bb0439e5a73ca5cec1fbf93ba5e", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkas\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-04-24T19:31:14Z", "type": "forcePushed"}, {"oid": "f16a794926ad674c7dcac9379841de4b575467a1", "url": "https://github.com/kiegroup/kogito-examples/commit/f16a794926ad674c7dcac9379841de4b575467a1", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkas\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-04-24T19:42:15Z", "type": "forcePushed"}, {"oid": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "url": "https://github.com/kiegroup/kogito-examples/commit/5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "message": "Persistence example with Quarkus and Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-09T22:08:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDk2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444240960", "bodyText": "What about having a single process-persistence-quarkus example with multiple maven profiles: one for Infinispan and another for Mongodb?\nThis way we can save up lot of duplicate code. What do you think? @ricardozanini @cristianonicolai", "author": "Sgitario", "createdAt": "2020-06-23T13:52:32Z", "path": "pom.xml", "diffHunk": "@@ -146,6 +146,7 @@\n     <module>process-infinispan-persistence-springboot</module>\n     <module>process-kafka-quickstart-quarkus</module>\n     <module>process-kafka-quickstart-springboot</module>\n+    <module>process-mongodb-persistence-quarkus</module>", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MzE3MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444243171", "bodyText": "Typo here: MongDB", "author": "Sgitario", "createdAt": "2020-06-23T13:55:24Z", "path": "process-mongodb-persistence-quarkus/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+# Process with persistence powered by MongoDB\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to MongoDB is saved, you can shut down the application and restart it\n+and as long as MongoDB is running after you restart you should still see the data\n+\n+It utilizes MongoDB server as the backend store.\n+\n+* Process (submitDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task\t(botom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an MongDB server to be available and by default expects it to be on default port(27017) and localhost.", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDIzMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444244232", "bodyText": "I think the operator will deploy Infinispan by default, so maybe we need to add more details about how to install MongoDB in Openshift and configure the operator accordingly?", "author": "Sgitario", "createdAt": "2020-06-23T13:56:46Z", "path": "process-mongodb-persistence-quarkus/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+# Process with persistence powered by MongoDB\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to MongoDB is saved, you can shut down the application and restart it\n+and as long as MongoDB is running after you restart you should still see the data\n+\n+It utilizes MongoDB server as the backend store.\n+\n+* Process (submitDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task\t(botom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an MongDB server to be available and by default expects it to be on default port(27017) and localhost.\n+\n+* MongoDB installed and running\n+<p align=\"center\"><img src=\"docs/images/MongoDB_connection.png\"></p>\n+\n+## Build and run\n+\n+### Prerequisites\n+\n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need:\n+  - GraalVM 19.3+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - GraalVM native image needs as well native-image extension: https://www.graalvm.org/docs/reference-manual/native-image/\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too, please refer to GraalVM installation documentation for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile quarkus:dev\n+```\n+\n+NOTE: With dev mode of Quarkus you can take advantage of hot reload for business assets like processes, rules, decision tables and java code. No need to redeploy or restart your running application.\n+\n+### Package and Run in JVM mode\n+\n+```sh\n+mvn clean package\n+java -jar target/process-mongodb-persistence-quarkus-runner.jar\n+```\n+\n+or on windows\n+\n+```sh\n+mvn clean package\n+java -jar target\\process-mongodb-persistence-quarkus-runner.jar\n+```\n+\n+### Package and Run using Local Native Image\n+Note that this requires GRAALVM_HOME to point to a valid GraalVM installation\n+\n+```sh\n+mvn clean package -Pnative\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```\n+./target/process-mongodb-persistence-quarkus-runner\n+```\n+\n+### OpenAPI (Swagger) documentation\n+[Specification at swagger.io](https://swagger.io/docs/specification/about/)\n+\n+You can take a look at the [OpenAPI definition](http://localhost:8080/openapi?format=json) - automatically generated and included in this service - to determine all available operations exposed by this service. For easy readability you can visualize the OpenAPI definition file using a UI tool like for example available [Swagger UI](https://editor.swagger.io).\n+\n+In addition, various clients to interact with this service can be easily generated using this OpenAPI definition.\n+\n+When running in either Quarkus Development or Native mode, we also leverage the [Quarkus OpenAPI extension](https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-development) that exposes [Swagger UI](http://localhost:8080/swagger-ui/) that you can use to look at available REST endpoints and send test requests.\n+\n+### Submit a deal\n+\n+To make use of this application it is as simple as putting a sending request to `http://localhost:8080/deals`  with following content\n+\n+```json\n+{\n+\"name\" : \"my fancy deal\",\n+\"traveller\" : {\n+  \"firstName\" : \"John\",\n+  \"lastName\" : \"Doe\",\n+  \"email\" : \"jon.doe@example.com\",\n+  \"nationality\" : \"American\",\n+  \"address\" : {\n+  \t\"street\" : \"main street\",\n+  \t\"city\" : \"Boston\",\n+  \t\"zipCode\" : \"10005\",\n+  \t\"country\" : \"US\" }\n+  }\n+}\n+\n+```\n+\n+Complete curl command can be found below:\n+\n+```\n+curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"name\" : \"my fancy deal\", \"traveller\" : { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"email\" : \"jon.doe@example.com\", \"nationality\" : \"American\",\"address\" : { \"street\" : \"main street\", \"city\" : \"Boston\", \"zipCode\" : \"10005\", \"country\" : \"US\" }}}' http://localhost:8080/deals\n+```\n+\n+this will then trigger the review user task that you can work.\n+\n+### Get review task for given deal\n+\n+First you can display all active reviews of deals\n+\n+```\n+curl -H 'Content-Type:application/json' -H 'Accept:application/json' http://localhost:8080/dealreviews\n+```\n+\n+based on the response you can select one of the reviews to see more details\n+\n+```\n+curl -H 'Content-Type:application/json' -H 'Accept:application/json' http://localhost:8080/dealreviews/{uuid}/tasks?user=john\n+```\n+\n+where uuid is the id of the deal review you want to work with.\n+\n+Next you can get the details assigned to review user task by\n+\n+```\n+curl -H 'Content-Type:application/json' -H 'Accept:application/json' http://localhost:8080/dealreviews/{uuid}/review/{tuuid}?user=john\n+```\n+\n+where uuid is the id of the deal review and tuuid is the id of the user task you want to get\n+\n+\n+### Complete review task for given deal\n+\n+Last but not least you can complete review user task by\n+\n+```\n+curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"review\" : \"very good work\"}' http://localhost:8080/dealreviews/{uuid}/review/{tuuid}?user=john\n+```\n+\n+where uuid is the id of the deal review and tuuid is the id of the user task you want to get\n+\n+* Review Log should look similar to\n+\n+```\n+Review of the deal very good work for traveller Doe\n+```\n+\n+## Deploying with Kogito Operator\n+\n+In the [`operator`](operator) directory you'll find the custom resources needed to deploy this example on OpenShift with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjI4MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r462342281", "bodyText": "removed the operator folder as it will be taken care in other Jira.", "author": "swati-kale", "createdAt": "2020-07-29T14:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDcyOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444244728", "bodyText": "This will configure the KogitoApp using an Infinispan instance, right?", "author": "Sgitario", "createdAt": "2020-06-23T13:57:22Z", "path": "process-mongodb-persistence-quarkus/operator/process-mongodb-persistence-quarkus.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+apiVersion: app.kiegroup.org/v1alpha1\n+kind: KogitoApp\n+metadata:\n+  name: process-mongodb-persistence-quarkus\n+spec:\n+  enablePersistence: true", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjU2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r462342560", "bodyText": "same as above", "author": "swati-kale", "createdAt": "2020-07-29T14:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDUzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r472110533", "bodyText": "The operator example will be handled in separate Jira.", "author": "swati-kale", "createdAt": "2020-08-18T11:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NTE0Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444245146", "bodyText": "The format is wrong here: It should use 2 spaces instead of tabs for indendation.", "author": "Sgitario", "createdAt": "2020-06-23T13:57:55Z", "path": "process-mongodb-persistence-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\"?>", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjQwMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r444246402", "bodyText": "This has changed in the master branch, update and follow the same approach as done for Infinispan.", "author": "Sgitario", "createdAt": "2020-06-23T13:59:38Z", "path": "process-mongodb-persistence-quarkus/src/test/java/org/acme/deals/DealsRestIT.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@Testcontainers\n+@QuarkusTest\n+public class DealsRestIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DealsRestIT.class);\n+    private static final int MONGO_DEFAULT_PORT = 27017;\n+    private static final String MONGO_VERSION = \"mongo:4.0\";\n+\n+    @Container\n+    public static GenericContainer INFINISPAN = new FixedHostPortGenericContainer(MONGO_VERSION).withFixedExposedPort(MONGO_DEFAULT_PORT, MONGO_DEFAULT_PORT)\n+                                                                                                .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                                                                                                .waitingFor(Wait.forLogMessage(\".*build index done.*\", 1));", "originalCommit": "5a81fe284e3b6bb166275cb5f3b8581b3f07ebcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDg4MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r447210880", "bodyText": "I will check infinispan implementation. Thanks!", "author": "swati-kale", "createdAt": "2020-06-29T19:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MzU2Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r462343562", "bodyText": "Added integration test following infinispan.", "author": "swati-kale", "createdAt": "2020-07-29T14:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjQwMg=="}], "type": "inlineReview"}, {"oid": "4dcd495db0e87f0716d2fcfc770650bbb7814090", "url": "https://github.com/kiegroup/kogito-examples/commit/4dcd495db0e87f0716d2fcfc770650bbb7814090", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus", "committedDate": "2020-07-24T21:20:45Z", "type": "forcePushed"}, {"oid": "4febacdb08818b3acf1c92c7c0160a610c72b727", "url": "https://github.com/kiegroup/kogito-examples/commit/4febacdb08818b3acf1c92c7c0160a610c72b727", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus", "committedDate": "2020-07-28T02:29:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMTU2NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r463501565", "bodyText": "please remove this log setting as it might be too verbose for most people and CI logs.", "author": "cristianonicolai", "createdAt": "2020-07-31T09:19:54Z", "path": "process-mongodb-persistence-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+quarkus.swagger-ui.always-include=true\n+quarkus.mongodb.connection-string = mongodb://localhost:27017\n+kogito.persistence.type=mongodb\n+\n+quarkus.mongodb.application-name=mongodb-addon-persistence\n+quarkus.mongodb.database=kogito_quarkus\n+quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG", "originalCommit": "4febacdb08818b3acf1c92c7c0160a610c72b727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMTk3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r463501977", "bodyText": "is this really needed here? I think in general these are set in the pom.xml native profile.", "author": "cristianonicolai", "createdAt": "2020-07-31T09:20:42Z", "path": "process-mongodb-persistence-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+quarkus.swagger-ui.always-include=true\n+quarkus.mongodb.connection-string = mongodb://localhost:27017\n+kogito.persistence.type=mongodb\n+\n+quarkus.mongodb.application-name=mongodb-addon-persistence\n+quarkus.mongodb.database=kogito_quarkus\n+quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG\n+\n+quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json,\\", "originalCommit": "4febacdb08818b3acf1c92c7c0160a610c72b727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4MTA3OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r464181078", "bodyText": "moved to pom.xml", "author": "swati-kale", "createdAt": "2020-08-03T03:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMTk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNTkyMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r463505920", "bodyText": "do we need reflection on this for Mongo?", "author": "cristianonicolai", "createdAt": "2020-07-31T09:29:11Z", "path": "process-mongodb-persistence-quarkus/src/main/resources/reflection-config.json", "diffHunk": "@@ -0,0 +1,451 @@\n+[", "originalCommit": "4febacdb08818b3acf1c92c7c0160a610c72b727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4MTIwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r464181201", "bodyText": "Not for mongodb related package but while converting JBPMMessages.java to json using protobuf-util. It does not recognize inner class and their methods.", "author": "swati-kale", "createdAt": "2020-08-03T03:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNTkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNjIyNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r463506226", "bodyText": "please move native build options to pom native profile.", "author": "cristianonicolai", "createdAt": "2020-07-31T09:29:49Z", "path": "process-mongodb-persistence-quarkus/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,12 @@\n+# Quarkus\n+quarkus.http.test-port=0\n+quarkus.log.console.enable=true\n+quarkus.log.console.level=INFO\n+quarkus.log.level=INFO\n+\n+# MongoDB\n+quarkus.mongodb.connection-string = mongodb://localhost:27017\n+quarkus.mongodb.database=kogito_test\n+kogito.persistence.type=mongodb\n+quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json,\\", "originalCommit": "4febacdb08818b3acf1c92c7c0160a610c72b727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4MTMyOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r464181329", "bodyText": "moved to pom.xml", "author": "swati-kale", "createdAt": "2020-08-03T03:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNjIyNg=="}], "type": "inlineReview"}, {"oid": "9fd129a59cd0c7e09f27fa32e598f01047baf91a", "url": "https://github.com/kiegroup/kogito-examples/commit/9fd129a59cd0c7e09f27fa32e598f01047baf91a", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus", "committedDate": "2020-08-03T03:15:08Z", "type": "forcePushed"}, {"oid": "87275c7432be0637c7df94649037492e1a33dc58", "url": "https://github.com/kiegroup/kogito-examples/commit/87275c7432be0637c7df94649037492e1a33dc58", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-06T21:18:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDA0OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r466764049", "bodyText": "AFIK  examples-test-utils will be removed. You should be able to reuse this from kogito-test-utils in the runtime.\n@Sgitario that's the plan right?", "author": "cristianonicolai", "createdAt": "2020-08-07T01:02:54Z", "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoMongoDBContainer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers;\n+\n+import org.kie.kogito.resources.TestResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.MongoDBContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+/**\n+ * MongoDB Container for Kogito examples.\n+ */\n+public class KogitoMongoDBContainer extends MongoDBContainer implements TestResource {", "originalCommit": "87275c7432be0637c7df94649037492e1a33dc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NzE5Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r466847196", "bodyText": "That's correct. However, this module has not been deleted yet (it will be done as part of KOGITO-2985 which is blocked). So, it's fine to leave it this way at the moment).", "author": "Sgitario", "createdAt": "2020-08-07T06:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDA0OQ=="}], "type": "inlineReview"}, {"oid": "66652a914f8bf3d40f43c06d5b0f645123d0d554", "url": "https://github.com/kiegroup/kogito-examples/commit/66652a914f8bf3d40f43c06d5b0f645123d0d554", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-13T20:06:27Z", "type": "forcePushed"}, {"oid": "bef871316898420a3085bc498eba913ff9b24843", "url": "https://github.com/kiegroup/kogito-examples/commit/bef871316898420a3085bc498eba913ff9b24843", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-21T14:48:58Z", "type": "forcePushed"}, {"oid": "58802c361c7b193ecf05d075721c2a2e06edfff5", "url": "https://github.com/kiegroup/kogito-examples/commit/58802c361c7b193ecf05d075721c2a2e06edfff5", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-26T17:02:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTIwNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r477579206", "bodyText": "Maybe it would be good to add this also in the Spring Boot example readme.", "author": "MarianMacik", "createdAt": "2020-08-26T20:46:27Z", "path": "process-mongodb-persistence-quarkus/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# Process with persistence powered by MongoDB\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to MongoDB is saved, you can shut down the application and restart it\n+and as long as MongoDB is running after you restart you should still see the data\n+\n+It utilizes MongoDB server as the backend store.\n+\n+* Process (submitDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task\t(botom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an MongoDB server to be available and by default expects it to be on default port(27017) and localhost.\n+The default database is \"kogito\" or you can provide the database name using property - quarkus.mongodb.database.\n+You must set property - kogito.persistence.type=mongodb \n+For more details you can check applications.properties.", "originalCommit": "58802c361c7b193ecf05d075721c2a2e06edfff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MTQ5Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r477581497", "bodyText": "Formatting uses tabs instead of spaces.", "author": "MarianMacik", "createdAt": "2020-08-26T20:51:05Z", "path": "process-mongodb-persistence-quarkus/src/main/java/org/acme/deals/Address.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+public class Address {\n+\n+\tprivate String street;\n+\tprivate String city;\n+\tprivate String zipCode;\n+\tprivate String country;\n+\n+\tpublic Address() {\n+\n+\t}\n+\n+\tpublic Address(String street, String city, String zipCode, String country) {\n+\t\tthis.street = street;\n+\t\tthis.city = city;\n+\t\tthis.zipCode = zipCode;\n+\t\tthis.country = country;", "originalCommit": "58802c361c7b193ecf05d075721c2a2e06edfff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MTY3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r477581677", "bodyText": "Same here, tabs instead of spaces.", "author": "MarianMacik", "createdAt": "2020-08-26T20:51:25Z", "path": "process-mongodb-persistence-quarkus/src/main/java/org/acme/deals/Traveller.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+public class Traveller {\n+\n+\tprivate String firstName;\n+\tprivate String lastName;\n+\tprivate String email;\n+\tprivate String nationality;\n+\tprivate Address address;\n+\n+\tpublic Traveller() {\n+\n+\t}\n+\n+\tpublic Traveller(String firstName, String lastName, String email, String nationality, Address address) {\n+\t\tthis.firstName = firstName;", "originalCommit": "58802c361c7b193ecf05d075721c2a2e06edfff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2MDM1OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/242#discussion_r477860359", "bodyText": "can be removed as it now uses kogito-test-utils", "author": "cristianonicolai", "createdAt": "2020-08-27T01:17:09Z", "path": "pom.xml", "diffHunk": "@@ -267,6 +268,11 @@\n         <groupId>org.jpmml</groupId>\n         <artifactId>pmml-model</artifactId>\n         <version>${version.org.jpmml}</version>\n+       </dependency> \n+       <dependency>\n+        <groupId>org.testcontainers</groupId>", "originalCommit": "58802c361c7b193ecf05d075721c2a2e06edfff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f10cf0b11f0d09bfe375e63960358161c4659f0", "url": "https://github.com/kiegroup/kogito-examples/commit/4f10cf0b11f0d09bfe375e63960358161c4659f0", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-27T02:51:09Z", "type": "forcePushed"}, {"oid": "975ef6ab8032579fb71024a88ed8342e007d8c7e", "url": "https://github.com/kiegroup/kogito-examples/commit/975ef6ab8032579fb71024a88ed8342e007d8c7e", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-27T13:24:38Z", "type": "forcePushed"}, {"oid": "3b0c9f4afbd31a89f169e5b921c46a18fb6ff12c", "url": "https://github.com/kiegroup/kogito-examples/commit/3b0c9f4afbd31a89f169e5b921c46a18fb6ff12c", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-31T02:18:13Z", "type": "forcePushed"}, {"oid": "1934ddb329e01ba57bb2f63e958a844ca0577eca", "url": "https://github.com/kiegroup/kogito-examples/commit/1934ddb329e01ba57bb2f63e958a844ca0577eca", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-31T13:27:08Z", "type": "commit"}, {"oid": "1934ddb329e01ba57bb2f63e958a844ca0577eca", "url": "https://github.com/kiegroup/kogito-examples/commit/1934ddb329e01ba57bb2f63e958a844ca0577eca", "message": "[KOGITO-1920] - Example for persistence in Mongo DB with Quarkus\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-31T13:27:08Z", "type": "forcePushed"}]}