{"pr_number": 369, "pr_title": "[KOGITO-3158] Adding serverless rest example", "pr_createdAt": "2020-09-18T19:57:45Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/369", "timeline": [{"oid": "45c857f790effadf3893f3fd39f0e90a4bd077e9", "url": "https://github.com/kiegroup/kogito-examples/commit/45c857f790effadf3893f3fd39f0e90a4bd077e9", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-21T14:04:22Z", "type": "forcePushed"}, {"oid": "3690e76c2f367f8e44b58c9f067552ad185f9c0b", "url": "https://github.com/kiegroup/kogito-examples/commit/3690e76c2f367f8e44b58c9f067552ad185f9c0b", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-21T20:09:49Z", "type": "forcePushed"}, {"oid": "e8da51a6a1a7ee10361e85513a6feccc83db2b2b", "url": "https://github.com/kiegroup/kogito-examples/commit/e8da51a6a1a7ee10361e85513a6feccc83db2b2b", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-21T20:11:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDQzNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r492344434", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This example contains a workflow that performs two consecutive REST invocations defines as functions.  \n          \n          \n            \n            This example contains a workflow that performs two consecutive REST invocations defined as functions.", "author": "ricardozanini", "createdAt": "2020-09-21T21:02:55Z", "path": "serverless-workflow-functions-quarkus/README.md", "diffHunk": "@@ -0,0 +1,122 @@\n+# Kogito Serverless Workflow - Rest Example\n+\n+## Description\n+\n+This example contains a workflow that performs two consecutive REST invocations defines as functions.  ", "originalCommit": "e8da51a6a1a7ee10361e85513a6feccc83db2b2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MzUxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r492693513", "bodyText": "still reads \"defines\"", "author": "evacchi", "createdAt": "2020-09-22T12:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjMxOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r492742319", "bodyText": "now, I overrided Ricado's suggestion accidentally", "author": "fjtirado", "createdAt": "2020-09-22T13:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDQzNA=="}], "type": "inlineReview"}, {"oid": "cc425354dc10be287a7756975f4dec9ad2eaac1a", "url": "https://github.com/kiegroup/kogito-examples/commit/cc425354dc10be287a7756975f4dec9ad2eaac1a", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-22T10:10:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MzgzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r492693833", "bodyText": "a JSON input", "author": "evacchi", "createdAt": "2020-09-22T12:30:18Z", "path": "serverless-workflow-functions-quarkus/README.md", "diffHunk": "@@ -0,0 +1,122 @@\n+# Kogito Serverless Workflow - Rest Example\n+\n+## Description\n+\n+This example contains a workflow that performs two consecutive REST invocations defines as functions.  \n+The workflow is described using JSON format as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects as JSON input containing a collections of numbers.", "originalCommit": "cc425354dc10be287a7756975f4dec9ad2eaac1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzU3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r492867577", "bodyText": "changed, thanks", "author": "fjtirado", "createdAt": "2020-09-22T16:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MzgzMw=="}], "type": "inlineReview"}, {"oid": "161b58813d94657711d4dec7bcb068b94033336b", "url": "https://github.com/kiegroup/kogito-examples/commit/161b58813d94657711d4dec7bcb068b94033336b", "message": "Update serverless-workflow-functions-quarkus/README.md\n\nCo-authored-by: Ricardo Zanini <1538000+ricardozanini@users.noreply.github.com>", "committedDate": "2020-09-22T16:18:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzMTgzMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r493131833", "bodyText": "@fjtirado maybe would be good to review the deps that are actually needed for the demo, I'm guessing not all are used.", "author": "cristianonicolai", "createdAt": "2020-09-23T01:39:50Z", "path": "serverless-workflow-functions-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,117 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>serverless-workflow-functions-quarkus</artifactId>\n+\n+  <name>Kogito Example :: Serverless Workflow Functions :: Quarkus</name>\n+  <description>Kogito Serverless Workflow Example - Quarkus</description>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-quarkus-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>", "originalCommit": "161b58813d94657711d4dec7bcb068b94033336b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1MTc1NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r493451754", "bodyText": "unneeded dependencies removed", "author": "fjtirado", "createdAt": "2020-09-23T10:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzMTgzMw=="}], "type": "inlineReview"}, {"oid": "293a9483245f148024f93b8cd9b06eba645b4177", "url": "https://github.com/kiegroup/kogito-examples/commit/293a9483245f148024f93b8cd9b06eba645b4177", "message": "Update serverless-workflow-functions-quarkus/README.md\n\nCo-authored-by: Ricardo Zanini <1538000+ricardozanini@users.noreply.github.com>", "committedDate": "2020-09-23T10:59:20Z", "type": "forcePushed"}, {"oid": "aab4f3f0f782aec9810e6a42e1921961103dc295", "url": "https://github.com/kiegroup/kogito-examples/commit/aab4f3f0f782aec9810e6a42e1921961103dc295", "message": "Update serverless-workflow-functions-quarkus/README.md\n\nCo-authored-by: Ricardo Zanini <1538000+ricardozanini@users.noreply.github.com>", "committedDate": "2020-09-23T15:18:10Z", "type": "forcePushed"}, {"oid": "5c961d8cba11f643f4418a24a1be237ac7981f75", "url": "https://github.com/kiegroup/kogito-examples/commit/5c961d8cba11f643f4418a24a1be237ac7981f75", "message": "Update serverless-workflow-functions-quarkus/README.md\n\nCo-authored-by: Ricardo Zanini <1538000+ricardozanini@users.noreply.github.com>", "committedDate": "2020-09-24T09:08:35Z", "type": "forcePushed"}, {"oid": "2703e5c16fd8e332c13877704e2f39fb26ccd10c", "url": "https://github.com/kiegroup/kogito-examples/commit/2703e5c16fd8e332c13877704e2f39fb26ccd10c", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-24T09:09:36Z", "type": "forcePushed"}, {"oid": "4cfd09128192a3e6581f972f9eb453d0f3a8e4e6", "url": "https://github.com/kiegroup/kogito-examples/commit/4cfd09128192a3e6581f972f9eb453d0f3a8e4e6", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-24T14:55:45Z", "type": "forcePushed"}, {"oid": "50de42efbea13d9299337e2ceb625aa07a26aadb", "url": "https://github.com/kiegroup/kogito-examples/commit/50de42efbea13d9299337e2ceb625aa07a26aadb", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-25T18:28:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NzI1Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495697252", "bodyText": "From quarkus 1.7, the graalvm version is 20.2.0+.", "author": "Sgitario", "createdAt": "2020-09-28T05:32:11Z", "path": "serverless-workflow-functions-quarkus/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# Kogito Serverless Workflow - Rest Example\n+\n+## Description\n+\n+This example contains a workflow that performs two consecutive REST invocations defined as functions.  \n+The workflow is described using JSON format as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects a JSON input containing a collections of numbers.\n+\n+The workflow starts invoking a GET to obtain a random integer. \n+This integer is passed together with the list of numbers to  a second REST invocation, a POST, which multiply each element of the array by the generated number\n+and returns the sum. \n+Finally, the resulting integer is printed using sysout script. \n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 19.3.1+ installed", "originalCommit": "50de42efbea13d9299337e2ceb625aa07a26aadb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5ODYzNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495698635", "bodyText": "Do we need this comment here or it's just a leftover?", "author": "Sgitario", "createdAt": "2020-09-28T05:37:55Z", "path": "serverless-workflow-functions-quarkus/src/test/java/org/acme/numbers/NumbersMockService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.numbers;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo; \n+\n+public class NumbersMockService implements QuarkusTestResourceLifecycleManager{\n+\n+    private WireMockServer wireMockServer;\n+    \n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer(8080);\n+        wireMockServer.start(); \n+        \n+        wireMockServer.baseUrl();\n+        stubFor(get(urlEqualTo(\"/numbers/random\"))   \n+               .willReturn(aResponse()\n+                       .withHeader(\"Content-Type\", \"application/json\")\n+                       .withBody(\"{\\\"randomNumber\\\": 1}\")));\n+        \n+        stubFor(post(urlEqualTo(\"/numbers/1/multiplyByAndSum\"))\n+                .willReturn(aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(\"{\\\"sum\\\": 34}\")));\n+        \n+        \n+       // stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"http://localhost:8080\")));", "originalCommit": "50de42efbea13d9299337e2ceb625aa07a26aadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczODk3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495738977", "bodyText": "removed", "author": "fjtirado", "createdAt": "2020-09-28T07:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5ODYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5OTU0MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495699540", "bodyText": "We should use the dynamic port resolution here to avoid conflicts with running local services:\nimport static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n\n// ...\nwireMockServer = new WireMockServer(options().dynamicPort());\n\nThen, we can get the port and provide the right value in the Map<String, String>:\nreturn Collections.singletonMap(\"my-service\", \"localhost: \" + wireMockServer.port()); // something like this\n\nThis way, the quarkus service can load the \"my-service\" property with the right port to connect with.", "author": "Sgitario", "createdAt": "2020-09-28T05:41:20Z", "path": "serverless-workflow-functions-quarkus/src/test/java/org/acme/numbers/NumbersMockService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.numbers;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo; \n+\n+public class NumbersMockService implements QuarkusTestResourceLifecycleManager{\n+\n+    private WireMockServer wireMockServer;\n+    \n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer(8080);", "originalCommit": "50de42efbea13d9299337e2ceb625aa07a26aadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NDUzMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495744530", "bodyText": "Port needs to match the port in the sw definition. Since currently sw spec is expecting the port to be in the endpoint, this needs to be hardcoded for now.\nIn future, we should separate host and port from endpoint.\nIll open a JIRA for that.\nPS:\nAfter giving it a thought, I moved host and port as properties", "author": "fjtirado", "createdAt": "2020-09-28T07:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5OTU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5OTU5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/369#discussion_r495699598", "bodyText": "I think this call is not doing anything.", "author": "Sgitario", "createdAt": "2020-09-28T05:41:35Z", "path": "serverless-workflow-functions-quarkus/src/test/java/org/acme/numbers/NumbersMockService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.numbers;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo; \n+\n+public class NumbersMockService implements QuarkusTestResourceLifecycleManager{\n+\n+    private WireMockServer wireMockServer;\n+    \n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer(8080);\n+        wireMockServer.start(); \n+        \n+        wireMockServer.baseUrl();", "originalCommit": "50de42efbea13d9299337e2ceb625aa07a26aadb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e9a5b791c1a0c109c60e17f81f11d5411f83f32", "url": "https://github.com/kiegroup/kogito-examples/commit/9e9a5b791c1a0c109c60e17f81f11d5411f83f32", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-28T07:28:59Z", "type": "forcePushed"}, {"oid": "65f2fc066b045a4ff28812c524cf3c144b1ee66f", "url": "https://github.com/kiegroup/kogito-examples/commit/65f2fc066b045a4ff28812c524cf3c144b1ee66f", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-28T08:40:40Z", "type": "commit"}, {"oid": "65f2fc066b045a4ff28812c524cf3c144b1ee66f", "url": "https://github.com/kiegroup/kogito-examples/commit/65f2fc066b045a4ff28812c524cf3c144b1ee66f", "message": "[KOGITO-3158] Adding serverless REST example", "committedDate": "2020-09-28T08:40:40Z", "type": "forcePushed"}]}