{"pr_number": 355, "pr_title": "[KOGITO-3294] - Improving unit tests for Knative example", "pr_createdAt": "2020-09-08T20:50:06Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/355", "timeline": [{"oid": "97a3b0d20a58cf34f029eccaa93a5d271812493c", "url": "https://github.com/kiegroup/kogito-examples/commit/97a3b0d20a58cf34f029eccaa93a5d271812493c", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-09T18:46:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwOTU0Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r485909543", "bodyText": "info?", "author": "evacchi", "createdAt": "2020-09-09T20:41:38Z", "path": "process-knative-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -1,6 +1,6 @@\n quarkus.swagger-ui.always-include=true\n \n-quarkus.log.level=INFO\n+quarkus.log.level=DEBUG", "originalCommit": "97a3b0d20a58cf34f029eccaa93a5d271812493c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "url": "https://github.com/kiegroup/kogito-examples/commit/3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-09T21:43:46Z", "type": "commit"}, {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "url": "https://github.com/kiegroup/kogito-examples/commit/3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-09T21:43:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5ODc5Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486098797", "bodyText": "maybe add a line explaining why this env variable is necessary", "author": "evacchi", "createdAt": "2020-09-10T06:38:27Z", "path": "process-knative-quickstart-quarkus/README.md", "diffHunk": "@@ -94,7 +94,7 @@ When using native image compilation, you will also need:\n ### Compile and Run in Local Dev Mode\n \n ```sh\n-mvn clean compile quarkus:dev\n+K_SINK=localhost:8181 mvn clean compile quarkus:dev", "originalCommit": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI3Mzg3NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486273875", "bodyText": "How about:\n\nK_SINK is the environment variable injected by the Knative Eventing platform once we deploy the application on a Kubernetes cluster.\nInstead of hardcoding the endpoint where we are going to send our produced messages, we rely on Knative to inject this information in runtime.\nThe environment variable will be assigned to the SmallRye HTTP connector in runtime: mp.messaging.outgoing.processedtravellers.url=${K_SINK}.\nFor local tests we will mock the endpoint where the produced messages supposed to be delivered.", "author": "ricardozanini", "createdAt": "2020-09-10T11:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5ODc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTM0NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification\n          \n          \n            \n                    // have we received the message? We force the sleep since the WireMock framework doesn't support waiting/timeout verification", "author": "evacchi", "createdAt": "2020-09-10T06:39:44Z", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travel;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.containing;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+public class CloudEventListenerTest {\n+\n+    private static WireMockServer sink;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudEventListenerTest.class);\n+\n+    @BeforeAll\n+    public static void startSink() {\n+        sink = new WireMockServer(options().port(8181));\n+        sink.start();\n+        sink.stubFor(post(\"/\").willReturn(aResponse().withBody(\"ok\").withStatus(200)));\n+    }\n+\n+    @AfterAll\n+    public static void stopSink() {\n+        if (sink != null) {\n+            sink.stop();\n+        }\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCEForAmericans() throws JsonProcessingException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"American\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCE() throws JsonProcessingException, InterruptedException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"Polish\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+\n+        // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification", "originalCommit": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTU2MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099561", "bodyText": "hope this won't turn into a flaky test nightmare :D", "author": "evacchi", "createdAt": "2020-09-10T06:40:10Z", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travel;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.containing;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+public class CloudEventListenerTest {\n+\n+    private static WireMockServer sink;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudEventListenerTest.class);\n+\n+    @BeforeAll\n+    public static void startSink() {\n+        sink = new WireMockServer(options().port(8181));\n+        sink.start();\n+        sink.stubFor(post(\"/\").willReturn(aResponse().withBody(\"ok\").withStatus(200)));\n+    }\n+\n+    @AfterAll\n+    public static void stopSink() {\n+        if (sink != null) {\n+            sink.stop();\n+        }\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCEForAmericans() throws JsonProcessingException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"American\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCE() throws JsonProcessingException, InterruptedException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"Polish\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+\n+        // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification\n+        LOGGER.info(\"Waiting 2 seconds to receive the produced message\");\n+        Thread.sleep(2000);", "originalCommit": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI3MDA4NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486270085", "bodyText": "Me too. I really hate doing this, but there's no other way that I could think of that would be simpler.", "author": "ricardozanini", "createdAt": "2020-09-10T11:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTgyMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099823", "bodyText": "${K_SINK} or something ?", "author": "evacchi", "createdAt": "2020-09-10T06:40:41Z", "path": "process-knative-quickstart-quarkus/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.http.test-port=8282\n+quarkus.log.level=INFO\n+\n+# mocked during tests\n+mp.messaging.outgoing.processedtravellers.connector=smallrye-http\n+mp.messaging.outgoing.processedtravellers.url=http://0.0.0.0:8181", "originalCommit": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2OTc1OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486269758", "bodyText": "In tests we can leave as is since we are mocking this sink with WireMock.", "author": "ricardozanini", "createdAt": "2020-09-10T11:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTgyMw=="}], "type": "inlineReview"}, {"oid": "292197724d693c2d79926fd51cebe68746ce7944", "url": "https://github.com/kiegroup/kogito-examples/commit/292197724d693c2d79926fd51cebe68746ce7944", "message": "Explanning K_SINK\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-09-10T11:51:07Z", "type": "commit"}]}