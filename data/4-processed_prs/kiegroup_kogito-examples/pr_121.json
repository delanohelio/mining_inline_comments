{"pr_number": 121, "pr_title": "Flight Example", "pr_createdAt": "2020-01-17T14:22:11Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/121", "timeline": [{"oid": "24f38c6121105dd647b8bab187d512223d9b1c1d", "url": "https://github.com/kiegroup/kogito-examples/commit/24f38c6121105dd647b8bab187d512223d9b1c1d", "message": "Show the seat the person is requesting on the form", "committedDate": "2020-01-24T21:18:02Z", "type": "forcePushed"}, {"oid": "17c3f1aea3803057055625c7e22614e52f925b7d", "url": "https://github.com/kiegroup/kogito-examples/commit/17c3f1aea3803057055625c7e22614e52f925b7d", "message": "Renamed solutionFactory, add a division by zero check", "committedDate": "2020-01-29T16:37:26Z", "type": "forcePushed"}, {"oid": "a3c20a8d442987710a052b913d460e7cda739b53", "url": "https://github.com/kiegroup/kogito-examples/commit/a3c20a8d442987710a052b913d460e7cda739b53", "message": "jBPM + OptaPlanner Spring Boot \"Wedding\" example", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "41ff804e82ba47b031836dd8e2dec70173c78249", "url": "https://github.com/kiegroup/kogito-examples/commit/41ff804e82ba47b031836dd8e2dec70173c78249", "message": "Remove license header to align with kogito-examples code style", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "e7b4111598f7cce49ba234e564465506edce28ff", "url": "https://github.com/kiegroup/kogito-examples/commit/e7b4111598f7cce49ba234e564465506edce28ff", "message": "Remove unused dependencies (thanks Maciej)", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "bb8a711bbd6fc560c0c1a72b8df790225c32cdfa", "url": "https://github.com/kiegroup/kogito-examples/commit/bb8a711bbd6fc560c0c1a72b8df790225c32cdfa", "message": "Add frontend static html and js", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "8a9f1aa20abbd600caa8d219e670e459b22a19e2", "url": "https://github.com/kiegroup/kogito-examples/commit/8a9f1aa20abbd600caa8d219e670e459b22a19e2", "message": "Refactor from wedding to flight seat assignment", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "b7122cb94a8a57bcd1aa5812fea6e983051c2ff4", "url": "https://github.com/kiegroup/kogito-examples/commit/b7122cb94a8a57bcd1aa5812fea6e983051c2ff4", "message": "rename from Wedding to Flight Seating", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "ef6606042c47d4efc3df29c664f2a9b5625a6a1b", "url": "https://github.com/kiegroup/kogito-examples/commit/ef6606042c47d4efc3df29c664f2a9b5625a6a1b", "message": "Created DTO, edited bpmn, started client side interactions", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "fc27d90848ce397ef39f39326d519e96ddf1144a", "url": "https://github.com/kiegroup/kogito-examples/commit/fc27d90848ce397ef39f39326d519e96ddf1144a", "message": "Added an \"Add Passenger\" task, although the \"Approve Passenger\"\ntask does not seem to exist.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "e2e861e5f481a320033c2d5102bd13a9b4374e3d", "url": "https://github.com/kiegroup/kogito-examples/commit/e2e861e5f481a320033c2d5102bd13a9b4374e3d", "message": "Got the BPMN diagram to FINALLY work; created a basic UI for tasks", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "92e2c20c38c19799563cde0bf75c3f7d1f3fc447", "url": "https://github.com/kiegroup/kogito-examples/commit/92e2c20c38c19799563cde0bf75c3f7d1f3fc447", "message": "Added jaxax dependency and stylized the button", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "4722b87e940fd19b2ff4fceb53adaa8f097d32a1", "url": "https://github.com/kiegroup/kogito-examples/commit/4722b87e940fd19b2ff4fceb53adaa8f097d32a1", "message": "Added a button to generate passenger list in the frontend", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "aa0151e1822e724449d578f75fed52af96b235b0", "url": "https://github.com/kiegroup/kogito-examples/commit/aa0151e1822e724449d578f75fed52af96b235b0", "message": "small fixes in the process and added test case for the main flight process", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "995d3d49dc1aa1db47b7d85f1664b1f1439476ee", "url": "https://github.com/kiegroup/kogito-examples/commit/995d3d49dc1aa1db47b7d85f1664b1f1439476ee", "message": "Fix params sent by the UI for approveDenyRequest, assign solution to flight", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "e8203d20d8be8de906230c896dae73210ca85e3e", "url": "https://github.com/kiegroup/kogito-examples/commit/e8203d20d8be8de906230c896dae73210ca85e3e", "message": "Add Seat Icon, Made column in the middle visible, changed\ndefault column and row lengths of the flight.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "292b8213fac1d44400219a08078734e677fb3d98", "url": "https://github.com/kiegroup/kogito-examples/commit/292b8213fac1d44400219a08078734e677fb3d98", "message": "Use async ajax; added future and suspense functions to provide\ngood UX experience when data is being fetched", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "1ecf9c37e34028334d6f3754a09e59b785ca50ad", "url": "https://github.com/kiegroup/kogito-examples/commit/1ecf9c37e34028334d6f3754a09e59b785ca50ad", "message": "Give passengers the ability to pay for their seats", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "2f89ee79fc65ff47fbdaf82214eab4c28245d738", "url": "https://github.com/kiegroup/kogito-examples/commit/2f89ee79fc65ff47fbdaf82214eab4c28245d738", "message": "Show the seat the person is requesting on the form", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "00e8c3949b6ade2eb8d97e7899e28b1a480b3e10", "url": "https://github.com/kiegroup/kogito-examples/commit/00e8c3949b6ade2eb8d97e7899e28b1a480b3e10", "message": "Fix generate passenger list, add balance constraint (commented out\nsince it cause Drools Exception)", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "3d625d20d881d1632d3c55e8b5e39b8777cf29db", "url": "https://github.com/kiegroup/kogito-examples/commit/3d625d20d881d1632d3c55e8b5e39b8777cf29db", "message": "Renamed solutionFactory, add a division by zero check", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "a5a067b5f6645f09c457d19c4042c87abe87e5af", "url": "https://github.com/kiegroup/kogito-examples/commit/a5a067b5f6645f09c457d19c4042c87abe87e5af", "message": "Commented out bad constraint, updated OptaPlanner version", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "ede8eaa827b61cfad33e2fbc3ea60b1dd85454d3", "url": "https://github.com/kiegroup/kogito-examples/commit/ede8eaa827b61cfad33e2fbc3ea60b1dd85454d3", "message": "Synchronize Optaplanner and Kogito Drools versions", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "66aa3db46dc86d9a80ea0a00aa315174571d80d0", "url": "https://github.com/kiegroup/kogito-examples/commit/66aa3db46dc86d9a80ea0a00aa315174571d80d0", "message": "Enabled and fix COG constraint (broken)", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "ba20756c1eaffb9e683cccf5920a2bd42509ae9b", "url": "https://github.com/kiegroup/kogito-examples/commit/ba20756c1eaffb9e683cccf5920a2bd42509ae9b", "message": "Fix Plane balance constraint", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "659f8c70545502a31d170b1ba6f643c924befbdf", "url": "https://github.com/kiegroup/kogito-examples/commit/659f8c70545502a31d170b1ba6f643c924befbdf", "message": "Add styles to button, use origin, destination and departure time\nfor flight title.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "a35509d1710aa8d7c7e0041d90a0610dbcbb2326", "url": "https://github.com/kiegroup/kogito-examples/commit/a35509d1710aa8d7c7e0041d90a0610dbcbb2326", "message": "Updated look of passenger list; keep flight order consistent", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "3b5c24f089ba6d924c0b3067724acb6a0da03e0d", "url": "https://github.com/kiegroup/kogito-examples/commit/3b5c24f089ba6d924c0b3067724acb6a0da03e0d", "message": "Use Event Subprocess to handle passenger requests.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "46f1977343fc7ceef0c6bf2c67ebe92cab9ca0fb", "url": "https://github.com/kiegroup/kogito-examples/commit/46f1977343fc7ceef0c6bf2c67ebe92cab9ca0fb", "message": "Add margins to buttons, flight seats, keep scroll position.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "d7e0407a54195c2aafe5440fc07ddd904a9b02aa", "url": "https://github.com/kiegroup/kogito-examples/commit/d7e0407a54195c2aafe5440fc07ddd904a9b02aa", "message": "Remove CreateFlightSeatAssignments BPMN as it only had one task", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "7f4df45b9c86b3baf6060dc8b016a550c6caf2e5", "url": "https://github.com/kiegroup/kogito-examples/commit/7f4df45b9c86b3baf6060dc8b016a550c6caf2e5", "message": "Replace existing components instead of clearing the screen, don't block\nwhen waiting for final solution, poll for best solution updates.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "49751f876470a030b26ee476e0acc5fddce91675", "url": "https://github.com/kiegroup/kogito-examples/commit/49751f876470a030b26ee476e0acc5fddce91675", "message": "Rearrange BPMN file to better showcase event/task relationships.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "7acb5118ee17c6231d49f608529a0fe54188d12d", "url": "https://github.com/kiegroup/kogito-examples/commit/7acb5118ee17c6231d49f608529a0fe54188d12d", "message": "Add heatmap, wait for requests to finish instead of relying on timers,\nuse unimprovedSpentLimit instead of spentLimit so larger datasets have\ntime to solve (without making smaller datasets wait for longer).", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "2ac9a95d743849fa4aab3e1d5c6a7e9ac1dde321", "url": "https://github.com/kiegroup/kogito-examples/commit/2ac9a95d743849fa4aab3e1d5c6a7e9ac1dde321", "message": "Disable unimproved-spent-limit since it also sets it on the\nconstruction heuristic.", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "2dfa5e5f80f308debb703a493c38bbc2c550f654", "url": "https://github.com/kiegroup/kogito-examples/commit/2dfa5e5f80f308debb703a493c38bbc2c550f654", "message": "Fix broken test", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "2b53c44ad30755b88793bbc8991b72ad1ca8b722", "url": "https://github.com/kiegroup/kogito-examples/commit/2b53c44ad30755b88793bbc8991b72ad1ca8b722", "message": "Fix dependencies and test after merge with master", "committedDate": "2020-03-06T15:19:54Z", "type": "commit"}, {"oid": "2b53c44ad30755b88793bbc8991b72ad1ca8b722", "url": "https://github.com/kiegroup/kogito-examples/commit/2b53c44ad30755b88793bbc8991b72ad1ca8b722", "message": "Fix dependencies and test after merge with master", "committedDate": "2020-03-06T15:19:54Z", "type": "forcePushed"}, {"oid": "42d0965c56f03a81ada62fd4e089bcfe5348fcc2", "url": "https://github.com/kiegroup/kogito-examples/commit/42d0965c56f03a81ada62fd4e089bcfe5348fcc2", "message": "Merge remote-tracking branch 'upstream/master' into flight-example", "committedDate": "2020-03-06T15:21:47Z", "type": "commit"}, {"oid": "ef5576357cbebb51f85796bbe42e979626201676", "url": "https://github.com/kiegroup/kogito-examples/commit/ef5576357cbebb51f85796bbe42e979626201676", "message": "Added a README for the flight example", "committedDate": "2020-03-06T20:38:25Z", "type": "commit"}, {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901", "url": "https://github.com/kiegroup/kogito-examples/commit/1a27e29caff54c3a3243ee0add42185629a0b901", "message": "Added missing \"/rest\" prefix to README", "committedDate": "2020-03-06T22:04:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389491481", "bodyText": "@Christopher-Chianelli Please use the latest Final version, so 7.33.0.Final. You can look that up here:\nhttps://mvnrepository.com/artifact/org.optaplanner/optaplanner-core\nThere are a few bigger discussions here - such as kogito vs optaplanner versioning - as well as kogito-examples vs quarkus-quickstarts (that doesn't use SNAPSHOTs at all on master to make it easy for users to play with it) - but those are out of scope for this PR.", "author": "ge0ffrey", "createdAt": "2020-03-09T07:12:07Z", "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTA5Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389555096", "bodyText": "AFAIK Kogito has a reference to the latest droolsjbpm. We should use that, instead of hard-coding a version.", "author": "triceo", "createdAt": "2020-03-09T09:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNzM2OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389737369", "bodyText": "@triceo That property was removed from the kogito-examples parent pom recently; I was using it, and then discovered it was removed after I merge changes from master.", "author": "Christopher-Chianelli", "createdAt": "2020-03-09T14:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjUzNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389492536", "bodyText": "JavaEE is being replaced by JakartaEE. I'd expect this dependency to be replaced too. Also, it's probably not going to be a \"aggregate dependency\" but specifically the parts we need (for example only JPA, or only JAXB or only JPA and JAXB, etc).\nCan be done as a separate PR later.", "author": "ge0ffrey", "createdAt": "2020-03-09T07:16:12Z", "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-devtools</artifactId>\n+      <optional>true</optional>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-spring-boot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>javax</groupId>\n+      <artifactId>javaee-api</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <!-- Testing -->\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <!-- JavaScript libraries for frontend -->\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>webjars-locator</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>bootstrap</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>font-awesome</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>momentjs</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${springboot.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>javax</groupId>\n+        <artifactId>javaee-api</artifactId>", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MzI5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389493298", "bodyText": "@Christopher-Chianelli Is this the workaround for the lack of a solveAndListen method that has both a newBestSolution and finalBestSolution consumer?\nIn that case, add \"// TODO workaround for \"\n(Create an issue if it doesn't exist yet)", "author": "ge0ffrey", "createdAt": "2020-03-09T07:18:50Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDEwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389494101", "bodyText": "Almost nobody uses Java literal 2d. Use 2.0 instead.\nPS: For longs, put the L in capital (to avoid java puzzlers, see Josh Bloch's effictive java etc).", "author": "ge0ffrey", "createdAt": "2020-03-09T07:21:36Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/solver/FlightSeatingConstraintProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.kie.kogito.examples.solver;\n+\n+import org.kie.kogito.examples.domain.FlightInfo;\n+import org.kie.kogito.examples.domain.Passenger;\n+import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+import java.awt.geom.Point2D;\n+\n+public class FlightSeatingConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory factory) {\n+        return new Constraint[] {\n+                seatConflict(factory),\n+                emergencyExitRow(factory),\n+                seatTypePreference(factory),\n+                planeBalance(factory)\n+        };\n+    }\n+\n+    private Constraint seatConflict(ConstraintFactory factory) {\n+        return factory\n+                .fromUniquePair(Passenger.class, equal(Passenger::getSeat))\n+                .penalize(\"Seat conflict\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint emergencyExitRow(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().isEmergencyExitRow()\n+                        && !passenger.isEmergencyExitRowCapable())\n+                .penalize(\"Emergency exit row has incapable passenger\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint seatTypePreference(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().getSeatType().violatesPreference(\n+                        passenger.getSeatTypePreference()))\n+                .penalize(\"Seat type preference\", HardSoftScore.ONE_SOFT);\n+    }\n+\n+    private Constraint planeBalance(ConstraintFactory factory) {\n+        return factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getColumn()))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getRow())))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.count()))\n+                .join(FlightInfo.class)\n+                .penalize(\"Plane Balance\", HardSoftScore.ONE_SOFT, (totalX, totalY, passengerCount, flightInfo) -> {\n+                    double localTotalX = totalX - passengerCount * ((flightInfo.getSeatColumnSize() / 2d) - 0.5);", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTcxOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389555718", "bodyText": "AFAIK, paid is the proper English past tense for pay.", "author": "triceo", "createdAt": "2020-03-09T09:51:41Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Passenger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.entity.PlanningPin;\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+import org.optaplanner.core.api.domain.variable.PlanningVariable;\n+\n+@PlanningEntity\n+public class Passenger {\n+\n+    @PlanningId\n+    private Long id;\n+\n+    private String name;\n+    // Sometimes null\n+    private SeatType seatTypePreference;\n+    // At least 15 years old, sufficient mobility, strength and dexterity to assist in an evacuation.\n+    private boolean emergencyExitRowCapable;\n+    @PlanningPin\n+    private boolean payedForSeat;", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1NDYxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389754613", "bodyText": "Yes, despite payed also being an English past tense for pay (but only for ships!)", "author": "Christopher-Chianelli", "createdAt": "2020-03-09T15:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODY5Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389558693", "bodyText": "No this in this case?\nAlso, it took me a while to figure out what Character.toString((char) ('A' + column)); actually does. Either replace with a switch or at least add a comment explaining that it assigns seat A-F based on the column number.", "author": "triceo", "createdAt": "2020-03-09T09:57:20Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private String name;\n+    private int row;\n+    private int column;\n+    private SeatType seatType;\n+    private boolean emergencyExitRow;\n+\n+    public Seat() {\n+    }\n+\n+    public Seat(int row, int column, SeatType seatType, boolean emergencyExitRow) {\n+        this.row = row;\n+        this.column = column;\n+        name = (row + 1) + Character.toString((char) ('A' + column));", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MTcwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389571701", "bodyText": "+1 for the comment\n-1 for the switch as it can have up to 26 cases :)", "author": "ge0ffrey", "createdAt": "2020-03-09T10:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1OTcwMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389559702", "bodyText": "I'd add equals() and hashCode() here. Since this class is immutable, its instances should be considered equal where possible.", "author": "triceo", "createdAt": "2020-03-09T09:59:07Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1OTg3MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389559871", "bodyText": "Since this class is immutable, all of these could be final.", "author": "triceo", "createdAt": "2020-03-09T09:59:25Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private String name;\n+    private int row;\n+    private int column;\n+    private SeatType seatType;\n+    private boolean emergencyExitRow;", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4OTUwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389589501", "bodyText": "small typo in path => 2 /", "author": "radtriste", "createdAt": "2020-03-09T10:58:26Z", "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,323 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`\n+when the application is running.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+\n+You will need:\n+  - Java 1.8.0+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.5.4+ installed\n+\n+## Installing and Running\n+\n+```\n+mvn clean package spring-boot:run    \n+```\n+\n+## Swagger documentation\n+\n+You can take a look at the [swagger definition](http://localhost:8080/docs/swagger.json) - automatically generated and included in this service - to determine all available operations exposed by this service.  For easy readability you can visualize the swagger definition file using a swagger UI like for example available [here](https://editor.swagger.io). In addition, various clients to interact with this service can be easily generated using this swagger definition.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can access the UI at `localhost:8080` or use\n+the following examples to interact with the service.\n+\n+### POST  /rest/flights\n+\n+Allows to create a new flight with the given data:\n+\n+```sh\n+curl -d '{ \"params\": { \"origin\" : \"JFK\", \"destination\": \"SFO\", \"departureDateTime\": \"2020-01-01T12:00\", \"seatRowSize\": 8, \"seatColumnSize\": 6 } }' -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+or on windows\n+\n+```sh\n+curl -d \"{\\\"params\\\": { \\\"origin\\\" : \\\"JFK\\\", \\\"destination\\\": \\\"SFO\\\", \\\"departureDateTime\\\": \\\"2020-01-01T12:00\\\", \\\"seatRowSize\\\": 8, \\\"seatColumnSize\\\": 6 }}\" -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+\n+As response the created flight is returned (in field \"flight\").\n+Example response:\n+```json\n+{\n+  \"id\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"flight\":{\n+    \"flightInfo\":{\n+      \"origin\":\"YYZ\",\n+      \"destination\":\"KRND\",\n+      \"departureDateTime\":{...},\n+      \"seatRowSize\":1,\n+      \"seatColumnSize\":1\n+      },\n+    \"seatList\":[{\"name\":\"1A\",\"row\":0,\"column\":0,\"seatType\":\"WINDOW\",\"emergencyExitRow\":false}],\n+    \"passengerList\":[],\n+    \"score\":null,\n+    \"origin\":\"YYZ\",\n+    \"seatColumnSize\":6,\n+    \"seatRowSize\":4,\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":{...}\n+    },\n+  \"isSolving\":true,\n+  \"processId\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"params\":{\n+    \"origin\":\"YYZ\",\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":\"2020-03-06T20:19:49.240\",\n+    \"seatRowSize\":4,\n+    \"seatColumnSize\":6\n+  },\n+  \"isPassengerListFinalized\":false\n+}\n+```\n+\n+### GET  /rest/flights\n+\n+Returns list of flights currently being scheduled:\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights\n+```\n+\n+As response an array of flights is returned.\n+\n+### GET  /rest/flight/{id}\n+\n+Returns flight with given id (if being scheduled):\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0\n+```\n+\n+As response a single flight is returned if found, otherwise no content (204) is returned.\n+\n+### DELETE /rest/flights/{id}\n+\n+Cancels flight with given id\n+\n+```sh\n+curl -X DELETE http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0\n+```\n+\n+### GET /rest/flights/{id}/tasks\n+\n+Get user tasks that currently require action for a flight.\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0/tasks\n+```\n+\n+Example response:\n+```json\n+{\n+  \"66c11e3e-c211-4cee-9a07-848b5e861bc5\": \"finalizePassengerList\",\n+  \"a2c11e3e-c211-4cee-9a07-848b5e861bc5\": \"finalizeSeatAssignment\",\n+  \"f4c11e3e-c211-4cee-9a07-848b5e861bc5\": \"approveDenyPassenger\"\n+}\n+```\n+\n+### POST /rest//flights/{id}/newPassengerRequest", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MDcyOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389590728", "bodyText": "In all curl commands with an id, I would avoid putting an example id.\nInstead put a placeholder and tell the user to replace this placeholder.", "author": "radtriste", "createdAt": "2020-03-09T11:01:02Z", "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,323 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`\n+when the application is running.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+\n+You will need:\n+  - Java 1.8.0+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.5.4+ installed\n+\n+## Installing and Running\n+\n+```\n+mvn clean package spring-boot:run    \n+```\n+\n+## Swagger documentation\n+\n+You can take a look at the [swagger definition](http://localhost:8080/docs/swagger.json) - automatically generated and included in this service - to determine all available operations exposed by this service.  For easy readability you can visualize the swagger definition file using a swagger UI like for example available [here](https://editor.swagger.io). In addition, various clients to interact with this service can be easily generated using this swagger definition.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can access the UI at `localhost:8080` or use\n+the following examples to interact with the service.\n+\n+### POST  /rest/flights\n+\n+Allows to create a new flight with the given data:\n+\n+```sh\n+curl -d '{ \"params\": { \"origin\" : \"JFK\", \"destination\": \"SFO\", \"departureDateTime\": \"2020-01-01T12:00\", \"seatRowSize\": 8, \"seatColumnSize\": 6 } }' -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+or on windows\n+\n+```sh\n+curl -d \"{\\\"params\\\": { \\\"origin\\\" : \\\"JFK\\\", \\\"destination\\\": \\\"SFO\\\", \\\"departureDateTime\\\": \\\"2020-01-01T12:00\\\", \\\"seatRowSize\\\": 8, \\\"seatColumnSize\\\": 6 }}\" -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+\n+As response the created flight is returned (in field \"flight\").\n+Example response:\n+```json\n+{\n+  \"id\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"flight\":{\n+    \"flightInfo\":{\n+      \"origin\":\"YYZ\",\n+      \"destination\":\"KRND\",\n+      \"departureDateTime\":{...},\n+      \"seatRowSize\":1,\n+      \"seatColumnSize\":1\n+      },\n+    \"seatList\":[{\"name\":\"1A\",\"row\":0,\"column\":0,\"seatType\":\"WINDOW\",\"emergencyExitRow\":false}],\n+    \"passengerList\":[],\n+    \"score\":null,\n+    \"origin\":\"YYZ\",\n+    \"seatColumnSize\":6,\n+    \"seatRowSize\":4,\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":{...}\n+    },\n+  \"isSolving\":true,\n+  \"processId\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"params\":{\n+    \"origin\":\"YYZ\",\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":\"2020-03-06T20:19:49.240\",\n+    \"seatRowSize\":4,\n+    \"seatColumnSize\":6\n+  },\n+  \"isPassengerListFinalized\":false\n+}\n+```\n+\n+### GET  /rest/flights\n+\n+Returns list of flights currently being scheduled:\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights\n+```\n+\n+As response an array of flights is returned.\n+\n+### GET  /rest/flight/{id}", "originalCommit": "1a27e29caff54c3a3243ee0add42185629a0b901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "786a26c435b98de77ac3df4fbad3b684dedf97a9", "url": "https://github.com/kiegroup/kogito-examples/commit/786a26c435b98de77ac3df4fbad3b684dedf97a9", "message": "Add comments, fix minor typos in README, change payedForSeat -> paidForSeat", "committedDate": "2020-03-09T15:42:31Z", "type": "commit"}, {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73", "url": "https://github.com/kiegroup/kogito-examples/commit/8ccda51c379e938fabaa87297d9e66a4d9419d73", "message": "payedForSeat -> paidForSeat in README", "committedDate": "2020-03-09T17:26:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDc0NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390444745", "bodyText": "\"A UI\" ?", "author": "evacchi", "createdAt": "2020-03-10T16:27:04Z", "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,341 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`", "originalCommit": "8ccda51c379e938fabaa87297d9e66a4d9419d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODA0Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390458046", "bodyText": "\"U\" sounds like \"You-I\", so \"a\" instead of \"an\" (although \"u\" a vowel, and \"an\" is typically used for vowels; nice catch).", "author": "Christopher-Chianelli", "createdAt": "2020-03-10T16:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NTk3Mg==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390445972", "bodyText": "is this supposed to be a comment for end users?", "author": "evacchi", "createdAt": "2020-03-10T16:28:43Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka", "originalCommit": "8ccda51c379e938fabaa87297d9e66a4d9419d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODk3Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390458976", "bodyText": "A comment for myself mostly, can be removed or tweaked to \"can also use Kafka messages\"", "author": "Christopher-Chianelli", "createdAt": "2020-03-10T16:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTkzOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390449939", "bodyText": "Is it really necessary to spawn a bare thread here? I think you may want to use some Spring facility for async scheduling", "author": "evacchi", "createdAt": "2020-03-10T16:34:32Z", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // TODO: Workaround for https://issues.redhat.com/browse/PLANNER-1868\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {", "originalCommit": "8ccda51c379e938fabaa87297d9e66a4d9419d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjQ5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390456498", "bodyText": "(I think you should @Autowire a TaskExecutor or an ExecutorService)", "author": "evacchi", "createdAt": "2020-03-10T16:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTQzMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390451430", "bodyText": "in kogito this file should be unnecessary", "author": "evacchi", "createdAt": "2020-03-10T16:36:39Z", "path": "jbpm-optaplanner-springboot-example/src/main/resources/META-INF/kmodule.xml", "diffHunk": "@@ -0,0 +1 @@\n+<kmodule xmlns=\"http://www.drools.org/xsd/kmodule\"/>", "originalCommit": "8ccda51c379e938fabaa87297d9e66a4d9419d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5085ce20da841476f63ab70122fdec82e3405777", "url": "https://github.com/kiegroup/kogito-examples/commit/5085ce20da841476f63ab70122fdec82e3405777", "message": "Fix grammar, use task executor for siginaling end, remove unrequired kmodule.", "committedDate": "2020-03-10T18:31:32Z", "type": "commit"}, {"oid": "b26f5df4767a3f81020aaa7af4dbfcb9882ddcbb", "url": "https://github.com/kiegroup/kogito-examples/commit/b26f5df4767a3f81020aaa7af4dbfcb9882ddcbb", "message": "Merge branch 'master' into flight-example", "committedDate": "2020-03-13T14:33:02Z", "type": "commit"}, {"oid": "62ee225e5683b22e69776e29312e209e52cc060e", "url": "https://github.com/kiegroup/kogito-examples/commit/62ee225e5683b22e69776e29312e209e52cc060e", "message": "PLANNER-1906: Flight Example Enhancements and merge fixes.", "committedDate": "2020-03-13T14:57:54Z", "type": "commit"}]}