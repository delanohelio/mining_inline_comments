{"pr_number": 276, "pr_title": "Introduce new Items Model", "pr_createdAt": "2020-01-25T00:49:17Z", "pr_url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276", "timeline": [{"oid": "b68f62708bd5c117da548b2f91a6442e2e826928", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/b68f62708bd5c117da548b2f91a6442e2e826928", "message": "Introduce new Items Model", "committedDate": "2020-01-25T00:45:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370933789", "bodyText": "I would prefer it like this, or is there a reason the visitor pattern would be better in this case?\nfragment = when(lifted) {\n\tis Episode -> EpisodeDetailsFragment(lifted)\n\telse -> TODO()\n}", "author": "nielsvanvelzen", "createdAt": "2020-01-25T13:33:36Z", "path": "app/src/main/java/org/jellyfin/androidtv/details/DetailsActivity.kt", "diffHunk": "@@ -33,14 +29,13 @@ class DetailsActivity : FragmentActivity() {\n \n \t\tGlobalScope.launch(Dispatchers.Main) {\n \t\t\tval baseItem = getBaseItemDtoForID(id) ?: return@launch\n+\t\t\tval lifted = baseItem.liftToNewFormat()\n \n-\t\t\tfragment = when (baseItem.baseItemType!!) {\n-\t\t\t\tBaseItemType.Episode -> {\n-\t\t\t\t\tval episode = baseItem.asEpisode()\n-\t\t\t\t\tEpisodeDetailsFragment(episode)\n+\t\t\tlifted.acceptVisitor(object : IBaseItemVisitor {\n+\t\t\t\toverride fun visit(item: Episode) {\n+\t\t\t\t\tfragment = EpisodeDetailsFragment(item)\n \t\t\t\t}\n-\t\t\t\telse -> TODO()\n-\t\t\t}\n+\t\t\t})", "originalCommit": "b68f62708bd5c117da548b2f91a6442e2e826928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MTU0OQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370941549", "bodyText": "It forces you to notice where you missed some changes when a new Item type is introduced, as the interface changes and you have to adjust it everywhere.", "author": "AndreasGB", "createdAt": "2020-01-25T16:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MjAxOQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370942019", "bodyText": "Did some quick searching and it seems like using sealed classes is a way to do it \"the kotlin way\". It would look basically the same as my example except for the fact that there is no \"else\" block.\n\nhttps://kotlinlang.org/docs/reference/sealed-classes.html\nhttps://stackoverflow.com/questions/33602705/best-way-to-implement-visitor-pattern-in-kotlin", "author": "nielsvanvelzen", "createdAt": "2020-01-25T16:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ=="}], "type": "inlineReview"}, {"oid": "3bef4dc8ae389bf37359d49fd903c69d7fc4c26c", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/3bef4dc8ae389bf37359d49fd903c69d7fc4c26c", "message": "Refactor out PlayableItem", "committedDate": "2020-01-25T16:21:43Z", "type": "commit"}, {"oid": "cff3d84e258141b5f268567a2b5eaded4e3971cc", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/cff3d84e258141b5f268567a2b5eaded4e3971cc", "message": "Refactor item types to usage of sealed classes", "committedDate": "2020-01-25T18:42:54Z", "type": "forcePushed"}, {"oid": "cff3d84e258141b5f268567a2b5eaded4e3971cc", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/cff3d84e258141b5f268567a2b5eaded4e3971cc", "message": "Refactor item types to usage of sealed classes", "committedDate": "2020-01-25T18:42:54Z", "type": "commit"}]}