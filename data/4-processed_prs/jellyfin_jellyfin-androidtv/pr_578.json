{"pr_number": 578, "pr_title": "Login redesign", "pr_createdAt": "2020-09-30T21:40:56Z", "pr_url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjU2MQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r499842561", "bodyText": "FYI; The next apiclient version doesn't provide a serializer anymore, and if it did it would not use GSON but kotlinx.serialization. I'd recommend switching to kotlinx.serialization in this PR for all new JSON stuff.\nOptionally; it also supports CBOR which might have slightly better performance.", "author": "nielsvanvelzen", "createdAt": "2020-10-05T20:07:45Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/source/JsonFileSource.kt", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.jellyfin.androidtv.data.source\n+\n+import android.content.Context\n+import org.jellyfin.apiclient.serialization.GsonJsonSerializer\n+import timber.log.Timber\n+import java.io.FileNotFoundException\n+\n+open class JsonFileSource<T>(\n+\tprivate val context : Context,\n+\tprivate val fileName : String,\n+\tprivate val serializer : GsonJsonSerializer,\n+\tprivate val clazz : Class<T>\n+) {\n+\tfun read() : T? {\n+\t\ttry {\n+\t\t\tcontext.openFileInput(fileName).use {\n+\t\t\t\tval data = it.readBytes()\n+\t\t\t\t\t.toString(Charsets.UTF_8)\n+\n+\t\t\t\treturn serializer.DeserializeFromString(data, clazz)", "originalCommit": "7a37d0056323f63a735ef82d246f5a74c9f5675a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "df47c62a460331f8810135d36afa1b26d1566927", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/df47c62a460331f8810135d36afa1b26d1566927", "message": "Add toolbar to server list screen", "committedDate": "2020-10-06T18:48:47Z", "type": "forcePushed"}, {"oid": "02d6d48704e9f79891caf352ed989aceabf5f930", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/02d6d48704e9f79891caf352ed989aceabf5f930", "message": "Add toolbar to server list screen", "committedDate": "2020-10-06T20:44:39Z", "type": "forcePushed"}, {"oid": "6b0845224d181432c4ed65873082dbca9752a471", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/6b0845224d181432c4ed65873082dbca9752a471", "message": "Fix padding on server list", "committedDate": "2020-10-08T02:43:11Z", "type": "forcePushed"}, {"oid": "375a645b11a248aeb31523097692fbf20aede1b0", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/375a645b11a248aeb31523097692fbf20aede1b0", "message": "Remove unused import", "committedDate": "2020-10-08T13:00:04Z", "type": "forcePushed"}, {"oid": "ade4041c2880182a96f6d8f651c8f22d5250a366", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/ade4041c2880182a96f6d8f651c8f22d5250a366", "message": "Test Codacy ignore", "committedDate": "2020-10-12T18:45:37Z", "type": "forcePushed"}, {"oid": "2bede1667c80c54f012eb65cd9aab43f76228e84", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/2bede1667c80c54f012eb65cd9aab43f76228e84", "message": "Test Codacy ignore", "committedDate": "2020-10-14T19:18:36Z", "type": "forcePushed"}, {"oid": "3f64fd67e22f8c2517ada623759ea1b814f32e58", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/3f64fd67e22f8c2517ada623759ea1b814f32e58", "message": "Test Codacy ignore", "committedDate": "2020-10-14T19:26:33Z", "type": "forcePushed"}, {"oid": "eb855e0a0be85afae054e974be3c1474e5303388", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/eb855e0a0be85afae054e974be3c1474e5303388", "message": "Use local serializer for JsonFileSource", "committedDate": "2020-10-15T13:43:33Z", "type": "forcePushed"}, {"oid": "487ddc902afdd35e7cedf4a741548720bcfb6370", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/487ddc902afdd35e7cedf4a741548720bcfb6370", "message": "Add UserConfiguration and UserPolicy models", "committedDate": "2020-10-22T14:28:38Z", "type": "forcePushed"}, {"oid": "df797644d117aa3b5121c93abebf675b326a41b2", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/df797644d117aa3b5121c93abebf675b326a41b2", "message": "Suppress warnings", "committedDate": "2020-10-23T13:25:12Z", "type": "forcePushed"}, {"oid": "d419344405b469bb9a97fd3745e19487903a27c7", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/d419344405b469bb9a97fd3745e19487903a27c7", "message": "Suppress warnings", "committedDate": "2020-10-23T17:03:40Z", "type": "forcePushed"}, {"oid": "f28400b0822024a9c4c869313c124b66e87eef5d", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/f28400b0822024a9c4c869313c124b66e87eef5d", "message": "Suppress warnings", "committedDate": "2020-10-27T02:34:10Z", "type": "forcePushed"}, {"oid": "f12e4f8679c75103fb5441d863a2b27aed7fe5cf", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/f12e4f8679c75103fb5441d863a2b27aed7fe5cf", "message": "Fix formatting", "committedDate": "2020-10-29T02:49:41Z", "type": "forcePushed"}, {"oid": "24d7eebd187339999c091054df406bec41fb6b6c", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/24d7eebd187339999c091054df406bec41fb6b6c", "message": "Add loading state to server list", "committedDate": "2020-11-04T16:18:58Z", "type": "forcePushed"}, {"oid": "3158bbee175f01f652bd966c281dd1d72274a074", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/3158bbee175f01f652bd966c281dd1d72274a074", "message": "Prevent submission of empty login forms", "committedDate": "2020-11-05T14:46:12Z", "type": "forcePushed"}, {"oid": "fed1cac0956c999cdf92a5d3f8f164c215ef531d", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/fed1cac0956c999cdf92a5d3f8f164c215ef531d", "message": "Remove hardcoded strings", "committedDate": "2020-11-05T16:47:04Z", "type": "forcePushed"}, {"oid": "cc752f489daaa78cb1a68e21d4d10291dede076a", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/cc752f489daaa78cb1a68e21d4d10291dede076a", "message": "Rewrite login flow\n\nRewrite auth to use mvvm and koin\n\nAdd add server button\n\nAdd catch for null ServerInfo in legacy saved credentials\n\nFix resource leaking in JsonFileSource\n\nEnable improved logging for resource leaking\n\nAdd new login flow\n\nUse KeyboardFocusChangeListener for handling keyboard hiding\n\nFix codacy issues\n\nAdd toolbar to server list screen\n\nFix padding on server list\n\nRemove unused import\n\nFix back navigation in MainActivity\n\nFix crash due to missing ServerInfo\n\nConvert StartupActivity to Kotlin\n\nMove add server button to toolbar\n\nFix window not resizing in user login fragment\n\nAdd hints for username and password fields\n\nFix codacy issues\n\nRemove old comment\n\nRemove old login code\n\nTest Codacy ignore\n\nUse local serializer for JsonFileSource\n\nFix codacy issues\n\nMove gson instance to koin module\n\nAdd prefill for username in login fragment\n\nAdd equals overrides for User and Server models\n\nUpdate blank server name check\n\nAdd UserConfiguration and UserPolicy models\n\nMove resource debug logging to JellyfinApplication\n\nSuppress warnings\n\nFix formatting\n\nAdd loading state to server list\n\nPrevent submission of empty login forms\n\nAdd basic error handling for invalid login\n\nSuppress exception handling warnings\n\nRemove hardcoded strings", "committedDate": "2020-11-05T18:03:57Z", "type": "forcePushed"}, {"oid": "e005c974e86dde1d5084aebab30e84f403a953d3", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/e005c974e86dde1d5084aebab30e84f403a953d3", "message": "Fix some login test feedback", "committedDate": "2020-11-06T22:20:48Z", "type": "forcePushed"}, {"oid": "f07c46674b8e7a6586f3750fafb9bb4728789acd", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/f07c46674b8e7a6586f3750fafb9bb4728789acd", "message": "Fix some login test feedback", "committedDate": "2020-11-07T05:10:45Z", "type": "forcePushed"}, {"oid": "eee0d1a671256da1c34034a987b8d48534d7e048", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/eee0d1a671256da1c34034a987b8d48534d7e048", "message": "Fix some login test feedback", "committedDate": "2020-11-07T05:25:44Z", "type": "forcePushed"}, {"oid": "33abd60eb00e3ebc049f40068d99b77e04451363", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/33abd60eb00e3ebc049f40068d99b77e04451363", "message": "Rewrite login flow\n\nRewrite auth to use mvvm and koin\n\nAdd add server button\n\nAdd catch for null ServerInfo in legacy saved credentials\n\nFix resource leaking in JsonFileSource\n\nEnable improved logging for resource leaking\n\nAdd new login flow\n\nUse KeyboardFocusChangeListener for handling keyboard hiding\n\nFix codacy issues\n\nAdd toolbar to server list screen\n\nFix padding on server list\n\nRemove unused import\n\nFix back navigation in MainActivity\n\nFix crash due to missing ServerInfo\n\nConvert StartupActivity to Kotlin\n\nMove add server button to toolbar\n\nFix window not resizing in user login fragment\n\nAdd hints for username and password fields\n\nFix codacy issues\n\nRemove old comment\n\nRemove old login code\n\nTest Codacy ignore\n\nUse local serializer for JsonFileSource\n\nFix codacy issues\n\nMove gson instance to koin module\n\nAdd prefill for username in login fragment\n\nAdd equals overrides for User and Server models\n\nUpdate blank server name check\n\nAdd UserConfiguration and UserPolicy models\n\nMove resource debug logging to JellyfinApplication\n\nSuppress warnings\n\nFix formatting\n\nAdd loading state to server list\n\nPrevent submission of empty login forms\n\nAdd basic error handling for invalid login\n\nSuppress exception handling warnings\n\nRemove hardcoded strings", "committedDate": "2020-11-07T05:52:27Z", "type": "commit"}, {"oid": "e688d55666db9c1936ef4ef660bb50dde6e14d74", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/e688d55666db9c1936ef4ef660bb50dde6e14d74", "message": "Fix some login test feedback", "committedDate": "2020-11-07T05:52:27Z", "type": "commit"}, {"oid": "e688d55666db9c1936ef4ef660bb50dde6e14d74", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/e688d55666db9c1936ef4ef660bb50dde6e14d74", "message": "Fix some login test feedback", "committedDate": "2020-11-07T05:52:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NzM5NQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519157395", "bodyText": "You can pass the layout-id to fragments and use the default onCreateView function like so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class SplashFragment : Fragment() {\n          \n          \n            \n            \toverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n          \n          \n            \n            \t\treturn inflater.inflate(R.layout.fragment_startup, container, false)\n          \n          \n            \n            \t}\n          \n          \n            \n            }\n          \n          \n            \n            class SplashFragment : Fragment(R.layout.fragment_startup)", "author": "nielsvanvelzen", "createdAt": "2020-11-07T09:26:56Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/SplashFragment.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.fragment.app.Fragment\n+import org.jellyfin.androidtv.R\n+\n+class SplashFragment : Fragment() {\n+\toverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+\t\treturn inflater.inflate(R.layout.fragment_startup, container, false)\n+\t}\n+}", "originalCommit": "e688d55666db9c1936ef4ef660bb50dde6e14d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyOTk2OQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519929969", "bodyText": "\ud83d\udc4d Should be fixed in any classes added here.", "author": "thornbill", "createdAt": "2020-11-09T16:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NzM5NQ=="}], "type": "inlineReview"}, {"oid": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/83d5c0a4f13f6340d6b67a0062fad657e30e7064", "message": "Fix review feedback", "committedDate": "2020-11-09T16:08:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMzA2MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519933060", "bodyText": "I think this activity now works fine on portrait mode as well.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:13:12Z", "path": "app/src/main/AndroidManifest.xml", "diffHunk": "@@ -41,7 +42,8 @@\n             android:label=\"@string/app_name\"\n             android:logo=\"@drawable/app_logo\"\n             android:noHistory=\"true\"\n-            android:screenOrientation=\"landscape\">\n+            android:screenOrientation=\"landscape\"", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2MjQ5NQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522262495", "bodyText": "It almost works... except the \"Add Server\" button is collapsed to nothing lol", "author": "thornbill", "createdAt": "2020-11-12T16:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMzA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNTY3MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519935670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            data class LoadingState private constructor(val status: Status, val message: String? = null){\n          \n          \n            \n            data class LoadingState private constructor(val status: Status, val message: String? = null) {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            data class LoadingState private constructor(val status: Status, val message: String? = null){\n          \n          \n            \n            data class LoadingState private constructor(\n          \n          \n            \n            \tval status: Status,\n          \n          \n            \n            \tval message: String? = null\n          \n          \n            \n            ) {", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:16:51Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/LoadingState.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.jellyfin.androidtv.data.model\n+\n+data class LoadingState private constructor(val status: Status, val message: String? = null){", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzODI2Ng==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519938266", "bodyText": "Also, no need to make it private as the .copy() function allows changing the values anyway", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNTY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNzg3MQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519937871", "bodyText": "Wouldn't it make more sense to store the string id and getString() it on the display location if it's for UI only?", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:19:55Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/LoadingState.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.jellyfin.androidtv.data.model\n+\n+data class LoadingState private constructor(val status: Status, val message: String? = null){\n+\tcompanion object {\n+\t\tval PENDING = LoadingState(Status.PENDING)\n+\t\tval LOADING = LoadingState(Status.LOADING)\n+\t\tval SUCCESS = LoadingState(Status.SUCCESS)\n+\t\tfun error(msg: String? = null) = LoadingState(Status.ERROR, msg)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzOTA1Mw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519939053", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tval SUCCESS = LoadingState(Status.SUCCESS)\n          \n          \n            \n            \t\tfun error(msg: String? = null) = LoadingState(Status.ERROR, msg)\n          \n          \n            \n            \t\tval SUCCESS = LoadingState(Status.SUCCESS)\n          \n          \n            \n            \t\tval ERROR = LoadingState(Status.ERROR)\n          \n          \n            \n            \t\tfun error(msg: String = null) = LoadingState(Status.ERROR, msg)\n          \n      \n    \n    \n  \n\nAdd a constant for error without message", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:21:28Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/LoadingState.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.jellyfin.androidtv.data.model\n+\n+data class LoadingState private constructor(val status: Status, val message: String? = null){\n+\tcompanion object {\n+\t\tval PENDING = LoadingState(Status.PENDING)\n+\t\tval LOADING = LoadingState(Status.LOADING)\n+\t\tval SUCCESS = LoadingState(Status.SUCCESS)\n+\t\tfun error(msg: String? = null) = LoadingState(Status.ERROR, msg)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0MzcyMA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519943720", "bodyText": "Might be better to make a separate \"LegacyServer\" class for the deprecated properties that is only used to migrate, that way the properties don't exist in the new class.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:27:40Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/Server.kt", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.jellyfin.androidtv.data.model\n+\n+import java.util.*\n+\n+/**\n+ * Server model to use locally in place of ServerInfo model in ApiClient.\n+ */\n+data class Server(", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NDE1Mw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519944153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \toverride fun equals(other: Any?) = (other is Server) && id == other.id && address == other.address\n          \n          \n            \n            \toverride fun equals(other: Any?) = other is Server && id == other.id && address == other.address", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:28:18Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/Server.kt", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.jellyfin.androidtv.data.model\n+\n+import java.util.*\n+\n+/**\n+ * Server model to use locally in place of ServerInfo model in ApiClient.\n+ */\n+data class Server(\n+\tvar id: String,\n+\tvar name: String,\n+\tvar address: String,\n+\t@Deprecated(\"This is only used for legacy stored credentials\")\n+\tval userId: String? = null,\n+\t@Deprecated(\"This is only used for legacy stored credentials\")\n+\tval accessToken: String? = null,\n+\tval dateLastAccessed: Date = Date(0)\n+) {\n+\toverride fun equals(other: Any?) = (other is Server) && id == other.id && address == other.address", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NDY5MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519944690", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \toverride fun equals(other: Any?) = (other is User)\n          \n          \n            \n            \toverride fun equals(other: Any?) = other is User", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:29:04Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/User.kt", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.jellyfin.androidtv.data.model\n+\n+/**\n+ * User model to use locally in place of UserDto model in ApiClient.\n+ */\n+data class User(\n+\tval id: String,\n+\tval name: String,\n+\tval accessToken: String = \"\",\n+\tval serverId: String,\n+\tval primaryImageTag: String = \"\",\n+\tval hasPassword: Boolean = true,\n+\tval hasConfiguredPassword: Boolean = true,\n+\tval hasConfiguredEasyPassword: Boolean = false,\n+\tval configuration: UserConfiguration = UserConfiguration(),\n+\tval policy: UserPolicy = UserPolicy()\n+) {\n+\toverride fun equals(other: Any?) = (other is User)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0ODMwMQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519948301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            data class UserConfiguration(\n          \n          \n            \n            \tval latestItemsExcludes: Array<String> = emptyArray()\n          \n          \n            \n            ) {\n          \n          \n            \n            \toverride fun equals(other: Any?): Boolean {\n          \n          \n            \n            \t\tif (this === other) return true\n          \n          \n            \n            \t\tif (javaClass != other?.javaClass) return false\n          \n          \n            \n            \n          \n          \n            \n            \t\tother as UserConfiguration\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (!latestItemsExcludes.contentEquals(other.latestItemsExcludes)) return false\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn true\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \toverride fun hashCode() = latestItemsExcludes.contentHashCode()\n          \n          \n            \n            }\n          \n          \n            \n            data class UserConfiguration(\n          \n          \n            \n            \tval latestItemsExcludes: List<String> = emptyList()\n          \n          \n            \n            )\n          \n      \n    \n    \n  \n\nUsing a list will probably work and you don't need to implement equals/hashCode that way.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:34:08Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/UserConfiguration.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.jellyfin.androidtv.data.model\n+\n+/**\n+ * UserConfiguration model to use locally in place of UserConfiguration model in ApiClient.\n+ */\n+data class UserConfiguration(\n+\tval latestItemsExcludes: Array<String> = emptyArray()\n+) {\n+\toverride fun equals(other: Any?): Boolean {\n+\t\tif (this === other) return true\n+\t\tif (javaClass != other?.javaClass) return false\n+\n+\t\tother as UserConfiguration\n+\n+\t\tif (!latestItemsExcludes.contentEquals(other.latestItemsExcludes)) return false\n+\n+\t\treturn true\n+\t}\n+\n+\toverride fun hashCode() = latestItemsExcludes.contentHashCode()\n+}", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDU2NQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519950565", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tget() {\n          \n          \n            \n            \t\t\treturn if (currentServerUsersState.status == LoadingState.error().status) {\n          \n          \n            \n            \t\t\t\tcurrentServerUsersState\n          \n          \n            \n            \t\t\t} else if (discoveredServersUsersState.status == LoadingState.error().status) {\n          \n          \n            \n            \t\t\t\tdiscoveredServersUsersState\n          \n          \n            \n            \t\t\t} else if (savedServersUsersState.status == LoadingState.error().status) {\n          \n          \n            \n            \t\t\t\tsavedServersUsersState\n          \n          \n            \n            \t\t\t} else if (currentServerUsersState == LoadingState.LOADING ||\n          \n          \n            \n            \t\t\t\t\tdiscoveredServersUsersState == LoadingState.LOADING ||\n          \n          \n            \n            \t\t\t\t\tsavedServersUsersState == LoadingState.LOADING) {\n          \n          \n            \n            \t\t\t\tLoadingState.LOADING\n          \n          \n            \n            \t\t\t} else if (currentServerUsersState == LoadingState.SUCCESS ||\n          \n          \n            \n            \t\t\t\t\tdiscoveredServersUsersState == LoadingState.SUCCESS ||\n          \n          \n            \n            \t\t\t\t\tsavedServersUsersState == LoadingState.SUCCESS) {\n          \n          \n            \n            \t\t\t\tLoadingState.SUCCESS\n          \n          \n            \n            \t\t\t} else {\n          \n          \n            \n            \t\t\t\tLoadingState.PENDING\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tget() = when {\n          \n          \n            \n            \t\t\tcurrentServerUsersState.status == LoadingState.error().status -> currentServerUsersState\n          \n          \n            \n            \t\t\tdiscoveredServersUsersState.status == LoadingState.error().status -> discoveredServersUsersState\n          \n          \n            \n            \t\t\tsavedServersUsersState.status == LoadingState.error().status -> savedServersUsersState\n          \n          \n            \n            \t\t\tcurrentServerUsersState == LoadingState.LOADING || discoveredServersUsersState == LoadingState.LOADING || savedServersUsersState == LoadingState.LOADING -> LoadingState.LOADING\n          \n          \n            \n            \t\t\tcurrentServerUsersState == LoadingState.SUCCESS || discoveredServersUsersState == LoadingState.SUCCESS || savedServersUsersState == LoadingState.SUCCESS -> LoadingState.SUCCESS\n          \n          \n            \n            \t\t\telse -> LoadingState.PENDING\n          \n          \n            \n            \t\t}\n          \n      \n    \n    \n  \n\nreadability improves with\n\nexpression body\nwhen statement\n\nformatting on the LOADING/SUCCESS matches can be improved a bit though", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:37:23Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/ServerList.kt", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jellyfin.androidtv.data.model\n+\n+class ServerList(\n+\tvar currentServerUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar currentServerUsersState: LoadingState = LoadingState.PENDING,\n+\tvar discoveredServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar discoveredServersUsersState: LoadingState = LoadingState.PENDING,\n+\tvar savedServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar savedServersUsersState: LoadingState = LoadingState.PENDING\n+) {\n+\tval state: LoadingState\n+\t\tget() {\n+\t\t\treturn if (currentServerUsersState.status == LoadingState.error().status) {\n+\t\t\t\tcurrentServerUsersState\n+\t\t\t} else if (discoveredServersUsersState.status == LoadingState.error().status) {\n+\t\t\t\tdiscoveredServersUsersState\n+\t\t\t} else if (savedServersUsersState.status == LoadingState.error().status) {\n+\t\t\t\tsavedServersUsersState\n+\t\t\t} else if (currentServerUsersState == LoadingState.LOADING ||\n+\t\t\t\t\tdiscoveredServersUsersState == LoadingState.LOADING ||\n+\t\t\t\t\tsavedServersUsersState == LoadingState.LOADING) {\n+\t\t\t\tLoadingState.LOADING\n+\t\t\t} else if (currentServerUsersState == LoadingState.SUCCESS ||\n+\t\t\t\t\tdiscoveredServersUsersState == LoadingState.SUCCESS ||\n+\t\t\t\t\tsavedServersUsersState == LoadingState.SUCCESS) {\n+\t\t\t\tLoadingState.SUCCESS\n+\t\t\t} else {\n+\t\t\t\tLoadingState.PENDING\n+\t\t\t}\n+\t\t}", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDc2Nw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519950767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tval state: LoadingState\n          \n          \n            \n            \tval state", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:37:42Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/ServerList.kt", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jellyfin.androidtv.data.model\n+\n+class ServerList(\n+\tvar currentServerUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar currentServerUsersState: LoadingState = LoadingState.PENDING,\n+\tvar discoveredServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar discoveredServersUsersState: LoadingState = LoadingState.PENDING,\n+\tvar savedServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar savedServersUsersState: LoadingState = LoadingState.PENDING\n+) {\n+\tval state: LoadingState", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDkwOA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519950908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tval allServersUsers: Map<Server, List<User>>\n          \n          \n            \n            \tval allServersUsers", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:37:54Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/ServerList.kt", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jellyfin.androidtv.data.model\n+\n+class ServerList(\n+\tvar currentServerUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar currentServerUsersState: LoadingState = LoadingState.PENDING,\n+\tvar discoveredServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar discoveredServersUsersState: LoadingState = LoadingState.PENDING,\n+\tvar savedServersUsers: Map<Server, List<User>> = emptyMap(),\n+\tvar savedServersUsersState: LoadingState = LoadingState.PENDING\n+) {\n+\tval state: LoadingState\n+\t\tget() {\n+\t\t\treturn if (currentServerUsersState.status == LoadingState.error().status) {\n+\t\t\t\tcurrentServerUsersState\n+\t\t\t} else if (discoveredServersUsersState.status == LoadingState.error().status) {\n+\t\t\t\tdiscoveredServersUsersState\n+\t\t\t} else if (savedServersUsersState.status == LoadingState.error().status) {\n+\t\t\t\tsavedServersUsersState\n+\t\t\t} else if (currentServerUsersState == LoadingState.LOADING ||\n+\t\t\t\t\tdiscoveredServersUsersState == LoadingState.LOADING ||\n+\t\t\t\t\tsavedServersUsersState == LoadingState.LOADING) {\n+\t\t\t\tLoadingState.LOADING\n+\t\t\t} else if (currentServerUsersState == LoadingState.SUCCESS ||\n+\t\t\t\t\tdiscoveredServersUsersState == LoadingState.SUCCESS ||\n+\t\t\t\t\tsavedServersUsersState == LoadingState.SUCCESS) {\n+\t\t\t\tLoadingState.SUCCESS\n+\t\t\t} else {\n+\t\t\t\tLoadingState.PENDING\n+\t\t\t}\n+\t\t}\n+\n+\tval allServersUsers: Map<Server, List<User>>", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MTczOQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519951739", "bodyText": "Future PR?", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:39:06Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/repository/ServerRepository.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jellyfin.androidtv.data.repository\n+\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.source.CredentialsFileSource\n+import org.jellyfin.androidtv.util.apiclient.callApi\n+import org.jellyfin.androidtv.util.apiclient.toServer\n+import org.jellyfin.apiclient.Jellyfin\n+import org.jellyfin.apiclient.interaction.device.IDevice\n+import org.jellyfin.apiclient.model.system.PublicSystemInfo\n+import timber.log.Timber\n+\n+interface ServerRepository {\n+\tsuspend fun getServers(): List<Server>\n+\n+\tsuspend fun discoverServers(): List<Server>\n+\n+\tsuspend fun connect(address: String): Server\n+}\n+\n+class ServerRepositoryImpl(\n+\tprivate val jellyfin: Jellyfin,\n+\tprivate val device: IDevice,\n+\tprivate val credentialsFileSource: CredentialsFileSource\n+) : ServerRepository {\n+\toverride suspend fun getServers(): List<Server> {\n+\t\tval legacyCredentials = credentialsFileSource.read()\n+\t\tif (legacyCredentials?.server != null) {\n+\t\t\t// Augment saved ServerInfo with PublicSystemInfo\n+\t\t\tval api = jellyfin.createApi(serverAddress = legacyCredentials.server!!.address, device = device)\n+\t\t\tval systemInfo: PublicSystemInfo = callApi { callback ->\n+\t\t\t\tapi.GetPublicSystemInfoAsync(callback)\n+\t\t\t}\n+\t\t\tlegacyCredentials.server!!.apply {\n+\t\t\t\tname = systemInfo.serverName\n+\t\t\t\tid = systemInfo.id\n+\t\t\t}\n+\n+\t\t\treturn listOf(legacyCredentials.server!!)\n+\t\t}\n+\n+\t\t// TODO: Add new method of saving credentials", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwODM4Mw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522208383", "bodyText": "Yes \ud83d\ude04", "author": "thornbill", "createdAt": "2020-11-12T15:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MTczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1Mjk2NQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519952965", "bodyText": "The discover() function might takes a minute or two to complete starting from apiclient 1.0.0. I'd recommend converting from flow -> LiveData so each new server updates the list.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:40:48Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/repository/ServerRepository.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jellyfin.androidtv.data.repository\n+\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.source.CredentialsFileSource\n+import org.jellyfin.androidtv.util.apiclient.callApi\n+import org.jellyfin.androidtv.util.apiclient.toServer\n+import org.jellyfin.apiclient.Jellyfin\n+import org.jellyfin.apiclient.interaction.device.IDevice\n+import org.jellyfin.apiclient.model.system.PublicSystemInfo\n+import timber.log.Timber\n+\n+interface ServerRepository {\n+\tsuspend fun getServers(): List<Server>\n+\n+\tsuspend fun discoverServers(): List<Server>\n+\n+\tsuspend fun connect(address: String): Server\n+}\n+\n+class ServerRepositoryImpl(\n+\tprivate val jellyfin: Jellyfin,\n+\tprivate val device: IDevice,\n+\tprivate val credentialsFileSource: CredentialsFileSource\n+) : ServerRepository {\n+\toverride suspend fun getServers(): List<Server> {\n+\t\tval legacyCredentials = credentialsFileSource.read()\n+\t\tif (legacyCredentials?.server != null) {\n+\t\t\t// Augment saved ServerInfo with PublicSystemInfo\n+\t\t\tval api = jellyfin.createApi(serverAddress = legacyCredentials.server!!.address, device = device)\n+\t\t\tval systemInfo: PublicSystemInfo = callApi { callback ->\n+\t\t\t\tapi.GetPublicSystemInfoAsync(callback)\n+\t\t\t}\n+\t\t\tlegacyCredentials.server!!.apply {\n+\t\t\t\tname = systemInfo.serverName\n+\t\t\t\tid = systemInfo.id\n+\t\t\t}\n+\n+\t\t\treturn listOf(legacyCredentials.server!!)\n+\t\t}\n+\n+\t\t// TODO: Add new method of saving credentials\n+\n+\t\treturn emptyList()\n+\t}\n+\n+\toverride suspend fun discoverServers() = withContext(Dispatchers.IO) {\n+\t\tjellyfin.discovery.discover().toList().map { it.toServer() }", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwODk0NQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522208945", "bodyText": "That's less than ideal... it limits our ability to handle the case where users don't have a saved server, but can discover servers.", "author": "thornbill", "createdAt": "2020-11-12T15:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1Mjk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NzIzOA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522297238", "bodyText": "In my own network it completes in around 20 seconds, with the available servers showing up within a few seconds. But when it pings a server that doesn't exist it needs to wait for a timeout to happen.", "author": "nielsvanvelzen", "createdAt": "2020-11-12T17:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1Mjk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NDMzNg==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519954336", "bodyText": "Did you find out what the answer is? \ud83d\udc40", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:42:44Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/repository/UserRepository.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jellyfin.androidtv.data.repository\n+\n+import org.jellyfin.androidtv.data.model.LogonCredentials\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.data.source.CredentialsFileSource\n+import org.jellyfin.androidtv.util.apiclient.callApi\n+import org.jellyfin.androidtv.util.apiclient.getPublicUsers\n+import org.jellyfin.androidtv.util.apiclient.toServerInfo\n+import org.jellyfin.androidtv.util.apiclient.toUser\n+import org.jellyfin.apiclient.Jellyfin\n+import org.jellyfin.apiclient.interaction.ApiClient\n+import org.jellyfin.apiclient.interaction.device.IDevice\n+import org.jellyfin.apiclient.model.users.AuthenticationResult\n+\n+interface UserRepository {\n+\tsuspend fun getUsers(server: Server): List<User>\n+\n+\tsuspend fun login(server: Server, username: String, password: String): AuthenticationResult\n+}\n+\n+class UserRepositoryImpl(\n+\tprivate val jellyfin: Jellyfin,\n+\tprivate val apiClient: ApiClient,\n+\tprivate val device: IDevice,\n+\tprivate val credentialsFileSource: CredentialsFileSource\n+) : UserRepository {\n+\toverride suspend fun getUsers(server: Server): List<User> {\n+\t\tval api = jellyfin.createApi(serverAddress = server.address, device = device)\n+\t\treturn api.getPublicUsers()?.toList()?.map { it.toUser() } ?: emptyList()\n+\t}\n+\n+\toverride suspend fun login(server: Server, username: String, password: String): AuthenticationResult {\n+\t\t// TODO: Are both of these updates needed?", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwOTY2MQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522209661", "bodyText": "I did not and did not look into it too much since this will likely change anyway with the new apiclient implementation.", "author": "thornbill", "createdAt": "2020-11-12T15:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NDMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NjQ2Ng==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519956466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate val context: Context,\n          \n          \n            \n            \tprivate val serializer: Gson\n          \n          \n            \n            \tcontext: Context,\n          \n          \n            \n            \tserializer: Gson\n          \n      \n    \n    \n  \n\nNo need in storing them as they are only passed to the parent class.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:45:03Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/source/CredentialsFileSource.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.jellyfin.androidtv.data.source\n+\n+import android.content.Context\n+import com.google.gson.Gson\n+import org.jellyfin.androidtv.data.model.LogonCredentials\n+\n+const val CREDENTIALS_PATH = \"org.jellyfin.androidtv.login.json\"\n+\n+@Deprecated(\"Method of retrieving credentials stored in a legacy format\")\n+class CredentialsFileSource(\n+\tprivate val context: Context,\n+\tprivate val serializer: Gson", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1Nzc1MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519957750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tfun read(): T? {\n          \n          \n            \n            \t\ttry {\n          \n          \n            \n            \t\t\tcontext.openFileInput(fileName).use {\n          \n          \n            \n            \t\t\t\tval data = it.readBytes()\n          \n          \n            \n            \t\t\t\t\t.toString(Charsets.UTF_8)\n          \n          \n            \n            \n          \n          \n            \n            \t\t\t\treturn serializer.fromJson(data, clazz)\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t} catch (ex: FileNotFoundException) {\n          \n          \n            \n            \t\t\tTimber.e(ex, \"File %s not found\", fileName)\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn null\n          \n          \n            \n            \t}\n          \n          \n            \n            \tfun read(): T? = try {\n          \n          \n            \n            \t\tcontext.openFileInput(fileName).use {\n          \n          \n            \n            \t\t\tval data = it.readBytes().toString(Charsets.UTF_8)\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tserializer.fromJson(data, clazz)\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t} catch (ex: FileNotFoundException) {\n          \n          \n            \n            \t\tTimber.e(ex, \"File %s not found\", fileName)\n          \n          \n            \n            \t\tnull\n          \n          \n            \n            \t}", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:46:12Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/source/JsonFileSource.kt", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.jellyfin.androidtv.data.source\n+\n+import android.content.Context\n+import com.google.gson.Gson\n+import timber.log.Timber\n+import java.io.FileNotFoundException\n+\n+open class JsonFileSource<T>(\n+\tprivate val context: Context,\n+\tprivate val fileName: String,\n+\tprivate val serializer: Gson,\n+\tprivate val clazz: Class<T>\n+) {\n+\tfun read(): T? {\n+\t\ttry {\n+\t\t\tcontext.openFileInput(fileName).use {\n+\t\t\t\tval data = it.readBytes()\n+\t\t\t\t\t.toString(Charsets.UTF_8)\n+\n+\t\t\t\treturn serializer.fromJson(data, clazz)\n+\t\t\t}\n+\t\t} catch (ex: FileNotFoundException) {\n+\t\t\tTimber.e(ex, \"File %s not found\", fileName)\n+\t\t}\n+\t\treturn null\n+\t}", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NzE1Mg==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519967152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \toverride fun onActivityCreated(savedInstanceState: Bundle?) {\n          \n          \n            \n            \toverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n          \n          \n            \n            \t\tval view = super.onCreateView(inflater, container, savedInstanceState)!!\n          \n      \n    \n    \n  \n\nand then use view.findViewById etc.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:55:27Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/shared/AlertFragment.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jellyfin.androidtv.ui.shared\n+\n+import android.os.Bundle\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import androidx.annotation.StringRes\n+import androidx.fragment.app.Fragment\n+import org.jellyfin.androidtv.R\n+\n+@Suppress(\"LongParameterList\")\n+open class AlertFragment(\n+\t@StringRes private val title: Int,\n+\t@StringRes private val description: Int? = null,\n+\t@StringRes private val confirmButtonText: Int? = null,\n+\tprivate val onConfirmCallback: () -> Unit = {},\n+\t@StringRes private val cancelButtonText: Int? = null,\n+\tprivate val onCancelCallback: () -> Unit = {},\n+\tprivate val onClose: () -> Unit = {}\n+) : Fragment(R.layout.fragment_alert_dialog) {\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NzU3MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519967570", "bodyText": "You can use synthetic imports to reference the elements;\nimport kotlinx.android.synthetic.main.fragment_alert_dialog.view.*\nval titleView = requireActivity().title", "author": "nielsvanvelzen", "createdAt": "2020-11-09T16:56:04Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/shared/AlertFragment.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jellyfin.androidtv.ui.shared\n+\n+import android.os.Bundle\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import androidx.annotation.StringRes\n+import androidx.fragment.app.Fragment\n+import org.jellyfin.androidtv.R\n+\n+@Suppress(\"LongParameterList\")\n+open class AlertFragment(\n+\t@StringRes private val title: Int,\n+\t@StringRes private val description: Int? = null,\n+\t@StringRes private val confirmButtonText: Int? = null,\n+\tprivate val onConfirmCallback: () -> Unit = {},\n+\t@StringRes private val cancelButtonText: Int? = null,\n+\tprivate val onCancelCallback: () -> Unit = {},\n+\tprivate val onClose: () -> Unit = {}\n+) : Fragment(R.layout.fragment_alert_dialog) {\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {\n+\t\tsuper.onActivityCreated(savedInstanceState)\n+\n+\t\tval titleView = requireActivity().findViewById<TextView>(R.id.title)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NTk4Nw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519995987", "bodyText": "See onCreateView comment on the parent class", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:37:42Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/AddServerFragment.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.os.Bundle\n+import android.text.InputType\n+import android.widget.Button\n+import android.widget.EditText\n+import android.widget.LinearLayout\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.ui.shared.AlertFragment\n+import org.jellyfin.androidtv.ui.shared.KeyboardFocusChangeListener\n+\n+class AddServerFragment(\n+\tprivate val onConfirmCallback: (url: String) -> Unit = {},\n+\tonCancelCallback: () -> Unit = {},\n+\tprivate val onClose: () -> Unit = {}\n+) : AlertFragment(\n+\ttitle = R.string.lbl_enter_server_address,\n+\tdescription = R.string.lbl_valid_server_address,\n+\tonCancelCallback = onCancelCallback,\n+\tonClose = onClose\n+) {\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzA4Nw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r519997087", "bodyText": "You can make these subclasses of ListServerFragment", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:39:26Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/ListServerFragment.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.os.Bundle\n+import androidx.annotation.DrawableRes\n+import androidx.core.view.updatePadding\n+import androidx.fragment.app.Fragment\n+import androidx.leanback.app.RowsSupportFragment\n+import androidx.leanback.widget.ArrayObjectAdapter\n+import androidx.leanback.widget.HeaderItem\n+import androidx.leanback.widget.ListRow\n+import androidx.leanback.widget.ListRowPresenter\n+import androidx.leanback.widget.OnItemViewClickedListener\n+import androidx.leanback.widget.Presenter\n+import androidx.leanback.widget.Row\n+import androidx.leanback.widget.RowPresenter\n+import androidx.lifecycle.Observer\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.launch\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.model.ServerList\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.ui.GridButton\n+import org.jellyfin.androidtv.ui.presentation.GridButtonPresenter\n+import org.koin.android.viewmodel.ext.android.sharedViewModel\n+import timber.log.Timber\n+\n+class ListServerFragment : RowsSupportFragment() {\n+\tprivate companion object {\n+\t\tprivate const val ADD_USER = 1\n+\t\tprivate const val SELECT_USER = 2\n+\t}\n+\n+\tprivate val loginViewModel: LoginViewModel by sharedViewModel()\n+\n+\tprivate val itemViewClickedListener = OnItemViewClickedListener() { _: Presenter.ViewHolder, item: Any, _: RowPresenter.ViewHolder, _: Row ->\n+\t\tif (item is UserGridButton) {\n+\t\t\tif (item.user.hasPassword) {\n+\t\t\t\t// Open login fragment\n+\t\t\t\tnavigate(UserLoginFragment(\n+\t\t\t\t\tuser = item.user,\n+\t\t\t\t\tonConfirmCallback = { username: String, password: String ->\n+\t\t\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\t\t\tloginViewModel.login(server = item.server, username = username, password = password)\n+\t\t\t\t\t\t}\n+\t\t\t\t\t},\n+\t\t\t\t\tonCancelCallback = { parentFragmentManager.popBackStack() }\n+\t\t\t\t))\n+\t\t\t} else {\n+\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\tloginViewModel.login(item.server, item.user.name, \"\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (item is AddUserGridButton) {\n+\t\t\t// Open login fragment\n+\t\t\tnavigate(UserLoginFragment(\n+\t\t\t\tonConfirmCallback = { username: String, password: String ->\n+\t\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\t\tloginViewModel.login(server = item.server, username = username, password = password)\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tonCancelCallback = { parentFragmentManager.popBackStack() }\n+\t\t\t))\n+\t\t}\n+\t}\n+\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {\n+\t\tsuper.onActivityCreated(savedInstanceState)\n+\n+\t\trequireView().updatePadding(top = 20)\n+\n+\t\tbuildRows(emptyMap())\n+\n+\t\tval serverObserver = Observer<ServerList> { serverList ->\n+\t\t\tif (serverList.allServersUsers.isNotEmpty()) buildRows(serverList.allServersUsers)\n+\t\t}\n+\n+\t\tloginViewModel.serverList.observe(viewLifecycleOwner, serverObserver)\n+\n+\t\tonItemViewClickedListener = itemViewClickedListener\n+\t}\n+\n+\tprivate fun buildRows(usersByServer: Map<Server, List<User>>) {\n+\t\tval rowAdapter = ArrayObjectAdapter(ListRowPresenter())\n+\t\tadapter = rowAdapter\n+\n+\t\tusersByServer.forEach { (server: Server, userList: List<User>) ->\n+\t\t\tTimber.d(\"Adding server row %s\", server.name)\n+\n+\t\t\tval userListAdapter = ArrayObjectAdapter(GridButtonPresenter())\n+\t\t\tuserList.forEach { user ->\n+\t\t\t\tuserListAdapter.add(UserGridButton(server, user, SELECT_USER, user.name, R.drawable.tile_port_person))\n+\t\t\t}\n+\n+\t\t\tuserListAdapter.add(AddUserGridButton(server, ADD_USER, requireContext().getString(R.string.lbl_manual_login), R.drawable.tile_edit))\n+\n+\t\t\trowAdapter.add(ListRow(\n+\t\t\t\tHeaderItem(usersByServer.keys.indexOf(server).toLong(),\n+\t\t\t\t\t\t   if (server.name.isNotBlank()) server.name else server.address),\n+\t\t\t\tuserListAdapter\n+\t\t\t))\n+\t\t}\n+\n+\t\t// Ensure the server rows get focus\n+\t\trequireView().requestFocus()\n+\t}\n+\n+\tprivate fun navigate(fragment: Fragment) {\n+\t\tparentFragmentManager.beginTransaction()\n+\t\t\t.replace(R.id.content_view, fragment)\n+\t\t\t.addToBackStack(this::class.simpleName)\n+\t\t\t.commit()\n+\t}\n+}\n+\n+private class AddUserGridButton(val server: Server, id: Int, text: String, @DrawableRes imageId: Int) : GridButton(id, text, imageId)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDEzOQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r520000139", "bodyText": "Using something like\n_serverList.apply {\n    addSource(_loadingCurrentServer) {\t\t\t\t\nwill probably make it more readable, just add all addSource calls in the .apply {} block", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:44:09Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/LoginViewModel.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MediatorLiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import androidx.lifecycle.liveData\n+import androidx.lifecycle.switchMap\n+import org.jellyfin.androidtv.data.model.LoadingState\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.model.ServerList\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.data.repository.ServerRepository\n+import org.jellyfin.androidtv.data.repository.UserRepository\n+import org.jellyfin.androidtv.util.apiclient.toUser\n+import timber.log.Timber\n+\n+class LoginViewModel(\n+\tprivate val serverRepository: ServerRepository,\n+\tprivate val userRepository: UserRepository\n+) : ViewModel() {\n+\tprivate val _currentServer = MutableLiveData<Server>()\n+\tval currentServer: LiveData<Server>\n+\t\tget() = _currentServer\n+\n+\tprivate val _currentUser = MutableLiveData<User>()\n+\tval currentUser: LiveData<User>\n+\t\tget() = _currentUser\n+\n+\tprivate val _serverList = MediatorLiveData<ServerList>()\n+\tval serverList: LiveData<ServerList>\n+\t\tget() = _serverList\n+\n+\tprivate val _loadingCurrentServer = MutableLiveData<LoadingState>()\n+\tprivate val currentServerUsers = _currentServer.switchMap { server ->\n+\t\tliveData {\n+\t\t\t_loadingCurrentServer.value = LoadingState.LOADING\n+\t\t\temit(hashMapOf(server to userRepository.getUsers(server)))\n+\t\t\t_loadingCurrentServer.value = LoadingState.SUCCESS\n+\t\t}\n+\t}\n+\n+\tprivate val _loadingDiscoveredServers = MutableLiveData<LoadingState>()\n+\tprivate val discoveredServers = liveData {\n+\t\t_loadingDiscoveredServers.value = LoadingState.LOADING\n+\t\temit(serverRepository.discoverServers()\n+\t\t\t\t .associateWith { userRepository.getUsers(it) })\n+\t\t_loadingDiscoveredServers.value = LoadingState.SUCCESS\n+\t}\n+\n+\tprivate val _loadingSavedServers = MutableLiveData<LoadingState>()\n+\tprivate val savedServers = liveData {\n+\t\t_loadingSavedServers.value = LoadingState.LOADING\n+\t\temit(serverRepository.getServers()\n+\t\t\t\t .associateWith { userRepository.getUsers(it) })\n+\t\t_loadingSavedServers.value = LoadingState.SUCCESS\n+\t}\n+\n+\tinit {\n+\t\t// Add all loading states", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMzM1OA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r520003358", "bodyText": "See onViewCreated comment on the alert fragment", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:49:24Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/StartupToolbarFragment.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.os.Bundle\n+import android.widget.Button\n+import android.widget.LinearLayout\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.ui.shared.ToolbarFragment\n+\n+class StartupToolbarFragment(\n+\tprivate val onAddServerClicked: () -> Unit = {}\n+) : ToolbarFragment() {\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNDA4Mw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r520004083", "bodyText": "The return type doesn't need to be declared for all functions in this file as they all use expression bodies.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:50:28Z", "path": "app/src/main/java/org/jellyfin/androidtv/util/apiclient/ModelExtensions.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.jellyfin.androidtv.util.apiclient\n+\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.data.model.UserConfiguration\n+import org.jellyfin.androidtv.data.model.UserPolicy\n+import org.jellyfin.apiclient.discovery.DiscoveryServerInfo\n+import org.jellyfin.apiclient.model.apiclient.ServerInfo\n+import org.jellyfin.apiclient.model.dto.UserDto\n+import org.jellyfin.apiclient.model.system.PublicSystemInfo\n+\n+fun DiscoveryServerInfo.toServerInfo(): ServerInfo = ServerInfo().apply {\n+\tid = this@toServerInfo.id\n+\tname = this@toServerInfo.name\n+\taddress = this@toServerInfo.address\n+}\n+\n+fun DiscoveryServerInfo.toServer(): Server = Server(id, name, address)\n+\n+fun PublicSystemInfo.toServer(): Server = Server(id, serverName, localAddress)\n+\n+fun ServerInfo.toServer(): Server = Server(id, name, address, userId, accessToken, dateLastAccessed)\n+\n+fun Server.toServerInfo(): ServerInfo = ServerInfo().apply {\n+\tid = this@toServerInfo.id\n+\tname = this@toServerInfo.name\n+\taddress = this@toServerInfo.address\n+\tuserId = this@toServerInfo.userId\n+\taccessToken = this@toServerInfo.accessToken\n+\tdateLastAccessed = this@toServerInfo.dateLastAccessed\n+}\n+\n+fun UserDto.toUser(): User = User(\n+\tid = id,\n+\tname = name,\n+\tserverId = serverId,\n+\tprimaryImageTag = primaryImageTag ?: \"\",\n+\thasPassword = hasPassword,\n+\thasConfiguredPassword = hasConfiguredPassword,\n+\thasConfiguredEasyPassword = hasConfiguredEasyPassword,\n+\tconfiguration = UserConfiguration(\n+\t\tlatestItemsExcludes = configuration.latestItemsExcludes\n+\t),\n+\tpolicy = UserPolicy(\n+\t\tenableLiveTvAccess = policy.enableLiveTvAccess,\n+\t\tenableLiveTvManagement = policy.enableLiveTvManagement\n+\t)\n+)\n+\n+fun User.toUserDto(): UserDto = UserDto().apply {\n+\tid = this@toUserDto.id\n+\tname = this@toUserDto.name\n+\tserverId = this@toUserDto.serverId\n+\tprimaryImageTag = this@toUserDto.primaryImageTag\n+\thasPassword = this@toUserDto.hasPassword\n+\thasConfiguredPassword = this@toUserDto.hasConfiguredPassword\n+\thasConfiguredEasyPassword = this@toUserDto.hasConfiguredEasyPassword\n+\tconfiguration = org.jellyfin.apiclient.model.configuration.UserConfiguration().apply {\n+\t\tlatestItemsExcludes = this@toUserDto.configuration.latestItemsExcludes\n+\t}\n+\tpolicy = org.jellyfin.apiclient.model.users.UserPolicy().apply {\n+\t\tenableLiveTvAccess = this@toUserDto.policy.enableLiveTvAccess\n+\t\tenableLiveTvManagement = this@toUserDto.policy.enableLiveTvManagement\n+\t}\n+}", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNjE1MA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r520006150", "bodyText": "We probably wan't to use openNextActivity() here because the user might have opened the app with an intent but required authentication first.", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:53:53Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/StartupActivity.kt", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.Manifest\n+import android.content.Intent\n+import android.content.pm.PackageManager\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.core.app.ActivityCompat\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.FragmentActivity\n+import androidx.lifecycle.Observer\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.launch\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.TvApp\n+import org.jellyfin.androidtv.data.model.LoadingState\n+import org.jellyfin.androidtv.data.model.ServerList\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.ui.browsing.MainActivity\n+import org.jellyfin.androidtv.ui.itemdetail.FullDetailsActivity\n+import org.jellyfin.androidtv.ui.itemhandling.ItemLauncher\n+import org.jellyfin.androidtv.ui.playback.MediaManager\n+import org.jellyfin.androidtv.util.Utils\n+import org.jellyfin.androidtv.util.apiclient.toUserDto\n+import org.jellyfin.apiclient.interaction.ApiClient\n+import org.jellyfin.apiclient.interaction.Response\n+import org.jellyfin.apiclient.model.dto.BaseItemDto\n+import org.koin.android.viewmodel.ext.android.viewModel\n+import org.koin.java.KoinJavaComponent.get\n+import timber.log.Timber\n+\n+class StartupActivity : FragmentActivity() {\n+\tcompanion object {\n+\t\tprivate const val NETWORK_PERMISSION = 1\n+\t\tconst val ITEM_ID = \"ItemId\"\n+\t\tconst val ITEM_IS_USER_VIEW = \"ItemIsUserView\"\n+\t\tconst val HIDE_SPLASH = \"HideSplash\"\n+\t}\n+\n+\tprivate var application: TvApp? = null\n+\tprivate val loginViewModel: LoginViewModel by viewModel()\n+\tprivate var isLoaded = false\n+\n+\toverride fun onCreate(savedInstanceState: Bundle?) {\n+\t\tsuper.onCreate(savedInstanceState)\n+\t\tsetContentView(R.layout.fragment_content_view)\n+\t\tif (!intent.getBooleanExtra(HIDE_SPLASH, false)) {\n+\t\t\tsupportFragmentManager.beginTransaction()\n+\t\t\t\t.replace(R.id.content_view, SplashFragment())\n+\t\t\t\t.commit()\n+\t\t}\n+\t\tapplication = applicationContext as TvApp\n+\n+\t\t//Ensure basic permissions\n+\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_NETWORK_STATE) != PackageManager.PERMISSION_GRANTED\n+\t\t\t\t\t\t|| ContextCompat.checkSelfPermission(this, Manifest.permission.INTERNET) != PackageManager.PERMISSION_GRANTED)) {\n+\t\t\tTimber.i(\"Requesting network permissions\")\n+\t\t\tActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.INTERNET), NETWORK_PERMISSION)\n+\t\t} else {\n+\t\t\tTimber.i(\"Basic network permissions are granted\")\n+\n+\t\t\tval loadingObserver = Observer<ServerList> { serverList ->\n+\t\t\t\tTimber.d(\"LoadingState: %s\", serverList.state.toString())\n+\t\t\t\tif (serverList.state == LoadingState.SUCCESS && !isLoaded) start()\n+\t\t\t}\n+\t\t\tloginViewModel.serverList.observe(this, loadingObserver)\n+\t\t}\n+\n+\t\t// Navigate to home screen when user has logged in\n+\t\tval currentUserObserver = Observer<User> { user: User? ->\n+\t\t\t// TODO: This should be removed in favor of fragments getting the current user directly\n+\t\t\tapplication!!.currentUser = user?.toUserDto()\n+\t\t\t// User has been logged in continue to home screen\n+\t\t\t// TODO: We should use a fragment for this, but the current fragment depends on BaseActivity\n+\t\t\tval intent = Intent(application, MainActivity::class.java)", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNjQwNw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r520006407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tisLoaded = true;\n          \n          \n            \n            \t\tisLoaded = true\n          \n      \n    \n    \n  \n\n\ud83d\ude31", "author": "nielsvanvelzen", "createdAt": "2020-11-09T17:54:18Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/StartupActivity.kt", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.Manifest\n+import android.content.Intent\n+import android.content.pm.PackageManager\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.core.app.ActivityCompat\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.FragmentActivity\n+import androidx.lifecycle.Observer\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.launch\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.TvApp\n+import org.jellyfin.androidtv.data.model.LoadingState\n+import org.jellyfin.androidtv.data.model.ServerList\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.ui.browsing.MainActivity\n+import org.jellyfin.androidtv.ui.itemdetail.FullDetailsActivity\n+import org.jellyfin.androidtv.ui.itemhandling.ItemLauncher\n+import org.jellyfin.androidtv.ui.playback.MediaManager\n+import org.jellyfin.androidtv.util.Utils\n+import org.jellyfin.androidtv.util.apiclient.toUserDto\n+import org.jellyfin.apiclient.interaction.ApiClient\n+import org.jellyfin.apiclient.interaction.Response\n+import org.jellyfin.apiclient.model.dto.BaseItemDto\n+import org.koin.android.viewmodel.ext.android.viewModel\n+import org.koin.java.KoinJavaComponent.get\n+import timber.log.Timber\n+\n+class StartupActivity : FragmentActivity() {\n+\tcompanion object {\n+\t\tprivate const val NETWORK_PERMISSION = 1\n+\t\tconst val ITEM_ID = \"ItemId\"\n+\t\tconst val ITEM_IS_USER_VIEW = \"ItemIsUserView\"\n+\t\tconst val HIDE_SPLASH = \"HideSplash\"\n+\t}\n+\n+\tprivate var application: TvApp? = null\n+\tprivate val loginViewModel: LoginViewModel by viewModel()\n+\tprivate var isLoaded = false\n+\n+\toverride fun onCreate(savedInstanceState: Bundle?) {\n+\t\tsuper.onCreate(savedInstanceState)\n+\t\tsetContentView(R.layout.fragment_content_view)\n+\t\tif (!intent.getBooleanExtra(HIDE_SPLASH, false)) {\n+\t\t\tsupportFragmentManager.beginTransaction()\n+\t\t\t\t.replace(R.id.content_view, SplashFragment())\n+\t\t\t\t.commit()\n+\t\t}\n+\t\tapplication = applicationContext as TvApp\n+\n+\t\t//Ensure basic permissions\n+\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_NETWORK_STATE) != PackageManager.PERMISSION_GRANTED\n+\t\t\t\t\t\t|| ContextCompat.checkSelfPermission(this, Manifest.permission.INTERNET) != PackageManager.PERMISSION_GRANTED)) {\n+\t\t\tTimber.i(\"Requesting network permissions\")\n+\t\t\tActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.INTERNET), NETWORK_PERMISSION)\n+\t\t} else {\n+\t\t\tTimber.i(\"Basic network permissions are granted\")\n+\n+\t\t\tval loadingObserver = Observer<ServerList> { serverList ->\n+\t\t\t\tTimber.d(\"LoadingState: %s\", serverList.state.toString())\n+\t\t\t\tif (serverList.state == LoadingState.SUCCESS && !isLoaded) start()\n+\t\t\t}\n+\t\t\tloginViewModel.serverList.observe(this, loadingObserver)\n+\t\t}\n+\n+\t\t// Navigate to home screen when user has logged in\n+\t\tval currentUserObserver = Observer<User> { user: User? ->\n+\t\t\t// TODO: This should be removed in favor of fragments getting the current user directly\n+\t\t\tapplication!!.currentUser = user?.toUserDto()\n+\t\t\t// User has been logged in continue to home screen\n+\t\t\t// TODO: We should use a fragment for this, but the current fragment depends on BaseActivity\n+\t\t\tval intent = Intent(application, MainActivity::class.java)\n+\t\t\tstartActivity(intent)\n+\t\t\tfinish()\n+\t\t}\n+\t\tloginViewModel.currentUser.observe(this, currentUserObserver)\n+\t}\n+\n+\tprivate fun start() {\n+\t\tif (application!!.currentUser != null && MediaManager.isPlayingAudio()) {\n+\t\t\topenNextActivity()\n+\t\t} else {\n+\t\t\t//clear audio queue in case left over from last run\n+\t\t\tMediaManager.clearAudioQueue()\n+\t\t\tMediaManager.clearVideoQueue()\n+\t\t\tshowServerList()\n+\t\t}\n+\t\tisLoaded = true;", "originalCommit": "83d5c0a4f13f6340d6b67a0062fad657e30e7064", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3631e2e33dbf90194249efa9b31b919b0c8537ae", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/3631e2e33dbf90194249efa9b31b919b0c8537ae", "message": "Fix review feedback", "committedDate": "2020-11-12T16:53:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5OTE4Nw==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522299187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfun error(@StringRes msgRes: Int? = null) = LoadingState(Status.ERROR, msgRes)\n          \n          \n            \n            \t\tfun error(@StringRes messageRes: Int? = null) = LoadingState(Status.ERROR, msgRes)\n          \n      \n    \n    \n  \n\nFor consistency", "author": "nielsvanvelzen", "createdAt": "2020-11-12T17:49:16Z", "path": "app/src/main/java/org/jellyfin/androidtv/data/model/LoadingState.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jellyfin.androidtv.data.model\n+\n+import androidx.annotation.StringRes\n+\n+data class LoadingState(\n+\tval status: Status,\n+\t@StringRes val messageRes: Int? = null\n+) {\n+\tcompanion object {\n+\t\tval PENDING = LoadingState(Status.PENDING)\n+\t\tval LOADING = LoadingState(Status.LOADING)\n+\t\tval SUCCESS = LoadingState(Status.SUCCESS)\n+\t\tval ERROR = LoadingState(Status.ERROR)\n+\t\tfun error(@StringRes msgRes: Int? = null) = LoadingState(Status.ERROR, msgRes)", "originalCommit": "3631e2e33dbf90194249efa9b31b919b0c8537ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMDk4NA==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522300984", "bodyText": "I think this one can be moved to onCreateView", "author": "nielsvanvelzen", "createdAt": "2020-11-12T17:51:48Z", "path": "app/src/main/java/org/jellyfin/androidtv/ui/startup/ListServerFragment.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.jellyfin.androidtv.ui.startup\n+\n+import android.os.Bundle\n+import androidx.annotation.DrawableRes\n+import androidx.core.view.updatePadding\n+import androidx.fragment.app.Fragment\n+import androidx.leanback.app.RowsSupportFragment\n+import androidx.leanback.widget.ArrayObjectAdapter\n+import androidx.leanback.widget.HeaderItem\n+import androidx.leanback.widget.ListRow\n+import androidx.leanback.widget.ListRowPresenter\n+import androidx.leanback.widget.OnItemViewClickedListener\n+import androidx.leanback.widget.Presenter\n+import androidx.leanback.widget.Row\n+import androidx.leanback.widget.RowPresenter\n+import androidx.lifecycle.Observer\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.launch\n+import org.jellyfin.androidtv.R\n+import org.jellyfin.androidtv.data.model.Server\n+import org.jellyfin.androidtv.data.model.ServerList\n+import org.jellyfin.androidtv.data.model.User\n+import org.jellyfin.androidtv.ui.GridButton\n+import org.jellyfin.androidtv.ui.presentation.GridButtonPresenter\n+import org.koin.android.viewmodel.ext.android.sharedViewModel\n+import timber.log.Timber\n+\n+class ListServerFragment : RowsSupportFragment() {\n+\tprivate companion object {\n+\t\tprivate const val ADD_USER = 1\n+\t\tprivate const val SELECT_USER = 2\n+\t}\n+\n+\tprivate val loginViewModel: LoginViewModel by sharedViewModel()\n+\n+\tprivate val itemViewClickedListener = OnItemViewClickedListener() { _: Presenter.ViewHolder, item: Any, _: RowPresenter.ViewHolder, _: Row ->\n+\t\tif (item is UserGridButton) {\n+\t\t\tif (item.user.hasPassword) {\n+\t\t\t\t// Open login fragment\n+\t\t\t\tnavigate(UserLoginFragment(\n+\t\t\t\t\tuser = item.user,\n+\t\t\t\t\tonConfirmCallback = { username: String, password: String ->\n+\t\t\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\t\t\tloginViewModel.login(server = item.server, username = username, password = password)\n+\t\t\t\t\t\t}\n+\t\t\t\t\t},\n+\t\t\t\t\tonCancelCallback = { parentFragmentManager.popBackStack() }\n+\t\t\t\t))\n+\t\t\t} else {\n+\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\tloginViewModel.login(item.server, item.user.name, \"\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (item is AddUserGridButton) {\n+\t\t\t// Open login fragment\n+\t\t\tnavigate(UserLoginFragment(\n+\t\t\t\tonConfirmCallback = { username: String, password: String ->\n+\t\t\t\t\tGlobalScope.launch {\n+\t\t\t\t\t\tloginViewModel.login(server = item.server, username = username, password = password)\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tonCancelCallback = { parentFragmentManager.popBackStack() }\n+\t\t\t))\n+\t\t}\n+\t}\n+\n+\toverride fun onActivityCreated(savedInstanceState: Bundle?) {\n+\t\tsuper.onActivityCreated(savedInstanceState)\n+\n+\t\trequireView().updatePadding(top = 20)", "originalCommit": "3631e2e33dbf90194249efa9b31b919b0c8537ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTU1Mg==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522325552", "bodyText": "The viewmodel observer seems to need to be added in onActivityCreated otherwise you get some weird crashes when the activity changes.", "author": "thornbill", "createdAt": "2020-11-12T18:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjU4MQ==", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/578#discussion_r522326581", "bodyText": "I only meant the padding line", "author": "nielsvanvelzen", "createdAt": "2020-11-12T18:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMDk4NA=="}], "type": "inlineReview"}, {"oid": "b72993126d014f8d46f6a90033b2a06295f81f21", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/b72993126d014f8d46f6a90033b2a06295f81f21", "message": "Fix failing tests", "committedDate": "2020-11-12T18:15:09Z", "type": "commit"}, {"oid": "4167cb78871866c42ddabad13b730d77a07e24a4", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/4167cb78871866c42ddabad13b730d77a07e24a4", "message": "Fix inconsistent message resource naming", "committedDate": "2020-11-12T18:31:52Z", "type": "commit"}, {"oid": "ef88c0032af0f53a4563820a33b591e486f9d1c8", "url": "https://github.com/jellyfin/jellyfin-androidtv/commit/ef88c0032af0f53a4563820a33b591e486f9d1c8", "message": "Fix review feedback", "committedDate": "2020-11-12T18:58:41Z", "type": "commit"}]}