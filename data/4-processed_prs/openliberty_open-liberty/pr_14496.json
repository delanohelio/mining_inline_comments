{"pr_number": 14496, "pr_title": "Remove hard coded sorting for compatible feature dependency", "pr_createdAt": "2020-10-14T19:53:12Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14496", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTA1Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505669052", "bodyText": "Change\n\"Unable to load conflicting versions of features \\\"\" + conflictRecord2.conflict + ...\nto\n\"Unable to load conflicting versions of features \\\"\" + conflictRecord1.conflict + ...", "author": "dazavala", "createdAt": "2020-10-15T16:13:46Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1712,74 +1719,44 @@ boolean reportErrors(Result result, Collection<String> restrictedAccessAttempts,\n             reportedErrors = true;\n             // Attempt to gather two distinct features that are in conflict, here we assume we\n             // can find candidate features that are different\n-            String conflict1 = null;\n-            String configured1 = null;\n-            String chain1 = null;\n-            String conflict2 = null;\n-            String configured2 = null;\n-            String chain2 = null;\n-            String eeConflict1 = null; // Second to last feature in chain\n-            String eeConflict2 = null;\n+            ConflictRecord conflictRecord1 = null;\n+            ConflictRecord conflictRecord2 = null;\n             for (Chain chain : conflict.getValue()) {\n-                List<String> candidates = chain.getCandidates();\n-                if (conflict1 == null) {\n-                    conflict1 = candidates.get(0);\n-                    boolean isEeCompatibleConflict1 = isEeCompatible(conflict1);\n-                    if (chain.getChain().isEmpty()) {\n-                        // this is a configured root\n-                        configured1 = conflict1;\n-                        chain1 = conflict1;\n-                        if (isEeCompatibleConflict1)\n-                            eeConflict1 = conflict1;\n-                    } else {\n-                        configured1 = chain.getChain().get(0);\n-                        chain1 = buildChainString(chain.getChain(), conflict1);\n-                        if (isEeCompatibleConflict1)\n-                            eeConflict1 = chain.getChain().get(chain.getChain().size() - 1);\n-                    }\n-                } else if (!!!conflict1.equals(candidates.get(0))) {\n-                    conflict2 = candidates.get(0);\n-                    boolean isEeCompatibleConflict2 = isEeCompatible(conflict2);\n-                    if (chain.getChain().isEmpty()) {\n-                        // this is a configured root\n-                        configured2 = conflict2;\n-                        chain2 = conflict2;\n-                        if (isEeCompatibleConflict2)\n-                            eeConflict2 = conflict2;\n-                    } else {\n-                        configured2 = chain.getChain().get(0);\n-                        chain2 = buildChainString(chain.getChain(), conflict2);\n-                        if (isEeCompatibleConflict2)\n-                            eeConflict2 = chain.getChain().get(chain.getChain().size() - 1);\n-                    }\n+                if (conflictRecord1 == null) {\n+                    conflictRecord1 = getConflictRecord(chain, conflict.getValue());\n+                } else if (!!!conflictRecord1.conflict.equals(chain.getCandidates().get(0))) {\n+                    conflictRecord2 = getConflictRecord(chain, conflict.getValue());\n                     break;\n                 }\n             }\n \n             // Report only the most important conflict caused by two configured features\n-            if (!!!configuredAlreadyReported(configured1, configured2, reportedConfigured)) {\n-                if (isEeCompatible(conflict1)) {\n+            if (!!!configuredAlreadyReported(conflictRecord1.configured, conflictRecord2.configured, reportedConfigured)) {\n+                if (isEeCompatible(conflictRecord1.conflict)) {\n                     final boolean ignoreVersion = true;\n-                    if (getEeCompatiblePlatform(conflict1, ignoreVersion).equals(getEeCompatiblePlatform(conflict2, ignoreVersion))) {\n+                    if (getEeCompatiblePlatform(conflictRecord1.conflict, ignoreVersion).equals(getEeCompatiblePlatform(conflictRecord2.conflict, ignoreVersion))) {\n                         // Both conflicting features support \"Java EE X\" or \"Jakarta EE X\", exclusively\n-                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR\", getPreferredEePlatform(eeConflict1),\n-                                 getPreferredEePlatform(eeConflict2), getFeatureName(configured1), getFeatureName(configured2), getEeCompatiblePlatform(conflict1, ignoreVersion));\n+                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR\", getPreferredEePlatform(conflictRecord1.compatibleConflict),\n+                                 getPreferredEePlatform(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.configured), getFeatureName(conflictRecord2.configured),\n+                                 getEeCompatiblePlatform(conflictRecord1.conflict, ignoreVersion));\n                     } else {\n                         // One conflicting feature supports \"Jakarta EE X\", the other \"Java EE X\"\n-                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR\", getPreferredEePlatform(eeConflict1),\n-                                 getPreferredEePlatform(eeConflict2), getFeatureName(eeConflict1), getFeatureName(eeConflict2), getFeatureName(configured1),\n-                                 getFeatureName(configured2));\n+                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR\", getPreferredEePlatform(conflictRecord1.compatibleConflict),\n+                                 getPreferredEePlatform(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.compatibleConflict),\n+                                 getFeatureName(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.configured),\n+                                 getFeatureName(conflictRecord2.configured));\n                         // Remove the conflicting features (not necessarily the configured features)\n-                        result.getResolvedFeatures().remove(getFeatureName(eeConflict1));\n-                        result.getResolvedFeatures().remove(getFeatureName(eeConflict2));\n+                        result.getResolvedFeatures().remove(getFeatureName(conflictRecord1.compatibleConflict));\n+                        result.getResolvedFeatures().remove(getFeatureName(conflictRecord2.compatibleConflict));\n                     }\n                 } else {\n-                    Tr.error(tc, \"UPDATE_CONFLICT_FEATURE_ERROR\", getFeatureName(conflict1), getFeatureName(conflict2), getFeatureName(configured1), getFeatureName(configured2));\n+                    Tr.error(tc, \"UPDATE_CONFLICT_FEATURE_ERROR\", getFeatureName(conflictRecord1.conflict), getFeatureName(conflictRecord2.conflict),\n+                             getFeatureName(conflictRecord1.configured), getFeatureName(conflictRecord2.configured));\n                 }\n-                reportedConfigured.add(new SimpleImmutableEntry<String, String>(configured1, configured2));\n+                reportedConfigured.add(new SimpleImmutableEntry<String, String>(conflictRecord1.configured, conflictRecord2.configured));\n             }\n-            String conflictMsg = \"Unable to load conflicting versions of features \\\"\" + conflict1 + \"\\\" and \\\"\" + conflict2 +\n-                                 \"\\\".  The feature dependency chains that led to the conflict are: \" + chain1 + \" and \" + chain2;\n+            String conflictMsg = \"Unable to load conflicting versions of features \\\"\" + conflictRecord2.conflict + \"\\\" and \\\"\" + conflictRecord2.conflict +", "originalCommit": "5492b320f8fe0fe52dfbe164bd20c94a90d09bff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMDQ2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505700462", "bodyText": "Good catch, I'll fix this up along with adding FAT tests.", "author": "tjwatson", "createdAt": "2020-10-15T17:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNzAyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r508037026", "bodyText": "This is resolved now.", "author": "tjwatson", "createdAt": "2020-10-19T20:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NzczNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505677734", "bodyText": "You can move the getTolerates() to line 1840.", "author": "dazavala", "createdAt": "2020-10-15T16:27:23Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1801,6 +1778,79 @@ boolean reportErrors(Result result, Collection<String> restrictedAccessAttempts,\n \n     }\n \n+    private ConflictRecord getConflictRecord(Chain chain, Collection<Chain> inConflict) {\n+        List<String> candidates = chain.getCandidates();\n+        ConflictRecord result = new ConflictRecord();\n+        result.conflict = candidates.get(0);\n+        boolean isEeCompatibleConflict = isEeCompatible(result.conflict);\n+        if (chain.getChain().isEmpty()) {\n+            // this is a configured root\n+            result.configured = result.conflict;\n+            result.chain = result.conflict;\n+            if (isEeCompatibleConflict) {\n+                // Note that this case should never happen because the compatible features are private\n+                // they should never be allowed to be a configured root feature.\n+                result.compatibleConflict = result.conflict;\n+            }\n+        } else {\n+            result.configured = chain.getChain().get(0);\n+            if (isEeCompatibleConflict) {\n+                // Depending on how the feature resolver processes the included features\n+                // it may not report the direct dependency on the compatible feature as the first\n+                // conflict.  This may result in a reported chain that has more than one link to the\n+                // compatible conflict.\n+\n+                // Check each level of the chain to see if it has a direct dependency on the compatible feature\n+                // and is in conflict with the other chains in conflict.  If so then then use the feature\n+                // in this level as the compatible conflict feature.\n+                chainCheck: for (String feature : chain.getChain()) {\n+                    ProvisioningFeatureDefinition featureDef = featureRepository.getFeature(feature);\n+                    for (FeatureResource fr : featureDef.getConstituents(SubsystemContentType.FEATURE_TYPE)) {\n+                        if (isCompatibleInConflictWithChains(fr, chain, inConflict)) {\n+                            // this level is in conflict with the other chains; use it as the compatible conflict.\n+                            result.compatibleConflict = feature;\n+                            break chainCheck;\n+                        }\n+                    }\n+                }\n+                if (result.compatibleConflict == null) {\n+                    // fall back to the second to last in chain that has a direct dependency on the compatible feature\n+                    result.compatibleConflict = chain.getChain().get(chain.getChain().size() - 1);\n+                }\n+            }\n+            result.chain = buildChainString(chain.getChain(), result.conflict);\n+        }\n+        return result;\n+    }\n+\n+    private boolean isCompatibleInConflictWithChains(FeatureResource fr, Chain chain, Collection<Chain> inConflict) {\n+        if (isEeCompatible(fr.getSymbolicName()) == false) {\n+            // this included feature is not a compatible feature; move on to next\n+            return false;\n+        }\n+\n+        List<String> tolerates = fr.getTolerates();", "originalCommit": "5492b320f8fe0fe52dfbe164bd20c94a90d09bff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5OTA1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505699059", "bodyText": "It could, but I was assigning it once to be used multiple times within each iteration of the for loop over the inConflict chain.", "author": "tjwatson", "createdAt": "2020-10-15T17:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNzQ5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r508037492", "bodyText": "I do not plan to address this.", "author": "tjwatson", "createdAt": "2020-10-19T20:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NzczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4MjI5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505682295", "bodyText": "Unrelated to this review: Removing features from the resolved set is unnecessary when disableAllOnConflict is true.", "author": "dazavala", "createdAt": "2020-10-15T16:33:19Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1712,74 +1719,44 @@ boolean reportErrors(Result result, Collection<String> restrictedAccessAttempts,\n             reportedErrors = true;\n             // Attempt to gather two distinct features that are in conflict, here we assume we\n             // can find candidate features that are different\n-            String conflict1 = null;\n-            String configured1 = null;\n-            String chain1 = null;\n-            String conflict2 = null;\n-            String configured2 = null;\n-            String chain2 = null;\n-            String eeConflict1 = null; // Second to last feature in chain\n-            String eeConflict2 = null;\n+            ConflictRecord conflictRecord1 = null;\n+            ConflictRecord conflictRecord2 = null;\n             for (Chain chain : conflict.getValue()) {\n-                List<String> candidates = chain.getCandidates();\n-                if (conflict1 == null) {\n-                    conflict1 = candidates.get(0);\n-                    boolean isEeCompatibleConflict1 = isEeCompatible(conflict1);\n-                    if (chain.getChain().isEmpty()) {\n-                        // this is a configured root\n-                        configured1 = conflict1;\n-                        chain1 = conflict1;\n-                        if (isEeCompatibleConflict1)\n-                            eeConflict1 = conflict1;\n-                    } else {\n-                        configured1 = chain.getChain().get(0);\n-                        chain1 = buildChainString(chain.getChain(), conflict1);\n-                        if (isEeCompatibleConflict1)\n-                            eeConflict1 = chain.getChain().get(chain.getChain().size() - 1);\n-                    }\n-                } else if (!!!conflict1.equals(candidates.get(0))) {\n-                    conflict2 = candidates.get(0);\n-                    boolean isEeCompatibleConflict2 = isEeCompatible(conflict2);\n-                    if (chain.getChain().isEmpty()) {\n-                        // this is a configured root\n-                        configured2 = conflict2;\n-                        chain2 = conflict2;\n-                        if (isEeCompatibleConflict2)\n-                            eeConflict2 = conflict2;\n-                    } else {\n-                        configured2 = chain.getChain().get(0);\n-                        chain2 = buildChainString(chain.getChain(), conflict2);\n-                        if (isEeCompatibleConflict2)\n-                            eeConflict2 = chain.getChain().get(chain.getChain().size() - 1);\n-                    }\n+                if (conflictRecord1 == null) {\n+                    conflictRecord1 = getConflictRecord(chain, conflict.getValue());\n+                } else if (!!!conflictRecord1.conflict.equals(chain.getCandidates().get(0))) {\n+                    conflictRecord2 = getConflictRecord(chain, conflict.getValue());\n                     break;\n                 }\n             }\n \n             // Report only the most important conflict caused by two configured features\n-            if (!!!configuredAlreadyReported(configured1, configured2, reportedConfigured)) {\n-                if (isEeCompatible(conflict1)) {\n+            if (!!!configuredAlreadyReported(conflictRecord1.configured, conflictRecord2.configured, reportedConfigured)) {\n+                if (isEeCompatible(conflictRecord1.conflict)) {\n                     final boolean ignoreVersion = true;\n-                    if (getEeCompatiblePlatform(conflict1, ignoreVersion).equals(getEeCompatiblePlatform(conflict2, ignoreVersion))) {\n+                    if (getEeCompatiblePlatform(conflictRecord1.conflict, ignoreVersion).equals(getEeCompatiblePlatform(conflictRecord2.conflict, ignoreVersion))) {\n                         // Both conflicting features support \"Java EE X\" or \"Jakarta EE X\", exclusively\n-                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR\", getPreferredEePlatform(eeConflict1),\n-                                 getPreferredEePlatform(eeConflict2), getFeatureName(configured1), getFeatureName(configured2), getEeCompatiblePlatform(conflict1, ignoreVersion));\n+                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR\", getPreferredEePlatform(conflictRecord1.compatibleConflict),\n+                                 getPreferredEePlatform(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.configured), getFeatureName(conflictRecord2.configured),\n+                                 getEeCompatiblePlatform(conflictRecord1.conflict, ignoreVersion));\n                     } else {\n                         // One conflicting feature supports \"Jakarta EE X\", the other \"Java EE X\"\n-                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR\", getPreferredEePlatform(eeConflict1),\n-                                 getPreferredEePlatform(eeConflict2), getFeatureName(eeConflict1), getFeatureName(eeConflict2), getFeatureName(configured1),\n-                                 getFeatureName(configured2));\n+                        Tr.error(tc, \"UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR\", getPreferredEePlatform(conflictRecord1.compatibleConflict),\n+                                 getPreferredEePlatform(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.compatibleConflict),\n+                                 getFeatureName(conflictRecord2.compatibleConflict), getFeatureName(conflictRecord1.configured),\n+                                 getFeatureName(conflictRecord2.configured));\n                         // Remove the conflicting features (not necessarily the configured features)\n-                        result.getResolvedFeatures().remove(getFeatureName(eeConflict1));\n-                        result.getResolvedFeatures().remove(getFeatureName(eeConflict2));\n+                        result.getResolvedFeatures().remove(getFeatureName(conflictRecord1.compatibleConflict));", "originalCommit": "5492b320f8fe0fe52dfbe164bd20c94a90d09bff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5NzQ3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r505697470", "bodyText": "I thought about that when adding disableAllOnConflict but thought keeping the code as-is there was more simple than determining if the remove is necessary or not.", "author": "tjwatson", "createdAt": "2020-10-15T16:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4MjI5NQ=="}], "type": "inlineReview"}, {"oid": "69e9a82689875ff1388a61a7fffd544efe00a208", "url": "https://github.com/OpenLiberty/open-liberty/commit/69e9a82689875ff1388a61a7fffd544efe00a208", "message": "Remove hard coded sorting for compatible feature dependency\n\nProcess the resolver report conflict chains to find the first\nfeature in the conflict chain that has a direct dependency\non a compatible feature that is in conflict.\n\nThis ensures the best error message can be displayed\nfor the configured features that cause the conflict", "committedDate": "2020-10-19T20:16:36Z", "type": "forcePushed"}, {"oid": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "url": "https://github.com/OpenLiberty/open-liberty/commit/d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "message": "Remove hard coded sorting for compatible feature dependency\n\nProcess the resolver report conflict chains to find the first\nfeature in the conflict chain that has a direct dependency\non a compatible feature that is in conflict.\n\nThis ensures the best error message can be displayed\nfor the configured features that cause the conflict", "committedDate": "2020-10-19T21:21:52Z", "type": "commit"}, {"oid": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "url": "https://github.com/OpenLiberty/open-liberty/commit/d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "message": "Remove hard coded sorting for compatible feature dependency\n\nProcess the resolver report conflict chains to find the first\nfeature in the conflict chain that has a direct dependency\non a compatible feature that is in conflict.\n\nThis ensures the best error message can be displayed\nfor the configured features that cause the conflict", "committedDate": "2020-10-19T21:21:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0NDQ1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512044451", "bodyText": "Can we remove _EE from the message property names?  Eventually we'll have to generalize the message property names and also the comments heading these each messages, e.g. {0} = EeProgModel1.", "author": "dazavala", "createdAt": "2020-10-26T15:20:53Z", "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -212,9 +212,9 @@ UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR=CWWKF0043E: The con\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of features for the indicated programming models.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR.useraction=Try to specify a compatible version of the configured features that caused the conflict in the server.xml file.  If no other versions are available, then the configured features are not compatible with each other and cannot be configured at the same time.\n \n-# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2\n-UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use features that support either the Jakarta EE or Java EE programming models, but not both.\n-UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of both Jakarta EE and Java EE features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n+# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2: {6} platformName1: {7} platformName2\n+UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use features that support either the {6} or {7} programming models, but not both.", "originalCommit": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MTc5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512151791", "bodyText": "That would have to happen across all the translation language nlsprops files.  I assume we can change the key names in the nlsprops, but would need some confirmation that it is safe to do.", "author": "tjwatson", "createdAt": "2020-10-26T17:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0NDQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MjIyNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512692224", "bodyText": "Change \"The features {2} and {3}\" to \"The {2} and {3} features\".\nChange \"The feature {2} of {0}\" to \"The {2} of {0} feature\".\nChange \"with the feature {3} of {1}\" to \"with the {3} of {1} feature.\"\nChange \"The configured features {4} and {5}\" to \"The {4} and {5} configured features\".", "author": "Rwalls1", "createdAt": "2020-10-27T13:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0NDQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NDczNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512694737", "bodyText": "Remove extra space after \"combination of features\".\nRemove extra space after \"including Jakarta EE 8\".", "author": "Rwalls1", "createdAt": "2020-10-27T13:33:58Z", "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -212,9 +212,9 @@ UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR=CWWKF0043E: The con\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of features for the indicated programming models.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_SAME_PLATFORM_ERROR.useraction=Try to specify a compatible version of the configured features that caused the conflict in the server.xml file.  If no other versions are available, then the configured features are not compatible with each other and cannot be configured at the same time.\n \n-# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2\n-UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use features that support either the Jakarta EE or Java EE programming models, but not both.\n-UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of both Jakarta EE and Java EE features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n+# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2: {6} platformName1: {7} platformName2\n+UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use features that support either the {6} or {7} programming models, but not both.\n+UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.", "originalCommit": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyMzk0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512823948", "bodyText": "Change \"The features {2} and {3}\" to \"The {2} and {3} features\".\n\nDone.\n\nChange \"The feature {2} of {0}\" to \"The {2} of {0} feature\".\n\nNo, this would make the message incorrect.\nEXISTING: \"The feature servlet-4.0 of Java EE 8 ...\"\nNEW: \"The servlet-4.0 of Java EE 8 feature ...\"\nInstead I changed to \"The {2} feature of {0} is incompatible with the {3} feature of {1}.\"\nNote that I moved \"feature\" to after {2} AND {3}.\n\nChange \"with the feature {3} of {1}\" to \"with the {3} of {1} feature.\"\n\nDone above by moving \"feature\" after {3} instead.\n\nChange \"The configured features {4} and {5}\" to \"The {4} and {5} configured features\".\n\nDone\n\nRemove extra space after \"combination of features\".\n\nDone\n\nRemove extra space after \"including Jakarta EE 8\".\n\nDone", "author": "tjwatson", "createdAt": "2020-10-27T16:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NDczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzUwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512697501", "bodyText": "Change \"The features {2} and {3}\" to \"The  {2} and {3} features\".\nChange \" The feature {2} of {0}\" to \"The {2} of {0} feature\".\nChange \"with the feature {3} of {1}\" to \"with the  {3} of {1} featue\".\nChange \"The configured features {4} and {5}\" to \"The {4} and {5} configured features\".", "author": "Rwalls1", "createdAt": "2020-10-27T13:37:33Z", "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -226,6 +226,11 @@ UPDATE_DISABLED_FEATURES_ON_CONFLICT=CWWKF0046W: The configuration includes an i\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.explanation=The configuration includes an incompatible combination of features. To avoid invalid behavior, the feature manager disabled all features.\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.useraction=Specify a different version of the configured features that caused the conflict.\n \n+# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2 {6} EePlaformCommonToProgModels\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR=CWWKF0047E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}. The configuration includes an incompatible combination of {6} features that is not supported.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use compatible versions of the configured features that support the {0} or {1} programming models.", "originalCommit": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNDM2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512824366", "bodyText": "Change \"The features {2} and {3}\" to \"The {2} and {3} features\".\n\nDone\n\nChange \" The feature {2} of {0}\" to \"The {2} of {0} feature\".\nChange \"with the feature {3} of {1}\" to \"with the {3} of {1} featue\".\n\nDone the same way as the other message by move \"feature\" to be after {2} AND after {3} instead.\n\nChange \"The configured features {4} and {5}\" to \"The {4} and {5} configured features\".\n\nDone", "author": "tjwatson", "createdAt": "2020-10-27T16:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5OTA3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512699070", "bodyText": "Remove the extra space after \"indicated programming models\".", "author": "Rwalls1", "createdAt": "2020-10-27T13:39:35Z", "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -226,6 +226,11 @@ UPDATE_DISABLED_FEATURES_ON_CONFLICT=CWWKF0046W: The configuration includes an i\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.explanation=The configuration includes an incompatible combination of features. To avoid invalid behavior, the feature manager disabled all features.\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.useraction=Specify a different version of the configured features that caused the conflict.\n \n+# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2 {6} EePlaformCommonToProgModels\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR=CWWKF0047E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}. The configuration includes an incompatible combination of {6} features that is not supported.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use compatible versions of the configured features that support the {0} or {1} programming models.\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of features for the indicated programming models.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.", "originalCommit": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyNDQ4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512824482", "bodyText": "Remove the extra space after \"indicated programming models\".\n\nDone", "author": "tjwatson", "createdAt": "2020-10-27T16:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5OTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwMDU3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14496#discussion_r512700579", "bodyText": "Remove extra space after \"in the server.xml file\".", "author": "Rwalls1", "createdAt": "2020-10-27T13:41:26Z", "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -226,6 +226,11 @@ UPDATE_DISABLED_FEATURES_ON_CONFLICT=CWWKF0046W: The configuration includes an i\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.explanation=The configuration includes an incompatible combination of features. To avoid invalid behavior, the feature manager disabled all features.\n UPDATE_DISABLED_FEATURES_ON_CONFLICT.useraction=Specify a different version of the configured features that caused the conflict.\n \n+# CWWK0044E  {0} = EeProgModel1: {1} = EeProgModel2: {2} = EeConflictFeature1: {3} = EeConflictFeature2: {4} = configuredFeature1: {5} configuredFeature2 {6} EePlaformCommonToProgModels\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR=CWWKF0047E: The features {2} and {3} cannot be loaded at the same time.  The feature {2} of {0} is incompatible with the feature {3} of {1}. The configuration includes an incompatible combination of {6} features that is not supported.  The configured features {4} and {5} include an incompatible combination of features.  Your configuration is not supported.  Update the configuration to use compatible versions of the configured features that support the {0} or {1} programming models.\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of features for the indicated programming models.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n+UPDATE_INDIRECT_CONFLICT_INCOMPATIBLE_FEATURES_SAME_PLATFORM_ERROR.useraction=Try to specify a compatible version of the configured features that caused the conflict in the server.xml file.  If no other versions are available, then the configured features are not compatible with each other and cannot be configured at the same time.", "originalCommit": "d7cb7ef9dfb5f519d4f94f7dc77cb5513e60e7c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "196190a93bc7d387a2d0cd87be120437e6f57822", "url": "https://github.com/OpenLiberty/open-liberty/commit/196190a93bc7d387a2d0cd87be120437e6f57822", "message": "Updates after message review.", "committedDate": "2020-10-27T16:04:09Z", "type": "commit"}]}