{"pr_number": 14412, "pr_title": "Refactored FT 1.0 Bulkhead Tests with CountDownLatch", "pr_createdAt": "2020-10-09T16:51:42Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTcwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14412#discussion_r503181705", "bodyText": "This assertion doesn't actually do anything. Since we're catching BulkheadException, it's guaranteed that e is an instance of BulkheadException.\nThere's a similar assertion in the 2.0 test which does do an important check, because there we're catching ExecutionException and checking the type of its cause.\nIt's not a big problem and if it was the only comment I wouldn't worry about it, but in general, I would try to avoid code which looks like it does something important that it doesn't actually do.", "author": "Azquelt", "createdAt": "2020-10-12T09:59:15Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance.1.0/test/src/com/ibm/ws/microprofile/faulttolerance/test/BulkheadTest.java", "diffHunk": "@@ -249,28 +268,47 @@ public void testAsyncBulkheadQueueFull() throws InterruptedException, ExecutionE\n         Executor<Future<String>> executor = builder.buildAsync(Future.class);\n \n         Future<String>[] futures = new Future[5];\n+        CountDownLatch isRunningLatch = new CountDownLatch(2);\n+        CountDownLatch mayCompleteLatch = new CountDownLatch(1);\n+        CountDownLatch completedLatch = new CountDownLatch(4);\n         try {\n+\n+            // Create and add tasks to the executor which do not exceed the bulkhead limit\n             for (int i = 0; i < 4; i++) {\n                 String id = \"testAsyncBulkheadQueueFull\" + i;\n                 ExecutionContext context = executor.newExecutionContext(id, (Method) null, id);\n-                AsyncTestFunction callable = new AsyncTestFunction(Duration.ofMillis(2000), id);\n+                AsyncTestFunction callable = new AsyncTestFunction(Duration.ofMillis(10000), isRunningLatch, mayCompleteLatch, completedLatch, id);\n                 futures[i] = executor.execute(callable, context);\n-                System.out.println(System.currentTimeMillis() + \" Test \" + context + \" - submitted\");\n-                assertFalse(futures[i].isDone());\n-                Thread.sleep(100);\n+                System.out.println(System.currentTimeMillis() + \" Test \" + id + \" - submitted\");\n             }\n \n+            // Allow running latch to reach 0 - tasks are ready to begin execution\n+            isRunningLatch.await(5000, TimeUnit.MILLISECONDS);\n+            assertEquals(\"all tasks have not started\", 0, isRunningLatch.getCount());\n+\n+            // Non of the tasks are allowed to complete as mayCompleteLatch has not count down\n+            // First two tasks should be running, second two should be in queue\n+            for (int i = 0; i < 4; i++) {\n+                assertFalse(\"task \" + i + \" should not be complete\", futures[i].isDone());\n+            }\n+\n+            // Create and add a final task\n             String id = \"testAsyncBulkheadQueueFull4\";\n             ExecutionContext context = executor.newExecutionContext(id, (Method) null, id);\n-            AsyncTestFunction callable = new AsyncTestFunction(Duration.ofMillis(2000), id);\n+            AsyncTestFunction callable = new AsyncTestFunction(Duration.ofMillis(10000), isRunningLatch, mayCompleteLatch, completedLatch, id);\n+\n+            // Final task should be rejected from queue, and throw a Bulkhead exception\n             try {\n                 futures[4] = executor.execute(callable, context);\n                 System.out.println(System.currentTimeMillis() + \" Test \" + id + \" - submitted\");\n                 fail(\"Exception not thrown\");\n             } catch (BulkheadException e) {\n-                //expected\n+                assertTrue(\"Should fail with bulkhead exception \", e instanceof BulkheadException);", "originalCommit": "d00810fe51c000ecbc7d96496ed6da22a51d9dd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTEyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14412#discussion_r503225126", "bodyText": "Thank you for noting this, I'll get around to making the changes now!", "author": "scottcurtis2605", "createdAt": "2020-10-12T11:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzNzU0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14412#discussion_r503237545", "bodyText": "Changes have just been made to update the copyright header, and remove the assertion.", "author": "scottcurtis2605", "createdAt": "2020-10-12T11:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTcwNQ=="}], "type": "inlineReview"}, {"oid": "a38636a55185ad8512639f1c4b6b9dd8f3c2536f", "url": "https://github.com/OpenLiberty/open-liberty/commit/a38636a55185ad8512639f1c4b6b9dd8f3c2536f", "message": "Refactored BulkheadTest.java methods, testAsyncBulkhead and testAsyncBulkheadQueueFull\nto utilize CountDownLatch objects. These ensure that tasks within this test\ndo not always take 10000ms to run in the case of early completion,\nor that tests exceed 10000 ms in the case of interrupted execution.\n\nAsyncTestFunction.java was also refactored with a new constructor to\nenable the creation of an AsyncTestFunction with three CountDownLatch\nobjects. This enables the new behaviour added to BulkheadTest.java.", "committedDate": "2020-10-12T11:26:00Z", "type": "commit"}, {"oid": "8b98680207e55139c20128384b7eee14acddd9b5", "url": "https://github.com/OpenLiberty/open-liberty/commit/8b98680207e55139c20128384b7eee14acddd9b5", "message": "Updated copyright header to include last modified date.\nRemoved unnecessary exception assertion.", "committedDate": "2020-10-12T11:26:01Z", "type": "commit"}, {"oid": "8b98680207e55139c20128384b7eee14acddd9b5", "url": "https://github.com/OpenLiberty/open-liberty/commit/8b98680207e55139c20128384b7eee14acddd9b5", "message": "Updated copyright header to include last modified date.\nRemoved unnecessary exception assertion.", "committedDate": "2020-10-12T11:26:01Z", "type": "forcePushed"}]}