{"pr_number": 11910, "pr_title": "Add Allowed/ExpectedFFDC annotations for RepeatedTests", "pr_createdAt": "2020-04-23T17:18:21Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11910", "timeline": [{"oid": "3cfcd346f348752d43ece6e1c1638c9f0fceb6c2", "url": "https://github.com/OpenLiberty/open-liberty/commit/3cfcd346f348752d43ece6e1c1638c9f0fceb6c2", "message": "Add Allowed/ExpectedFFDC annotations for RepeatedTests", "committedDate": "2020-04-23T18:18:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyNDMyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414024320", "bodyText": "instead of making a public @ExpectedFFDCs annotation, lets use a package-protected annotation as an inner class as described in this article:\nhttps://dzone.com/articles/repeatable-annotations-in-java-8-1\nThat way users won't accidentally import/use @ExpectedFFDCs", "author": "aguibert", "createdAt": "2020-04-23T18:24:33Z", "path": "dev/fattest.simplicity/src/componenttest/annotation/ExpectedFFDCs.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package componenttest.annotation;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Target({ ElementType.METHOD })\n+@Retention(RUNTIME)\n+public @interface ExpectedFFDCs {", "originalCommit": "3cfcd346f348752d43ece6e1c1638c9f0fceb6c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyNTQ4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414025485", "bodyText": "This will also simplify the annotation processing code because you can just use getAnnotationsByType everywhere and not have to explicitly check for @ExpectedFFDC and @ExpectedFFDCs separately", "author": "aguibert", "createdAt": "2020-04-23T18:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyNDMyMA=="}], "type": "inlineReview"}, {"oid": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "url": "https://github.com/OpenLiberty/open-liberty/commit/d4213f039135189dcc969bb9dae904c21e7bbe0e", "message": "Add Allowed/ExpectedFFDC annotations for RepeatedTests", "committedDate": "2020-04-23T19:49:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MDQwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414080401", "bodyText": "can we make this constant value separate by underscores so it's a bit more readable?", "author": "aguibert", "createdAt": "2020-04-23T19:53:02Z", "path": "dev/fattest.simplicity/src/componenttest/annotation/AllowedFFDC.java", "diffHunk": "@@ -21,11 +21,13 @@\n public @interface AllowedFFDC {\n \n     public static final String ALL_FFDC = \"ALL_FFDC\";\n+    public static final String ALL_REPEAT_ACTIONS = \"ALLREPEATACTIONS\";", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MDYxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414080612", "bodyText": "same comment here about underscores", "author": "aguibert", "createdAt": "2020-04-23T19:53:22Z", "path": "dev/fattest.simplicity/src/componenttest/annotation/ExpectedFFDC.java", "diffHunk": "@@ -22,6 +22,10 @@\n @Target({ ElementType.METHOD })\n @Retention(RUNTIME)\n public @interface ExpectedFFDC {\n+\n+    public static final String ALL_REPEAT_ACTIONS = \"ALLREPEATACTIONS\";", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MTI3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414081276", "bodyText": "I don't think a set is necessary here since there will only ever be one ExpectedFFDC", "author": "aguibert", "createdAt": "2020-04-23T19:54:30Z", "path": "dev/fattest.simplicity/src/componenttest/custom/junit/runner/FATRunner.java", "diffHunk": "@@ -622,46 +622,53 @@ private String getFFDCHeader(RemoteFile ffdcLogFile) throws Exception {\n     public List<String> getExpectedFFDCAnnotationFromTest(FrameworkMethod m) {\n \n         ArrayList<String> annotationListPerClass = new ArrayList<String>();\n-        ExpectedFFDC ffdc = m.getAnnotation(ExpectedFFDC.class);\n-        if (ffdc != null) {\n-            String[] exceptionClasses = ffdc.value();\n-            for (String exceptionClass : exceptionClasses) {\n-                annotationListPerClass.add(exceptionClass);\n+\n+        Set<ExpectedFFDC> ffdcs = new HashSet<ExpectedFFDC>();", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MjAzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414082036", "bodyText": "Please add some javadoc that describes how this attr works here and in ExpectedFFDC", "author": "aguibert", "createdAt": "2020-04-23T19:55:40Z", "path": "dev/fattest.simplicity/src/componenttest/annotation/AllowedFFDC.java", "diffHunk": "@@ -21,11 +21,13 @@\n public @interface AllowedFFDC {\n \n     public static final String ALL_FFDC = \"ALL_FFDC\";\n+    public static final String ALL_REPEAT_ACTIONS = \"ALLREPEATACTIONS\";\n \n     /**\n      * A string array fully-qualified FFDC exception class names.\n      * If no value is specified, any FFDCs are allowed.\n      */\n     String[] value() default { ALL_FFDC };\n \n+    String repeatAction() default ALL_REPEAT_ACTIONS;", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MzgwMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414083800", "bodyText": "Also, should this be an array of String instead of a single String?", "author": "aguibert", "createdAt": "2020-04-23T19:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MjAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MzE0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414083141", "bodyText": "CURRENT_REPEAT_ACTION will be null when no RepeatTests are defined, so we need to account for null here", "author": "aguibert", "createdAt": "2020-04-23T19:57:27Z", "path": "dev/fattest.simplicity/src/componenttest/custom/junit/runner/FATRunner.java", "diffHunk": "@@ -622,46 +622,53 @@ private String getFFDCHeader(RemoteFile ffdcLogFile) throws Exception {\n     public List<String> getExpectedFFDCAnnotationFromTest(FrameworkMethod m) {\n \n         ArrayList<String> annotationListPerClass = new ArrayList<String>();\n-        ExpectedFFDC ffdc = m.getAnnotation(ExpectedFFDC.class);\n-        if (ffdc != null) {\n-            String[] exceptionClasses = ffdc.value();\n-            for (String exceptionClass : exceptionClasses) {\n-                annotationListPerClass.add(exceptionClass);\n+\n+        Set<ExpectedFFDC> ffdcs = new HashSet<ExpectedFFDC>();\n+        ffdcs.add(m.getAnnotation(ExpectedFFDC.class));\n+        for (ExpectedFFDC ffdc : ffdcs) {\n+            if (ffdc != null) {\n+                if (ffdc.repeatAction().equals(ExpectedFFDC.ALL_REPEAT_ACTIONS) || RepeatTestFilter.CURRENT_REPEAT_ACTION.equals(ffdc.repeatAction())) {", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDg4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11910#discussion_r414084882", "bodyText": "Same set of comments here for AllowedFFDC as in ExpectedFFDC", "author": "aguibert", "createdAt": "2020-04-23T20:00:12Z", "path": "dev/fattest.simplicity/src/componenttest/custom/junit/runner/FATRunner.java", "diffHunk": "@@ -622,46 +622,53 @@ private String getFFDCHeader(RemoteFile ffdcLogFile) throws Exception {\n     public List<String> getExpectedFFDCAnnotationFromTest(FrameworkMethod m) {\n \n         ArrayList<String> annotationListPerClass = new ArrayList<String>();\n-        ExpectedFFDC ffdc = m.getAnnotation(ExpectedFFDC.class);\n-        if (ffdc != null) {\n-            String[] exceptionClasses = ffdc.value();\n-            for (String exceptionClass : exceptionClasses) {\n-                annotationListPerClass.add(exceptionClass);\n+\n+        Set<ExpectedFFDC> ffdcs = new HashSet<ExpectedFFDC>();\n+        ffdcs.add(m.getAnnotation(ExpectedFFDC.class));\n+        for (ExpectedFFDC ffdc : ffdcs) {\n+            if (ffdc != null) {\n+                if (ffdc.repeatAction().equals(ExpectedFFDC.ALL_REPEAT_ACTIONS) || RepeatTestFilter.CURRENT_REPEAT_ACTION.equals(ffdc.repeatAction())) {\n+                    String[] exceptionClasses = ffdc.value();\n+                    for (String exceptionClass : exceptionClasses) {\n+                        annotationListPerClass.add(exceptionClass);\n+                    }\n+                }\n             }\n         }\n+\n         return annotationListPerClass;\n \n     }\n \n     private Set<String> getAllowedFFDCAnnotationFromTest(FrameworkMethod m) {\n \n         Set<String> annotationListPerClass = new HashSet<String>();\n-        AllowedFFDC methodFFDC = m.getAnnotation(AllowedFFDC.class);\n-        if (methodFFDC != null) {\n-            String[] exceptionClasses = methodFFDC.value();\n-            for (String exceptionClass : exceptionClasses) {\n-                annotationListPerClass.add(exceptionClass);\n-            }\n-        }\n \n+        // Method\n+        Set<AllowedFFDC> ffdcs = new HashSet<AllowedFFDC>();", "originalCommit": "d4213f039135189dcc969bb9dae904c21e7bbe0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3da44d2ffbdb032c7503f18595764128a3c7dde", "url": "https://github.com/OpenLiberty/open-liberty/commit/c3da44d2ffbdb032c7503f18595764128a3c7dde", "message": "Add Allowed/ExpectedFFDC annotations for RepeatedTests", "committedDate": "2020-04-23T20:28:30Z", "type": "commit"}, {"oid": "c3da44d2ffbdb032c7503f18595764128a3c7dde", "url": "https://github.com/OpenLiberty/open-liberty/commit/c3da44d2ffbdb032c7503f18595764128a3c7dde", "message": "Add Allowed/ExpectedFFDC annotations for RepeatedTests", "committedDate": "2020-04-23T20:28:30Z", "type": "forcePushed"}]}