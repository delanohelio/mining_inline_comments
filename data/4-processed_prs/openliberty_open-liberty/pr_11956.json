{"pr_number": 11956, "pr_title": "Issue 10519: Add automatic certificate checker for ACME", "pr_createdAt": "2020-04-27T22:33:47Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11956", "timeline": [{"oid": "7be671fcee2edd5a729bd6897d34e24f8283a884", "url": "https://github.com/OpenLiberty/open-liberty/commit/7be671fcee2edd5a729bd6897d34e24f8283a884", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-04-28T23:35:52Z", "type": "forcePushed"}, {"oid": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "url": "https://github.com/OpenLiberty/open-liberty/commit/2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-04-29T00:31:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTI1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r418671259", "bodyText": "change\nThe certificate will expire on {1}.\nto\nThe certificate expires on {1}.", "author": "dmuelle", "createdAt": "2020-05-01T18:22:58Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -206,3 +206,19 @@ CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain\n CWPKI2045W=CWPKI2045W: The certificate with {0} serial number that is signed by the ACME certificate authority at the {1} URI is not valid until {2}.\n CWPKI2045W.explanation=The valid period on the certificate is in the future. SSL/TLS requests fail until the current date and time are within the range that is specified by the valid period on the certificate.\n CWPKI2045W.useraction=Update the local time on the server if the time is incorrect.\n+\n+CWPKI2052W=CWPKI2052W: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate will expire on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.", "originalCommit": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MjEzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r418672138", "bodyText": "change\nThe ACME Service will continue to request a new certificate until it is successful.\nto\nThe ACME Service continues to request a new certificate until a new certificate is issued.", "author": "dmuelle", "createdAt": "2020-05-01T18:24:54Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -206,3 +206,19 @@ CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain\n CWPKI2045W=CWPKI2045W: The certificate with {0} serial number that is signed by the ACME certificate authority at the {1} URI is not valid until {2}.\n CWPKI2045W.explanation=The valid period on the certificate is in the future. SSL/TLS requests fail until the current date and time are within the range that is specified by the valid period on the certificate.\n CWPKI2045W.useraction=Update the local time on the server if the time is incorrect.\n+\n+CWPKI2052W=CWPKI2052W: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate will expire on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2052W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful.", "originalCommit": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MzIwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r418673205", "bodyText": "change\nThe ACME Service will continue to request a new certificate until it is successful. SSL/TLS requests will fail until a new certificate request is successful.\nto\nThe ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.", "author": "dmuelle", "createdAt": "2020-05-01T18:27:10Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -206,3 +206,19 @@ CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain\n CWPKI2045W=CWPKI2045W: The certificate with {0} serial number that is signed by the ACME certificate authority at the {1} URI is not valid until {2}.\n CWPKI2045W.explanation=The valid period on the certificate is in the future. SSL/TLS requests fail until the current date and time are within the range that is specified by the valid period on the certificate.\n CWPKI2045W.useraction=Update the local time on the server if the time is incorrect.\n+\n+CWPKI2052W=CWPKI2052W: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate will expire on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2052W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful.\n+CWPKI2052W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2053E=CWPKI2053E: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2053E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful. SSL/TLS requests will fail until a new certificate request is successful.", "originalCommit": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mzg4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r418673887", "bodyText": "change\nThe ACME Service detected that the certificate needed to be replaced and successfully requested a new certificate.\nto\nThe ACME Service detected that the certificate was set to expire and successfully requested a new certificate.", "author": "dmuelle", "createdAt": "2020-05-01T18:28:36Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -206,3 +206,19 @@ CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain\n CWPKI2045W=CWPKI2045W: The certificate with {0} serial number that is signed by the ACME certificate authority at the {1} URI is not valid until {2}.\n CWPKI2045W.explanation=The valid period on the certificate is in the future. SSL/TLS requests fail until the current date and time are within the range that is specified by the valid period on the certificate.\n CWPKI2045W.useraction=Update the local time on the server if the time is incorrect.\n+\n+CWPKI2052W=CWPKI2052W: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate will expire on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2052W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful.\n+CWPKI2052W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2053E=CWPKI2053E: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2053E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful. SSL/TLS requests will fail until a new certificate request is successful.\n+CWPKI2053E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2054I=CWPKI2054I: The ACME Service automatically renewed the certificate authority signed certificate before the previous certificate expired.\n+CWPKI2054I.explanation=The ACME Service detected that the certificate needed to be replaced and successfully requested a new certificate.", "originalCommit": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NDQ0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r418674441", "bodyText": "change\nThe ACME Service detected that the certificate needed to be replaced and successfully requested a new certificate.\nto\nThe ACME Service detected that the certificate was revoked and successfully requested a new certificate.", "author": "dmuelle", "createdAt": "2020-05-01T18:29:42Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -206,3 +206,19 @@ CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain\n CWPKI2045W=CWPKI2045W: The certificate with {0} serial number that is signed by the ACME certificate authority at the {1} URI is not valid until {2}.\n CWPKI2045W.explanation=The valid period on the certificate is in the future. SSL/TLS requests fail until the current date and time are within the range that is specified by the valid period on the certificate.\n CWPKI2045W.useraction=Update the local time on the server if the time is incorrect.\n+\n+CWPKI2052W=CWPKI2052W: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate will expire on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2052W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful.\n+CWPKI2052W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2053E=CWPKI2053E: The ACME Service failed to automatically renew the certificate with {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2053E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service will continue to request a new certificate until it is successful. SSL/TLS requests will fail until a new certificate request is successful.\n+CWPKI2053E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2054I=CWPKI2054I: The ACME Service automatically renewed the certificate authority signed certificate before the previous certificate expired.\n+CWPKI2054I.explanation=The ACME Service detected that the certificate needed to be replaced and successfully requested a new certificate.\n+CWPKI2054I.useraction=No action is required.\n+\n+CWPKI2055I=CWPKI2055I: The ACME Service automatically renewed the certificate authority signed certificate after the certificate was revoked.\n+CWPKI2055I.explanation=The ACME Service detected that the certificate needed to be replaced and successfully requested a new certificate.", "originalCommit": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d0621266ab009ec299e258cea2d3bdd7d7203bd", "url": "https://github.com/OpenLiberty/open-liberty/commit/8d0621266ab009ec299e258cea2d3bdd7d7203bd", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-05T16:21:24Z", "type": "forcePushed"}, {"oid": "b9d9e8957178350017581547954a20d6640551c3", "url": "https://github.com/OpenLiberty/open-liberty/commit/b9d9e8957178350017581547954a20d6640551c3", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-06T21:39:23Z", "type": "forcePushed"}, {"oid": "7278842706f1c113876df7999df8950ff25c0fd9", "url": "https://github.com/OpenLiberty/open-liberty/commit/7278842706f1c113876df7999df8950ff25c0fd9", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-07T17:56:59Z", "type": "forcePushed"}, {"oid": "4209ed88a777d99664bec85d42e00b69debb8dc4", "url": "https://github.com/OpenLiberty/open-liberty/commit/4209ed88a777d99664bec85d42e00b69debb8dc4", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-08T21:44:50Z", "type": "forcePushed"}, {"oid": "d97b67139350af9954297a685020db11f8d334dc", "url": "https://github.com/OpenLiberty/open-liberty/commit/d97b67139350af9954297a685020db11f8d334dc", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:07:16Z", "type": "forcePushed"}, {"oid": "fbc0d213e234a3d3d4c020704a78a1b81acd7ae8", "url": "https://github.com/OpenLiberty/open-liberty/commit/fbc0d213e234a3d3d4c020704a78a1b81acd7ae8", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:08:40Z", "type": "forcePushed"}, {"oid": "4e05e61b18b7f9886a713a76afe8951dbe367230", "url": "https://github.com/OpenLiberty/open-liberty/commit/4e05e61b18b7f9886a713a76afe8951dbe367230", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:31:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5OTkwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r424099901", "bodyText": "change\nThe ACME service will request a new certificate from the ACME certificate authority at the {1} URI.\nto\nThe ACME service requests a new certificate from the ACME certificate authority at the {1} URI.", "author": "dmuelle", "createdAt": "2020-05-12T23:59:23Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -285,3 +285,15 @@ CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate.\n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n+\n+CWPKI2063E=CWPKI2063E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2063E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2063E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2064I=CWPKI2064I: The certificate with the {0} serial number is revoked. The ACME service will request a new certificate from the ACME certificate authority at the {1} URI.", "originalCommit": "4e05e61b18b7f9886a713a76afe8951dbe367230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMDQwNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r424100407", "bodyText": "change\nThe ACME Service detected that the certificate was revoked and automatically requests a new certificate.\nto\nThe ACME Service detected that the certificate was revoked and automatically requested a new certificate.\nor\nhe ACME Service detects that the certificate was revoked and automatically requests a new certificate.", "author": "dmuelle", "createdAt": "2020-05-13T00:01:10Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -285,3 +285,15 @@ CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate.\n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n+\n+CWPKI2063E=CWPKI2063E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2063E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2063E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2064I=CWPKI2064I: The certificate with the {0} serial number is revoked. The ACME service will request a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2064I.explanation=The ACME Service detected that the certificate was revoked and automatically requests a new certificate.", "originalCommit": "4e05e61b18b7f9886a713a76afe8951dbe367230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26cfb4c4f35670924236ce7dce35ebc21dc23ff4", "url": "https://github.com/OpenLiberty/open-liberty/commit/26cfb4c4f35670924236ce7dce35ebc21dc23ff4", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-14T12:26:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTc0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r425151748", "bodyText": "The ACME Service detected that the certificate was revoked and automatically requests a new certificate.\nneed to match the tense between detect and request- so\nThe ACME Service detected that the certificate was revoked and automatically requested a new certificate.", "author": "dmuelle", "createdAt": "2020-05-14T13:49:46Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -293,3 +293,15 @@ CWPKI2063E.useraction=Review the provided terms of service.\n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate expires on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2065W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2066E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service will request a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=The ACME Service detected that the certificate was revoked and automatically requests a new certificate.", "originalCommit": "26cfb4c4f35670924236ce7dce35ebc21dc23ff4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MDk5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r425440990", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-05-14T21:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTc0OA=="}], "type": "inlineReview"}, {"oid": "109a476d7c7185b4407859b7daa6094b3a19b8d2", "url": "https://github.com/OpenLiberty/open-liberty/commit/109a476d7c7185b4407859b7daa6094b3a19b8d2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-14T21:27:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODIzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r426028233", "bodyText": "remove future tense-\nchange\nThe ACME service will request a new certificate from the ACME certificate authority at the {1} URI.\nto\nThe ACME service  requests a new certificate from the ACME certificate authority at the {1} URI.", "author": "dmuelle", "createdAt": "2020-05-15T20:20:47Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -293,3 +293,15 @@ CWPKI2063E.useraction=Review the provided terms of service.\n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate expires on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2065W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2066E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service will request a new certificate from the ACME certificate authority at the {1} URI.", "originalCommit": "109a476d7c7185b4407859b7daa6094b3a19b8d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1ODY3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427258671", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-19T12:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODg3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r426028875", "bodyText": "change\nThe ACME Service detected that the certificate is revoked and will automatically request a new certificate.\nto\nThe ACME Service detected that the certificate is revoked and automatically requested a new certificate.", "author": "dmuelle", "createdAt": "2020-05-15T20:22:12Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -293,3 +293,15 @@ CWPKI2063E.useraction=Review the provided terms of service.\n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate expires on {1}. The renew request error is ''{2}''. The request is scheduled to try again in {3}.\n+CWPKI2065W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The renew request error is ''{1}''. The request is scheduled to try again in {2}.\n+CWPKI2066E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service will request a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=The ACME Service detected that the certificate is revoked and will automatically request a new certificate.", "originalCommit": "109a476d7c7185b4407859b7daa6094b3a19b8d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1ODU2OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427258569", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-19T12:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODg3NQ=="}], "type": "inlineReview"}, {"oid": "6845d90e9431ea0fa38bee94f5f61dda3fc290a9", "url": "https://github.com/OpenLiberty/open-liberty/commit/6845d90e9431ea0fa38bee94f5f61dda3fc290a9", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-18T23:19:01Z", "type": "forcePushed"}, {"oid": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "url": "https://github.com/OpenLiberty/open-liberty/commit/1f77c3a044cc23674011c0bfe30e35aaf18bd666", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-19T03:41:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4ODA4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427388087", "bodyText": "The ACME Service detected that the certificate is revoked and automatically requests a new certificate.\nneed to get the verb tenses to agree- I think it wil read better like this:\nWhen the ACME Service detects that the certificate is revoked, it automatically requests a new certificate.", "author": "dmuelle", "createdAt": "2020-05-19T15:20:42Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -293,3 +294,15 @@ CWPKI2063E.useraction=Review the provided terms of service.\n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME Service failed to automatically renew the certificate with the {0} serial number. The request is scheduled to try again in {3}. The certificate expires on {1}. The renew request error is ''{2}''.\n+CWPKI2065W.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME Service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The request is scheduled to try again in {2}. The renew request error is ''{1}''.\n+CWPKI2066E.explanation=The ACME Service tried to renew a certificate but encountered an error. The ACME Service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service requests a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=The ACME Service detected that the certificate is revoked and automatically requests a new certificate.", "originalCommit": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNTE1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427535159", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-19T19:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4ODA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTM0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427389344", "bodyText": "change\nThe user has sent too many requests in a given amount of time. The amount of time remaining until the next request is allowed is {0}.\nto\nThe user sent too many requests in a given amount of time. The amount of time remaining until the next request is allowed is {0}.", "author": "dmuelle", "createdAt": "2020-05-19T15:22:22Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -32,6 +32,7 @@ REST_FORBIDDEN=Forbidden\n REST_INVALID_CONTENT_TYPE=The request's content-type header was not ''application/json''.\n REST_MISSING_OPERATION=The operation was not specified for the request.\n REST_NO_ACME_SERVICE=An AcmeProvider service was not registered.\n+REST_TOO_MANY_REQUESTS=The user has sent too many requests in a given amount of time. The amount of time remaining until the next request is allowed is {0}.", "originalCommit": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNTIxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427535215", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-19T19:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MzQzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427393436", "bodyText": "change\nIf the first renew request does not work, the certificate renewal request continues until a new certificate is received using the timing set by certCheckerErrorSchedule.\nto\nIf the first renew request does not work, the certificate renewal request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received.", "author": "dmuelle", "createdAt": "2020-05-19T15:27:39Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Time period for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request does not work, the certificate renewal request continues until a new certificate is received using the timing set by certCheckerErrorSchedule.  Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renewal.", "originalCommit": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNTgwOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427535809", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-19T19:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MzQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5NDUwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427394501", "bodyText": "does this specify an interval at which to issue renew requests or a span of time during which renewal requests occur (and beyond which they stop?)", "author": "dmuelle", "createdAt": "2020-05-19T15:29:00Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Time period for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request does not work, the certificate renewal request continues until a new certificate is received using the timing set by certCheckerErrorSchedule.  Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renewal.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Time period for the ACME CA service to check if the certificate is expiring or revoked if the first request failed. If expiring or revoked, the certificate is renewed.", "originalCommit": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NjY5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427546691", "bodyText": "The interval on which we check if we need to do a renew request. I think I didn't really finish doing this description well. I will add to it and you can give it another eyeball.", "author": "kristip17", "createdAt": "2020-05-19T19:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5NDUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5ODE3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427398170", "bodyText": "change\nDisables checking the minimum amount of time between certificate renew requests and allows immediate certificate renew requests\nto\nEnables immediate certificate renewal requests by disabling the specified minimum amount of time between renewal requests\nWhat sets the minimum that is disabled? Is a a default, or a value set by certCheckerErrorSchedule ?", "author": "dmuelle", "createdAt": "2020-05-19T15:34:09Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Time period for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request does not work, the certificate renewal request continues until a new certificate is received using the timing set by certCheckerErrorSchedule.  Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renewal.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Time period for the ACME CA service to check if the certificate is expiring or revoked if the first request failed. If expiring or revoked, the certificate is renewed.\n+\n+disableMinRenewWindow=Disable minimum renew window\n+disableMinRenewWindow.desc=Disables checking the minimum amount of time between certificate renew requests and allows immediate certificate renew requests.", "originalCommit": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMzIxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r427623215", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-05-19T21:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5ODE3MA=="}], "type": "inlineReview"}, {"oid": "e96c8b9cd9994d138a3b734aac68474f75aa9e4f", "url": "https://github.com/OpenLiberty/open-liberty/commit/e96c8b9cd9994d138a3b734aac68474f75aa9e4f", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-19T21:56:28Z", "type": "forcePushed"}, {"oid": "64968e70abbb8c9982d7eb459895bccf146c716e", "url": "https://github.com/OpenLiberty/open-liberty/commit/64968e70abbb8c9982d7eb459895bccf146c716e", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-20T21:51:55Z", "type": "forcePushed"}, {"oid": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "url": "https://github.com/OpenLiberty/open-liberty/commit/2f6b2e064a59fab0895e2e923e8f743f676cb99e", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-21T19:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODQ3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429318473", "bodyText": "The interface should specify AcmeCaException instead. The reason being, the CRRBE class is internal, and this interface is used by other components (none of which care about that exception). AcmeCaRestHandler would of course handle the CRRBE exception.", "author": "jvanhill", "createdAt": "2020-05-22T15:37:13Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java", "diffHunk": "@@ -124,5 +125,14 @@ public File createDefaultSSLCertificate(String filePath, String password, String\n \t */\n \tpublic void updateDefaultSSLCertificate(KeyStore keyStore, File keyStoreFile, @Sensitive String password)\n \t\t\tthrows CertificateException;\n+\t\n+\t/**\n+\t * Checks whether a certificate renew is allowed. If a renew just happened, the\n+\t * request will be blocked.\n+\t * \n+\t * @throws CertificateRenewRequestBlockedException\n+\t * \t\t\tIf a certificate renew just happened\n+\t */\n+\tpublic void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Nzg5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429387893", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-22T18:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODQwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429358401", "bodyText": "Did you mean to leave this TODO?", "author": "jvanhill", "createdAt": "2020-05-22T17:01:34Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the\n+ * ACME CA certificate is either expiring or revoked and renews the certificate\n+ * if necessary.\n+ */\n+public class AcmeCertCheckerTask implements Runnable {\n+\n+\tprivate static final TraceComponent tc = Tr.register(AcmeCertCheckerTask.class);\n+\n+\tprivate final AcmeProviderImpl acmeProviderImpl;\n+\n+\tprivate ScheduledFuture<?> certChecker;\n+\n+\tprivate ScheduledExecutorService service = null;\n+\t\n+\tprivate volatile boolean runningOnErrorSchedule = false;\n+\n+\tpublic AcmeCertCheckerTask(AcmeProviderImpl acmePI) {\n+\t\tacmeProviderImpl = acmePI;\n+\t}\n+\n+\t/**\n+\t * Stop the scheduler and void the ScheduledFuture\n+\t */\n+\tpublic synchronized void stop() {\n+\t\tcancel(true);\n+\t\tcertChecker = null;\n+\t}\n+\n+\t/**\n+\t * Start the certificate checker scheduled task. It will first cancel any\n+\t * existing task and then schedule a new repeating task.\n+\t * \n+\t * @param service\n+\t * @param acmeCon\n+\t */\n+\tprotected synchronized void startCertificateChecker(ScheduledExecutorService service) {\n+\t\tcancel(true);\n+\n+\t\tif (acmeProviderImpl.getAcmeConfig() == null) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc, \"Provided acmeProviderImpl.getAcmeConfig() is null, cannot start certificate checker\");\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler() == 0\n+\t\t\t\t|| (!acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t&& !acmeProviderImpl.getAcmeConfig().isRevocationCheckerEnabled())) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\"ScheduledExecutorService not started for AcmeCertChecker, it is disabled-- getCertCheckerScheduler: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler()\n+\t\t\t\t\t\t\t\t+ \", isAutoRenewOnExpiration: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t\t\t+ \", isRevocationCheckerEnabled: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().isRevocationCheckerEnabled());\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (service == null) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc, \"Provided ScheduledExecutorService is null, cannot start certificate checker\");\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.service = service;\n+\n+\t\tif (tc.isDebugEnabled()) {\n+\t\t\tTr.debug(tc, \"ScheduledExecutorService starting, time: \"\n+\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler());\n+\t\t}\n+\t\tstartRegularSchedule();\n+\t}\n+\n+\t/**\n+\t * Scheduled task to check if the current certificate is expiring or revoked. If\n+\t * it is expiring or revoked, a certificate request is made. If an exception occurs,\n+\t * it continues to run, but is rescheduled on the error schedule.\n+\t */\n+\t@Override\n+\tpublic void run() {\n+\n+\t\tboolean isExpired = false, isRevoked = false;\n+\t\tList<X509Certificate> currentCert = null;\n+\n+\t\tacmeProviderImpl.acquireWriteLock();\n+\t\ttry {\n+\t\t\tcurrentCert = acmeProviderImpl.getConfiguredDefaultCertificateChain();\n+\n+\t\t\tif (currentCert == null) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Attempted to check the current certificate, but it was null.\");\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tif (acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t&& acmeProviderImpl.isExpired(currentCert)) {\n+\t\t\t\t\tisExpired = true;\n+\t\t\t\t} else if (acmeProviderImpl.isRevoked(currentCert)) {\n+\t\t\t\t\tisRevoked = true;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (isExpired || isRevoked) {\n+\t\t\t\tif (isExpired) {\n+\t\t\t\t\tTr.info(tc, \"CWPKI2052I\", currentCert.get(0).getSerialNumber().toString(16),\n+\t\t\t\t\t\t\tcurrentCert.get(0).getNotAfter().toInstant().toString(),\n+\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getDirectoryURI());\n+\t\t\t\t} else if (isRevoked) {\n+\t\t\t\t\tTr.info(tc, \"CWPKI2067I\", currentCert.get(0).getSerialNumber().toString(16),\n+\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getDirectoryURI());\n+\t\t\t\t}\n+\t\t\t\tacmeProviderImpl.renewCertificate();\n+\t\t\t} else {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\"ACME automatic certificate checker verified that the ACME CA cert is valid. Next check is \"\n+\t\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler() + \"ms. SN is \"\n+\t\t\t\t\t\t\t\t\t+ currentCert.get(0).getSerialNumber().toString(16));\n+\t\t\t\t}\n+\n+\t\t\t\tif (runningOnErrorSchedule) {\n+\t\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\t\"ACME automatic certificate checker was running on error time, but we have a valid certificate, swap back to the regular schedule\");\n+\t\t\t\t\t}\n+\t\t\t\t\tstartRegularSchedule();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t}\n+\n+\t\t} catch (Throwable t) {\n+\t\t\ttry {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Requested a new certificate, but request failed.\", t);\n+\t\t\t\t}\n+\t\t\t\tif (currentCert == null) {\n+\t\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\t\"Attempted to check the current certificate, but it was null. Stay on regular schedule.\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tString sn = currentCert.get(0).getSerialNumber().toString(16);\n+\t\t\t\t\tif (isExpired) {\n+\t\t\t\t\t\tTr.warning(tc, \"CWPKI2065W\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\",\n+\t\t\t\t\t\t\t\tcurrentCert.get(0).getNotAfter().toInstant().toString(), t);\n+\t\t\t\t\t} else if (isRevoked) {\n+\t\t\t\t\t\tTr.error(tc, \"CWPKI2066E\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\", t);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tTr.warning(tc, \"CWPKI2068W\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\", t);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tcancel(false);\n+\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Certificate request failed, swapping to the error schedule: \"\n+\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler());\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tstartErrorSchedule();\n+\t\t\t}\n+\n+\t\t} finally {\n+\t\t\tacmeProviderImpl.releaseWriteLock();\n+\n+\t\t\t// to-do: Can we fall into a hole where we canceled the previous schedule and", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Nzk0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429387948", "bodyText": "Removed", "author": "kristip17", "createdAt": "2020-05-22T18:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDA3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429360077", "bodyText": "Weird that we are using junit.framework.Assert and org.junit.Assert", "author": "jvanhill", "createdAt": "2020-05-22T17:05:40Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java", "diffHunk": "@@ -12,11 +12,13 @@\n \n import static junit.framework.Assert.assertEquals;\n import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNotNull;\n import static junit.framework.Assert.fail;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4OTM4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429389381", "bodyText": "Manually changed the imports to org.junit.Assert.", "author": "kristip17", "createdAt": "2020-05-22T18:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429361767", "bodyText": "assertNotSame checks whether they are the same exact instance, not that they are equivalent. You may want to assert that the serials are not the same number (not instance)", "author": "jvanhill", "createdAt": "2020-05-22T17:09:51Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -347,14 +362,302 @@ public void serverRenewOnRestart() throws Exception {\n \t\t\tassertNotSame(\"The certificate should have been marked as expired at startup and renewed.\",\n \t\t\t\t\t((X509Certificate) startingCertificateChain[0]).getSerialNumber(),\n \t\t\t\t\t((X509Certificate) endingCertificateChain[0]).getSerialNumber());\n+\n+\t\t\tassertNotNull(\"Should log  message that the certificate was renewed\",\n+\t\t\t\t\tserver.waitForStringInLogUsingMark(\"CWPKI2052I\"));\n \t\t} finally {\n-\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: Shutdown.\");\n \n \t\t\t/*\n \t\t\t * Stop the server.\n \t\t\t */\n \t\t\tserver.stopServer(\"CWPKI2055W\"); // we are running with and intentionally short renewBeforeExpiration.\n \t\t}\n \n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 3: Start with a very short renew period and short cert checker time out,\n+\t\t * causing a renew request at runtime.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(),\n+\t\t\t\t\t\"TEST 3: Restart with renew time close to validity period and short cert checker.\");\n+\n+\t\t\tconfiguration.getAcmeCA().setCertCheckerSchedule((timeBufferToExpire + 1000) + \"ms\");\n+\t\t\tconfiguration.getAcmeCA().setCertCheckerSchedule(AcmeConstants.RENEW_CERT_MIN + \"ms\");\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, DOMAINS1);\n+\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server got a new certificate at startup\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotSame(\"The certificate should have been marked as expired at startup and renewed.\",", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjkwMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429362900", "bodyText": "assertThat(value, not(equal(othervalue)))", "author": "jvanhill", "createdAt": "2020-05-22T17:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5MDU2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429390563", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-22T18:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjI5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429362291", "bodyText": "methodName could be replaced by testName.getMethodName()", "author": "jvanhill", "createdAt": "2020-05-22T17:11:05Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -119,6 +133,7 @@ public void serverBelowMinRenew() throws Exception {\n \n \t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\",\n \t\t\t\t\tserver.waitForStringInLog(\"CWPKI2051W\"));\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n \n \t\t} finally {\n \t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5MTUzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429391536", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mzg4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429363882", "bodyText": "Did you mean to leave this TODO?", "author": "jvanhill", "createdAt": "2020-05-22T17:14:49Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java", "diffHunk": "@@ -139,7 +143,7 @@ public static void afterClass() throws Exception {\n \t\t/*\n \t\t * Stop the server.\n \t\t */\n-\t\tserver.stopServer();\n+\t\tserver.stopServer(\"CWPKI2058W\"); // TODO -- check failure revocation \"soft error\" msg", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzg1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407853", "bodyText": "Sort of -- I did see this again while running the test. I will open an issue to track separately and remove the todo.", "author": "kristip17", "createdAt": "2020-05-22T18:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mzg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTU0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429365544", "bodyText": "Not sure about this. Our goal was to have the CAContainer's be identical. Why are we stopping the challenge server? If we are doing it to stop the mock DNS server, then we should name it \"stopDnsServer()\" or something similar. The CAContainer should have a method that throws UnsupportedOperationException for any CAContainer impls that can't stop the DNS.\nSee getOcspResponderUrl().", "author": "jvanhill", "createdAt": "2020-05-22T17:18:49Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java", "diffHunk": "@@ -120,6 +123,16 @@ public void stop() {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n+\t\n+\tpublic void stopChallengeServer() {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5Mjg5NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429392894", "bodyText": "I added this so I could test the Scheduler hitting a failing condition. I tried restarting the Pebble Container, but it could come up with a different Directory URI port. Restarting the challenge server allowed the scheduler to fail on a renew request and then succeed after the challenge server was restarted. But I will update the name and imp.", "author": "kristip17", "createdAt": "2020-05-22T18:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTcyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429365720", "bodyText": "The same as stopChallengeServer().", "author": "jvanhill", "createdAt": "2020-05-22T17:19:16Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java", "diffHunk": "@@ -120,6 +123,16 @@ public void stop() {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n+\t\n+\tpublic void stopChallengeServer() {\n+\t\tchalltestsrv.stop();\n+\t\tLog.info(PebbleContainer.class, \"stopChallengeServer\", \"Challenge server stopped.\");\n+\t}\n+\t\n+\tpublic void startChallengeServer() {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzQyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407420", "bodyText": "Update name and implementation, same as stop.", "author": "kristip17", "createdAt": "2020-05-22T18:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjkwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429366903", "bodyText": "Probably should define whether this in ms or s or whatever unit. The set / get methods should be updated as well to make it clear.", "author": "jvanhill", "createdAt": "2020-05-22T17:21:43Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.internal.exceptions;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+\n+/**\n+ * Exception that is thrown when a certificate renew request occurs too\n+ * soon after the prior request.\n+ */\n+@Trivial\n+public class CertificateRenewRequestBlockedException extends AcmeCaException {\n+\n+\tprivate static final long serialVersionUID = -2381844611991560528L;\n+\t\n+\tprivate long timeLeft = -1;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzI4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407288", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-05-22T18:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzI3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429367271", "bodyText": "description", "author": "jvanhill", "createdAt": "2020-05-22T17:22:32Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.internal.exceptions;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+\n+/**\n+ * Exception that is thrown when a certificate renew request occurs too\n+ * soon after the prior request.\n+ */\n+@Trivial\n+public class CertificateRenewRequestBlockedException extends AcmeCaException {\n+\n+\tprivate static final long serialVersionUID = -2381844611991560528L;\n+\t\n+\tprivate long timeLeft = -1;\n+\n+\t/**\n+\t * Constructs a new exception with the specified detail message. The cause\n+\t * is not initialized, and may subsequently be initialized by a call to\n+\t * initCause.\n+\t * \n+\t * @param message\n+\t *            the detail message. The detail message is saved for later\n+\t *            retrieval by the {@link #getMessage()} method.\n+\t */\n+\tpublic CertificateRenewRequestBlockedException(String message) {\n+\t\tsuper(message);\n+\t}\n+\n+\t/**\n+\t * Constructs a new exception with the specified detail message and cause.\n+\t * <p/>\n+\t * Note that the detail message associated with cause is not automatically\n+\t * incorporated in this exception's detail message.\n+\t * \n+\t * @param message\n+\t *            the detail message (which is saved for later retrieval by the\n+\t *            {@link #getMessage()} method).\n+\t * @param cause\n+\t *            the cause (which is saved for later retrieval by the\n+\t *            {@link #getCause()} method). (A null value is permitted, and\n+\t *            indicates that the cause is nonexistent or unknown.)\n+\t */\n+\tpublic CertificateRenewRequestBlockedException(String message, Throwable cause) {\n+\t\tsuper(message, cause);\n+\t}\n+\t\n+\t/**\n+\t * Set the amount of time left before the next renewal request is allowed.\n+\t * \n+\t * @param tf", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzIzMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407232", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429368070", "bodyText": "I would maybe make the constructor for CRRBE take the time remaining so it is always forced to be set. Doubt anywhere else will use this exception though.", "author": "jvanhill", "createdAt": "2020-05-22T17:24:22Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -881,5 +966,71 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * Set the Scheduler service ref\n+\t */\n+\t@Reference(name = \"scheduledExecutorService\", service = ScheduledExecutorService.class, target = \"(deferrable=false)\")\n+\tprotected void setScheduledExecutorService(ServiceReference<ScheduledExecutorService> ref) {\n+\t\tscheduledExecutorServiceRef.setReference(ref);\n+\t}\n+\n+\t/**\n+\t * Unset the scheduler ref and stop the certificate checker\n+\t */\n+\tprotected void unsetScheduledExecutorService(ServiceReference<ScheduledExecutorService> ref) {\n+\t\tif (acmeCertChecker != null) {\n+\t\t\tacmeCertChecker.stop();\n+\t\t}\n+\t\tscheduledExecutorServiceRef.unsetReference(ref);\n+\t}\n+\n+\t/**\n+\t * Get the scheduler ref\n+\t */\n+\tpublic ScheduledExecutorService getScheduledExecutorService() {\n+\t\treturn scheduledExecutorServiceRef.getService();\n+\t}\n \n+    /**\n+     * Acquire the writer lock. To be used to prevent concurrent certificate\n+     * renew or revoke requests. Must be used with releaseWriteLock\n+     */\n+    @Trivial\n+    void acquireWriteLock() {\n+\t\trwRenewCertLock.writeLock().lock();\n+    }\n+    \n+    /**\n+     * Release the writer lock. To be used to prevent concurrent certificate\n+     * renew or revoke requests. Must be used with acquireWriteLock\n+     */\n+    @Trivial\n+    void releaseWriteLock() {\n+    \trwRenewCertLock.writeLock().unlock();\n+    }\n+    \n+    /**\n+     * Checks whether certificate renewal is allowed. It is allowed if:\n+     * <li>Certificate renewal checking is disabled</li>\n+     * <li>This is the first certificate request</li>\n+     * <li>Enough time has passed since the last renewal</li>\n+     * \n+     * If certificate renewal is not allowed, an exception is thrown.\n+     */\n+    @Override\n+    public void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException {\n+    \tlong timeDiff = System.currentTimeMillis() - lastCertificateRenewalTimestamp;\n+    \tif (acmeConfig.isDisableMinRenewWindow() || lastCertificateRenewalTimestamp == -1 || (timeDiff >= AcmeConstants.RENEW_CERT_MIN)) {\n+    \t\treturn;\n+    \t}\n+\n+    \tif (tc.isDebugEnabled()) {\n+    \t\tTr.debug(tc, \"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);\n+    \t}\n+    \tCertificateRenewRequestBlockedException cr = new CertificateRenewRequestBlockedException(\"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407175", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTQxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369410", "bodyText": "I think you can define a minimum in the metatype. Not sure if that would work better. If you don't do it there, should you have a warning message here instead of debug?", "author": "jvanhill", "createdAt": "2020-05-22T17:27:24Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n+\t\t\t\t}\n+\t\t\t\tthis.certCheckerScheduler = 0L;\n+\t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n+\t\t\t\t/*\n+\t\t\t\t * Too low of a timeout, reset to the min renew allowed\n+\t\t\t\t */\n+\t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);\n+\t\t\t\t}\n+\t\t\t} else { \n+\t\t\t\tthis.certCheckerScheduler = certCheckerScheduler;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\n+\t/**\n+\t * Get the certCheckerErrorScheduler\n+\t * @return certCheckerErrorScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerErrorScheduler() {\n+\t\treturn certCheckerErrorScheduler;\n+\t}\n+\n+\t/**\n+\t * Set the certCheckerErrorScheduler\n+\t * If it is set below the min renewal time, reset to the min renewal time\n+\t *\n+\t * @param certCheckerErrorScheduler\n+\t */\n+\tpublic void setCertCheckerErrorScheduler(Long certCheckerErrorScheduler) {\n+\t\tif (certCheckerErrorScheduler != null) {\n+\t\t\tif (certCheckerErrorScheduler < AcmeConstants.RENEW_CERT_MIN) {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5OTcyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429399727", "bodyText": "So you can, you learn something new every day", "author": "kristip17", "createdAt": "2020-05-22T18:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTc2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369764", "bodyText": "Warning?", "author": "jvanhill", "createdAt": "2020-05-22T17:28:15Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNTIyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429405229", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTgzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369836", "bodyText": "Warning?", "author": "jvanhill", "createdAt": "2020-05-22T17:28:25Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n+\t\t\t\t}\n+\t\t\t\tthis.certCheckerScheduler = 0L;\n+\t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n+\t\t\t\t/*\n+\t\t\t\t * Too low of a timeout, reset to the min renew allowed\n+\t\t\t\t */\n+\t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNTI2OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429405268", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDI1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370251", "bodyText": "A few methods in here without javadoc", "author": "jvanhill", "createdAt": "2020-05-22T17:29:25Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjQ1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406457", "bodyText": "Added javadoc", "author": "kristip17", "createdAt": "2020-05-22T18:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDQ1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370455", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param acmeCon", "author": "jvanhill", "createdAt": "2020-05-22T17:29:53Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the\n+ * ACME CA certificate is either expiring or revoked and renews the certificate\n+ * if necessary.\n+ */\n+public class AcmeCertCheckerTask implements Runnable {\n+\n+\tprivate static final TraceComponent tc = Tr.register(AcmeCertCheckerTask.class);\n+\n+\tprivate final AcmeProviderImpl acmeProviderImpl;\n+\n+\tprivate ScheduledFuture<?> certChecker;\n+\n+\tprivate ScheduledExecutorService service = null;\n+\t\n+\tprivate volatile boolean runningOnErrorSchedule = false;\n+\n+\tpublic AcmeCertCheckerTask(AcmeProviderImpl acmePI) {\n+\t\tacmeProviderImpl = acmePI;\n+\t}\n+\n+\t/**\n+\t * Stop the scheduler and void the ScheduledFuture\n+\t */\n+\tpublic synchronized void stop() {\n+\t\tcancel(true);\n+\t\tcertChecker = null;\n+\t}\n+\n+\t/**\n+\t * Start the certificate checker scheduled task. It will first cancel any\n+\t * existing task and then schedule a new repeating task.\n+\t * \n+\t * @param service\n+\t * @param acmeCon", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjgxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406814", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDk4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370981", "bodyText": "AcmeCertCheckerTask", "author": "jvanhill", "createdAt": "2020-05-22T17:30:59Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjg2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406861", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDk4MQ=="}], "type": "inlineReview"}, {"oid": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "url": "https://github.com/OpenLiberty/open-liberty/commit/4c430e4a4aa51c28870fe00d27f787c59b50cc25", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-22T22:10:45Z", "type": "forcePushed"}, {"oid": "3816e4fc8368dd22b2fc4800f98bcd1363d536f2", "url": "https://github.com/OpenLiberty/open-liberty/commit/3816e4fc8368dd22b2fc4800f98bcd1363d536f2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-22T22:21:11Z", "type": "forcePushed"}, {"oid": "20b9ee25148a21b80557b3d3c5873fcc63c93785", "url": "https://github.com/OpenLiberty/open-liberty/commit/20b9ee25148a21b80557b3d3c5873fcc63c93785", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-25T03:07:33Z", "type": "forcePushed"}, {"oid": "f7380198621b5ef646f62d5cc58d92900f8460d3", "url": "https://github.com/OpenLiberty/open-liberty/commit/f7380198621b5ef646f62d5cc58d92900f8460d3", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-25T03:36:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0OTM0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430549342", "bodyText": "If expiring or revoked, the certificate is renewed\nShould this be\n`If the certificate is expiring or revoked, the Acme CA service issues a certificate  renew request.'", "author": "dmuelle", "createdAt": "2020-05-26T16:32:58Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request fails, the certificate renew request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received. Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renew requests.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzODg4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430638887", "bodyText": "Yes, changed.", "author": "kristip17", "createdAt": "2020-05-26T19:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0OTM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MjkyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430552929", "bodyText": "Interval for the ACME CA service to check if the certificate is expiring or revoked after the first renew request failed using the certCheckerSchedule property interval\nThis is a little confusing- does it mean that this is interval at which the service checks for an expiring or revoked certificate after a failed renew request? If so, why? If there's been a renew request, then hasn't the service already determined that the certificate is expiring or revoked? Or maybe if the certCheckerSchedule detects an \"expiring\" certificate, this checks to make sure it hasn't actually expired since the failed renew request? Maybe I'm just reading it wrong", "author": "dmuelle", "createdAt": "2020-05-26T16:38:34Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request fails, the certificate renew request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received. Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renew requests.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked after the first renew request failed using the certCheckerSchedule property interval. The certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. ", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNzIxOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430637218", "bodyText": "I rewrote it -- does that help? Basically, we have a background thread that wakes up on an interval defined by certCheckerSchedule. If the certificate is expiring or revoked, we request a new one. If that request fails, we'll change the interval to be certCheckerErrorSchedule. So normal schedule is daily, but if we need a new cert, we can swap to hourly so we hopefully get a new certificate in time/faster.", "author": "kristip17", "createdAt": "2020-05-26T18:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MjkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Mzk5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430553996", "bodyText": "for consistency with other messages in this file, change renewal requests to renew requests", "author": "dmuelle", "createdAt": "2020-05-26T16:39:52Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked. If expiring or revoked, the certificate is renewed. If the first renew request fails, the certificate renew request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received. Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renew requests.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked after the first renew request failed using the certCheckerSchedule property interval. The certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. \n+\n+disableMinRenewWindow=Disable minimum renew window\n+disableMinRenewWindow.desc=Enables immediate certificate renewal requests by disabling the specified minimum amount of time between renewal requests. The minimum renewal time is to 15 seconds.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzODk4NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430638984", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-26T19:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Mzk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MDQ1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430560456", "bodyText": "change\nThe existing account key pair file did not back up during while the account key pair renewal. \nto\nThe existing account key pair file did not back up during the account key pair renewal.", "author": "dmuelle", "createdAt": "2020-05-26T16:47:58Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -230,11 +231,11 @@ CWPKI2048I=CWPKI2048I: The account key pair renewal is successful. The old accou\n CWPKI2048I.explanation=The previous account key pair is no longer associated with the account and is backed up to a file. The new account key pair replaced the old account key pair file.\n CWPKI2048I.useraction=No action is required.\n \n-CWPKI2049E=CWPKI2049E: The account key pair didn''t renew or restore to the existing key pair file. Manually replace the {0} account key pair file with the {1} account key pair file.\n+CWPKI2049E=CWPKI2049E: The account key pair did not renew or restore to the existing key pair file. Manually replace the {0} account key pair file with the {1} account key pair file.\n CWPKI2049E.explanation=The key pair didn't renew or restore to the old key pair file.\n CWPKI2049E.useraction=Manually replace the account key pair files as directed in the message.\n \n-CWPKI2050E=CWPKI2050E: The existing account key pair file didn''t back up during while the account key pair renewal. The error is ''{0}''.\n+CWPKI2050E=CWPKI2050E: The existing account key pair file did not back up during while the account key pair renewal. The error is ''{0}''.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzOTA2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430639061", "bodyText": "Changed.", "author": "kristip17", "createdAt": "2020-05-26T19:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MDQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MTE3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430561173", "bodyText": "Certificate revocation status checking did not create a CertPathValidator to validate the certificate.\nwhat is CertPathValidator ? Is it a property?, If so\nCertificate revocation status checking did not create a value for the CertPathValidator property to validate the certificate.", "author": "dmuelle", "createdAt": "2020-05-26T16:49:11Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -262,7 +263,7 @@ CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial nu\n CWPKI2056W.explanation=The validity period is shorter than the minimum renew time. The certificate expires before a new certificate is requested.\n CWPKI2056W.useraction=To avoid certificate expiration, request a certificate with a longer validity period. If the certificate authority supports a custom validity period, set the validFor property in the server configuration.\n \n-CWPKI2057E=CWPKI2057E: Certificate revocation status checking didn''t create a CertPathValidator to validate the certificate. The error is ''{0}''.\n+CWPKI2057E=CWPKI2057E: Certificate revocation status checking did not create a CertPathValidator to validate the certificate. The error is ''{0}''.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NzAzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430667037", "bodyText": "Updated it -- it refers to constructing a java.security.cert.CertPathValidator instance", "author": "kristip17", "createdAt": "2020-05-26T19:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MTE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MjE4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430562189", "bodyText": "Change  SSL/TLS requests to  SSL and TLS requests", "author": "dmuelle", "createdAt": "2020-05-26T16:50:54Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -274,23 +275,50 @@ CWPKI2059I=CWPKI2059I: Certificate revocation status checking found that the cer\n CWPKI2059I.explanation=The ACME service found that the certificate was marked revoked by either a CRL or OSCP responder. \n CWPKI2059I.useraction=No action is required.\n \n-CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number wasn''t retrieved. The error is: ''{1}''.\n+CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number was not retrieved. The error is: ''{1}''.\n CWPKI2060E.explanation=The OCSP URL was not retrieved.\n CWPKI2060E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n-CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number weren''t retrieved. The error is ''{1}''.\n+CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number were not retrieved. The error is ''{1}''.\n CWPKI2061E.explanation=The CRL distribution points were not retrieved.\n CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n \n-\n CWPKI2063E=CWPKI2063E: The ACME certificate authority at the {0} URI updated its terms of service and now requires the user to agree to the new terms of service at the following URI before it processes any further requests: {1}\n CWPKI2063E.explanation=The certificate authority updated its terms of service and requires user interaction.\n CWPKI2063E.useraction=Review the provided terms of service.\n \n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n-CWPKI2064I.useraction=No action is required.\n\\ No newline at end of file\n+CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME service failed to automatically renew the certificate with the {0} serial number. The request is scheduled to try again in {1}. The certificate expires on {2}. The renew request error is ''{3}''.\n+CWPKI2065W.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The request is scheduled to try again in {1}. The renew request error is ''{2}''.\n+CWPKI2066E.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzOTkzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430639934", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-26T19:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MjE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzAyNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430563025", "bodyText": "Change SSL/TLS requests to SSL and TLS requests", "author": "dmuelle", "createdAt": "2020-05-26T16:52:24Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -274,23 +275,50 @@ CWPKI2059I=CWPKI2059I: Certificate revocation status checking found that the cer\n CWPKI2059I.explanation=The ACME service found that the certificate was marked revoked by either a CRL or OSCP responder. \n CWPKI2059I.useraction=No action is required.\n \n-CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number wasn''t retrieved. The error is: ''{1}''.\n+CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number was not retrieved. The error is: ''{1}''.\n CWPKI2060E.explanation=The OCSP URL was not retrieved.\n CWPKI2060E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n-CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number weren''t retrieved. The error is ''{1}''.\n+CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number were not retrieved. The error is ''{1}''.\n CWPKI2061E.explanation=The CRL distribution points were not retrieved.\n CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n \n-\n CWPKI2063E=CWPKI2063E: The ACME certificate authority at the {0} URI updated its terms of service and now requires the user to agree to the new terms of service at the following URI before it processes any further requests: {1}\n CWPKI2063E.explanation=The certificate authority updated its terms of service and requires user interaction.\n CWPKI2063E.useraction=Review the provided terms of service.\n \n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n-CWPKI2064I.useraction=No action is required.\n\\ No newline at end of file\n+CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME service failed to automatically renew the certificate with the {0} serial number. The request is scheduled to try again in {1}. The certificate expires on {2}. The renew request error is ''{3}''.\n+CWPKI2065W.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The request is scheduled to try again in {1}. The renew request error is ''{2}''.\n+CWPKI2066E.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service requests a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=When the ACME service detects that the certificate is revoked, it automatically requests a new certificate.\n+CWPKI2067I.useraction=No action is required.\n+\n+CWPKI2068W=CWPKI2068W: The ACME service automatic certificate checking failed to check if the certificate with the {0} serial number is expiring or revoked. The check is scheduled to try again in {1}. The error is ''{2}''.\n+CWPKI2068W.explanation=The ACME service started checking if the certificate is expiring or revoked, but failed.\n+CWPKI2068W.useraction=Review the error message for details on the failure. Review the certificate status using the ACME REST interface. If the certificate needs to be renewed, use the ACME REST interface to request a new certificate.\n+\n+CWPKI2069I=CWPKI2069I: The ACME service automatic certificate checking is disabled. Expiring or revoked certificates are not automatically renewed.\n+CWPKI2069I.explanation=The ACME service does not check for expiring or revoked certificates on an automated schedule. If the certificate expires or is revoked, TLS/SSL requests cannot complete unless the server is restarted or the REST interface is used to renew the certificate.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NzQ2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430667466", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-26T19:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzczNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430563735", "bodyText": "add comma for dependent clause\nThe certCheckerSchedule property was set to {0}, which is shorter than the minimum schedule time.", "author": "dmuelle", "createdAt": "2020-05-26T16:53:27Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -274,23 +275,50 @@ CWPKI2059I=CWPKI2059I: Certificate revocation status checking found that the cer\n CWPKI2059I.explanation=The ACME service found that the certificate was marked revoked by either a CRL or OSCP responder. \n CWPKI2059I.useraction=No action is required.\n \n-CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number wasn''t retrieved. The error is: ''{1}''.\n+CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number was not retrieved. The error is: ''{1}''.\n CWPKI2060E.explanation=The OCSP URL was not retrieved.\n CWPKI2060E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n-CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number weren''t retrieved. The error is ''{1}''.\n+CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number were not retrieved. The error is ''{1}''.\n CWPKI2061E.explanation=The CRL distribution points were not retrieved.\n CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n \n-\n CWPKI2063E=CWPKI2063E: The ACME certificate authority at the {0} URI updated its terms of service and now requires the user to agree to the new terms of service at the following URI before it processes any further requests: {1}\n CWPKI2063E.explanation=The certificate authority updated its terms of service and requires user interaction.\n CWPKI2063E.useraction=Review the provided terms of service.\n \n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n-CWPKI2064I.useraction=No action is required.\n\\ No newline at end of file\n+CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME service failed to automatically renew the certificate with the {0} serial number. The request is scheduled to try again in {1}. The certificate expires on {2}. The renew request error is ''{3}''.\n+CWPKI2065W.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The request is scheduled to try again in {1}. The renew request error is ''{2}''.\n+CWPKI2066E.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service requests a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=When the ACME service detects that the certificate is revoked, it automatically requests a new certificate.\n+CWPKI2067I.useraction=No action is required.\n+\n+CWPKI2068W=CWPKI2068W: The ACME service automatic certificate checking failed to check if the certificate with the {0} serial number is expiring or revoked. The check is scheduled to try again in {1}. The error is ''{2}''.\n+CWPKI2068W.explanation=The ACME service started checking if the certificate is expiring or revoked, but failed.\n+CWPKI2068W.useraction=Review the error message for details on the failure. Review the certificate status using the ACME REST interface. If the certificate needs to be renewed, use the ACME REST interface to request a new certificate.\n+\n+CWPKI2069I=CWPKI2069I: The ACME service automatic certificate checking is disabled. Expiring or revoked certificates are not automatically renewed.\n+CWPKI2069I.explanation=The ACME service does not check for expiring or revoked certificates on an automated schedule. If the certificate expires or is revoked, TLS/SSL requests cannot complete unless the server is restarted or the REST interface is used to renew the certificate.\n+CWPKI2069I.useraction=No action is required. To enable automatic certificate checking, update the certCheckerSchedule property in the server configuration to a value greater than 0.\n+\n+CWPKI2070W=CWPKI2070W: The certCheckerSchedule property was set to {0} which is shorter than the minimum schedule time. The certCheckerSchedule property is reset to {1}.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2Nzk3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430667975", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-26T19:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NDI1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430564256", "bodyText": "add comma for dependent clause\nThe certCheckerErrorSchedule property was set to {0}, which is shorter than the minimum schedule time.", "author": "dmuelle", "createdAt": "2020-05-26T16:54:20Z", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -274,23 +275,50 @@ CWPKI2059I=CWPKI2059I: Certificate revocation status checking found that the cer\n CWPKI2059I.explanation=The ACME service found that the certificate was marked revoked by either a CRL or OSCP responder. \n CWPKI2059I.useraction=No action is required.\n \n-CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number wasn''t retrieved. The error is: ''{1}''.\n+CWPKI2060E=CWPKI2060E: The OCSP URL from the certificate with the {0} serial number was not retrieved. The error is: ''{1}''.\n CWPKI2060E.explanation=The OCSP URL was not retrieved.\n CWPKI2060E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n-CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number weren''t retrieved. The error is ''{1}''.\n+CWPKI2061E=CWPKI2061E: The CRL distribution points from the certificate with the {0} serial number were not retrieved. The error is ''{1}''.\n CWPKI2061E.explanation=The CRL distribution points were not retrieved.\n CWPKI2061E.useraction=Ensure that the certificate is a valid X.509 certificate. If it is not valid, request a new certificate.\n \n CWPKI2062E=CWPKI2062E: The {0} OCSP responder URL defined in the server configuration is not a valid URI. If defined, it must be a valid URI to override the OSCP responder URL contained in the certificate.\n CWPKI2062E.explanation=Certificate revocation checking requires a valid OCSP responder URL.\n CWPKI2062E.useraction=Provide a valid OCSP responder URL in the server configuration.\n \n-\n CWPKI2063E=CWPKI2063E: The ACME certificate authority at the {0} URI updated its terms of service and now requires the user to agree to the new terms of service at the following URI before it processes any further requests: {1}\n CWPKI2063E.explanation=The certificate authority updated its terms of service and requires user interaction.\n CWPKI2063E.useraction=Review the provided terms of service.\n \n CWPKI2064I=CWPKI2064I: The ACME service retrieved the certificate with the {0} serial number from the {1} URI in {2} seconds.\n CWPKI2064I.explanation=The ACME service successfully requested a certificate.\n-CWPKI2064I.useraction=No action is required.\n\\ No newline at end of file\n+CWPKI2064I.useraction=No action is required.\n+\n+CWPKI2065W=CWPKI2065W: The ACME service failed to automatically renew the certificate with the {0} serial number. The request is scheduled to try again in {1}. The certificate expires on {2}. The renew request error is ''{3}''.\n+CWPKI2065W.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued.\n+CWPKI2065W.useraction=Review the error message for details on the failure.\n+\n+CWPKI2066E=CWPKI2066E: The ACME service failed to automatically renew the certificate with the {0} serial number. The certificate is revoked. The request is scheduled to try again in {1}. The renew request error is ''{2}''.\n+CWPKI2066E.explanation=The ACME service tried to renew a certificate but encountered an error. The ACME service continues to request a new certificate until a new certificate is issued. SSL/TLS requests fail until a new certificate request is successful.\n+CWPKI2066E.useraction=Review the error message for details on the failure. \n+\n+CWPKI2067I=CWPKI2067I: The certificate with the {0} serial number is revoked. The ACME service requests a new certificate from the ACME certificate authority at the {1} URI.\n+CWPKI2067I.explanation=When the ACME service detects that the certificate is revoked, it automatically requests a new certificate.\n+CWPKI2067I.useraction=No action is required.\n+\n+CWPKI2068W=CWPKI2068W: The ACME service automatic certificate checking failed to check if the certificate with the {0} serial number is expiring or revoked. The check is scheduled to try again in {1}. The error is ''{2}''.\n+CWPKI2068W.explanation=The ACME service started checking if the certificate is expiring or revoked, but failed.\n+CWPKI2068W.useraction=Review the error message for details on the failure. Review the certificate status using the ACME REST interface. If the certificate needs to be renewed, use the ACME REST interface to request a new certificate.\n+\n+CWPKI2069I=CWPKI2069I: The ACME service automatic certificate checking is disabled. Expiring or revoked certificates are not automatically renewed.\n+CWPKI2069I.explanation=The ACME service does not check for expiring or revoked certificates on an automated schedule. If the certificate expires or is revoked, TLS/SSL requests cannot complete unless the server is restarted or the REST interface is used to renew the certificate.\n+CWPKI2069I.useraction=No action is required. To enable automatic certificate checking, update the certCheckerSchedule property in the server configuration to a value greater than 0.\n+\n+CWPKI2070W=CWPKI2070W: The certCheckerSchedule property was set to {0} which is shorter than the minimum schedule time. The certCheckerSchedule property is reset to {1}.\n+CWPKI2070W.explanation=The value for the certCheckerSchedule property was below the minimum duration to check for expiring or revoked certificates and is reset to the minimum schedule time.\n+CWPKI2070W.useraction=To avoid this warning message, set the certCheckerSchedule property in the server configuration to a duration that is longer than the minimum schedule time. To use the default setting, remove the certCheckerSchedule property from the server configuration.\n+\n+CWPKI2071W=CWPKI2071W: The certCheckerErrorSchedule property was set to {0} which is shorter than the minimum schedule time. The certCheckerErrorSchedule property is reset to {1}.", "originalCommit": "f7380198621b5ef646f62d5cc58d92900f8460d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2ODAyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430668029", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-26T19:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NDI1Ng=="}], "type": "inlineReview"}, {"oid": "1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "url": "https://github.com/OpenLiberty/open-liberty/commit/1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T19:49:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MTgxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430671815", "bodyText": "For example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute.\nThis is better, but can we say why someone would want to do that? like:\nFor example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute, to increase the frequency of checks after a failed request.", "author": "dmuelle", "createdAt": "2020-05-26T19:55:54Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked. If the certificate is expiring or revoked, the ACME CA service issues a certificate renew request. If the first renew request fails, the certificate renew request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received. Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renew requests.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Performs the same function as the certCheckerSchedule attribute, but on an alternate schedule. For example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. ", "originalCommit": "1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NjY2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430676660", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-26T20:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MjQ2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430672462", "bodyText": "change\nEnables immediate certificate renewal requests\nto\nEnables immediate certificate renew requests", "author": "dmuelle", "createdAt": "2020-05-26T19:56:57Z", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -80,3 +80,12 @@ preferCRLs.desc=By default, OCSP is the preferred mechanism for checking revocat\n \n disableFallback=No fallback\n disableFallback.desc=Disable the certificate revocation status checker fallback mechanism. During certificate revocation status check, the default behavior is fallback and check by using the non-preferred mechanism (OCSP or CRLs). Default is false.\n+\n+certCheckerSchedule=Certificate checker schedule\n+certCheckerSchedule.desc=Interval for the ACME CA service to check if the certificate is expiring or revoked. If the certificate is expiring or revoked, the ACME CA service issues a certificate renew request. If the first renew request fails, the certificate renew request continues according to the timing set by the certCheckerErrorSchedule attribute until a new certificate is received. Setting the certCheckerSchedule property to zero or a negative value disables automatic certificate renew requests.\n+\n+certCheckerErrorSchedule=Certificate checker error schedule\n+certCheckerErrorSchedule.desc=Performs the same function as the certCheckerSchedule attribute, but on an alternate schedule. For example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. \n+\n+disableMinRenewWindow=Disable minimum renew window\n+disableMinRenewWindow.desc=Enables immediate certificate renewal requests by disabling the specified minimum amount of time between renew requests. The minimum renew time is to 15 seconds.", "originalCommit": "1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NjcyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r430676726", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-26T20:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MjQ2Mg=="}], "type": "inlineReview"}, {"oid": "3e585430e762a321124fcb103f7d181614d5f4df", "url": "https://github.com/OpenLiberty/open-liberty/commit/3e585430e762a321124fcb103f7d181614d5f4df", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T20:05:46Z", "type": "commit"}, {"oid": "3e585430e762a321124fcb103f7d181614d5f4df", "url": "https://github.com/OpenLiberty/open-liberty/commit/3e585430e762a321124fcb103f7d181614d5f4df", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T20:05:46Z", "type": "forcePushed"}]}