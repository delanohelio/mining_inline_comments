{"pr_number": 10596, "pr_title": "Ensure duplicate key exception is avoided attempt 2", "pr_createdAt": "2020-01-27T17:34:03Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10596", "timeline": [{"oid": "1559907462f2ddff374fe3901da26205da1dfea4", "url": "https://github.com/OpenLiberty/open-liberty/commit/1559907462f2ddff374fe3901da26205da1dfea4", "message": "Ensure duplicate key exception does not happen", "committedDate": "2020-01-27T17:25:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDEyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430126", "bodyText": "Singleton does seem convenient for restricting the table setup, but I think there may be other consequences for timers with respect to locking, so we need to ensure that is really what we want.", "author": "njr-11", "createdAt": "2020-01-27T19:15:42Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -33,7 +33,7 @@\n  * This class uses the @Schedule annotation.\n  * Using this annotation will start the timer immediately on start and will run every 30 seconds.\n  */\n-@Stateless\n+@Singleton //Ensure only one instance of this Timer is ever created.", "originalCommit": "1559907462f2ddff374fe3901da26205da1dfea4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDE2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430162", "bodyText": "I don't see why we should suppress this error.  If something goes wrong, we should let the test fail and report the problem.", "author": "njr-11", "createdAt": "2020-01-27T19:15:47Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -88,30 +88,54 @@ private void initTable() throws SQLException {\n             DatabaseMetaData md = conn.getMetaData();\n             ResultSet rs = md.getTables(null, null, \"AUTOMATICDATABASE\", null);\n             while (rs.next()) {\n-                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\"))\n+                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\")) {\n+                    System.out.println(\"Found table AUTOMATICDATABASE. Skipping creation.\");\n                     return;\n+                }\n             }\n \n             //If not, create it.\n             try (Statement stmt = conn.createStatement()) {\n                 stmt.execute(createTable);\n-            }\n+            } //Let initTableAndRow catch error\n+\n+            System.out.println(\"Created table AUTOMATICDATABASE\");\n         }\n     }\n \n     private void initRow() throws SQLException {\n+        final String checkRow = \"SELECT COUNT(*) FROM AUTOMATICDATABASE WHERE name = ?\";\n         final String createRow = \"INSERT INTO AUTOMATICDATABASE VALUES(?,?)\";\n \n         //create count\n         count = 0;\n \n         try (Connection conn = ds.getConnection()) {\n+            //See if row already exists\n+            try (PreparedStatement pstmt = conn.prepareStatement(checkRow)) {\n+                pstmt.setString(1, name);\n+                ResultSet rs = pstmt.executeQuery();\n+                //If the count of rows is more than 0 then set this true.\n+                //Otherwise, set to false when row is not found, or 0 is returned as a result.\n+                boolean exists = rs.next() ? rs.getInt(1) > 0 : false;\n+                if (exists) {\n+                    System.out.println(\"Found row identified by \" + name + \" in table AUTOMATICDATABASE.  Skipping creation.\");\n+                    return;\n+                }\n+            } catch (SQLException sqle) {\n+                System.out.println(\"Caught exception attempting to find row identified by \" + name + \" in table AUTOMATICDATABASE.\"\n+                                   + \" Continuing on to attempt to create row.\");", "originalCommit": "1559907462f2ddff374fe3901da26205da1dfea4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fb6ea8aeffb26b2de061e3b6ba323fb3b16507e", "url": "https://github.com/OpenLiberty/open-liberty/commit/6fb6ea8aeffb26b2de061e3b6ba323fb3b16507e", "message": "feedback changes", "committedDate": "2020-01-27T20:53:27Z", "type": "commit"}]}