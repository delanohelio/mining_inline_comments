{"pr_number": 13186, "pr_title": "More error message  tidy", "pr_createdAt": "2020-07-27T16:44:40Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13186", "timeline": [{"oid": "93e412e4d7c1005778835be2d975eccd036ee184", "url": "https://github.com/OpenLiberty/open-liberty/commit/93e412e4d7c1005778835be2d975eccd036ee184", "message": "More error message  tidy", "committedDate": "2020-07-27T16:43:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0ODI2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13186#discussion_r461448260", "bodyText": "Don't check isAnyTracingEnabled() when logging errors.\nChecking isErrorEnabled() is not wrong but usually unnecessary, you can assume that errors and warnings are always enabled. The check here would only be for performance anyway.", "author": "Azquelt", "createdAt": "2020-07-28T09:31:27Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -63,8 +63,9 @@ protected void activate(Map<String, Object> properties) throws LraException {\n             URI coord = new URI(coordString);\n             NarayanaLRAClient.setDefaultCoordinatorEndpoint(coord);\n         } catch (URISyntaxException e) {\n-            // TODO Not sure how to handle config problems yet\n-            Tr.error(tc, \"Things went wrong\");\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isErrorEnabled()) {\n+                Tr.error(tc, \"Invalid LRA coordinator URI: '\" + coordString + \"'\");\n+            }", "originalCommit": "93e412e4d7c1005778835be2d975eccd036ee184", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0OTkwOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13186#discussion_r461449909", "bodyText": "It's not required but often helpful to include the message code (CWMRX5001E) in the message key (currently LRA_CANT_REGISTER_FILTERS), so that you can search the workspace for the message code and find out where it's produced.", "author": "Azquelt", "createdAt": "2020-07-28T09:34:06Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/resources/io/openliberty/microprofile/lra/internal/resources/Lra.nlsprops", "diffHunk": "@@ -20,3 +20,8 @@\n LRA_INVALID_COORDINATOR_URI=CWMRX5000E: The LRA coordinator URI is invalid\n LRA_INVALID_COORDINATOR_URI.explanation=LRA participants must be able to contact the coordinator\n LRA_INVALID_COORDINATOR_URI.useraction=Correct the LRA coordinator configuration in server.xml\n+\n+\n+LRA_CANT_REGISTER_FILTERS=CWMRX5001E: An error occurred during initialization of the mpLRA-1.0 feature. The error is {0}", "originalCommit": "93e412e4d7c1005778835be2d975eccd036ee184", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1MTYzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13186#discussion_r461451635", "bodyText": "Don't check isAnyTrackingEnabled before logging errors or throwing exceptions.\nDon't need to check isErrorEnabled() either.", "author": "Azquelt", "createdAt": "2020-07-28T09:36:47Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -86,38 +87,33 @@ protected void deactivate(int reason) {\n     @Override\n     public void installProvider(boolean clientSide, List<Object> providers, Set<String> features) {\n         if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n-            Tr.event(tc, \"Attempting to register LRA filters\");\n+            Tr.event(tc, \"Registering LRA filters\");\n         }\n \n         if (clientSide) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n                 Tr.event(tc, \"Registering client side filters\");\n             }\n             ClientLRARequestFilter requestFilter = new ClientLRARequestFilter();\n             providers.add(requestFilter);\n             ClientLRAResponseFilter responseFilter = new ClientLRAResponseFilter();\n             providers.add(responseFilter);\n         } else {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n                 Tr.event(tc, \"Registering serverside side filters\");\n             }\n-\n-            ServerLRAFilter filter = null;\n             try {\n-                filter = new ServerLRAFilter();\n+                // Rather unhelpfully, the ServerLRAFilter constructor throws 'Exception'. There isn't much we can do with\n+                // that. Re-throwing should prevent the servlet being initialized, which is probably better than swallowing\n+                // the exception\n+                providers.add(new ServerLRAFilter());\n             } catch (Exception e) {\n-\n-                // TODO Do something meaningful\n-\n-                // TODO Auto-generated catch block\n-                // Do you need FFDC here? Remember FFDC instrumentation and @FFDCIgnore\n-                // https://websphere.pok.ibm.com/~alpine/secure/docs/dev/API/com.ibm.ws.ras/com/ibm/ws/ffdc/annotation/FFDCIgnore.html\n-                Tr.error(tc, \"Couldn't register the Server filter\", e);\n-                return;\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isErrorEnabled()) {\n+                    Tr.error(tc, \"Exception during registration of LRA filters\", e);\n+                    throw new LraRuntimeException(Tr.formatMessage(tc, \"LRA_CANT_REGISTER_FILTERS\", e), e);\n+                }", "originalCommit": "93e412e4d7c1005778835be2d975eccd036ee184", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36be886a41d010be28208569d640887ebe08f174", "url": "https://github.com/OpenLiberty/open-liberty/commit/36be886a41d010be28208569d640887ebe08f174", "message": "Review comments", "committedDate": "2020-07-28T13:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4Nzk5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13186#discussion_r461587996", "bodyText": "Calls to Tr.error should also be using the translated strings.", "author": "Azquelt", "createdAt": "2020-07-28T13:40:43Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -63,10 +63,8 @@ protected void activate(Map<String, Object> properties) throws LraException {\n             URI coord = new URI(coordString);\n             NarayanaLRAClient.setDefaultCoordinatorEndpoint(coord);\n         } catch (URISyntaxException e) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isErrorEnabled()) {\n-                Tr.error(tc, \"Invalid LRA coordinator URI: '\" + coordString + \"'\");\n-            }\n-            throw new LraException(Tr.formatMessage(tc, \"LRA_INVALID_COORDINATOR_URI\"), e);\n+            Tr.error(tc, \"Invalid LRA coordinator URI: '\" + coordString + \"'\");", "originalCommit": "36be886a41d010be28208569d640887ebe08f174", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4ODEwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13186#discussion_r461588102", "bodyText": "Calls to Tr.error should also be using the translated strings.", "author": "Azquelt", "createdAt": "2020-07-28T13:40:52Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -108,10 +106,8 @@ public void installProvider(boolean clientSide, List<Object> providers, Set<Stri\n                 // the exception\n                 providers.add(new ServerLRAFilter());\n             } catch (Exception e) {\n-                if (TraceComponent.isAnyTracingEnabled() && tc.isErrorEnabled()) {\n-                    Tr.error(tc, \"Exception during registration of LRA filters\", e);\n-                    throw new LraRuntimeException(Tr.formatMessage(tc, \"LRA_CANT_REGISTER_FILTERS\", e), e);\n-                }\n+                Tr.error(tc, \"Exception during registration of LRA filters\", e);", "originalCommit": "36be886a41d010be28208569d640887ebe08f174", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}