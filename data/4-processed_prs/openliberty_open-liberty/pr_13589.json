{"pr_number": 13589, "pr_title": "Small rye open api", "pr_createdAt": "2020-08-21T14:08:54Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13589", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4MDEwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r475480104", "bodyText": "best to set this to full for now", "author": "tevans78", "createdAt": "2020-08-24T09:50:10Z", "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,55 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\\n+ com.ibm.wsspi.appserver.webBundle-1.0,\\\n+ com.ibm.websphere.appserver.jaxrs-2.1\n+-bundles=\\\n+ com.ibm.ws.require.java8, \\\n+ io.openliberty.io.smallrye.openapi.core, \\\n+ io.openliberty.io.smallrye.openapi.jaxrs, \\\n+ io.openliberty.microprofile.openapi.2.0.internal, \\\n+ com.ibm.ws.microprofile.openapi.ui, \\\n+ com.ibm.ws.com.fasterxml.jackson.2.9.1, \\\n+ com.ibm.ws.org.jboss.logging\n+kind=noship\n+edition=core", "originalCommit": "df1792f8ec0bfcf4efa157df24dae4ce0d36412c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5a828e1373cd13e24e8fe41bc20771853dceee4d", "url": "https://github.com/OpenLiberty/open-liberty/commit/5a828e1373cd13e24e8fe41bc20771853dceee4d", "message": "Change edition to full\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>", "committedDate": "2020-08-24T13:26:12Z", "type": "forcePushed"}, {"oid": "d8ab652e10dd79c85b0684f7e9ddeb638f56a3ae", "url": "https://github.com/OpenLiberty/open-liberty/commit/d8ab652e10dd79c85b0684f7e9ddeb638f56a3ae", "message": "MP OpenAPI 2.0 Initial Implementation", "committedDate": "2020-08-25T12:10:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxODU3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r476518572", "bodyText": "kind=noship\nedition=full", "author": "tevans78", "createdAt": "2020-08-25T15:01:10Z", "path": "dev/com.ibm.websphere.appserver.features/visibility/private/io.openliberty.org.eclipse.microprofile.openapi-2.0.feature", "diffHunk": "@@ -0,0 +1,7 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.org.eclipse.microprofile.openapi-2.0\n+singleton=true\n+-bundles=io.openliberty.org.eclipse.microprofile.openapi.2.0; location:=\"dev/api/stable/,lib/\"; mavenCoordinates=\"org.eclipse.microprofile.openapi:microprofile-openapi-api:2.0-RC2\"\n+kind=noship\n+edition=core", "originalCommit": "c0d082954c1977a634d1cb35c102b56923bcb941", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxOTIzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r476519230", "bodyText": "This is minor so if you already have a PB going, don't worry about it", "author": "tevans78", "createdAt": "2020-08-25T15:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxODU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1NzIyNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482857225", "bodyText": "It looks like you've reformatted this file and broken the block comments.", "author": "Azquelt", "createdAt": "2020-09-03T09:55:55Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/ApplicationProcessorTest.java", "diffHunk": "@@ -26,20 +26,23 @@\n import com.ibm.ws.microprofile.openapi.fat.utils.OpenAPITestUtil;\n \n import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n import componenttest.custom.junit.runner.FATRunner;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.FATServletClient;\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Test to ensure exercise Application Processor. Here's summary of all the scenarios being tested:\n- * - Deploy a single app and ensure it's documentation shows up in /openapi\n- * - Deploy two apps and ensure one app's documentation shows up in /openapi\n- * - Remove the app that was picked from the above scenario and ensure that the other app's documentation now shows up in /openapi\n- * - Remove all apps and ensure no documentation (for any endpoint) is shown in /openapi\n- * - Scenarios involving context root, host/port, servers\n- * - Make a pure JAX-RS app with the ApplicationPath annotation and ensure that the annotations are scanned and a document is generated\n- * - Complete flow: model, static, annotation, filter in order\n+ * Test to ensure exercise Application Processor. Here's summary of all the\n+ * scenarios being tested: - Deploy a single app and ensure it's documentation\n+ * shows up in /openapi - Deploy two apps and ensure one app's documentation\n+ * shows up in /openapi - Remove the app that was picked from the above scenario\n+ * and ensure that the other app's documentation now shows up in /openapi -\n+ * Remove all apps and ensure no documentation (for any endpoint) is shown in\n+ * /openapi - Scenarios involving context root, host/port, servers - Make a pure\n+ * JAX-RS app with the ApplicationPath annotation and ensure that the\n+ * annotations are scanned and a document is generated - Complete flow: model,\n+ * static, annotation, filter in order", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1ODA1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482858057", "bodyText": "Can this be removed rather than commented out.", "author": "Azquelt", "createdAt": "2020-09-03T09:57:22Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/FATSuite.java", "diffHunk": "@@ -34,4 +38,47 @@\n                 EndpointAvailabilityTest.class,\n                 UICustomizationTest.class\n })\n-public class FATSuite {}\n+public class FATSuite {\n+    private static final String[] ALL_VERSIONS = { \"1.0\", \"1.1\", \"2.0\" };\n+\n+    @ClassRule\n+    public static RepeatTests r = RepeatTests.withoutModification().andWith(MP_OPENAPI(\"1.1\")).andWith(MP_OPENAPI(\"2.0\"));\n+\n+    static FeatureReplacementAction MP_OPENAPI(String version) {\n+        return MP_OPENAPI(new FeatureReplacementAction(), version);\n+    }\n+\n+    static FeatureReplacementAction MP_OPENAPI(FeatureReplacementAction action, String version) {\n+        return use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version);\n+    }\n+\n+//    static FeatureReplacementAction MP_REST_CLIENT_WITH_CONFIG(String version, String serverName) {\n+//        return MP_REST_CLIENT_WITH_CONFIG(new FeatureReplacementAction(), version, serverName);\n+//    }\n+//\n+//    static FeatureReplacementAction MP_OPENAPI_WITH_CONFIG(FeatureReplacementAction action, String version, String serverName) {\n+//        action = use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version).forServers(serverName);\n+//        if (\"1.0\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.0\", \"1.1\", \"2.0\");\n+//        } else if (\"1.1\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.1\", \"1.0\", \"2.0\");\n+//        } else {\n+//            return use(action, \"mpOpenAPI\", \"2.0\", \"1.0\", \"1.1\");\n+//        }\n+//    }", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDEwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482864105", "bodyText": "Oooh, what's this internal optional jaxb feature? Never seen it before.", "author": "Azquelt", "createdAt": "2020-09-03T10:07:46Z", "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,54 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyOTY2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483029667", "bodyText": "don't do the ibm:tolerates. This should just depend on mpConfig-2.0 when it is ready.  don't tolerate to servlet-4.0", "author": "Emily-Jiang", "createdAt": "2020-09-03T14:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MjUyMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483042521", "bodyText": "There isn't a MP Config 2.0 API in Open Liberty yet. When there is, I was going to update all of the MP4 features to use it, and remove the tolerates.", "author": "tevans78", "createdAt": "2020-09-03T14:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDgyOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482864828", "bodyText": "Before release, these tolerated levels need to be reviewed. I think usually we only support other microprofile features which are in the same microprofile release as our feature. Check with @Emily-Jiang", "author": "Azquelt", "createdAt": "2020-09-03T10:09:07Z", "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,54 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\\n+ com.ibm.wsspi.appserver.webBundle-1.0,\\\n+ com.ibm.websphere.appserver.jaxrs-2.1", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NTExNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482865114", "bodyText": "Odd to have \"MJS Java\" in here, but I suspect it's ok", "author": "Azquelt", "createdAt": "2020-09-03T10:09:37Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/.settings/org.eclipse.jdt.ui.prefs", "diffHunk": "@@ -51,8 +51,8 @@ cleanup.use_this_for_non_static_method_access=false\n cleanup.use_this_for_non_static_method_access_only_if_necessary=true\n eclipse.preferences.version=1\n editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true\n-formatter_profile=_Unmanaged profile\n-formatter_settings_version=12\n+formatter_profile=_MJS Java\n+formatter_settings_version=18", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1Nzk3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483457971", "bodyText": "This is why I personally do not like checking in settings files for the IDEs that are being used to develop project source... but since it is just for formatter settings, I do not believe that it will be an issue.", "author": "msmiths", "createdAt": "2020-09-04T08:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NTQwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482865403", "bodyText": "Please try to keep your indentation consistent with the rest of the file.", "author": "Azquelt", "createdAt": "2020-09-03T10:10:09Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/bnd.bnd", "diffHunk": "@@ -16,19 +16,21 @@ src: \\\n \tfat/src, \\\n \ttest-applications/appWithAnnotations/src, \\\n \ttest-applications/appWithStaticDoc/src, \\\n-\ttest-applications/complete-flow/src, \\\n+    test-applications/complete-flow/src, \\\n \ttest-applications/pure-jaxrs/src, \\\n \ttest-applications/simpleServlet/src\n \n fat.project: true\n \n fat.minimum.java.level: 1.8\n \n+tested.features=mpOpenAPI-1.0,mpOpenAPI-1.1,mpOpenAPI-2.0\n+\n -buildpath: \\\n \tcom.ibm.ws.microprofile.openapi;version=latest, \\\n \tcom.ibm.websphere.javaee.jaxrs.2.0;version=latest, \\\n \tcom.ibm.websphere.javaee.servlet.3.1;version=latest, \\\n-\tcom.ibm.websphere.org.eclipse.microprofile.openapi.1.0;version=latest, \\\n+    com.ibm.websphere.org.eclipse.microprofile.openapi.1.0;version=latest, \\", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2Njg1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482866854", "bodyText": "Comment formatting broken again", "author": "Azquelt", "createdAt": "2020-09-03T10:12:54Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/UICustomizationTest.java", "diffHunk": "@@ -30,14 +30,17 @@\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Tests to ensure OpenAPI UI bundles are updated with custom CSS files provided by users\n+ * Tests to ensure OpenAPI UI bundles are updated with custom CSS files provided\n+ * by users\n  *\n- * - Set a valid CSS file and ensure that the UI is updated with customized value\n- * - Set an empty CSS file and server should produce a warning because it does not contain .swagger-ui .headerbar\n- * - Set an invalid CSS file where the value of background-image property is not valid and ensure that the right message shows up in the server logs and the CSS content must revert\n- * to default\n- * - Ensure there are no caching issues. First set customization, then stop the server. When the server is offline, remove the customization. Then start the server and verify\n- * customization is no longer applied.\n+ * - Set a valid CSS file and ensure that the UI is updated with customized\n+ * value - Set an empty CSS file and server should produce a warning because it\n+ * does not contain .swagger-ui .headerbar - Set an invalid CSS file where the\n+ * value of background-image property is not valid and ensure that the right\n+ * message shows up in the server logs and the CSS content must revert to\n+ * default - Ensure there are no caching issues. First set customization, then\n+ * stop the server. When the server is offline, remove the customization. Then\n+ * start the server and verify customization is no longer applied.", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NzU5OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482867598", "bodyText": "More broken comments", "author": "Azquelt", "createdAt": "2020-09-03T10:14:14Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/validation/fat/OpenAPIValidationTestOne.java", "diffHunk": "@@ -8,33 +8,40 @@\n import org.junit.runner.RunWith;\n \n import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n import componenttest.custom.junit.runner.FATRunner;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Tests to ensure that OpenAPI model validation works,\n- * model walker calls appropriate validators, and proper events (errors, warning) are reported.\n+ * Tests to ensure that OpenAPI model validation works, model walker calls\n+ * appropriate validators, and proper events (errors, warning) are reported.\n  *\n- * Tests for correct validation messages provided for the validation errors in the following models:\n+ * Tests for correct validation messages provided for the validation errors in\n+ * the following models:\n  *\n- * Info, Contact, License, ServerVariable(s), Server(s), PathItem, Operation, ExternalDocumentation,\n- * SecurityRequirement, RequestBody, Response, Responses\n+ * Info, Contact, License, ServerVariable(s), Server(s), PathItem, Operation,\n+ * ExternalDocumentation, SecurityRequirement, RequestBody, Response, Responses\n  *\n- * The app with a static yaml file checks the following conditions for each model:\n- * - Info: REQUIRED \"title\" and \"version\", valid \"termsOfService\" URL - all validation cases checked\n- * - License: REQUIRED \"name\", and valid \"url\" URL - all validation cases checked\n- * - Contact: valid url and email - all validation cases checked\n- * - ServerVariable: REQUIRED \"default\" - all validation cases checked\n- * - ServerVariables: null value results in invalid OpenAPI doc, null key is tested - all validation cases checked\n- * - Server: \"url\" field is not null and is valid, and all server variables are defined - all validation cases checked\n- * - PathItem: duplicate parameter, the 'required' field of path parameter, undeclared parameter, path string validity, operation parameters - all validation cases checked\n- * - Operation: RQUIRED 'responses' field and unique operation IDs - all validation cases checked\n- * - ExternalDocumentation: invalid url tested here, null url tested in OpenAPIValidationTestTwo\n- * - SecurityRequirement: name undeclared in SecurityScheme tested, the rest of cases are tested in OpenAPIValidationTestTwo\n- * - RequestBody: REQUIRED 'content' field tested - all validation cases checked\n- * - Response: REQUIRED 'description' field tested - all validation cases checked\n- * - Responses: at least one response code for successful operation tested - all validation cases checked\n+ * The app with a static yaml file checks the following conditions for each\n+ * model: - Info: REQUIRED \"title\" and \"version\", valid \"termsOfService\" URL -\n+ * all validation cases checked - License: REQUIRED \"name\", and valid \"url\" URL\n+ * - all validation cases checked - Contact: valid url and email - all\n+ * validation cases checked - ServerVariable: REQUIRED \"default\" - all\n+ * validation cases checked - ServerVariables: null value results in invalid\n+ * OpenAPI doc, null key is tested - all validation cases checked - Server:\n+ * \"url\" field is not null and is valid, and all server variables are defined -\n+ * all validation cases checked - PathItem: duplicate parameter, the 'required'\n+ * field of path parameter, undeclared parameter, path string validity,\n+ * operation parameters - all validation cases checked - Operation: RQUIRED\n+ * 'responses' field and unique operation IDs - all validation cases checked -\n+ * ExternalDocumentation: invalid url tested here, null url tested in\n+ * OpenAPIValidationTestTwo - SecurityRequirement: name undeclared in\n+ * SecurityScheme tested, the rest of cases are tested in\n+ * OpenAPIValidationTestTwo - RequestBody: REQUIRED 'content' field tested - all\n+ * validation cases checked - Response: REQUIRED 'description' field tested -\n+ * all validation cases checked - Responses: at least one response code for\n+ * successful operation tested - all validation cases checked", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2ODk4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482868988", "bodyText": "Looks like this line can be removed too.", "author": "Azquelt", "createdAt": "2020-09-03T10:16:47Z", "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/FATSuite.java", "diffHunk": "@@ -34,4 +38,47 @@\n                 EndpointAvailabilityTest.class,\n                 UICustomizationTest.class\n })\n-public class FATSuite {}\n+public class FATSuite {\n+    private static final String[] ALL_VERSIONS = { \"1.0\", \"1.1\", \"2.0\" };\n+\n+    @ClassRule\n+    public static RepeatTests r = RepeatTests.withoutModification().andWith(MP_OPENAPI(\"1.1\")).andWith(MP_OPENAPI(\"2.0\"));\n+\n+    static FeatureReplacementAction MP_OPENAPI(String version) {\n+        return MP_OPENAPI(new FeatureReplacementAction(), version);\n+    }\n+\n+    static FeatureReplacementAction MP_OPENAPI(FeatureReplacementAction action, String version) {\n+        return use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version);\n+    }\n+\n+//    static FeatureReplacementAction MP_REST_CLIENT_WITH_CONFIG(String version, String serverName) {\n+//        return MP_REST_CLIENT_WITH_CONFIG(new FeatureReplacementAction(), version, serverName);\n+//    }\n+//\n+//    static FeatureReplacementAction MP_OPENAPI_WITH_CONFIG(FeatureReplacementAction action, String version, String serverName) {\n+//        action = use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version).forServers(serverName);\n+//        if (\"1.0\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.0\", \"1.1\", \"2.0\");\n+//        } else if (\"1.1\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.1\", \"1.0\", \"2.0\");\n+//        } else {\n+//            return use(action, \"mpOpenAPI\", \"2.0\", \"1.0\", \"1.1\");\n+//        }\n+//    }\n+\n+    private static FeatureReplacementAction use(FeatureReplacementAction action, String featureName, String version) {\n+        return use(action, featureName, version, ALL_VERSIONS);\n+    }\n+\n+    private static FeatureReplacementAction use(FeatureReplacementAction action, String featureName, String version, String... versionsToRemove) {\n+//        String feature = featureName + \"-\" + version;", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MDkzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482870937", "bodyText": "Why does this export need thread-context=true?\nWhen I've seen this before, it's generally been because a class needs to be loaded with ServiceLoader but in those cases, there was also a component definition which added the service definition.", "author": "Azquelt", "createdAt": "2020-09-03T10:20:20Z", "path": "dev/io.openliberty.io.smallrye.openapi.jaxrs/bnd.bnd", "diffHunk": "@@ -0,0 +1,40 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/rejar.props\n+\n+bVersion=1.0\n+\n+javac.source: 1.8\n+javac.target: 1.8\n+\n+Bundle-SymbolicName: io.openliberty.io.smallrye.openapi.jaxrs; singleton:=true\n+\n+WS-TraceGroup: MPOPENAPI\n+\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.8))\"\n+\n+src: src\n+\n+-dsannotations-inherit: true\n+\n+Import-Package: \\\n+  *\n+\n+Export-Package: \\\n+  io.smallrye.openapi.jaxrs;thread-context=true;version=2.0.0", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MDEwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483470104", "bodyText": "This was based on our Slack conversation from May 19th: https://ibm-cloud.slack.com/archives/D012T40FU9M/p1589902337004200\nHowever, I notice that the relevant API in AnnotationScannerFactory has not been modified so that the ClassLoader can be passed in.  I assume that this means we no longer need to specify thread-context=true for this package.  I will make the change and run all of the tests to see if works.", "author": "msmiths", "createdAt": "2020-09-04T08:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MDMxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483550312", "bodyText": "In ApplicationProcessor you're not passing in any classloader, so I think it's still going to use the TCCL, though I'm not sure what that will actually be at this point since I think this is called during application startup. https://github.com/OpenLiberty/open-liberty/pull/13589/files#diff-2faebd09c1f5caa512f7b9e2ef55525cR354\nI would want to check what the JAX-RS annotation processor does and whether it's working as I can't see how the current code would be able to load it.", "author": "Azquelt", "createdAt": "2020-09-04T11:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MDkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MjI0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872246", "bodyText": "Inconsistent indentation", "author": "Azquelt", "createdAt": "2020-09-03T10:22:52Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/bnd.bnd", "diffHunk": "@@ -0,0 +1,89 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion=1.0\n+\n+Bundle-Name: MicroProfile OpenAPI\n+Bundle-SymbolicName: io.openliberty.microprofile.openapi.2.0.internal\n+Bundle-Description: MicroProfile OpenAPI 2.0, version ${bVersion}\n+\n+IBM-Web-Extension-Processing-Disabled: true\n+\n+Web-ContextPath: /openapi\n+\n+Import-Package: \\\n+    org.eclipse.microprofile.config.*;version=\"[1.0,2)\",\\\n+    javax.xml.bind.annotation;version=!,\\\n+    *\n+    \n+Export-Package: \\\n+\tio.openliberty.microprofile.openapi20,\\\n+    io.openliberty.microprofile.openapi20.css,\\\n+    io.openliberty.microprofile.openapi20.servlets,\\\n+\tio.openliberty.microprofile.openapi20.utils,\\\n+\tio.openliberty.microprofile.openapi20.validation", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mjg4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872887", "bodyText": "Copyright date questionable.", "author": "Azquelt", "createdAt": "2020-09-03T10:24:13Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/WEB-INF/web.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2012 IBM Corporation and others.", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mjk5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872995", "bodyText": "Copyright date questionable", "author": "Azquelt", "createdAt": "2020-09-03T10:24:29Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/io/openliberty/microprofile/openapi20/resources/OpenAPI.nlsprops", "diffHunk": "@@ -0,0 +1,67 @@\n+# Copyright (c) 2018 IBM Corporation and others.", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mzc1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482873754", "bodyText": "Have these NLS file been copied from the previous version of the feature?\nIt seems odd to have the same message in multiple files and could lead to a message being updated in one version and not in the other.", "author": "Azquelt", "createdAt": "2020-09-03T10:25:54Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/io/openliberty/microprofile/openapi20/resources/OpenAPI.nlsprops", "diffHunk": "@@ -0,0 +1,67 @@\n+# Copyright (c) 2018 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+# -------------------------------------------------------------------------------------------------\n+#CMVCPATHNAME N/A\n+#COMPONENTPREFIX CWWKO\n+#COMPONENTNAMEFOR CWWKO MicroProfile OpenAPI API\n+#ISMESSAGEFILE TRUE\n+#NLS_MESSAGEFORMAT_VAR\n+#NLS_ENCODING=UNICODE\n+# -------------------------------------------------------------------------------------------------\n+\n+# Message prefix block: CWWKO1650 - CWWKO1699\n+\n+OPENAPI_DOCUMENT_VALIDATION_ERROR=CWWKO1650E: Validation of the OpenAPI document produced the following error(s):\n+OPENAPI_DOCUMENT_VALIDATION_ERROR.explanation=The OpenAPI document is invalid.\n+OPENAPI_DOCUMENT_VALIDATION_ERROR.useraction=Provide a valid OpenAPI document that resolves the reported error.\n+", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2MDIxOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483460219", "bodyText": "Yes... the NLS files have been copied and the messages that are output are the same.  I believe that this makes sense because the functionality is broadly the same between between the different versions of the feature.  It would seem odd to me if the messages that were output changed significantly depending which version of the feature I used in OL.", "author": "msmiths", "createdAt": "2020-09-04T08:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mzc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzODU2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483638561", "bodyText": "Ok, it just seemed odd to have a second copy of the files if the messages are meant to be the same.", "author": "Azquelt", "createdAt": "2020-09-04T14:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDQzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482874430", "bodyText": "Copyright date should probably be 2017, 2020", "author": "Azquelt", "createdAt": "2020-09-03T10:27:11Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MDQyMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482880421", "bodyText": "I think with a DYNAMIC and MANDATORY reference, you're supposed to check whether appProcessor == this.appProcessor before setting this.appProcessor to null.\nDYNAMIC + MANDATORY implies that the reference can be replaced while the component is active, in which case I think the runtime will do setApplicationProcessor(newProcessor); unsetApplicationProcessor(oldProcessor());, so your unset method should check whether the appProcessor has already been replaced before clearing the field.\nSee https://docs.osgi.org/specification/osgi.cmpn/7.0.0/service.component.html#service.component-method.injection\n\nIf the policy is dynamic then the bind method of a replacement service can be called before its corresponding unbind method.\n\nYou could probably also switch to a non-dynamic reference and/or to annotating a field rather than having set and unset methods.", "author": "Azquelt", "createdAt": "2020-09-03T10:39:25Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.state.ApplicationStateListener;\n+import com.ibm.ws.container.service.state.StateChangeException;\n+\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+@Component(service = { ApplicationStateListener.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+public class ApplicationListener implements ApplicationStateListener {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationListener.class);\n+    private ApplicationProcessor appProcessor = null;\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarting(ApplicationInfo appInfo) throws StateChangeException {\n+        if (appProcessor != null) {\n+            try {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process started: \" + appInfo);\n+                }\n+                appProcessor.addApplication(appInfo);\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process ended: \" + appInfo);\n+                }\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to process application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarted(ApplicationInfo appInfo) throws StateChangeException {}\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopping(ApplicationInfo appInfo) {\n+        if (appProcessor != null) {\n+            try {\n+                ApplicationProcessor.getInstance().removeApplication(appInfo);\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to remove application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopped(ApplicationInfo appInfo) {}\n+\n+    @Reference(service = ApplicationProcessor.class, policy = ReferencePolicy.DYNAMIC, cardinality = ReferenceCardinality.MANDATORY, policyOption = ReferencePolicyOption.GREEDY)\n+    protected void setApplicationProcessor(ApplicationProcessor appProcessor) {\n+        this.appProcessor = appProcessor;\n+    }\n+\n+    protected void unsetApplicationProcessor(ApplicationProcessor appProcessor) {\n+        this.appProcessor = null;\n+    }", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTEyMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482881122", "bodyText": "Copyright date", "author": "Azquelt", "createdAt": "2020-09-03T10:40:41Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTY2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482881660", "bodyText": "I guess this class was coped from the 1.0 feature? Is this comment still true for OpenAPI 2.0 ?", "author": "Azquelt", "createdAt": "2020-09-03T10:41:44Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMjg4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483502880", "bodyText": "Yes... this is still true of OpenAPI 2.0.", "author": "msmiths", "createdAt": "2020-09-04T09:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDEyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482884129", "bodyText": "Not sure this needs to be immediate?", "author": "Azquelt", "createdAt": "2020-09-03T10:46:20Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNDkzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482914930", "bodyText": "Hmm, it might need to be immediate to ensure the getInstance() method can be called?", "author": "Azquelt", "createdAt": "2020-09-03T11:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDc1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482884751", "bodyText": "Why are you using ApplicationProcessor.getInstance() rather than appProcessor?", "author": "Azquelt", "createdAt": "2020-09-03T10:47:25Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.state.ApplicationStateListener;\n+import com.ibm.ws.container.service.state.StateChangeException;\n+\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+@Component(service = { ApplicationStateListener.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+public class ApplicationListener implements ApplicationStateListener {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationListener.class);\n+    private ApplicationProcessor appProcessor = null;\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarting(ApplicationInfo appInfo) throws StateChangeException {\n+        if (appProcessor != null) {\n+            try {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process started: \" + appInfo);\n+                }\n+                appProcessor.addApplication(appInfo);\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process ended: \" + appInfo);\n+                }\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to process application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarted(ApplicationInfo appInfo) throws StateChangeException {}\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopping(ApplicationInfo appInfo) {\n+        if (appProcessor != null) {\n+            try {\n+                ApplicationProcessor.getInstance().removeApplication(appInfo);", "originalCommit": "485906a4e9c767847b905185763d89f553c7eaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2Mzk5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483463991", "bodyText": "I was trying to modify the ApplicationProcessor so that it was not a component, but this appears to be a little more work than I thought.  This is a remnant of the changes that I made as part of that work that I forgot to undo.  I have changed it back now.", "author": "msmiths", "createdAt": "2020-09-04T08:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NjY0Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483546643", "bodyText": "Is this method really rewriting the content of the UI bundle?\nWhy on earth is that necessary?", "author": "Azquelt", "createdAt": "2020-09-04T11:02:09Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/css/OpenAPIUIBundlesUpdater.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20.css;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.ServiceReference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.wsspi.kernel.service.utils.FileUtils;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+/**\n+ * Update all OpenAPI-UI bundles\n+ */\n+public class OpenAPIUIBundlesUpdater {\n+\n+    private static final TraceComponent tc = Tr.register(OpenAPIUIBundlesUpdater.class);\n+\n+    /**\n+     * List of OpenAPI-UI bundles\n+     */\n+    private static final Set<String> openAPIUIBundleNames = new HashSet<String>(Arrays.asList(new String[] {\"com.ibm.ws.microprofile.openapi.ui\"}));\n+\n+    private static boolean stopping = false;\n+\n+    synchronized static void updateResources(Map<String, Object> resourcesToUpdate, boolean isRestoreDefaults) throws IOException, BundleException {", "originalCommit": "cf2fe89286d211be36cc0dca87d1500b49d2dba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDY3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483584673", "bodyText": "This the implementation of the functionality that allows users to customise the OpenAPI user interface (Swagger UI), as described here:\nhttps://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_api_mpopenapi_custom.html", "author": "msmiths", "createdAt": "2020-09-04T12:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NjY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5OTc3OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483599778", "bodyText": "Yeah, but we do that by rewriting the bundle content and restarting the bundles!? Just seems bizarre.", "author": "Azquelt", "createdAt": "2020-09-04T12:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NjY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNTQwMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483615400", "bodyText": "It's a good question... and one that I do not know the answer to I am afraid.  This is value add functionality that goes beyond what is required by the MP OpenAPI spec.  I copied it across because I was told that we cannot remove functionality as part of adding support for MP OpenAPI 2.0.", "author": "msmiths", "createdAt": "2020-09-04T13:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NjY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MzU0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483553542", "bodyText": "Unsure why these two fields are static.\nThere are multiple times where access to them is synchronized on document which is non-static.\nI guess it shouldn't matter since this should be a singleton class anyway?", "author": "Azquelt", "createdAt": "2020-09-04T11:18:42Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })\n+public class ApplicationProcessor {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationProcessor.class);\n+\n+    private static ApplicationProcessor instance = null;\n+    private OpenAPI document = null;\n+    private static ApplicationInfo currentApp = null;\n+    private static Map<String, ApplicationInfo> applications = new HashMap<>();", "originalCommit": "cf2fe89286d211be36cc0dca87d1500b49d2dba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NjE5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483586196", "bodyText": "Agreed... I am not completely happy with the implementation of the ApplicationProcessor. I would like to pull it apart so that it is solely focused on parsing an application and generating an OpenAPI document, if possible.  I would then store the state elsewhere.  This would mean that the ApplicationProcessor would no longer need to be an OSGi component.  However, it is not clear to me how much work this will entail and I want to get an initial implementation of the feature into GitHub... not least because the performance team want to compare it against previous versions.", "author": "msmiths", "createdAt": "2020-09-04T12:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MzU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MzcyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483553726", "bodyText": "Another commented out line", "author": "Azquelt", "createdAt": "2020-09-04T11:19:09Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })\n+public class ApplicationProcessor {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationProcessor.class);\n+\n+    private static ApplicationProcessor instance = null;\n+    private OpenAPI document = null;\n+    private static ApplicationInfo currentApp = null;\n+    private static Map<String, ApplicationInfo> applications = new HashMap<>();\n+    private final ServerInfo serverInfo = new ServerInfo();\n+\n+    /**\n+     * The getInstance method returns the singleton instance of the ApplicationProcessor\n+     * \n+     * @return ApplicationProcessor\n+     *             The singleton instance\n+     */\n+    public static ApplicationProcessor getInstance() {\n+        return instance;\n+    }\n+\n+    /**\n+     * The activate method invoked by the Service Component Runtime.\n+     * \n+     * @param cc\n+     *            The ComponentContext for this component\n+     */\n+    public void activate(ComponentContext cc) {\n+        instance = this;\n+        this.document = OpenAPIUtils.createBaseOpenAPIDocument();\n+        if (currentApp != null) {\n+            processApplication(currentApp);\n+        }\n+    }\n+\n+    /**\n+     * The addApplication method is invoked by the {@link ApplicationListener} when it is notified that an application\n+     * is starting. \n+     * \n+     * @param appInfo\n+     *           The ApplicationInfo for the application that is starting.\n+     */\n+    public void addApplication(ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Adding application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            if (currentApp == null) {\n+                processApplication(appInfo);\n+            } else {\n+                applications.put(appInfo.getName(), appInfo);\n+            }\n+        }\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Adding application ended: appInfo=\" + appInfo);\n+        }\n+    }\n+\n+    /**\n+     * The removeApplication method is invoked by the {@link ApplicationListener} when it is notified that an\n+     * application is stopping.\n+     * \n+     * @param appInfo\n+     *           The ApplicationInfo for the application that is stopping.\n+     */\n+    public void removeApplication(ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Removing application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            if (currentApp != null && currentApp.getName().equals(appInfo.getName())) {\n+                currentApp = null;\n+                this.serverInfo.setApplicationPath(null);\n+                this.serverInfo.setIsUserServer(false);\n+                this.document = OpenAPIUtils.createBaseOpenAPIDocument();\n+                Iterator<java.util.Map.Entry<String, ApplicationInfo>> iterator = applications.entrySet().iterator();\n+                while (iterator.hasNext()) {\n+                    java.util.Map.Entry<String, ApplicationInfo> entry = iterator.next();\n+                    processApplication(entry.getValue());\n+                    iterator.remove();\n+                    if (currentApp != null) {\n+                        break;\n+                    }\n+                }\n+            } else {\n+                applications.remove(appInfo.getName());\n+            }\n+        }\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Removing application ended: appInfo=\" + appInfo);\n+        }\n+    }\n+\n+    /**\n+     * The getOpenAPIDocument method returns the OpenAPI document for the current application in the specified format\n+     * (JSON or YAML).\n+     * \n+     * @param request\n+     *            The HttpServletRequest object\n+     * @param format\n+     *            The format desired format of the document\n+     * @return\n+     */\n+    @FFDCIgnore(IOException.class)\n+    public String getOpenAPIDocument(HttpServletRequest request, Format format) {\n+        String oasResult = null;\n+        synchronized (this.document) {\n+            ServerInfo reqServerInfo = null;\n+            synchronized (serverInfo) {\n+                reqServerInfo = new ServerInfo(serverInfo);\n+            }\n+            ProxySupportUtil.processRequest(request, reqServerInfo);\n+            if (LoggingUtils.isEventEnabled(tc)) {\n+                Tr.event(tc, \"Request server info : \" + reqServerInfo);\n+            }\n+            reqServerInfo.updateOpenAPIWithServers(this.document);\n+            try {\n+                oasResult = OpenApiSerializer.serialize(this.document, format);\n+            } catch (IOException e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(this, tc, \"Failed to serialize OpenAPI docuemnt: \" + e.getMessage());\n+                }\n+            }\n+        }\n+        if (LoggingUtils.isDebugEnabled(tc)) {\n+            Tr.debug(tc, \"Serialized document=\" + oasResult);\n+        }\n+        return oasResult;\n+    }\n+\n+    /**\n+     * The processApplication method processes applications that are added to the OpenLiberty instance. These \n+     * \n+     * @param appInfo\n+     *            The ApplicationInfo for the application to be processed.\n+     */\n+    @FFDCIgnore(UnableToAdaptException.class)\n+    private void processApplication(final ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Processing application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            \n+            // Make sure that we have valid application info\n+            if (appInfo != null) {\n+                // Get the container for the application\n+                Container appContainer = appInfo.getContainer();\n+                if (appContainer != null) {\n+                    \n+                    // Check for app classes, if it is not there then the app manager is not in control of this app\n+                    try {\n+                        NonPersistentCache cache = appContainer.adapt(NonPersistentCache.class);\n+                        ApplicationClassesContainerInfo applicationClassesContainerInfo =\n+                            (ApplicationClassesContainerInfo) cache.getFromCache(ApplicationClassesContainerInfo.class);\n+                        if (applicationClassesContainerInfo != null) {\n+                            WebModuleInfo moduleInfo = null;\n+                            \n+                            // Check to see if the deployed application is an EAR/EBA\n+                            if (appInfo instanceof EARApplicationInfo) {\n+                                /*\n+                                 * Iterate over the entries in the application. An Enterprise Application can contain\n+                                 * various types of module, including Web modules. We need to attempt to retrieve the\n+                                 * WebModuleInfo for each entry and, if there is WebModuleInfo, process it. If this\n+                                 * results in an OpenAPI document being generated, we do not process any more entries\n+                                 * because we only generate a single OpenAPI document... even if the application\n+                                 * contains multiple web modules.\n+                                 */\n+                                for (Entry entry : appContainer) {\n+                                    try {\n+                                        // Attempt to adapt the entry to a container\n+                                        Container container = entry.adapt(Container.class);\n+                                        if (container != null) {\n+                                            \n+                                            // Attempt to retrieve WebModuleInfo for the container\n+                                            WebModuleInfo wmi = ModuleUtils.getWebModuleInfo(container);\n+                                            if (wmi != null) {\n+                                                \n+                                                // Process the web module\n+                                                OpenAPI openAPI = processWebModule(container, wmi);\n+                                                if (openAPI != null) {\n+                                                    \n+                                                    // OpenAPI document generated... finish processing and exit the loop\n+                                                    currentApp = appInfo;\n+                                                    this.document = openAPI;\n+                                                    handleApplicationPath(openAPI, wmi.getContextRoot());\n+                                                    handleUserServer(openAPI);\n+                                                    Tr.info(tc, MessageConstants.OPENAPI_APPLICATION_PROCESSED, wmi.getApplicationInfo().getDeploymentName());\n+                                                    break;\n+                                                }\n+                                            }\n+                                        }\n+                                    } catch (UnableToAdaptException e) {\n+                                        // Unable to adapt... log it and move on\n+                                        if (LoggingUtils.isEventEnabled(tc)) {\n+                                            Tr.event(tc, \"Failed to adapt entry: entry=\" + entry + \" : \\n\" + e.getMessage());\n+                                        }\n+                                    }\n+                                } // FOR\n+                            } else {\n+                                // Not an Enterprise Application... attempt to get the WebModuleInfo\n+                                moduleInfo = ModuleUtils.getWebModuleInfo(appContainer);\n+                                \n+                                // Make sure that we have a valid web module.  If we do, process it.\n+                                if (moduleInfo != null) {\n+                                    OpenAPI openAPI = processWebModule(appContainer, moduleInfo);\n+                                    if (openAPI != null) {\n+                                        currentApp = appInfo;\n+                                        handleApplicationPath(openAPI, moduleInfo.getContextRoot());\n+                                        handleUserServer(openAPI);\n+                                        this.document = openAPI;\n+                                        Tr.info(tc, MessageConstants.OPENAPI_APPLICATION_PROCESSED, moduleInfo.getApplicationInfo().getDeploymentName());\n+                                    }\n+                                    \n+                                    if (LoggingUtils.isEventEnabled(tc)) {\n+                                        Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo);\n+                                    }\n+                                } else {\n+                                    if (LoggingUtils.isEventEnabled(tc)) {\n+                                        Tr.event(tc, \"Application Processor: Processing application ended: moduleInfo=null : appInfo=\" + appInfo);\n+                                    }\n+                                }\n+                            }\n+                        } else {\n+                            // No application classes... the app manager is not in control of this ap\n+                            if (LoggingUtils.isEventEnabled(tc)) {\n+                                Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo + \", applicationClassesContainerInfo=null\");\n+                            }\n+                        }\n+                    } catch (UnableToAdaptException e) {\n+                        if (LoggingUtils.isEventEnabled(tc)) {\n+                            Tr.event(tc, \"Failed to adapt NonPersistentCache: container=\" + appContainer + \" : \\n\" + e.getMessage());\n+                        }\n+                    }\n+                } else {\n+                    if (LoggingUtils.isEventEnabled(tc)) {\n+                        Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo + \", appContainer=null\");\n+                    }\n+                }\n+            } else {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application Processor: Processing application ended: appInfo=null\");\n+                }\n+            }\n+            \n+        }\n+    }\n+\n+    /**\n+     * The processWebModule method attempts to generate an OpenAPI document for the specified web module using the\n+     * SmallRye implementation.\n+     * \n+     * @param appContainer\n+     *            The Container for the web module\n+     * @param moduleInfo\n+     *            The WebModuleInfo object for the web module\n+     * @return OpenAPI\n+     *            The OpenAPI document generated for the web module, or null if the web module is not an OAS\n+     *            applciation.\n+     */\n+    private OpenAPI processWebModule(final Container appContainer, final WebModuleInfo moduleInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"WebModule: Processing started : deploymentName=\" + moduleInfo.getApplicationInfo().getDeploymentName() + \" : contextRoot=\" + moduleInfo.getContextRoot());\n+        }\n+        ClassLoader appClassloader = moduleInfo.getClassLoader();\n+        \n+        OpenAPI newDocument = null;\n+        \n+        // Read and process the MicroProfile config. Try with resources will close the ConfigProcessor when done.\n+        try (ConfigProcessor configProcessor = new ConfigProcessor(appClassloader)) {\n+            if (LoggingUtils.isEventEnabled(tc)) {\n+                Tr.event(tc, \"Retrieved configuration values : \" + configProcessor);\n+            }\n+            \n+            try {\n+                OpenApiConfig config = configProcessor.getOpenAPIConfig();\n+                OpenApiDocument.INSTANCE.reset();\n+                OpenApiDocument.INSTANCE.config(config);\n+                OpenApiStaticFile staticFile = StaticFileProcessor.getOpenAPIFile(appContainer);\n+                OpenApiDocument.INSTANCE.modelFromStaticFile(OpenApiProcessor.modelFromStaticFile(staticFile));\n+//                OpenApiDocument.INSTANCE.modelFromAnnotations(OpenApiProcessor.modelFromAnnotations(config, IndexUtils.getIndexView(appClassloader, appContainer, config)));\n+                OpenApiDocument.INSTANCE.modelFromAnnotations(OpenApiProcessor.modelFromAnnotations(config, IndexUtils.getIndexView(moduleInfo, config)));", "originalCommit": "cf2fe89286d211be36cc0dca87d1500b49d2dba5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483583762", "bodyText": "Do you still want to support this?", "author": "Azquelt", "createdAt": "2020-09-04T12:27:39Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/CloudUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.HttpHeaders;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+\n+public class CloudUtils {\n+    private static final TraceComponent tc = Tr.register(CloudUtils.class);\n+\n+    /**\n+     * The getVCAPHost method checks whether a \"VCAP_APPLICATION\" environment variable has been set.  In Cloud Foundry\n+     * applications (where Bluemix runs) this will be set to the actual host that is visible to the user.  In that\n+     * environment the VHost from Liberty is private and not accessible externally. If the environment variable is set,\n+     * it extracts the host and returns it;.\n+     * \n+     * @return String\n+     *          The host specified in VCAP_APPLICATION or null if it is not set.\n+     */\n+    @FFDCIgnore(Exception.class)\n+    public static String getVCAPHost() {", "originalCommit": "cf2fe89286d211be36cc0dca87d1500b49d2dba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5MDYxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483590614", "bodyText": "Good question. Do Liberty instances still run in Cloud Foundry environments?  If so, then I guess we need to continue to support it.\nHowever, it does raise the question of what we need to do to ensure that the correct host/port are included in the servers section when OL is running in OpenShift... sitting behind a service or, indeed, a route.", "author": "msmiths", "createdAt": "2020-09-04T12:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5OTEyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483599129", "bodyText": "This is additional behaviour when running in CF. I have no idea whether it's still required. I know we specifically opted not to do anything additional for CF on the reactive messaging feature, for example.", "author": "Azquelt", "createdAt": "2020-09-04T12:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMjM1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483612353", "bodyText": "Ok... and we could certainly take that approach for OpenAPI since users are able to specify their own content for the servers section using a variety of mechanisms.", "author": "msmiths", "createdAt": "2020-09-04T13:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjQyMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483642422", "bodyText": "Ok, I don't mind either way, just as long as we've thought about it and decided what to do, rather than accidentally releasing something which we then have to support forever.", "author": "Azquelt", "createdAt": "2020-09-04T14:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDU0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483584541", "bodyText": "This isn't how you're supposed to version packages.\nShould be 1.0 in the release, with the major and minor versions being updated for future releases in accordance with semantic versioning.", "author": "Azquelt", "createdAt": "2020-09-04T12:29:19Z", "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/package-info.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+@Version(Constants.OSGI_VERSION)\n+@TraceOptions(traceGroup = Constants.TRACE_GROUP, messageBundle = Constants.TRACE_OPENAPI)\n+package io.openliberty.microprofile.openapi20;", "originalCommit": "cf2fe89286d211be36cc0dca87d1500b49d2dba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5MTMzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483591335", "bodyText": "So... simply change Constants::OSGI_VERSION to be \"1.0\"?", "author": "msmiths", "createdAt": "2020-09-04T12:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5OTQ4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483599480", "bodyText": "For now that will do, going forwards, packages are versioned individually, so they're unlikely to have the same version.", "author": "Azquelt", "createdAt": "2020-09-04T12:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDU0MQ=="}], "type": "inlineReview"}, {"oid": "77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "url": "https://github.com/OpenLiberty/open-liberty/commit/77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "message": "MP OpenAPI 2.0 Initial Implementation\n\nMP OpenAPI 2.0 Initial Implementation\n\nRemove com.ibm.ws.require.java8 bundle from .feature\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nSpecify edition-full in private .feature file\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nUse the 2.0-RC2 version of MP OpenAPI\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply more PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>", "committedDate": "2020-09-07T10:27:51Z", "type": "commit"}, {"oid": "77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "url": "https://github.com/OpenLiberty/open-liberty/commit/77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "message": "MP OpenAPI 2.0 Initial Implementation\n\nMP OpenAPI 2.0 Initial Implementation\n\nRemove com.ibm.ws.require.java8 bundle from .feature\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nSpecify edition-full in private .feature file\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nUse the 2.0-RC2 version of MP OpenAPI\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply more PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>", "committedDate": "2020-09-07T10:27:51Z", "type": "forcePushed"}]}