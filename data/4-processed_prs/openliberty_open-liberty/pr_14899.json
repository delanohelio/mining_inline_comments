{"pr_number": 14899, "pr_title": "refactor how SPI extensions are initilized", "pr_createdAt": "2020-11-10T12:26:44Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14899", "timeline": [{"oid": "4ca8425e2191142f878fe1f41ac908682ec63538", "url": "https://github.com/OpenLiberty/open-liberty/commit/4ca8425e2191142f878fe1f41ac908682ec63538", "message": "refactor how SPI extensions are initilized", "committedDate": "2020-11-10T12:28:19Z", "type": "forcePushed"}, {"oid": "d01c304f6010ad428fd4ef4cab0f25e153ebad83", "url": "https://github.com/OpenLiberty/open-liberty/commit/d01c304f6010ad428fd4ef4cab0f25e153ebad83", "message": "refactor how SPI extensions are initilized", "committedDate": "2020-11-10T12:29:03Z", "type": "forcePushed"}, {"oid": "37d3ff017b742c60d3268a0c5be520bff66f2793", "url": "https://github.com/OpenLiberty/open-liberty/commit/37d3ff017b742c60d3268a0c5be520bff66f2793", "message": "refactor how SPI extensions are initilized", "committedDate": "2020-11-10T12:29:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMTg1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r520711859", "bodyText": "The message is missing the {0} placeholder\nThe explanation has a placeholder but I think it shouldn't\nIn the explanation, getExtensions has () but getBeanClasses doesn't (IIRC the message guidance says you shouldn't have brackets here)", "author": "Azquelt", "createdAt": "2020-11-10T16:47:29Z", "path": "dev/com.ibm.ws.cdi.internal/resources/com/ibm/ws/cdi/internal/resources/CDI.nlsprops", "diffHunk": "@@ -72,3 +72,7 @@ implicit.bean.scanning.disabled.CWOWB1009W.useraction=Ensure that every archive\n spi.extension.failed.to.construct.CWOWB1010E=CWOWB1010E: Failed to create CDI Extension with SPI.\n spi.extension.failed.to.construct.CWOWB1010E.explanation=CDI failed to invoke the constructor of the extension class {0} that is registered with the getExtensions() method of a CDIExtensionMetadata implementation because of the exception {1}.\n spi.extension.failed.to.construct.CWOWB1010E.useraction=Fix the error that is preventing your extension from instantiating.\n+\n+spi.extension.class.in.different.bundle.CWOWB1011E=CWOWB1011E: A class registered through the CDI Extension SPI was in a different bundle to the CDIExtensionMetadata implementation.\n+spi.extension.class.in.different.bundle.CWOWB1011E.explanation=The class {0} was registered with the getExtensions() or getBeanClasses method of a CDIExtensionMetadata implementation is in a different bundle to the CDIExtensionMetadata implementation and will be ignored.", "originalCommit": "8793e10294d620206b9e7727dff88fed1680950e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNjY1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r520716656", "bodyText": "It would be good if we can list the names of both the class that's in the wrong archive and the CDIMetadataExtension implementation class which registered it.", "author": "Azquelt", "createdAt": "2020-11-10T16:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMTg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNTc5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r520715799", "bodyText": "If we're adding this requirement, it should be added to the javadoc for CDIExtensionMetadata.\nCurrently it says that the result of getBeanClasses() must be in the same archive, but doesn't say this for getExtensionClasses().", "author": "Azquelt", "createdAt": "2020-11-10T16:52:42Z", "path": "dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java", "diffHunk": "@@ -632,10 +632,28 @@ private ExtensionArchive newSPIExtensionArchive(ServiceReference<CDIExtensionMet\n         Bundle bundle = sr.getBundle();\n \n         Set<Class<? extends Extension>> extensionClasses = webSphereCDIExtensionMetaData.getExtensions();\n+        Set<Class<?>> beanClasses = webSphereCDIExtensionMetaData.getBeanClasses();\n+\n+        for (Iterator<Class<? extends Extension>> i = extensionClasses.iterator(); i.hasNext();) {\n+            Class extensionClass = i.next();\n+            if (extensionClass.getClassLoader() != webSphereCDIExtensionMetaData.getClass().getClassLoader()) {\n+                i.remove();\n+                Tr.error(tc, \"spi.extension.class.in.different.bundle.CWOWB1011E\", extensionClass.getCanonicalName());\n+            }\n+        }", "originalCommit": "8793e10294d620206b9e7727dff88fed1680950e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2508ce3d2f0620dba5181da561b976474650df5", "url": "https://github.com/OpenLiberty/open-liberty/commit/c2508ce3d2f0620dba5181da561b976474650df5", "message": "Enforce same bundle restriction", "committedDate": "2020-11-11T10:58:33Z", "type": "forcePushed"}, {"oid": "7d77676aa8ddb5ab560418687c47331f123f291b", "url": "https://github.com/OpenLiberty/open-liberty/commit/7d77676aa8ddb5ab560418687c47331f123f291b", "message": "Enforce same bundle restriction", "committedDate": "2020-11-11T23:56:22Z", "type": "forcePushed"}, {"oid": "c9a2a7fbd3380020e616c557aa40722584ac0ac3", "url": "https://github.com/OpenLiberty/open-liberty/commit/c9a2a7fbd3380020e616c557aa40722584ac0ac3", "message": "refactor how SPI extensions are initilized", "committedDate": "2020-11-12T11:24:00Z", "type": "commit"}, {"oid": "45e54f216be673d7144fba375a57e1c71c17cc0c", "url": "https://github.com/OpenLiberty/open-liberty/commit/45e54f216be673d7144fba375a57e1c71c17cc0c", "message": "Enforce same bundle restriction", "committedDate": "2020-11-12T11:24:05Z", "type": "commit"}, {"oid": "45e54f216be673d7144fba375a57e1c71c17cc0c", "url": "https://github.com/OpenLiberty/open-liberty/commit/45e54f216be673d7144fba375a57e1c71c17cc0c", "message": "Enforce same bundle restriction", "committedDate": "2020-11-12T11:24:05Z", "type": "forcePushed"}, {"oid": "93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "url": "https://github.com/OpenLiberty/open-liberty/commit/93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "message": "Update copyrights and message", "committedDate": "2020-11-13T10:55:08Z", "type": "commit"}, {"oid": "93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "url": "https://github.com/OpenLiberty/open-liberty/commit/93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "message": "Update copyrights and message", "committedDate": "2020-11-13T10:55:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMTY4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r525511689", "bodyText": "Please change the message to: \"A {0} class registered through the CDI Extension SPI is in a different bundle than the CDIExtensionMetadata implementation.\"", "author": "helyarp", "createdAt": "2020-11-17T20:42:47Z", "path": "dev/com.ibm.ws.cdi.internal/resources/com/ibm/ws/cdi/internal/resources/CDI.nlsprops", "diffHunk": "@@ -69,6 +69,10 @@ implicit.bean.scanning.disabled.CWOWB1009W=CWOWB1009W: Implicit bean archives ar\n implicit.bean.scanning.disabled.CWOWB1009W.explanation=Archives are not scanned for CDI beans unless they have a beans.xml file.\n implicit.bean.scanning.disabled.CWOWB1009W.useraction=Ensure that every archive that uses CDI has a beans.xml file or re-enable implicit beans scanning in your server.xml file.\n \n-spi.extension.failed.to.construct.CWOWB1010E=CWOWB1010E: Failed to create CDI Extension with SPI.\n-spi.extension.failed.to.construct.CWOWB1010E.explanation=CDI failed to invoke the constructor of the extension class {0} that is registered with the getExtensions() method of a CDIExtensionMetadata implementation because of the exception {1}.\n+spi.extension.failed.to.construct.CWOWB1010E=CWOWB1010E: Failed to create CDI Extension {0} with SPI because of the exception {1}.\n+spi.extension.failed.to.construct.CWOWB1010E.explanation=CDI failed to invoke the constructor of an extension class that is registered with the getExtensions() method of a CDIExtensionMetadata implementation.\n spi.extension.failed.to.construct.CWOWB1010E.useraction=Fix the error that is preventing your extension from instantiating.\n+\n+spi.extension.class.in.different.bundle.CWOWB1011E=CWOWB1011E: A class {0} registered through the CDI Extension SPI was in a different bundle to the CDIExtensionMetadata implementation.", "originalCommit": "93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r544171256", "bodyText": "Done", "author": "benjamin-confino", "createdAt": "2020-12-16T10:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTk0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r525515946", "bodyText": "Suggested change to the explanation: \"The class is ignored because it was registered with the getExtensions() or getBeanClasses method of a CDIExtensionMetadata implementation and is in a different bundle than the CDIExtensionMetadata implementation.\"", "author": "helyarp", "createdAt": "2020-11-17T20:50:42Z", "path": "dev/com.ibm.ws.cdi.internal/resources/com/ibm/ws/cdi/internal/resources/CDI.nlsprops", "diffHunk": "@@ -69,6 +69,10 @@ implicit.bean.scanning.disabled.CWOWB1009W=CWOWB1009W: Implicit bean archives ar\n implicit.bean.scanning.disabled.CWOWB1009W.explanation=Archives are not scanned for CDI beans unless they have a beans.xml file.\n implicit.bean.scanning.disabled.CWOWB1009W.useraction=Ensure that every archive that uses CDI has a beans.xml file or re-enable implicit beans scanning in your server.xml file.\n \n-spi.extension.failed.to.construct.CWOWB1010E=CWOWB1010E: Failed to create CDI Extension with SPI.\n-spi.extension.failed.to.construct.CWOWB1010E.explanation=CDI failed to invoke the constructor of the extension class {0} that is registered with the getExtensions() method of a CDIExtensionMetadata implementation because of the exception {1}.\n+spi.extension.failed.to.construct.CWOWB1010E=CWOWB1010E: Failed to create CDI Extension {0} with SPI because of the exception {1}.\n+spi.extension.failed.to.construct.CWOWB1010E.explanation=CDI failed to invoke the constructor of an extension class that is registered with the getExtensions() method of a CDIExtensionMetadata implementation.\n spi.extension.failed.to.construct.CWOWB1010E.useraction=Fix the error that is preventing your extension from instantiating.\n+\n+spi.extension.class.in.different.bundle.CWOWB1011E=CWOWB1011E: A class {0} registered through the CDI Extension SPI was in a different bundle to the CDIExtensionMetadata implementation.\n+spi.extension.class.in.different.bundle.CWOWB1011E.explanation=The class was registered with the getExtensions() or getBeanClasses method of a CDIExtensionMetadata implementation is in a different bundle to the CDIExtensionMetadata implementation and will be ignored.", "originalCommit": "93e5db7d0e9afe7d4ec4c7b4e9f93b1b12da774f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTM4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14899#discussion_r544171385", "bodyText": "And done. Thank you for the review", "author": "benjamin-confino", "createdAt": "2020-12-16T10:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTk0Ng=="}], "type": "inlineReview"}, {"oid": "435be30f7380b3adec4c862c27764e8228565056", "url": "https://github.com/OpenLiberty/open-liberty/commit/435be30f7380b3adec4c862c27764e8228565056", "message": "message review changes", "committedDate": "2020-12-16T10:09:34Z", "type": "commit"}]}