{"pr_number": 15043, "pr_title": "Avoid illegal state exception", "pr_createdAt": "2020-11-18T20:11:39Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/15043", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MDYyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15043#discussion_r526390626", "bodyText": "Need to figure out a way to get at the PoolManager so that I can get at the connections in the unshared pool.\nOr need an alternative way to change the state of the connections while purging.", "author": "KyleAure", "createdAt": "2020-11-18T20:15:43Z", "path": "dev/com.ibm.ws.jca_fat/test-applications/fvtweb/src/web/JCAFVTServlet.java", "diffHunk": "@@ -732,6 +745,92 @@ public void testMBeanPurgeTwoResourceRef(HttpServletRequest request, HttpServlet\n         }\n     }\n \n+    /**\n+     * Test race condition between an invalid state change and pool purge setting state to stale\n+     */\n+    public void testMBeanPurgeRaceCondition(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n+        ConnectionFactory cf1 = (ConnectionFactory) new InitialContext().lookup(\"java:comp/env/jms/cf1-unshareable\");\n+        Connection con1 = null;\n+        UserTransaction tran = (UserTransaction) new InitialContext().lookup(\"java:comp/UserTransaction\");\n+        try {\n+            tran.begin();//Starting this removes the LTC\n+            con1 = cf1.createConnection();\n+\n+            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n+            ObjectInstance bean = getMBeanObjectInstance(\"jms/cf1\");\n+\n+            con1.close();\n+            tran.commit();\n+\n+            //Attempt to mark connections stale right before they are purged\n+            ExecutorService exec = Executors.newFixedThreadPool(2);\n+            List<Callable<Boolean>> callables = Arrays.asList(new MarkStale(mbs, bean), new PurgeTask(mbs, bean));\n+            List<Future<Boolean>> futures = exec.invokeAll(callables);\n+            awaitTerminationAfterShutdown(exec);\n+\n+            System.out.println(\"**  Pool contents after purge:\\n\" + getPoolContents(bean));\n+            if (getPoolSize(bean) != 0)\n+                throw new Exception(\"Not all connections were purged from the pool!\");\n+\n+            assertTrue(futures.get(0).get().booleanValue());\n+            assertTrue(futures.get(1).get().booleanValue());\n+        } finally {\n+            if (con1 != null)\n+                con1.close();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"restriction\")\n+    private class MarkStale implements Callable<Boolean> {\n+        MCWrapper[] wrappers;\n+\n+        MarkStale(MBeanServer mbs, ObjectInstance bean) {\n+            //Get at MCWrappers from poolmanager]\n+            try {\n+                // TODO figure out a way to get at the pool manager so that we can call:\n+//                wrappers = pm.getUnSharedPoolConnections(); //NOTE this will get a lock\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to get wrappers\", e);\n+            }\n+        }", "originalCommit": "31412b57d8363f886f19769ff4d6ff71267d0a4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87205b4209289648ce6d128e0782e4fc73a79098", "url": "https://github.com/OpenLiberty/open-liberty/commit/87205b4209289648ce6d128e0782e4fc73a79098", "message": "avoid illegal state exception", "committedDate": "2020-11-30T15:32:16Z", "type": "forcePushed"}, {"oid": "246426f7e11f040cf6c31003bca5bf9c1846fd57", "url": "https://github.com/OpenLiberty/open-liberty/commit/246426f7e11f040cf6c31003bca5bf9c1846fd57", "message": "avoid illegal state exception", "committedDate": "2020-11-30T21:13:14Z", "type": "forcePushed"}, {"oid": "6cbaa9146e660859ae3543d38f41d8a9aaae2506", "url": "https://github.com/OpenLiberty/open-liberty/commit/6cbaa9146e660859ae3543d38f41d8a9aaae2506", "message": "Allow addExpirable() before Expirer.start()", "committedDate": "2020-11-30T20:29:34Z", "type": "forcePushed"}, {"oid": "5dad895472fd2a9496435367dc6475321e9341f2", "url": "https://github.com/OpenLiberty/open-liberty/commit/5dad895472fd2a9496435367dc6475321e9341f2", "message": "avoid illegal state exception", "committedDate": "2020-11-30T21:19:31Z", "type": "forcePushed"}, {"oid": "9ea81cf818c3f6bc80296c3bceb9f42fa0b8cde8", "url": "https://github.com/OpenLiberty/open-liberty/commit/9ea81cf818c3f6bc80296c3bceb9f42fa0b8cde8", "message": "avoid illegal state exception", "committedDate": "2020-11-30T21:23:04Z", "type": "forcePushed"}, {"oid": "58250254f917152876907a9b982330e146431968", "url": "https://github.com/OpenLiberty/open-liberty/commit/58250254f917152876907a9b982330e146431968", "message": "avoid illegal state exception", "committedDate": "2020-12-01T19:18:41Z", "type": "forcePushed"}, {"oid": "93f01301d65daaf44ce8447f77a750e74f15749b", "url": "https://github.com/OpenLiberty/open-liberty/commit/93f01301d65daaf44ce8447f77a750e74f15749b", "message": "avoid illegal state exception", "committedDate": "2020-12-03T21:10:47Z", "type": "forcePushed"}, {"oid": "e32bd034dd06ec02026a346f6b1e87ef282ee2de", "url": "https://github.com/OpenLiberty/open-liberty/commit/e32bd034dd06ec02026a346f6b1e87ef282ee2de", "message": "avoid illegal state exception", "committedDate": "2020-12-04T21:14:47Z", "type": "forcePushed"}, {"oid": "d5df91cf3756fba8902c189b9ca8fa4fb163d42c", "url": "https://github.com/OpenLiberty/open-liberty/commit/d5df91cf3756fba8902c189b9ca8fa4fb163d42c", "message": "update copyright", "committedDate": "2021-01-20T18:42:09Z", "type": "forcePushed"}, {"oid": "1d711019d5f04380e039d04413afc5d4792f4a20", "url": "https://github.com/OpenLiberty/open-liberty/commit/1d711019d5f04380e039d04413afc5d4792f4a20", "message": "avoid illegal state exception\n\nupdate copyright", "committedDate": "2021-01-20T19:37:03Z", "type": "commit"}, {"oid": "1d711019d5f04380e039d04413afc5d4792f4a20", "url": "https://github.com/OpenLiberty/open-liberty/commit/1d711019d5f04380e039d04413afc5d4792f4a20", "message": "avoid illegal state exception\n\nupdate copyright", "committedDate": "2021-01-20T19:37:03Z", "type": "forcePushed"}]}