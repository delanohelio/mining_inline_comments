{"pr_number": 15245, "pr_title": "Port Batch common test project and jbatch_fat to open-liberty", "pr_createdAt": "2020-12-09T20:03:30Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/15245", "timeline": [{"oid": "3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "url": "https://github.com/OpenLiberty/open-liberty/commit/3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "message": "Port batch test.dbservlet and jbatch_fat projects to open-liberty\n  -Moves com.ibm.ws.jbatch.test.dbservlet project to com.ibm.ws.jbatch.common_fat\n  -Moves com.ibm.ws.jbatch_fat to com.ibm.ws.jbatch.open_fat\n  -Adds gradle targets to common_fat that build app archives\n  -Adds app utility class to common_util that shrinkwraps and hot-deploy app archives\n  -Adds gradle targets to open_fat to import sources and app archives from common_fat\n  -Modifies all open_fat tests to hot-deploy app archives\n  -Repeats jbatch.open_fat for ee9, only", "committedDate": "2020-12-09T16:40:18Z", "type": "commit"}, {"oid": "735996bda1db599b06001d70ac56f2be4e4d6d4e", "url": "https://github.com/OpenLiberty/open-liberty/commit/735996bda1db599b06001d70ac56f2be4e4d6d4e", "message": "Post-code-review changes for port of Batch FATs", "committedDate": "2020-12-09T20:06:06Z", "type": "commit"}, {"oid": "735996bda1db599b06001d70ac56f2be4e4d6d4e", "url": "https://github.com/OpenLiberty/open-liberty/commit/735996bda1db599b06001d70ac56f2be4e4d6d4e", "message": "Post-code-review changes for port of Batch FATs", "committedDate": "2020-12-09T20:06:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzI4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15245#discussion_r539643289", "bodyText": "From @cgianfra:  Do we need these gradle tasks still, since you added the BatchAppUtils methods to build them at test execution time?\nI provided gradle build targets for the common_fat app archives, along with the corresponding deployment support in BatchAppUtils.java, to afford options in future jbatch work.  If, for example, you work another jbatch FAT project where importing+compiling the common_fat classes is problematic, you can opt to use the prebuilt archives.   The prebuilt archive support is otherwise vestigial and can be removed if you intend to standardize open-liberty jbatch FAT projects to use shrinkwrap during test execution.", "author": "dazavala", "createdAt": "2020-12-09T20:59:30Z", "path": "dev/com.ibm.ws.jbatch.common_fat/build.gradle", "diffHunk": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+apply from: '../wlp-gradle/subprojects/fat.gradle'\n+\n+dependencies {\n+  requiredLibs 'commons-logging:commons-logging:1.1.3'\n+}\n+\n+// This is where all application ZIP and WARs will be built\n+def appBuildDir = \"${buildDir}/test-application\"\n+\n+//Formerly com.ibm.ws.jbatch.test.dbservlet.client.jar\n+task buildCommonClientJar(type: Jar, , dependsOn: classes) {\n+  def appName = \"CommonClient\"\n+  destinationDir file(\"${appBuildDir}\")\n+  archiveName \"${appName}.jar\"\n+\n+  from (\"build/classes/java/main\") {\n+    include \"com/ibm/ws/jbatch/test/**/*.class\"\n+    include \"com/ibm/ws/jbatch/test/dbservlet/**/*.class\"\n+    into \"\"\n+  }\n+}\n+\n+task buildDbServletAppWar(type: War, dependsOn: classes) {\n+  def appName = \"DbServletApp\"\n+  destinationDir file(\"${appBuildDir}\")\n+  archiveName \"${appName}.war\"\n+\n+  //from(\"test-applications/${appName}/resources\") {\n+  //  include \"**/*\"\n+  //}\n+  from (\"build/classes/java/main\") {\n+    include \"batch/fat/web/**/*.class\"\n+    into \"WEB-INF/classes\"\n+  }\n+}\n+\n+task buildCommonUtilJar(type: Jar, dependsOn: classes) {\n+  def appName = \"CommonUtil\"\n+  destinationDir file(\"${appBuildDir}\")\n+  archiveName \"${appName}.jar\"\n+\n+  from (\"build/classes/java/main\") {\n+    include \"batch/fat/common/util/**/*.class\"\n+    include \"com/ibm/ws/jbatch/test/**/*.class\"\n+    include \"com/ibm/ws/jbatch/test/dbservlet/**/*.class\"\n+    into \"\"\n+  }\n+}\n+\n+task buildBonusPayoutWar(type: War, dependsOn: buildCommonUtilJar) {\n+  def appName = \"BonusPayout\"\n+  destinationDir file(\"${appBuildDir}\")\n+  archiveName \"${appName}.war\"\n+\n+  from(\"test-applications/${archiveName}/resources\") {\n+    include \"**/*\"\n+  }\n+  from (\"build/classes/java/main\") {\n+    include \"com/ibm/websphere/samples/batch/artifacts/**/*.class\"\n+    include \"com/ibm/websphere/samples/batch/beans/**/*.class\"\n+    include \"com/ibm/websphere/samples/batch/fat/**/*.class\"\n+    include \"com/ibm/websphere/samples/batch/util/**/*.class\"\n+    exclude \"batch/fat/web/**/*.class\"\n+    into \"WEB-INF/classes\"\n+  }\n+  from (\"build/libs/test-application\") {\n+    include \"**/CommonUtil.jar\"\n+    into \"WEB-INF/lib\"\n+  }\n+  from(\"test-applications/${archiveName}\") {\n+    include \"README.txt\"\n+    into \"\"\n+  }\n+}\n+\n+task buildBonusPayoutEAREar(type: Ear, dependsOn: buildBonusPayoutWar) {\n+  def appName = \"BonusPayoutEAR\"\n+  destinationDir file(\"${appBuildDir}\")\n+  archiveName \"${appName}.ear\"\n+\n+  from(\"test-applications/${archiveName}/resources\") {\n+    include \"**/*\"\n+  }\n+  from (\"build/libs/test-application\") {\n+    include \"**/BonusPayout.war\"\n+    into \"\"\n+  }\n+}\n+\n+assemble {", "originalCommit": "735996bda1db599b06001d70ac56f2be4e4d6d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1MTQxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15245#discussion_r539651410", "bodyText": "From @cgianfra: I'll need to go over this with you just so I fully understand it. The ShrinkHelper path is what I assumed we'd be using, but I'm not sure when you'd use a prebuilt app instead (and where it would be pre-built from).\nFor the jbatch.open_fat there's no need to use the support for prebuilt common_fat app archives.  If you choose to keep and use the prebuilt support, here's how you would do it:\nimport static com.ibm.ws.jbatch.test.BatchAppUtils.USE_PREBUILT;\n\n...\n   BatchAppUtils.addDropinsDbServletAppWar(server, USE_PREBUILT);", "author": "dazavala", "createdAt": "2020-12-09T21:13:00Z", "path": "dev/com.ibm.ws.jbatch.common_fat/src/com/ibm/ws/jbatch/test/BatchAppUtils.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *   IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jbatch.test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.Filters;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+\n+public class BatchAppUtils {\n+\n+    //////////\n+    // Methods to build application archives at runtime\n+\n+    static JavaArchive testUtilJar = null;\n+\n+    static JavaArchive getTestUtilJar() throws Exception {\n+        if (testUtilJar == null) {\n+            testUtilJar = ShrinkHelper.buildJavaArchiveNoResources(\"testutil.jar\",\n+                                               \"batch.fat.util\");\n+        }\n+        return testUtilJar;\n+    }\n+\n+    static JavaArchive commonUtilJar = null;\n+\n+    static JavaArchive getCommonUtilJar() throws Exception {\n+        if (commonUtilJar == null) {\n+            commonUtilJar = ShrinkHelper.buildJavaArchiveNoResources(\"commonUtil.jar\",\n+                                                 \"batch.fat.common.util\", \n+                                                 \"com.ibm.ws.jbatch.test\",\n+                                                 \"com.ibm.ws.jbatch.test.dbservlet\");\n+        }\n+        return commonUtilJar;\n+    }\n+\n+    static JavaArchive clientJar = null;\n+\n+    static JavaArchive getClientJar() throws Exception {\n+        if (clientJar == null) {\n+            clientJar = ShrinkHelper.buildJavaArchiveNoResources(\"com.ibm.ws.jbatch.test.dbservlet.client.jar\",\n+                                             \"com.ibm.ws.jbatch.test\",\n+                                             \"com.ibm.ws.jbatch.test.dbservlet\");\n+        }\n+        return clientJar;\n+    }\n+\n+    static WebArchive dbServletApp = null;\n+\n+    static WebArchive getDbServletAppWar() {\n+        if (dbServletApp == null) {\n+            dbServletApp = buildBatchWar(\"DbServletApp.war\",\n+                                   \"(.*)(DbServlet|ServerKillerServlet|StringUtils)(.*)\",  // include regex\n+                                   \"batch.fat.web\");\n+        }\n+        return dbServletApp;\n+    }\n+\n+    static WebArchive batchSecurityWar = null;\n+\n+    static WebArchive getBatchSecurityWar() {\n+        if (batchSecurityWar == null) {\n+            batchSecurityWar = buildBatchWar(\"batchSecurity.war\", \n+                                       null, \n+                                       \"batch.fat.artifacts\", \"batch.security\");\n+        }\n+        return batchSecurityWar;\n+    }\n+\n+    static WebArchive batchFATWar = null;\n+\n+    static WebArchive getBatchFATWar() throws Exception {\n+        if (batchFATWar == null) {\n+            batchFATWar = buildBatchWar(\"batchFAT.war\",\n+                                  null, \n+                                  \"batch.fat.artifacts\", \"batch.fat.cdi\", \"batch.fat.common\", \"batch.fat.web\", \"batch.fat.web.customlogic\",\n+                                  \"chunktests.artifacts\",\n+                                  \"processitem.artifacts\");\n+            batchFATWar.addAsLibrary(getTestUtilJar());\n+            batchFATWar.addAsLibrary(getCommonUtilJar());\n+        }\n+        return batchFATWar;\n+    }\n+\n+    static WebArchive bonusPayoutWar = null;\n+\n+    static WebArchive getBonusPayoutWar() throws Exception {\n+        if (bonusPayoutWar == null) {\n+            bonusPayoutWar = buildBatchWar(\"BonusPayout.war\", \n+                                     null,\n+                                     \"com.ibm.websphere.samples.batch.artifacts\",\n+                                     \"com.ibm.websphere.samples.batch.beans\",\n+                                     \"com.ibm.websphere.samples.batch.fat\",\n+                                     \"com.ibm.websphere.samples.batch.util\");\n+            bonusPayoutWar.addAsLibrary(getCommonUtilJar());\n+        }\n+        return bonusPayoutWar;\n+    }\n+\n+    static EnterpriseArchive bonusPayoutEAREar = null;\n+\n+    static EnterpriseArchive getBonusPayoutEAREar() throws Exception {\n+        if (bonusPayoutEAREar == null) {\n+            final String appName = \"BonusPayoutEAR.ear\";\n+            bonusPayoutEAREar = ShrinkWrap.create(EnterpriseArchive.class, appName);\n+            File appXml = new File(\"test-applications/\" + appName + \"/resources/META-INF/application.xml\");\n+            bonusPayoutEAREar.setApplicationXML(appXml);\n+            bonusPayoutEAREar.addAsModule(getBonusPayoutWar());\n+        }\n+        return bonusPayoutEAREar;\n+    }\n+\n+    /**\n+     * Build a Batch Web Application Archive.\n+     * @param appName The name of a web application archive file, including the .war extension\n+     * @param regex A regex pattern to precisely match paths names in packages to include in the web application.\n+     * @param packageNames A comma-delimited list of package paths to include in the web application.  \n+     *  All path names in each packages will be included unless further filtered by the regex pattern.\n+     */\n+    static WebArchive buildBatchWar(String appName,\n+                                     String regex,\n+                                     String... packageNames) {\n+\n+        WebArchive webApp = ShrinkWrap.create(WebArchive.class, appName);\n+        final boolean INCLUDE_SUBPKGS = false;  // Exclude subpackages\n+        if (regex == null) {\n+            webApp.addPackages(INCLUDE_SUBPKGS, packageNames); // Include all pkg paths\n+        } else {\n+            webApp.addPackages(INCLUDE_SUBPKGS, Filters.include(regex), packageNames);  // Include only pkg paths matching regex \n+        }\n+        // Web-inf resources\n+        File webInf = new File(\"test-applications/\" + appName + \"/resources/WEB-INF\");\n+        if (webInf.exists()) {\n+            for (File webInfElement : webInf.listFiles()) {\n+                if (!!!webInfElement.isDirectory()) { // Ignore classes subdir\n+                    webApp.addAsWebInfResource(webInfElement);\n+                }\n+            }\n+        }\n+        // Batch job definition files\n+        File webInfBatchJobs = new File(\"test-applications/\" + appName + \"/resources/WEB-INF/classes/META-INF/batch-jobs\");\n+        if (webInfBatchJobs.exists()) {\n+            for (File batchJob : webInfBatchJobs.listFiles()) {\n+                String target = \"classes/META-INF/batch-jobs/\" + batchJob.getName();\n+                webApp.addAsWebInfResource(batchJob, target);\n+            }\n+        }\n+        // Package properties\n+        File pkgProps = new File(\"test-applications/\" + appName + \"/package.properties\");\n+        if (pkgProps.exists()) {\n+            webApp.addAsWebResource(pkgProps);\n+        }\n+        // Readme\n+        File readme = new File(\"test-applications/\" + appName + \"/README.txt\");\n+        if (readme.exists()) {\n+            webApp.addAsWebResource(readme);\n+        }\n+\n+        return webApp;\n+    }\n+\n+    //////////\n+    // Methods to deploy applications\n+\n+    final static String PrebuiltAppArtifactPath = \"build/lib/test-application/\";  // Relative to autoFVT dir\n+\n+    public static final String USE_PREBUILT = \"USE_PREBUILT\";\n+\n+    static boolean usePrebuilt(String[] options) {\n+        return Arrays.asList(options).contains(USE_PREBUILT);\n+    }\n+\n+    static void addDropinPrebuilt(LibertyServer targetServer, String appName) throws Exception{\n+        targetServer.copyFileToLibertyServerRoot(PrebuiltAppArtifactPath, \"dropins\", appName);\n+        if (JakartaEE9Action.isActive()) {\n+            JakartaEE9Action.transformApp(Paths.get(targetServer.getServerRoot(), \"dropins\", appName));\n+        }\n+    }\n+\n+    public static void addDropinsDbServletAppWar(LibertyServer targetServer, String... options) throws Exception {\n+        if (usePrebuilt(options)) {", "originalCommit": "735996bda1db599b06001d70ac56f2be4e4d6d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "579f79720ab77874523c3ba7f8d4f79a429b6a4b", "url": "https://github.com/OpenLiberty/open-liberty/commit/579f79720ab77874523c3ba7f8d4f79a429b6a4b", "message": "Move common_fat copied source to new directory", "committedDate": "2020-12-10T03:51:51Z", "type": "commit"}]}