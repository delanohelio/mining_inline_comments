{"pr_number": 12711, "pr_title": "Address JSON log handling tech debt", "pr_createdAt": "2020-06-19T14:47:43Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12711", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTkwNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449789907", "bodyText": "picky, but I'd suggest ordering these in some logical way.  also, startGCJson I believe only applies to logstashCollector, so should perhaps follow the naming convention you have for the other related logstashCollector strings.", "author": "donbourne", "createdAt": "2020-07-04T17:17:00Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -30,30 +30,24 @@\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n+    private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n-    private static String startFFDCJson = null;\n+    private static String startTraceLogstashCollector = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MDAwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449790002", "bodyText": "should include GC in this consistency sweep up.", "author": "donbourne", "createdAt": "2020-07-04T17:18:48Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -30,30 +30,24 @@\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n+    private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n-    private static String startFFDCJson = null;\n+    private static String startTraceLogstashCollector = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n-    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n+    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODEwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449798104", "bodyText": "convention for static constants is to use all upper case", "author": "donbourne", "createdAt": "2020-07-04T19:12:57Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -63,6 +57,8 @@\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private static final int jsonKey = CollectorConstants.KEYS_JSON;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODM0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449798342", "bodyText": "convention for static constants is to use all upper case", "author": "donbourne", "createdAt": "2020-07-04T19:16:39Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -31,6 +32,7 @@\n public class CollectorJsonUtils {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5OTM0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449799347", "bodyText": "I think we could now rename these startXXXJSONFields methods to just startXXX since there's just one for each type", "author": "donbourne", "createdAt": "2020-07-04T19:31:20Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -350,56 +292,52 @@ protected static StringBuilder startGCJson(String hostName, String wlpUserDir, S\n         return sb;\n     }\n \n-    protected static StringBuilder startAuditJson(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(2048);\n-\n-        if (startAuditJson != null) {\n-            sb.append(startAuditJson);\n-        } else {\n-            sb.append(\"{\");\n-            sb.append(TYPE_FIELD_KEY);\n-            sb.append(AUDIT_JSON_TYPE_FIELD);\n-            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n-            startAuditJson = sb.toString();\n-        }\n-\n-        return sb;\n-    }\n-\n-    protected static JSONObjectBuilder startAuditJsonFields() {\n+    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        jsonBuilder.addPreformatted(startAuditJsonFields);\n+        if (format == jsonKey)\n+            jsonBuilder.addPreformatted(startAuditJsonFields);\n+        else if (format == logstashKey)\n+            jsonBuilder.addPreformatted(startAuditLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startMessageJsonFields() {\n+    protected static JSONObjectBuilder startMessageJsonFields(int format) {", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5OTY3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449799674", "bodyText": "this one might just be personal taste, but I prefer to define variables right before I use them... that way I can easily tell where that variable starts getting used", "author": "donbourne", "createdAt": "2020-07-04T19:36:08Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -121,12 +123,18 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n                                                  String serverName, String hostName, String eventType, Object event, String[] tags) {\n \n         LogTraceData logData = (LogTraceData) event;\n-        StringBuilder sb = null;\n+        JSONObjectBuilder jsonBuilder = null;\n+        boolean isMessageEvent = eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE);\n \n-        if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))\n-            sb = CollectorJsonHelpers.startMessageJson(hostName, wlpUserDir, serverName);\n-        if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))\n-            sb = CollectorJsonHelpers.startTraceJson(hostName, wlpUserDir, serverName);\n+        ArrayList<KeyValuePair> extensions = null;\n+        KeyValuePairList kvpl = null;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800052", "bodyText": "I think you answered this once before -- is there reason we're able to not convert to Strings for each of these values?  Just want to make sure we don't change what gets quotes around values and what doesn't.", "author": "donbourne", "createdAt": "2020-07-04T19:41:52Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +150,84 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(logstashKey, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(logstashKey, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(logstashKey, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(logstashKey, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(logstashKey, isMessageEvent), logData.getModule(), false, true)\n+                   .addField(LogTraceData.getLoglevelKey(logstashKey, isMessageEvent), logData.getLoglevel(), false, true)\n+                   .addField(LogTraceData.getMethodNameKey(logstashKey, isMessageEvent), logData.getMethodName(), false, true)\n+                   .addField(LogTraceData.getClassNameKey(logstashKey, isMessageEvent), logData.getClassName(), false, true)\n+                   .addField(LogTraceData.getSequenceKey(logstashKey, isMessageEvent), logData.getSequence(), false, true);\n+        //@formatter:on\n+\n+        kvpl = logData.getExtensions();\n         if (kvpl != null) {\n             if (kvpl.getKey().equals(LogFieldConstants.EXTENSIONS_KVPL)) {\n-                ArrayList<KeyValuePair> extensions = kvpl.getList();\n+                extensions = kvpl.getList();\n                 for (KeyValuePair k : extensions) {\n                     String extKey = k.getKey();\n                     if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Integer.toString(k.getIntValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getIntValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Float.toString(k.getFloatValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getFloatValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Long.toString(k.getLongValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getLongValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Boolean.toString(k.getBooleanValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getBooleanValue(), false);\n                     } else {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, k.getStringValue(), false, true, false, false, false);\n+                        jsonBuilder.addField(extKey, k.getStringValue(), false, true);", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r451823175", "bodyText": "Sorry, I'm very unfamiliar with how the extension fields work. Maybe Ellen or Yushan can offer more insight on this (I'm mainly just going through the motions of replacing all addToJSON with jsonBuilders and mimicking the previous behaviour as much as possible)", "author": "jennifer-c", "createdAt": "2020-07-08T21:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMTExNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r454431116", "bodyText": "ok, looking at the addToJSON method, I think what you're doing is equivalent.  The last parameter in the addToJSON calls was indicating that the numeric values should be added without adding quotes around the values in the JSON.  Similarly, the code in jsonBuilder.addField would add those numeric values without quotes around the values.", "author": "donbourne", "createdAt": "2020-07-14T15:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDE4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800188", "bodyText": "upper case", "author": "donbourne", "createdAt": "2020-07-04T19:44:17Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java", "diffHunk": "@@ -29,6 +29,7 @@\n public class CollectorJsonUtils_JSON {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private final static int jsonKey = CollectorConstants.KEYS_JSON;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDUyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800526", "bodyText": "upper case", "author": "donbourne", "createdAt": "2020-07-04T19:49:14Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java", "diffHunk": "@@ -80,8 +81,7 @@\n                                             LogFieldConstants.REMOTEUSERID\n     };\n \n-    public static final short KEYS_JSON = 0;\n-    public static final short KEYS_LOGSTASH = 1;\n+    private static final short jsonKey = CollectorConstants.KEYS_JSON;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODQ0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449808442", "bodyText": "Originally NAMES1_1 referred to the set of names used for JSON and logstashCollector-1.1 (which we got rid of), and NAMES referred to the set of names used for logstashCollector-1.0.  Can you please rename NAMES1_1 / NAMES to NAMES_JSON / NAMES_LC (across all of these XXXData.java files)?", "author": "donbourne", "createdAt": "2020-07-04T21:56:05Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java", "diffHunk": "@@ -34,11 +34,16 @@\n                                             LogFieldConstants.THREADID,\n                                             LogFieldConstants.HOSTNAME,\n                                             LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME\n+                                            LogFieldConstants.SERVERNAME,\n+                                            LogFieldConstants.TYPE\n     };", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f69422689c1bb4f0ffceac36385f642fc5415c96", "url": "https://github.com/OpenLiberty/open-liberty/commit/f69422689c1bb4f0ffceac36385f642fc5415c96", "message": "Clean up LogTraceData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "670919f632276ca0ee236d2db602c31d60469efc", "url": "https://github.com/OpenLiberty/open-liberty/commit/670919f632276ca0ee236d2db602c31d60469efc", "message": "Clean up AuditData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "0c95becc5ae5c0ac97e5207f901f921e852b7b37", "url": "https://github.com/OpenLiberty/open-liberty/commit/0c95becc5ae5c0ac97e5207f901f921e852b7b37", "message": "Clean up FFDCData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "url": "https://github.com/OpenLiberty/open-liberty/commit/8a1ba1e3f49d32502fb40b0617e994291f44d974", "message": "Clean up formatting, get rid of unused methods, better variables", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "e29b0414e8de810ab3b6e09d715af382240f29d1", "url": "https://github.com/OpenLiberty/open-liberty/commit/e29b0414e8de810ab3b6e09d715af382240f29d1", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:35:21Z", "type": "forcePushed"}, {"oid": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/3f8a030a85ef2975bd13eae0880ac56477f54d2c", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:39:07Z", "type": "commit"}, {"oid": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/3f8a030a85ef2975bd13eae0880ac56477f54d2c", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:39:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460599403", "bodyText": "I don't think these fields are used... are they?  it scared me for a min to see fields in the NAMES_JSON without the IBM_ prefix (other than type / host).  For the fields that aren't used, I wonder if we should put in a dummy value to avoid them easily slipping into the code without being noticed.", "author": "donbourne", "createdAt": "2020-07-27T01:03:30Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/FFDCData.java", "diffHunk": "@@ -23,43 +23,50 @@ public FFDCData() {\n         super(13);\n     }\n \n-    public static final String[] NAMES = {\n-                                           LogFieldConstants.DATETIME,\n-                                           LogFieldConstants.DATEOFFIRSTOCCURENCE,\n-                                           LogFieldConstants.COUNT,\n-                                           LogFieldConstants.MESSAGE,\n-                                           LogFieldConstants.CLASSNAME,\n-                                           LogFieldConstants.LABEL,\n-                                           LogFieldConstants.EXCEPTIONNAME,\n-                                           LogFieldConstants.PROBEID,\n-                                           LogFieldConstants.SOURCEID,\n-                                           LogFieldConstants.THREADID,\n-                                           LogFieldConstants.STACKTRACE,\n-                                           LogFieldConstants.OBJECTDETAILS,\n-                                           LogFieldConstants.SEQUENCE\n-    };\n-\n-    public static final String[] NAMES1_1 = {\n-                                              LogFieldConstants.IBM_DATETIME,\n+    public static final String[] NAMES_LC = {\n+                                              LogFieldConstants.DATETIME,\n                                               LogFieldConstants.DATEOFFIRSTOCCURENCE,\n                                               LogFieldConstants.COUNT,\n                                               LogFieldConstants.MESSAGE,\n-                                              LogFieldConstants.IBM_CLASSNAME,\n+                                              LogFieldConstants.CLASSNAME,\n                                               LogFieldConstants.LABEL,\n-                                              LogFieldConstants.IBM_EXCEPTIONNAME,\n-                                              LogFieldConstants.IBM_PROBEID,\n+                                              LogFieldConstants.EXCEPTIONNAME,\n+                                              LogFieldConstants.PROBEID,\n                                               LogFieldConstants.SOURCEID,\n-                                              LogFieldConstants.IBM_THREADID, //long\n-                                              LogFieldConstants.IBM_STACKTRACE,\n-                                              LogFieldConstants.IBM_OBJECTDETAILS,\n-                                              LogFieldConstants.IBM_SEQUENCE,\n-                                              LogFieldConstants.HOST,\n-                                              LogFieldConstants.IBM_USERDIR,\n-                                              LogFieldConstants.IBM_SERVERNAME,\n+                                              LogFieldConstants.THREADID,\n+                                              LogFieldConstants.STACKTRACE,\n+                                              LogFieldConstants.OBJECTDETAILS,\n+                                              LogFieldConstants.SEQUENCE,\n+                                              LogFieldConstants.HOSTNAME,\n+                                              LogFieldConstants.WLPUSERDIR,\n+                                              LogFieldConstants.SERVERNAME,\n                                               LogFieldConstants.TYPE\n     };\n \n-    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n+    public static final String[] NAMES_JSON = {\n+                                                LogFieldConstants.IBM_DATETIME,\n+                                                LogFieldConstants.DATEOFFIRSTOCCURENCE,\n+                                                LogFieldConstants.COUNT,\n+                                                LogFieldConstants.MESSAGE,", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NDM1MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r461864350", "bodyText": "dateOfFirstOccurrence and count don't seem to be used, but message is. From an FFDC event generated on a clean wlp for 20.0.0.7:\n{\"type\":\"liberty_ffdc\",\"host\":\"192.168.64.1\",\"ibm_userDir\":\"\\/Users\\/jennifer.zhen.chengibm.com\\/20007\\/wlp\\/usr\\/\",\"ibm_serverName\":\"defaultServer\",\"ibm_datetime\":\"2020-07-28T09:49:03.205-0400\",\"message\":\"PKIX path validation failed: java.security.cert.CertPathValidatorException: signature check failed\",\"ibm_className\":\"com.ibm.ws.ssl.core.WSX509TrustManager\",\"ibm_exceptionName\":\"sun.security.validator.ValidatorException\",\"ibm_probeID\":\"checkServerTrusted\",\"ibm_threadId\":\"00000032\",\"ibm_stackTrace\":\"[snipped for space]\",\"ibm_objectDetails\":\"[snipped for space]\",\"ibm_sequence\":\"1595944143205_0000000000001\"}\n\nIs this concerning? \ud83d\ude13", "author": "jennifer-c", "createdAt": "2020-07-28T20:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNTE0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r462535147", "bodyText": "no, that's exactly the right list of fields to see in an ffdc JSON.  message is a special case that we didn't add an ibm_ prefix to because it makes it fit better with other events that you might want to show in the same views.\nSo, that said, I'm wondering if we should block out the field names we don't use (eg. with a constant like \"XXXXXXX\" rather than fill in the array with invalid (but harder to notice) ones?", "author": "donbourne", "createdAt": "2020-07-29T19:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwOTMwOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460609308", "bodyText": "looks like you reversed the order of messageId and module.", "author": "donbourne", "createdAt": "2020-07-27T01:57:47Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +145,86 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwOTQ1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460609451", "bodyText": "this was calling getSeverityKey before", "author": "donbourne", "createdAt": "2020-07-27T01:58:29Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +145,86 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)\n+                   .addField(LogTraceData.getLoglevelKey(LOGSTASH_KEY, isMessageEvent), logData.getLoglevel(), false, true)", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "url": "https://github.com/OpenLiberty/open-liberty/commit/a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "message": "Address comments", "committedDate": "2020-07-28T21:35:56Z", "type": "commit"}]}