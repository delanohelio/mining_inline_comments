{"pr_number": 10392, "pr_title": "Return message null async", "pr_createdAt": "2020-01-13T15:11:07Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10392", "timeline": [{"oid": "f2482a3f8703880a6723f0afa4a075d0a0bf2e08", "url": "https://github.com/OpenLiberty/open-liberty/commit/f2482a3f8703880a6723f0afa4a075d0a0bf2e08", "message": "Created tests\n\n* Added faulttolerance_fat.tests.async project to test FT2.0+ @Asynchronous methods\n* Added tests to check @Asynchronous methods return correct error messages when methods return null\n* Added tests to check @Retry and @Fallback are NOT applied if an @Asynchronous method returns null", "committedDate": "2020-01-13T14:54:58Z", "type": "commit"}, {"oid": "6b7b8feea90fb66c13702894995bf916d5cb9b62", "url": "https://github.com/OpenLiberty/open-liberty/commit/6b7b8feea90fb66c13702894995bf916d5cb9b62", "message": "Implemented an error message for when a user's @Asynchrnous method returns null", "committedDate": "2020-01-13T14:59:31Z", "type": "commit"}, {"oid": "17642483591e7e8c42e7f010beaf13b226ce5c73", "url": "https://github.com/OpenLiberty/open-liberty/commit/17642483591e7e8c42e7f010beaf13b226ce5c73", "message": "Fixed and cleaned server.stopServer error codes and comments", "committedDate": "2020-01-13T14:59:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5NzQxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10392#discussion_r366297417", "bodyText": "Remove spaces after equals", "author": "Azquelt", "createdAt": "2020-01-14T11:55:00Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance/resources/com/ibm/ws/microprofile/faulttolerance/resources/FaultTolerance.nlsprops", "diffHunk": "@@ -38,6 +38,11 @@ application.shutdown.CWMFT0002W=CWMFT0002W: The {0} asynchronous method cannot c\n application.shutdown.CWMFT0002W.explanation=Asynchronous methods run in the context of the component that started them. The application or component that called the asynchronous method stopped, which prevented the asynchronous method from completing.\n application.shutdown.CWMFT0002W.useraction= This warning usually occurs when an application, component, or server is shutting down. If all running asynchronous methods must complete, then the application or component must wait for the results before stopping.\n \n+#The asynchronous method {0} returned null. \n+asynchronous.returned.null.CWMFT0003W=CWMFT0003W: The asynchronous method {0} returned null. \n+asynchronous.returned.null.CWMFT0003W.explanation= Methods annotated with @Asynchronous must not return a null value.\n+asynchronous.returned.null.CWMFT0003W.useraction= Prevent a null value being returned from the method.\n+", "originalCommit": "6b7b8feea90fb66c13702894995bf916d5cb9b62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5NzcxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10392#discussion_r366297714", "bodyText": "Try not to add incidental changes like this.", "author": "Azquelt", "createdAt": "2020-01-14T11:55:39Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance.2.0/src/com/ibm/ws/microprofile/faulttolerance20/impl/AsyncExecutor.java", "diffHunk": "@@ -376,6 +385,7 @@ protected void processEndOfAttempt(AsyncAttemptContextImpl<W> attemptContext, Me\n                     prepareFallback(result, executionContext);\n                     return;\n                 }\n+", "originalCommit": "6b7b8feea90fb66c13702894995bf916d5cb9b62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5Nzk0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10392#discussion_r366297946", "bodyText": "This probably reads slightly better as one if statement with && rather than two, but there's not much in it.", "author": "Azquelt", "createdAt": "2020-01-14T11:56:15Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance.2.0/src/com/ibm/ws/microprofile/faulttolerance20/impl/AsyncExecutor.java", "diffHunk": "@@ -262,6 +262,15 @@ private void runExecutionAttempt(AsyncAttemptContextImpl<W> attemptContext, Bulk\n                 Tr.event(tc, \"Execution {0} attempt result: {1}\", executionContext.getId(), methodResult);\n             }\n \n+            if (!methodResult.isFailure()) {\n+                if (methodResult.getResult() == null) {", "originalCommit": "6b7b8feea90fb66c13702894995bf916d5cb9b62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17d9540f238145434266c143b1cb602ebd56dfc3", "url": "https://github.com/OpenLiberty/open-liberty/commit/17d9540f238145434266c143b1cb602ebd56dfc3", "message": "Resolved code review comments", "committedDate": "2020-01-14T14:02:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MjYwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10392#discussion_r366562606", "bodyText": "Change\nPrevent a null value being returned from the method.\nto\nPrevent a null value from being returned by the method.", "author": "jantley-ibm", "createdAt": "2020-01-14T20:43:29Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance/resources/com/ibm/ws/microprofile/faulttolerance/resources/FaultTolerance.nlsprops", "diffHunk": "@@ -38,6 +38,11 @@ application.shutdown.CWMFT0002W=CWMFT0002W: The {0} asynchronous method cannot c\n application.shutdown.CWMFT0002W.explanation=Asynchronous methods run in the context of the component that started them. The application or component that called the asynchronous method stopped, which prevented the asynchronous method from completing.\n application.shutdown.CWMFT0002W.useraction= This warning usually occurs when an application, component, or server is shutting down. If all running asynchronous methods must complete, then the application or component must wait for the results before stopping.\n \n+#The asynchronous method {0} returned null. \n+asynchronous.returned.null.CWMFT0003W=CWMFT0003W: The asynchronous method {0} returned null. \n+asynchronous.returned.null.CWMFT0003W.explanation=Methods annotated with @Asynchronous must not return a null value.\n+asynchronous.returned.null.CWMFT0003W.useraction=Prevent a null value being returned from the method.", "originalCommit": "17d9540f238145434266c143b1cb602ebd56dfc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46f13f23104d95a891f42f347a5b8b4c8534a64f", "url": "https://github.com/OpenLiberty/open-liberty/commit/46f13f23104d95a891f42f347a5b8b4c8534a64f", "message": "Minor ID change in error message", "committedDate": "2020-01-15T10:32:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3MjI1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10392#discussion_r368572253", "bodyText": "This could do with a better app name", "author": "Azquelt", "createdAt": "2020-01-20T14:22:10Z", "path": "dev/com.ibm.ws.microprofile.faulttolerance.cdi_fat/fat/src/com/ibm/websphere/microprofile/faulttolerance_fat/tests/async/AsyncReturnNullTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.websphere.microprofile.faulttolerance_fat.tests.async;\n+\n+import static com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions.SERVER_ONLY;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.microprofile.faulttolerance_fat.suite.RepeatFaultTolerance;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.RepeatTests;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+@RunWith(FATRunner.class)\n+public class AsyncReturnNullTest extends FATServletClient {\n+\n+    private static final String APP_NAME = \"ftAsync\";", "originalCommit": "46f13f23104d95a891f42f347a5b8b4c8534a64f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}