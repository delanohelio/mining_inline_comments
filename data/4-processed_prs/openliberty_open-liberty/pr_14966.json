{"pr_number": 14966, "pr_title": "Jms20 fat delay", "pr_createdAt": "2020-11-13T17:33:31Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14966", "timeline": [{"oid": "7f2a07b32f4fa5d7e7b6e7e47461c6ed9ca15012", "url": "https://github.com/OpenLiberty/open-liberty/commit/7f2a07b32f4fa5d7e7b6e7e47461c6ed9ca15012", "message": "Merge of dazavala 11851-tbitonti_jms20_fat_delay\nFixes to DelayFullTest.\nAlso:\nA few small cleanups.\nChanged to run only the Jakarta/EE9 repeat.\nRe-added full mode annotations as previously present.\nAdded comments in select places for unresolved questions regarding the tests.", "committedDate": "2020-11-14T06:25:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NjYwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524376601", "bodyText": "We can pull these // dz comments.  I added them to debug whether the containing test methods failed due to unexpected client|server state and configuration.  This is a poorly designed test case which relies on the order of test execution, and where tests like this one do not verify (assert) the state and configuration of the messaging client and servers are running before verifying the use-case behavior.", "author": "dazavala", "createdAt": "2020-11-16T15:58:15Z", "path": "dev/com.ibm.ws.messaging.open_jms20deliverydelay_fat/fat/src/com/ibm/ws/messaging/jms20/deliverydelay/fat/DelayFullTest.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.jms20.deliverydelay.fat;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.runner.RunWith;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class DelayFullTest {\n+    private static LibertyServer engineServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayEngine\");\n+\n+    private static LibertyServer clientServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayClient\");\n+    private static final int clientPort = clientServer.getHttpDefaultPort();\n+    private static final String clientHost = clientServer.getHostname();\n+\n+    private static final String ddAppName = \"DeliveryDelay\";\n+    private static final String[] ddAppPackages = new String[] { \"deliverydelay.web\" };\n+    private static final String ddContextRoot = \"DeliveryDelay\";\n+\n+    private static final String mdbAppName = \"jmsapp.ear\";\n+    private static final String mdbJarName = \"jmsmdb\";\n+    private static final String[] mdbJarPackages = new String[] { \"jmsmdb.ejb\" };\n+\n+    private static final String MDB_CONFIG = \"DelayClient_MDB.xml\";\n+\n+    private static final String MDB_CONFIG_QUEUE_BINDINGS = \"DelayClient_QueueMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_QUEUE_TCP = \"DelayClient_QueueMDB_TCP.xml\";\n+\n+    private static final String MDB_CONFIG_TOPIC_BINDINGS = \"DelayClient_TopicMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_TOPIC_TCP = \"DelayClient_TopicMDB_TCP.xml\";\n+\n+    private static final String[] EE9_TRANSFORMED_CONFIGS = new String[] {\n+        MDB_CONFIG_TOPIC_BINDINGS,\n+        MDB_CONFIG_TOPIC_TCP\n+    };\n+\n+    private static void transformConfigurations() throws Exception {\n+        if ( !JakartaEE9Action.isActive() ) {\n+            return;\n+        }\n+\n+        for ( String config : EE9_TRANSFORMED_CONFIGS ) {\n+            Path configPath = Paths.get(\"lib/LibertyFATTestFiles\", config);\n+            JakartaEE9Action.transformApp(configPath);\n+        }\n+    }\n+\n+    private static final boolean THROW_EXCEPTIONS = true;\n+\n+    private static void stopClient(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    // This FAT suite requires that the client server be stopped before\n+    // the engine server is stopped, and requires that engine server be\n+    // started before the client server is started.\n+\n+    private static void stopServers(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+            engineServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                engineServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private static void startServers() throws Exception{\n+        startServers(DEFAULT_CLIENT);\n+    }\n+\n+    private static final String DEFAULT_CLIENT = null;\n+\n+    private static void startEngine() throws Exception {\n+        String engineConfiguration = \"DelayEngine.xml\";\n+        engineServer.setServerConfigurationFile(engineConfiguration);\n+        engineServer.startServer(\"DelayFull_Engine.log\");\n+    }\n+\n+    private static void startClient(String clientConfiguration) throws Exception {\n+        if ( clientConfiguration == DEFAULT_CLIENT ) {\n+            clientConfiguration = MDB_CONFIG;\n+        }\n+        clientServer.setServerConfigurationFile(clientConfiguration);\n+        clientServer.startServer(\"DelayFull_Client.log\");\n+    }\n+\n+    private static void startServers(String clientConfiguration) throws Exception {\n+        startEngine();\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartClient() throws Exception {\n+        restartClient(DEFAULT_CLIENT);\n+    }\n+\n+    private static void restartClient(String clientConfiguration) throws Exception {\n+        stopClient(THROW_EXCEPTIONS);\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartServers(String clientConfiguration) throws Exception{\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers(clientConfiguration);\n+    }\n+\n+    private static void restartServers() throws Exception {\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers();\n+    }\n+\n+    @BeforeClass\n+    public static void testConfigFileChange() throws Exception {\n+        transformConfigurations();\n+\n+        engineServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        clientServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        TestUtils.addDropinsWebApp(clientServer, ddAppName, ddAppPackages);\n+\n+        // Commercial liberty places the MDB EJB JAR in an application, and as a\n+        // configured application, not as a drop-ins application.\n+        //\n+        // Running the MDB EJB JAR as a drop-in JAR does not work.\n+\n+        JavaArchive mdbJar = ShrinkHelper.buildJavaArchive(mdbJarName, mdbJarPackages);\n+        EnterpriseArchive mdbEar =  ShrinkWrap.create(EnterpriseArchive.class, mdbAppName);\n+        mdbEar.addAsModule(mdbJar);\n+        ShrinkHelper.exportToServer(clientServer, \"apps\", mdbEar);\n+\n+        startServers();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        stopServers(!THROW_EXCEPTIONS);\n+\n+        ShrinkHelper.cleanAllExportedArchives();\n+    }\n+\n+    private boolean runInServlet(String test) throws IOException {\n+        return TestUtils.runInServlet(clientHost, clientPort, ddContextRoot, test); // throws IOException\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelays_B() throws Exception {\n+        restartClient(MDB_CONFIG_QUEUE_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_QUEUE_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysTopic_B() throws Exception {\n+        restartClient(MDB_CONFIG_TOPIC_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_TOPIC_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_B() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive\");\n+        assertTrue(\"testPersistentMessageStore_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_Tcp() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);", "originalCommit": "61ef8fdfff64aa0fbdd5e15a75eef3ce609f1bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNDc2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524434766", "bodyText": "Noted; the comments were removed.", "author": "tbitonti", "createdAt": "2020-11-16T17:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NjYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NzI2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524377264", "bodyText": "I'll remove this in another branch which repairs the lacking doPriv in the messaging runtime.", "author": "dazavala", "createdAt": "2020-11-16T15:59:06Z", "path": "dev/com.ibm.ws.messaging.open_jms20deliverydelay_fat/fat/src/com/ibm/ws/messaging/jms20/deliverydelay/fat/DelayFullTest.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.jms20.deliverydelay.fat;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.runner.RunWith;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class DelayFullTest {\n+    private static LibertyServer engineServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayEngine\");\n+\n+    private static LibertyServer clientServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayClient\");\n+    private static final int clientPort = clientServer.getHttpDefaultPort();\n+    private static final String clientHost = clientServer.getHostname();\n+\n+    private static final String ddAppName = \"DeliveryDelay\";\n+    private static final String[] ddAppPackages = new String[] { \"deliverydelay.web\" };\n+    private static final String ddContextRoot = \"DeliveryDelay\";\n+\n+    private static final String mdbAppName = \"jmsapp.ear\";\n+    private static final String mdbJarName = \"jmsmdb\";\n+    private static final String[] mdbJarPackages = new String[] { \"jmsmdb.ejb\" };\n+\n+    private static final String MDB_CONFIG = \"DelayClient_MDB.xml\";\n+\n+    private static final String MDB_CONFIG_QUEUE_BINDINGS = \"DelayClient_QueueMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_QUEUE_TCP = \"DelayClient_QueueMDB_TCP.xml\";\n+\n+    private static final String MDB_CONFIG_TOPIC_BINDINGS = \"DelayClient_TopicMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_TOPIC_TCP = \"DelayClient_TopicMDB_TCP.xml\";\n+\n+    private static final String[] EE9_TRANSFORMED_CONFIGS = new String[] {\n+        MDB_CONFIG_TOPIC_BINDINGS,\n+        MDB_CONFIG_TOPIC_TCP\n+    };\n+\n+    private static void transformConfigurations() throws Exception {\n+        if ( !JakartaEE9Action.isActive() ) {\n+            return;\n+        }\n+\n+        for ( String config : EE9_TRANSFORMED_CONFIGS ) {\n+            Path configPath = Paths.get(\"lib/LibertyFATTestFiles\", config);\n+            JakartaEE9Action.transformApp(configPath);\n+        }\n+    }\n+\n+    private static final boolean THROW_EXCEPTIONS = true;\n+\n+    private static void stopClient(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    // This FAT suite requires that the client server be stopped before\n+    // the engine server is stopped, and requires that engine server be\n+    // started before the client server is started.\n+\n+    private static void stopServers(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+            engineServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                engineServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private static void startServers() throws Exception{\n+        startServers(DEFAULT_CLIENT);\n+    }\n+\n+    private static final String DEFAULT_CLIENT = null;\n+\n+    private static void startEngine() throws Exception {\n+        String engineConfiguration = \"DelayEngine.xml\";\n+        engineServer.setServerConfigurationFile(engineConfiguration);\n+        engineServer.startServer(\"DelayFull_Engine.log\");\n+    }\n+\n+    private static void startClient(String clientConfiguration) throws Exception {\n+        if ( clientConfiguration == DEFAULT_CLIENT ) {\n+            clientConfiguration = MDB_CONFIG;\n+        }\n+        clientServer.setServerConfigurationFile(clientConfiguration);\n+        clientServer.startServer(\"DelayFull_Client.log\");\n+    }\n+\n+    private static void startServers(String clientConfiguration) throws Exception {\n+        startEngine();\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartClient() throws Exception {\n+        restartClient(DEFAULT_CLIENT);\n+    }\n+\n+    private static void restartClient(String clientConfiguration) throws Exception {\n+        stopClient(THROW_EXCEPTIONS);\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartServers(String clientConfiguration) throws Exception{\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers(clientConfiguration);\n+    }\n+\n+    private static void restartServers() throws Exception {\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers();\n+    }\n+\n+    @BeforeClass\n+    public static void testConfigFileChange() throws Exception {\n+        transformConfigurations();\n+\n+        engineServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        clientServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        TestUtils.addDropinsWebApp(clientServer, ddAppName, ddAppPackages);\n+\n+        // Commercial liberty places the MDB EJB JAR in an application, and as a\n+        // configured application, not as a drop-ins application.\n+        //\n+        // Running the MDB EJB JAR as a drop-in JAR does not work.\n+\n+        JavaArchive mdbJar = ShrinkHelper.buildJavaArchive(mdbJarName, mdbJarPackages);\n+        EnterpriseArchive mdbEar =  ShrinkWrap.create(EnterpriseArchive.class, mdbAppName);\n+        mdbEar.addAsModule(mdbJar);\n+        ShrinkHelper.exportToServer(clientServer, \"apps\", mdbEar);\n+\n+        startServers();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        stopServers(!THROW_EXCEPTIONS);\n+\n+        ShrinkHelper.cleanAllExportedArchives();\n+    }\n+\n+    private boolean runInServlet(String test) throws IOException {\n+        return TestUtils.runInServlet(clientHost, clientPort, ddContextRoot, test); // throws IOException\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelays_B() throws Exception {\n+        restartClient(MDB_CONFIG_QUEUE_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_QUEUE_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysTopic_B() throws Exception {\n+        restartClient(MDB_CONFIG_TOPIC_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_TOPIC_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_B() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive\");\n+        assertTrue(\"testPersistentMessageStore_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_Tcp() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive_Tcp\");\n+        assertTrue(\"testPersistentMessageStore_Tcp failed\", testResult);\n+    }\n+\n+    // TODO: SIB runtime is missing a doPriv.  Test fails without this permission ", "originalCommit": "61ef8fdfff64aa0fbdd5e15a75eef3ce609f1bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNDQ4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524434486", "bodyText": "Noted.  I added to the comment that this would be fixed in a subsequent update.", "author": "tbitonti", "createdAt": "2020-11-16T17:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NzI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3OTAyMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524379023", "bodyText": "Remove '// TODO: ???`  My concern here is that the test methods from this point forward changed pattern for computing testResult.  Odd.", "author": "dazavala", "createdAt": "2020-11-16T16:01:19Z", "path": "dev/com.ibm.ws.messaging.open_jms20deliverydelay_fat/fat/src/com/ibm/ws/messaging/jms20/deliverydelay/fat/DelayFullTest.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.jms20.deliverydelay.fat;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.runner.RunWith;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class DelayFullTest {\n+    private static LibertyServer engineServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayEngine\");\n+\n+    private static LibertyServer clientServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayClient\");\n+    private static final int clientPort = clientServer.getHttpDefaultPort();\n+    private static final String clientHost = clientServer.getHostname();\n+\n+    private static final String ddAppName = \"DeliveryDelay\";\n+    private static final String[] ddAppPackages = new String[] { \"deliverydelay.web\" };\n+    private static final String ddContextRoot = \"DeliveryDelay\";\n+\n+    private static final String mdbAppName = \"jmsapp.ear\";\n+    private static final String mdbJarName = \"jmsmdb\";\n+    private static final String[] mdbJarPackages = new String[] { \"jmsmdb.ejb\" };\n+\n+    private static final String MDB_CONFIG = \"DelayClient_MDB.xml\";\n+\n+    private static final String MDB_CONFIG_QUEUE_BINDINGS = \"DelayClient_QueueMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_QUEUE_TCP = \"DelayClient_QueueMDB_TCP.xml\";\n+\n+    private static final String MDB_CONFIG_TOPIC_BINDINGS = \"DelayClient_TopicMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_TOPIC_TCP = \"DelayClient_TopicMDB_TCP.xml\";\n+\n+    private static final String[] EE9_TRANSFORMED_CONFIGS = new String[] {\n+        MDB_CONFIG_TOPIC_BINDINGS,\n+        MDB_CONFIG_TOPIC_TCP\n+    };\n+\n+    private static void transformConfigurations() throws Exception {\n+        if ( !JakartaEE9Action.isActive() ) {\n+            return;\n+        }\n+\n+        for ( String config : EE9_TRANSFORMED_CONFIGS ) {\n+            Path configPath = Paths.get(\"lib/LibertyFATTestFiles\", config);\n+            JakartaEE9Action.transformApp(configPath);\n+        }\n+    }\n+\n+    private static final boolean THROW_EXCEPTIONS = true;\n+\n+    private static void stopClient(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    // This FAT suite requires that the client server be stopped before\n+    // the engine server is stopped, and requires that engine server be\n+    // started before the client server is started.\n+\n+    private static void stopServers(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+            engineServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                engineServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private static void startServers() throws Exception{\n+        startServers(DEFAULT_CLIENT);\n+    }\n+\n+    private static final String DEFAULT_CLIENT = null;\n+\n+    private static void startEngine() throws Exception {\n+        String engineConfiguration = \"DelayEngine.xml\";\n+        engineServer.setServerConfigurationFile(engineConfiguration);\n+        engineServer.startServer(\"DelayFull_Engine.log\");\n+    }\n+\n+    private static void startClient(String clientConfiguration) throws Exception {\n+        if ( clientConfiguration == DEFAULT_CLIENT ) {\n+            clientConfiguration = MDB_CONFIG;\n+        }\n+        clientServer.setServerConfigurationFile(clientConfiguration);\n+        clientServer.startServer(\"DelayFull_Client.log\");\n+    }\n+\n+    private static void startServers(String clientConfiguration) throws Exception {\n+        startEngine();\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartClient() throws Exception {\n+        restartClient(DEFAULT_CLIENT);\n+    }\n+\n+    private static void restartClient(String clientConfiguration) throws Exception {\n+        stopClient(THROW_EXCEPTIONS);\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartServers(String clientConfiguration) throws Exception{\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers(clientConfiguration);\n+    }\n+\n+    private static void restartServers() throws Exception {\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers();\n+    }\n+\n+    @BeforeClass\n+    public static void testConfigFileChange() throws Exception {\n+        transformConfigurations();\n+\n+        engineServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        clientServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        TestUtils.addDropinsWebApp(clientServer, ddAppName, ddAppPackages);\n+\n+        // Commercial liberty places the MDB EJB JAR in an application, and as a\n+        // configured application, not as a drop-ins application.\n+        //\n+        // Running the MDB EJB JAR as a drop-in JAR does not work.\n+\n+        JavaArchive mdbJar = ShrinkHelper.buildJavaArchive(mdbJarName, mdbJarPackages);\n+        EnterpriseArchive mdbEar =  ShrinkWrap.create(EnterpriseArchive.class, mdbAppName);\n+        mdbEar.addAsModule(mdbJar);\n+        ShrinkHelper.exportToServer(clientServer, \"apps\", mdbEar);\n+\n+        startServers();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        stopServers(!THROW_EXCEPTIONS);\n+\n+        ShrinkHelper.cleanAllExportedArchives();\n+    }\n+\n+    private boolean runInServlet(String test) throws IOException {\n+        return TestUtils.runInServlet(clientHost, clientPort, ddContextRoot, test); // throws IOException\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelays_B() throws Exception {\n+        restartClient(MDB_CONFIG_QUEUE_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_QUEUE_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysTopic_B() throws Exception {\n+        restartClient(MDB_CONFIG_TOPIC_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_TOPIC_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_B() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive\");\n+        assertTrue(\"testPersistentMessageStore_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_Tcp() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive_Tcp\");\n+        assertTrue(\"testPersistentMessageStore_Tcp failed\", testResult);\n+    }\n+\n+    // TODO: SIB runtime is missing a doPriv.  Test fails without this permission \n+    // in the client xml:\n+    //\n+    // <javaPermission className=\"org.osgi.framework.ServicePermission\" name=\"*\" actions=\"register\"/>\n+    //\n+    // See DelayClient_MDB.xml\n+\n+    @Test\n+    public void testPersistentMessageStoreTopic_B() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessageTopic\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveTopic\");\n+        assertTrue(\"testPersistentMessageStoreTopic_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStoreTopic_Tcp() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessageTopic_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveTopic_Tcp\");\n+        assertTrue(\"testPersistentMessageStoreTopic_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysClassicApi() throws Exception {\n+        restartClient(MDB_CONFIG_QUEUE_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysClassicApi\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : QueueBindingsMessage2-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : QueueBindingsMessage1-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_QUEUE_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysClassicApi_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : QueueTCPMessage2-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : QueueTCPMessage1-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysTopicClassicApi()throws Exception {\n+        restartClient(MDB_CONFIG_TOPIC_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopicClassicApi\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : TopicBindingsMessage2-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : TopicBindingsMessage1-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_TOPIC_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopicClassicApi_Tcp\");\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : TopicTCPMessage2-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\n+            \"Message received on mdb : TopicTCPMessage1-ClassicApi\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStoreClassicApi_B() throws Exception {\n+        runInServlet(\"testPersistentMessageClassicApi\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveClassicApi\");\n+        assertTrue(\"testPersistentMessageStoreClassicApi_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStoreClassicApi_Tcp() throws Exception {\n+        runInServlet(\"testPersistentMessageClassicApi_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveClassicApi_Tcp\");\n+        assertTrue(\"testPersistentMessageStoreClassicApi_Tcp failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStoreTopicClassicApi_B() throws Exception {\n+        runInServlet(\"testPersistentMessageTopicClassicApi\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveTopicClassicApi\");\n+        assertTrue(\"testPersistentMessageStoreTopicClassicApi_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStoreTopicClassicApi_Tcp()throws Exception {\n+        runInServlet(\"testPersistentMessageTopicClassicApi_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceiveTopicClassicApi_Tcp\");\n+        assertTrue(\"testPersistentMessageStoreTopicClassicApi_Tcp failed\", testResult);\n+    }\n+\n+    // regression tests for durable unshared\n+\n+    @Test\n+    public void testCreateUnSharedDurable_B_SecOff() throws Exception {\n+        boolean testResult = true;\n+\n+        if ( !runInServlet(\"testCreateUnSharedDurableConsumer_create\") ) {\n+            testResult = false;\n+        }\n+        \n+        restartClient();\n+\n+        if ( !runInServlet(\"testCreateUnSharedDurableConsumer_consume\") ) {\n+            testResult = false;\n+        }\n+\n+        assertTrue(\"testCreateSharedDurableExpiry_B_SecOff failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testCreateSharedDurable_B_SecOff() throws Exception {\n+        boolean testResult = true;\n+\n+        // TODO: ???", "originalCommit": "61ef8fdfff64aa0fbdd5e15a75eef3ce609f1bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzk0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524433942", "bodyText": "Noted; the comment was removed.", "author": "tbitonti", "createdAt": "2020-11-16T17:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3OTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTYxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524381617", "bodyText": "I'll fix this in another branch, as mentioned earlier, as I need to determine whether my intended changes to the messaging runtime are appropriate.", "author": "dazavala", "createdAt": "2020-11-16T16:04:47Z", "path": "dev/com.ibm.ws.messaging.open_jms20deliverydelay_fat/fat/src/com/ibm/ws/messaging/jms20/deliverydelay/fat/DelayFullTest.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.jms20.deliverydelay.fat;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.runner.RunWith;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class DelayFullTest {\n+    private static LibertyServer engineServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayEngine\");\n+\n+    private static LibertyServer clientServer =\n+        LibertyServerFactory.getLibertyServer(\"DeliveryDelayClient\");\n+    private static final int clientPort = clientServer.getHttpDefaultPort();\n+    private static final String clientHost = clientServer.getHostname();\n+\n+    private static final String ddAppName = \"DeliveryDelay\";\n+    private static final String[] ddAppPackages = new String[] { \"deliverydelay.web\" };\n+    private static final String ddContextRoot = \"DeliveryDelay\";\n+\n+    private static final String mdbAppName = \"jmsapp.ear\";\n+    private static final String mdbJarName = \"jmsmdb\";\n+    private static final String[] mdbJarPackages = new String[] { \"jmsmdb.ejb\" };\n+\n+    private static final String MDB_CONFIG = \"DelayClient_MDB.xml\";\n+\n+    private static final String MDB_CONFIG_QUEUE_BINDINGS = \"DelayClient_QueueMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_QUEUE_TCP = \"DelayClient_QueueMDB_TCP.xml\";\n+\n+    private static final String MDB_CONFIG_TOPIC_BINDINGS = \"DelayClient_TopicMDB_Bindings.xml\";\n+    private static final String MDB_CONFIG_TOPIC_TCP = \"DelayClient_TopicMDB_TCP.xml\";\n+\n+    private static final String[] EE9_TRANSFORMED_CONFIGS = new String[] {\n+        MDB_CONFIG_TOPIC_BINDINGS,\n+        MDB_CONFIG_TOPIC_TCP\n+    };\n+\n+    private static void transformConfigurations() throws Exception {\n+        if ( !JakartaEE9Action.isActive() ) {\n+            return;\n+        }\n+\n+        for ( String config : EE9_TRANSFORMED_CONFIGS ) {\n+            Path configPath = Paths.get(\"lib/LibertyFATTestFiles\", config);\n+            JakartaEE9Action.transformApp(configPath);\n+        }\n+    }\n+\n+    private static final boolean THROW_EXCEPTIONS = true;\n+\n+    private static void stopClient(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    // This FAT suite requires that the client server be stopped before\n+    // the engine server is stopped, and requires that engine server be\n+    // started before the client server is started.\n+\n+    private static void stopServers(boolean throwExceptions) throws Exception {\n+        if ( throwExceptions ) {\n+            clientServer.stopServer();\n+            engineServer.stopServer();\n+        } else {\n+            try {\n+                clientServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                engineServer.stopServer();\n+            } catch ( Exception e ) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private static void startServers() throws Exception{\n+        startServers(DEFAULT_CLIENT);\n+    }\n+\n+    private static final String DEFAULT_CLIENT = null;\n+\n+    private static void startEngine() throws Exception {\n+        String engineConfiguration = \"DelayEngine.xml\";\n+        engineServer.setServerConfigurationFile(engineConfiguration);\n+        engineServer.startServer(\"DelayFull_Engine.log\");\n+    }\n+\n+    private static void startClient(String clientConfiguration) throws Exception {\n+        if ( clientConfiguration == DEFAULT_CLIENT ) {\n+            clientConfiguration = MDB_CONFIG;\n+        }\n+        clientServer.setServerConfigurationFile(clientConfiguration);\n+        clientServer.startServer(\"DelayFull_Client.log\");\n+    }\n+\n+    private static void startServers(String clientConfiguration) throws Exception {\n+        startEngine();\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartClient() throws Exception {\n+        restartClient(DEFAULT_CLIENT);\n+    }\n+\n+    private static void restartClient(String clientConfiguration) throws Exception {\n+        stopClient(THROW_EXCEPTIONS);\n+        startClient(clientConfiguration);\n+    }\n+\n+    private static void restartServers(String clientConfiguration) throws Exception{\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers(clientConfiguration);\n+    }\n+\n+    private static void restartServers() throws Exception {\n+        stopServers(THROW_EXCEPTIONS);\n+        startServers();\n+    }\n+\n+    @BeforeClass\n+    public static void testConfigFileChange() throws Exception {\n+        transformConfigurations();\n+\n+        engineServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        clientServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\", \"features/testjmsinternals-1.0.mf\");\n+\n+        TestUtils.addDropinsWebApp(clientServer, ddAppName, ddAppPackages);\n+\n+        // Commercial liberty places the MDB EJB JAR in an application, and as a\n+        // configured application, not as a drop-ins application.\n+        //\n+        // Running the MDB EJB JAR as a drop-in JAR does not work.\n+\n+        JavaArchive mdbJar = ShrinkHelper.buildJavaArchive(mdbJarName, mdbJarPackages);\n+        EnterpriseArchive mdbEar =  ShrinkWrap.create(EnterpriseArchive.class, mdbAppName);\n+        mdbEar.addAsModule(mdbJar);\n+        ShrinkHelper.exportToServer(clientServer, \"apps\", mdbEar);\n+\n+        startServers();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        stopServers(!THROW_EXCEPTIONS);\n+\n+        ShrinkHelper.cleanAllExportedArchives();\n+    }\n+\n+    private boolean runInServlet(String test) throws IOException {\n+        return TestUtils.runInServlet(clientHost, clientPort, ddContextRoot, test); // throws IOException\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelays_B() throws Exception {\n+        restartClient(MDB_CONFIG_QUEUE_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_QUEUE_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelays_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : QueueTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testDeliveryDelayForDifferentDelaysTopic_B() throws Exception {\n+        restartClient(MDB_CONFIG_TOPIC_BINDINGS);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic\");\n+\n+        String msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicBindingsMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers(MDB_CONFIG_TOPIC_TCP);\n+\n+        runInServlet(\"testDeliveryDelayForDifferentDelaysTopic_Tcp\");\n+\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage2\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+        msg = clientServer.waitForStringInLogUsingLastOffset(\"Message received on mdb : TopicTCPMessage1\");\n+        assertNotNull(\"Could not find the upload message in the trace.log\", msg);\n+\n+        restartServers();\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_B() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive\");\n+        assertTrue(\"testPersistentMessageStore_B failed\", testResult);\n+    }\n+\n+    @Test\n+    public void testPersistentMessageStore_Tcp() throws Exception {\n+        // dz restartServers(DEFAULT_CLIENT);\n+\n+        runInServlet(\"testPersistentMessage_Tcp\");\n+\n+        restartServers();\n+\n+        boolean testResult = runInServlet(\"testPersistentMessageReceive_Tcp\");\n+        assertTrue(\"testPersistentMessageStore_Tcp failed\", testResult);\n+    }\n+\n+    // TODO: SIB runtime is missing a doPriv.  Test fails without this permission \n+    // in the client xml:\n+    //\n+    // <javaPermission className=\"org.osgi.framework.ServicePermission\" name=\"*\" actions=\"register\"/>", "originalCommit": "61ef8fdfff64aa0fbdd5e15a75eef3ce609f1bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzU5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524433596", "bodyText": "Noted; I added a comment to this effect.", "author": "tbitonti", "createdAt": "2020-11-16T17:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MTAyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524391027", "bodyText": "See line 49, above.  That's where the #Messaging section starts.  We have a minor problem here.  Please...\n\nChange the right-hand-side of the DelayClient properties (lines 79,80) to jakarta-metatype.properties\nMove the DelayClient properties to immediately after line 54 (just before the # Metatype comment)\nDelete the comment starting at #messaging.\nDelete the jakarta-messaging-metatype.properties iff the file is now vestigial.", "author": "dazavala", "createdAt": "2020-11-16T16:17:32Z", "path": "dev/wlp-jakartaee-transform/rules/jakarta-xml-master.properties", "diffHunk": "@@ -72,6 +72,12 @@ faces-config1.xml=jakarta-faces-config.properties\n com.ibm.ws.security.inflow.context.provider.xml=jakarta-connectors.properties\n com.ibm.ws.jca17.processor.service.ConnectionFactoryResourceBuilder.xml=jakarta-resource.properties\n com.ibm.ws.security.javaeesec.cdi.extensions.JavaEESecCDIExtension.xml=jakarta-xml-securityEnterprise.properties\n+#messaging", "originalCommit": "61ef8fdfff64aa0fbdd5e15a75eef3ce609f1bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzMzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14966#discussion_r524433334", "bodyText": "Updated.  See the new commit for the changes.  I'm leaving both properties files, for now.", "author": "tbitonti", "createdAt": "2020-11-16T17:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MTAyNw=="}], "type": "inlineReview"}, {"oid": "e123b0626f4aef5d9dd969a3e3c91e8d63d80fb4", "url": "https://github.com/OpenLiberty/open-liberty/commit/e123b0626f4aef5d9dd969a3e3c91e8d63d80fb4", "message": "Corrected comments to remove reference to commercial liberty.\nRemoved comments out test code.\nCorrected transform rules per review comments.", "committedDate": "2020-11-16T18:56:27Z", "type": "forcePushed"}, {"oid": "bc4506e39605cdf7584defcb05dc90abd320e149", "url": "https://github.com/OpenLiberty/open-liberty/commit/bc4506e39605cdf7584defcb05dc90abd320e149", "message": "Initial port of JMS20 delivery delay FAT tests from commercial liberty.\nAll files are present and converted.  Compilation is complete.\nTests which modify feature sets must be updated to run under jakarta conversion.\nNo tests have yet been run.", "committedDate": "2020-11-17T21:13:37Z", "type": "commit"}, {"oid": "6abffb88951e97f1a858a7d223ff95db8fc6e712", "url": "https://github.com/OpenLiberty/open-liberty/commit/6abffb88951e97f1a858a7d223ff95db8fc6e712", "message": "Corrections to delivery delay FAT tests; all running except transacted send, and still need to update the test which dynamically updates features.", "committedDate": "2020-11-17T21:13:37Z", "type": "commit"}, {"oid": "70170151d8d254da3ed0050f6c8e06296f139b74", "url": "https://github.com/OpenLiberty/open-liberty/commit/70170151d8d254da3ed0050f6c8e06296f139b74", "message": "Use FATRunner for test classes.\nDelayFullSecOnTest is running fully.", "committedDate": "2020-11-17T21:13:37Z", "type": "commit"}, {"oid": "39f50cdf05cdd52794499831688cecb9c08f8c3c", "url": "https://github.com/OpenLiberty/open-liberty/commit/39f50cdf05cdd52794499831688cecb9c08f8c3c", "message": "DelayFullSecOnTest is now running.", "committedDate": "2020-11-17T21:13:38Z", "type": "commit"}, {"oid": "903152110dcafcc84a524e61745f72269c3c240c", "url": "https://github.com/OpenLiberty/open-liberty/commit/903152110dcafcc84a524e61745f72269c3c240c", "message": "jmsmdb fixes.", "committedDate": "2020-11-17T21:13:38Z", "type": "commit"}, {"oid": "7c5dc452b3aaaeb92fe6874aef0c0d0a7b208fbb", "url": "https://github.com/OpenLiberty/open-liberty/commit/7c5dc452b3aaaeb92fe6874aef0c0d0a7b208fbb", "message": "Put jmsmdb EJBJAR back under jmsapp, and back in the apps folder.\nAdd transform step for MDB server configurations, which have activation specifications.\nCorrect the tests which update configured features to use the correct features when running in the jakarta repeat.\nMisc code fixes.", "committedDate": "2020-11-17T21:20:51Z", "type": "commit"}, {"oid": "81fc2c8482e25c43601be47374ca8b2386d3e189", "url": "https://github.com/OpenLiberty/open-liberty/commit/81fc2c8482e25c43601be47374ca8b2386d3e189", "message": "Enable delivery delay FAT suite and set to run only on the Jakarta repeat.\nThese test classes are enabled:\n  DelayLiteSecOffTest\n  DelayLiteSecOnTest\n  DelayFullSecOffTest\n  DelayFullSecOnTest\nThis test class is seeing failures on TCP tests and is disabled:\n  DelayFullTest", "committedDate": "2020-11-17T21:20:53Z", "type": "commit"}, {"oid": "59c0348c5574b1c6d049b8238f675b2fb8678472", "url": "https://github.com/OpenLiberty/open-liberty/commit/59c0348c5574b1c6d049b8238f675b2fb8678472", "message": "Merge of dazavala 11851-tbitonti_jms20_fat_delay\nFixes to DelayFullTest.\nAlso:\nA few small cleanups.\nChanged to run only the Jakarta/EE9 repeat.\nRe-added full mode annotations as previously present.\nAdded comments in select places for unresolved questions regarding the tests.", "committedDate": "2020-11-17T21:22:07Z", "type": "commit"}, {"oid": "17daf231ac1a58975e433d57671bb2fc8e7e1da2", "url": "https://github.com/OpenLiberty/open-liberty/commit/17daf231ac1a58975e433d57671bb2fc8e7e1da2", "message": "Corrected comments to remove reference to commercial liberty.\nRemoved comments out test code.\nCorrected transform rules per review comments.", "committedDate": "2020-11-17T21:24:02Z", "type": "commit"}, {"oid": "17daf231ac1a58975e433d57671bb2fc8e7e1da2", "url": "https://github.com/OpenLiberty/open-liberty/commit/17daf231ac1a58975e433d57671bb2fc8e7e1da2", "message": "Corrected comments to remove reference to commercial liberty.\nRemoved comments out test code.\nCorrected transform rules per review comments.", "committedDate": "2020-11-17T21:24:02Z", "type": "forcePushed"}, {"oid": "9677a45a9062c71f548ceaf63639ea338f4dce3c", "url": "https://github.com/OpenLiberty/open-liberty/commit/9677a45a9062c71f548ceaf63639ea338f4dce3c", "message": "Correct transformer master XML rules for messaging delay FAT.", "committedDate": "2020-11-18T15:43:15Z", "type": "commit"}]}