{"pr_number": 65500, "pr_title": "Support response content-type with versioned media type", "pr_createdAt": "2020-11-25T14:53:12Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65500", "timeline": [{"oid": "27d5d30913a89897726dfe3d319051eed4fb79ce", "url": "https://github.com/elastic/elasticsearch/commit/27d5d30913a89897726dfe3d319051eed4fb79ce", "message": "draft", "committedDate": "2020-11-17T10:09:04Z", "type": "commit"}, {"oid": "6e349a9bcfe0bc54f80fba98db8e9e6dac7fb367", "url": "https://github.com/elastic/elasticsearch/commit/6e349a9bcfe0bc54f80fba98db8e9e6dac7fb367", "message": "include in tests", "committedDate": "2020-11-17T14:15:55Z", "type": "commit"}, {"oid": "ca9aa4d28d1728151ee5f6d75ad8abb24188619d", "url": "https://github.com/elastic/elasticsearch/commit/ca9aa4d28d1728151ee5f6d75ad8abb24188619d", "message": "checkstyle'", "committedDate": "2020-11-17T15:30:11Z", "type": "commit"}, {"oid": "d396dbf5b196d01349b1024902a2ddb0ea2dc4ed", "url": "https://github.com/elastic/elasticsearch/commit/d396dbf5b196d01349b1024902a2ddb0ea2dc4ed", "message": "line wrap", "committedDate": "2020-11-17T16:20:36Z", "type": "commit"}, {"oid": "ea066f4d943b2633dc8c998009eba34ef3ae533e", "url": "https://github.com/elastic/elasticsearch/commit/ea066f4d943b2633dc8c998009eba34ef3ae533e", "message": "guess  what was the  response type", "committedDate": "2020-11-20T09:29:34Z", "type": "commit"}, {"oid": "51ade0842f0d1f26edb04f472be12bbe5bcd2548", "url": "https://github.com/elastic/elasticsearch/commit/51ade0842f0d1f26edb04f472be12bbe5bcd2548", "message": "take media type from  provided xconttenttype", "committedDate": "2020-11-20T10:12:04Z", "type": "commit"}, {"oid": "a8315bec7a55e6010722b39dcb5e1360d311ff08", "url": "https://github.com/elastic/elasticsearch/commit/a8315bec7a55e6010722b39dcb5e1360d311ff08", "message": "remove redudnant ifs", "committedDate": "2020-11-20T16:24:14Z", "type": "commit"}, {"oid": "c65c5eff80bcf0a897d465994c5427aa5e82ce8e", "url": "https://github.com/elastic/elasticsearch/commit/c65c5eff80bcf0a897d465994c5427aa5e82ce8e", "message": "removed unused code", "committedDate": "2020-11-24T07:49:02Z", "type": "commit"}, {"oid": "48db8766deced54b3dd708c773854dd46cb0367b", "url": "https://github.com/elastic/elasticsearch/commit/48db8766deced54b3dd708c773854dd46cb0367b", "message": "format response content type basing on params", "committedDate": "2020-11-25T14:39:59Z", "type": "commit"}, {"oid": "78e3f1c32e332dabe0b7021e8e9df5d662f52078", "url": "https://github.com/elastic/elasticsearch/commit/78e3f1c32e332dabe0b7021e8e9df5d662f52078", "message": "Merge branch 'master' into compat/xcontent_responsetype_format_params", "committedDate": "2020-11-25T14:40:04Z", "type": "commit"}, {"oid": "227e0f8d7943deabd55428ffe810f1a2e2dea247", "url": "https://github.com/elastic/elasticsearch/commit/227e0f8d7943deabd55428ffe810f1a2e2dea247", "message": "xcontent factory for vnd", "committedDate": "2020-12-01T13:57:43Z", "type": "commit"}, {"oid": "d94b4dc73a2f5e656e750ec7c79ef801762c70cf", "url": "https://github.com/elastic/elasticsearch/commit/d94b4dc73a2f5e656e750ec7c79ef801762c70cf", "message": "text fixtures", "committedDate": "2020-12-02T15:29:48Z", "type": "commit"}, {"oid": "91fcf3a3c59692e64372f57a1c4cea8269402066", "url": "https://github.com/elastic/elasticsearch/commit/91fcf3a3c59692e64372f57a1c4cea8269402066", "message": "precommit", "committedDate": "2020-12-02T15:44:27Z", "type": "commit"}, {"oid": "04b44ce8831166085ec23072437b2668ae9ebd2d", "url": "https://github.com/elastic/elasticsearch/commit/04b44ce8831166085ec23072437b2668ae9ebd2d", "message": "Merge branch 'master' into compat/xcontent_responsetype_format_params", "committedDate": "2020-12-03T07:44:26Z", "type": "commit"}, {"oid": "a085dc6c33a355db06b99f541e41958f1168aec4", "url": "https://github.com/elastic/elasticsearch/commit/a085dc6c33a355db06b99f541e41958f1168aec4", "message": "test fixes", "committedDate": "2020-12-03T14:36:48Z", "type": "commit"}, {"oid": "7aeabf7a09505778be0fe134d758e501e0627fe2", "url": "https://github.com/elastic/elasticsearch/commit/7aeabf7a09505778be0fe134d758e501e0627fe2", "message": "fix serialisation", "committedDate": "2020-12-03T20:14:08Z", "type": "commit"}, {"oid": "d59449538248b66676e4fe501e0ab0f0d905cc20", "url": "https://github.com/elastic/elasticsearch/commit/d59449538248b66676e4fe501e0ab0f0d905cc20", "message": "fixing restcontroller", "committedDate": "2020-12-07T13:56:07Z", "type": "commit"}, {"oid": "0e3c446391cf06192c6d22d6d107c15a003ac333", "url": "https://github.com/elastic/elasticsearch/commit/0e3c446391cf06192c6d22d6d107c15a003ac333", "message": "Merge remote-tracking branch 'upstream/master' into compat/xcontent_responsetype_format_params", "committedDate": "2020-12-08T12:00:06Z", "type": "commit"}, {"oid": "8c520ce91822c59324463063b6a131208588c794", "url": "https://github.com/elastic/elasticsearch/commit/8c520ce91822c59324463063b6a131208588c794", "message": "spotless", "committedDate": "2020-12-08T12:36:22Z", "type": "commit"}, {"oid": "521b5ad5e580ddedd30be5f948bfbc33a9ec0480", "url": "https://github.com/elastic/elasticsearch/commit/521b5ad5e580ddedd30be5f948bfbc33a9ec0480", "message": "small cleanup", "committedDate": "2020-12-08T13:35:09Z", "type": "commit"}, {"oid": "261df305596e234ec96acdb929e4dfed091af20e", "url": "https://github.com/elastic/elasticsearch/commit/261df305596e234ec96acdb929e4dfed091af20e", "message": "tests relying on xcontent being in cannonical form - not chaning", "committedDate": "2020-12-08T15:46:41Z", "type": "commit"}, {"oid": "48200e2762c66f69391e27e3eb727dc11af18d72", "url": "https://github.com/elastic/elasticsearch/commit/48200e2762c66f69391e27e3eb727dc11af18d72", "message": "test fix", "committedDate": "2020-12-09T08:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5MjU0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r539292549", "bodyText": "this is to assert that during bulk api all requests have the same contentype. Used by rest HLRC", "author": "pgomulka", "createdAt": "2020-12-09T13:09:49Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java", "diffHunk": "@@ -1177,14 +1177,14 @@ Params withWaitForEvents(Priority waitForEvents) {\n      */\n     static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {", "originalCommit": "48200e2762c66f69391e27e3eb727dc11af18d72", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwMDgzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r539300839", "bodyText": "mapParser keeps the original provided contentType - for instance VND_JSON\nparser.contentType in this test is created from createParser(xContentType.xContent() which looses the information about the original VND_JSON", "author": "pgomulka", "createdAt": "2020-12-09T13:22:16Z", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MapXContentParserTests.java", "diffHunk": "@@ -91,7 +91,7 @@ public void compareTokens(CheckedConsumer<XContentBuilder, IOException> consumer\n             try (XContentParser parser = createParser(xContentType.xContent(), BytesReference.bytes(builder))) {\n                 try (XContentParser mapParser = new MapXContentParser(\n                     xContentRegistry(), LoggingDeprecationHandler.INSTANCE, map, xContentType)) {\n-                    assertEquals(parser.contentType(), mapParser.contentType());\n+//                    assertEquals(parser.contentType(), mapParser.contentType());", "originalCommit": "48200e2762c66f69391e27e3eb727dc11af18d72", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3MTk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r540171997", "bodyText": "do we care about versioned media types in watcher's HttpRequest?", "author": "pgomulka", "createdAt": "2020-12-10T13:34:22Z", "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpRequest.java", "diffHunk": "@@ -499,17 +498,17 @@ public Builder fromUrl(String supposedUrl) {\n      * Write a request via toXContent, but filter certain parts of it - this is needed to not expose secrets\n      *\n      * @param request        The HttpRequest object to serialize\n-     * @param xContent       The xContent from the parent outputstream builder\n+     * @param xContentType   The XContentType from the parent outputstream builder\n      * @param params         The ToXContentParams from the parent write\n      * @param excludeField   The field to exclude\n      * @return               A bytearrayinputstream that contains the serialized request\n      * @throws IOException   if an IOException is triggered in the underlying toXContent method\n      */\n-    public static InputStream filterToXContent(HttpRequest request, XContent xContent, ToXContent.Params params,\n+    public static InputStream filterToXContent(HttpRequest request, XContentType xContentType, Params params,\n                                                String excludeField) throws IOException {\n         try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-             XContentBuilder filteredBuilder = new XContentBuilder(xContent, bos,\n-                     Collections.emptySet(), Collections.singleton(excludeField))) {\n+             XContentBuilder filteredBuilder = new XContentBuilder(xContentType.xContent(), bos,", "originalCommit": "48200e2762c66f69391e27e3eb727dc11af18d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1NjIxOA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r542456218", "bodyText": "no, at least not for now.", "author": "jakelandis", "createdAt": "2020-12-14T15:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3MTk5Nw=="}], "type": "inlineReview"}, {"oid": "5030a572289367684fb81d0680cb3408d5190820", "url": "https://github.com/elastic/elasticsearch/commit/5030a572289367684fb81d0680cb3408d5190820", "message": "inline read and javadoc", "committedDate": "2020-12-10T13:47:01Z", "type": "commit"}, {"oid": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "url": "https://github.com/elastic/elasticsearch/commit/1ce88adeacb07035cb38a1dceb7aed6d195fd478", "message": "use canonical in mapxcontentparsertests", "committedDate": "2020-12-10T14:45:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1NDk3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r542454971", "bodyText": "Can this be more explicit ? if (vnd_json) then return json.ordinal ? (just for readability)", "author": "jakelandis", "createdAt": "2020-12-14T15:05:23Z", "path": "server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java", "diffHunk": "@@ -453,4 +455,18 @@ public static BytesReference childBytes(XContentParser parser) throws IOExceptio\n         builder.copyCurrentStructure(parser);\n         return BytesReference.bytes(builder);\n     }\n+\n+    /**\n+     * Serialises new XContentType vnd values in a bwc manner\n+     * TODO remove in ES v9\n+     * @param out stream output of the destination node\n+     * @param xContentType an instance to serialise\n+     */\n+    public static void writeTo(StreamOutput out, XContentType xContentType) throws IOException {\n+        if (out.getVersion().before(Version.V_8_0_0)) {\n+            out.writeVInt(xContentType.ordinal() % 4);", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MjM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r544152376", "bodyText": "I am not sure I understand this. Where should the if vnd_json be used?", "author": "pgomulka", "createdAt": "2020-12-16T09:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0ODcxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r544948715", "bodyText": "as discussed offline, we can implement this with xContentType.canonical().ordinal()", "author": "pgomulka", "createdAt": "2020-12-17T09:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1NDk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r542541101", "bodyText": "can you add java doc ?", "author": "jakelandis", "createdAt": "2020-12-14T16:52:28Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -207,4 +324,19 @@ public String mediaType() {\n     public abstract XContent xContent();\n \n     public abstract String mediaTypeWithoutParameters();\n+\n+    public String responseContentTypeHeader(Map<String,String> parameters) {\n+        return this.mediaTypeWithoutParameters() + formatParameters(parameters);\n+    }\n+\n+    private String formatParameters(Map<String, String> parameters) {\n+        String joined = parameters.entrySet().stream()\n+            .map(e -> e.getKey() + \"=\" + e.getValue())\n+            .collect(Collectors.joining(\";\"));\n+        return joined.isEmpty() ? \"\" : \";\" + joined;\n+    }\n+\n+    public XContentType canonical(){", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4ODIwNw==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r544188207", "bodyText": "Aded some javadoc. this one is harder to explain, I tried to use 'inheritance' analogy. Can you give it a second look?", "author": "pgomulka", "createdAt": "2020-12-16T10:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNjYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545306638", "bodyText": "I would suggest to mention that the canonical type represents the general data structure that is used to serialize or deserialize the data from/to for HTTP. More specialized XContent types such as vnd* variants still use the general data structure but may have semantic differences.\nI would avoid the word derive or inheritance to avoid conflating with the OO definitions of those. Flavor, specializations, custom, standard, etc. I think are all good descriptors.", "author": "jakelandis", "createdAt": "2020-12-17T18:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MzQ5OA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r543783498", "bodyText": "Can you add an java assert to StreamOutput#.writeEnum to ensure that XContentType is not being serialized there ?", "author": "jakelandis", "createdAt": "2020-12-16T00:19:56Z", "path": "server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java", "diffHunk": "@@ -453,4 +455,18 @@ public static BytesReference childBytes(XContentParser parser) throws IOExceptio\n         builder.copyCurrentStructure(parser);\n         return BytesReference.bytes(builder);\n     }\n+\n+    /**\n+     * Serialises new XContentType vnd values in a bwc manner", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQwNA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r543784404", "bodyText": "can you update the javadoc ?", "author": "jakelandis", "createdAt": "2020-12-16T00:22:18Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -77,8 +75,8 @@ public static XContentBuilder builder(XContent xContent) throws IOException {\n      * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.\n      * @throws IOException if an {@link IOException} occurs while building the content\n      */\n-    public static XContentBuilder builder(XContent xContent, Set<String> includes, Set<String> excludes) throws IOException {\n-        return new XContentBuilder(xContent, new ByteArrayOutputStream(), includes, excludes);\n+    public static XContentBuilder builder(XContentType xContent, Set<String> includes, Set<String> excludes) throws IOException {", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NjkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r543786905", "bodyText": "something to consider for later ... but I wonder if there is any overlap between the responseContentTypeString set here and ParsedMediaType. Meaning that ParsedMediaType is essentially  String -> Parts... I wonder if there is the opposite where we could pass a ResponseMediaType that would be Parts -> String. It would clean up the contract abit since String as parameters is a fairly loose contract.", "author": "jakelandis", "createdAt": "2020-12-16T00:28:53Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -191,16 +193,22 @@ public XContentBuilder(XContent xContent, OutputStream bos, Set<String> includes\n      * remaining fields against the inclusive filters.\n      * <p>\n      * Make sure to call {@link #close()} when the builder is done with.\n-     *\n-     * @param os       the output stream\n+     *  @param os       the output stream\n      * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.\n      * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.\n+     * @param responseContentTypeString  a content-type header value to be send back on a response\n      */\n-    public XContentBuilder(XContent xContent, OutputStream os, Set<String> includes, Set<String> excludes) throws IOException {\n+    public XContentBuilder(XContent xContent, OutputStream os, Set<String> includes, Set<String> excludes,", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5MDI5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r544990295", "bodyText": "I think this is a good idea. The problem is thought that in AbstractRestChannel where we create XContentBuilder https://github.com/elastic/elasticsearch/pull/65500/files#diff-05da46b91fb0631c2c11e6aba2b58fa150162cf6c55bcd9bd5751b704090e8d8R137 ResponseContentType can be created in different ways.\nWe would have to create an XContentType first (in one case it is created from ParsedMediaType), then create ParsedMediaType out of it.\nI think overall it is still better then just a string.\nupdated the PR. let me know what you think", "author": "pgomulka", "createdAt": "2020-12-17T10:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NjkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545308695", "bodyText": "Looks good, thanks for the change. Much better contract than String.", "author": "jakelandis", "createdAt": "2020-12-17T18:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MTUzMw==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r543791533", "bodyText": "I think the MediaTypeRegistry class level java doc could use a minor update with this change.", "author": "jakelandis", "createdAt": "2020-12-16T00:41:03Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -144,10 +137,134 @@ public XContent xContent() {\n         @Override\n         public Set<HeaderValue> headerValues() {\n             return Set.of(\n-                new HeaderValue(\"application/cbor\"),\n+                new HeaderValue(\"application/cbor\"));\n+        }\n+    },\n+    /**\n+     * A versioned JSON based content type.\n+     */\n+    VND_JSON(4) {\n+        @Override\n+        public String mediaTypeWithoutParameters() {\n+            return VENDOR_APPLICATION_PREFIX + \"json\";\n+        }\n+\n+        @Override\n+        public String queryParameter() {\n+            return \"vnd_json\";\n+        }\n+\n+        @Override\n+        public XContent xContent() {\n+            return JsonXContent.jsonXContent;\n+        }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"json\",\n+                    Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"x-ndjson\",\n+                    Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n+        }\n+\n+        @Override\n+        public XContentType canonical() {\n+            return JSON;\n+        }\n+    },\n+    /**\n+     * Versioned jackson based smile binary format. Fast and compact binary format.\n+     */\n+    VND_SMILE(5) {\n+        @Override\n+        public String mediaTypeWithoutParameters() {\n+            return VENDOR_APPLICATION_PREFIX + \"smile\";\n+        }\n+\n+        @Override\n+        public String queryParameter() {\n+            return \"vnd_smile\";\n+        }\n+\n+        @Override\n+        public XContent xContent() {\n+            return SmileXContent.smileXContent;\n+        }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"smile\",\n+                    Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n+        }\n+\n+        @Override\n+        public XContentType canonical() {\n+            return SMILE;\n+        }\n+    },\n+    /**\n+     * A Versioned YAML based content type.\n+     */\n+    VND_YAML(6) {\n+        @Override\n+        public String mediaTypeWithoutParameters() {\n+            return VENDOR_APPLICATION_PREFIX + \"yaml\";\n+        }\n+\n+        @Override\n+        public String queryParameter() {\n+            return \"vnd_yaml\";\n+        }\n+\n+        @Override\n+        public XContent xContent() {\n+            return YamlXContent.yamlXContent;\n+        }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"yaml\",\n+                    Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n+        }\n+\n+        @Override\n+        public XContentType canonical() {\n+            return YAML;\n+        }\n+    },\n+    /**\n+     * A Versioned CBOR based content type.\n+     */\n+    VND_CBOR(7) {\n+        @Override\n+        public String mediaTypeWithoutParameters() {\n+            return VENDOR_APPLICATION_PREFIX + \"cbor\";\n+        }\n+\n+        @Override\n+        public String queryParameter() {\n+            return \"vnd_cbor\";\n+        }\n+\n+        @Override\n+        public XContent xContent() {\n+            return CborXContent.cborXContent;\n+        }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n                 new HeaderValue(VENDOR_APPLICATION_PREFIX + \"cbor\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n+\n+        @Override\n+        public XContentType canonical() {\n+            return CBOR;\n+        }\n     };\n \n     public static final MediaTypeRegistry<XContentType> MEDIA_TYPE_REGISTRY = new MediaTypeRegistry<XContentType>()", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MjM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r543792341", "bodyText": "nit: if want to leave this todo, can you make it TODO:  and add a possible reason ... i guess i don't see how would belong in XContentType ?", "author": "jakelandis", "createdAt": "2020-12-16T00:42:52Z", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -237,7 +237,9 @@ private void dispatchRequest(RestRequest request, RestChannel channel, RestHandl\n                 sendContentTypeErrorMessage(request.getAllHeaderValues(\"Content-Type\"), channel);\n                 return;\n             }\n-            if (handler.supportsContentStream() && xContentType != XContentType.JSON && xContentType != XContentType.SMILE) {\n+            //todo consider moving to XContentType", "originalCommit": "1ce88adeacb07035cb38a1dceb7aed6d195fd478", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMTQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r544131477", "bodyText": "hm when thinking about this now, it would probably more fit into handler.supportsContentStream(xContentType).\nWill fix the todo", "author": "pgomulka", "createdAt": "2020-12-16T09:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MjM0MQ=="}], "type": "inlineReview"}, {"oid": "f97f0c4796806af2cbe780aba39695121d42e4ae", "url": "https://github.com/elastic/elasticsearch/commit/f97f0c4796806af2cbe780aba39695121d42e4ae", "message": "javadocs", "committedDate": "2020-12-16T12:08:02Z", "type": "commit"}, {"oid": "752968cc833edac449659d6219dfcb9fd5b6d019", "url": "https://github.com/elastic/elasticsearch/commit/752968cc833edac449659d6219dfcb9fd5b6d019", "message": "response media type to be a ParsedMediaType instead of just a string", "committedDate": "2020-12-17T10:47:01Z", "type": "commit"}, {"oid": "01ce0f4914a433f15a231cf7af0b4a9acdd2aef6", "url": "https://github.com/elastic/elasticsearch/commit/01ce0f4914a433f15a231cf7af0b4a9acdd2aef6", "message": "fix tests and new test for request/response headers", "committedDate": "2020-12-17T15:45:20Z", "type": "commit"}, {"oid": "d3ebf1f49fdff8551d00846de0c479f87ec5678f", "url": "https://github.com/elastic/elasticsearch/commit/d3ebf1f49fdff8551d00846de0c479f87ec5678f", "message": "replace application/json;charset=utf-8", "committedDate": "2020-12-17T17:03:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1MjQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545252468", "bodyText": "I replaced this one to be consistent with what ES will now return.\nno space after media type\nand lowercased parameters", "author": "pgomulka", "createdAt": "2020-12-17T17:05:14Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomMustacheFactory.java", "diffHunk": "@@ -52,7 +52,7 @@\n \n public class CustomMustacheFactory extends DefaultMustacheFactory {\n \n-    static final String JSON_MIME_TYPE_WITH_CHARSET = \"application/json; charset=UTF-8\";\n+    static final String JSON_MIME_TYPE_WITH_CHARSET = \"application/json;charset=utf-8\";", "originalCommit": "d3ebf1f49fdff8551d00846de0c479f87ec5678f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzU5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545313599", "bodyText": "+1 on consistency ... just want to make sure it is not required since these should be case insensitive right ?", "author": "jakelandis", "createdAt": "2020-12-17T18:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1MjQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY5MjUzMA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545692530", "bodyText": "in fact.. this is a great question because it might not be..\nhttps://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/script/Script.java#L636\nhere a simple equals is used on the option provided vs xcontentType.mediaType (I assume it can be provided by a user, need to confirm).\nI will  discuss this with scripting team", "author": "pgomulka", "createdAt": "2020-12-18T09:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1MjQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1NzIxOA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545257218", "bodyText": "only if charset was on a request it will be returned back", "author": "pgomulka", "createdAt": "2020-12-17T17:12:02Z", "path": "server/src/test/java/org/elasticsearch/rest/action/document/RestGetSourceActionTests.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testRestGetSourceAction() throws Exception {\n         final RestResponse restResponse = listener.buildResponse(response);\n \n         assertThat(restResponse.status(), equalTo(OK));\n-        assertThat(restResponse.contentType(), equalTo(\"application/json; charset=UTF-8\"));\n+        assertThat(restResponse.contentType(), equalTo(\"application/json\"));//dropping charset as it was not on a request", "originalCommit": "d3ebf1f49fdff8551d00846de0c479f87ec5678f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1OTA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545259049", "bodyText": "just to make it consistent with other usages of charset in our codebase, but it actually is not relevant to the PR", "author": "pgomulka", "createdAt": "2020-12-17T17:14:44Z", "path": "x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/input/http/HttpInputTests.java", "diffHunk": "@@ -267,7 +267,7 @@ public void testThatExpectedContentTypeOverridesReturnedContentType() throws Exc\n         ExecutableHttpInput input = new ExecutableHttpInput(httpInput, httpClient, templateEngine);\n \n         Map<String, String[]> headers = new HashMap<>(1);\n-        String contentType = randomFrom(\"application/json\", \"application/json; charset=UTF-8\", \"text/html\", \"application/yaml\",\n+        String contentType = randomFrom(\"application/json\", \"application/json;charset=utf-8\", \"text/html\", \"application/yaml\",", "originalCommit": "d3ebf1f49fdff8551d00846de0c479f87ec5678f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1d0463bf7f0fcf8a7d12afe02a2bc9c5c0db9db", "url": "https://github.com/elastic/elasticsearch/commit/e1d0463bf7f0fcf8a7d12afe02a2bc9c5c0db9db", "message": "file header and ;;", "committedDate": "2020-12-17T17:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjY3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545312673", "bodyText": "Can you change this apply plugin: 'elasticsearch.java-rest-test' and move the test from src/test to src/javaRestTest (once you refresh the Grade project src/javaRestTest will show up as a normal source folder)\nThis helps to disambiguate which kind of REST test allowing for different configurations if needed.", "author": "jakelandis", "createdAt": "2020-12-17T18:34:05Z", "path": "x-pack/plugin/rest-compatibility/build.gradle", "diffHunk": "@@ -18,6 +18,7 @@\n  */\n \n apply plugin: 'elasticsearch.esplugin'\n+apply plugin: 'elasticsearch.rest-test'", "originalCommit": "01ce0f4914a433f15a231cf7af0b4a9acdd2aef6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2ODM3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545668379", "bodyText": "sure, good idea.\nbtw I have few questions.\n\nI figured out I need to set   setting 'xpack.license.self_generated.type', 'trial' in testClusters configuration in order to javaRestTest task to run? (otherwise it fails complaining about Missing plugin [x-pack-core])\nShould I put that in rest-compatibility/src/javaRestTest ? I noticed a lot of modules are using module-name/qa/javaRestTest I couldn't find a single module in x-pack not using that convention. Should I follow it as well?", "author": "pgomulka", "createdAt": "2020-12-18T08:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTU2OA==", "url": "https://github.com/elastic/elasticsearch/pull/65500#discussion_r545981568", "bodyText": "That's weird since it is in x-pack and shouldn't need to specify the license. It is probably more likely that the new plugin needs (if not already there)\n\nesplugin {\n  extendedPlugins = ['x-pack-core']\n\nor possibly\ndependencies {\n  javaRestTestImplementation project(path: xpackModule('core'), configuration: 'testArtifacts')\n}\n\nor possibly\ndependencies {\n  javaRestTestImplementation project(path: xpackModule('core'))\n}\n\nFine to check it in as-is, I can take a look afterwards.\n\nThat is generally the preferred pattern, but either should work and we can move things around as needed later too.", "author": "jakelandis", "createdAt": "2020-12-18T17:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjY3Mw=="}], "type": "inlineReview"}, {"oid": "e02970cc7435a8b5b379e5c344fba560846f9caa", "url": "https://github.com/elastic/elasticsearch/commit/e02970cc7435a8b5b379e5c344fba560846f9caa", "message": "javadoc, it test in javaRestTest and scripting response about charset", "committedDate": "2020-12-18T09:30:10Z", "type": "commit"}]}