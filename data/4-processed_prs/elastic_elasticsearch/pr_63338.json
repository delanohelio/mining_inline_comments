{"pr_number": 63338, "pr_title": "SQL: integer parameter validation in string functions", "pr_createdAt": "2020-10-06T15:55:16Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63338", "timeline": [{"oid": "9977fa1da37ccf0f44cb67e01f063189f0c24927", "url": "https://github.com/elastic/elasticsearch/commit/9977fa1da37ccf0f44cb67e01f063189f0c24927", "message": "SQL: integer parameter validation in string functions (#58923)\n\nIn insert, locate, substring function, when argument `start` or `length` is greater than Integer.MAX_INT OR less then Integer.MIN_INT + 1 (note that `start` need to minus 1), it causes overflow and leads to unexpected results.", "committedDate": "2020-07-28T11:36:50Z", "type": "commit"}, {"oid": "3bff4b53dfc955c0c4db562fe50b98ff945b28c8", "url": "https://github.com/elastic/elasticsearch/commit/3bff4b53dfc955c0c4db562fe50b98ff945b28c8", "message": "SQL: IN operator incorrectly handling specified date format (#58932)\n\nExtract the checks into methods Check.isNumberOutOfRange and add unit tests to the three string function.", "committedDate": "2020-07-30T10:00:07Z", "type": "commit"}, {"oid": "5577a2f38c6992270f52502dc2cb2047be60a04d", "url": "https://github.com/elastic/elasticsearch/commit/5577a2f38c6992270f52502dc2cb2047be60a04d", "message": "SQL: IN operator incorrectly handling specified date format (#58932)\n\nUpdate the Check.isFixedNumberAndInRange function to comply with code specifications.", "committedDate": "2020-07-31T01:29:21Z", "type": "commit"}, {"oid": "72d80074d8eb1211c925619ab47ad608717d97ae", "url": "https://github.com/elastic/elasticsearch/commit/72d80074d8eb1211c925619ab47ad608717d97ae", "message": "SQL: IN operator incorrectly handling specified date format (#58932)\n\nUpdate the unit tests to fit new check error messages.", "committedDate": "2020-07-31T01:47:18Z", "type": "commit"}, {"oid": "bd639c9d54f03c0eb9d447e94ed14aae1d8d4c36", "url": "https://github.com/elastic/elasticsearch/commit/bd639c9d54f03c0eb9d447e94ed14aae1d8d4c36", "message": "Merge remote-tracking branch 'upstream/master' into fix/str_func_param_validation", "committedDate": "2020-10-05T16:27:04Z", "type": "commit"}, {"oid": "58f48992500fb760808ebd8a9ebd09a298d4c4c3", "url": "https://github.com/elastic/elasticsearch/commit/58f48992500fb760808ebd8a9ebd09a298d4c4c3", "message": "Add range checks for BinaryStringNumericProcessors\n\n- Add range checks for Left, Right, Repeat.\n- Minor refactorings on initial PR changes.", "committedDate": "2020-10-06T15:25:38Z", "type": "commit"}, {"oid": "8e46b970524177363d555741cee560cdf6eb247f", "url": "https://github.com/elastic/elasticsearch/commit/8e46b970524177363d555741cee560cdf6eb247f", "message": "Merge branch 'master' into fix/str_func_param_validation", "committedDate": "2020-10-06T15:55:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r501807989", "bodyText": "minor: Could you use Integer.MIN/MAX_VALUE to make it more clear?", "author": "matriv", "createdAt": "2020-10-08T15:22:21Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertProcessorTests.java", "diffHunk": "@@ -52,33 +52,53 @@ public void testInsertWithEdgeCases() {\n         assertEquals(\"bazbar\", new Insert(EMPTY, l(\"foobar\"), l(-1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(4), l(30), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(6), l(1), l('z')).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobarbaz\", \n+        assertEquals(\"foobarbaz\",\n                 new Insert(EMPTY, l(\"foobar\"), l(7), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobar\", \n+        assertEquals(\"foobar\",\n                 new Insert(EMPTY, l(\"foobar\"), l(8), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"fzr\", new Insert(EMPTY, l(\"foobar\"), l(2), l(4), l('z')).makePipe().asProcessor().process(null));\n         assertEquals(\"CAR\", new Insert(EMPTY, l(\"FOOBAR\"), l(1), l(5), l(\"CA\")).makePipe().asProcessor().process(null));\n         assertEquals(\"z\", new Insert(EMPTY, l('f'), l(1), l(10), l('z')).makePipe().asProcessor().process(null));\n-        \n+\n         assertEquals(\"bla\", new Insert(EMPTY, l(\"\"), l(1), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n         assertEquals(\"\", new Insert(EMPTY, l(\"\"), l(2), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n     }\n-    \n+\n     public void testInsertInputsValidation() {\n         SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(5), l(1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [5]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l(3), l(66)).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [66]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(\"c\"), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [c]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [start]; received [java.lang.String]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l('z'), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [z]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [length]; received [java.lang.Character]\", siae.getMessage());\n+\n+        assertEquals(\"baroobar\", new Insert(EMPTY, l(\"foobar\"), l(-2147483647), l(1), l(\"bar\")).makePipe().asProcessor().process(null));", "originalCommit": "8e46b970524177363d555741cee560cdf6eb247f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxMzE4OA==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r503013188", "bodyText": "@matriv OK, I will fix it", "author": "wuyinan0126", "createdAt": "2020-10-12T02:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MjQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r503242479", "bodyText": "Fix ported.", "author": "bpintea", "createdAt": "2020-10-12T11:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ=="}], "type": "inlineReview"}, {"oid": "52a5a0720793a4bec54869513e3fcf9acd4eccd1", "url": "https://github.com/elastic/elasticsearch/commit/52a5a0720793a4bec54869513e3fcf9acd4eccd1", "message": "Adress review comments\n\nPort\nhttps://github.com/elastic/elasticsearch/pull/60281/commits/7d8ecfc8aece028a965c1fad017c7e137696989c", "committedDate": "2020-10-12T11:50:09Z", "type": "commit"}, {"oid": "0532b33661fb6aeefbbef35189f0a69c977cd7dc", "url": "https://github.com/elastic/elasticsearch/commit/0532b33661fb6aeefbbef35189f0a69c977cd7dc", "message": "Merge branch 'master' into fix/str_func_param_validation", "committedDate": "2020-10-12T11:51:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504085514", "bodyText": "Unless we use this format elsewhere [{} .. {}] (with two dots), I would use the comma format [{}, {}].", "author": "astefan", "createdAt": "2020-10-13T16:20:11Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/Check.java", "diffHunk": "@@ -36,4 +36,15 @@ public static void notNull(Object object, String message, Object... values) {\n             throw new SqlIllegalArgumentException(message, values);\n         }\n     }\n+\n+    public static void isFixedNumberAndInRange(Object object, String objectName, Long from, Long to) {\n+        if ((object instanceof Number) == false || object instanceof Float || object instanceof Double) {\n+            throw new SqlIllegalArgumentException(\"A fixed point number is required for [{}]; received [{}]\", objectName,\n+                object.getClass().getTypeName());\n+        }\n+        Long longValue = ((Number) object).longValue();\n+        if (longValue < from || longValue > to) {\n+            throw new SqlIllegalArgumentException(\"[{}] equals [{}], out of the allowed range [{}..{}]\", objectName, longValue, from, to);", "originalCommit": "0532b33661fb6aeefbbef35189f0a69c977cd7dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5Njg0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504096849", "bodyText": "Also, I think the style of the error message we use is first state the problem, then the actual value. Something like \"[start] out of the allowed range [ ], received [{}]\". Found one example (maybe there are more with out of range values) in the Analyzer.", "author": "astefan", "createdAt": "2020-10-13T16:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyNzUwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504227505", "bodyText": "Good point, updated it.", "author": "bpintea", "createdAt": "2020-10-13T20:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA=="}], "type": "inlineReview"}, {"oid": "5c9e805de236200d77a3540ab89aa79809aed271", "url": "https://github.com/elastic/elasticsearch/commit/5c9e805de236200d77a3540ab89aa79809aed271", "message": "Adress review comments\n\nUpdate one error message.", "committedDate": "2020-10-13T20:11:48Z", "type": "commit"}, {"oid": "5e3349518305e4362064c8944a7808b2b37e7009", "url": "https://github.com/elastic/elasticsearch/commit/5e3349518305e4362064c8944a7808b2b37e7009", "message": "Merge branch 'master' into fix/str_func_param_validation", "committedDate": "2020-10-13T20:12:46Z", "type": "commit"}]}