{"pr_number": 64113, "pr_title": "Support removing archived settings if cluster has read only blocks.", "pr_createdAt": "2020-10-25T14:33:43Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64113", "timeline": [{"oid": "f815eb1e5a944bd092afb9e0330f614fc95a3f55", "url": "https://github.com/elastic/elasticsearch/commit/f815eb1e5a944bd092afb9e0330f614fc95a3f55", "message": "Optimize cluster block clear logic.", "committedDate": "2020-10-25T10:48:13Z", "type": "commit"}, {"oid": "b5b1c10330d64968b40c849063fe8032d0ca41f4", "url": "https://github.com/elastic/elasticsearch/commit/b5b1c10330d64968b40c849063fe8032d0ca41f4", "message": "Merge branch 'master' into remove_block", "committedDate": "2020-11-07T14:42:28Z", "type": "commit"}, {"oid": "814a6cd5b35437d5f9ae138d62ccd8422f60548f", "url": "https://github.com/elastic/elasticsearch/commit/814a6cd5b35437d5f9ae138d62ccd8422f60548f", "message": "Support removing archived settings in cluster read only status.", "committedDate": "2020-11-08T08:10:14Z", "type": "commit"}, {"oid": "7ccd875776e25ff1e8aa0547ef5237eb4d150c10", "url": "https://github.com/elastic/elasticsearch/commit/7ccd875776e25ff1e8aa0547ef5237eb4d150c10", "message": "remove unused import", "committedDate": "2020-11-08T08:11:32Z", "type": "commit"}, {"oid": "d0604fca9256aeaf5e1f9ea407bb18b83c539f1b", "url": "https://github.com/elastic/elasticsearch/commit/d0604fca9256aeaf5e1f9ea407bb18b83c539f1b", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2020-12-12T13:22:57Z", "type": "commit"}, {"oid": "669db05789a6a5496567c3851adb6f7a8fac7d80", "url": "https://github.com/elastic/elasticsearch/commit/669db05789a6a5496567c3851adb6f7a8fac7d80", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2020-12-15T15:03:18Z", "type": "commit"}, {"oid": "61fdc763ce6ce5680cfd07e575221994afb0927a", "url": "https://github.com/elastic/elasticsearch/commit/61fdc763ce6ce5680cfd07e575221994afb0927a", "message": "iter", "committedDate": "2020-12-16T11:43:01Z", "type": "commit"}, {"oid": "dbef4a274f70f86c19f58589f67a634acb74900e", "url": "https://github.com/elastic/elasticsearch/commit/dbef4a274f70f86c19f58589f67a634acb74900e", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2020-12-27T13:32:35Z", "type": "commit"}, {"oid": "9ad4c9d00d47ce5833e7e6b17431199c1bd33856", "url": "https://github.com/elastic/elasticsearch/commit/9ad4c9d00d47ce5833e7e6b17431199c1bd33856", "message": "Update skip block checking logic.", "committedDate": "2020-12-27T15:16:33Z", "type": "commit"}, {"oid": "10a0c8a7821c48bf37673ac30db8802b5e6460e4", "url": "https://github.com/elastic/elasticsearch/commit/10a0c8a7821c48bf37673ac30db8802b5e6460e4", "message": "update comment.", "committedDate": "2020-12-28T02:12:45Z", "type": "commit"}, {"oid": "e551d8ac5ddf5b5b68665ac0947b337b7a2ef12c", "url": "https://github.com/elastic/elasticsearch/commit/e551d8ac5ddf5b5b68665ac0947b337b7a2ef12c", "message": "revert unchanged line.", "committedDate": "2020-12-28T02:20:26Z", "type": "commit"}, {"oid": "266d31872e7a3bfd03e920c248c43273b33c45c7", "url": "https://github.com/elastic/elasticsearch/commit/266d31872e7a3bfd03e920c248c43273b33c45c7", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2020-12-30T11:39:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwOTU4MA==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551209580", "bodyText": "Nit: prefer Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()) over state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false), and similarly for the next line.", "author": "DaveCTurner", "createdAt": "2021-01-04T09:45:01Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,7 +289,112 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n-    public void testClusterUpdateSettingsWithBlocks() {\n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        // set cluster read only or read only allow delete\n+        if (randomBoolean()) {\n+            setClusterReadOnly(true);\n+        } else {\n+            setClusterReadOnlyAllowDelete(true);\n+        }\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false)", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwOTkzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551209939", "bodyText": "Nit: prefer expectThrows over this pattern.", "author": "DaveCTurner", "createdAt": "2021-01-04T09:45:37Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,7 +289,112 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n-    public void testClusterUpdateSettingsWithBlocks() {\n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        // set cluster read only or read only allow delete\n+        if (randomBoolean()) {\n+            setClusterReadOnly(true);\n+        } else {\n+            setClusterReadOnlyAllowDelete(true);\n+        }\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false)\n+            || state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), false));\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        logger.info(\"brokenMeta[{}]\", brokenMeta.persistentSettings());\n+        restartNodesOnBrokenClusterState(ClusterState.builder(state).metadata(brokenMeta));\n+        ensureGreen(); // wait for state recovery\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().persistentSettings().getAsBoolean(\"archived.this.is.unknown\", false));\n+\n+        // cannot remove read only block due to archived settings\n+        try {\n+            setClusterReadOnly(false);\n+            setClusterReadOnlyAllowDelete(false);\n+            fail(\"should be blocked by archived settings.\");", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551211063", "bodyText": "I think it'd be better to test both of these cases each time: suggest having two top-level test methods that call this method with an argument indicating which branch to take.\nWe should also test the case where both blocks are set.", "author": "DaveCTurner", "createdAt": "2021-01-04T09:47:49Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,7 +289,112 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n-    public void testClusterUpdateSettingsWithBlocks() {\n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        // set cluster read only or read only allow delete\n+        if (randomBoolean()) {", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMjQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551212458", "bodyText": "Would prefer to remove this as I don't think it'll help in future debugging (but I can be convinced otherwise)", "author": "DaveCTurner", "createdAt": "2021-01-04T09:50:22Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,7 +289,112 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n-    public void testClusterUpdateSettingsWithBlocks() {\n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        // set cluster read only or read only allow delete\n+        if (randomBoolean()) {\n+            setClusterReadOnly(true);\n+        } else {\n+            setClusterReadOnlyAllowDelete(true);\n+        }\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false)\n+            || state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), false));\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        logger.info(\"brokenMeta[{}]\", brokenMeta.persistentSettings());", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMjgyNA==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551212824", "bodyText": "This change seems unnecessary, suggest reverting it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testClusterUpdateSettingsWithBlocks() throws Exception {\n          \n          \n            \n                public void testClusterUpdateSettingsWithBlocks() {", "author": "DaveCTurner", "createdAt": "2021-01-04T09:51:13Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,7 +289,112 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n-    public void testClusterUpdateSettingsWithBlocks() {\n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        // set cluster read only or read only allow delete\n+        if (randomBoolean()) {\n+            setClusterReadOnly(true);\n+        } else {\n+            setClusterReadOnlyAllowDelete(true);\n+        }\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false)\n+            || state.getMetadata().transientSettings().getAsBoolean(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), false));\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        logger.info(\"brokenMeta[{}]\", brokenMeta.persistentSettings());\n+        restartNodesOnBrokenClusterState(ClusterState.builder(state).metadata(brokenMeta));\n+        ensureGreen(); // wait for state recovery\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().persistentSettings().getAsBoolean(\"archived.this.is.unknown\", false));\n+\n+        // cannot remove read only block due to archived settings\n+        try {\n+            setClusterReadOnly(false);\n+            setClusterReadOnlyAllowDelete(false);\n+            fail(\"should be blocked by archived settings.\");\n+        } catch (IllegalArgumentException ex) {\n+            assertTrue(ex.getMessage().contains(\"unknown setting [archived.this.is.unknown]\"));\n+        }\n+\n+        // fail to clear archived settings with non-archived settings\n+        try {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder().putNull(\"cluster.routing.allocation.enable\"))\n+                .setTransientSettings(Settings.builder().putNull(\"archived.*\")).get());\n+            fail(\"should only can remove archived settings.\");\n+        } catch (ClusterBlockException ex) {\n+            assertTrue(ex.getMessage().contains(\"cluster read-only\"));\n+        }\n+\n+        // fail to clear archived settings due to cluster read only block\n+        try {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder().putNull(\"archived.*\")).get());\n+            fail(\"should fail due to cluster read only block.\");\n+        } catch (ClusterBlockException ex) {\n+            assertTrue(ex.getMessage().contains(\"cluster read-only\"));\n+        }\n+\n+        // fail to clear archived settings with adding cluster block\n+        try {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder()\n+                    .putNull(\"archived.*\")\n+                    .put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\")).get());\n+            fail(\"should fail due to cluster read only block.\");\n+        } catch (ClusterBlockException ex) {\n+            assertTrue(ex.getMessage().contains(\"cluster read-only\"));\n+        }\n+\n+        // fail to set archived settings to non-null value even with clearing blocks together\n+        try {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder()\n+                    .put(\"archived.this.is.unknown\", \"false\")\n+                    .putNull(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n+                    .putNull(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey())).get());\n+            fail(\"should fail due to cluster read only block.\");\n+        } catch (ClusterBlockException ex) {\n+            assertTrue(ex.getMessage().contains(\"cluster read-only\"));\n+        }\n+\n+        // we can clear read-only block with archived settings together\n+        if (randomBoolean()) {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder()\n+                    .putNull(\"archived.*\")\n+                    .putNull(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n+                    .putNull(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey()))\n+                .setTransientSettings(Settings.builder()\n+                    .putNull(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n+                    .putNull(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey())).get());\n+        } else {\n+            assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                .setPersistentSettings(Settings.builder()\n+                    .putNull(\"archived.*\")\n+                    .put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"false\")\n+                    .put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"false\"))\n+                .setTransientSettings(Settings.builder()\n+                    .put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"false\")\n+                    .put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"false\")).get());\n+        }\n+\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertFalse(state.getMetadata().transientSettings()\n+            .getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false));\n+        assertFalse(state.getMetadata().transientSettings()\n+            .getAsBoolean(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), false));\n+        assertFalse(state.getMetadata().persistentSettings()\n+            .getAsBoolean(Metadata.SETTING_READ_ONLY_SETTING.getKey(), false));\n+        assertFalse(state.getMetadata().persistentSettings()\n+            .getAsBoolean(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), false));\n+        assertNull(state.getMetadata().persistentSettings().get(\"archived.this.is.unknown\"));\n+    }\n+\n+    public void testClusterUpdateSettingsWithBlocks() throws Exception {", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNjM3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551216379", "bodyText": "You can do this outside the loop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean clearBlockSettings = false;\n          \n          \n            \n                        boolean clearBlockSettings \n          \n          \n            \n                                = clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n          \n          \n            \n                                || clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey());", "author": "DaveCTurner", "createdAt": "2021-01-04T09:58:05Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java", "diffHunk": "@@ -62,22 +68,75 @@ public TransportClusterUpdateSettingsAction(TransportService transportService, C\n         this.clusterSettings = clusterSettings;\n     }\n \n+    /**\n+     skip check block if:\n+     * Only at least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * Or all of the following are true:\n+     * 1. At least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * 2. Neither cluster.blocks.read_only nor cluster.blocks.read_only_allow_delete is being set to true.\n+     * 3. The only other settings in this update are archived ones being set to null.\n+     */\n     @Override\n     protected ClusterBlockException checkBlock(ClusterUpdateSettingsRequest request, ClusterState state) {\n-        // allow for dedicated changes to the metadata blocks, so we don't block those to allow to \"re-enable\" it\n-        if (request.transientSettings().size() + request.persistentSettings().size() == 1) {\n-            // only one setting\n-            if (Metadata.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())\n-                || Metadata.SETTING_READ_ONLY_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.persistentSettings())) {\n-                // one of the settings above as the only setting in the request means - resetting the block!\n+        Map<String, String> clearedBlockAndArchivedSettings = new HashMap<>();\n+        if (checkClearedBlockAndArchivedSettings(request.transientSettings(), clearedBlockAndArchivedSettings)\n+            && checkClearedBlockAndArchivedSettings(request.persistentSettings(), clearedBlockAndArchivedSettings)) {\n+            boolean clearBlockSettings = false;", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNzA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r551217042", "bodyText": "IMO we don't need this, if you drop it then the only difference is the DEBUG log message (and I prefer the more informative log message without it).\nWith this, and my previous comment, we don't need the loop at all, and also don't need to track every setting name/value in the request, just to verify that at least one read-only setting is being adjusted.", "author": "DaveCTurner", "createdAt": "2021-01-04T09:59:13Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java", "diffHunk": "@@ -62,22 +68,75 @@ public TransportClusterUpdateSettingsAction(TransportService transportService, C\n         this.clusterSettings = clusterSettings;\n     }\n \n+    /**\n+     skip check block if:\n+     * Only at least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * Or all of the following are true:\n+     * 1. At least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * 2. Neither cluster.blocks.read_only nor cluster.blocks.read_only_allow_delete is being set to true.\n+     * 3. The only other settings in this update are archived ones being set to null.\n+     */\n     @Override\n     protected ClusterBlockException checkBlock(ClusterUpdateSettingsRequest request, ClusterState state) {\n-        // allow for dedicated changes to the metadata blocks, so we don't block those to allow to \"re-enable\" it\n-        if (request.transientSettings().size() + request.persistentSettings().size() == 1) {\n-            // only one setting\n-            if (Metadata.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())\n-                || Metadata.SETTING_READ_ONLY_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.persistentSettings())) {\n-                // one of the settings above as the only setting in the request means - resetting the block!\n+        Map<String, String> clearedBlockAndArchivedSettings = new HashMap<>();\n+        if (checkClearedBlockAndArchivedSettings(request.transientSettings(), clearedBlockAndArchivedSettings)\n+            && checkClearedBlockAndArchivedSettings(request.persistentSettings(), clearedBlockAndArchivedSettings)) {\n+            boolean clearBlockSettings = false;\n+            boolean clearArchivedSettings = false;", "originalCommit": "266d31872e7a3bfd03e920c248c43273b33c45c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6a269fe9ab30a2d856fd0898de0ea187799427a", "url": "https://github.com/elastic/elasticsearch/commit/a6a269fe9ab30a2d856fd0898de0ea187799427a", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2021-01-05T02:03:29Z", "type": "commit"}, {"oid": "7bb9668587834fbc9ccdf24ebdf32c858c464f32", "url": "https://github.com/elastic/elasticsearch/commit/7bb9668587834fbc9ccdf24ebdf32c858c464f32", "message": "optimization based on suggestion.", "committedDate": "2021-01-05T03:46:39Z", "type": "commit"}, {"oid": "c182311150064b52527a4d7f36e7bd9468fcf068", "url": "https://github.com/elastic/elasticsearch/commit/c182311150064b52527a4d7f36e7bd9468fcf068", "message": "add more accurate block message validation.", "committedDate": "2021-01-05T03:55:22Z", "type": "commit"}, {"oid": "1709adc649af714ccd45cc357aad391549f6dfb1", "url": "https://github.com/elastic/elasticsearch/commit/1709adc649af714ccd45cc357aad391549f6dfb1", "message": "fix conflict", "committedDate": "2021-01-16T11:35:48Z", "type": "commit"}, {"oid": "4b2ada058733f062b66e1f3a6b29fcbcac427f9a", "url": "https://github.com/elastic/elasticsearch/commit/4b2ada058733f062b66e1f3a6b29fcbcac427f9a", "message": "fix compile issue.", "committedDate": "2021-01-16T12:25:57Z", "type": "commit"}, {"oid": "8b3c1dfea8156c90f87630191bac2ecbf31f2423", "url": "https://github.com/elastic/elasticsearch/commit/8b3c1dfea8156c90f87630191bac2ecbf31f2423", "message": "merge master", "committedDate": "2021-01-19T11:46:53Z", "type": "commit"}, {"oid": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "url": "https://github.com/elastic/elasticsearch/commit/431a6e589ca3ec29c0dd26d2b06824d142eab591", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2021-01-22T10:29:37Z", "type": "commit"}, {"oid": "8bed8c5e9077242dcfd60bf69de368248a673efb", "url": "https://github.com/elastic/elasticsearch/commit/8bed8c5e9077242dcfd60bf69de368248a673efb", "message": "Test tweaks", "committedDate": "2021-01-26T16:16:34Z", "type": "commit"}, {"oid": "cc08c30610477a70963d843e3c998683266cc4ac", "url": "https://github.com/elastic/elasticsearch/commit/cc08c30610477a70963d843e3c998683266cc4ac", "message": "Impl tweaks", "committedDate": "2021-01-26T16:17:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MjIxMA==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564642210", "bodyText": "I think here we should set these settings randomly, not just setting the one we care about to true.", "author": "DaveCTurner", "createdAt": "2021-01-26T16:18:09Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,6 +289,145 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        testRemoveArchiveSettingsWithBlocks(true, false);\n+        testRemoveArchiveSettingsWithBlocks(false, true);\n+        testRemoveArchiveSettingsWithBlocks(true, true);\n+    }\n+\n+    private void testRemoveArchiveSettingsWithBlocks(boolean readOnly, boolean readOnlyAllowDelete) throws Exception {\n+        Settings.Builder settingsBuilder = Settings.builder();\n+        if (readOnly) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\");\n+        }\n+        if (readOnlyAllowDelete) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"true\");\n+        }\n+        assertAcked(client().admin().cluster().prepareUpdateSettings()\n+            .setPersistentSettings(settingsBuilder).setTransientSettings(settingsBuilder).get());\n+\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        if (readOnly) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        restartNodesOnBrokenClusterState(ClusterState.builder(state).metadata(brokenMeta));\n+        ensureGreen(); // wait for state recovery\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().persistentSettings().getAsBoolean(\"archived.this.is.unknown\", false));\n+\n+        // cannot remove read only block due to archived settings\n+        final IllegalArgumentException e1 =\n+            expectThrows(\n+                IllegalArgumentException.class,\n+                () -> {\n+                    Settings.Builder builder = Settings.builder();\n+                    if (readOnly) {\n+                        builder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"false\");\n+                    }\n+                    if (readOnlyAllowDelete) {\n+                        builder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"false\");\n+                    }\n+                    assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                        .setPersistentSettings(builder).setTransientSettings(builder).get());\n+                });\n+        assertTrue(e1.getMessage().contains(\"unknown setting [archived.this.is.unknown]\"));\n+\n+        // fail to clear archived settings with non-archived settings\n+        final ClusterBlockException e2 =\n+            expectThrows(\n+                ClusterBlockException.class,\n+                () -> assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                        .setPersistentSettings(Settings.builder().putNull(\"cluster.routing.allocation.enable\"))\n+                        .setTransientSettings(Settings.builder().putNull(\"archived.*\")).get()));\n+        if (readOnly) {\n+            assertTrue(e2.getMessage().contains(\"cluster read-only (api)\"));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(e2.getMessage().contains(\"cluster read-only / allow delete (api)\"));\n+        }\n+\n+        // fail to clear archived settings due to cluster read only block\n+        final ClusterBlockException e3 =\n+            expectThrows(\n+                ClusterBlockException.class,\n+                () -> assertAcked(client().admin().cluster().prepareUpdateSettings()\n+                    .setPersistentSettings(Settings.builder().putNull(\"archived.*\")).get()));\n+        if (readOnly) {\n+            assertTrue(e3.getMessage().contains(\"cluster read-only (api)\"));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(e3.getMessage().contains(\"cluster read-only / allow delete (api)\"));\n+        }\n+\n+        // fail to clear archived settings with adding cluster block\n+        final ClusterBlockException e4 =\n+            expectThrows(\n+                ClusterBlockException.class,\n+                () -> {\n+                    Settings.Builder builder = Settings.builder().putNull(\"archived.*\");\n+                    if (readOnly) {", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MjM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564642397", "bodyText": "We can assert the persistent settings here too?", "author": "DaveCTurner", "createdAt": "2021-01-26T16:18:22Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,6 +289,145 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        testRemoveArchiveSettingsWithBlocks(true, false);\n+        testRemoveArchiveSettingsWithBlocks(false, true);\n+        testRemoveArchiveSettingsWithBlocks(true, true);\n+    }\n+\n+    private void testRemoveArchiveSettingsWithBlocks(boolean readOnly, boolean readOnlyAllowDelete) throws Exception {\n+        Settings.Builder settingsBuilder = Settings.builder();\n+        if (readOnly) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\");\n+        }\n+        if (readOnlyAllowDelete) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"true\");\n+        }\n+        assertAcked(client().admin().cluster().prepareUpdateSettings()\n+            .setPersistentSettings(settingsBuilder).setTransientSettings(settingsBuilder).get());\n+\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        if (readOnly) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()));", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MjQ0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564642442", "bodyText": "We can assert the persistent settings here too?", "author": "DaveCTurner", "createdAt": "2021-01-26T16:18:26Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,6 +289,145 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        testRemoveArchiveSettingsWithBlocks(true, false);\n+        testRemoveArchiveSettingsWithBlocks(false, true);\n+        testRemoveArchiveSettingsWithBlocks(true, true);\n+    }\n+\n+    private void testRemoveArchiveSettingsWithBlocks(boolean readOnly, boolean readOnlyAllowDelete) throws Exception {\n+        Settings.Builder settingsBuilder = Settings.builder();\n+        if (readOnly) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\");\n+        }\n+        if (readOnlyAllowDelete) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"true\");\n+        }\n+        assertAcked(client().admin().cluster().prepareUpdateSettings()\n+            .setPersistentSettings(settingsBuilder).setTransientSettings(settingsBuilder).get());\n+\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        if (readOnly) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.get(state.getMetadata().transientSettings()));", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MjY3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564642673", "bodyText": "We could also set this to null.", "author": "DaveCTurner", "createdAt": "2021-01-26T16:18:40Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,6 +289,145 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        testRemoveArchiveSettingsWithBlocks(true, false);\n+        testRemoveArchiveSettingsWithBlocks(false, true);\n+        testRemoveArchiveSettingsWithBlocks(true, true);\n+    }\n+\n+    private void testRemoveArchiveSettingsWithBlocks(boolean readOnly, boolean readOnlyAllowDelete) throws Exception {\n+        Settings.Builder settingsBuilder = Settings.builder();\n+        if (readOnly) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\");\n+        }\n+        if (readOnlyAllowDelete) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"true\");\n+        }\n+        assertAcked(client().admin().cluster().prepareUpdateSettings()\n+            .setPersistentSettings(settingsBuilder).setTransientSettings(settingsBuilder).get());\n+\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        if (readOnly) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        restartNodesOnBrokenClusterState(ClusterState.builder(state).metadata(brokenMeta));\n+        ensureGreen(); // wait for state recovery\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().persistentSettings().getAsBoolean(\"archived.this.is.unknown\", false));\n+\n+        // cannot remove read only block due to archived settings\n+        final IllegalArgumentException e1 =\n+            expectThrows(\n+                IllegalArgumentException.class,\n+                () -> {\n+                    Settings.Builder builder = Settings.builder();\n+                    if (readOnly) {\n+                        builder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"false\");", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MjcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564642713", "bodyText": "We could also set this to null.", "author": "DaveCTurner", "createdAt": "2021-01-26T16:18:44Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java", "diffHunk": "@@ -287,6 +289,145 @@ public void testUpdateSettings() {\n         assertThat(clusterService().getClusterSettings().get(INITIAL_RECOVERIES), equalTo(42));\n     }\n \n+    public void testRemoveArchiveSettingsWithBlocks() throws Exception {\n+        testRemoveArchiveSettingsWithBlocks(true, false);\n+        testRemoveArchiveSettingsWithBlocks(false, true);\n+        testRemoveArchiveSettingsWithBlocks(true, true);\n+    }\n+\n+    private void testRemoveArchiveSettingsWithBlocks(boolean readOnly, boolean readOnlyAllowDelete) throws Exception {\n+        Settings.Builder settingsBuilder = Settings.builder();\n+        if (readOnly) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"true\");\n+        }\n+        if (readOnlyAllowDelete) {\n+            settingsBuilder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"true\");\n+        }\n+        assertAcked(client().admin().cluster().prepareUpdateSettings()\n+            .setPersistentSettings(settingsBuilder).setTransientSettings(settingsBuilder).get());\n+\n+        ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        if (readOnly) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+        if (readOnlyAllowDelete) {\n+            assertTrue(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.get(state.getMetadata().transientSettings()));\n+        }\n+\n+        // create archived setting\n+        final Metadata metadata = state.getMetadata();\n+        final Metadata brokenMeta = Metadata.builder(metadata).persistentSettings(Settings.builder()\n+            .put(metadata.persistentSettings()).put(\"this.is.unknown\", true).build()).build();\n+        restartNodesOnBrokenClusterState(ClusterState.builder(state).metadata(brokenMeta));\n+        ensureGreen(); // wait for state recovery\n+        state = client().admin().cluster().prepareState().get().getState();\n+        assertTrue(state.getMetadata().persistentSettings().getAsBoolean(\"archived.this.is.unknown\", false));\n+\n+        // cannot remove read only block due to archived settings\n+        final IllegalArgumentException e1 =\n+            expectThrows(\n+                IllegalArgumentException.class,\n+                () -> {\n+                    Settings.Builder builder = Settings.builder();\n+                    if (readOnly) {\n+                        builder.put(Metadata.SETTING_READ_ONLY_SETTING.getKey(), \"false\");\n+                    }\n+                    if (readOnlyAllowDelete) {\n+                        builder.put(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey(), \"false\");", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0MzA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564643058", "bodyText": "This could just be a Set<String>, we don't care about the values.", "author": "DaveCTurner", "createdAt": "2021-01-26T16:19:08Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java", "diffHunk": "@@ -62,22 +68,59 @@ public TransportClusterUpdateSettingsAction(TransportService transportService, C\n         this.clusterSettings = clusterSettings;\n     }\n \n+    /**\n+     skip check block if:\n+     * Only at least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * Or all of the following are true:\n+     * 1. At least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * 2. Neither cluster.blocks.read_only nor cluster.blocks.read_only_allow_delete is being set to true.\n+     * 3. The only other settings in this update are archived ones being set to null.\n+     */\n     @Override\n     protected ClusterBlockException checkBlock(ClusterUpdateSettingsRequest request, ClusterState state) {\n-        // allow for dedicated changes to the metadata blocks, so we don't block those to allow to \"re-enable\" it\n-        if (request.transientSettings().size() + request.persistentSettings().size() == 1) {\n-            // only one setting\n-            if (Metadata.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())\n-                || Metadata.SETTING_READ_ONLY_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.persistentSettings())) {\n-                // one of the settings above as the only setting in the request means - resetting the block!\n+        Map<String, String> clearedBlockAndArchivedSettings = new HashMap<>();\n+        if (checkClearedBlockAndArchivedSettings(request.transientSettings(), clearedBlockAndArchivedSettings)\n+            && checkClearedBlockAndArchivedSettings(request.persistentSettings(), clearedBlockAndArchivedSettings)) {\n+            if (clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n+                || clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey())) {\n                 return null;\n             }\n         }\n+\n         return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);\n     }\n \n+    /**\n+     * Check settings that only contains block and archived settings.\n+     * @param settings target settings to be checked.\n+     * @param clearedBlockAndArchivedSettings block settings that have been set to null or false,\n+     *                                        archived settings that have been set to null.\n+     * @return true if all settings are clear blocks or archived settings.\n+     */\n+    private boolean checkClearedBlockAndArchivedSettings(final Settings settings,\n+                                                         final Map<String, String> clearedBlockAndArchivedSettings) {", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY0Mzk1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64113#discussion_r564643951", "bodyText": "I don't think we should duplicate the parsing of boolean settings here. Suggest using Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.get(settings) etc.", "author": "DaveCTurner", "createdAt": "2021-01-26T16:20:17Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java", "diffHunk": "@@ -62,22 +68,59 @@ public TransportClusterUpdateSettingsAction(TransportService transportService, C\n         this.clusterSettings = clusterSettings;\n     }\n \n+    /**\n+     skip check block if:\n+     * Only at least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * Or all of the following are true:\n+     * 1. At least one of cluster.blocks.read_only or cluster.blocks.read_only_allow_delete is being cleared (set to null or false).\n+     * 2. Neither cluster.blocks.read_only nor cluster.blocks.read_only_allow_delete is being set to true.\n+     * 3. The only other settings in this update are archived ones being set to null.\n+     */\n     @Override\n     protected ClusterBlockException checkBlock(ClusterUpdateSettingsRequest request, ClusterState state) {\n-        // allow for dedicated changes to the metadata blocks, so we don't block those to allow to \"re-enable\" it\n-        if (request.transientSettings().size() + request.persistentSettings().size() == 1) {\n-            // only one setting\n-            if (Metadata.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())\n-                || Metadata.SETTING_READ_ONLY_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.transientSettings())\n-                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.exists(request.persistentSettings())) {\n-                // one of the settings above as the only setting in the request means - resetting the block!\n+        Map<String, String> clearedBlockAndArchivedSettings = new HashMap<>();\n+        if (checkClearedBlockAndArchivedSettings(request.transientSettings(), clearedBlockAndArchivedSettings)\n+            && checkClearedBlockAndArchivedSettings(request.persistentSettings(), clearedBlockAndArchivedSettings)) {\n+            if (clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_SETTING.getKey())\n+                || clearedBlockAndArchivedSettings.containsKey(Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey())) {\n                 return null;\n             }\n         }\n+\n         return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);\n     }\n \n+    /**\n+     * Check settings that only contains block and archived settings.\n+     * @param settings target settings to be checked.\n+     * @param clearedBlockAndArchivedSettings block settings that have been set to null or false,\n+     *                                        archived settings that have been set to null.\n+     * @return true if all settings are clear blocks or archived settings.\n+     */\n+    private boolean checkClearedBlockAndArchivedSettings(final Settings settings,\n+                                                         final Map<String, String> clearedBlockAndArchivedSettings) {\n+        for (String key : settings.keySet()) {\n+            String value = settings.get(key);\n+            if (Metadata.SETTING_READ_ONLY_SETTING.getKey().equals(key)\n+                || Metadata.SETTING_READ_ONLY_ALLOW_DELETE_SETTING.getKey().equals(key)) {\n+                if (\"true\".equals(value)) {", "originalCommit": "431a6e589ca3ec29c0dd26d2b06824d142eab591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a572ae3674850c64c1c286b864dc702fc1dfbff", "url": "https://github.com/elastic/elasticsearch/commit/0a572ae3674850c64c1c286b864dc702fc1dfbff", "message": "Merge pull request #1 from DaveCTurner/2021-01-26-remove_block-reviews\n\n2021 01 26 remove block reviews", "committedDate": "2021-01-26T16:41:33Z", "type": "commit"}, {"oid": "34c219a62617072c465037341846537f5c7c22e6", "url": "https://github.com/elastic/elasticsearch/commit/34c219a62617072c465037341846537f5c7c22e6", "message": "Merge remote-tracking branch 'upstream/master' into remove_block", "committedDate": "2021-01-26T16:58:02Z", "type": "commit"}]}