{"pr_number": 64680, "pr_title": "Add RollupV2 cluster metadata behind feature-flag", "pr_createdAt": "2020-11-06T00:38:20Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64680", "timeline": [{"oid": "fbf53c37140ea22ae5cec400d0f5aae84928ba07", "url": "https://github.com/elastic/elasticsearch/commit/fbf53c37140ea22ae5cec400d0f5aae84928ba07", "message": "Add RollupV2 cluster metadata behind feature-flag\n\nthis commit sets the foundation for following rollup-v2-related\ncommits to master.\n\nThe intention of this metadata is to be used by both the upcoming\nRollupV2 action that will create new indices along with their associated\ncluster metadata. This metadata is to be used by the SearchService when\nfiltering shards in the can-match phase to decide which of the indices\nbelonging to an original index should be queried.", "committedDate": "2020-11-06T00:54:04Z", "type": "forcePushed"}, {"oid": "d2871315cf142bbbe1a30739934c28169aa5ddec", "url": "https://github.com/elastic/elasticsearch/commit/d2871315cf142bbbe1a30739934c28169aa5ddec", "message": "Add RollupV2 cluster metadata behind feature-flag\n\nthis commit sets the foundation for following rollup-v2-related\ncommits to master.\n\nThe intention of this metadata is to be used by both the upcoming\nRollupV2 action that will create new indices along with their associated\ncluster metadata. This metadata is to be used by the SearchService when\nfiltering shards in the can-match phase to decide which of the indices\nbelonging to an original index should be queried.", "committedDate": "2020-11-06T01:27:13Z", "type": "commit"}, {"oid": "d2871315cf142bbbe1a30739934c28169aa5ddec", "url": "https://github.com/elastic/elasticsearch/commit/d2871315cf142bbbe1a30739934c28169aa5ddec", "message": "Add RollupV2 cluster metadata behind feature-flag\n\nthis commit sets the foundation for following rollup-v2-related\ncommits to master.\n\nThe intention of this metadata is to be used by both the upcoming\nRollupV2 action that will create new indices along with their associated\ncluster metadata. This metadata is to be used by the SearchService when\nfiltering shards in the can-match phase to decide which of the indices\nbelonging to an original index should be queried.", "committedDate": "2020-11-06T01:27:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjEzNA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520002134", "bodyText": "Why are we using String here instead of (e.g.) ZoneId?  And also for the date, why is that just a string?  Also also, if we're reading the dates in as strings, do we also need a date format?  What formats are supported?", "author": "not-napoleon", "createdAt": "2020-11-09T17:47:22Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/RollupGroup.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Object representing information about rollup-v2 indices and their respective original-indexes. These objects\n+ * also include information about their capabilities, like which date-intervals and date-timezones they are configured\n+ * with. Used by {@link RollupMetadata}.\n+ */\n+public class RollupGroup extends AbstractDiffable<RollupGroup> implements ToXContentObject {\n+    private static final ParseField GROUP_FIELD = new ParseField(\"group\");\n+    private static final ParseField DATE_INTERVAL_FIELD = new ParseField(\"interval\");\n+    private static final ParseField DATE_TIMEZONE_FIELD = new ParseField(\"timezone\");\n+\n+    // the list of indices part of this rollup group\n+    private List<String> group;\n+    // a map from index-name to the date interval used in the associated index\n+    private Map<String, String> dateInterval;\n+    // a map from index-name to timezone used in the associated index\n+    private Map<String, String> dateTimezone;", "originalCommit": "d2871315cf142bbbe1a30739934c28169aa5ddec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMjgwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520022801", "bodyText": "I can wrap ZoneId for sure. ZoneId itself cannot be used because it is not Writeable", "author": "talevy", "createdAt": "2020-11-09T18:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMzE3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520033175", "bodyText": "Yeah, I was thinking for the internal usage, not for the serialization/deserialization layer", "author": "not-napoleon", "createdAt": "2020-11-09T18:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NjIzMg==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520046232", "bodyText": "got it, I'd prefer if it were a simple object that serialized and was not a concern of this class. So I'll try making a thin Writeable wrapper for ZoneId and others. Let me know if you think that is overkill and the String->Obj conversion should occur within this class to reduce extra class hierarchies. I see both sides, but lean towards wrapping.", "author": "talevy", "createdAt": "2020-11-09T19:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MzY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520093668", "bodyText": "Making it not this class's problem seems sensible.  What I want is for it not to be the problem of clients of this class either.  I think a wrapper solves both, and actually I'm a little surprised we haven't needed one already.  I think that's got my vote.  I'd also be okay with leaving it as a ToDo for now, since it doesn't look like anything is reading these values yet?", "author": "not-napoleon", "createdAt": "2020-11-09T20:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNTY0OA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520015648", "bodyText": "An example of how this is used would help.  For example, I don't think it's clear why we need a time zone per input index.", "author": "not-napoleon", "createdAt": "2020-11-09T18:09:28Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/RollupGroup.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Object representing information about rollup-v2 indices and their respective original-indexes. These objects\n+ * also include information about their capabilities, like which date-intervals and date-timezones they are configured\n+ * with. Used by {@link RollupMetadata}.", "originalCommit": "d2871315cf142bbbe1a30739934c28169aa5ddec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMzAwOA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520023008", "bodyText": "++ will add example usage in the javadoc.", "author": "talevy", "createdAt": "2020-11-09T18:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNTY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjc5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520016799", "bodyText": "Shouldn't we just default to false for now?  Is there a benefit for making this nullable throughout the code?", "author": "not-napoleon", "createdAt": "2020-11-09T18:11:21Z", "path": "server/src/main/java/org/elasticsearch/rollup/RollupV2.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rollup;\n+\n+import org.elasticsearch.Build;\n+\n+public class RollupV2 {\n+    public static final Boolean ROLLUPV2_FEATURE_FLAG_REGISTERED;\n+\n+    static {\n+        final String property = System.getProperty(\"es.rollupv2_feature_flag_registered\");\n+        if (Build.CURRENT.isSnapshot() && property != null) {\n+            throw new IllegalArgumentException(\"es.rollupv2_feature_flag_registered is only supported in non-snapshot builds\");\n+        }\n+        if (\"true\".equals(property)) {\n+            ROLLUPV2_FEATURE_FLAG_REGISTERED = true;\n+        } else if (\"false\".equals(property)) {\n+            ROLLUPV2_FEATURE_FLAG_REGISTERED = false;\n+        } else if (property == null) {\n+            ROLLUPV2_FEATURE_FLAG_REGISTERED = null;", "originalCommit": "d2871315cf142bbbe1a30739934c28169aa5ddec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMzQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520023468", "bodyText": "Unclear. I kind of chose the \"keep feature-flag behavior consistent\" route. Instead of asking which is better, I decided to just follow the same pattern that was used by Autoscaling", "author": "talevy", "createdAt": "2020-11-09T18:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjc5OQ=="}], "type": "inlineReview"}, {"oid": "a668705b0905c0ee274555168b256228c613a6ef", "url": "https://github.com/elastic/elasticsearch/commit/a668705b0905c0ee274555168b256228c613a6ef", "message": "Merge remote-tracking branch 'elastic/master' into rollupv2metadata", "committedDate": "2020-11-09T22:18:09Z", "type": "commit"}, {"oid": "3d9b793710fc79634194b62610c98aa7d48ca6fa", "url": "https://github.com/elastic/elasticsearch/commit/3d9b793710fc79634194b62610c98aa7d48ca6fa", "message": "update RollupGroup with more docs and dedicated classes instead of Strings", "committedDate": "2020-11-09T23:34:44Z", "type": "commit"}, {"oid": "376edee3c2e7b5563b6ee774a7a4df5873213a51", "url": "https://github.com/elastic/elasticsearch/commit/376edee3c2e7b5563b6ee774a7a4df5873213a51", "message": "remove unused imports", "committedDate": "2020-11-10T00:06:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MzM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520583363", "bodyText": "Example helps a lot, thank you!", "author": "not-napoleon", "createdAt": "2020-11-10T14:01:08Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/RollupGroup.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.time.WriteableZoneId;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Object representing information about rollup-v2 indices and their respective original-indexes. These objects\n+ * also include information about their capabilities, like which date-intervals and date-timezones they are configured\n+ * with. Used by {@link RollupMetadata}.\n+ *\n+ * The information in this class will be used to decide which index within the <code>group</code> will be chosen\n+ * for a specific aggregation. For example, if there are two indices with different intervals (`1h`, `1d`) and\n+ * a date-histogram aggregation request is sent for daily intervals, then the index with the associated `1d` interval\n+ * will be chosen.", "originalCommit": "376edee3c2e7b5563b6ee774a7a4df5873213a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4NTE4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520585184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Simple wrapper around {@link ZoneId} so that it can be\n          \n          \n            \n             * Simple wrapper around {@link ZoneId} so that it can be written to XContent", "author": "not-napoleon", "createdAt": "2020-11-10T14:03:53Z", "path": "server/src/main/java/org/elasticsearch/common/time/WriteableZoneId.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.time;\n+\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.util.Objects;\n+\n+/**\n+ * Simple wrapper around {@link ZoneId} so that it can be", "originalCommit": "376edee3c2e7b5563b6ee774a7a4df5873213a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNzcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520827716", "bodyText": "Can we condense this down to maybe just one map with a value that holds the interval and the time zone?", "author": "not-napoleon", "createdAt": "2020-11-10T19:41:10Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/RollupGroup.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.time.WriteableZoneId;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Object representing information about rollup-v2 indices and their respective original-indexes. These objects\n+ * also include information about their capabilities, like which date-intervals and date-timezones they are configured\n+ * with. Used by {@link RollupMetadata}.\n+ *\n+ * The information in this class will be used to decide which index within the <code>group</code> will be chosen\n+ * for a specific aggregation. For example, if there are two indices with different intervals (`1h`, `1d`) and\n+ * a date-histogram aggregation request is sent for daily intervals, then the index with the associated `1d` interval\n+ * will be chosen.\n+ */\n+public class RollupGroup extends AbstractDiffable<RollupGroup> implements ToXContentObject {\n+    private static final ParseField GROUP_FIELD = new ParseField(\"group\");\n+    private static final ParseField DATE_INTERVAL_FIELD = new ParseField(\"interval\");\n+    private static final ParseField DATE_TIMEZONE_FIELD = new ParseField(\"timezone\");\n+\n+    // the list of indices part of this rollup group\n+    private List<String> group;\n+    // a map from index-name to the date interval used in the associated index\n+    private Map<String, DateHistogramInterval> dateInterval;\n+    // a map from index-name to timezone used in the associated index\n+    private Map<String, WriteableZoneId> dateTimezone;", "originalCommit": "376edee3c2e7b5563b6ee774a7a4df5873213a51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyOTQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/64680#discussion_r520829480", "bodyText": "very much so. Once all the data is being used by the search-resolution code, I suspect the contents of these maps will change \ud83d\udc4d and be simplified into one Map containing a larger Object holding the necessary information in one place", "author": "talevy", "createdAt": "2020-11-10T19:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNzcxNg=="}], "type": "inlineReview"}, {"oid": "2a7423a22f30cc2d9e8bb7a0f2201b57c9eece99", "url": "https://github.com/elastic/elasticsearch/commit/2a7423a22f30cc2d9e8bb7a0f2201b57c9eece99", "message": "Update server/src/main/java/org/elasticsearch/common/time/WriteableZoneId.java\n\nCo-authored-by: Mark Tozzi <mark.tozzi@gmail.com>", "committedDate": "2020-11-10T19:42:51Z", "type": "commit"}]}