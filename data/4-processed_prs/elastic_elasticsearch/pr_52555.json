{"pr_number": 52555, "pr_title": "Support joda style date patterns in 7.x", "pr_createdAt": "2020-02-20T09:01:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52555", "timeline": [{"oid": "9b79406e1ac7709a690641d974b2da112ad6c83a", "url": "https://github.com/elastic/elasticsearch/commit/9b79406e1ac7709a690641d974b2da112ad6c83a", "message": "tests passing", "committedDate": "2020-02-20T13:25:54Z", "type": "forcePushed"}, {"oid": "04d376a2bb572d6158683e940f3ae5b87f30e7b5", "url": "https://github.com/elastic/elasticsearch/commit/04d376a2bb572d6158683e940f3ae5b87f30e7b5", "message": "datefieldmapper checks for index version\n\nrolling upgrade test for joda-java\n\nsupport for java.style created in 6\n\ntests passing\n\nrevert not needed changes", "committedDate": "2020-02-20T13:31:23Z", "type": "commit"}, {"oid": "04d376a2bb572d6158683e940f3ae5b87f30e7b5", "url": "https://github.com/elastic/elasticsearch/commit/04d376a2bb572d6158683e940f3ae5b87f30e7b5", "message": "datefieldmapper checks for index version\n\nrolling upgrade test for joda-java\n\nsupport for java.style created in 6\n\ntests passing\n\nrevert not needed changes", "committedDate": "2020-02-20T13:31:23Z", "type": "forcePushed"}, {"oid": "f02fa66ed8c7ad3f1c664eb7cdd6ba21e7cdaf0d", "url": "https://github.com/elastic/elasticsearch/commit/f02fa66ed8c7ad3f1c664eb7cdd6ba21e7cdaf0d", "message": "normalize", "committedDate": "2020-02-20T14:27:03Z", "type": "commit"}, {"oid": "601e691cd8db961280d83813419be437cacbfcdb", "url": "https://github.com/elastic/elasticsearch/commit/601e691cd8db961280d83813419be437cacbfcdb", "message": "encoding", "committedDate": "2020-02-20T14:31:27Z", "type": "commit"}, {"oid": "1b23e9d3b3d2b1b81d86b61c2e283be2df65119e", "url": "https://github.com/elastic/elasticsearch/commit/1b23e9d3b3d2b1b81d86b61c2e283be2df65119e", "message": "revert encoding", "committedDate": "2020-02-20T14:32:11Z", "type": "commit"}, {"oid": "424c6701754ad808c6639bd32d14022c1efd5475", "url": "https://github.com/elastic/elasticsearch/commit/424c6701754ad808c6639bd32d14022c1efd5475", "message": "type", "committedDate": "2020-02-20T14:38:48Z", "type": "commit"}, {"oid": "85701cdac6085f257d55df7f2044eaad31d6d1b1", "url": "https://github.com/elastic/elasticsearch/commit/85701cdac6085f257d55df7f2044eaad31d6d1b1", "message": "support date range", "committedDate": "2020-02-20T17:03:10Z", "type": "commit"}, {"oid": "a280ff566b8577c76da03d16ae6abbcbc04b0f6d", "url": "https://github.com/elastic/elasticsearch/commit/a280ff566b8577c76da03d16ae6abbcbc04b0f6d", "message": "todos", "committedDate": "2020-02-20T17:08:36Z", "type": "commit"}, {"oid": "4291101ec1907e855cf283d5d25e5cf9187d6e80", "url": "https://github.com/elastic/elasticsearch/commit/4291101ec1907e855cf283d5d25e5cf9187d6e80", "message": "todos and debugging", "committedDate": "2020-02-20T17:11:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MjIxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r382282211", "bodyText": "Shouldn't this be uncommented?", "author": "rjernst", "createdAt": "2020-02-20T22:01:08Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java", "diffHunk": "@@ -138,7 +139,13 @@ protected void setupFieldType(BuilderContext context) {\n                     Objects.equals(builder.pattern, formatter.pattern()) == false;\n \n                 if (hasPatternChanged || Objects.equals(builder.locale, formatter.locale()) == false) {\n-                    fieldType().setDateTimeFormatter(DateFormatter.forPattern(pattern).withLocale(locale));\n+                    DateFormatter dateTimeFormatter;\n+//                    if (Joda.isJodaStyleIndex(context,pattern) ) {", "originalCommit": "4291101ec1907e855cf283d5d25e5cf9187d6e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMDMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r382510301", "bodyText": "yes - I am trying to find a good example where the test for range fields fails in 7 with joda pattern. Luckily the one with 'YYYY' passes -although the values are incorrectly parsed", "author": "pgomulka", "createdAt": "2020-02-21T10:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MjIxMQ=="}], "type": "inlineReview"}, {"oid": "95ccbc4e0bf3c86e72de11f70987dff4146f9897", "url": "https://github.com/elastic/elasticsearch/commit/95ccbc4e0bf3c86e72de11f70987dff4146f9897", "message": "range test that failes - notfinished", "committedDate": "2020-02-21T09:37:23Z", "type": "commit"}, {"oid": "146ce9089462f7f4dca9697ef9f96f2961b64220", "url": "https://github.com/elastic/elasticsearch/commit/146ce9089462f7f4dca9697ef9f96f2961b64220", "message": "6.87 range test", "committedDate": "2020-02-21T10:37:16Z", "type": "commit"}, {"oid": "beed11d0ace1bc0767b36f213c6ad7b7b2fdc0b9", "url": "https://github.com/elastic/elasticsearch/commit/beed11d0ace1bc0767b36f213c6ad7b7b2fdc0b9", "message": "test with more ingestion and replicas", "committedDate": "2020-02-21T16:48:22Z", "type": "commit"}, {"oid": "dc631ddebdc5881eb5c41789e4e2a5252560cd13", "url": "https://github.com/elastic/elasticsearch/commit/dc631ddebdc5881eb5c41789e4e2a5252560cd13", "message": "test fix", "committedDate": "2020-02-21T19:38:36Z", "type": "commit"}, {"oid": "71fdcef80a510c5deae26462c18c7cff2746439b", "url": "https://github.com/elastic/elasticsearch/commit/71fdcef80a510c5deae26462c18c7cff2746439b", "message": "imports", "committedDate": "2020-02-21T19:56:40Z", "type": "commit"}, {"oid": "2d44cf7156de8866c80d94b3f753a24153df2db3", "url": "https://github.com/elastic/elasticsearch/commit/2d44cf7156de8866c80d94b3f753a24153df2db3", "message": "imports", "committedDate": "2020-02-24T09:00:58Z", "type": "commit"}, {"oid": "bd7c389a39d3db8bd4a5699a080e8be724499a9b", "url": "https://github.com/elastic/elasticsearch/commit/bd7c389a39d3db8bd4a5699a080e8be724499a9b", "message": "Merge branch '7.x' into joda/enable_joda_indices", "committedDate": "2020-02-24T09:03:10Z", "type": "commit"}, {"oid": "e56350e334d60a3185b1dac64af7d1f7f31ac8da", "url": "https://github.com/elastic/elasticsearch/commit/e56350e334d60a3185b1dac64af7d1f7f31ac8da", "message": "import fix", "committedDate": "2020-02-24T09:57:06Z", "type": "commit"}, {"oid": "e5727a9b42d18a202505b18638659e4a7363802f", "url": "https://github.com/elastic/elasticsearch/commit/e5727a9b42d18a202505b18638659e4a7363802f", "message": "extend basing joda test", "committedDate": "2020-02-24T10:14:58Z", "type": "commit"}, {"oid": "3a65b1e63c0aca122f338099d90dc5f576c7bf9f", "url": "https://github.com/elastic/elasticsearch/commit/3a65b1e63c0aca122f338099d90dc5f576c7bf9f", "message": "warning fix", "committedDate": "2020-02-24T10:16:22Z", "type": "commit"}, {"oid": "380bda0493a3b2ddbc5d50a85aa0b6fd31881ade", "url": "https://github.com/elastic/elasticsearch/commit/380bda0493a3b2ddbc5d50a85aa0b6fd31881ade", "message": "typo fixg", "committedDate": "2020-02-24T13:20:39Z", "type": "commit"}, {"oid": "60440096f785fc1b924928f6ac8b5241fdc9ba8f", "url": "https://github.com/elastic/elasticsearch/commit/60440096f785fc1b924928f6ac8b5241fdc9ba8f", "message": "test data fix", "committedDate": "2020-02-25T08:53:38Z", "type": "commit"}, {"oid": "cb289f9853445a9625180ad4c9ec01d3937890d9", "url": "https://github.com/elastic/elasticsearch/commit/cb289f9853445a9625180ad4c9ec01d3937890d9", "message": "remove assertions", "committedDate": "2020-02-25T13:16:03Z", "type": "commit"}, {"oid": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "url": "https://github.com/elastic/elasticsearch/commit/dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "message": "missing quote", "committedDate": "2020-02-25T13:31:18Z", "type": "commit"}, {"oid": "b65bec70a8e6d0d892b095734f0885bff2181cfe", "url": "https://github.com/elastic/elasticsearch/commit/b65bec70a8e6d0d892b095734f0885bff2181cfe", "message": "more changes", "committedDate": "2020-02-27T17:49:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNjA4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r385426083", "bodyText": "nit: maybe just \"isJodaPattern\", since this is about the pattern, not an index", "author": "rjernst", "createdAt": "2020-02-27T23:16:56Z", "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +338,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaStyleIndex(Mapper.BuilderContext context, String pattern) {", "originalCommit": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNjI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r385426250", "bodyText": "nit: no need for these newlines?", "author": "rjernst", "createdAt": "2020-02-27T23:17:24Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -548,6 +555,8 @@ public DateFieldType fieldType() {\n         return (DateFieldType) super.fieldType();\n     }\n \n+", "originalCommit": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a789c0b2a965c8dfae2d733b954d5f076bbeeeb", "url": "https://github.com/elastic/elasticsearch/commit/4a789c0b2a965c8dfae2d733b954d5f076bbeeeb", "message": "rename and empty line", "committedDate": "2020-02-28T11:50:06Z", "type": "commit"}, {"oid": "12e6e213c446751897c2657f39f6cb21dbecb125", "url": "https://github.com/elastic/elasticsearch/commit/12e6e213c446751897c2657f39f6cb21dbecb125", "message": "java test", "committedDate": "2020-03-01T10:58:04Z", "type": "commit"}, {"oid": "a018f55714153cb72a1f9086bf6a0f788312f46a", "url": "https://github.com/elastic/elasticsearch/commit/a018f55714153cb72a1f9086bf6a0f788312f46a", "message": "testing joda backed fields", "committedDate": "2020-03-01T11:41:51Z", "type": "commit"}, {"oid": "4ddddf2f57c362adf6ce54b749d87f730d0f063b", "url": "https://github.com/elastic/elasticsearch/commit/4ddddf2f57c362adf6ce54b749d87f730d0f063b", "message": "warnings", "committedDate": "2020-03-01T17:35:34Z", "type": "commit"}, {"oid": "e6e9ce99552d6888bea5822ed0a746c55b4ffd4f", "url": "https://github.com/elastic/elasticsearch/commit/e6e9ce99552d6888bea5822ed0a746c55b4ffd4f", "message": "skipping 7", "committedDate": "2020-03-01T19:26:35Z", "type": "commit"}, {"oid": "c5019677cee990ec02cb81b8c287ffe33c4d047c", "url": "https://github.com/elastic/elasticsearch/commit/c5019677cee990ec02cb81b8c287ffe33c4d047c", "message": "tests passing", "committedDate": "2020-03-02T10:43:10Z", "type": "commit"}, {"oid": "d79ee333fb5ea9c7f26c37e61d3db25a7283c3dc", "url": "https://github.com/elastic/elasticsearch/commit/d79ee333fb5ea9c7f26c37e61d3db25a7283c3dc", "message": "import", "committedDate": "2020-03-02T11:05:57Z", "type": "commit"}, {"oid": "d262231f9ec4ee785f4f270afe996f4526c4012c", "url": "https://github.com/elastic/elasticsearch/commit/d262231f9ec4ee785f4f270afe996f4526c4012c", "message": "codestyle", "committedDate": "2020-03-02T11:35:27Z", "type": "commit"}, {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2", "url": "https://github.com/elastic/elasticsearch/commit/077dfeb02bff273e45454c6df0d5851f133651e2", "message": "cleanup", "committedDate": "2020-03-02T13:30:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5OTg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386499840", "bodyText": "this is used when using dynamic date formats setting. - so at index creation https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-field-mapping.html", "author": "pgomulka", "createdAt": "2020-03-02T16:25:29Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java", "diffHunk": "@@ -341,6 +341,7 @@ private static IndexOptions nodeIndexOptionValue(final Object propNode) {\n     }\n \n     public static DateFormatter parseDateTimeFormatter(Object node) {\n+        //todo pg debug this..", "originalCommit": "077dfeb02bff273e45454c6df0d5851f133651e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386501786", "bodyText": "this will happen when there is a mixed env with 7.7 and 7.0. Overall I think it is ok to assume it is java. most of the time it would work so no point breaking too many people", "author": "pgomulka", "createdAt": "2020-03-02T16:28:33Z", "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,21 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {\n+                //if stream is from 7.7 it will have a flag indicating if format is joda\n+                boolean isJoda = in.readBoolean();\n+                this.formatter = isJoda ? Joda.forPattern(datePattern) : DateFormatter.forPattern(datePattern);\n+            } else if (Joda.isJodaPattern(in.getVersion(), datePattern)) {\n+                //when received a stream from 6.0-6.latest it can be java if starts with 8 otherwise joda\n+                this.formatter = Joda.forPattern(datePattern);\n+            }else{\n+                // unknown if this is joda or java for versions earlier then [7.0-7.7).\n+                //todo consider throwing exception.. .", "originalCommit": "077dfeb02bff273e45454c6df0d5851f133651e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjY5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386502691", "bodyText": "@polyfractal is this a high perf piece of code? Is a instanceof too expensive here?\nthis could be refactored to a method on a DateFormatter class", "author": "pgomulka", "createdAt": "2020-03-02T16:29:55Z", "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -224,6 +241,10 @@ public void writeTo(StreamOutput out) throws IOException {\n                 out.writeString(timeZone.getId());\n                 out.writeVInt(resolution.ordinal());\n             }\n+            if (out.getVersion().onOrAfter(Version.CURRENT)) {\n+                //in order not to loose information if the formatter is a joda we send a flag\n+                out.writeBoolean(formatter instanceof JodaDateFormatter);//todo pg consider refactor to isJoda method..", "originalCommit": "077dfeb02bff273e45454c6df0d5851f133651e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1NjExNw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386656117", "bodyText": "Hmm no, I don't think this will ever be called in any kind of high-performance, hot loop.  It will be serialized for each bucket that needs to transfer the formatter, so could be called on the order of thousands to hundred-thousands of times, but not like millions or billions.\nI suspect any overhead this introduces will be lost in the noise compared to agg execution themselves.", "author": "polyfractal", "createdAt": "2020-03-02T21:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjY5MQ=="}], "type": "inlineReview"}, {"oid": "1cfebf2a5936b49d68d345816accd6dd3bc0786b", "url": "https://github.com/elastic/elasticsearch/commit/1cfebf2a5936b49d68d345816accd6dd3bc0786b", "message": "todo cleanup", "committedDate": "2020-03-02T16:31:08Z", "type": "commit"}, {"oid": "567ef7afb80d994cd525b81b97560bc70f797157", "url": "https://github.com/elastic/elasticsearch/commit/567ef7afb80d994cd525b81b97560bc70f797157", "message": "typoos fix", "committedDate": "2020-03-02T16:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MTU2OA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386571568", "bodyText": "Where is this set?", "author": "rjernst", "createdAt": "2020-03-02T18:32:41Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));", "originalCommit": "567ef7afb80d994cd525b81b97560bc70f797157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0OTY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386849642", "bodyText": "\"tests.upgrade_from_version\" is set in gradle, but that variable is already in AbstractRollingTestCase so do not need to be in DateFieldsIT", "author": "pgomulka", "createdAt": "2020-03-03T07:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MTU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDE1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387090151", "bodyText": "actually this was incorrect.. It was always set to current version. I changed this.\nNot sure if the previous impl was just a bug or intentional\n    systemProperty 'tests.upgrade_from_version', project.version.replace(\"-SNAPSHOT\", \"\")\n\nlooks odd...", "author": "pgomulka", "createdAt": "2020-03-03T15:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MTU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386587850", "bodyText": "This sounds like a bug? It should probably warrant an issue?", "author": "rjernst", "createdAt": "2020-03-02T19:02:33Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));\n+\n+    private static final String V_6_8_1_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'.\" +\n+        \" Prefix your date format with '8' to use the new specifier.\";\n+\n+    private static final String V_7_0_0_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'. \" +\n+        \"Use new java.time date format specifiers.\";\n+\n+    private static final String V_6_8_0_WARNING = \"Use of 'Y' (year-of-era) will change to 'y' in the next major version of Elasticsearch. \"\n+        + \"Prefix your date format with '8' to use the new specifier.\";\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_it\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+\n+                Version minVersion = getMinVersion();\n+                if (minVersion.equals(Version.V_6_8_0)) {\n+                    createTestIndex.setOptions(expectWarnings(V_6_8_0_WARNING));\n+                } else if (minVersion.onOrAfter(Version.V_6_8_1) && minVersion.before(Version.V_7_0_0)) {\n+                    createTestIndex.setOptions(expectWarnings(V_6_8_1_PLUS_WARNING));\n+                } else {\n+                    createTestIndex.setOptions(expectWarnings(V_7_0_0_PLUS_WARNING));\n+                }\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(200, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_it/_doc\");\n+\n+                break;\n+            case MIXED:\n+                postNewDoc(\"joda_it/_doc\");\n+\n+                Request search = dateRangeSearch(\"joda_it/_search\");\n+\n+                RequestOptions options = expectVersionSpecificWarnings(\n+                    consumer -> consumer.compatible(V_6_8_0_WARNING, V_6_8_1_PLUS_WARNING, V_7_0_0_PLUS_WARNING));\n+\n+                search.setOptions(options);\n+\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(200, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_it/_doc\");\n+                search = dateRangeSearch(\"joda_it/_search\");\n+                //somehow  this can at times not have a warning..", "originalCommit": "567ef7afb80d994cd525b81b97560bc70f797157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NDk2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386854969", "bodyText": "I think this was failing because I was not distinguishing between v6.8.1+ and v7  warning messages. The test was failing on warning assertion, however it is not as explicit about what was wrong as the yml assertion (which tells what was actual and what expected)", "author": "pgomulka", "createdAt": "2020-03-03T08:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODAyMA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387128020", "bodyText": "also I was often unaware that the test was not running.. #52555 (comment)", "author": "pgomulka", "createdAt": "2020-03-03T16:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NDQwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387154402", "bodyText": "ok this is odd. it is failing on https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+pull-request-bwc/17251/\nbut it is passing for me now locally (failing as expected too).\n@polyfractal Could I somehow not be hitting the DocValue date logic with just sorting?", "author": "pgomulka", "createdAt": "2020-03-03T16:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NzM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387347377", "bodyText": "To be honest I'm not sure, sorting has a slightly different mechanism that goes through the search infrastructure.  If you did an aggregation with a date_histogram and it returns at least one bucket, you'd be guaranteed to serialize a bucket with the date formatter.", "author": "polyfractal", "createdAt": "2020-03-03T23:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMDk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387710997", "bodyText": "I also discussed this with @jpountz and we confirmed that there is a chance when this logic won't be used.\nIn rolling upgrade tests ES might decide to allocate all shards to older nodes in mixed cluster and in upgraded cluster it might still remain on single node. Client might then connect to this node with all shards, therefore the serialisation logic won't be used.\nI iterate 3 times to make sure client at some point connects to a node that do not contain shards for these indices and triggers serialisation logic.", "author": "pgomulka", "createdAt": "2020-03-04T14:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTA1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386589055", "bodyText": "nit: it's unclear to me what the suffix \"_it\" means. perhaps use the index names \"joda_time\" and \"java_time\"?", "author": "rjernst", "createdAt": "2020-03-02T19:04:54Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));\n+\n+    private static final String V_6_8_1_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'.\" +\n+        \" Prefix your date format with '8' to use the new specifier.\";\n+\n+    private static final String V_7_0_0_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'. \" +\n+        \"Use new java.time date format specifiers.\";\n+\n+    private static final String V_6_8_0_WARNING = \"Use of 'Y' (year-of-era) will change to 'y' in the next major version of Elasticsearch. \"\n+        + \"Prefix your date format with '8' to use the new specifier.\";\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_it\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");", "originalCommit": "567ef7afb80d994cd525b81b97560bc70f797157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MDA2MA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386850060", "bodyText": "Initially I had it named joda and java but I was clashing with another yml test which  was using the same index names.\nWill rename this to joda_time/java_time", "author": "pgomulka", "createdAt": "2020-03-03T08:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDI3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386590273", "bodyText": "CURRENT should not be used in serialization logic since it is constantly changing. This should be the specific version this will be backported to", "author": "rjernst", "createdAt": "2020-03-02T19:07:18Z", "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,20 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {", "originalCommit": "567ef7afb80d994cd525b81b97560bc70f797157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386851241", "bodyText": "good point, agree", "author": "pgomulka", "createdAt": "2020-03-03T08:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTQ0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386591446", "bodyText": "This could be refactored to set isJoda based on version/joda pattern check and then always use the conditional on the next line.", "author": "rjernst", "createdAt": "2020-03-02T19:09:40Z", "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,20 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {\n+                //if stream is from 7.7 it will have a flag indicating if format is joda\n+                boolean isJoda = in.readBoolean();", "originalCommit": "567ef7afb80d994cd525b81b97560bc70f797157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Mzg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386853855", "bodyText": "not sure I understand. Do you suggest not sending this boolean flag?\nwhat about example  like:\nDocValuFormat using JodaFormatter - it was able to tell that by checking index creation version. It is serialized (writeTo) in 7.7\nThen deserialisation happens in 7.7 I don't have information about index creation. Pattern itself is not enough as the same pattern can be used in java and joda.", "author": "pgomulka", "createdAt": "2020-03-03T08:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0Mzc3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387143772", "bodyText": "The boolean is fine. My suggestion is to reorganize it a bit to remove duplication:\nfinal boolean isJoda;\nif (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n    isJoda = in.readBoolean();\n} else {\n    isJoda = Joda.isJodaPattern(in.getVersion(), datePattern);\n}\nthis.formatter = isJoda ? Joda.forPattern(datePattern) : DateFormatter.forPattern(datePattern);", "author": "rjernst", "createdAt": "2020-03-03T16:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4ODg4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387688882", "bodyText": "good idea", "author": "pgomulka", "createdAt": "2020-03-04T14:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTQ0Ng=="}], "type": "inlineReview"}, {"oid": "815648e361e5aa4a392a17fe56ec64372a9baa54", "url": "https://github.com/elastic/elasticsearch/commit/815648e361e5aa4a392a17fe56ec64372a9baa54", "message": "code review follow up", "committedDate": "2020-03-03T08:13:31Z", "type": "commit"}, {"oid": "ae3ab0a01fbc6c39efe5aa35dea91118f1cad945", "url": "https://github.com/elastic/elasticsearch/commit/ae3ab0a01fbc6c39efe5aa35dea91118f1cad945", "message": "fix upgrade from version", "committedDate": "2020-03-03T15:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDIxOA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387140218", "bodyText": "baseName is prefixed with v, right? I don't think that is correct, this should be bwcVersion which is parseable by Version.fromString", "author": "rjernst", "createdAt": "2020-03-03T16:28:12Z", "path": "qa/rolling-upgrade/build.gradle", "diffHunk": "@@ -80,6 +80,7 @@ for (Version bwcVersion : bwcVersions.wireCompatible) {\n     doFirst {\n       project.delete(\"${buildDir}/cluster/shared/repo/${baseName}\")\n     }\n+    systemProperty 'tests.upgrade_from_version', \"${baseName}\"", "originalCommit": "ae3ab0a01fbc6c39efe5aa35dea91118f1cad945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMjI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387702287", "bodyText": "good point, I was unnecessarily striping that v. bwcVersion is good enough", "author": "pgomulka", "createdAt": "2020-03-04T14:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDIxOA=="}], "type": "inlineReview"}, {"oid": "5d6ad6fd2945cb3d18815b076ebc24c396a4f4ef", "url": "https://github.com/elastic/elasticsearch/commit/5d6ad6fd2945cb3d18815b076ebc24c396a4f4ef", "message": "removal of warrnings", "committedDate": "2020-03-04T14:39:08Z", "type": "commit"}, {"oid": "1b16ced732c19161dc398a476330c37e477c3aef", "url": "https://github.com/elastic/elasticsearch/commit/1b16ced732c19161dc398a476330c37e477c3aef", "message": "javadoc", "committedDate": "2020-03-04T14:40:46Z", "type": "commit"}, {"oid": "091151a209ccb65f73b3b31fd259b61bfbf9ac57", "url": "https://github.com/elastic/elasticsearch/commit/091151a209ccb65f73b3b31fd259b61bfbf9ac57", "message": "imports", "committedDate": "2020-03-04T15:10:49Z", "type": "commit"}, {"oid": "04285f1b972e74bb2d97507a09118897fc2a575b", "url": "https://github.com/elastic/elasticsearch/commit/04285f1b972e74bb2d97507a09118897fc2a575b", "message": "force refresh", "committedDate": "2020-03-04T16:42:34Z", "type": "commit"}, {"oid": "da574a60c47f8c868525b7ad53f9e3f5da188f76", "url": "https://github.com/elastic/elasticsearch/commit/da574a60c47f8c868525b7ad53f9e3f5da188f76", "message": "Merge branch '7.x' into joda/enable_joda_indices", "committedDate": "2020-03-04T16:52:57Z", "type": "commit"}, {"oid": "810505fcb0a2952d1664d82a4c3b97809d873f42", "url": "https://github.com/elastic/elasticsearch/commit/810505fcb0a2952d1664d82a4c3b97809d873f42", "message": "flush after post doc", "committedDate": "2020-03-04T17:47:03Z", "type": "commit"}, {"oid": "f1ea0e89e107c033bebf326a29f7a314c273f4d0", "url": "https://github.com/elastic/elasticsearch/commit/f1ea0e89e107c033bebf326a29f7a314c273f4d0", "message": "Merge branch 'joda/enable_joda_indices' of github.com:pgomulka/elasticsearch into joda/enable_joda_indices", "committedDate": "2020-03-04T17:47:16Z", "type": "commit"}, {"oid": "f3c6c6aa677263fafb22e9457238977a9a99e33c", "url": "https://github.com/elastic/elasticsearch/commit/f3c6c6aa677263fafb22e9457238977a9a99e33c", "message": "import", "committedDate": "2020-03-04T18:43:04Z", "type": "commit"}, {"oid": "d3f8739b3f1f84c6fba490dbe31df03ee02117d1", "url": "https://github.com/elastic/elasticsearch/commit/d3f8739b3f1f84c6fba490dbe31df03ee02117d1", "message": "assert on body", "committedDate": "2020-03-05T10:15:15Z", "type": "commit"}, {"oid": "675b3d114444a8b56f4268f3e5789f303a068fe3", "url": "https://github.com/elastic/elasticsearch/commit/675b3d114444a8b56f4268f3e5789f303a068fe3", "message": "sout remove", "committedDate": "2020-03-09T08:09:26Z", "type": "commit"}, {"oid": "729d3101d22909c0706b5b795c57082feb4b336c", "url": "https://github.com/elastic/elasticsearch/commit/729d3101d22909c0706b5b795c57082feb4b336c", "message": "refresh instead of flush", "committedDate": "2020-03-09T09:15:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389538728", "bodyText": "We shouldn't add this method to the REST client, it's trappy by design given how it ignores all responses but the last one?", "author": "jpountz", "createdAt": "2020-03-09T09:18:49Z", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -235,6 +235,17 @@ public Response performRequest(Request request) throws IOException {\n         return performRequest(nextNodes(), internalRequest, null);\n     }\n \n+    public Response performRequest(Request request,  int times) throws IOException {\n+        Response response = null;\n+        InternalRequest internalRequest = new InternalRequest(request);\n+        NodeTuple<Iterator<Node>> iteratorNodeTuple = nextNodes();\n+        for(int i=0;i<times;i++){\n+            response = performRequest(iteratorNodeTuple, internalRequest, null);\n+        }\n+        return response;\n+    }", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMDcxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390120711", "bodyText": "good point, this should not be available outside tests", "author": "pgomulka", "createdAt": "2020-03-10T06:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389541004", "bodyText": "Thanks for adding javadocs to this test suite. This isn't common practice in our code base, but is definitely useful in this case.", "author": "jpountz", "createdAt": "2020-03-09T09:23:26Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MTM0NA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389651344", "bodyText": "Can you use a more specific name, something like JodaCompatibilityIT?", "author": "jpountz", "createdAt": "2020-03-09T13:15:08Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzA0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389653047", "bodyText": "maybe use a different name, when I first saw the method I assumed it would check for shard failures, like ElasticsearchAssertions#assertSearchResponse, but this one actually checks the content.", "author": "jpountz", "createdAt": "2020-03-09T13:18:20Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                Response searchResp = client().performRequest(search,3);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_time\", 4);\n+\n+                search = searchWithAgg(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+                //making sure all nodes were used for search\n+                searchResp = client().performRequest(search,3);\n+                assertSearchResponse(searchResp);\n+                break;\n+        }\n+    }\n+\n+    public void testJavaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"java_time\", \"8yyyy-MM-dd'T'HH:mm:ssXXX\");\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"java_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"java_time\", minute);\n+\n+                Request search = dateRangeSearch(\"java_time\");\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"java_time\", 4);\n+\n+                search = searchWithAgg(\"java_time\");\n+                //making sure all nodes were used for search\n+                searchResp = client().performRequest(search,3);\n+                assertSearchResponse(searchResp);\n+                break;\n+        }\n+    }\n+\n+    private RequestOptions ignoreWarnings() {\n+        RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder();\n+        options.setWarningsHandler(WarningsHandler.PERMISSIVE);\n+        return options.build();\n+    }\n+\n+    private void assertSearchResponse(Response searchResp) throws IOException {", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390123042", "bodyText": "will rename", "author": "pgomulka", "createdAt": "2020-03-10T06:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389653639", "bodyText": "Can we go further and assert that the total number of shards is equal to the number of successful shards?", "author": "jpountz", "createdAt": "2020-03-09T13:19:25Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                Response searchResp = client().performRequest(search,3);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NzgzMg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390197832", "bodyText": "good idea. will do", "author": "pgomulka", "createdAt": "2020-03-10T09:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NTM0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389655349", "bodyText": "I'm not seeing this flag?", "author": "jpountz", "createdAt": "2020-03-09T13:21:12Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTg4NA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390201884", "bodyText": "the flag is used during serialization of DocValueFormat.DateTime\nI have reworded the javadoc", "author": "pgomulka", "createdAt": "2020-03-10T09:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NTM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NzA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389657077", "bodyText": "I think you meant onOrAfter. But this makes me wonder whether we need this condition of the boolean expression, pre-6.x indices are not supported anyway in 7.", "author": "jpountz", "createdAt": "2020-03-09T13:22:53Z", "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +337,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaPattern(Version version, String pattern) {\n+        return version.before(Version.V_7_0_0)\n+            && version.after(Version.V_6_0_0)", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390203077", "bodyText": "agree - will remove && version.after(Version.V_6_0_0)\nI meant to make it explicit, but I think the context in v7 is clear that pre6x is not supported", "author": "pgomulka", "createdAt": "2020-03-10T09:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NzA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2ODc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389668780", "bodyText": "can you add javadocs?", "author": "jpountz", "createdAt": "2020-03-09T13:33:16Z", "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +337,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaPattern(Version version, String pattern) {", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5NTgyNw==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389695827", "bodyText": "can you add more details about when it gets incorrect? If my understanding is correct, this happens if an index is created on 6.x and the cluster is later upgraded to 7.x (x<7)?", "author": "jpountz", "createdAt": "2020-03-09T13:56:42Z", "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,19 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            final boolean isJoda;\n+            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                //if stream is from 7.7 Node it will have a flag indicating if format is joda\n+                isJoda = in.readBoolean();\n+            } else {\n+                //when received a stream from 6.0-6.latest Node it can be java if starts with 8 otherwise joda\n+                // If a stream is from [7.0 - 7.7) it will assume (sometimes incorrectly) that the date is java", "originalCommit": "729d3101d22909c0706b5b795c57082feb4b336c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MTI2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r390241262", "bodyText": "you are correct. added more details about this. Let me know if it is clear now", "author": "pgomulka", "createdAt": "2020-03-10T11:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5NTgyNw=="}], "type": "inlineReview"}, {"oid": "ecf57f58f0efe33e484ff9441aff0855653343f2", "url": "https://github.com/elastic/elasticsearch/commit/ecf57f58f0efe33e484ff9441aff0855653343f2", "message": "code review follow up", "committedDate": "2020-03-10T11:31:39Z", "type": "commit"}, {"oid": "5ed29d2c96ee67ce9edeeb23e55480c6a955d436", "url": "https://github.com/elastic/elasticsearch/commit/5ed29d2c96ee67ce9edeeb23e55480c6a955d436", "message": "Merge branch '7.x' into joda/enable_joda_indices", "committedDate": "2020-03-10T19:14:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MDczNg==", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r391190736", "bodyText": "remove?", "author": "jpountz", "createdAt": "2020-03-11T18:50:34Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/JodaCompatibilityIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag used when serializing {@link DocValueFormat.DateTime#writeTo DocValueFormat.DateTime::writeTo}\n+ * is used to indicate that an index was created in 6.x and has a joda pattern. The same flag is read when\n+ * {@link DocValueFormat.DateTime#DateTime(StreamInput)} deserializing.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class JodaCompatibilityIT extends AbstractRollingTestCase {\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                performOnAllNodes(search, r -> assertEquals(HttpStatus.SC_OK, r.getStatusLine().getStatusCode()));\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_time\", 4);\n+\n+                search = searchWithAgg(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+                //making sure all nodes were used for search\n+                performOnAllNodes(search, r -> assertResponseHasAllDocuments(r));\n+                break;\n+        }\n+    }\n+\n+    public void testJavaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"java_time\", \"8yyyy-MM-dd'T'HH:mm:ssXXX\");\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"java_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"java_time\", minute);\n+\n+                Request search = dateRangeSearch(\"java_time\");\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"java_time\", 4);\n+\n+                search = searchWithAgg(\"java_time\");\n+                //making sure all nodes were used for search\n+                performOnAllNodes(search, r -> assertResponseHasAllDocuments(r));\n+\n+                break;\n+        }\n+    }\n+\n+    private RequestOptions ignoreWarnings() {\n+        RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder();\n+        options.setWarningsHandler(WarningsHandler.PERMISSIVE);\n+        return options.build();\n+    }\n+\n+    private void performOnAllNodes(Request search, Consumer<Response> consumer) throws IOException {\n+        List<Node> nodes = client().getNodes();\n+        for (Node node : nodes) {\n+            client().setNodes(Collections.singletonList(node));\n+            Response response = client().performRequest(search);\n+            consumer.accept(response);\n+            assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+        }\n+        client().setNodes(nodes);\n+    }\n+\n+    private void assertResponseHasAllDocuments(Response searchResp) {\n+        assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+        try {\n+            assertEquals(removeWhiteSpace(\"{\" +\n+                    \"  \\\"_shards\\\": {\" +\n+                    \"    \\\"total\\\": 3,\" +\n+                    \"    \\\"successful\\\": 3\" +\n+                    \"  },\"+\n+                    \"  \\\"hits\\\": {\" +\n+                    \"    \\\"total\\\": 4,\" +\n+                    \"    \\\"hits\\\": [\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:01+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:02+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:03+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:04+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      }\" +\n+                    \"    ]\" +\n+                    \"  }\" +\n+                    \"}\"),\n+                EntityUtils.toString(searchResp.getEntity(), StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Exception during response parising\", e);\n+        }\n+    }\n+\n+    private String removeWhiteSpace(String input) {\n+        return input.replaceAll(\"[\\\\n\\\\r\\\\t\\\\ ]\", \"\");\n+    }\n+\n+    private Request dateRangeSearch(String endpoint) {\n+        Request search = new Request(\"GET\", endpoint+\"/_search\");\n+        search.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+        search.addParameter(\"filter_path\", \"hits.total,hits.hits._source.datetime,_shards.total,_shards.successful\");\n+        search.setJsonEntity(\"\" +\n+                \"{\\n\" +\n+                \"  \\\"track_total_hits\\\": true,\\n\" +\n+                \"  \\\"sort\\\": \\\"datetime\\\",\\n\" +\n+                \"  \\\"query\\\": {\\n\" +\n+                \"    \\\"range\\\": {\\n\" +\n+                \"      \\\"datetime\\\": {\\n\" +\n+                \"        \\\"gte\\\": \\\"2020-01-01T00:00:00+01:00\\\",\\n\" +\n+                \"        \\\"lte\\\": \\\"2020-01-02T00:00:00+01:00\\\"\\n\" +\n+                \"      }\\n\" +\n+                \"    }\\n\" +\n+                \"  }\\n\" +\n+                \"}\\n\"\n+        );\n+        return search;\n+    }\n+\n+    private Request searchWithAgg(String endpoint) throws IOException {\n+        Request search = new Request(\"GET\", endpoint+\"/_search\");\n+        search.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+        search.addParameter(\"filter_path\", \"hits.total,hits.hits._source.datetime,_shards.total,_shards.successful\");\n+\n+        search.setJsonEntity(\"{\\n\" +\n+            \"  \\\"track_total_hits\\\": true,\\n\" +\n+            \"  \\\"sort\\\": \\\"datetime\\\",\\n\" +\n+            \"  \\\"query\\\": {\\n\" +\n+            \"    \\\"range\\\": {\\n\" +\n+            \"      \\\"datetime\\\": {\\n\" +\n+            \"        \\\"gte\\\": \\\"2020-01-01T00:00:00+01:00\\\",\\n\" +\n+            \"        \\\"lte\\\": \\\"2020-01-02T00:00:00+01:00\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"aggs\\\" : {\\n\" +\n+            \"    \\\"docs_per_year\\\" : {\\n\" +\n+            \"      \\\"date_histogram\\\" : {\\n\" +\n+            \"        \\\"field\\\" : \\\"date\\\",\\n\" +\n+            \"        \\\"calendar_interval\\\" : \\\"year\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"  }\\n\" +\n+            \"}\\n\"\n+        );\n+        return search;\n+    }\n+    private Request indexWithDateField(String indexName, String format) {\n+        Request createTestIndex = new Request(\"PUT\", indexName);\n+        createTestIndex.addParameter(\"include_type_name\", \"false\");\n+        createTestIndex.setJsonEntity(\"{\\n\" +\n+            \"  \\\"settings\\\": {\\n\" +\n+            \"    \\\"index.number_of_shards\\\": 3\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"mappings\\\": {\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"datetime\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\",\\n\" +\n+            \"          \\\"format\\\": \\\"\" + format + \"\\\"\\n\" +\n+            \"        }\\n\" +\n+            \"      }\\n\" +\n+            \"  }\\n\" +\n+            \"}\"\n+        );\n+        return createTestIndex;\n+    }\n+\n+    private void postNewDoc(String endpoint, int minute) throws IOException {\n+        Request putDoc = new Request(\"POST\", endpoint+\"/_doc\");\n+        putDoc.addParameter(\"refresh\", \"true\");\n+        putDoc.addParameter(\"wait_for_active_shards\", \"all\");\n+        putDoc.setJsonEntity(\"{\\n\" +\n+            \"  \\\"datetime\\\": \\\"2020-01-01T00:00:0\" + minute + \"+01:00\\\"\\n\" +\n+            \"}\"\n+        );\n+        Response resp = client().performRequest(putDoc);\n+        assertEquals(HttpStatus.SC_CREATED, resp.getStatusLine().getStatusCode());\n+//        flush(endpoint,true);", "originalCommit": "5ed29d2c96ee67ce9edeeb23e55480c6a955d436", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bda9c47069d8fb41871b42066c5a62fc7142f74a", "url": "https://github.com/elastic/elasticsearch/commit/bda9c47069d8fb41871b42066c5a62fc7142f74a", "message": "remove comment", "committedDate": "2020-03-11T19:41:46Z", "type": "commit"}]}