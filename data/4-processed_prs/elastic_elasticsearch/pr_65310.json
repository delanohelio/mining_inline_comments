{"pr_number": 65310, "pr_title": "Port LicenseHeadersTask to java and remove ant layer", "pr_createdAt": "2020-11-20T13:27:26Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65310", "timeline": [{"oid": "a6db4879e086997ce6c40c562888fad614158363", "url": "https://github.com/elastic/elasticsearch/commit/a6db4879e086997ce6c40c562888fad614158363", "message": "Cleanup DependenciesInfoTask", "committedDate": "2020-11-23T09:11:41Z", "type": "forcePushed"}, {"oid": "62e91768591677fb656d13fdd80dc001e1d9e1ee", "url": "https://github.com/elastic/elasticsearch/commit/62e91768591677fb656d13fdd80dc001e1d9e1ee", "message": "Port LicenseHeadersTask to java and remove ant layer", "committedDate": "2020-11-23T16:56:22Z", "type": "commit"}, {"oid": "a1f38f07fb53978fa02b3cf94f8e1075a25e5367", "url": "https://github.com/elastic/elasticsearch/commit/a1f38f07fb53978fa02b3cf94f8e1075a25e5367", "message": "Port more buildSrc sources to java\n\n- TODO: Rework DependenciesInfoTask to not use any groovy api", "committedDate": "2020-11-23T16:56:23Z", "type": "commit"}, {"oid": "f57dbe454d715d391a00dc9cbe446bf1b8dfe2b8", "url": "https://github.com/elastic/elasticsearch/commit/f57dbe454d715d391a00dc9cbe446bf1b8dfe2b8", "message": "Cleanup DependenciesInfoTask", "committedDate": "2020-11-23T16:56:23Z", "type": "commit"}, {"oid": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "url": "https://github.com/elastic/elasticsearch/commit/8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "message": "Handle unapproved licenses properly", "committedDate": "2020-11-23T16:56:23Z", "type": "commit"}, {"oid": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "url": "https://github.com/elastic/elasticsearch/commit/8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "message": "Handle unapproved licenses properly", "committedDate": "2020-11-23T16:56:23Z", "type": "forcePushed"}, {"oid": "ae1b42112fa9bccc252bb84bc623a5a11fc626b8", "url": "https://github.com/elastic/elasticsearch/commit/ae1b42112fa9bccc252bb84bc623a5a11fc626b8", "message": "Minor polishing\n\nlambda > Action", "committedDate": "2020-11-23T17:14:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528868204", "bodyText": "What's the difference here? Do we still need to expliclty apply the groovy plugin?", "author": "mark-vieira", "createdAt": "2020-11-23T17:16:30Z", "path": "buildSrc/build.gradle", "diffHunk": "@@ -21,7 +21,7 @@ import org.gradle.internal.jvm.Jvm\n import org.gradle.util.GradleVersion\n \n plugins {\n-  id 'java-gradle-plugin'\n+  id 'groovy-gradle-plugin'", "originalCommit": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDU2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528984567", "bodyText": "A leftover from figuring out why the test kit integ tests didnt work. should be revertible. will check", "author": "breskeby", "createdAt": "2020-11-23T20:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3MDc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528870748", "bodyText": "Looks like this snuck in by accident.", "author": "mark-vieira", "createdAt": "2020-11-23T17:20:21Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/precommit/InternalPrecommitTasks.java.new", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.elasticsearch.gradle.internal.precommit;", "originalCommit": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3ODcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528878708", "bodyText": "This also looks like it should be removed.", "author": "mark-vieira", "createdAt": "2020-11-23T17:32:42Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/StandaloneTestPlugin.java.new", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.elasticsearch.gradle.test;", "originalCommit": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MjIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528882206", "bodyText": "Shouldn't this be tracked as an input as well?", "author": "mark-vieira", "createdAt": "2020-11-23T17:38:24Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/precommit/LicenseHeadersTask.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal.precommit;\n+\n+import org.apache.rat.Defaults;\n+import org.apache.rat.ReportConfiguration;\n+import org.apache.rat.analysis.IHeaderMatcher;\n+import org.apache.rat.analysis.util.HeaderMatcherMultiplexer;\n+import org.apache.rat.anttasks.SubstringLicenseMatcher;\n+import org.apache.rat.api.RatException;\n+import org.apache.rat.document.impl.FileDocument;\n+import org.apache.rat.license.SimpleLicenseFamily;\n+import org.apache.rat.report.RatReport;\n+import org.apache.rat.report.claim.ClaimStatistic;\n+import org.apache.rat.report.xml.XmlReportFactory;\n+import org.apache.rat.report.xml.writer.impl.base.XmlWriter;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.Internal;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Checks files for license headers.\n+ */\n+public abstract class LicenseHeadersTask extends DefaultTask {\n+    public LicenseHeadersTask() {\n+        setDescription(\"Checks sources for missing, incorrect, or unacceptable license headers\");\n+    }\n+\n+    /**\n+     * The list of java files to check. protected so the afterEvaluate closure in the\n+     * constructor can write to it.\n+     */\n+    @InputFiles\n+    @SkipWhenEmpty\n+    public List<FileCollection> getJavaFiles() {\n+        return getSourceFolders().get();\n+    }\n+\n+    /**\n+     * Add a new license type.\n+     * <p>\n+     * The license may be added to the {@link #approvedLicenses} using the {@code familyName}.\n+     *\n+     * @param categoryName A 5-character string identifier for the license\n+     * @param familyName   An expanded string name for the license\n+     * @param pattern      A pattern to search for, which if found, indicates a file contains the license\n+     */\n+    public void additionalLicense(final String categoryName, String familyName, String pattern) {\n+        if (categoryName.length() != 5) {\n+            throw new IllegalArgumentException(\"License category name must be exactly 5 characters, got \" + categoryName);\n+        }\n+\n+        additionalLicenses.put(categoryName + familyName, pattern);\n+    }\n+\n+    @TaskAction\n+    public void runRat() {\n+        ReportConfiguration reportConfiguration = new ReportConfiguration();\n+        reportConfiguration.setAddingLicenses(true);\n+        List<IHeaderMatcher> matchers = new ArrayList<>();\n+        matchers.add(Defaults.createDefaultMatcher());\n+\n+        // BSD 4-clause stuff (is disallowed below)\n+        // we keep this here, in case someone adds BSD code for some reason, it should never be allowed.\n+        matchers.add(subStringMatcher(\"BSD4 \", \"Original BSD License (with advertising clause)\", \"All advertising materials\"));\n+        // Apache\n+        matchers.add(subStringMatcher(\"AL   \", \"Apache\", \"Licensed to Elasticsearch under one or more contributor\"));\n+        // Generated resources\n+        matchers.add(subStringMatcher(\"GEN  \", \"Generated\", \"ANTLR GENERATED CODE\"));\n+        // Vendored Code\n+        matchers.add(subStringMatcher(\"VEN  \", \"Vendored\", \"@notice\"));\n+\n+        for (Map.Entry<String, String> additional : additionalLicenses.entrySet()) {\n+            String category = additional.getKey().substring(0, 5);\n+            String family = additional.getKey().substring(5);\n+            matchers.add(subStringMatcher(category, family, additional.getValue()));\n+        }\n+\n+        reportConfiguration.setHeaderMatcher(new HeaderMatcherMultiplexer(matchers.toArray(IHeaderMatcher[]::new)));\n+        reportConfiguration.setApprovedLicenseNames(approvedLicenses.stream().map(license -> {\n+            SimpleLicenseFamily simpleLicenseFamily = new SimpleLicenseFamily();\n+            simpleLicenseFamily.setFamilyName(license);\n+            return simpleLicenseFamily;\n+        }).toArray(SimpleLicenseFamily[]::new));\n+\n+        ClaimStatistic stats = generateReport(reportConfiguration, getReportFile());\n+        boolean unknownLicenses = stats.getNumUnknown() > 0;\n+        boolean unApprovedLicenses = stats.getNumUnApproved() > 0;\n+        if (unknownLicenses || unApprovedLicenses) {\n+            unapprovedFiles(getReportFile()).stream().forEachOrdered(unapprovedFile -> getLogger().error(unapprovedFile));\n+            throw new GradleException(\"License header problems were found! Full details: \" + reportFile.getAbsolutePath());\n+        }\n+    }\n+\n+    private IHeaderMatcher subStringMatcher(String licenseFamilyCategory, String licenseFamilyName, String substringPattern) {\n+        SubstringLicenseMatcher substringLicenseMatcher = new SubstringLicenseMatcher();\n+        substringLicenseMatcher.setLicenseFamilyCategory(licenseFamilyCategory);\n+        substringLicenseMatcher.setLicenseFamilyName(licenseFamilyName);\n+\n+        SubstringLicenseMatcher.Pattern pattern = new SubstringLicenseMatcher.Pattern();\n+        pattern.setSubstring(substringPattern);\n+        substringLicenseMatcher.addConfiguredPattern(pattern);\n+        return substringLicenseMatcher;\n+    }\n+\n+    private ClaimStatistic generateReport(ReportConfiguration config, File xmlReportFile) {\n+        try {\n+            Files.deleteIfExists(reportFile.toPath());\n+            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(xmlReportFile));\n+            return toXmlReportFile(config, bufferedWriter);\n+        } catch (IOException | RatException exception) {\n+            throw new GradleException(\"Cannot generate license header report for \" + getPath(), exception);\n+        }\n+    }\n+\n+    private ClaimStatistic toXmlReportFile(ReportConfiguration config, Writer writer) throws RatException, IOException {\n+        ClaimStatistic stats = new ClaimStatistic();\n+        RatReport standardReport = XmlReportFactory.createStandardReport(new XmlWriter(writer), stats, config);\n+\n+        standardReport.startReport();\n+        for (FileCollection dirSet : getSourceFolders().get()) {\n+            for (File f : dirSet.getAsFileTree().matching(patternFilterable -> patternFilterable.exclude(getExcludes()))) {\n+                standardReport.report(new FileDocument(f));\n+            }\n+        }\n+        standardReport.endReport();\n+        writer.flush();\n+        writer.close();\n+        return stats;\n+    }\n+\n+    private List<String> unapprovedFiles(File xmlReportFile) {\n+        try {\n+            NodeList resourcesNodes = DocumentBuilderFactory.newInstance()\n+                .newDocumentBuilder()\n+                .parse(xmlReportFile)\n+                .getElementsByTagName(\"resource\");\n+            return elementList(resourcesNodes).stream()\n+                .filter(\n+                    resource -> elementList(resource.getChildNodes()).stream()\n+                        .anyMatch(n -> n.getTagName().equals(\"license-approval\") && n.getAttribute(\"name\").equals(\"false\"))\n+                )\n+                .map(e -> e.getAttribute(\"name\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+        } catch (SAXException | IOException | ParserConfigurationException e) {\n+            throw new GradleException(\"Error parsing xml report \" + getReportFile().getAbsolutePath());\n+        }\n+    }\n+\n+    @Internal\n+    public abstract ListProperty<FileCollection> getSourceFolders();\n+\n+    public File getReportFile() {\n+        return reportFile;\n+    }\n+\n+    public void setReportFile(File reportFile) {\n+        this.reportFile = reportFile;\n+    }\n+\n+    public List<String> getApprovedLicenses() {\n+        return approvedLicenses;\n+    }\n+\n+    public void setApprovedLicenses(List<String> approvedLicenses) {\n+        this.approvedLicenses = approvedLicenses;\n+    }\n+\n+    public List<String> getExcludes() {\n+        return excludes;\n+    }\n+\n+    public void setExcludes(List<String> excludes) {\n+        this.excludes = excludes;\n+    }\n+\n+    @OutputFile\n+    private File reportFile = new File(getProject().getBuildDir(), \"reports/licenseHeaders/rat.xml\");\n+    /**\n+     * Allowed license families for this project.\n+     */\n+    @Input\n+    private List<String> approvedLicenses = new ArrayList<String>(Arrays.asList(\"Apache\", \"Generated\", \"Vendored\"));\n+    /**\n+     * Files that should be excluded from the license header check. Use with extreme care, only in situations where the license on the\n+     * source file is compatible with the codebase but we do not want to add the license to the list of approved headers (to avoid the\n+     * possibility of inadvertently using the license on our own source files).\n+     */\n+    @Input\n+    private List<String> excludes = new ArrayList<String>();\n+    /**\n+     * Additional license families that may be found. The key is the license category name (5 characters),\n+     * followed by the family name and the value list of patterns to search for.\n+     */\n+    protected Map<String, String> additionalLicenses = new HashMap<String, String>();", "originalCommit": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MjY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528882651", "bodyText": "Anything keeping us from making this cacheable?", "author": "mark-vieira", "createdAt": "2020-11-23T17:39:08Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/precommit/LicenseHeadersTask.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal.precommit;\n+\n+import org.apache.rat.Defaults;\n+import org.apache.rat.ReportConfiguration;\n+import org.apache.rat.analysis.IHeaderMatcher;\n+import org.apache.rat.analysis.util.HeaderMatcherMultiplexer;\n+import org.apache.rat.anttasks.SubstringLicenseMatcher;\n+import org.apache.rat.api.RatException;\n+import org.apache.rat.document.impl.FileDocument;\n+import org.apache.rat.license.SimpleLicenseFamily;\n+import org.apache.rat.report.RatReport;\n+import org.apache.rat.report.claim.ClaimStatistic;\n+import org.apache.rat.report.xml.XmlReportFactory;\n+import org.apache.rat.report.xml.writer.impl.base.XmlWriter;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.Internal;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Checks files for license headers.\n+ */\n+public abstract class LicenseHeadersTask extends DefaultTask {", "originalCommit": "8e721021c1b698aa21303ee4a51ecf5da7e6f3a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/65310#discussion_r528984202", "bodyText": "No I don't think so. will do that", "author": "breskeby", "createdAt": "2020-11-23T20:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MjY1MQ=="}], "type": "inlineReview"}, {"oid": "105f6f6849ec6794783868683bb1495a0b5c3b63", "url": "https://github.com/elastic/elasticsearch/commit/105f6f6849ec6794783868683bb1495a0b5c3b63", "message": "Apply review feedback\n\n- make LicenseHeadersTask cacheable\n- remove files", "committedDate": "2020-11-23T21:36:43Z", "type": "commit"}]}