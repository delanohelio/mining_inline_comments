{"pr_number": 51675, "pr_title": "SQL: Fix milliseconds handling in intervals", "pr_createdAt": "2020-01-30T13:21:33Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51675", "timeline": [{"oid": "44c4688411b25811f2c022c68f86acac1657adec", "url": "https://github.com/elastic/elasticsearch/commit/44c4688411b25811f2c022c68f86acac1657adec", "message": "Fix milliseconds handling in intervals\n\nThis commit fixes:\n- the parsing of milliseconds in intervals: a value such as .23 is no\nlonger converted to 23 millis, but to 230;\n- the printing of a trailing .0, in case the interval lacks the\nfractional part.", "committedDate": "2020-01-30T12:59:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MjQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373172426", "bodyText": "Same here.", "author": "matriv", "createdAt": "2020-01-30T20:18:45Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/StringUtils.java", "diffHunk": "@@ -129,8 +129,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "originalCommit": "44c4688411b25811f2c022c68f86acac1657adec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MzQ3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373173471", "bodyText": "Alternatively you could just iterate on the string millis from end->start and remove all zeroes.\nDon't know if performance wise makes sense...", "author": "matriv", "createdAt": "2020-01-30T20:21:17Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/util/DateUtils.java", "diffHunk": "@@ -136,8 +136,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "originalCommit": "44c4688411b25811f2c022c68f86acac1657adec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5MTUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373191504", "bodyText": "I've also fluttered a bit between the two approaches. I went with this approach since generally arithmetic operations should be faster. But anyways, micro-optimisations.", "author": "bpintea", "createdAt": "2020-01-30T21:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MzQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NDI4NA==", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373174284", "bodyText": "Same concept here, you could avoid the multiplication by creating a string with right zero padding and then read is as number.", "author": "matriv", "createdAt": "2020-01-30T20:23:05Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/literal/interval/Intervals.java", "diffHunk": "@@ -341,6 +341,10 @@ TemporalAmount parse(Source source, String string) {\n                                             + \": negative value [{}] not allowed (negate the entire interval instead)\",\n                                     v);\n                         }\n+                        if (units.get(unitIndex) == TimeUnit.MILLISECOND && number.length() < 3) {\n+                            // normalize the number past DOT to millis\n+                            v *= number.length() < 2 ? 100 : 10;", "originalCommit": "44c4688411b25811f2c022c68f86acac1657adec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5MTUyOA==", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373191528", "bodyText": "This might be changed later if we ever bring the nanos to intervals and a multiplication might be more succinct. But yes, also here debatable.", "author": "bpintea", "createdAt": "2020-01-30T21:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NDI4NA=="}], "type": "inlineReview"}]}