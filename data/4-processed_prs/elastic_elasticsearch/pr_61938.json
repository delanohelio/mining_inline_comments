{"pr_number": 61938, "pr_title": "Stop runtime script from emitting too many values", "pr_createdAt": "2020-09-03T16:45:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61938", "timeline": [{"oid": "4fa21cfd90692579192da9519c78e846d5919924", "url": "https://github.com/elastic/elasticsearch/commit/4fa21cfd90692579192da9519c78e846d5919924", "message": "Stop runtime script from emitting too many values\n\nThis prevent `keyword` valued runtime scripts from emitting too many\nvalues or values that take up too much space. Without this you can put\nallocate a ton of memory with the script by sticking it into a tight\nloop. Painless has some protections against this but:\n1. I don't want to rely on them out of sheer paranoia\n2. They don't really kick in when the script uses callbacks like we do\n   anyway.\n\nRelates to #59332", "committedDate": "2020-09-03T16:42:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r483501293", "bodyText": "this seems high", "author": "javanna", "createdAt": "2020-09-04T09:27:17Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractScriptFieldScript.java", "diffHunk": "@@ -27,6 +27,11 @@\n  * {@link AggregationScript} but hopefully with less historical baggage.\n  */\n public abstract class AbstractScriptFieldScript {\n+    /**\n+     * The maximum number of values a script should be allowed to emit.\n+     */\n+    public static final int MAX_VALUES = 1000;", "originalCommit": "4fa21cfd90692579192da9519c78e846d5919924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMjg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r483502855", "bodyText": "could the max values check be shared in the base class, and could we then unify the error message to something like \"Runtime field [field] is emitting [1500] values while the maximum number of values allowed is [1000]\"?", "author": "javanna", "createdAt": "2020-09-04T09:30:14Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/StringScriptFieldScript.java", "diffHunk": "@@ -49,12 +55,20 @@ public StringScriptFieldScript(Map<String, Object> params, SearchLookup searchLo\n      */\n     public final List<String> resultsForDoc(int docId) {\n         results.clear();\n+        chars = 0;\n         setDocument(docId);\n         execute();\n         return results;\n     }\n \n     protected final void emitValue(String v) {\n+        if (results.size() >= MAX_VALUES) {\n+            throw new IllegalArgumentException(\"too many runtime values\");\n+        }", "originalCommit": "4fa21cfd90692579192da9519c78e846d5919924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMzM3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r483503372", "bodyText": "Runtime field [field] is emitting [1500] characters while the maximum number of characters allowed is [1000]\"?", "author": "javanna", "createdAt": "2020-09-04T09:31:10Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/StringScriptFieldScript.java", "diffHunk": "@@ -49,12 +55,20 @@ public StringScriptFieldScript(Map<String, Object> params, SearchLookup searchLo\n      */\n     public final List<String> resultsForDoc(int docId) {\n         results.clear();\n+        chars = 0;\n         setDocument(docId);\n         execute();\n         return results;\n     }\n \n     protected final void emitValue(String v) {\n+        if (results.size() >= MAX_VALUES) {\n+            throw new IllegalArgumentException(\"too many runtime values\");\n+        }\n+        chars += v.length();\n+        if (chars >= MAX_CHARS) {\n+            throw new IllegalArgumentException(\"too many characters in runtime values [\" + chars + \"]\");", "originalCommit": "4fa21cfd90692579192da9519c78e846d5919924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "510fa50400cca023e446e10f17d1fb1a7878d437", "url": "https://github.com/elastic/elasticsearch/commit/510fa50400cca023e446e10f17d1fb1a7878d437", "message": "Merge branch 'master' into script_field_too_many_keywords_take_three", "committedDate": "2020-09-04T14:46:07Z", "type": "commit"}, {"oid": "bb5abb9995283c5b491fc8d9194198f91fe68dc9", "url": "https://github.com/elastic/elasticsearch/commit/bb5abb9995283c5b491fc8d9194198f91fe68dc9", "message": "Name name name", "committedDate": "2020-09-04T15:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485106427", "bodyText": "is there a chance that we have some standard emitValue in the base class that calls this method? Otherwise all impls should call it but now only string does?", "author": "javanna", "createdAt": "2020-09-08T18:10:58Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractScriptFieldScript.java", "diffHunk": "@@ -93,5 +101,19 @@ public final void setDocument(int docId) {\n         return leafSearchLookup.doc();\n     }\n \n+    protected final void checkMaxSize(int currentSize) {", "originalCommit": "bb5abb9995283c5b491fc8d9194198f91fe68dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTI4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485121289", "bodyText": "I don't think we can share a base class implementation, not without auto-boxing.", "author": "nik9000", "createdAt": "2020-09-08T18:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MDk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485450993", "bodyText": "ok, but scripts other than strings should also check for max size? or do they already do so and I have missed it?", "author": "javanna", "createdAt": "2020-09-09T08:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5NzM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485597383", "bodyText": "I'd thought I was just going to do strings in the first PR and grab the others in a follow up one. But, yeah, they should all call this method. Well, booleans may not have to because we don't actually allocate anything when they emit values. They are probably safe being limited by painless's standard stuff.", "author": "nik9000", "createdAt": "2020-09-09T13:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNDUwMA==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485604500", "bodyText": "it seems easy enough to do them all in this PR, what do you think?", "author": "javanna", "createdAt": "2020-09-09T13:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNzE4MA==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485607180", "bodyText": "I can give it a shot, sure!", "author": "nik9000", "createdAt": "2020-09-09T13:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MTc0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61938#discussion_r485671749", "bodyText": "I've pushed!", "author": "nik9000", "createdAt": "2020-09-09T14:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjQyNw=="}], "type": "inlineReview"}, {"oid": "166cb7ed77a9578ddb325737037425231f18dacf", "url": "https://github.com/elastic/elasticsearch/commit/166cb7ed77a9578ddb325737037425231f18dacf", "message": "Merge branch 'master' into script_field_too_many_keywords_take_three", "committedDate": "2020-09-09T13:53:30Z", "type": "commit"}, {"oid": "563b2b7473249c5a54f0e995ff8a91097a39ce33", "url": "https://github.com/elastic/elasticsearch/commit/563b2b7473249c5a54f0e995ff8a91097a39ce33", "message": "check limits all places", "committedDate": "2020-09-09T14:35:54Z", "type": "commit"}]}