{"pr_number": 56869, "pr_title": "SQL: Fix behaviour of COUNT(DISTINCT <literal>)", "pr_createdAt": "2020-05-17T13:16:16Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56869", "timeline": [{"oid": "0f78873282a6ce4cd2216e5b47d36f3c36a6c138", "url": "https://github.com/elastic/elasticsearch/commit/0f78873282a6ce4cd2216e5b47d36f3c36a6c138", "message": "SQL: Fix behaviour of COUNT(DISTINCT <literal>)\n\nPreviously `COUNT(DISTINCT <literal>)` was returning the same result\nas `COUNT(<literal>)` which is not correct as it should always return 1\nif there is at least one matching row (bucket if there is a GROUP BY),\nor 0 otherwise.", "committedDate": "2020-05-17T13:12:54Z", "type": "commit"}, {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939", "url": "https://github.com/elastic/elasticsearch/commit/0af6abc38dc1014e855652a68c4b3d08c553f939", "message": "fix tests", "committedDate": "2020-05-17T13:27:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426565322", "bodyText": "Considering there's a dedicated Count rule for local relationship, this snippet of code should sit there (ReplaceCountInLocalRelation) not here.", "author": "costin", "createdAt": "2020-05-18T11:44:54Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {", "originalCommit": "0af6abc38dc1014e855652a68c4b3d08c553f939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MDY5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426570699", "bodyText": "This doesn't fix only for local relations:\nSELECT COUNT(1), COUNT(DISTINCT 1) FROM test_emp;\n\nshould return 100, 1\nSELECT COUNT(1), COUNT(DISTINCT 1), gender FROM test_emp;\n\nshould return:\n1\n1\n1\n\nfor the distinct column.", "author": "matriv", "createdAt": "2020-05-18T11:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MjgyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426572829", "bodyText": "psql (12.2)\n\nmatriv=# select count(1), count(distinct 1) from test_emp;\n count | count \n-------+-------\n   100 |     1\n(1 row)\n\nmatriv=# select count(1), count(distinct 1), gender from test_emp group by gender;\n count | count | gender \n-------+-------+--------\n    33 |     1 | F\n    57 |     1 | M\n    10 |     1 | \n(3 rows)", "author": "matriv", "createdAt": "2020-05-18T11:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTg4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426781885", "bodyText": "Or you could have used a randomBoolean()? If true then DESC, if false then ASC.", "author": "astefan", "createdAt": "2020-05-18T17:22:40Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/SqlTestUtils.java", "diffHunk": "@@ -81,4 +86,40 @@ public static Literal literal(Source source, Object value) {\n         }\n         return new Literal(source, value, SqlDataTypes.fromJava(value));\n     }\n+\n+    public static String randomOrderByAndLimit(int noOfSelectArgs, Random rnd) {\n+        StringBuilder sb = new StringBuilder();\n+        if (randomBoolean()) {\n+            sb.append(\" ORDER BY \");\n+\n+            List<Integer> shuffledArgIndices = IntStream.range(1, noOfSelectArgs + 1).boxed().collect(Collectors.toList());\n+            Collections.shuffle(shuffledArgIndices, rnd);\n+            for (int i = 0; i < noOfSelectArgs; i++) {\n+                sb.append(shuffledArgIndices.get(i));\n+                switch (randomInt(2)) {", "originalCommit": "0af6abc38dc1014e855652a68c4b3d08c553f939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODY0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426838646", "bodyText": "I have 3 values so that it skips both -> implied ASC.", "author": "matriv", "createdAt": "2020-05-18T19:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4Mzg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426783891", "bodyText": "I think you meant to call the variable iifResult.", "author": "astefan", "createdAt": "2020-05-18T17:26:12Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {\n+                            iffResult =  new Literal(Source.EMPTY, 0, e.dataType());", "originalCommit": "0af6abc38dc1014e855652a68c4b3d08c553f939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDQ2MA==", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426840460", "bodyText": "yep, thx!", "author": "matriv", "createdAt": "2020-05-18T19:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4Mzg5MQ=="}], "type": "inlineReview"}, {"oid": "04eb175f5e83870fa6137d2b2687f478b427d27c", "url": "https://github.com/elastic/elasticsearch/commit/04eb175f5e83870fa6137d2b2687f478b427d27c", "message": "address comments", "committedDate": "2020-05-18T19:15:04Z", "type": "commit"}]}