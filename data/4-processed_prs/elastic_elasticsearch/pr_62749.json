{"pr_number": 62749, "pr_title": "[ML] Ensure data frame analytics jobs don't run on a node that's too new", "pr_createdAt": "2020-09-22T08:36:22Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62749", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTQxMw==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r492741413", "bodyText": "We should support rolling upgrades for data frame analytics jobs.\nThe experience here would be really bad. The user kicks off a rolling upgrade and the job basically stays in unassigned state forever.\nWe should check the job version and if it is less than 7.10, then we need to set the state back before reindex, and start from the reindex state again.", "author": "benwtrent", "createdAt": "2020-09-22T13:39:39Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -731,12 +741,25 @@ private void executeTask(DataFrameAnalyticsTaskState analyticsTaskState, Allocat\n             }\n         }\n \n-        public static String nodeFilter(DiscoveryNode node, String id) {\n+        public static String nodeFilter(DiscoveryNode node, TaskParams params) {\n+            String id = params.getId();\n \n-            if (node.getVersion().before(StartDataFrameAnalyticsAction.TaskParams.VERSION_INTRODUCED)) {\n+            if (node.getVersion().before(TaskParams.VERSION_INTRODUCED)) {\n                 return \"Not opening job [\" + id + \"] on node [\" + JobNodeSelector.nodeNameAndVersion(node)\n                     + \"], because the data frame analytics requires a node of version [\"\n-                    + StartDataFrameAnalyticsAction.TaskParams.VERSION_INTRODUCED + \"] or higher\";\n+                    + TaskParams.VERSION_INTRODUCED + \"] or higher\";\n+            }\n+            if (node.getVersion().onOrAfter(TaskParams.VERSION_DESTINATION_INDEX_MAPPINGS_CHANGED)", "originalCommit": "8f7ac5cfdd5b39502d890a0930723f3142c42d23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1NjM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r497356364", "bodyText": "We should support rolling upgrades for data frame analytics jobs\n\nWe said we wouldn't put the effort into that while it's experimental.\n\nThe experience here would be really bad. The user kicks off a rolling upgrade and the job basically stays in unassigned state forever.\n\nTrue.  We should probably add logic so that if an assignment is attempted and no node in the cluster has the required version then the job gets stopped.  Then the user can restart it and it will go through the logic of #62960.", "author": "droberts195", "createdAt": "2020-09-30T09:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNjMxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r497436311", "bodyText": "#62960 deletes the destination index if it is too old. Which covers this branch.\nThis predicate should be removed.", "author": "benwtrent", "createdAt": "2020-09-30T11:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3OTA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r498679085", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-10-02T08:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTkwNw==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r492741907", "bodyText": "I think this is ok. During a rolling upgrade, all nodes will eventually get to the latest version. And since we don't support upgrade rollbacks, this seems like a good check", "author": "benwtrent", "createdAt": "2020-09-22T13:40:17Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -731,12 +741,25 @@ private void executeTask(DataFrameAnalyticsTaskState analyticsTaskState, Allocat\n             }\n         }\n \n-        public static String nodeFilter(DiscoveryNode node, String id) {\n+        public static String nodeFilter(DiscoveryNode node, TaskParams params) {\n+            String id = params.getId();\n \n-            if (node.getVersion().before(StartDataFrameAnalyticsAction.TaskParams.VERSION_INTRODUCED)) {\n+            if (node.getVersion().before(TaskParams.VERSION_INTRODUCED)) {\n                 return \"Not opening job [\" + id + \"] on node [\" + JobNodeSelector.nodeNameAndVersion(node)\n                     + \"], because the data frame analytics requires a node of version [\"\n-                    + StartDataFrameAnalyticsAction.TaskParams.VERSION_INTRODUCED + \"] or higher\";\n+                    + TaskParams.VERSION_INTRODUCED + \"] or higher\";\n+            }\n+            if (node.getVersion().onOrAfter(TaskParams.VERSION_DESTINATION_INDEX_MAPPINGS_CHANGED)\n+                && params.getVersion().before(TaskParams.VERSION_DESTINATION_INDEX_MAPPINGS_CHANGED)) {\n+                return \"Not opening job [\" + id + \"] on node [\" + JobNodeSelector.nodeNameAndVersion(node)\n+                    + \"], because the data frame analytics created for version [\" + params.getVersion() + \"] requires a node of version \"\n+                    + \"before [\" + TaskParams.VERSION_DESTINATION_INDEX_MAPPINGS_CHANGED + \"]\";\n+            }\n+            if (node.getVersion().before(TaskParams.VERSION_DESTINATION_INDEX_MAPPINGS_CHANGED)", "originalCommit": "8f7ac5cfdd5b39502d890a0930723f3142c42d23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MDkzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r492740939", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //  - _node_name0 is too old (version 7.9.0)\n          \n          \n            \n                //  - _node_name0 is too old (version 7.2.0)", "author": "droberts195", "createdAt": "2020-09-22T13:39:01Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsActionTests.java", "diffHunk": "@@ -83,4 +112,136 @@ public void testVerifyIndicesPrimaryShardsAreActive() {\n             new IndexNameExpressionResolver(), indexName);\n         assertThat(result, contains(indexName));\n     }\n+\n+    // Cannot assign the node because upgrade mode is enabled\n+    public void testGetAssignment_UpgradeModeIsEnabled() {\n+        TaskExecutor executor = createTaskExecutor();\n+        TaskParams params = new TaskParams(JOB_ID, Version.CURRENT, Collections.emptyList(), false);\n+        ClusterState clusterState =\n+            ClusterState.builder(new ClusterName(\"_name\"))\n+                .metadata(Metadata.builder().putCustom(MlMetadata.TYPE, new MlMetadata.Builder().isUpgradeMode(true).build()))\n+                .build();\n+\n+        Assignment assignment = executor.getAssignment(params, clusterState);\n+        assertThat(assignment.getExecutorNode(), is(nullValue()));\n+        assertThat(assignment.getExplanation(), is(equalTo(\"persistent task cannot be assigned while upgrade mode is enabled.\")));\n+    }\n+\n+    // Cannot assign the node because there are no existing nodes in the cluster state\n+    public void testGetAssignment_NoNodes() {\n+        TaskExecutor executor = createTaskExecutor();\n+        TaskParams params = new TaskParams(JOB_ID, Version.CURRENT, Collections.emptyList(), false);\n+        ClusterState clusterState =\n+            ClusterState.builder(new ClusterName(\"_name\"))\n+                .metadata(Metadata.builder().putCustom(MlMetadata.TYPE, new MlMetadata.Builder().build()))\n+                .build();\n+\n+        Assignment assignment = executor.getAssignment(params, clusterState);\n+        assertThat(assignment.getExecutorNode(), is(nullValue()));\n+        assertThat(assignment.getExplanation(), is(emptyString()));\n+    }\n+\n+    // Cannot assign the node because none of the existing nodes is an ML node\n+    public void testGetAssignment_NoMlNodes() {\n+        TaskExecutor executor = createTaskExecutor();\n+        TaskParams params = new TaskParams(JOB_ID, Version.CURRENT, Collections.emptyList(), false);\n+        ClusterState clusterState =\n+            ClusterState.builder(new ClusterName(\"_name\"))\n+                .metadata(Metadata.builder().putCustom(MlMetadata.TYPE, new MlMetadata.Builder().build()))\n+                .nodes(DiscoveryNodes.builder()\n+                    .add(createNode(0, false, Version.CURRENT))\n+                    .add(createNode(1, false, Version.CURRENT))\n+                    .add(createNode(2, false, Version.CURRENT)))\n+                .build();\n+\n+        Assignment assignment = executor.getAssignment(params, clusterState);\n+        assertThat(assignment.getExecutorNode(), is(nullValue()));\n+        assertThat(\n+            assignment.getExplanation(),\n+            allOf(\n+                containsString(\"Not opening job [data_frame_id] on node [_node_name0], because this node isn't a ml node.\"),\n+                containsString(\"Not opening job [data_frame_id] on node [_node_name1], because this node isn't a ml node.\"),\n+                containsString(\"Not opening job [data_frame_id] on node [_node_name2], because this node isn't a ml node.\")));\n+    }\n+\n+    // Cannot assign the node because none of the existing nodes is appropriate:\n+    //  - _node_name0 is too old (version 7.9.0)", "originalCommit": "8f7ac5cfdd5b39502d890a0930723f3142c42d23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI5MDgxNA==", "url": "https://github.com/elastic/elasticsearch/pull/62749#discussion_r493290814", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-09-23T08:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MDkzOQ=="}], "type": "inlineReview"}, {"oid": "098ad15c3000c536db7b37c77b0aa3eb5e396115", "url": "https://github.com/elastic/elasticsearch/commit/098ad15c3000c536db7b37c77b0aa3eb5e396115", "message": "Fix typo in comment", "committedDate": "2020-09-23T08:12:33Z", "type": "forcePushed"}, {"oid": "e210935c6bdebc13a6911f4daac9a98ccd0126e5", "url": "https://github.com/elastic/elasticsearch/commit/e210935c6bdebc13a6911f4daac9a98ccd0126e5", "message": "Fix typo in comment", "committedDate": "2020-09-30T09:21:16Z", "type": "forcePushed"}, {"oid": "309f02e552cb59926dcd7cc30786cbbf59e58409", "url": "https://github.com/elastic/elasticsearch/commit/309f02e552cb59926dcd7cc30786cbbf59e58409", "message": "[ML] Ensure data frame analytics jobs don't run on a node that's too new", "committedDate": "2020-10-02T08:09:50Z", "type": "commit"}, {"oid": "4241305760281d293100937fd754e6c04a081313", "url": "https://github.com/elastic/elasticsearch/commit/4241305760281d293100937fd754e6c04a081313", "message": "Fix typo in comment", "committedDate": "2020-10-02T08:09:50Z", "type": "commit"}, {"oid": "35c30e90b5b03069d480391760b50da33b13b122", "url": "https://github.com/elastic/elasticsearch/commit/35c30e90b5b03069d480391760b50da33b13b122", "message": "Allow assigning old job to the new node", "committedDate": "2020-10-02T08:42:10Z", "type": "commit"}, {"oid": "35c30e90b5b03069d480391760b50da33b13b122", "url": "https://github.com/elastic/elasticsearch/commit/35c30e90b5b03069d480391760b50da33b13b122", "message": "Allow assigning old job to the new node", "committedDate": "2020-10-02T08:42:10Z", "type": "forcePushed"}]}