{"pr_number": 51018, "pr_title": "\"did you mean\" for ObjectParser with top named", "pr_createdAt": "2020-01-15T03:11:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51018", "timeline": [{"oid": "d3f7281c5c5ab398724f50a9a03e49c450573268", "url": "https://github.com/elastic/elasticsearch/commit/d3f7281c5c5ab398724f50a9a03e49c450573268", "message": "\"did you mean\" for ObjectParser with top named\n\nWhen you declare an ObjectParser with top level named objects like we do\nwith `significant_terms` we didn't support \"did you mean\". This fixes\nthat.\n\nRelates #50938", "committedDate": "2020-01-15T03:08:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51018#discussion_r366679651", "bodyText": "All of the exceptions that I changed to XContentParseException  are really more development errors than usage errors.", "author": "nik9000", "createdAt": "2020-01-15T03:17:32Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java", "diffHunk": "@@ -123,19 +123,18 @@ public NamedXContentRegistry(List<Entry> entries) {\n         if (parsers == null) {\n             if (registry.isEmpty()) {\n                 // The \"empty\" registry will never work so we throw a better exception as a hint.\n-                throw new NamedObjectNotFoundException(\"named objects are not supported for this parser\");\n+                throw new XContentParseException(\"named objects are not supported for this parser\");\n             }\n-            throw new NamedObjectNotFoundException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n+            throw new XContentParseException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n         }\n         Entry entry = parsers.get(name);\n         if (entry == null) {\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unable to parse \" + categoryClass.getSimpleName() +\n-                \" with name [\" + name + \"]: parser not found\");\n+            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unknown field [\" + name + \"]\", parsers.keySet());\n         }\n         if (false == entry.name.match(name, parser.getDeprecationHandler())) {\n             /* Note that this shouldn't happen because we already looked up the entry using the names but we need to call `match` anyway\n              * because it is responsible for logging deprecation warnings. */\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(),\n+            throw new XContentParseException(parser.getTokenLocation(),", "originalCommit": "d3f7281c5c5ab398724f50a9a03e49c450573268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/51018#discussion_r366679702", "bodyText": "And they don't have the critical candidates set.", "author": "nik9000", "createdAt": "2020-01-15T03:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTY1MQ=="}], "type": "inlineReview"}, {"oid": "49c64ba9d20bd15453e010a9c2eb285cfd48e167", "url": "https://github.com/elastic/elasticsearch/commit/49c64ba9d20bd15453e010a9c2eb285cfd48e167", "message": "Fixup", "committedDate": "2020-01-15T15:39:22Z", "type": "commit"}, {"oid": "cab84949ff3a5d2897052f182d05210955997ace", "url": "https://github.com/elastic/elasticsearch/commit/cab84949ff3a5d2897052f182d05210955997ace", "message": "Merge branch 'master' into object_parser_did_you_mean_named", "committedDate": "2020-01-15T19:54:40Z", "type": "commit"}]}