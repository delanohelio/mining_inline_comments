{"pr_number": 53298, "pr_title": "ValuesSource Refactor: move histo VSType into XPack module", "pr_createdAt": "2020-03-09T17:25:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53298", "timeline": [{"oid": "aa865296136e70f5dcf9681642c56f0c938ad32f", "url": "https://github.com/elastic/elasticsearch/commit/aa865296136e70f5dcf9681642c56f0c938ad32f", "message": "Move histogram field to XPack", "committedDate": "2020-03-09T16:20:16Z", "type": "commit"}, {"oid": "f6ef81920bdbe11e1a64ad06556d9a98db7b9cac", "url": "https://github.com/elastic/elasticsearch/commit/f6ef81920bdbe11e1a64ad06556d9a98db7b9cac", "message": "Merge branch 'feature/extensible-values-source' into vs_move_histo_vstype", "committedDate": "2020-03-09T17:14:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NDkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r389844902", "bodyText": "Unfortunately I think we can't get around this if/else situation like we did in Core.  We could \"wrap\" the core percentilesConfig with an xpack config... but internally it'd do essentially the same if/else to delegate to the appropriate agg.\nI don't see us extending this code anywhere further so the extra wrapper didn't seem useful.  If we ever decide to build more xpack percentiles/ranks stuff it might make sense though.", "author": "polyfractal", "createdAt": "2020-03-09T17:27:47Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/metrics/AnalyticsPercentilesAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.aggregations.metrics;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentileRanksAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.xpack.analytics.aggregations.support.HistogramValuesSourceType;\n+\n+public class AnalyticsPercentilesAggregatorFactory {\n+    public static void registerPercentilesAggregator(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(PercentilesAggregationBuilder.NAME,\n+            HistogramValuesSourceType.HISTOGRAM,\n+            (AnalyticsPercentilesAggregatorSupplier) (name, valuesSource, context, parent, percents, percentilesConfig, keyed,\n+                                                      formatter, pipelineAggregators, metaData) -> {\n+\n+                if (percentilesConfig.getMethod().equals(PercentilesMethod.TDIGEST)) {", "originalCommit": "f6ef81920bdbe11e1a64ad06556d9a98db7b9cac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNTE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390505179", "bodyText": "That seems fine.   I'm a lot more okay with doing this type of thing when it's serving to maintain isolation between components.", "author": "not-napoleon", "createdAt": "2020-03-10T17:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NDkwMg=="}], "type": "inlineReview"}, {"oid": "d8f32a71841e6d17d2a792bf8e4bb03b635c6a30", "url": "https://github.com/elastic/elasticsearch/commit/d8f32a71841e6d17d2a792bf8e4bb03b635c6a30", "message": "Add supported type tests\n\nThis got lost during git merge fiddling somehow", "committedDate": "2020-03-09T17:36:32Z", "type": "commit"}, {"oid": "2f054043abe6d6cfd6dd4dafd1b609fa16fbd3c5", "url": "https://github.com/elastic/elasticsearch/commit/2f054043abe6d6cfd6dd4dafd1b609fa16fbd3c5", "message": "checkstyle", "committedDate": "2020-03-09T17:52:46Z", "type": "commit"}, {"oid": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "url": "https://github.com/elastic/elasticsearch/commit/29fe8989c7059776de26f69d4702c6a9c0cd2196", "message": "Merge branch 'feature/extensible-values-source' into vs_move_histo_vstype", "committedDate": "2020-03-09T21:48:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODg0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390478848", "bodyText": "Just double checking - It's okay to remove this here because nothing legacy (multi, array, top metrics, composite) supports histogram fields anyway.", "author": "not-napoleon", "createdAt": "2020-03-10T17:16:41Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -200,8 +199,6 @@ private static ValuesSourceType getLegacyMapping(\n             return CoreValuesSourceType.GEOPOINT;\n         } else if (fieldType instanceof RangeFieldMapper.RangeFieldType) {\n             return CoreValuesSourceType.RANGE;\n-        } else if (indexFieldData instanceof IndexHistogramFieldData) {\n-            return CoreValuesSourceType.HISTOGRAM;", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MjMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390542301", "bodyText": "Correct.  Definitely not for multi/array/top_metrics, and composite shouldn't be able to support it because that would only be possible with a percentiles agg inside composite which will resolve separately (either OSS and fail or XPack and succeed).\nBut... I'm gonna add some tests to verify that. Just in case :)", "author": "polyfractal", "createdAt": "2020-03-10T18:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Njc4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r391186789", "bodyText": "Couldn't find a way to actually test this, since Core can't use the histo field without the xpack plugin, and testing from xpack doesn't make sense since the field and agg are available.\nBut I think that confirms that this is ok to remove\nThe only other user of histo is boxplot which is xpack only too.", "author": "polyfractal", "createdAt": "2020-03-11T18:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NDU0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390484541", "bodyText": "the nittiest of nits: multi-line comments should use /* notation", "author": "not-napoleon", "createdAt": "2020-03-10T17:25:21Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/metrics/AbstractHistoBackedHDRPercentilesAggregator.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.aggregations.metrics;\n+\n+import org.HdrHistogram.DoubleHistogram;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.ArrayUtils;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.ObjectArray;\n+import org.elasticsearch.index.fielddata.HistogramValue;\n+import org.elasticsearch.index.fielddata.HistogramValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.xpack.analytics.aggregations.support.HistogramValuesSource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AbstractHistoBackedHDRPercentilesAggregator extends NumericMetricsAggregator.MultiValue {\n+\n+    private static int indexOfKey(double[] keys, double key) {\n+        return ArrayUtils.binarySearch(keys, key, 0.001);\n+    }\n+\n+    protected final double[] keys;\n+    protected final ValuesSource valuesSource;\n+    protected final DocValueFormat format;\n+    protected ObjectArray<DoubleHistogram> states;\n+    protected final int numberOfSignificantValueDigits;\n+    protected final boolean keyed;\n+\n+    AbstractHistoBackedHDRPercentilesAggregator(String name, ValuesSource valuesSource, SearchContext context, Aggregator parent,\n+                                     double[] keys, int numberOfSignificantValueDigits, boolean keyed, DocValueFormat formatter,\n+                                     List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {\n+        super(name, context, parent, pipelineAggregators, metaData);\n+        this.valuesSource = valuesSource;\n+        this.keyed = keyed;\n+        this.format = formatter;\n+        this.states = context.bigArrays().newObjectArray(1);\n+        this.keys = keys;\n+        this.numberOfSignificantValueDigits = numberOfSignificantValueDigits;\n+    }\n+\n+    @Override\n+    public ScoreMode scoreMode() {\n+        return valuesSource != null && valuesSource.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n+    }\n+\n+    @Override\n+    public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,\n+                                                final LeafBucketCollector sub) throws IOException {\n+        if (valuesSource == null) {\n+            return LeafBucketCollector.NO_OP_COLLECTOR;\n+        }\n+        final BigArrays bigArrays = context.bigArrays();\n+        assert valuesSource instanceof HistogramValuesSource.Histogram;\n+        final HistogramValues values = ((HistogramValuesSource.Histogram)valuesSource).getHistogramValues(ctx);\n+\n+        return new LeafBucketCollectorBase(sub, values) {\n+            @Override\n+            public void collect(int doc, long bucket) throws IOException {\n+                DoubleHistogram state = getExistingOrNewHistogram(bigArrays, bucket);\n+                if (values.advanceExact(doc)) {\n+                    final HistogramValue sketch = values.histogram();\n+                    while (sketch.next()) {\n+                        state.recordValueWithCount(sketch.value(), sketch.count());\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    private DoubleHistogram getExistingOrNewHistogram(final BigArrays bigArrays, long bucket) {\n+        states = bigArrays.grow(states, bucket + 1);\n+        DoubleHistogram state = states.get(bucket);\n+        if (state == null) {\n+            state = new DoubleHistogram(numberOfSignificantValueDigits);\n+            // Set the histogram to autosize so it can resize itself as\n+            // the data range increases. Resize operations should be\n+            // rare as the histogram buckets are exponential (on the top\n+            // level). In the future we could expose the range as an\n+            // option on the request so the histogram can be fixed at\n+            // initialisation and doesn't need resizing.", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDkwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390490909", "bodyText": "Just curious, why did you choose an assert here instead of an if/throw check?  And do you think we should do that for other places we cast ValuesSources?", "author": "not-napoleon", "createdAt": "2020-03-10T17:34:58Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/metrics/AbstractHistoBackedHDRPercentilesAggregator.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.aggregations.metrics;\n+\n+import org.HdrHistogram.DoubleHistogram;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.ArrayUtils;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.ObjectArray;\n+import org.elasticsearch.index.fielddata.HistogramValue;\n+import org.elasticsearch.index.fielddata.HistogramValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.xpack.analytics.aggregations.support.HistogramValuesSource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AbstractHistoBackedHDRPercentilesAggregator extends NumericMetricsAggregator.MultiValue {\n+\n+    private static int indexOfKey(double[] keys, double key) {\n+        return ArrayUtils.binarySearch(keys, key, 0.001);\n+    }\n+\n+    protected final double[] keys;\n+    protected final ValuesSource valuesSource;\n+    protected final DocValueFormat format;\n+    protected ObjectArray<DoubleHistogram> states;\n+    protected final int numberOfSignificantValueDigits;\n+    protected final boolean keyed;\n+\n+    AbstractHistoBackedHDRPercentilesAggregator(String name, ValuesSource valuesSource, SearchContext context, Aggregator parent,\n+                                     double[] keys, int numberOfSignificantValueDigits, boolean keyed, DocValueFormat formatter,\n+                                     List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {\n+        super(name, context, parent, pipelineAggregators, metaData);\n+        this.valuesSource = valuesSource;\n+        this.keyed = keyed;\n+        this.format = formatter;\n+        this.states = context.bigArrays().newObjectArray(1);\n+        this.keys = keys;\n+        this.numberOfSignificantValueDigits = numberOfSignificantValueDigits;\n+    }\n+\n+    @Override\n+    public ScoreMode scoreMode() {\n+        return valuesSource != null && valuesSource.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n+    }\n+\n+    @Override\n+    public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,\n+                                                final LeafBucketCollector sub) throws IOException {\n+        if (valuesSource == null) {\n+            return LeafBucketCollector.NO_OP_COLLECTOR;\n+        }\n+        final BigArrays bigArrays = context.bigArrays();\n+        assert valuesSource instanceof HistogramValuesSource.Histogram;", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MjQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390542476", "bodyText": "Hmm honestly I'm not sure.  Might be a holdover from debugging that I forgot to remove?  It doesn't seem overly useful... if we got here with something other than a histogram we're having a bad day anyway.\nI'd be ++ to remove unless we can think of a valid reason for keeping around", "author": "polyfractal", "createdAt": "2020-03-10T18:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwODY4NA==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390508684", "bodyText": "Why do we need a new AggregatorSupplier here? Shouldn't we just implement the existing one from core?", "author": "not-napoleon", "createdAt": "2020-03-10T18:02:40Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/metrics/AnalyticsPercentilesAggregatorSupplier.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.aggregations.metrics;\n+\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesAggregatorSupplier;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface AnalyticsPercentilesAggregatorSupplier extends PercentilesAggregatorSupplier {", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Mjc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390542756", "bodyText": "\ud83d\udc4d yeah think we can reuse", "author": "polyfractal", "createdAt": "2020-03-10T18:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwODY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMDg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390510863", "bodyText": "Ugh, this is such a mess.  This is all going away in #53198, thank goodness.  I'll try to get that merged today.", "author": "not-napoleon", "createdAt": "2020-03-10T18:05:54Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/support/HistogramValuesSourceType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.aggregations.support;\n+\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexHistogramFieldData;\n+import org.elasticsearch.script.AggregationScript;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationExecutionException;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.FieldContext;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.util.Locale;\n+import java.util.function.LongSupplier;\n+\n+public enum HistogramValuesSourceType implements ValuesSourceType {\n+    HISTOGRAM() {\n+        @Override\n+        public ValuesSource getEmpty() {\n+            // TODO: Is this the correct exception type here?\n+            throw new IllegalArgumentException(\"Can't deal with unmapped HistogramValuesSource type \" + this.value());\n+        }\n+\n+        @Override\n+        public ValuesSource getScript(AggregationScript.LeafFactory script, ValueType scriptValueType) {\n+            throw new AggregationExecutionException(\"value source of type [\" + this.value() + \"] is not supported by scripts\");\n+        }\n+\n+        @Override\n+        public ValuesSource getField(FieldContext fieldContext, AggregationScript.LeafFactory script) {\n+            final IndexFieldData<?> indexFieldData = fieldContext.indexFieldData();\n+\n+            if (!(indexFieldData instanceof IndexHistogramFieldData)) {\n+                throw new IllegalArgumentException(\"Expected histogram type on field [\" + fieldContext.field() +\n+                    \"], but got [\" + fieldContext.fieldType().typeName() + \"]\");\n+            }\n+            return new HistogramValuesSource.Histogram.Fielddata((IndexHistogramFieldData) indexFieldData);\n+        }\n+\n+        @Override\n+        public ValuesSource replaceMissing(ValuesSource valuesSource, Object rawMissing, DocValueFormat docValueFormat, LongSupplier now) {\n+            throw new IllegalArgumentException(\"Can't apply missing values on a \" + valuesSource.getClass());\n+        }\n+    };\n+\n+\n+    @Override\n+    public boolean isCastableTo(ValuesSourceType valuesSourceType) {", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NTAxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390545015", "bodyText": ":)  My thoughts exactly, happy to see this go away soon. With Histo it's not too bad since it's pretty isolated, but I could see these turning into a real nightmare in the future if there are some things that need to be \"castableTo\" across plugins or Core.", "author": "polyfractal", "createdAt": "2020-03-10T19:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMDg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMjAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390512006", "bodyText": "+1 for using an enum here.  I'm actually about to update the documentation on ValuesSourceType to recommend this pattern.  That said, I'd suggest AnalyticsValuesSourceType as the name, in case we want to add another here later.", "author": "not-napoleon", "createdAt": "2020-03-10T18:07:45Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/aggregations/support/HistogramValuesSourceType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.aggregations.support;\n+\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexHistogramFieldData;\n+import org.elasticsearch.script.AggregationScript;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationExecutionException;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.FieldContext;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.util.Locale;\n+import java.util.function.LongSupplier;\n+\n+public enum HistogramValuesSourceType implements ValuesSourceType {", "originalCommit": "29fe8989c7059776de26f69d4702c6a9c0cd2196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NDIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53298#discussion_r390544209", "bodyText": "/cc @csoulios who I chatted with briefly about this.  I guess it comes down to how we want to organize new VSTypes?  E.g. are they grouped by plugin/module (everything in Analytics goes into one enum), or based on functionality (e.g. Rollup has it's own enum, Histo has it's own, etc)?\nProbably doesn't really matter other than being consistent.", "author": "polyfractal", "createdAt": "2020-03-10T19:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMjAwNg=="}], "type": "inlineReview"}, {"oid": "d144aa500b62d5793f95327d234f4e67c1bd391b", "url": "https://github.com/elastic/elasticsearch/commit/d144aa500b62d5793f95327d234f4e67c1bd391b", "message": "review comments", "committedDate": "2020-03-11T18:40:51Z", "type": "commit"}, {"oid": "665566f696606f9397f8dd0316729af3d404a030", "url": "https://github.com/elastic/elasticsearch/commit/665566f696606f9397f8dd0316729af3d404a030", "message": "Merge branch 'feature/extensible-values-source' into vs_move_histo_vstype", "committedDate": "2020-03-12T18:36:11Z", "type": "commit"}, {"oid": "7d511c4600ce45a504dccc43220807bf27287750", "url": "https://github.com/elastic/elasticsearch/commit/7d511c4600ce45a504dccc43220807bf27287750", "message": "Remove outdated CoreValuesSourceType.HISTOGRAM", "committedDate": "2020-03-12T18:44:42Z", "type": "commit"}]}