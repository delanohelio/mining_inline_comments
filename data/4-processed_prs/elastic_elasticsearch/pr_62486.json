{"pr_number": 62486, "pr_title": "[ML] Remove top level importance from classification inference results", "pr_createdAt": "2020-09-16T16:23:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62486", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxNTMzMg==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r489615332", "bodyText": "couldn't this blow up? we need to somehow require that importance here is not null.\nI think the way to do that is to run\n            classImportance.stream().mapToDouble(ClassImportance::getImportance).map(Math::abs).sum()\n\nif it is null. If classImportance is null && importance is null, then maybe just return a 0.0", "author": "benwtrent", "createdAt": "2020-09-16T17:48:47Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -104,22 +109,28 @@ public String getFeatureName() {\n \n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n-        out.writeString(this.featureName);\n-        out.writeDouble(this.importance);\n-        out.writeBoolean(this.classImportance != null);\n-        if (this.classImportance != null) {\n+        out.writeString(featureName);\n+        if (out.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            out.writeOptionalDouble(importance);\n+        } else {\n+            out.writeDouble(importance);", "originalCommit": "ea18478d525d76b1ba0433eac40da06aacfee06b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4NDE2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r490084163", "bodyText": "Indeed!", "author": "dimitris-athanasiou", "createdAt": "2020-09-17T08:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxNTMzMg=="}], "type": "inlineReview"}, {"oid": "606920b93cbc47ee5c3954edbac9a4907679e508", "url": "https://github.com/elastic/elasticsearch/commit/606920b93cbc47ee5c3954edbac9a4907679e508", "message": "Handle serialization of importance when null", "committedDate": "2020-09-17T09:09:26Z", "type": "forcePushed"}, {"oid": "c613206cc1b6ffcb395399a223e8bb1b0742eee5", "url": "https://github.com/elastic/elasticsearch/commit/c613206cc1b6ffcb395399a223e8bb1b0742eee5", "message": "[ML] Remove top level importance from classification inference results\n\nAs we have decided top level importance for classification is not useful,\nit has been removed from the results from the training job. This commit\nalso removes them from inference.", "committedDate": "2020-09-23T14:37:50Z", "type": "commit"}, {"oid": "765592484e03ccd1d9dc9de8bd39fc31800011b1", "url": "https://github.com/elastic/elasticsearch/commit/765592484e03ccd1d9dc9de8bd39fc31800011b1", "message": "Handle serialization of importance when null", "committedDate": "2020-09-23T14:37:50Z", "type": "commit"}, {"oid": "7a71865e057d871ee81b32a1bf2e8f175fa6b843", "url": "https://github.com/elastic/elasticsearch/commit/7a71865e057d871ee81b32a1bf2e8f175fa6b843", "message": "Split feature importance to separate classes per analysis", "committedDate": "2020-09-24T15:14:32Z", "type": "commit"}, {"oid": "7a71865e057d871ee81b32a1bf2e8f175fa6b843", "url": "https://github.com/elastic/elasticsearch/commit/7a71865e057d871ee81b32a1bf2e8f175fa6b843", "message": "Split feature importance to separate classes per analysis", "committedDate": "2020-09-24T15:14:32Z", "type": "forcePushed"}, {"oid": "8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "url": "https://github.com/elastic/elasticsearch/commit/8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "message": "Also reuse toMap in ClassImportance.toXContent", "committedDate": "2020-09-24T15:20:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r494433204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.classes.0.class_name\", Double.class), equalTo(\"class_a\"));\n          \n          \n            \n                    assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.classes.0.class_name\", String.class), equalTo(\"class_a\"));", "author": "benwtrent", "createdAt": "2020-09-24T15:58:17Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessorTests.java", "diffHunk": "@@ -153,10 +156,12 @@ public void testMutateDocumentClassificationFeatureInfluence() {\n \n         assertThat(document.getFieldValue(\"ml.my_processor.model_id\", String.class), equalTo(\"classification_model\"));\n         assertThat(document.getFieldValue(\"ml.my_processor.predicted_value\", String.class), equalTo(\"foo\"));\n-        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.importance\", Double.class), equalTo(-42.0));\n         assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.feature_name\", String.class), equalTo(\"feature_2\"));\n-        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.importance\", Double.class), equalTo(1.13));\n+        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.classes.0.class_name\", Double.class), equalTo(\"class_a\"));", "originalCommit": "8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzMzMA==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r494433330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.classes.0.class_name\", Double.class), equalTo(\"class_b\"));\n          \n          \n            \n                    assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.classes.0.class_name\", String.class), equalTo(\"class_b\"));", "author": "benwtrent", "createdAt": "2020-09-24T15:58:29Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessorTests.java", "diffHunk": "@@ -153,10 +156,12 @@ public void testMutateDocumentClassificationFeatureInfluence() {\n \n         assertThat(document.getFieldValue(\"ml.my_processor.model_id\", String.class), equalTo(\"classification_model\"));\n         assertThat(document.getFieldValue(\"ml.my_processor.predicted_value\", String.class), equalTo(\"foo\"));\n-        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.importance\", Double.class), equalTo(-42.0));\n         assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.feature_name\", String.class), equalTo(\"feature_2\"));\n-        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.importance\", Double.class), equalTo(1.13));\n+        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.classes.0.class_name\", Double.class), equalTo(\"class_a\"));\n+        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.0.classes.0.importance\", Double.class), equalTo(-42.0));\n         assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.feature_name\", String.class), equalTo(\"feature_1\"));\n+        assertThat(document.getFieldValue(\"ml.my_processor.feature_importance.1.classes.0.class_name\", Double.class), equalTo(\"class_b\"));", "originalCommit": "8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNjk2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r494436969", "bodyText": "I don't think this is nullable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable", "author": "benwtrent", "createdAt": "2020-09-24T16:03:34Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/ClassificationFeatureImportance.java", "diffHunk": "@@ -26,157 +26,102 @@\n import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n \n-public class FeatureImportance implements Writeable, ToXContentObject {\n+public class ClassificationFeatureImportance extends AbstractFeatureImportance {\n \n     private final List<ClassImportance> classImportance;\n-    private final double importance;\n     private final String featureName;\n-    static final String IMPORTANCE = \"importance\";\n+\n     static final String FEATURE_NAME = \"feature_name\";\n     static final String CLASSES = \"classes\";\n \n-    public static FeatureImportance forRegression(String featureName, double importance) {\n-        return new FeatureImportance(featureName, importance, null);\n-    }\n-\n-    public static FeatureImportance forBinaryClassification(String featureName, double importance, List<ClassImportance> classImportance) {\n-        return new FeatureImportance(featureName,\n-            importance,\n-            classImportance);\n-    }\n-\n-    public static FeatureImportance forClassification(String featureName, List<ClassImportance> classImportance) {\n-        return new FeatureImportance(featureName,\n-            classImportance.stream().mapToDouble(ClassImportance::getImportance).map(Math::abs).sum(),\n-            classImportance);\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n-    private static final ConstructingObjectParser<FeatureImportance, Void> PARSER =\n-        new ConstructingObjectParser<>(\"feature_importance\",\n-            a -> new FeatureImportance((String) a[0], (Double) a[1], (List<ClassImportance>) a[2])\n+    private static final ConstructingObjectParser<ClassificationFeatureImportance, Void> PARSER =\n+        new ConstructingObjectParser<>(\"classification_feature_importance\",\n+            a -> new ClassificationFeatureImportance((String) a[0], (List<ClassImportance>) a[1])\n         );\n \n     static {\n-        PARSER.declareString(constructorArg(), new ParseField(FeatureImportance.FEATURE_NAME));\n-        PARSER.declareDouble(constructorArg(), new ParseField(FeatureImportance.IMPORTANCE));\n+        PARSER.declareString(constructorArg(), new ParseField(ClassificationFeatureImportance.FEATURE_NAME));\n         PARSER.declareObjectArray(optionalConstructorArg(),\n             (p, c) -> ClassImportance.fromXContent(p),\n-            new ParseField(FeatureImportance.CLASSES));\n+            new ParseField(ClassificationFeatureImportance.CLASSES));\n     }\n \n-    public static FeatureImportance fromXContent(XContentParser parser) {\n+    public static ClassificationFeatureImportance fromXContent(XContentParser parser) {\n         return PARSER.apply(parser, null);\n     }\n \n-    FeatureImportance(String featureName, double importance, List<ClassImportance> classImportance) {\n+    public ClassificationFeatureImportance(String featureName, List<ClassImportance> classImportance) {\n         this.featureName = Objects.requireNonNull(featureName);\n-        this.importance = importance;\n-        this.classImportance = classImportance == null ? null : Collections.unmodifiableList(classImportance);\n+        this.classImportance = classImportance == null ? Collections.emptyList() : Collections.unmodifiableList(classImportance);\n     }\n \n-    public FeatureImportance(StreamInput in) throws IOException {\n+    public ClassificationFeatureImportance(StreamInput in) throws IOException {\n         this.featureName = in.readString();\n-        this.importance = in.readDouble();\n-        if (in.readBoolean()) {\n-            if (in.getVersion().before(Version.V_7_10_0)) {\n-                Map<String, Double> classImportance = in.readMap(StreamInput::readString, StreamInput::readDouble);\n-                this.classImportance = ClassImportance.fromMap(classImportance);\n-            } else {\n-                this.classImportance = in.readList(ClassImportance::new);\n-            }\n-        } else {\n-            this.classImportance = null;\n-        }\n+        this.classImportance = in.readList(ClassImportance::new);\n     }\n \n+    @Nullable", "originalCommit": "8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNzMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62486#discussion_r494437301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.elasticsearch.common.Nullable;", "author": "benwtrent", "createdAt": "2020-09-24T16:04:05Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/ClassificationFeatureImportance.java", "diffHunk": "@@ -5,7 +5,7 @@\n  */\n package org.elasticsearch.xpack.core.ml.inference.results;\n \n-import org.elasticsearch.Version;\n+import org.elasticsearch.common.Nullable;", "originalCommit": "8bdb6db72b60b906298f4efd1c6e6cc7269953e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24452760de83a75ad9ccd07d9b661c4d76359232", "url": "https://github.com/elastic/elasticsearch/commit/24452760de83a75ad9ccd07d9b661c4d76359232", "message": "Address review comments", "committedDate": "2020-09-26T11:45:27Z", "type": "commit"}]}