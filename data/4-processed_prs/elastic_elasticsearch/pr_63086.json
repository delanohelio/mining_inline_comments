{"pr_number": 63086, "pr_title": "DOCS: general overview of data tiers and roles", "pr_createdAt": "2020-09-30T16:15:01Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63086", "timeline": [{"oid": "2659c13c4ccb5dc70308ccb1729ab1c5817238f6", "url": "https://github.com/elastic/elasticsearch/commit/2659c13c4ccb5dc70308ccb1729ab1c5817238f6", "message": "DOCS: general overview of data tiers and roles", "committedDate": "2020-09-30T16:12:01Z", "type": "commit"}, {"oid": "8dd4a372978387babc54e4a720f40bf39e974d4d", "url": "https://github.com/elastic/elasticsearch/commit/8dd4a372978387babc54e4a720f40bf39e974d4d", "message": "Mention the data role", "committedDate": "2020-09-30T16:38:45Z", "type": "commit"}, {"oid": "17eb22ecd93997f4ce2e85b4943844b6c8f8867a", "url": "https://github.com/elastic/elasticsearch/commit/17eb22ecd93997f4ce2e85b4943844b6c8f8867a", "message": "Add _tier attribute filtering documentation", "committedDate": "2020-09-30T16:41:56Z", "type": "commit"}, {"oid": "856da8bfa577ce2d32a86c09b82a64e6230f1d13", "url": "https://github.com/elastic/elasticsearch/commit/856da8bfa577ce2d32a86c09b82a64e6230f1d13", "message": "Document index level data tier routing", "committedDate": "2020-09-30T17:20:02Z", "type": "commit"}, {"oid": "6c56db122b5f3d25b9021eccf1f4fb8da8cc5705", "url": "https://github.com/elastic/elasticsearch/commit/6c56db122b5f3d25b9021eccf1f4fb8da8cc5705", "message": "Cluster allocation attribute correction", "committedDate": "2020-09-30T17:28:28Z", "type": "commit"}, {"oid": "3a6107a2e1f8c8905b18a382879016155c1dab56", "url": "https://github.com/elastic/elasticsearch/commit/3a6107a2e1f8c8905b18a382879016155c1dab56", "message": "Add more information regarding index allocation", "committedDate": "2020-09-30T17:54:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzM2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497757367", "bodyText": "Perhaps add that these are set via the node.roles setting?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            node roles:\n          \n          \n            \n            node roles, as set with the `node.roles` setting in elasticsearch.yml:", "author": "dakrone", "createdAt": "2020-09-30T19:43:35Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,54 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles:", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1ODY1OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497758658", "bodyText": "The second sentence is a little awkward to me, perhaps:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: `_tier` filtering is based on <<modules-node, node>> roles. There're only\n          \n          \n            \n            a subset of roles that are <<modules-tiers, data tier>> roles, but the generic\n          \n          \n            \n            <<data-node, data role>> will match any tier filtering.\n          \n          \n            \n            NOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\n          \n          \n            \n            a subset of roles are <<modules-tiers, data tier>> roles, and the generic\n          \n          \n            \n            <<data-node, data role>> will match any tier filtering.", "author": "dakrone", "createdAt": "2020-09-30T19:46:03Z", "path": "docs/reference/index-modules/allocation/filtering.asciidoc", "diffHunk": "@@ -102,6 +102,12 @@ The index allocation settings support the following built-in attributes:\n `_ip`::         Match either `_host_ip` or `_publish_ip`\n `_host`::       Match nodes by hostname\n `_id`::         Match nodes by node id\n+`_tier`::       Match nodes by the node's <<modules-tiers, data tier>> role.\n+                For more details see <<data-tier-shard-filtering, data tier allocation filtering>>\n+\n+NOTE: `_tier` filtering is based on <<modules-node, node>> roles. There're only\n+a subset of roles that are <<modules-tiers, data tier>> roles, but the generic\n+<<data-node, data role>> will match any tier filtering.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1OTA0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497759044", "bodyText": "Same comment as above about the awkward sentence here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: `_tier` filtering is based on <<modules-node, node>> roles. There're only\n          \n          \n            \n            NOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\n          \n          \n            \n            a subset of roles are <<modules-tiers, data tier>> roles, and the generic\n          \n          \n            \n            <<data-node, data role>> will match any tier filtering.", "author": "dakrone", "createdAt": "2020-09-30T19:46:48Z", "path": "docs/reference/modules/cluster/allocation_filtering.asciidoc", "diffHunk": "@@ -55,7 +55,11 @@ The cluster allocation settings support the following built-in attributes:\n `_ip`::         Match either `_host_ip` or `_publish_ip`\n `_host`::       Match nodes by hostname\n `_id`::         Match nodes by node id\n+`_tier`::       Match nodes by the node's <<modules-tiers, data tier>> role\n \n+NOTE: `_tier` filtering is based on <<modules-node, node>> roles. There're only", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1OTc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497759782", "bodyText": "(Only my suggestion, not necessarily a requirement)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Common data lifecycle management patterns revolve around transitioning the indices\n          \n          \n            \n            through multiple collections of nodes with different hardware characteristics in order\n          \n          \n            \n            to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n          \n          \n            \n            of a tiered hardware architecture is not new in {es}.\n          \n          \n            \n            Common data lifecycle management patterns revolve around transitioning indices\n          \n          \n            \n            through multiple collections of nodes with different hardware characteristics in order\n          \n          \n            \n            to fulfil evolving CRUD, search, and aggregation needs as indices age.", "author": "dakrone", "createdAt": "2020-09-30T19:48:06Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MDMyMw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497760323", "bodyText": "The reason I removed the comment about the \"not new\" section is I think we could/should explicitly add a section about migrating attribute based transitioning to data tier transitioning, perhaps elsewhere or as a blog post?", "author": "dakrone", "createdAt": "2020-09-30T19:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1OTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyOTQyNw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r498129427", "bodyText": "That's a great point Lee. I believe the ILM section should advise on how to migrate. That said, I think mentioning/referencing the existing ILM tiered options/methods here is a nice bridge for that (with links going back and forth between the ILM guide and this page).\nI'm happy to drop it but I find it a nice bridge towards ILM and the tiered options it enables (with and without data tiers)", "author": "andreidan", "createdAt": "2020-10-01T10:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1OTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNTg0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r498825844", "bodyText": "I've reworded the tiers definition to emphasise things like replicas etc should be configured and don't come as guarantees. Also reworded the data retention a bit to be a guideline.\nLet me know if we should reword /remove more.", "author": "andreidan", "createdAt": "2020-10-02T13:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1OTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MDQ2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497760467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n          \n          \n            \n            <<index-lifecycle-management, Index Lifecycle Management>> is instrumental in", "author": "dakrone", "createdAt": "2020-09-30T19:49:28Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MDYxNA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497760614", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n          \n          \n            \n            <<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common", "author": "dakrone", "createdAt": "2020-09-30T19:49:46Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MTUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497761535", "bodyText": "I would rephrase this so that it is more of a present tense statement, so rather than \"in the past we didn't have this\" it can be more like \"data tiers allows us to do xyz\".\nPerhaps something like:\n\"Formalized data tiers in ES allow configuration of the lifecycle and location of data in a hot/warm/cold topology without requiring the use of custom node attributes\"", "author": "dakrone", "createdAt": "2020-09-30T19:51:31Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MjAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497762006", "bodyText": "Things should be in present tense since it would be a little strange to read this doc two years from now where it sounds like data tiers have only recently been introduced\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n          \n          \n            \n            A data tier is a collection of nodes with the same role. Data tiers are an integrated", "author": "dakrone", "createdAt": "2020-09-30T19:52:24Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MjIyNA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497762224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each tier is formalising specific characteristics and data behaviours.\n          \n          \n            \n            Each tier formalises specific characteristics and data behaviours.", "author": "dakrone", "createdAt": "2020-09-30T19:52:52Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MjQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497762444", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<data-node, data>> role we will treat the node as if it has all of the tier\n          \n          \n            \n            <<data-node, data>> role we treat the node as if it has all of the tier", "author": "dakrone", "createdAt": "2020-09-30T19:53:14Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzM2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497763361", "bodyText": "I'm not sure exactly how much detail we want to go into with the difference between the hardware characteristics, especially since there are no constraints for a user for what type of hardware they can use for each phase.\nThe specifics feel like they fit more into the Cloud docs (since they have actual hardware), leaving them out for this particular section", "author": "dakrone", "createdAt": "2020-09-30T19:55:01Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MTE1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r498171155", "bodyText": "Thanks Lee, I struggled with this a bit and thought it's an important motivation for data tiers and should be included in the docs in order to illustrate the value and a way to reason about tiers.\nI understand your concerns but I do wonder if this kind of information would still have a place in our documentation in the form or recommendations/vision/purpose for each tier? (and underline the users can still place whatever nodes they want in each tier)\nI'm otherwise a bit confused as to what sort of information should we provide for each tier, besides that it's a set of nodes with a particular role.", "author": "andreidan", "createdAt": "2020-10-01T11:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NDI4NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497764284", "bodyText": "Same comment here as above, I think we might be getting a bit too tight in our definitions of hardware.\nI'm also ware of mentioning replicas, because I don't want a user to draw the conclusion that indices in this tier will automatically use one or more replicas, since in reality we'll use whatever they set", "author": "dakrone", "createdAt": "2020-09-30T19:56:46Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NDg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497764863", "bodyText": "I think this tradeoff (and the hardware characteristics, as I mentioned above) fits more in the Cloud docs than the ES docs", "author": "dakrone", "createdAt": "2020-09-30T19:57:52Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast, lower cost tier, that still allows data updates. Data within this\n+tier is retained for weeks and the indices still have one or more replicas.\n+\n+The tradeoff when moving data from the Hot to Warm is search and ingest speed for costs.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NTAwMg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497765002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These tier features offer a huge opprotunity to make major cost savings. Data withing this tier\n          \n          \n            \n            These tier features offer a huge opportunity to make major cost savings. Data within this tier", "author": "dakrone", "createdAt": "2020-09-30T19:58:09Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast, lower cost tier, that still allows data updates. Data within this\n+tier is retained for weeks and the indices still have one or more replicas.\n+\n+The tradeoff when moving data from the Hot to Warm is search and ingest speed for costs.\n+\n+[[Cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a reponsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, with zero replicas and backed by a <<ilm-searchable-snapshot, snapshot>>.\n+These tier features offer a huge opprotunity to make major cost savings. Data withing this tier", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NTQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497765480", "bodyText": "I definitely think this sentence should not be here, as it makes it sound like all of this happens automatically when data is moved to the cold tier", "author": "dakrone", "createdAt": "2020-09-30T19:58:59Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast, lower cost tier, that still allows data updates. Data within this\n+tier is retained for weeks and the indices still have one or more replicas.\n+\n+The tradeoff when moving data from the Hot to Warm is search and ingest speed for costs.\n+\n+[[Cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a reponsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, with zero replicas and backed by a <<ilm-searchable-snapshot, snapshot>>.\n+These tier features offer a huge opprotunity to make major cost savings. Data withing this tier\n+is retained for months and the indices have zero replicas as they are backed by a searchable\n+snapshot.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NjM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497766364", "bodyText": "I think we get into too much detail about performance characteristics here. Instead I'd rather have a blurb about exactly what setting is set by default (index.routing.allocation.include._tier_preference) and how to unset it or override it as mentioned below", "author": "dakrone", "createdAt": "2020-09-30T20:00:36Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast, lower cost tier, that still allows data updates. Data within this\n+tier is retained for weeks and the indices still have one or more replicas.\n+\n+The tradeoff when moving data from the Hot to Warm is search and ingest speed for costs.\n+\n+[[Cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a reponsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, with zero replicas and backed by a <<ilm-searchable-snapshot, snapshot>>.\n+These tier features offer a huge opprotunity to make major cost savings. Data withing this tier\n+is retained for months and the indices have zero replicas as they are backed by a searchable\n+snapshot.\n+\n+The tradeoff when moving data from Warm to Cold is writability for costs, with the search performance\n+remaining the same as in the Warm tier.\n+\n+[[data-tier-allocation]]\n+=== Data tier index allocation\n+\n+When an index is created {es} will automatically allocate the index to the <<content-tier, Content tier>>\n+if the index is not part of a <<data-streams, data stream> or to the <<hot-tier, Hot tier>> if the index\n+is part of a <<data-streams, data stream>>. The user created content will initially be allocated to the\n+Content tier which is designed and optimised for this type of data. Timeseries data (ie. data streams)\n+will initially be allocated to the Hot tier which offers high performance and is capable of efficiently\n+ingesting large amounts of machine data (ie. logs, metrics) while also offering high query performance.", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NjcwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497766701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<index-lifecycle-management, Index Lifecycle Management>> is automating the transition of the managed\n          \n          \n            \n            <<index-lifecycle-management, Index Lifecycle Management>> automates the transition of managed", "author": "dakrone", "createdAt": "2020-09-30T20:01:16Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,104 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> was instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+The <<overview-index-lifecycle-management, hot-warm-cold>> architectures are common\n+for timeseries data such as logging and metrics. However without a formalised `tier`\n+concept in {es} the hot-warm-cold architecture implementation was based on user specified\n+node attributes used in conjunction with <<shard-allocation-awareness, shard allocation awareness>>.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are now an integrated\n+solution offering better support for optimising cost and improving performance.\n+Each tier is formalising specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we will treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content will prioritise high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+will prioritise high IO.\n+The content tier is a fast, higher cost, tier. The content data has very long data retention\n+characteristics and from a resiliency perspective the indices in this tier use one or more\n+replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier is fast both for reads and writes,\n+higher cost as it requires more hardware resources such as SSD drives. Data within this tier\n+has retention characteristics that span between days and weeks. From a resiliency perspective\n+the indices in this tier use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast, lower cost tier, that still allows data updates. Data within this\n+tier is retained for weeks and the indices still have one or more replicas.\n+\n+The tradeoff when moving data from the Hot to Warm is search and ingest speed for costs.\n+\n+[[Cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a reponsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, with zero replicas and backed by a <<ilm-searchable-snapshot, snapshot>>.\n+These tier features offer a huge opprotunity to make major cost savings. Data withing this tier\n+is retained for months and the indices have zero replicas as they are backed by a searchable\n+snapshot.\n+\n+The tradeoff when moving data from Warm to Cold is writability for costs, with the search performance\n+remaining the same as in the Warm tier.\n+\n+[[data-tier-allocation]]\n+=== Data tier index allocation\n+\n+When an index is created {es} will automatically allocate the index to the <<content-tier, Content tier>>\n+if the index is not part of a <<data-streams, data stream> or to the <<hot-tier, Hot tier>> if the index\n+is part of a <<data-streams, data stream>>. The user created content will initially be allocated to the\n+Content tier which is designed and optimised for this type of data. Timeseries data (ie. data streams)\n+will initially be allocated to the Hot tier which offers high performance and is capable of efficiently\n+ingesting large amounts of machine data (ie. logs, metrics) while also offering high query performance.\n+\n+These heuristics can be overridden by specifying any <<shard-allocation-filtering, shard allocation filtering>>\n+settings in the create index request or index template that matches the new index.\n+\n+[[data-tier-migration]]\n+=== Data tier index migration\n+\n+<<index-lifecycle-management, Index Lifecycle Management>> is automating the transition of the managed", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2Njk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497766957", "bodyText": "We'll link to the migrate action here once we have ILM documentation for it", "author": "dakrone", "createdAt": "2020-09-30T20:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NjcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NzIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r497767205", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `data_warm` or `data_cold`. Nodes could be configured to fulfil one or multiple\n          \n          \n            \n            `data_warm` or `data_cold`. Nodes can be configured to fulfill one or multiple", "author": "dakrone", "createdAt": "2020-09-30T20:02:14Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -44,7 +48,10 @@ A node that has the `master` role (default), which makes it eligible to be\n <<data-node,Data node>>::\n \n A node that has the `data` role (default). Data nodes hold data and perform data\n-related operations such as CRUD, search, and aggregations.\n+related operations such as CRUD, search, and aggregations. The `data` role fulfils\n+the role of any of the more specialised data nodes `data_content`,`data_hot`,\n+`data_warm` or `data_cold`. Nodes could be configured to fulfil one or multiple", "originalCommit": "3a6107a2e1f8c8905b18a382879016155c1dab56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19411eee25a283496e69e75cec2cdca45111f7bf", "url": "https://github.com/elastic/elasticsearch/commit/19411eee25a283496e69e75cec2cdca45111f7bf", "message": "Apply a batch of suggestions\n\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-10-01T10:07:37Z", "type": "commit"}, {"oid": "adce7081cb9662825ef731ddd0722538c02ef714", "url": "https://github.com/elastic/elasticsearch/commit/adce7081cb9662825ef731ddd0722538c02ef714", "message": "Reword", "committedDate": "2020-10-01T10:49:13Z", "type": "commit"}, {"oid": "b2c5cc5f17c15fe01c3ccdd832f730995d3b33d1", "url": "https://github.com/elastic/elasticsearch/commit/b2c5cc5f17c15fe01c3ccdd832f730995d3b33d1", "message": "Remove tradeoffs mentions", "committedDate": "2020-10-01T10:50:17Z", "type": "commit"}, {"oid": "b12ad0dc10a0869a3c3da983c2cb7a586967eddf", "url": "https://github.com/elastic/elasticsearch/commit/b12ad0dc10a0869a3c3da983c2cb7a586967eddf", "message": "Reword new index allocation to tiers", "committedDate": "2020-10-01T11:34:28Z", "type": "commit"}, {"oid": "102d2003388990ceffa228714c842e6dd661eac0", "url": "https://github.com/elastic/elasticsearch/commit/102d2003388990ceffa228714c842e6dd661eac0", "message": "Merge branch 'master' into doc-data-tiers", "committedDate": "2020-10-02T09:09:27Z", "type": "commit"}, {"oid": "618afbd602c383aa3044ca1c60395a6d99785537", "url": "https://github.com/elastic/elasticsearch/commit/618afbd602c383aa3044ca1c60395a6d99785537", "message": "Document the migrate ILM action.", "committedDate": "2020-10-02T11:45:28Z", "type": "commit"}, {"oid": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "url": "https://github.com/elastic/elasticsearch/commit/91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "message": "Reword tiers", "committedDate": "2020-10-02T13:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0ODU0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499048544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n          \n          \n            \n            to the current phase.\n          \n          \n            \n            Moves the index to the <<modules-tiers, data tier>> that corresponds\n          \n          \n            \n            to the current phase by updating the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            index setting. \n          \n          \n            \n            \n          \n          \n            \n            {ilm-init} automatically injects the migrate action in the warm and cold\n          \n          \n            \n            phases if no allocation options are specified with the <<ilm-allocate, allocate>> action. If you specify an allocate action that only modifies the number of index\n          \n          \n            \n            replicas, {ilm-init} reduces the number of replicas before migrating the index.\n          \n          \n            \n            \n          \n          \n            \n            To prevent automatic migration without specifying allocation options, \n          \n          \n            \n            you can explicitly include the migrate action and set the enabled option to`false`.", "author": "debadair", "createdAt": "2020-10-02T21:01:24Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MTA1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499051051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `migrate` action is executed in the Warm phase, the\n          \n          \n            \n            <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            index setting will be configured to `data_warm, data_hot`, targeting the\n          \n          \n            \n            <<warm-tier, warm tier>> if it is available or otherwise falling back to the\n          \n          \n            \n            <<hot-tier, hot tier>>.\n          \n          \n            \n            In the warm phase, the `migrate` action sets <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            to `data_warm, data_hot`. This moves the index to nodes in the\n          \n          \n            \n            <<warm-tier, warm tier>>. If there are no nodes in the warm tier,  it falls back to the\n          \n          \n            \n            <<hot-tier, hot tier>>.", "author": "debadair", "createdAt": "2020-10-02T21:07:54Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499052638", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `migrate` action is executed in the Cold phase, the\n          \n          \n            \n            <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n          \n          \n            \n            <<cold-tier, cold tier>> if it is available or otherwise falling back to the\n          \n          \n            \n            <<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n          \n          \n            \n            In the cold phase, the `migrate` action sets\n          \n          \n            \n            <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n          \n          \n            \n            to `data_cold, data_warm, data_hot`. This moves the index to nodes in the\n          \n          \n            \n            <<cold-tier, cold tier>>. If there are no nodes in the cold tier, it falls back to the\n          \n          \n            \n            <<warm-tier, warm>> tier, or the <<hot-tier, hot>> tier if there are no warm nodes available.", "author": "debadair", "createdAt": "2020-10-02T21:12:31Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MzQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499053468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The migrate action is not allowed in the hot phase.\n          \n          \n            \n            The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n          \n          \n            \n            unless it's configured manually or via <<indices-templates, index templates>>\n          \n          \n            \n            The migrate action is not allowed in the hot phase.\n          \n          \n            \n            The initial index allocation is performed <<data-tier-allocation, automatically>>,\n          \n          \n            \n            and can be configured manually or via <<indices-templates, index templates>>.", "author": "debadair", "createdAt": "2020-10-02T21:15:03Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NDU3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499054572", "bodyText": "I don't think this is necessary--it just duplicates what the option description says.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can optionally disable the `migrate` action using the\n          \n          \n            \n            `enabled` option.\n          \n          \n            \n            An empty migrate action is enabled.", "author": "debadair", "createdAt": "2020-10-02T21:18:11Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTc1NA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499055754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Controls whether the index migration to data tiers is enabled or not.\n          \n          \n            \n            Defaults to `true`.\n          \n          \n            \n            Controls whether {ilm-init} automatically migrates the index during this phase.\n          \n          \n            \n            Defaults to `true`.", "author": "debadair", "createdAt": "2020-10-02T21:21:38Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NjI4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499056285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to the current ILM phase.\n          \n          \n            \n            to the current {ilm-init} phase.", "author": "debadair", "createdAt": "2020-10-02T21:23:11Z", "path": "docs/reference/ilm/ilm-actions.asciidoc", "diffHunk": "@@ -18,6 +18,10 @@ Makes the index read-only.\n [[ilm-freeze-action]]<<ilm-freeze,Freeze>>::\n Freeze the index to minimize its memory footprint.\n \n+[[ilm-migrate-action]]<<ilm-migrate,Migrate>>::\n+Move the index shards to the <<modules-tiers, data tier>> corresponding\n+to the current ILM phase.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjY2MA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499066660", "bodyText": "I'd incorporate this information into the first section (see suggestions).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[ilm-automatic-index-migration]]\n          \n          \n            \n            ==== Automatic index migration\n          \n          \n            \n            \n          \n          \n            \n            ILM will automatically inject the migrate action in the warm and cold\n          \n          \n            \n            phases unless the phase contains an <<ilm-allocate, allocate action>> with\n          \n          \n            \n            allocation rules defined or the migrate action is defined explicitly.\n          \n          \n            \n            \n          \n          \n            \n            Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n          \n          \n            \n            replicas will not prevent the migrate action from automatically being\n          \n          \n            \n            injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n          \n          \n            \n            executes before the migate action providing the ability to reduce the number\n          \n          \n            \n            of replicas before migrating the index to a different data tier.\n          \n          \n            \n            \n          \n          \n            \n            Manually specifying an enabled migrate action and an allocate action\n          \n          \n            \n            that defines allocation rules is prohibited. If modifying the allocation\n          \n          \n            \n            rules via the <<ilm-allocate, allocate action>> is desired define the\n          \n          \n            \n            migrate action with the `enabled` flag set to `false`.", "author": "debadair", "createdAt": "2020-10-02T21:56:24Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.\n+\n+[[ilm-automatic-index-migration]]\n+==== Automatic index migration\n+\n+ILM will automatically inject the migrate action in the warm and cold\n+phases unless the phase contains an <<ilm-allocate, allocate action>> with\n+allocation rules defined or the migrate action is defined explicitly.\n+\n+Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n+replicas will not prevent the migrate action from automatically being\n+injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n+executes before the migate action providing the ability to reduce the number\n+of replicas before migrating the index to a different data tier.\n+\n+Manually specifying an enabled migrate action and an allocate action\n+that defines allocation rules is prohibited. If modifying the allocation\n+rules via the <<ilm-allocate, allocate action>> is desired define the\n+migrate action with the `enabled` flag set to `false`.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2OTE1OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499069158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The migrate action in the following policy is enabled and\n          \n          \n            \n            the number of replicas for the index is manipulated using\n          \n          \n            \n            the allocate action.\n          \n          \n            \n            In the following policy, the allocate action is specified to reduce the number of replicas before {ilm-init} migrates the index to warm nodes.", "author": "debadair", "createdAt": "2020-10-02T22:05:14Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.\n+\n+[[ilm-automatic-index-migration]]\n+==== Automatic index migration\n+\n+ILM will automatically inject the migrate action in the warm and cold\n+phases unless the phase contains an <<ilm-allocate, allocate action>> with\n+allocation rules defined or the migrate action is defined explicitly.\n+\n+Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n+replicas will not prevent the migrate action from automatically being\n+injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n+executes before the migate action providing the ability to reduce the number\n+of replicas before migrating the index to a different data tier.\n+\n+Manually specifying an enabled migrate action and an allocate action\n+that defines allocation rules is prohibited. If modifying the allocation\n+rules via the <<ilm-allocate, allocate action>> is desired define the\n+migrate action with the `enabled` flag set to `false`.\n+\n+[[ilm-enabled-migrate-ex]]\n+==== Example\n+\n+The migrate action in the following policy is enabled and\n+the number of replicas for the index is manipulated using\n+the allocate action.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2OTk2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499069963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: ILM would've injected the migrate action automatically\n          \n          \n            \n            in the following policy even if it wasn't manually defined.\n          \n          \n            \n            NOTE: Explicitly specifying the migrate action is not required--{ilm-init} automatically performs the migrate action unless you specify allocation options or disable migration.", "author": "debadair", "createdAt": "2020-10-02T22:08:01Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.\n+\n+[[ilm-automatic-index-migration]]\n+==== Automatic index migration\n+\n+ILM will automatically inject the migrate action in the warm and cold\n+phases unless the phase contains an <<ilm-allocate, allocate action>> with\n+allocation rules defined or the migrate action is defined explicitly.\n+\n+Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n+replicas will not prevent the migrate action from automatically being\n+injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n+executes before the migate action providing the ability to reduce the number\n+of replicas before migrating the index to a different data tier.\n+\n+Manually specifying an enabled migrate action and an allocate action\n+that defines allocation rules is prohibited. If modifying the allocation\n+rules via the <<ilm-allocate, allocate action>> is desired define the\n+migrate action with the `enabled` flag set to `false`.\n+\n+[[ilm-enabled-migrate-ex]]\n+==== Example\n+\n+The migrate action in the following policy is enabled and\n+the number of replicas for the index is manipulated using\n+the allocate action.\n+\n+NOTE: ILM would've injected the migrate action automatically\n+in the following policy even if it wasn't manually defined.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTE5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499071196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[ilm-disabled-migrate-ex]]\n          \n          \n            \n            ==== Disabled migrate action example\n          \n          \n            \n            [[ilm-disable-migrate-ex]]\n          \n          \n            \n            ==== Disable automatic migration", "author": "debadair", "createdAt": "2020-10-02T22:12:37Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.\n+\n+[[ilm-automatic-index-migration]]\n+==== Automatic index migration\n+\n+ILM will automatically inject the migrate action in the warm and cold\n+phases unless the phase contains an <<ilm-allocate, allocate action>> with\n+allocation rules defined or the migrate action is defined explicitly.\n+\n+Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n+replicas will not prevent the migrate action from automatically being\n+injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n+executes before the migate action providing the ability to reduce the number\n+of replicas before migrating the index to a different data tier.\n+\n+Manually specifying an enabled migrate action and an allocate action\n+that defines allocation rules is prohibited. If modifying the allocation\n+rules via the <<ilm-allocate, allocate action>> is desired define the\n+migrate action with the `enabled` flag set to `false`.\n+\n+[[ilm-enabled-migrate-ex]]\n+==== Example\n+\n+The migrate action in the following policy is enabled and\n+the number of replicas for the index is manipulated using\n+the allocate action.\n+\n+NOTE: ILM would've injected the migrate action automatically\n+in the following policy even if it wasn't manually defined.\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _ilm/policy/my_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"warm\": {\n+        \"actions\": {\n+          \"migrate\" : {\n+          },\n+          \"allocate\": {\n+            \"number_of_replicas\": 1\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+\n+[[ilm-disabled-migrate-ex]]\n+==== Disabled migrate action example", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499071721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            NOTE: Explicitly disabling the migrate action is not required--{ilm-init} does not inject the migrate action if you specify allocation options.", "author": "debadair", "createdAt": "2020-10-02T22:14:45Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,115 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Updates the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting in order to migrate the index to the <<modules-tiers, data tier>> corresponding\n+to the current phase.\n+\n+If the `migrate` action is executed in the Warm phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_warm, data_hot`, targeting the\n+<<warm-tier, warm tier>> if it is available or otherwise falling back to the\n+<<hot-tier, hot tier>>.\n+\n+If the `migrate` action is executed in the Cold phase, the\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting will be configured to `data_cold, data_warm, data_hot`, targeting the\n+<<cold-tier, cold tier>> if it is available or otherwise falling back to the\n+<<warm-tier, warm>> or <<hot-tier, hot>> tier, depending on which is available.\n+\n+The migrate action is not allowed in the hot phase.\n+The initial index to tier allocation is performed <<data-tier-allocation, automatically>>,\n+unless it's configured manually or via <<indices-templates, index templates>>\n+\n+[[ilm-migrate-options]]\n+==== Options\n+\n+You can optionally disable the `migrate` action using the\n+`enabled` option.\n+An empty migrate action is enabled.\n+\n+`enabled`::\n+(Optional, boolean)\n+Controls whether the index migration to data tiers is enabled or not.\n+Defaults to `true`.\n+\n+[[ilm-automatic-index-migration]]\n+==== Automatic index migration\n+\n+ILM will automatically inject the migrate action in the warm and cold\n+phases unless the phase contains an <<ilm-allocate, allocate action>> with\n+allocation rules defined or the migrate action is defined explicitly.\n+\n+Defining an <<ilm-allocate, allocate action>> that only modifies the number of index\n+replicas will not prevent the migrate action from automatically being\n+injected into the allowed phases. In this case the <<ilm-allocate, allocate action>>\n+executes before the migate action providing the ability to reduce the number\n+of replicas before migrating the index to a different data tier.\n+\n+Manually specifying an enabled migrate action and an allocate action\n+that defines allocation rules is prohibited. If modifying the allocation\n+rules via the <<ilm-allocate, allocate action>> is desired define the\n+migrate action with the `enabled` flag set to `false`.\n+\n+[[ilm-enabled-migrate-ex]]\n+==== Example\n+\n+The migrate action in the following policy is enabled and\n+the number of replicas for the index is manipulated using\n+the allocate action.\n+\n+NOTE: ILM would've injected the migrate action automatically\n+in the following policy even if it wasn't manually defined.\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _ilm/policy/my_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"warm\": {\n+        \"actions\": {\n+          \"migrate\" : {\n+          },\n+          \"allocate\": {\n+            \"number_of_replicas\": 1\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+\n+[[ilm-disabled-migrate-ex]]\n+==== Disabled migrate action example\n+\n+The migrate action in the following policy is disabled and\n+the allocate action assigns the index to nodes that have a\n+`rack_id` of _one_ or _two_.\n+", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499071812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Move the index shards to the <<modules-tiers, data tier>> corresponding\n          \n          \n            \n            to the current ILM phase.\n          \n          \n            \n            Move the index shards to the <<modules-tiers, data tier>> that corresponds\n          \n          \n            \n            to the current {ilm-init] phase.", "author": "debadair", "createdAt": "2020-10-02T22:15:10Z", "path": "docs/reference/ilm/ilm-actions.asciidoc", "diffHunk": "@@ -18,6 +18,10 @@ Makes the index read-only.\n [[ilm-freeze-action]]<<ilm-freeze,Freeze>>::\n Freeze the index to minimize its memory footprint.\n \n+[[ilm-migrate-action]]<<ilm-migrate,Migrate>>::\n+Move the index shards to the <<modules-tiers, data tier>> corresponding\n+to the current ILM phase.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MjAyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499072021", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * <<data-tier-shard-filtering, Data Tier allocation>>: Controls the allocation of indices to <<modules-tiers, data tiers>>.\n          \n          \n            \n            * <<data-tier-shard-filtering, Data tier allocation>>: Controls the allocation of indices to <<modules-tiers, data tiers>>.", "author": "debadair", "createdAt": "2020-10-02T22:15:57Z", "path": "docs/reference/index-modules/allocation.asciidoc", "diffHunk": "@@ -7,6 +7,7 @@ nodes:\n * <<shard-allocation-filtering,Shard allocation filtering>>: Controlling which shards are allocated to which nodes.\n * <<delayed-allocation,Delayed allocation>>: Delaying allocation of unassigned shards caused by a node leaving.\n * <<allocation-total-shards,Total shards per node>>: A hard limit on the number of shards from the same index per node.\n+* <<data-tier-shard-filtering, Data Tier allocation>>: Controls the allocation of indices to <<modules-tiers, data tiers>>.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MjY3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499072672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can use index level allocation settings to control which <<modules-tiers, data tier>>\n          \n          \n            \n            is the index allocated to. The data tier allocator is a specialised\n          \n          \n            \n            <<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n          \n          \n            \n            node attributes, the `_tier` and `_tier_preference`.\n          \n          \n            \n            You can use index-level allocation settings to control which <<modules-tiers, data tier>>\n          \n          \n            \n            the index is allocated to. The data tier allocator is a\n          \n          \n            \n            <<shard-allocation-filtering, shard allocation filter>> that uses two built-in\n          \n          \n            \n            node attributes:  `_tier` and `_tier_preference`.", "author": "debadair", "createdAt": "2020-10-02T22:18:24Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NDI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499074241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n          \n          \n            \n            node roles, as set with the `node.roles` setting in elasticsearch.yml:\n          \n          \n            \n            These tier attributes are set using the data node roles:", "author": "debadair", "createdAt": "2020-10-02T22:25:00Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NDMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499074309", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n          \n          \n            \n            for data tier filtering\n          \n          \n            \n            NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n          \n          \n            \n            for data tier filtering.", "author": "debadair", "createdAt": "2020-10-02T22:25:16Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NDM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499074381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Enabling data tier allocation filtering\n          \n          \n            \n            ====Data tier allocation settings", "author": "debadair", "createdAt": "2020-10-02T22:25:36Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering\n+\n+[discrete]\n+[[data-tier-allocation-filters]]\n+==== Enabling data tier allocation filtering", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NTA0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499075046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To enable data tier allocation the following index settings can be used:", "author": "debadair", "createdAt": "2020-10-02T22:28:24Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering\n+\n+[discrete]\n+[[data-tier-allocation-filters]]\n+==== Enabling data tier allocation filtering\n+\n+To enable data tier allocation the following index settings can be used:", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NTg5OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499075898", "bodyText": "Shouldn't it be role instead of tier when talking about the nodes?", "author": "debadair", "createdAt": "2020-10-02T22:31:30Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering\n+\n+[discrete]\n+[[data-tier-allocation-filters]]\n+==== Enabling data tier allocation filtering\n+\n+To enable data tier allocation the following index settings can be used:\n+\n+`index.routing.allocation.include._tier`::\n+\n+    Assign the index to a node whose `_tier` has at least one of the", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMTE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499421159", "bodyText": "Yes, great catch", "author": "andreidan", "createdAt": "2020-10-05T08:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3Njg5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499076892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assign a preference-based list of tiers for an index to be assigned to. This\n          \n          \n            \n                defines a priority list. The first tier in the list for which there is a node\n          \n          \n            \n                _available_ in the cluster will be the target tier where the index will be\n          \n          \n            \n                allocated. This prevents the indices from remaining unallocated in case no nodes\n          \n          \n            \n                of a preferred tier are available.\n          \n          \n            \n            Assign the index to the first tier in the list that has an available node. \n          \n          \n            \n                 This prevents indices from remaining unallocated if no nodes\n          \n          \n            \n                are available in the preferred tier.", "author": "debadair", "createdAt": "2020-10-02T22:35:50Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering\n+\n+[discrete]\n+[[data-tier-allocation-filters]]\n+==== Enabling data tier allocation filtering\n+\n+To enable data tier allocation the following index settings can be used:\n+\n+`index.routing.allocation.include._tier`::\n+\n+    Assign the index to a node whose `_tier` has at least one of the\n+    comma-separated values.\n+\n+`index.routing.allocation.require._tier`::\n+\n+    Assign the index to a node whose `_tier` has _all_ of the\n+    comma-separated values.\n+\n+`index.routing.allocation.exclude._tier`::\n+\n+    Assign the index to a node whose `_tier` has _none_ of the\n+    comma-separated values.\n+\n+[[tier-preference-allocation-filter]]\n+`index.routing.allocation.include._tier_preference`::\n+\n+    Assign a preference-based list of tiers for an index to be assigned to. This\n+    defines a priority list. The first tier in the list for which there is a node\n+    _available_ in the cluster will be the target tier where the index will be\n+    allocated. This prevents the indices from remaining unallocated in case no nodes\n+    of a preferred tier are available.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODQwNg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499078406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                eg. \"index.routing.allocation.include._tier_preference\": \"data_hot,data_warm\"\n          \n          \n            \n            \n          \n          \n            \n                If the cluster contains any nodes with the data_hot role, the decider will only allow them to be\n          \n          \n            \n                allocated on the data_hot node(s). If there are no data_hot nodes, but there are data_warm and\n          \n          \n            \n                data_content nodes, then the index will be allowed to be allocated on data_warm nodes.\n          \n          \n            \n                For example, if you set `index.routing.allocation.include._tier_preference` to `data_hot,data_warm`, the index is allocated to the hot tier if there  are nodes with the `data_hot` role. If there are no nodes in the hot tier, but there are nodes with the `data_warm` role,  the index is allocated to the warm tier.", "author": "debadair", "createdAt": "2020-10-02T22:42:35Z", "path": "docs/reference/index-modules/allocation/data_tier_allocation.asciidoc", "diffHunk": "@@ -0,0 +1,55 @@\n+[role=\"xpack\"]\n+[[data-tier-shard-filtering]]\n+=== Index-level data tier allocation filtering\n+\n+You can use index level allocation settings to control which <<modules-tiers, data tier>>\n+is the index allocated to. The data tier allocator is a specialised\n+<<shard-allocation-filtering, shard allocation filter>> that makes use of two built-in\n+node attributes, the `_tier` and `_tier_preference`.\n+\n+The accepted values for data tier allocation filtering are the valid <<modules-tiers, data tiers>>\n+node roles, as set with the `node.roles` setting in elasticsearch.yml:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+NOTE: The <<data-node, data>> role is not a valid data tier and cannot be used\n+for data tier filtering\n+\n+[discrete]\n+[[data-tier-allocation-filters]]\n+==== Enabling data tier allocation filtering\n+\n+To enable data tier allocation the following index settings can be used:\n+\n+`index.routing.allocation.include._tier`::\n+\n+    Assign the index to a node whose `_tier` has at least one of the\n+    comma-separated values.\n+\n+`index.routing.allocation.require._tier`::\n+\n+    Assign the index to a node whose `_tier` has _all_ of the\n+    comma-separated values.\n+\n+`index.routing.allocation.exclude._tier`::\n+\n+    Assign the index to a node whose `_tier` has _none_ of the\n+    comma-separated values.\n+\n+[[tier-preference-allocation-filter]]\n+`index.routing.allocation.include._tier_preference`::\n+\n+    Assign a preference-based list of tiers for an index to be assigned to. This\n+    defines a priority list. The first tier in the list for which there is a node\n+    _available_ in the cluster will be the target tier where the index will be\n+    allocated. This prevents the indices from remaining unallocated in case no nodes\n+    of a preferred tier are available.\n+\n+    eg. \"index.routing.allocation.include._tier_preference\": \"data_hot,data_warm\"\n+\n+    If the cluster contains any nodes with the data_hot role, the decider will only allow them to be\n+    allocated on the data_hot node(s). If there are no data_hot nodes, but there are data_warm and\n+    data_content nodes, then the index will be allowed to be allocated on data_warm nodes.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTAyNw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499079027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `_tier`::       Match nodes by the node's <<modules-tiers, data tier>> role\n          \n          \n            \n            `_tier`::       Match nodes by the node's <<modules-tiers, data>> role", "author": "debadair", "createdAt": "2020-10-02T22:45:17Z", "path": "docs/reference/modules/cluster/allocation_filtering.asciidoc", "diffHunk": "@@ -55,7 +55,13 @@ The cluster allocation settings support the following built-in attributes:\n `_ip`::         Match either `_host_ip` or `_publish_ip`\n `_host`::       Match nodes by hostname\n `_id`::         Match nodes by node id\n+`_tier`::       Match nodes by the node's <<modules-tiers, data tier>> role", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMjI0OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499422248", "bodyText": "I think this might be confusing as \"data\" is a data role itself, and it's not a tier.", "author": "andreidan", "createdAt": "2020-10-05T08:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDE3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499080176", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\n          \n          \n            \n            a subset of roles are <<modules-tiers, data tier>> roles, and the generic\n          \n          \n            \n            <<data-node, data role>> will match any tier filtering.\n          \n          \n            \n            a subset of roles that are <<modules-tiers, data tier>> roles, but the generic\n          \n          \n            \n            <<data-node, data role>> will match any tier filtering.\n          \n          \n            \n            NOTE:  Data tier filtering is based on the roles for data nodes:\n          \n          \n            \n            `data_hot`, `data_warm`, `data_cold`. \n          \n          \n            \n            The generic `data` role matches any tier filtering.", "author": "debadair", "createdAt": "2020-10-02T22:50:39Z", "path": "docs/reference/modules/cluster/allocation_filtering.asciidoc", "diffHunk": "@@ -55,7 +55,13 @@ The cluster allocation settings support the following built-in attributes:\n `_ip`::         Match either `_host_ip` or `_publish_ip`\n `_host`::       Match nodes by hostname\n `_id`::         Match nodes by node id\n+`_tier`::       Match nodes by the node's <<modules-tiers, data tier>> role\n \n+NOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\n+a subset of roles are <<modules-tiers, data tier>> roles, and the generic\n+<<data-node, data role>> will match any tier filtering.\n+a subset of roles that are <<modules-tiers, data tier>> roles, but the generic\n+<<data-node, data role>> will match any tier filtering.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMzI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499423241", "bodyText": "I think we should be consistent with the note we used above and link to the data tier modules (which also includes data_content)\nhttps://github.com/elastic/elasticsearch/pull/63086/files#diff-127631bad0a964abda4dc766f9b02c36R108-R110", "author": "andreidan", "createdAt": "2020-10-05T08:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MzM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499083371", "bodyText": "This shouldn't break to a new page.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            [discrete]", "author": "debadair", "createdAt": "2020-10-02T23:04:36Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually\n+hosting the data from recent weeks. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+[[cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, configured to have zero replicas and be backed by\n+a <<ilm-searchable-snapshot, snapshot>>. The cold tier is usually hosting the data from recent\n+months.\n+\n+[[data-tier-allocation]]\n+=== Data tier index allocation\n+\n+When an index is created {es} will automatically allocate the index to the <<content-tier, Content tier>>\n+if the index is not part of a <<data-streams, data stream>> or to the <<hot-tier, Hot tier>> if the index\n+is part of a <<data-streams, data stream>>.\n+{es} will configure the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+to `data_content` or `data_hot` respectively.\n+\n+These heuristics can be overridden by specifying any <<shard-allocation-filtering, shard allocation filtering>>\n+settings in the create index request or index template that matches the new index.\n+Specifying any configuration, including `null`, for `index.routing.allocation.include._tier_preference` will\n+also opt out of the automatic new index allocation to tiers.\n+", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MzQ5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499083491", "bodyText": "This shouldn't break to a new page.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            [discrete]", "author": "debadair", "createdAt": "2020-10-02T23:05:14Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually\n+hosting the data from recent weeks. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+[[cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, configured to have zero replicas and be backed by\n+a <<ilm-searchable-snapshot, snapshot>>. The cold tier is usually hosting the data from recent\n+months.\n+", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjAwOA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499086008", "bodyText": "I think we can kind of blend what I wrote with this. This doesn't belong in the config section, which is really intended as a settings section--but has other stuff for historical reasons. From our conversation, I think we want this information in a top-level section & I wouldn't put the source file in the modules directory. (We're trying to get away from using modules as an organizing principle.)\nI won't try to do a substantive edit here--I can do that as a follow-on.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[modules-tiers]]\n          \n          \n            \n            [[data-tiers]]", "author": "debadair", "createdAt": "2020-10-02T23:18:31Z", "path": "docs/reference/modules/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[modules-tiers]]", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjcxNA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499086714", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            related operations such as CRUD, search, and aggregations. The `data` role fulfils\n          \n          \n            \n            the role of any of the more specialised data nodes `data_content`,`data_hot`,\n          \n          \n            \n            `data_warm` or `data_cold`. Nodes can be configured to fulfill one or multiple\n          \n          \n            \n            specialised (concrete <<modules-tiers, data tiers>>) roles.\n          \n          \n            \n            related operations such as CRUD, search, and aggregations. A node with the `data` role can fill any of the specialised data node roles.", "author": "debadair", "createdAt": "2020-10-02T23:22:40Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -44,7 +48,10 @@ A node that has the `master` role (default), which makes it eligible to be\n <<data-node,Data node>>::\n \n A node that has the `data` role (default). Data nodes hold data and perform data\n-related operations such as CRUD, search, and aggregations.\n+related operations such as CRUD, search, and aggregations. The `data` role fulfils\n+the role of any of the more specialised data nodes `data_content`,`data_hot`,\n+`data_warm` or `data_cold`. Nodes can be configured to fulfill one or multiple\n+specialised (concrete <<modules-tiers, data tiers>>) roles.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODE3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499088176", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Data nodes can be more specialised in order to allow for tiered storage deployments.\n          \n          \n            \n            In a multi-tier deployment architecture, you use specialised data roles to assign data nodes to specific tiers: `data_content`,`data_hot`,\n          \n          \n            \n            `data_warm`, or `data_cold. A node can belong to multiple tiers, but a node that has one of the specialised data roles cannot have the generic  `data` role. ```", "author": "debadair", "createdAt": "2020-10-02T23:30:23Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499088283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A collection of data nodes with the same specialised role is called a\n          \n          \n            \n            <<modules-tiers, data tier>>.\n          \n          \n            \n            \n          \n          \n            \n            IMPORTANT: If a node has a `data tier` role, it cannot *also*\n          \n          \n            \n            be a generic `data` node.\n          \n          \n            \n            \n          \n          \n            \n            The available <<modules-tiers, data tier>> roles are the following:", "author": "debadair", "createdAt": "2020-10-02T23:30:52Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.\n+A collection of data nodes with the same specialised role is called a\n+<<modules-tiers, data tier>>.\n+\n+IMPORTANT: If a node has a `data tier` role, it cannot *also*\n+be a generic `data` node.\n+\n+The available <<modules-tiers, data tier>> roles are the following:", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499093153", "bodyText": "I think we need a better definition of content node. Defining it in terms of \"user-created content\" could be interpreted as actual user-generated content, not content like a product catalog.  I was trying to define it in terms of \"collections of things\" vs a stream of data. Maybe something like \"Content data nodes store indices that contain collections of things such as an catalog of products. The value of the data in a content node remains relatively constant, and the performance requirements aren't tied to the age of the data.\"", "author": "debadair", "createdAt": "2020-10-02T23:59:55Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.\n+A collection of data nodes with the same specialised role is called a\n+<<modules-tiers, data tier>>.\n+\n+IMPORTANT: If a node has a `data tier` role, it cannot *also*\n+be a generic `data` node.\n+\n+The available <<modules-tiers, data tier>> roles are the following:\n+\n+[[data-content-node]]\n+==== [x-pack]#Content data node#\n+\n+Content data nodes accommodate user-created content. They enable operations like CRUD,\n+search and aggregations.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MTY1MA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499461650", "bodyText": "I think introducing more abstract terms could potentially complicate things further here. I believe the product catalog would usually be manually introduced in the system (ie. user created) as opposed to being machine generated (like logs and metrics).", "author": "andreidan", "createdAt": "2020-10-05T09:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MTY3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499571678", "bodyText": "I wonder if it would be clearer if we talk about \"content\" by exemplifying it as opposed to using the content origin?\neg. Content data nodes store the documents that back/support application, website, and enterprise search. The value of the data in a content node remains relatively constant, and the performance requirements aren't tied to the age of the data.", "author": "andreidan", "createdAt": "2020-10-05T12:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499093360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Hot data nodes accommodate time series data as it enters {es}. The hot tier must be fast for\n          \n          \n            \n            both reads and writes, and requires more hardware resources (such as SSD drives).\n          \n          \n            \n            Hot data nodes store time series data as it enters {es}. The hot tier must be fast for\n          \n          \n            \n            both reads and writes, and requires more hardware resources (such as SSD drives).", "author": "debadair", "createdAt": "2020-10-03T00:01:22Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.\n+A collection of data nodes with the same specialised role is called a\n+<<modules-tiers, data tier>>.\n+\n+IMPORTANT: If a node has a `data tier` role, it cannot *also*\n+be a generic `data` node.\n+\n+The available <<modules-tiers, data tier>> roles are the following:\n+\n+[[data-content-node]]\n+==== [x-pack]#Content data node#\n+\n+Content data nodes accommodate user-created content. They enable operations like CRUD,\n+search and aggregations.\n+\n+To create a dedicated content node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_content ]\n+----\n+\n+[[data-hot-node]]\n+==== [x-pack]#Hot data node#\n+\n+Hot data nodes accommodate time series data as it enters {es}. The hot tier must be fast for\n+both reads and writes, and requires more hardware resources (such as SSD drives).", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499093659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Warm data nodes hold indices after they are no longer being written to, but still being\n          \n          \n            \n            queried, usually at a lower frequency than it was in the hot tier. Lower performant\n          \n          \n            \n            hardware can usually be used in this tier.\n          \n          \n            \n            Warm data nodes store indices that are no longer being regularly updated, but are still being\n          \n          \n            \n            queried. Query volume is usually at a lower than it was while the index was in the hot tier. Less performant\n          \n          \n            \n            hardware can usually be used for nodes in this tier.", "author": "debadair", "createdAt": "2020-10-03T00:03:44Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.\n+A collection of data nodes with the same specialised role is called a\n+<<modules-tiers, data tier>>.\n+\n+IMPORTANT: If a node has a `data tier` role, it cannot *also*\n+be a generic `data` node.\n+\n+The available <<modules-tiers, data tier>> roles are the following:\n+\n+[[data-content-node]]\n+==== [x-pack]#Content data node#\n+\n+Content data nodes accommodate user-created content. They enable operations like CRUD,\n+search and aggregations.\n+\n+To create a dedicated content node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_content ]\n+----\n+\n+[[data-hot-node]]\n+==== [x-pack]#Hot data node#\n+\n+Hot data nodes accommodate time series data as it enters {es}. The hot tier must be fast for\n+both reads and writes, and requires more hardware resources (such as SSD drives).\n+\n+To create a dedicated hot node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_hot ]\n+----\n+\n+[[data-warm-node]]\n+==== [x-pack]#Warm data node#\n+\n+Warm data nodes hold indices after they are no longer being written to, but still being\n+queried, usually at a lower frequency than it was in the hot tier. Lower performant\n+hardware can usually be used in this tier.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499094229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cold data nodes hold indices after they are no longer updated in the warm tier. Lower\n          \n          \n            \n            performant hardware is used in this tier, along with optimizations related to\n          \n          \n            \n            disaster recovery and index replication that will ensure the resources needed to\n          \n          \n            \n            accommodate the indices are much lower than in the warm tier, at the expense of the indices\n          \n          \n            \n            being read only and backed by snapshots.\n          \n          \n            \n            Cold data nodes store read-only indices that are accessed less frequently. This tier uses less performant hardware and leverages snapshot-backed indices to minimize the resources required.", "author": "debadair", "createdAt": "2020-10-03T00:08:07Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +213,67 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+Data nodes can be more specialised in order to allow for tiered storage deployments.\n+A collection of data nodes with the same specialised role is called a\n+<<modules-tiers, data tier>>.\n+\n+IMPORTANT: If a node has a `data tier` role, it cannot *also*\n+be a generic `data` node.\n+\n+The available <<modules-tiers, data tier>> roles are the following:\n+\n+[[data-content-node]]\n+==== [x-pack]#Content data node#\n+\n+Content data nodes accommodate user-created content. They enable operations like CRUD,\n+search and aggregations.\n+\n+To create a dedicated content node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_content ]\n+----\n+\n+[[data-hot-node]]\n+==== [x-pack]#Hot data node#\n+\n+Hot data nodes accommodate time series data as it enters {es}. The hot tier must be fast for\n+both reads and writes, and requires more hardware resources (such as SSD drives).\n+\n+To create a dedicated hot node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_hot ]\n+----\n+\n+[[data-warm-node]]\n+==== [x-pack]#Warm data node#\n+\n+Warm data nodes hold indices after they are no longer being written to, but still being\n+queried, usually at a lower frequency than it was in the hot tier. Lower performant\n+hardware can usually be used in this tier.\n+\n+To create a dedicated warm node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_warm ]\n+----\n+\n+[[data-cold-node]]\n+==== [x-pack]#Cold data node#\n+\n+Cold data nodes hold indices after they are no longer updated in the warm tier. Lower\n+performant hardware is used in this tier, along with optimizations related to\n+disaster recovery and index replication that will ensure the resources needed to\n+accommodate the indices are much lower than in the warm tier, at the expense of the indices\n+being read only and backed by snapshots.", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDMxMg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499094312", "bodyText": "Per previous comment, I think we want this info at the top level.", "author": "debadair", "createdAt": "2020-10-03T00:08:39Z", "path": "docs/reference/setup.asciidoc", "diffHunk": "@@ -79,6 +79,8 @@ include::settings/monitoring-settings.asciidoc[]\n \n include::modules/node.asciidoc[]\n \n+include::modules/datatiers.asciidoc[]", "originalCommit": "91d8dd00a82fbd6878cd91ad0aa496fbd98a5f37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d26b2835a7640c3086fc901dfe5a4360fb23c3be", "url": "https://github.com/elastic/elasticsearch/commit/d26b2835a7640c3086fc901dfe5a4360fb23c3be", "message": "Apply suggestions from code review\n\nCo-authored-by: debadair <debadair@elastic.co>", "committedDate": "2020-10-05T08:27:23Z", "type": "commit"}, {"oid": "835203aa568325c533b2b0b895c5c56e4003b417", "url": "https://github.com/elastic/elasticsearch/commit/835203aa568325c533b2b0b895c5c56e4003b417", "message": "Rename modules-tiers to data-tiers\n\nCo-authored-by: debadair <debadair@elastic.co>", "committedDate": "2020-10-05T08:35:59Z", "type": "commit"}, {"oid": "5f64d875251c6dcba1e516b71c0702fe49e28b3d", "url": "https://github.com/elastic/elasticsearch/commit/5f64d875251c6dcba1e516b71c0702fe49e28b3d", "message": "Data tiers is top level section", "committedDate": "2020-10-05T08:53:09Z", "type": "commit"}, {"oid": "9ddb5860ea36113836c289718c9f317fcddd821d", "url": "https://github.com/elastic/elasticsearch/commit/9ddb5860ea36113836c289718c9f317fcddd821d", "message": "Migrate action reword", "committedDate": "2020-10-05T08:59:04Z", "type": "commit"}, {"oid": "27e09c58e1b28001cc58d6b0fc625b24394fc2cf", "url": "https://github.com/elastic/elasticsearch/commit/27e09c58e1b28001cc58d6b0fc625b24394fc2cf", "message": "Reword data_warm and node roles", "committedDate": "2020-10-05T09:05:59Z", "type": "commit"}, {"oid": "323c070d2d1f55cbc9c2f28587fb68185e65c99c", "url": "https://github.com/elastic/elasticsearch/commit/323c070d2d1f55cbc9c2f28587fb68185e65c99c", "message": "Reword _tier allocation spec", "committedDate": "2020-10-05T09:18:02Z", "type": "commit"}, {"oid": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "url": "https://github.com/elastic/elasticsearch/commit/8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "message": "\"values\" word", "committedDate": "2020-10-05T13:13:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1Nzc2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499757765", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Common data lifecycle management patterns revolve around transitioning the indices\n          \n          \n            \n            Common data lifecycle management patterns revolve around transitioning indices", "author": "dakrone", "createdAt": "2020-10-05T17:26:39Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NzkwNw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499757907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n          \n          \n            \n            to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept", "author": "dakrone", "createdAt": "2020-10-05T17:26:53Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1ODk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499758981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n          \n          \n            \n            NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the", "author": "dakrone", "createdAt": "2020-10-05T17:28:53Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1OTA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499759043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n          \n          \n            \n            NOTE: new indices that are part of a <<data-streams, data stream>> will be automatically allocated to the", "author": "dakrone", "createdAt": "2020-10-05T17:29:01Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1OTYzMg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499759632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n          \n          \n            \n            anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually\n          \n          \n            \n            This tier is where data goes once it is not queried as frequently as in the <<hot-tier, hot tier>>.\n          \n          \n            \n            It is a medium-fast tier that still allows data updates. The warm tier is usually", "author": "dakrone", "createdAt": "2020-10-05T17:29:59Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1OTk0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499759945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            tier it can be compressed, shrunken, configured to have zero replicas and be backed by\n          \n          \n            \n            tier it can be compressed, shrunken, or configured to have zero replicas and be backed by", "author": "dakrone", "createdAt": "2020-10-05T17:30:36Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually\n+hosting the data from recent weeks. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+[[cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, configured to have zero replicas and be backed by", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499760122", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            months.\n          \n          \n            \n            months or years.\n          \n      \n    \n    \n  \n\n(since we don't have a frozen tier yet)", "author": "dakrone", "createdAt": "2020-10-05T17:30:57Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -0,0 +1,99 @@\n+[role=\"xpack\"]\n+[[data-tiers]]\n+=== Data tiers\n+\n+Common data lifecycle management patterns revolve around transitioning the indices\n+through multiple collections of nodes with different hardware characteristics in order\n+to fulfil evolving CRUD, search, and aggregation needs as the indices age. The concept\n+of a tiered hardware architecture is not new in {es}.\n+<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n+implementing tiered architectures by automating the managemnt of indices according to\n+performance, resiliency and data retention requirements.\n+<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n+for timeseries data such as logging and metrics.\n+\n+A data tier is a collection of nodes with the same role. Data tiers are an integrated\n+solution offering better support for optimising cost and improving performance.\n+Formalized data tiers in ES allow configuration of the lifecycle and location of data\n+in a hot/warm/cold topology without requiring the use of custom node attributes.\n+Each tier formalises specific characteristics and data behaviours.\n+\n+The node roles that can currently define data tiers are:\n+\n+* <<data-content-node, data_content>>\n+* <<data-hot-node, data_hot>>\n+* <<data-warm-node, data_warm>>\n+* <<data-cold-node, data_cold>>\n+\n+The more generic <<data-node, data role>> is not a data tier role, but\n+it is the default node role if no roles are configured. If a node has the\n+<<data-node, data>> role we treat the node as if it has all of the tier\n+roles assigned.\n+\n+[[content-tier]]\n+==== Content tier\n+\n+The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n+role. A content tier is designed to store and search user created content. Non-timeseries data\n+doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n+the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n+queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n+prioritises high IO.\n+The content data has very long data retention characteristics and from a resiliency perspective\n+the indices in this tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are not part of <<data-streams, data streams>> will be allocated to the\n+<<content-tier>>\n+\n+[[hot-tier]]\n+==== Hot tier\n+\n+The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n+It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n+and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n+hosting the data from recent days. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+NOTE: new indices that are part of a <<data-streams, data stream>> will be allocated to the\n+<<hot-tier>>\n+\n+[[warm-tier]]\n+==== Warm tier\n+\n+The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n+This tier is where data goes once it is not queried very frequently in the <<hot-tier, hot tier>>\n+anymore. It is a medium-fast tier that still allows data updates. The warm tier is usually\n+hosting the data from recent weeks. From a resiliency perspective the indices in this\n+tier should be configured to use one or more replicas.\n+\n+[[cold-tier]]\n+==== Cold tier\n+\n+The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n+Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n+cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n+tier it can be compressed, shrunken, configured to have zero replicas and be backed by\n+a <<ilm-searchable-snapshot, snapshot>>. The cold tier is usually hosting the data from recent\n+months.", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDUyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499760525", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you can explicitly include the migrate action and set the enabled option to`false`.\n          \n          \n            \n            you can explicitly include the migrate action and set the enabled option to `false`.", "author": "dakrone", "createdAt": "2020-10-05T17:31:45Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,95 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Moves the index to the <<data-tiers, data tier>> that corresponds\n+to the current phase by updating the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting.\n+{ilm-init} automatically injects the migrate action in the warm and cold\n+phases if no allocation options are specified with the <<ilm-allocate, allocate>> action.\n+If you specify an allocate action that only modifies the number of index\n+replicas, {ilm-init} reduces the number of replicas before migrating the index.\n+To prevent automatic migration without specifying allocation options,\n+you can explicitly include the migrate action and set the enabled option to`false`.", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499760696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to `data_warm, data_hot`. This moves the index to nodes in the\n          \n          \n            \n            to `data_warm,data_hot`. This moves the index to nodes in the", "author": "dakrone", "createdAt": "2020-10-05T17:32:04Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,95 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Moves the index to the <<data-tiers, data tier>> that corresponds\n+to the current phase by updating the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting.\n+{ilm-init} automatically injects the migrate action in the warm and cold\n+phases if no allocation options are specified with the <<ilm-allocate, allocate>> action.\n+If you specify an allocate action that only modifies the number of index\n+replicas, {ilm-init} reduces the number of replicas before migrating the index.\n+To prevent automatic migration without specifying allocation options,\n+you can explicitly include the migrate action and set the enabled option to`false`.\n+\n+In the warm phase, the `migrate` action sets <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+to `data_warm, data_hot`. This moves the index to nodes in the", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDg1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499760851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to `data_cold, data_warm, data_hot`. This moves the index to nodes in the\n          \n          \n            \n            to `data_cold,data_warm,data_hot`. This moves the index to nodes in the", "author": "dakrone", "createdAt": "2020-10-05T17:32:21Z", "path": "docs/reference/ilm/actions/ilm-migrate.asciidoc", "diffHunk": "@@ -0,0 +1,95 @@\n+[role=\"xpack\"]\n+[[ilm-migrate]]\n+=== Migrate\n+\n+Phases allowed: warm, cold.\n+\n+Moves the index to the <<data-tiers, data tier>> that corresponds\n+to the current phase by updating the <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+index setting.\n+{ilm-init} automatically injects the migrate action in the warm and cold\n+phases if no allocation options are specified with the <<ilm-allocate, allocate>> action.\n+If you specify an allocate action that only modifies the number of index\n+replicas, {ilm-init} reduces the number of replicas before migrating the index.\n+To prevent automatic migration without specifying allocation options,\n+you can explicitly include the migrate action and set the enabled option to`false`.\n+\n+In the warm phase, the `migrate` action sets <<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+to `data_warm, data_hot`. This moves the index to nodes in the\n+<<warm-tier, warm tier>>. If there are no nodes in the warm tier,  it falls back to the\n+<<hot-tier, hot tier>>.\n+\n+In the cold phase, the `migrate` action sets\n+<<tier-preference-allocation-filter, `index.routing.allocation.include._tier_preference`>>\n+to `data_cold, data_warm, data_hot`. This moves the index to nodes in the", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63086#discussion_r499762481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cold data nodes store read-only indices that are accessed less frequently. This tier uses less performant hardware and leverages snapshot-backed indices to minimize the resources required.\n          \n          \n            \n            Cold data nodes store read-only indices that are accessed less frequently. This tier uses less performant hardware and may leverage snapshot-backed indices to minimize the resources required.", "author": "dakrone", "createdAt": "2020-10-05T17:35:23Z", "path": "docs/reference/modules/node.asciidoc", "diffHunk": "@@ -206,6 +210,58 @@ To create a dedicated data node, set:\n node.roles: [ data ]\n ----\n \n+In a multi-tier deployment architecture, you use specialised data roles to assign data nodes to specific tiers: `data_content`,`data_hot`,\n+`data_warm`, or `data_cold`. A node can belong to multiple tiers, but a node that has one of the specialised data roles cannot have the\n+generic `data` role.\n+\n+[[data-content-node]]\n+==== [x-pack]#Content data node#\n+\n+Content data nodes accommodate user-created content. They enable operations like CRUD,\n+search and aggregations.\n+\n+To create a dedicated content node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_content ]\n+----\n+\n+[[data-hot-node]]\n+==== [x-pack]#Hot data node#\n+\n+Hot data nodes store time series data as it enters {es}. The hot tier must be fast for\n+both reads and writes, and requires more hardware resources (such as SSD drives).\n+\n+To create a dedicated hot node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_hot ]\n+----\n+\n+[[data-warm-node]]\n+==== [x-pack]#Warm data node#\n+\n+Warm data nodes store indices that are no longer being regularly updated, but are still being\n+queried. Query volume is usually at a lower frequency than it was while the index was in the hot tier.\n+Less performant hardware can usually be used for nodes in this tier.\n+\n+To create a dedicated warm node, set:\n+[source,yaml]\n+----\n+node.roles: [ data_warm ]\n+----\n+\n+[[data-cold-node]]\n+==== [x-pack]#Cold data node#\n+\n+Cold data nodes store read-only indices that are accessed less frequently. This tier uses less performant hardware and leverages snapshot-backed indices to minimize the resources required.", "originalCommit": "8b68bfb6f0a1bc9e75cd2d2257d2430548deb6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79d1472ae60cde1ebe264acf8e00e0c0043fa5d0", "url": "https://github.com/elastic/elasticsearch/commit/79d1472ae60cde1ebe264acf8e00e0c0043fa5d0", "message": "Apply suggestions from code review\n\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-10-06T10:59:38Z", "type": "commit"}]}