{"pr_number": 66839, "pr_title": "DOC Audit security config change", "pr_createdAt": "2020-12-28T23:35:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66839", "timeline": [{"oid": "f462dc4c356fc234489bfc31242c938796c3c8be", "url": "https://github.com/elastic/elasticsearch/commit/f462dc4c356fc234489bfc31242c938796c3c8be", "message": "WIP", "committedDate": "2020-12-28T23:30:56Z", "type": "commit"}, {"oid": "7bfff61e83896d8780b5226665c15540083d48c0", "url": "https://github.com/elastic/elasticsearch/commit/7bfff61e83896d8780b5226665c15540083d48c0", "message": "WIP still", "committedDate": "2020-12-29T09:19:39Z", "type": "commit"}, {"oid": "7a908ecc647974931f8fd6a87c04c6a711153dfd", "url": "https://github.com/elastic/elasticsearch/commit/7a908ecc647974931f8fd6a87c04c6a711153dfd", "message": "More polishing of audit-settings", "committedDate": "2020-12-29T12:31:04Z", "type": "commit"}, {"oid": "9ea7c657384ff53d8e30797f0b73c87ecaffa866", "url": "https://github.com/elastic/elasticsearch/commit/9ea7c657384ff53d8e30797f0b73c87ecaffa866", "message": "Maybe audit settings is complete", "committedDate": "2020-12-29T13:12:21Z", "type": "commit"}, {"oid": "ec09fb5ea792c738f09dbb663246dc5801ff449f", "url": "https://github.com/elastic/elasticsearch/commit/ec09fb5ea792c738f09dbb663246dc5801ff449f", "message": "meah", "committedDate": "2020-12-29T15:50:12Z", "type": "commit"}, {"oid": "e83ba2d52ecd0956b3b7da058f8cac4f5f3665fd", "url": "https://github.com/elastic/elasticsearch/commit/e83ba2d52ecd0956b3b7da058f8cac4f5f3665fd", "message": "Enable audit logging Done", "committedDate": "2020-12-29T16:13:51Z", "type": "commit"}, {"oid": "aa178e197bf1fb7a577d923471cc3f88f91f7859", "url": "https://github.com/elastic/elasticsearch/commit/aa178e197bf1fb7a577d923471cc3f88f91f7859", "message": "Audit settings done-done", "committedDate": "2020-12-29T16:41:36Z", "type": "commit"}, {"oid": "16effe33463826d4c13029cb3c89217b1fb811aa", "url": "https://github.com/elastic/elasticsearch/commit/16effe33463826d4c13029cb3c89217b1fb811aa", "message": "put user event type", "committedDate": "2020-12-29T20:24:02Z", "type": "commit"}, {"oid": "125c21bb15015c1217d5dd4d76936e667c91ed75", "url": "https://github.com/elastic/elasticsearch/commit/125c21bb15015c1217d5dd4d76936e667c91ed75", "message": "Put role", "committedDate": "2020-12-29T20:46:49Z", "type": "commit"}, {"oid": "0bb4dca0c1ac9c6c7c6c88f2f64e4b7ece223640", "url": "https://github.com/elastic/elasticsearch/commit/0bb4dca0c1ac9c6c7c6c88f2f64e4b7ece223640", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2020-12-29T20:47:22Z", "type": "commit"}, {"oid": "31426a24539b0860a6f29bd448034913e46d8e53", "url": "https://github.com/elastic/elasticsearch/commit/31426a24539b0860a6f29bd448034913e46d8e53", "message": "Extraneous formatting", "committedDate": "2020-12-29T20:47:56Z", "type": "commit"}, {"oid": "6391f295dbe786d22606907ae52ea7b5a18f570e", "url": "https://github.com/elastic/elasticsearch/commit/6391f295dbe786d22606907ae52ea7b5a18f570e", "message": "More event types", "committedDate": "2020-12-29T21:09:02Z", "type": "commit"}, {"oid": "ed921f45f2fe83af8ed103f949d686de38373338", "url": "https://github.com/elastic/elasticsearch/commit/ed921f45f2fe83af8ed103f949d686de38373338", "message": "Partial fix for the example column", "committedDate": "2020-12-29T21:44:11Z", "type": "commit"}, {"oid": "e96e8080d77cd6235bba9ddf4c31c2eaa123c86e", "url": "https://github.com/elastic/elasticsearch/commit/e96e8080d77cd6235bba9ddf4c31c2eaa123c86e", "message": "Complete list without examples", "committedDate": "2020-12-30T08:58:47Z", "type": "commit"}, {"oid": "709eaf2a9a96166e0abc92d2705fe6cfe3ca7e46", "url": "https://github.com/elastic/elasticsearch/commit/709eaf2a9a96166e0abc92d2705fe6cfe3ca7e46", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2020-12-30T08:59:25Z", "type": "commit"}, {"oid": "4e39d88641fce5cf379ca6ef8c9e6f603a2f0e7f", "url": "https://github.com/elastic/elasticsearch/commit/4e39d88641fce5cf379ca6ef8c9e6f603a2f0e7f", "message": "Before detailing security change event contents", "committedDate": "2020-12-30T10:42:27Z", "type": "commit"}, {"oid": "2cbccd30fc05d1e307514048ef11df372b4c4fd4", "url": "https://github.com/elastic/elasticsearch/commit/2cbccd30fc05d1e307514048ef11df372b4c4fd4", "message": "Audit event attributes for security config change", "committedDate": "2020-12-30T11:35:51Z", "type": "commit"}, {"oid": "61ae9a4fdbebaddf554c3ede20684ea4bb12a356", "url": "https://github.com/elastic/elasticsearch/commit/61ae9a4fdbebaddf554c3ede20684ea4bb12a356", "message": "Some security configuration schema", "committedDate": "2020-12-30T18:02:54Z", "type": "commit"}, {"oid": "a041940473f949f80c86f710a145b0aa17f3a657", "url": "https://github.com/elastic/elasticsearch/commit/a041940473f949f80c86f710a145b0aa17f3a657", "message": "Formatting", "committedDate": "2020-12-30T18:46:49Z", "type": "commit"}, {"oid": "dc50fb498f0301ec6f84903db27111b9057f69a8", "url": "https://github.com/elastic/elasticsearch/commit/dc50fb498f0301ec6f84903db27111b9057f69a8", "message": "Schema is done, let's see how it renders", "committedDate": "2020-12-30T19:14:54Z", "type": "commit"}, {"oid": "bda3344bddbd98e384ca434f88ba1649f98c2d05", "url": "https://github.com/elastic/elasticsearch/commit/bda3344bddbd98e384ca434f88ba1649f98c2d05", "message": "First example", "committedDate": "2020-12-30T20:02:32Z", "type": "commit"}, {"oid": "2adea1ee3bf436da15c1fb09e7b4a1f94d2d80f2", "url": "https://github.com/elastic/elasticsearch/commit/2adea1ee3bf436da15c1fb09e7b4a1f94d2d80f2", "message": "More examples", "committedDate": "2020-12-30T20:13:41Z", "type": "commit"}, {"oid": "bbdf2b24ee0abbdaca7f295946044d7c51b18731", "url": "https://github.com/elastic/elasticsearch/commit/bbdf2b24ee0abbdaca7f295946044d7c51b18731", "message": "Better formatted examples", "committedDate": "2020-12-30T20:36:25Z", "type": "commit"}, {"oid": "16520627a145e7ae4f3843e8b565d405a3e617ea", "url": "https://github.com/elastic/elasticsearch/commit/16520627a145e7ae4f3843e8b565d405a3e617ea", "message": "Almost all examples", "committedDate": "2020-12-30T22:02:42Z", "type": "commit"}, {"oid": "0448643a9a5d7c900fa8dcae67f25f3c83086944", "url": "https://github.com/elastic/elasticsearch/commit/0448643a9a5d7c900fa8dcae67f25f3c83086944", "message": "All examples", "committedDate": "2020-12-30T22:43:08Z", "type": "commit"}, {"oid": "d5e38982f7a64044cab22732a315e7a0313cab24", "url": "https://github.com/elastic/elasticsearch/commit/d5e38982f7a64044cab22732a315e7a0313cab24", "message": "Logfile output WIP", "committedDate": "2020-12-31T06:04:58Z", "type": "commit"}, {"oid": "8417412408c5c9da6bcd2e84bc60c8f3eccd1ed3", "url": "https://github.com/elastic/elasticsearch/commit/8417412408c5c9da6bcd2e84bc60c8f3eccd1ed3", "message": "Almost", "committedDate": "2020-12-31T06:35:12Z", "type": "commit"}, {"oid": "ff19308388a0c3c36981612e7f74cd3156c02ff2", "url": "https://github.com/elastic/elasticsearch/commit/ff19308388a0c3c36981612e7f74cd3156c02ff2", "message": "Ignore policy as separate file", "committedDate": "2020-12-31T06:42:24Z", "type": "commit"}, {"oid": "0dcb633f1c3a170cee561657144751bdbc20ef22", "url": "https://github.com/elastic/elasticsearch/commit/0dcb633f1c3a170cee561657144751bdbc20ef22", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2020-12-31T06:48:14Z", "type": "commit"}, {"oid": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "url": "https://github.com/elastic/elasticsearch/commit/f7cc454a8448bea62aff36e3ce73b66c0722718d", "message": "Remove moved section", "committedDate": "2020-12-31T07:00:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU0ODMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550548309", "bodyText": "Specifies the kind of events to print in the auditing output.\n\nAn _all value is mentioned later. Might be nice to have its meaning/use case here too.", "author": "lcawl", "createdAt": "2020-12-31T16:46:33Z", "path": "docs/reference/settings/audit-settings.asciidoc", "diffHunk": "@@ -40,29 +48,39 @@ by using the following settings:\n // tag::xpack-sa-lf-events-include-tag[]\n `xpack.security.audit.logfile.events.include`::\n (<<dynamic-cluster-setting,Dynamic>>)\n-Specifies which events to include in the auditing output. The default value is:\n+Specifies the kind of events to print in the auditing output. The default list value", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4NzcxMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551387710", "bodyText": "I have added the mention for _all and referred to the audit-event-types anchor for the list of permitted values.", "author": "albertzaharovits", "createdAt": "2021-01-04T15:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU0ODMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1MTkyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550551921", "bodyText": "that are printed on the coordinating node only...\n\nDoes this phrase apply to all the items in the list, or only the last one?  If it applies to all of them, it might be clearer to put it in a separate sentence. For example: \"...and anonymous_access_denied. This information is printed in the audit log on the coordinating node only...\"", "author": "lcawl", "createdAt": "2020-12-31T16:51:07Z", "path": "docs/reference/settings/audit-settings.asciidoc", "diffHunk": "@@ -40,29 +48,39 @@ by using the following settings:\n // tag::xpack-sa-lf-events-include-tag[]\n `xpack.security.audit.logfile.events.include`::\n (<<dynamic-cluster-setting,Dynamic>>)\n-Specifies which events to include in the auditing output. The default value is:\n+Specifies the kind of events to print in the auditing output. The default list value\n+contains:\n `access_denied, access_granted, anonymous_access_denied, authentication_failed,\n-connection_denied, tampered_request, run_as_denied, run_as_granted`.\n+connection_denied, tampered_request, run_as_denied, run_as_granted,\n+security_config_change`.\n // end::xpack-sa-lf-events-include-tag[]\n \n [[xpack-sa-lf-events-exclude]]\n // tag::xpack-sa-lf-events-exclude-tag[]\n `xpack.security.audit.logfile.events.exclude`::\n (<<dynamic-cluster-setting,Dynamic>>)\n-Excludes the specified events from the output. By default, no events are\n-excluded.\n+Excludes the specified kind of events from the include list. Useful in the case where\n+the `events.include` setting contains the special value `_all`. The default is the empty list.\n // end::xpack-sa-lf-events-exclude-tag[]\n \n [[xpack-sa-lf-events-emit-request]]\n // tag::xpack-sa-lf-events-emit-request-tag[]\n `xpack.security.audit.logfile.events.emit_request_body`::\n (<<dynamic-cluster-setting,Dynamic>>)\n-Specifies whether to include the request body from REST requests on certain\n-event types such as `authentication_failed`. The default value is `false`.\n+Specifies whether to include the full request body from REST requests as an\n+attribute of certain kinds of audit events. The request body is printed as an\n+escaped JSON string value to the `request.body` attribute.\n+These events that contain the `request.body` attribute are `authentication_success`,\n+`authentication_failed`, `realm_authentication_failed`, `tampered_request`, `run_as_denied`,\n+and `anonymous_access_denied` that are printed on the coordinating node only", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxNzAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551517009", "bodyText": "You're right, it's confusing to talk about that in this context.\nIn a75acb7 I've moved these clarifications to the dedicated page https://elasticsearch_66839.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/auditing-search-queries.html and linked to it here.", "author": "albertzaharovits", "createdAt": "2021-01-04T19:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1MTkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1NDk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550554956", "bodyText": "Not a mandatory change, but in case this information moves, we've got an attribute for it:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more information, see https://www.elastic.co/subscriptions.\n          \n          \n            \n            For more information, see {subscriptions}.", "author": "lcawl", "createdAt": "2020-12-31T16:54:44Z", "path": "x-pack/docs/en/security/auditing/enable-audit-logging.asciidoc", "diffHunk": "@@ -3,21 +3,28 @@\n == Enabling audit logging\n \n You can log security-related events such as authentication failures and refused connections\n-to monitor your cluster for suspicious activity. \n+to monitor your cluster for suspicious activity (including data access authorization and user\n+security configuration changes).\n+\n Audit logging also provides forensic evidence in the event of an attack.\n \n [IMPORTANT]\n ============================================================================\n Audit logs are **disabled** by default. You must explicitly enable audit logging.\n ============================================================================\n+--\n+TIP: Audit logs are only available on certain subscription levels.\n+For more information, see https://www.elastic.co/subscriptions.", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2MjM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550562362", "bodyText": "It would be nice to have a header row that explains the purpose of each column. For example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |======\n          \n          \n            \n            [options=\"header\"]\n          \n          \n            \n            |======\n          \n          \n            \n            | Event type\n          \n          \n            \n            | Description\n          \n          \n            \n            | Example\n          \n      \n    \n    \n  \n\n... in that case, you likely don't have to put \"Example\" in the third column's entry every time.", "author": "lcawl", "createdAt": "2020-12-31T17:04:08Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxMTYyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551411625", "bodyText": "Yes! Thanks for noticing, I forgot to ask, I tried to find an example for the table header, but ultimately bailed out.\nOne nit: Event type -> Event action . The thing is that these values here are printed next to the event.action attribute, and that there is another attribute event.type (with values rest, transport, ip_filter and security_config_change).\nTraditionally we've referred to these values as types, but given the above, I think this is confusing. I've opted for the \"event kind\" terminology, because it is a synonym for \"type\" and it is not present in the event schema.", "author": "albertzaharovits", "createdAt": "2021-01-04T16:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2MjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2MjgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550562815", "bodyText": "I think if we add the header in the table, this sentence is unnecessary.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following is an exhaustive list of the events that can be generated:", "author": "lcawl", "createdAt": "2020-12-31T17:04:43Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2NDc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550564780", "bodyText": "<realm> represents the realm type.\n\nIt's unclear where \"\" appears.  Is it the \"realm\" property in the example?", "author": "lcawl", "createdAt": "2020-12-31T17:07:26Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551433676", "bodyText": "Good spot, I don't know what that's talking about either, realm is the realm name. I've removed it altogether, it was a carry-over from long ago.", "author": "albertzaharovits", "createdAt": "2021-01-04T16:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2NDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2NTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550565900", "bodyText": "access_denied ... access_granted\n\nIf this table is supposed to be sorted alphabetically, these rows are in the wrong place.", "author": "lcawl", "createdAt": "2020-12-31T17:08:49Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNzQ5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551437497", "bodyText": "Not sure, but now that you mention it, I think it should.", "author": "albertzaharovits", "createdAt": "2021-01-04T16:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2NTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5MTI0MA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551591240", "bodyText": "Pushed 72b0951 to reorder the events alphabetically.", "author": "albertzaharovits", "createdAt": "2021-01-04T21:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2NTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2Nzg0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550567843", "bodyText": "I think the wording in the \"run_as_granted\" is better. For example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    another user action they do not have the necessary\n          \n          \n            \n                                                    another user that they do not have the necessary", "author": "lcawl", "createdAt": "2020-12-31T17:11:20Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNzEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551437102", "bodyText": "Another good spot, this was a mess, I brainlessly copied it over.", "author": "albertzaharovits", "createdAt": "2021-01-04T16:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2Nzg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2ODc5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550568799", "bodyText": "Likewise, I think the run_as_granted text is better. Otherwise, I'd change this to something like \"... and they do not have the necessary privileges to do so.\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n          \n          \n            \n                                                    <<security-privileges,privilege>> to do.                            | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`", "author": "lcawl", "createdAt": "2020-12-31T17:12:33Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2OTQ1NA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550569454", "bodyText": "run_as_denied\n\nThis is another row that's out of order if you're sorting alphabetically.", "author": "lcawl", "createdAt": "2020-12-31T17:13:20Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MTA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550571048", "bodyText": "Small nit. Also, this is another row that's not sorted in alphabetical order.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    <<ip-filtering, IP Filter>> for a specific\n          \n          \n            \n                                                    <<ip-filtering, IP filter>> for a specific", "author": "lcawl", "createdAt": "2020-12-31T17:15:18Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MTI1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550571255", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n          \n          \n            \n                                                    <<ip-filtering, IP filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`", "author": "lcawl", "createdAt": "2020-12-31T17:15:36Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MjA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550572078", "bodyText": "\"being\" seems to be an unnecessary word here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to create or\n          \n          \n            \n                                                    is invoked to create or", "author": "lcawl", "createdAt": "2020-12-31T17:16:34Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MjYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550572603", "bodyText": "More unnecessary words:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n          \n          \n            \n                                                    is invoked to delete a specific native user.                     | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:17:17Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyMTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551521063", "bodyText": "I've removed \"being\" all over.", "author": "albertzaharovits", "createdAt": "2021-01-04T19:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MjYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MzAzNw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550573037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n          \n          \n            \n                                                    is invoked to change the password of a native or built-in user.  | |`{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:17:49Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MzMyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550573321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n          \n          \n            \n                                                    is invoked to enable a native or a built-in user.                | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:18:12Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MzYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550573630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n          \n          \n            \n                                                    is invoked to disable a native or a built-in user.               | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:18:34Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3MzkyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550573921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n          \n          \n            \n                                                    is invoked to create or update a role.                           | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:18:59Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NDIwMw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550574203", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n          \n          \n            \n                                                    is invoked to delete a role.                                     | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:19:19Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NDQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550574479", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n          \n          \n            \n                                                    is invoked to create or update a role mapping.                   | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:19:39Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NDY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550574659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n          \n          \n            \n                                                    is invoked to delete a role mapping.                             | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:19:55Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NTAwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550575001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n          \n          \n            \n                                                   invoked to create a new API key.                                 | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:20:23Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>\n+                                        or the <<security-api-grant-api-key, grant API key>> APIs are\n+                                        being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NTI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550575283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to invalidate one or more API Keys.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`\n          \n          \n            \n                                                    is invoked to invalidate one or more API Keys.                   | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:20:43Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>\n+                                        or the <<security-api-grant-api-key, grant API key>> APIs are\n+                                        being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n+| `invalidate_apikeys`              | | Logged when the\n+                                        <<security-api-invalidate-api-key, invalidate API Key API>>\n+                                        is being invoked to invalidate one or more API Keys.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550575511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to add or update one or more application privileges.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`\n          \n          \n            \n                                                    is invoked to add or update one or more application privileges.  | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`", "author": "lcawl", "createdAt": "2020-12-31T17:21:01Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>\n+                                        or the <<security-api-grant-api-key, grant API key>> APIs are\n+                                        being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n+| `invalidate_apikeys`              | | Logged when the\n+                                        <<security-api-invalidate-api-key, invalidate API Key API>>\n+                                        is being invoked to invalidate one or more API Keys.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`\n+| `put_privileges`                  | | Logged when the <<security-api-put-privileges, put privileges API>>\n+                                        is being invoked to add or update one or more application privileges.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NTczNA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550575734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    is being invoked to remove one or more application privileges.         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:30,246+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_privileges\", \"request.id\":\"7wRWVxxqTzCKEspeSP7J8g\", \"delete\":{\"privileges\":{\"application\":\"myapp\",\"privileges\":[\"read\"]}}}`\n          \n          \n            \n                                                    is invoked to remove one or more application privileges.         | | `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:30,246+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_privileges\", \"request.id\":\"7wRWVxxqTzCKEspeSP7J8g\", \"delete\":{\"privileges\":{\"application\":\"myapp\",\"privileges\":[\"read\"]}}}`", "author": "lcawl", "createdAt": "2020-12-31T17:21:22Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>\n+                                        or the <<security-api-grant-api-key, grant API key>> APIs are\n+                                        being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n+| `invalidate_apikeys`              | | Logged when the\n+                                        <<security-api-invalidate-api-key, invalidate API Key API>>\n+                                        is being invoked to invalidate one or more API Keys.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`\n+| `put_privileges`                  | | Logged when the <<security-api-put-privileges, put privileges API>>\n+                                        is being invoked to add or update one or more application privileges.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`\n+| `delete_privileges`               | | Logged when the\n+                                        <<security-api-delete-privilege, delete application privileges API>>\n+                                        is being invoked to remove one or more application privileges.         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:30,246+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_privileges\", \"request.id\":\"7wRWVxxqTzCKEspeSP7J8g\", \"delete\":{\"privileges\":{\"application\":\"myapp\",\"privileges\":[\"read\"]}}}`", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NjY4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550576683", "bodyText": "Not a big deal, but I think this can be separate sentences:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            line in the audit log (the entries themselves do not contain the end-of-line delimiter).\n          \n          \n            \n            line in the audit log. The entries themselves do not contain an end-of-line delimiter.", "author": "lcawl", "createdAt": "2020-12-31T17:22:37Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,88 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+The following is an exhaustive list of the events that can be generated:\n+\n+|======\n+| `anonymous_access_denied`         | | Logged when a request is denied due to a missing\n+                                        authentication token.                                                  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `authentication_success`          | | Logged when a user successfully authenticates.                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+| `authentication_failed`           | | Logged when the authentication token cannot be\n+                                        matched to a known user.                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid\n+                                        authentication token. `<realm>` represents the\n+                                        realm type.                                                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"realm_authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"realm\":\"reserved\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+| `access_denied`                   | | Logged when an authenticated user attempts to execute\n+                                        an action they do not have the necessary\n+                                        <<security-privileges,privilege>> to perform.                          | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+| `access_granted`                  | | Logged when an authenticated user attempts to execute\n+                                        an action they have the necessary privilege to perform.\n+                                        When the `system_access_granted` event is included, all system\n+                                        (internal) actions are also logged. The default setting does\n+                                        not log system actions to avoid cluttering the logs.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+| `run_as_granted`                  | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>> another user that they have\n+                                        the necessary privileges to do.                                        | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:44:42,068+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_granted\", \"user.name\":\"elastic\", \"user.run_as.name\":\"user1\", \"user.realm\":\"reserved\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"superuser\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52623\", \"request.id\":\"dGqPTdEQSX2TAPS3cvc1qA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `run_as_denied`                   | | Logged when an authenticated user attempts to\n+                                        <<run-as-privilege, run as>>\n+                                        another user action they do not have the necessary\n+                                        <<security-privileges,privilege>> to do so.                            | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:49:34,859+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"run_as_denied\", \"user.name\":\"user1\", \"user.run_as.name\":\"user1\", \"user.realm\":\"default_native\", \"user.run_as.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52662\", \"request.id\":\"RcaSt872RG-R_WJBEGfYXA\", \"action\":\"indices:data/read/search\", \"request.name\":\"SearchRequest\", \"indices\":[\"alias1\"]}`\n+| `tampered_request`                | | Logged when the {security-features} detect that the request has\n+                                        been tampered with. Typically relates to `search/scroll`\n+                                        requests when the scroll ID is believed to have been\n+                                        tampered with.                                                         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-11-27T22:00:00,947+0200\", \"node.id\": \"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\": \"rest\", \"event.action\": \"tampered_request\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+| `connection_granted`              | | Logged when an incoming TCP connection passes the\n+                                        <<ip-filtering, IP Filter>> for a specific\n+                                        profile.                                                               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+| `connection_denied`               | | Logged when an incoming TCP connection does not pass the\n+                                        <<ip-filtering, IP Filter>> for a specific profile.                    | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>\n+                                        is being invoked to create or\n+                                        update a native or built-in user. Note that user updates can\n+                                        also change the user's password.                                       | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:09,749+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_user\", \"request.id\":\"VIiSvhp4Riim_tpkQCVSQA\", \"put\":{\"user\":{\"name\":\"user1\",\"enabled\":false,\"roles\":[\"admin\",\"other_role1\"],\"full_name\":\"Jack Sparrow\",\"email\":\"jack@blackpearl.com\",\"has_password\":true,\"metadata\":{\"cunning\":10}}}}`\n+| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>\n+                                        is being invoked to delete a specific native user.                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>\n+                                        is being invoked to change the password of a native or built-in user.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to enable a native or a built-in user.                | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>\n+                                        is being invoked to disable a native or a built-in user.               | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>\n+                                        is being invoked to create or update a role.                           | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>\n+                                        is being invoked to delete a role.                                     | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>\n+                                        is being invoked to create or update a role mapping.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+| `delete_role_mapping`             | | Logged when the\n+                                        <<security-api-delete-role-mapping, delete role mapping API>>\n+                                        is being invoked to delete a role mapping.                             | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>\n+                                        or the <<security-api-grant-api-key, grant API key>> APIs are\n+                                        being invoked to create a new API key.                                 | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n+| `invalidate_apikeys`              | | Logged when the\n+                                        <<security-api-invalidate-api-key, invalidate API Key API>>\n+                                        is being invoked to invalidate one or more API Keys.                   | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`\n+| `put_privileges`                  | | Logged when the <<security-api-put-privileges, put privileges API>>\n+                                        is being invoked to add or update one or more application privileges.  | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`\n+| `delete_privileges`               | | Logged when the\n+                                        <<security-api-delete-privilege, delete application privileges API>>\n+                                        is being invoked to remove one or more application privileges.         | | Example: `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:30,246+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_privileges\", \"request.id\":\"7wRWVxxqTzCKEspeSP7J8g\", \"delete\":{\"privileges\":{\"application\":\"myapp\",\"privileges\":[\"read\"]}}}`\n |======\n \n [discrete]\n [[audit-event-attributes]]\n === Audit event attributes\n \n-In 6.5.0, there is a new <<audit-log-output, `logfile` audit output>> format.\n-This format also brings in a few changes for audit event attributes.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the audit log (the entries themselves do not contain the end-of-line delimiter).", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4MDc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550580751", "bodyText": "If you intend to maintain this list over time, the current wording is okay. Alternatively, you can just provide example values:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `event.action`    ::    The type of event that occurred: `anonymous_access_denied`,\n          \n          \n            \n            `event.action`    ::    The type of event that occurred. For example:`anonymous_access_denied`,", "author": "lcawl", "createdAt": "2020-12-31T17:27:44Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -68,6 +93,30 @@ descriptions for the format that you are using.\n `host.ip`         ::    The bound IP address of the node, with which the node\n                         can be communicated with.\n `host.name`       ::    The unresolved node's hostname.\n+`event.type`      ::    The internal processing layer that generated the event:\n+                        `rest`, `transport`, `ip_filter` or `security_config_change`.\n+                        This is different from `origin.type` because a request\n+                        originating from the REST API is translated to a number\n+                        of transport messages, generating audit events with\n+                        `origin.type: rest` and `event.type: transport`.\n+`event.action`    ::    The type of event that occurred: `anonymous_access_denied`,", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyOTMwMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551529300", "bodyText": "I intend to maintain the list.", "author": "albertzaharovits", "createdAt": "2021-01-04T19:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4MDc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4MTY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550581657", "bodyText": "Likewise if this isn't a definitive list of all possible values, you can change to something like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    `event.action` attribute takes one of the following values:\n          \n          \n            \n                                    `event.action` attribute has a value such as", "author": "lcawl", "createdAt": "2020-12-31T17:28:52Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -68,6 +93,30 @@ descriptions for the format that you are using.\n `host.ip`         ::    The bound IP address of the node, with which the node\n                         can be communicated with.\n `host.name`       ::    The unresolved node's hostname.\n+`event.type`      ::    The internal processing layer that generated the event:\n+                        `rest`, `transport`, `ip_filter` or `security_config_change`.\n+                        This is different from `origin.type` because a request\n+                        originating from the REST API is translated to a number\n+                        of transport messages, generating audit events with\n+                        `origin.type: rest` and `event.type: transport`.\n+`event.action`    ::    The type of event that occurred: `anonymous_access_denied`,\n+                        `authentication_failed`, `authentication_success`,\n+                        `realm_authentication_failed`, `access_denied`, `access_granted`,\n+                        `connection_denied`, `connection_granted`, `tampered_request`,\n+                        `run_as_denied`, or `run_as_granted`. In addition, if\n+                        `event.type` equals `security_config_change`, the\n+                        `event.action` attribute takes one of the following values:", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyOTczMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551529730", "bodyText": "I intend to maintain this list as well.", "author": "albertzaharovits", "createdAt": "2021-01-04T19:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4MTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4MjY4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550582683", "bodyText": "Are the details appearing in the audit log on the client or are they details about the client?  I'm guessing the latter:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            show more details on the requesting client:\n          \n          \n            \n            show more details about the requesting client:", "author": "lcawl", "createdAt": "2020-12-31T17:30:10Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -68,6 +93,30 @@ descriptions for the format that you are using.\n `host.ip`         ::    The bound IP address of the node, with which the node\n                         can be communicated with.\n `host.name`       ::    The unresolved node's hostname.\n+`event.type`      ::    The internal processing layer that generated the event:\n+                        `rest`, `transport`, `ip_filter` or `security_config_change`.\n+                        This is different from `origin.type` because a request\n+                        originating from the REST API is translated to a number\n+                        of transport messages, generating audit events with\n+                        `origin.type: rest` and `event.type: transport`.\n+`event.action`    ::    The type of event that occurred: `anonymous_access_denied`,\n+                        `authentication_failed`, `authentication_success`,\n+                        `realm_authentication_failed`, `access_denied`, `access_granted`,\n+                        `connection_denied`, `connection_granted`, `tampered_request`,\n+                        `run_as_denied`, or `run_as_granted`. In addition, if\n+                        `event.type` equals `security_config_change`, the\n+                        `event.action` attribute takes one of the following values:\n+                        `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+                        `change_enable_user`, `change_disable_user`, `put_privileges`,\n+                        `create_apikey`, `delete_user`, `delete_role`,\n+                        `delete_role_mapping`, `invalidate_apikeys` or `delete_privileges`.\n+`request.id`      ::    A synthetic identifier that can be used to correlate the events\n+                        associated with a particular REST request.\n+\n+In addition, all the events of types `rest`, `transport` and `ip_filter` (but not\n+`security_config_change`) have the following extra attributes, which\n+show more details on the requesting client:", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4NTQ1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550585457", "bodyText": "Since I think you're talking about a single attribute, this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ones); the attributes' value is a nested JSON object (that is not escaped):\n          \n          \n            \n            ones); the attribute's value is a nested JSON object that is not escaped:\n          \n      \n    \n    \n  \n\nP.S.  It's not obvious to me why it's important to say that it is \"not escaped\". This might require more explanation.", "author": "lcawl", "createdAt": "2020-12-31T17:33:46Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNDc0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551534743", "bodyText": "The \"not escaped\" bit is in relation to the request.body attribute which is somewhat similar but not quite.\nI've removed it, it's not helpful, as you say.", "author": "albertzaharovits", "createdAt": "2021-01-04T19:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4NTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4NzY4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550587687", "bodyText": "\"Either\"...\"or\" usually compares two things, so it doesn't seem to work in this case:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        is being deleted. It can either be the config for a `user`, `role`,\n          \n          \n            \n                                        is being deleted. It can be the config for a `user`, `role`,", "author": "lcawl", "createdAt": "2020-12-31T17:36:34Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4ODIzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550588239", "bodyText": "Likewise, removing unnecessary \"either\". It also seems like a word is missing here, so I've guessed it's another \"or\" (though maybe it's \"and\" instead)?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        is being changed. It can either be the `password`, `enable` or `disable`,\n          \n          \n            \n                                        is being changed. It can be the `password`, `enable` or `disable`, or the", "author": "lcawl", "createdAt": "2020-12-31T17:37:20Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNTc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551535752", "bodyText": "I've removed \"either\", thanks for noticing!", "author": "albertzaharovits", "createdAt": "2021-01-04T19:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU4ODIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MDc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550590780", "bodyText": "I usually thing it's clearer when we put the conditional part of the sentence at the beginning... so I can stop reading if it doesn't apply to me.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        created. It contains the `apikey` config object, if the API key is\n          \n          \n            \n                                        created. If the if the API key is", "author": "lcawl", "createdAt": "2020-12-31T17:40:56Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,\n+                            config object for native or built-in users.\n+`create`              ::    The object representation of the new security config that is being\n+                            created. It contains the `apikey` config object, if the API key is", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzOTEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551539108", "bodyText": "Makes sense, thank you!", "author": "albertzaharovits", "createdAt": "2021-01-04T20:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MTI0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550591242", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        created using the <<security-api-create-api-key, create API key API>>,\n          \n          \n            \n                                        created using the <<security-api-create-api-key, create API key API>>, it contains the `apikey` config object.", "author": "lcawl", "createdAt": "2020-12-31T17:41:31Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,\n+                            config object for native or built-in users.\n+`create`              ::    The object representation of the new security config that is being\n+                            created. It contains the `apikey` config object, if the API key is\n+                            created using the <<security-api-create-api-key, create API key API>>,", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MTU0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550591546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        and, in addition, if the API key is created using the\n          \n          \n            \n                                        If the API key is created using the", "author": "lcawl", "createdAt": "2020-12-31T17:41:56Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,\n+                            config object for native or built-in users.\n+`create`              ::    The object representation of the new security config that is being\n+                            created. It contains the `apikey` config object, if the API key is\n+                            created using the <<security-api-create-api-key, create API key API>>,\n+                            and, in addition, if the API key is created using the", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MTc4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550591785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        <<security-api-grant-api-key, grant API key API>>, it also contains\n          \n          \n            \n                                        <<security-api-grant-api-key, grant API key API>>, it contains the `apikey` config object and", "author": "lcawl", "createdAt": "2020-12-31T17:42:16Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,\n+                            config object for native or built-in users.\n+`create`              ::    The object representation of the new security config that is being\n+                            created. It contains the `apikey` config object, if the API key is\n+                            created using the <<security-api-create-api-key, create API key API>>,\n+                            and, in addition, if the API key is created using the\n+                            <<security-api-grant-api-key, grant API key API>>, it also contains", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MjUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550592527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        The only config currently supporting invalidation is of `apikeys`, through\n          \n          \n            \n                                        The only config that currently supports invalidation is `apikeys`, through", "author": "lcawl", "createdAt": "2020-12-31T17:43:21Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +182,78 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones); the attributes' value is a nested JSON object (that is not escaped):\n+\n+`put`                 ::    The object representation of the security config that\n+                            is being created, or the overwrite of an existing config.\n+                            It contains the config for a `user`, `role`, `role_mapping`, or\n+                            for application `privileges`.\n+`delete`              ::    The object representation of the security config that\n+                            is being deleted. It can either be the config for a `user`, `role`,\n+                            `role_mapping` or for application `privileges`.\n+`change`              ::    The object representation of the security config that\n+                            is being changed. It can either be the `password`, `enable` or `disable`,\n+                            config object for native or built-in users.\n+`create`              ::    The object representation of the new security config that is being\n+                            created. It contains the `apikey` config object, if the API key is\n+                            created using the <<security-api-create-api-key, create API key API>>,\n+                            and, in addition, if the API key is created using the\n+                            <<security-api-grant-api-key, grant API key API>>, it also contains\n+                            a `grant` config object.\n+`invalidate`          ::    The object representation of the security configuration that is being invalidated.\n+                            The only config currently supporting invalidation is of `apikeys`, through", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwMzQxNg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550603416", "bodyText": "There's a mismatch in this sentence. Is it the policy that's operating?  Or is it events that operate? I'm guessing the former:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            events from the _kibana_system_ or _admin_user_ principals **and** operating over indices of the\n          \n          \n            \n            events from the _kibana_system_ or _admin_user_ principals and it operates over indices of the", "author": "lcawl", "createdAt": "2020-12-31T17:57:37Z", "path": "x-pack/docs/en/security/auditing/ignore-policy.asciidoc", "diffHunk": "@@ -0,0 +1,79 @@\n+[role=\"xpack\"]\n+[[audit-log-ignore-policy]]\n+=== Logfile audit events ignore policies\n+\n+The comprehensive audit trail is necessary to ensure accountability. It offers tremendous\n+value during incident response and can even be required for demonstrating compliance.\n+\n+The drawback of an audited system is represented by the inevitable performance penalty incurred.\n+In all truth, the audit trail spends _I/O ops_ that are not available anymore for the user's queries.\n+Sometimes the verbosity of the audit trail may become a problem that the event type restrictions,\n+<<audit-log-settings, defined by `include` and `exclude`>>, will not alleviate.\n+\n+*Audit events ignore policies* are a finer way to tune the verbosity of the audit trail.\n+These policies define rules that match audit events which will be _ignored_ (read as: not printed).\n+Rules match on the values of attributes of audit events and complement the <<audit-log-settings, include/exclude>> method.\n+Imagine the corpus of audit events and the policies chopping off unwanted events.\n+With a sole exception, all audit events are subject to the ignore policies.\n+The exception are events of type `security_config_change`, which cannot be filtered out,\n+unless excluded altogether.\n+\n+IMPORTANT: When utilizing audit events ignore policies you are acknowledging potential\n+accountability gaps that could render illegitimate actions undetectable.\n+Please take time to review these policies whenever your system architecture changes.\n+\n+A policy is a named set of filter rules. Each filter rule applies to a single event attribute,\n+one of the `users`, `realms`, `roles` or `indices` attributes. The filter rule defines\n+a list of <<regexp-syntax,Lucene regexp>>, *any* of which has to match the value of the audit\n+event attribute for the rule to match.\n+A policy matches an event if *all* the rules comprising it match the event.\n+An audit event is ignored, therefore not printed, if it matches *any* policy. All other\n+non-matching events are printed as usual.\n+\n+All policies are defined under the `xpack.security.audit.logfile.events.ignore_filters`\n+settings namespace. For example, the following policy named _example1_ matches\n+events from the _kibana_system_ or _admin_user_ principals **and** operating over indices of the", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MDQ5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551570497", "bodyText": "Neither, it's the principals that operate. The phrasing was forced because I tried to fit in the \"and\" keyword. I've rewritten it, hope it makes more sense like this:\n-events from the _kibana_system_ or _admin_user_ principals **and** operating over indices of the\n+events from the _kibana_system_ or _admin_user_ principals that operate over indices of the", "author": "albertzaharovits", "createdAt": "2021-01-04T21:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwMzQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwNDUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550604504", "bodyText": "This name detail seems unnecessary and breaks up the flow of the sentence\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, the following policy named _example2_, will never match `authentication_success` or\n          \n          \n            \n            For example, the following policy will never match `authentication_success` or", "author": "lcawl", "createdAt": "2020-12-31T17:59:06Z", "path": "x-pack/docs/en/security/auditing/ignore-policy.asciidoc", "diffHunk": "@@ -0,0 +1,79 @@\n+[role=\"xpack\"]\n+[[audit-log-ignore-policy]]\n+=== Logfile audit events ignore policies\n+\n+The comprehensive audit trail is necessary to ensure accountability. It offers tremendous\n+value during incident response and can even be required for demonstrating compliance.\n+\n+The drawback of an audited system is represented by the inevitable performance penalty incurred.\n+In all truth, the audit trail spends _I/O ops_ that are not available anymore for the user's queries.\n+Sometimes the verbosity of the audit trail may become a problem that the event type restrictions,\n+<<audit-log-settings, defined by `include` and `exclude`>>, will not alleviate.\n+\n+*Audit events ignore policies* are a finer way to tune the verbosity of the audit trail.\n+These policies define rules that match audit events which will be _ignored_ (read as: not printed).\n+Rules match on the values of attributes of audit events and complement the <<audit-log-settings, include/exclude>> method.\n+Imagine the corpus of audit events and the policies chopping off unwanted events.\n+With a sole exception, all audit events are subject to the ignore policies.\n+The exception are events of type `security_config_change`, which cannot be filtered out,\n+unless excluded altogether.\n+\n+IMPORTANT: When utilizing audit events ignore policies you are acknowledging potential\n+accountability gaps that could render illegitimate actions undetectable.\n+Please take time to review these policies whenever your system architecture changes.\n+\n+A policy is a named set of filter rules. Each filter rule applies to a single event attribute,\n+one of the `users`, `realms`, `roles` or `indices` attributes. The filter rule defines\n+a list of <<regexp-syntax,Lucene regexp>>, *any* of which has to match the value of the audit\n+event attribute for the rule to match.\n+A policy matches an event if *all* the rules comprising it match the event.\n+An audit event is ignored, therefore not printed, if it matches *any* policy. All other\n+non-matching events are printed as usual.\n+\n+All policies are defined under the `xpack.security.audit.logfile.events.ignore_filters`\n+settings namespace. For example, the following policy named _example1_ matches\n+events from the _kibana_system_ or _admin_user_ principals **and** operating over indices of the\n+wildcard form _app-logs*_:\n+\n+[source,yaml]\n+----------------------------\n+xpack.security.audit.logfile.events.ignore_filters:\n+  example1:\n+    users: [\"kibana_system\", \"admin_user\"]\n+    indices: [\"app-logs*\"]\n+----------------------------\n+\n+An audit event generated by the _kibana_system_ user and operating over multiple indices\n+, some of which do not match the indices wildcard, will not match.\n+As expected, operations generated by all other users (even operating only on indices that\n+match the _indices_ filter) will not match this policy either.\n+\n+Audit events of different types may have <<audit-event-attributes, different attributes>>.\n+If an event does not contain an attribute for which some policy defines filters, the\n+event will not match the policy.\n+For example, the following policy named _example2_, will never match `authentication_success` or", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwNjM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550606376", "bodyText": "This is a long sentence, so I suggest breaking it up:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n          \n          \n            \n            line in the `<clustername>_audit.json` file. The entries themselves do not contain the", "author": "lcawl", "createdAt": "2020-12-31T18:01:31Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwNjQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550606476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            end-of-line delimiter).\n          \n          \n            \n            end-of-line delimiter.", "author": "lcawl", "createdAt": "2020-12-31T18:01:40Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n+end-of-line delimiter).", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwODA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550608043", "bodyText": "Is this a typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            are hence not splayed as top-level dot-named fields in the audit event document. That's because\n          \n          \n            \n            are hence not displayed as top-level dot-named fields in the audit event document. That's because", "author": "lcawl", "createdAt": "2020-12-31T18:03:48Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n+end-of-line delimiter).\n+The audit event JSON format is somewhat particular, as *most* fields follow a dotted\n+name syntax, are ordered, and contain non-null string values. This format creates a\n+structured columnar aspect, similar to a CSV, that can be more easily inspected visually\n+(compared to an equivalent nested JSON document).\n+\n+There are however a few attributes that are exceptions to the above format. The `put`,\n+`delete`, `change`, `create` and `invalidate` attributes, which are only present for\n+events with the `event.type: \"security_config_change\"` attribute, contain the *nested JSON*\n+representation of the security change taking effect. The contents of the security config change\n+are hence not splayed as top-level dot-named fields in the audit event document. That's because", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3Mjg1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551572852", "bodyText": "Not a typo, but I obviously got entangled in the explanation. \"Display\" seems better, I'll use it.", "author": "albertzaharovits", "createdAt": "2021-01-04T21:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwODA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwODUwMw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550608503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the fields are specific to the particular kind of the security change and do not show up in\n          \n          \n            \n            the fields are specific to the particular kind of security change and do not show up in", "author": "lcawl", "createdAt": "2020-12-31T18:04:27Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n+end-of-line delimiter).\n+The audit event JSON format is somewhat particular, as *most* fields follow a dotted\n+name syntax, are ordered, and contain non-null string values. This format creates a\n+structured columnar aspect, similar to a CSV, that can be more easily inspected visually\n+(compared to an equivalent nested JSON document).\n+\n+There are however a few attributes that are exceptions to the above format. The `put`,\n+`delete`, `change`, `create` and `invalidate` attributes, which are only present for\n+events with the `event.type: \"security_config_change\"` attribute, contain the *nested JSON*\n+representation of the security change taking effect. The contents of the security config change\n+are hence not splayed as top-level dot-named fields in the audit event document. That's because\n+the fields are specific to the particular kind of the security change and do not show up in", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwOTI0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550609245", "bodyText": "This is another long sentence, so I recommend breaking it up:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            any other audit events, and so the benefits of a columnar format are much more limited; the\n          \n          \n            \n            any other audit events. The benefits of a columnar format are therefore much more limited; the", "author": "lcawl", "createdAt": "2020-12-31T18:05:22Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n+end-of-line delimiter).\n+The audit event JSON format is somewhat particular, as *most* fields follow a dotted\n+name syntax, are ordered, and contain non-null string values. This format creates a\n+structured columnar aspect, similar to a CSV, that can be more easily inspected visually\n+(compared to an equivalent nested JSON document).\n+\n+There are however a few attributes that are exceptions to the above format. The `put`,\n+`delete`, `change`, `create` and `invalidate` attributes, which are only present for\n+events with the `event.type: \"security_config_change\"` attribute, contain the *nested JSON*\n+representation of the security change taking effect. The contents of the security config change\n+are hence not splayed as top-level dot-named fields in the audit event document. That's because\n+the fields are specific to the particular kind of the security change and do not show up in\n+any other audit events, and so the benefits of a columnar format are much more limited; the", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYxNjAxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r550616015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            string value containing the full HTTP request body, ascaped as per the JSON RFC 4677.\n          \n          \n            \n            string value containing the full HTTP request body, escaped as per the JSON RFC 4677.", "author": "lcawl", "createdAt": "2020-12-31T18:14:15Z", "path": "x-pack/docs/en/security/auditing/output-logfile.asciidoc", "diffHunk": "@@ -2,87 +2,39 @@\n [[audit-log-output]]\n === Logfile audit output\n \n-The `logfile` audit output is the default output for auditing. It writes data to\n-the `<clustername>_audit.json` file in the logs directory. To maintain\n-compatibility with releases prior to 6.5.0, a `<clustername>_access.log` file\n-is also generated. They differ in the output format but the contents\n-are similar. For systems that are not ingesting the audit file for search or\n-analytics it is strongly recommended to keep only the newer format.\n-\n-To turn off the deprecated output format, you can disable the logger in the\n-`log4j2.properties` file:\n-\n-[source, properties]\n---------------------------------------------------\n-# change info to off\n-# logger.xpack_security_audit_deprecated_logfile.level = info\n-logger.xpack_security_audit_deprecated_logfile.level = off\n---------------------------------------------------\n-\n-Alternatively, use the\n-<<cluster-update-settings,cluster update settings API>> to dynamically\n-configure the logger:\n-\n-[source,console]\n---------------------------------------------------\n-PUT /_cluster/settings\n-{\n-  \"persistent\": {\n-    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n-  }\n-}\n---------------------------------------------------\n+The `logfile` audit output is the only output for auditing. It writes data to\n+the `<clustername>_audit.json` file in the logs directory.\n \n NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\n any of the audit trails, audit events are forwarded to the root appender, which\n by default points to the `elasticsearch.log` file.\n \n-\n [discrete]\n [[audit-log-entry-format]]\n === Log entry format\n \n-The log entries in the `<clustername>_audit.json` file have the following format:\n-\n-- Each log entry is a one line JSON document and each one is printed on a separate line.\n-- The fields of a log entry are ordered. However, if a field does not have a value it\n-  will not be printed. The precise line pattern, together with the complete field\n-  order, are specified in the `log4j2.properties` config file.\n-- The log entry does not contain nested inner JSON objects, i.e. the doc is flat.\n-- The field names follow a dotted notation to flatten inner objects.\n-- A field's value can be a string, a number or an array of strings.\n-- A field's value, a request body as well, will be escaped as per the JSON RFC 4627.\n+The audit events are formatted as JSON documents, and each event is printed on a separate\n+line in the `<clustername>_audit.json` file (the entries themselves do not contain the\n+end-of-line delimiter).\n+The audit event JSON format is somewhat particular, as *most* fields follow a dotted\n+name syntax, are ordered, and contain non-null string values. This format creates a\n+structured columnar aspect, similar to a CSV, that can be more easily inspected visually\n+(compared to an equivalent nested JSON document).\n+\n+There are however a few attributes that are exceptions to the above format. The `put`,\n+`delete`, `change`, `create` and `invalidate` attributes, which are only present for\n+events with the `event.type: \"security_config_change\"` attribute, contain the *nested JSON*\n+representation of the security change taking effect. The contents of the security config change\n+are hence not splayed as top-level dot-named fields in the audit event document. That's because\n+the fields are specific to the particular kind of the security change and do not show up in\n+any other audit events, and so the benefits of a columnar format are much more limited; the\n+space-saving benefits of the nested structure is the favoured trade-off in this case.\n+\n+When the `request.body` attribute is present (see <<auditing-search-queries>>), it contains a\n+string value containing the full HTTP request body, ascaped as per the JSON RFC 4677.", "originalCommit": "f7cc454a8448bea62aff36e3ce73b66c0722718d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a18083f711f4c29a90b3a11cc4c13b6e7af538af", "url": "https://github.com/elastic/elasticsearch/commit/a18083f711f4c29a90b3a11cc4c13b6e7af538af", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2021-01-04T14:25:28Z", "type": "commit"}, {"oid": "2e2997c6cf7afc1c0e0e5d5742cd8d27b994013d", "url": "https://github.com/elastic/elasticsearch/commit/2e2997c6cf7afc1c0e0e5d5742cd8d27b994013d", "message": "Mention _all as an option for events.include", "committedDate": "2021-01-04T15:29:45Z", "type": "commit"}, {"oid": "cae982d551b04969a3a419ffd5998350ffbf67e3", "url": "https://github.com/elastic/elasticsearch/commit/cae982d551b04969a3a419ffd5998350ffbf67e3", "message": "Update x-pack/docs/en/security/auditing/enable-audit-logging.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:34:19Z", "type": "commit"}, {"oid": "6f15400ed4d291f024637c5452b478e03ec166f4", "url": "https://github.com/elastic/elasticsearch/commit/6f15400ed4d291f024637c5452b478e03ec166f4", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:34:51Z", "type": "commit"}, {"oid": "539303cb405928527cf7241d97fd22968282ee1c", "url": "https://github.com/elastic/elasticsearch/commit/539303cb405928527cf7241d97fd22968282ee1c", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:42:49Z", "type": "commit"}, {"oid": "635d9f73ab231b12911de59c09b32b88ae9d3d87", "url": "https://github.com/elastic/elasticsearch/commit/635d9f73ab231b12911de59c09b32b88ae9d3d87", "message": "Update x-pack/docs/en/security/auditing/output-logfile.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:43:41Z", "type": "commit"}, {"oid": "2fb3890f8cfe2f45b505ecb03c46fb834b3da682", "url": "https://github.com/elastic/elasticsearch/commit/2fb3890f8cfe2f45b505ecb03c46fb834b3da682", "message": "Update x-pack/docs/en/security/auditing/output-logfile.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:44:05Z", "type": "commit"}, {"oid": "170cb64cc4be75bffa6eff4082c8b8bd2cfdb331", "url": "https://github.com/elastic/elasticsearch/commit/170cb64cc4be75bffa6eff4082c8b8bd2cfdb331", "message": "Update x-pack/docs/en/security/auditing/output-logfile.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:44:31Z", "type": "commit"}, {"oid": "02560b9ab460c1d0f96163ae4ad65b42dcbe287a", "url": "https://github.com/elastic/elasticsearch/commit/02560b9ab460c1d0f96163ae4ad65b42dcbe287a", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:45:51Z", "type": "commit"}, {"oid": "20db5c3961e4a0b9abac3e256117977da2d3126f", "url": "https://github.com/elastic/elasticsearch/commit/20db5c3961e4a0b9abac3e256117977da2d3126f", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T15:46:07Z", "type": "commit"}, {"oid": "0f08acd1ecb82db55e43c4a4d0807ad646449b91", "url": "https://github.com/elastic/elasticsearch/commit/0f08acd1ecb82db55e43c4a4d0807ad646449b91", "message": "Subscriptions", "committedDate": "2021-01-04T15:55:50Z", "type": "commit"}, {"oid": "2c329b3ed235883d8b380201e8935f1ba997ea38", "url": "https://github.com/elastic/elasticsearch/commit/2c329b3ed235883d8b380201e8935f1ba997ea38", "message": "event types table header", "committedDate": "2021-01-04T16:11:49Z", "type": "commit"}, {"oid": "4b7ce8598c8833c5d68d499ffd899466a38ef87c", "url": "https://github.com/elastic/elasticsearch/commit/4b7ce8598c8833c5d68d499ffd899466a38ef87c", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2021-01-04T16:18:19Z", "type": "commit"}, {"oid": "751b1456881fae2f6744e46e66b9761e01cdefaf", "url": "https://github.com/elastic/elasticsearch/commit/751b1456881fae2f6744e46e66b9761e01cdefaf", "message": "Reverse typo", "committedDate": "2021-01-04T16:25:09Z", "type": "commit"}, {"oid": "1ab65a4e896523c346e1c9447dd9e94aeabf9eb3", "url": "https://github.com/elastic/elasticsearch/commit/1ab65a4e896523c346e1c9447dd9e94aeabf9eb3", "message": "Realm name", "committedDate": "2021-01-04T16:45:20Z", "type": "commit"}, {"oid": "05d15aa5795e0654a1321f583b1be2857a3e7e16", "url": "https://github.com/elastic/elasticsearch/commit/05d15aa5795e0654a1321f583b1be2857a3e7e16", "message": "run_as_denied", "committedDate": "2021-01-04T16:49:23Z", "type": "commit"}, {"oid": "a75acb753215bd410309947b8e0ad187fe351364", "url": "https://github.com/elastic/elasticsearch/commit/a75acb753215bd410309947b8e0ad187fe351364", "message": "Request body auditing", "committedDate": "2021-01-04T19:19:08Z", "type": "commit"}, {"oid": "86b55585f7a06011cf23683b1548723451aedbe6", "url": "https://github.com/elastic/elasticsearch/commit/86b55585f7a06011cf23683b1548723451aedbe6", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T19:32:00Z", "type": "commit"}, {"oid": "c562d35fdeed71af09e5597ac584d13fe1557997", "url": "https://github.com/elastic/elasticsearch/commit/c562d35fdeed71af09e5597ac584d13fe1557997", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T19:32:55Z", "type": "commit"}, {"oid": "b2ddcb38e457075f735e52a2fac8d3e9b3b9dc58", "url": "https://github.com/elastic/elasticsearch/commit/b2ddcb38e457075f735e52a2fac8d3e9b3b9dc58", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T19:48:08Z", "type": "commit"}, {"oid": "3ac7cf54736fa6d64995c102c19c378924c69392", "url": "https://github.com/elastic/elasticsearch/commit/3ac7cf54736fa6d64995c102c19c378924c69392", "message": "\"Being\" removal", "committedDate": "2021-01-04T20:04:10Z", "type": "commit"}, {"oid": "05111b40dde417fded60c3ad78fdd6b126c8794c", "url": "https://github.com/elastic/elasticsearch/commit/05111b40dde417fded60c3ad78fdd6b126c8794c", "message": "Misc", "committedDate": "2021-01-04T20:04:11Z", "type": "commit"}, {"oid": "352adc37085aba954d7aab634727d51a54b3477c", "url": "https://github.com/elastic/elasticsearch/commit/352adc37085aba954d7aab634727d51a54b3477c", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T20:10:23Z", "type": "commit"}, {"oid": "634099ac28ddec7965f62073f713266f0297e768", "url": "https://github.com/elastic/elasticsearch/commit/634099ac28ddec7965f62073f713266f0297e768", "message": "Update x-pack/docs/en/security/auditing/ignore-policy.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T21:11:11Z", "type": "commit"}, {"oid": "199fdf79bc3f6c32b069d6bcbcd318dacb994767", "url": "https://github.com/elastic/elasticsearch/commit/199fdf79bc3f6c32b069d6bcbcd318dacb994767", "message": "Update x-pack/docs/en/security/auditing/output-logfile.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T21:11:48Z", "type": "commit"}, {"oid": "5dbf00c2a7e02a3bdd072158bdd2f001257907e6", "url": "https://github.com/elastic/elasticsearch/commit/5dbf00c2a7e02a3bdd072158bdd2f001257907e6", "message": "Update x-pack/docs/en/security/auditing/output-logfile.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-04T21:12:15Z", "type": "commit"}, {"oid": "6bd52678c447928ff6f8d89b242f60eecf860893", "url": "https://github.com/elastic/elasticsearch/commit/6bd52678c447928ff6f8d89b242f60eecf860893", "message": "Nit", "committedDate": "2021-01-04T21:54:23Z", "type": "commit"}, {"oid": "33049356df11ed5e35901a95b5a3ba5875815f3f", "url": "https://github.com/elastic/elasticsearch/commit/33049356df11ed5e35901a95b5a3ba5875815f3f", "message": "principals that", "committedDate": "2021-01-04T21:54:24Z", "type": "commit"}, {"oid": "3dc610356949f97219fac88f18483bbdf2e40b42", "url": "https://github.com/elastic/elasticsearch/commit/3dc610356949f97219fac88f18483bbdf2e40b42", "message": "before events reordering", "committedDate": "2021-01-04T21:54:24Z", "type": "commit"}, {"oid": "72b0951082ece53dee1ee5a5a5ad94d0215a329c", "url": "https://github.com/elastic/elasticsearch/commit/72b0951082ece53dee1ee5a5a5ad94d0215a329c", "message": "event types reordered alphabetically", "committedDate": "2021-01-04T21:54:24Z", "type": "commit"}, {"oid": "33674d7ee84114c3f6a6ec47edecb448a5822c4a", "url": "https://github.com/elastic/elasticsearch/commit/33674d7ee84114c3f6a6ec47edecb448a5822c4a", "message": "[DOCS] Fixes table formatting in audit event types", "committedDate": "2021-01-05T01:34:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1OTIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551659229", "bodyText": "Minor suggestion, but I think this sentence can be split:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and `anonymous_access_denied` that are printed on the coordinating node only\n          \n          \n            \n            and `anonymous_access_denied`. The `request.body` attribute is printed on the coordinating node only", "author": "lcawl", "createdAt": "2021-01-05T01:06:32Z", "path": "x-pack/docs/en/security/auditing/auditing-search-queries.asciidoc", "diffHunk": "@@ -26,9 +27,15 @@ audited in plain text when audit events include the request body. Also, the\n request body can contain malicious content that can break a parser consuming\n the audit logs.\n \n-There are only a handful of <<audit-event-types, audit event types>> that are \n-generated in the REST layer and can access the request body. Most of them are not\n-included by default.\n+The request body is printed as an escaped JSON string value (RFC 4627) to the `request.body`\n+event attribute.\n+\n+Not all events contain the `request.body` attribute, even when the above setting\n+is toggled. The ones that do are: `authentication_success`,\n+`authentication_failed`, `realm_authentication_failed`, `tampered_request`, `run_as_denied`,\n+and `anonymous_access_denied` that are printed on the coordinating node only", "originalCommit": "72b0951082ece53dee1ee5a5a5ad94d0215a329c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzYzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r551667635", "bodyText": "Since you had this link in the previous paragraph already, I don't think it's needed here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Rules match on the values of attributes of audit events and complement the <<audit-log-settings, include/exclude>> method.\n          \n          \n            \n            Rules match on the values of attributes of audit events and complement the `include` or `exclude` method.", "author": "lcawl", "createdAt": "2021-01-05T01:36:56Z", "path": "x-pack/docs/en/security/auditing/ignore-policy.asciidoc", "diffHunk": "@@ -0,0 +1,79 @@\n+[role=\"xpack\"]\n+[[audit-log-ignore-policy]]\n+=== Logfile audit events ignore policies\n+\n+The comprehensive audit trail is necessary to ensure accountability. It offers tremendous\n+value during incident response and can even be required for demonstrating compliance.\n+\n+The drawback of an audited system is represented by the inevitable performance penalty incurred.\n+In all truth, the audit trail spends _I/O ops_ that are not available anymore for the user's queries.\n+Sometimes the verbosity of the audit trail may become a problem that the event type restrictions,\n+<<audit-log-settings, defined by `include` and `exclude`>>, will not alleviate.\n+\n+*Audit events ignore policies* are a finer way to tune the verbosity of the audit trail.\n+These policies define rules that match audit events which will be _ignored_ (read as: not printed).\n+Rules match on the values of attributes of audit events and complement the <<audit-log-settings, include/exclude>> method.", "originalCommit": "33674d7ee84114c3f6a6ec47edecb448a5822c4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1059ba23125da7c1f7bd8a8e7eceee6f19a86f10", "url": "https://github.com/elastic/elasticsearch/commit/1059ba23125da7c1f7bd8a8e7eceee6f19a86f10", "message": "Update x-pack/docs/en/security/auditing/auditing-search-queries.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-05T08:20:31Z", "type": "commit"}, {"oid": "906e328c068f7879315ba0e249cff40dbe950721", "url": "https://github.com/elastic/elasticsearch/commit/906e328c068f7879315ba0e249cff40dbe950721", "message": "Update x-pack/docs/en/security/auditing/ignore-policy.asciidoc\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2021-01-05T08:25:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NDY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r557874668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (the node that handles the REST request). Most of them are\n          \n          \n            \n            (the node that handles the REST request). Most of these event types are", "author": "tvernum", "createdAt": "2021-01-15T05:44:58Z", "path": "x-pack/docs/en/security/auditing/auditing-search-queries.asciidoc", "diffHunk": "@@ -26,9 +27,15 @@ audited in plain text when audit events include the request body. Also, the\n request body can contain malicious content that can break a parser consuming\n the audit logs.\n \n-There are only a handful of <<audit-event-types, audit event types>> that are \n-generated in the REST layer and can access the request body. Most of them are not\n-included by default.\n+The request body is printed as an escaped JSON string value (RFC 4627) to the `request.body`\n+event attribute.\n+\n+Not all events contain the `request.body` attribute, even when the above setting\n+is toggled. The ones that do are: `authentication_success`,\n+`authentication_failed`, `realm_authentication_failed`, `tampered_request`, `run_as_denied`,\n+and `anonymous_access_denied`. The `request.body` attribute is printed on the coordinating node only\n+(the node that handles the REST request). Most of them are", "originalCommit": "906e328c068f7879315ba0e249cff40dbe950721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NTE2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r557875167", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Logged when a request is denied due to a missing authentication token.\n          \n          \n            \n            | Logged when a request is denied due to missing authentication credentials.", "author": "tvernum", "createdAt": "2021-01-15T05:46:54Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,146 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+|======\n+| Event action | Description | Example\n+\n+| `access_denied`\n+| Logged when an authenticated user attempts to execute an action they do not\n+have the necessary <<security-privileges,privilege>> to perform.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+\n+| `access_granted`\n+| Logged when an authenticated user attempts to execute an action they have the\n+necessary privilege to perform. When the `system_access_granted` event is\n+included, all system (internal) actions are also logged. The default setting\n+does not log system actions to avoid cluttering the logs.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+\n+| `anonymous_access_denied`\n+| Logged when a request is denied due to a missing authentication token.", "originalCommit": "906e328c068f7879315ba0e249cff40dbe950721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NTIxMA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r557875210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Logged when the authentication token cannot be matched to a known user.\n          \n          \n            \n            | Logged when the authentication credentials cannot be matched to a known user.", "author": "tvernum", "createdAt": "2021-01-15T05:47:05Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,146 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+|======\n+| Event action | Description | Example\n+\n+| `access_denied`\n+| Logged when an authenticated user attempts to execute an action they do not\n+have the necessary <<security-privileges,privilege>> to perform.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+\n+| `access_granted`\n+| Logged when an authenticated user attempts to execute an action they have the\n+necessary privilege to perform. When the `system_access_granted` event is\n+included, all system (internal) actions are also logged. The default setting\n+does not log system actions to avoid cluttering the logs.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+\n+| `anonymous_access_denied`\n+| Logged when a request is denied due to a missing authentication token.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+\n+| `authentication_failed`\n+| Logged when the authentication token cannot be matched to a known user.", "originalCommit": "906e328c068f7879315ba0e249cff40dbe950721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NjA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r557876079", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            update a native or built-in user. Note that user updates can also change the\n          \n          \n            \n            update a native user. Note that user updates can also change the\n          \n      \n    \n    \n  \n\nYou cannot call the put user API on a reserved user.", "author": "tvernum", "createdAt": "2021-01-15T05:50:03Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -2,63 +2,146 @@\n [[audit-event-types]]\n === Audit event types\n \n-When you are <<enable-audit-logging,auditing security events>>, each request can generate\n-multiple audit events.\n-\n-The following is a list of the events that can be generated:\n-\n-|======\n-| `anonymous_access_denied`         | | | Logged when a request is denied due to a missing\n-                                          authentication token.\n-| `authentication_success`          | | | Logged when a user successfully authenticates.\n-| `authentication_failed`           | | | Logged when the authentication token cannot be\n-                                          matched to a known user.\n-| `realm_authentication_failed`     | | | Logged for every realm that fails to present a valid\n-                                          authentication token. `<realm>` represents the\n-                                          realm type.\n-| `access_denied`                   | | | Logged when an authenticated user attempts to execute\n-                                          an action they do not have the necessary\n-                                          <<security-privileges,privilege>> to perform.\n-| `access_granted`                  | | | Logged when an authenticated user attempts to execute\n-                                          an action they have the necessary privilege to perform.\n-                                          When the `system_access_granted` event is included, all system\n-                                          (internal) actions are also logged. The default setting does\n-                                          not log system actions to avoid cluttering the logs.\n-| `run_as_granted`                  | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user that they have the necessary privileges to do.\n-| `run_as_denied`                   | | | Logged when an authenticated user attempts to <<run-as-privilege, run as>>\n-                                          another user action they do not have the necessary\n-                                          <<security-privileges,privilege>> to do so.\n-| `tampered_request`                | | | Logged when the {security-features} detect that the request has\n-                                          been tampered with. Typically relates to `search/scroll`\n-                                          requests when the scroll ID is believed to have been\n-                                          tampered with.\n-| `connection_granted`              | | | Logged when an incoming TCP connection passes the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n-| `connection_denied`               | | | Logged when an incoming TCP connection does not pass the\n-                                          <<ip-filtering, IP Filter>> for a specific\n-                                          profile.\n+When you are <<enable-audit-logging,auditing security events>>, a single client request\n+might generate multiple audit events, across multiple cluster nodes. The common\n+`request.id` attribute can be used to correlate the associated events.\n+\n+|======\n+| Event action | Description | Example\n+\n+| `access_denied`\n+| Logged when an authenticated user attempts to execute an action they do not\n+have the necessary <<security-privileges,privilege>> to perform.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,949+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_denied\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:admin/auto_create\", \"request.name\":\"CreateIndexRequest\", \"indices\":[\"<index-{now/d+1d}>\"]}`\n+\n+| `access_granted`\n+| Logged when an authenticated user attempts to execute an action they have the\n+necessary privilege to perform. When the `system_access_granted` event is\n+included, all system (internal) actions are also logged. The default setting\n+does not log system actions to avoid cluttering the logs.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:30:06,947+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"transport\", \"event.action\":\"access_granted\", \"authentication.type\":\"REALM\", \"user.name\":\"user1\", \"user.realm\":\"default_native\", \"user.roles\":[\"test_role\"], \"origin.type\":\"rest\", \"origin.address\":\"[::1]:52434\", \"request.id\":\"yKOgWn2CRQCKYgZRz3phJw\", \"action\":\"indices:data/write/bulk\", \"request.name\":\"BulkRequest\"}`\n+\n+| `anonymous_access_denied`\n+| Logged when a request is denied due to a missing authentication token.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:56:43,608+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"anonymous_access_denied\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:50543\", \"url.path\":\"/twitter/_async_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"TqA9OisyQ8WTl1ivJUV1AA\"}`\n+\n+| `authentication_failed`\n+| Logged when the authentication token cannot be matched to a known user.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:10:15,510+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_failed\", \"user.name\":\"elastic\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51504\", \"url.path\":\"/_security/user/user1\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"POv8p_qeTl2tb5xoFl0HIg\"}`\n+\n+| `authentication_success`\n+| Logged when a user successfully authenticates.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:03:35,018+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"rest\", \"event.action\":\"authentication_success\", \"authentication.type\":\"REALM\", \"user.name\":\"elastic\", \"user.realm\":\"reserved\", \"origin.type\":\"rest\", \"origin.address\":\"[::1]:51014\", \"realm\":\"reserved\", \"url.path\":\"/twitter/_search\", \"url.query\":\"pretty\", \"request.method\":\"POST\", \"request.id\":\"nHV3UMOoSiu-TaSPWCfxGg\"}`\n+\n+| `change_disable_user`\n+| Logged when the <<security-api-enable-user,enable user API>> is invoked to\n+disable a native or a built-in user.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:28,308+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_disable_user\", \"request.id\":\"qvLIgw_eTvyK3cgV-GaLVg\", \"change\":{\"disable\":{\"user\":{\"name\":\"user1\"}}}}`\n+\n+| `change_enable_user`\n+| Logged when the <<security-api-enable-user,enable user API>> is invoked to\n+enable a native or a built-in user.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T23:17:34,843+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_enable_user\", \"request.id\":\"BO3QU3qeTb-Ei0G0rUOalQ\", \"change\":{\"enable\":{\"user\":{\"name\":\"user1\"}}}}`\n+\n+| `change_password`\n+| Logged when the <<security-api-change-password,change password API>> is\n+invoked to change the password of a native or built-in user.\n+| `{\"type\":\"audit\", \"timestamp\":\"2019-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"change_password\", \"request.id\":\"bz5a1Cc3RrebDMitMGGNCw\", \"change\":{\"password\":{\"user\":{\"name\":\"user1\"}}}}`\n+\n+| `connection_denied`\n+| Logged when an incoming TCP connection does not pass the\n+<<ip-filtering,IP filter>> for a specific profile.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_denied\", \"origin.type\":\"rest\", \"origin.address\":\"10.10.0.20\", \"transport.profile\":\".http\", \"rule\":\"deny 10.10.0.0/16\"}`\n+\n+| `connection_granted`\n+| Logged when an incoming TCP connection passes the <<ip-filtering,IP filter>>\n+for a specific profile.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T21:47:31,526+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"ip_filter\", \"event.action\":\"connection_granted\", \"origin.type\":\"rest\", \"origin.address\":\"::1\", \"transport.profile\":\".http\", \"rule\":\"allow ::1,127.0.0.1\"}`\n+\n+| `create_apikey`\n+| Logged when the <<security-api-create-api-key,create API key>> or the\n+<<security-api-grant-api-key, grant API key>> APIs are invoked to create a new\n+API key.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:33:52,521+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"create_apikey\", \"request.id\":\"9FteCmovTzWHVI-9Gpa_vQ\", \"create\":{\"apikey\":{\"name\":\"test-api-key-1\",\"expiration\":\"10d\",\"role_descriptors\":[{\"cluster\":[\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"index-a*\"],\"privileges\":[\"read\",\"maintenance\"]},{\"names\":[\"in*\",\"alias*\"],\"privileges\":[\"read\"],\"field_security\":{\"grant\":[\"field1*\",\"@timestamp\"],\"except\":[\"field11\"]}}],\"applications\":[],\"run_as\":[]},{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"index-b*\"],\"privileges\":[\"all\"]}],\"applications\":[],\"run_as\":[]}]}}}`\n+\n+| `delete_privileges`\n+| Logged when the\n+<<security-api-delete-privilege,delete application privileges API>> is invoked\n+to remove one or more application privileges.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:30,246+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_privileges\", \"request.id\":\"7wRWVxxqTzCKEspeSP7J8g\", \"delete\":{\"privileges\":{\"application\":\"myapp\",\"privileges\":[\"read\"]}}}`\n+\n+| `delete_role`\n+| Logged when the <<security-api-delete-role,delete role API>> is invoked to\n+delete a role.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:08:11,678+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role\", \"request.id\":\"155IKq3zQdWq-12dgKZRnw\", \"delete\":{\"role\":{\"name\":\"my_admin_role\"}}}`\n+\n+| `delete_role_mapping`\n+| Logged when the <<security-api-delete-role-mapping,delete role mapping API>>\n+is invoked to delete a role mapping.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:12:09,349+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_role_mapping\", \"request.id\":\"Stim-DuoSTCWom0S_xhf8g\", \"delete\":{\"role_mapping\":{\"name\":\"mapping1\"}}}`\n+\n+| `delete_user`\n+| Logged when the <<security-api-delete-user,delete user API>> is invoked to\n+delete a specific native user.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:19:41,345+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"delete_user\", \"request.id\":\"au5a1Cc3RrebDMitMGGNCw\", \"delete\":{\"user\":{\"name\":\"jacknich\"}}}`\n+\n+| `invalidate_apikeys`\n+| Logged when the <<security-api-invalidate-api-key,invalidate API key API>> is\n+invoked to invalidate one or more API keys.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:36:30,247+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"invalidate_apikeys\", \"request.id\":\"7lyIQU9QTFqSrTxD0CqnTQ\", \"invalidate\":{\"apikeys\":{\"owned_by_authenticated_user\":false,\"user\":{\"name\":\"myuser\",\"realm\":\"native1\"}}}}`\n+\n+| `put_privileges`\n+| Logged when the <<security-api-put-privileges,put privileges API>> is invoked\n+to add or update one or more application privileges.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:39:07,779+0200\", \"node.id\":\"9clhpgjJRR-iKzOw20xBNQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_privileges\", \"request.id\":\"1X2VVtNgRYO7FmE0nR_BGA\", \"put\":{\"privileges\":[{\"application\":\"myapp\",\"name\":\"read\",\"actions\":[\"data:read/*\",\"action:login\"],\"metadata\":{\"description\":\"Read access to myapp\"}}]}}`\n+\n+| `put_role`\n+| Logged when the <<security-api-put-role,put role API>> is invoked to create or\n+update a role.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-30T22:27:01,978+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role\", \"request.id\":\"tDYQhv5CRMWM4Sc5Zkk2cQ\", \"put\":{\"role\":{\"name\":\"test_role\",\"role_descriptor\":{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"apm*\"],\"privileges\":[\"all\"],\"field_security\":{\"grant\":[\"granted\"]},\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar\\\"}}\"},{\"names\":[\"apm-all*\"],\"privileges\":[\"all\"],\"query\":\"{\\\"term\\\": {\\\"service.name\\\": \\\"bar2\\\"}}\"}],\"applications\":[],\"run_as\":[]}}}}`\n+\n+| `put_role_mapping`\n+| Logged when the <<security-api-put-role-mapping,put role mapping API>> is\n+invoked to create or update a role mapping.\n+| `{\"type\":\"audit\", \"timestamp\":\"2020-12-31T00:11:13,932+0200\", \"node.id\":\"0RMNyghkQYCc_gVd1G6tZQ\", \"event.type\":\"security_config_change\", \"event.action\":\"put_role_mapping\", \"request.id\":\"kg4h1l_kTDegnLC-0A-XxA\", \"put\":{\"role_mapping\":{\"name\":\"mapping1\",\"roles\":[\"user\"],\"rules\":{\"field\":{\"username\":\"*\"}},\"enabled\":true,\"metadata\":{\"version\":1}}}}`\n+\n+| `put_user`\n+| Logged when the <<security-api-put-user,put user API>> is invoked to create or\n+update a native or built-in user. Note that user updates can also change the", "originalCommit": "906e328c068f7879315ba0e249cff40dbe950721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYwMTY3MA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r558601670", "bodyText": "Ha! yeah, that's right. I think I remember looking specifically about that, but I must've not looked in the transport action for the validation.\nThough, technically, the put_user event will be emitted for reserved users too, because auditing happens before validation.\nBut I'll go with your suggestion.", "author": "albertzaharovits", "createdAt": "2021-01-15T21:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NjA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NjQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r557876478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ones). The attributes' value is a nested JSON object:\n          \n          \n            \n            ones). The attribute's value is a nested JSON object:\n          \n      \n    \n    \n  \n\nThere is only a single attribute isn't there?", "author": "tvernum", "createdAt": "2021-01-15T05:51:37Z", "path": "x-pack/docs/en/security/auditing/event-types.asciidoc", "diffHunk": "@@ -144,13 +240,79 @@ ones):\n \n The events with `event.type` equal to `ip_filter` have one of the following `event.action`\n attribute values: `connection_granted` or `connection_denied`.\n-These event types also have the following extra attributes (in addition to the common\n+These events also have the following extra attributes (in addition to the common\n ones):\n \n `transport_profile`   ::    The transport profile the request targeted.\n `rule`                ::    The <<ip-filtering, IP filtering>> rule that denied\n                             the request.\n \n+==== Audit event attributes of the security_config_change event type\n+\n+The events with the `event.type` attribute equal to `security_config_change` have one of the following\n+`event.action` attribute values: `put_user`, `change_password`, `put_role`, `put_role_mapping`,\n+`change_enable_user`, `change_disable_user`, `put_privileges`, `create_apikey`, `delete_user`,\n+`delete_role`, `delete_role_mapping`, `invalidate_apikeys`, or `delete_privileges`.\n+These events also have *one* of the following extra attributes (in addition to the common\n+ones). The attributes' value is a nested JSON object:", "originalCommit": "906e328c068f7879315ba0e249cff40dbe950721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYwMjcwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66839#discussion_r558602701", "bodyText": "Yes, only one of them.", "author": "albertzaharovits", "createdAt": "2021-01-15T21:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3NjQ3OA=="}], "type": "inlineReview"}, {"oid": "3d3e6cbb79e4fd72133bd2b74d3f9ce5557dfe27", "url": "https://github.com/elastic/elasticsearch/commit/3d3e6cbb79e4fd72133bd2b74d3f9ce5557dfe27", "message": "Merge branch 'master' into docs_audit_request_body_for_certain_transport_requests", "committedDate": "2021-01-15T21:19:26Z", "type": "commit"}, {"oid": "df6a65602b32f51f31c54ef48701f83d34caf1c2", "url": "https://github.com/elastic/elasticsearch/commit/df6a65602b32f51f31c54ef48701f83d34caf1c2", "message": "Update x-pack/docs/en/security/auditing/auditing-search-queries.asciidoc\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2021-01-15T21:21:21Z", "type": "commit"}, {"oid": "403c41b52c0bc3000474647d46960d396f59b2e8", "url": "https://github.com/elastic/elasticsearch/commit/403c41b52c0bc3000474647d46960d396f59b2e8", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2021-01-15T21:21:31Z", "type": "commit"}, {"oid": "97470142bc36f6d93e5200d31c03d9ec41bd416a", "url": "https://github.com/elastic/elasticsearch/commit/97470142bc36f6d93e5200d31c03d9ec41bd416a", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2021-01-15T21:21:46Z", "type": "commit"}, {"oid": "3c57becc5935ff47e41c4ee7c8910ea372e5bf68", "url": "https://github.com/elastic/elasticsearch/commit/3c57becc5935ff47e41c4ee7c8910ea372e5bf68", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2021-01-15T21:27:57Z", "type": "commit"}, {"oid": "dbdc230e7f44e5c18d4f751b6f916eeaa043d27e", "url": "https://github.com/elastic/elasticsearch/commit/dbdc230e7f44e5c18d4f751b6f916eeaa043d27e", "message": "Update x-pack/docs/en/security/auditing/event-types.asciidoc\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2021-01-15T21:29:22Z", "type": "commit"}]}