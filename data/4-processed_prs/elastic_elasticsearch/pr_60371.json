{"pr_number": 60371, "pr_title": "Add repositories metering API", "pr_createdAt": "2020-07-29T10:59:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60371", "timeline": [{"oid": "bfd1ff2bfbbcfe8ff57797d25a81fb6483a2498c", "url": "https://github.com/elastic/elasticsearch/commit/bfd1ff2bfbbcfe8ff57797d25a81fb6483a2498c", "message": "Add repositories stats tracking API", "committedDate": "2020-07-29T12:52:32Z", "type": "forcePushed"}, {"oid": "3e77c5291856ce1cfb708cf803855af906e3efe0", "url": "https://github.com/elastic/elasticsearch/commit/3e77c5291856ce1cfb708cf803855af906e3efe0", "message": "Add repositories stats tracking API", "committedDate": "2020-08-02T11:30:14Z", "type": "commit"}, {"oid": "fc7ca2067f9180798c29612fa886d2862c5084ee", "url": "https://github.com/elastic/elasticsearch/commit/fc7ca2067f9180798c29612fa886d2862c5084ee", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-02T11:30:48Z", "type": "commit"}, {"oid": "fc7ca2067f9180798c29612fa886d2862c5084ee", "url": "https://github.com/elastic/elasticsearch/commit/fc7ca2067f9180798c29612fa886d2862c5084ee", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-02T11:30:48Z", "type": "forcePushed"}, {"oid": "528da9a3a87816f7da98d9a3accc49021c4f98f5", "url": "https://github.com/elastic/elasticsearch/commit/528da9a3a87816f7da98d9a3accc49021c4f98f5", "message": "Add docs", "committedDate": "2020-08-03T10:29:19Z", "type": "commit"}, {"oid": "fcc15c852c18b8343e0be798c8855ba277b4c6f2", "url": "https://github.com/elastic/elasticsearch/commit/fcc15c852c18b8343e0be798c8855ba277b4c6f2", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-03T10:29:43Z", "type": "commit"}, {"oid": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "url": "https://github.com/elastic/elasticsearch/commit/f71fabbf109a52d46c87f76d4609b6b1f720f065", "message": "Fix build scripts", "committedDate": "2020-08-03T11:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465003563", "bodyText": "We generally try to use org.elasticsearch.threadpool.ThreadPool#relativeTimeInMillis for this kind of logic to get a reliable relative timestamp + test-ability. Maybe we should store the safe relative start and and times (but not serialize it) when starting and stopping a repo so we have reliable timestamps no matter what happens to the system clock? Otherwise this would be (as far as I can tell) our first timeout logic based on absolute timestamps.", "author": "original-brownbear", "createdAt": "2020-08-04T12:10:38Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {\n+            archive.poll();\n+        }\n+    }\n+\n+    private boolean shouldEvict(RepositoryStatsSnapshot stats, Instant deadline) {\n+        return stats.wasRepoStoppedBefore(deadline);\n+    }\n+\n+    private Instant getRetentionDeadline() {\n+        return Instant.now().minus(Duration.ofMillis(retentionPeriod.getMillis()));", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MDQ5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465580493", "bodyText": "\ud83d\udc4d thanks for the feedback on that.", "author": "fcofdez", "createdAt": "2020-08-05T09:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNDg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465004896", "bodyText": "Why use Instant throughout these APIs and not just a long relative timestamp?", "author": "original-brownbear", "createdAt": "2020-08-04T12:13:20Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+public final class RepositoryStatsSnapshot implements Writeable, ToXContent {\n+    private final RepositoryInfo repositoryInfo;\n+    private final RepositoryStats repositoryStats;\n+\n+    public RepositoryStatsSnapshot(RepositoryInfo repositoryInfo,\n+                                   RepositoryStats repositoryStats) {\n+        this.repositoryInfo = repositoryInfo;\n+        this.repositoryStats = repositoryStats;\n+    }\n+\n+    public RepositoryStatsSnapshot(StreamInput in) throws IOException {\n+        this.repositoryInfo = new RepositoryInfo(in);\n+        this.repositoryStats = new RepositoryStats(in);\n+    }\n+\n+    public RepositoryInfo getRepositoryInfo() {\n+        return repositoryInfo;\n+    }\n+\n+    public RepositoryStats getRepositoryStats() {\n+        return repositoryStats;\n+    }\n+\n+    public boolean wasRepoStoppedBefore(Instant instant) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MDc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465070746", "bodyText": "Why use optional here? It seems it would make more sense to simply only have this method on MeteredBlobStoreRepository and simply filter for instances of MeteredBlobStoreRepository when looping over all repos instead of having this method on Repository?", "author": "original-brownbear", "createdAt": "2020-08-04T13:59:14Z", "path": "server/src/main/java/org/elasticsearch/repositories/Repository.java", "diffHunk": "@@ -154,8 +155,8 @@ void deleteSnapshots(Collection<SnapshotId> snapshotIds, long repositoryStateId,\n     /**\n      * Returns stats on the repository usage\n      */\n-    default RepositoryStats stats() {\n-        return RepositoryStats.EMPTY_STATS;\n+    default Optional<RepositoryStatsSnapshot> statsSnapshot() {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MTk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465071974", "bodyText": "I think we can just make repositoryInfo a field in this class instead of always recreating the exact same object?", "author": "original-brownbear", "createdAt": "2020-08-04T14:00:53Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.blobstore;\n+\n+import org.elasticsearch.cluster.metadata.RepositoryMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.blobstore.BlobPath;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.indices.recovery.RecoverySettings;\n+import org.elasticsearch.repositories.RepositoryInfo;\n+import org.elasticsearch.repositories.RepositoryStatsSnapshot;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+public abstract class MeteredBlobStoreRepository extends BlobStoreRepository {\n+    private final String ephemeralId;\n+    private final Instant startedAt;\n+\n+    public MeteredBlobStoreRepository(RepositoryMetadata metadata,\n+                                      NamedXContentRegistry namedXContentRegistry,\n+                                      ClusterService clusterService,\n+                                      RecoverySettings recoverySettings,\n+                                      BlobPath basePath) {\n+        super(metadata, namedXContentRegistry, clusterService, recoverySettings, basePath);\n+        this.ephemeralId = UUIDs.randomBase64UUID();\n+        this.startedAt = Instant.now();\n+    }\n+\n+    @Override\n+    public Optional<RepositoryStatsSnapshot> statsSnapshot() {\n+        RepositoryInfo repositoryInfo = new RepositoryInfo(ephemeralId, metadata.name(), metadata.type(), location(), startedAt);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NzcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465077708", "bodyText": "I think we should have a hard limit on the size of this as well as some WARN logging once we get over a certain size.", "author": "original-brownbear", "createdAt": "2020-08-04T14:08:44Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODQxMg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465078412", "bodyText": "We should have some trace/debug logging here and in things like clear to allow us to debug issues in orchestrating users of this functionality.", "author": "original-brownbear", "createdAt": "2020-08-04T14:09:44Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4MTU2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465081569", "bodyText": "This is strange, it seems we only ever archive the stats of just closed repos (but never actually do the withStoppedRepo call anywhere but here), seems this condition is just dead code and we always have to invoke withStoppedRepo?", "author": "original-brownbear", "createdAt": "2020-08-04T14:13:56Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5MDQ4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465090485", "bodyText": "Why not just cache this in a field instead of container when we always build the same string from a constant value of the base path and container?", "author": "original-brownbear", "createdAt": "2020-08-04T14:24:50Z", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java", "diffHunk": "@@ -134,4 +136,16 @@ protected ByteSizeValue chunkSize() {\n     public boolean isReadOnly() {\n         return readonly;\n     }\n+\n+    @Override\n+    protected String location() {\n+        BlobPath location = BlobPath.cleanPath();\n+\n+        location = location.add(container);\n+        for (String path : basePath()) {\n+            location = location.add(path);\n+        }\n+\n+        return location.buildAsString();", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwNTA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465105064", "bodyText": "Maybe it would be better for this to return the evicted stats so that consumers of the API can at least in the absence of IO issues with sending the response completely rule out races between closing a repo and calling this API?\nThat should be more helpful than the current empty response and as a side effect saves a new response type as well.", "author": "original-brownbear", "createdAt": "2020-08-04T14:44:23Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.nodes.TransportNodesAction;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public final class TransportClearRepositoriesStatsArchiveAction extends TransportNodesAction<\n+    ClearRepositoriesStatsArchiveRequest,\n+    ClearRepositoriesStatsArchiveResponse,", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465111657", "bodyText": "Should this be a cluster setting?", "author": "original-brownbear", "createdAt": "2020-08-04T14:53:23Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -89,6 +98,7 @@ public RepositoriesService(Settings settings, ClusterService clusterService, Tra\n             clusterService.addHighPriorityApplier(this);\n         }\n         this.verifyAction = new VerifyNodeRepositoryAction(transportService, clusterService, this);\n+        this.repositoriesStatsArchive = new RepositoriesStatsArchive(REPOSITORIES_STATS_ARCHIVE_RETENTION_PERIOD.get(settings));", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3OTk2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465579963", "bodyText": "I don't have a strong opinion about that, we can move the new settings to the cluster level if we think it would be better.", "author": "fcofdez", "createdAt": "2020-08-05T09:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465111891", "bodyText": "Remove I guess?", "author": "original-brownbear", "createdAt": "2020-08-04T14:53:41Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -328,4 +328,17 @@ protected void doClose() {\n         }\n         super.doClose();\n     }\n+\n+    @Override\n+    protected String location() {\n+        logger.info(\"LOCATION {}\", bucket);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExNjQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465116441", "bodyText": "NIT: This can probably just be a nested class of TransportRepositoriesStatsAction as it's only used there?\nSame goes for the clear request object.", "author": "original-brownbear", "createdAt": "2020-08-04T14:59:37Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/RepositoriesNodeStatsRequest.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.transport.TransportRequest;\n+\n+import java.io.IOException;\n+\n+final class RepositoriesNodeStatsRequest extends TransportRequest {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMDgxMw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465120813", "bodyText": "Should we assert that we never have two RepositoryStatsSnapshot for the same repository ephemeral id in archive?", "author": "original-brownbear", "createdAt": "2020-08-04T15:05:53Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMzI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465123270", "bodyText": "The logic here assumes that archive contents are perfectly ordered by timestamp. I think we can't make that assumption with the system clock and absolute timestamps can we? Also I guess we could have two entries within the same millisecond (more of a test stability concern)?", "author": "original-brownbear", "createdAt": "2020-08-04T15:09:21Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "767edd68fac64acef60fef76138f57ef12a79409", "url": "https://github.com/elastic/elasticsearch/commit/767edd68fac64acef60fef76138f57ef12a79409", "message": "Address first round of review comments", "committedDate": "2020-08-04T19:37:00Z", "type": "commit"}, {"oid": "20a1dfe0d09ef7e4c189618cdfb8301eee8d0336", "url": "https://github.com/elastic/elasticsearch/commit/20a1dfe0d09ef7e4c189618cdfb8301eee8d0336", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-04T19:37:20Z", "type": "commit"}, {"oid": "02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "url": "https://github.com/elastic/elasticsearch/commit/02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "message": "Simplify TransportActions and return repositories stats during archive\nclearing", "committedDate": "2020-08-05T08:58:15Z", "type": "commit"}, {"oid": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "url": "https://github.com/elastic/elasticsearch/commit/a3ce6347f082b3c9e8233314ee971e1a670da5ce", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-05T08:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNjQ2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465636469", "bodyText": "I just realized :) Do we actually want to publicly document this API? If so I think we should make it very clear that this API is not supported/stable (regardless of what kind of stability we might offer here).", "author": "original-brownbear", "createdAt": "2020-08-05T10:45:04Z", "path": "docs/reference/repositories-stats/apis/clear-repositories-stats-archive.asciidoc", "diffHunk": "@@ -0,0 +1,31 @@\n+[[clear-repositories-stats-archive-api]]", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NDE0MA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465684140", "bodyText": "We can state that this API is not stable and can suffer changes, I think it can be useful for consumers of this API to have the information at hand. But I'm not sure what's our policy here.", "author": "fcofdez", "createdAt": "2020-08-05T12:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzNjYxNg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r467836616", "bodyText": "For now, we can just put on the \"experimental tag\", and mark the license as basic.", "author": "ywelsch", "createdAt": "2020-08-10T11:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzNzQ2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r467837463", "bodyText": "We can also add a header that this is an API meant to be used by Elastic's commercial offerings, to avoid any confusion.", "author": "ywelsch", "createdAt": "2020-08-10T11:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNjQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzMwMg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465637302", "bodyText": "Can be long?", "author": "original-brownbear", "createdAt": "2020-08-05T10:46:54Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465638205", "bodyText": "NIT: No need for Objects.equals( anywhere but with stoppedAt?", "author": "original-brownbear", "createdAt": "2020-08-05T10:48:47Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {\n+            throw new IllegalArgumentException(\"createdAt must be before or equal to stoppedAt\");\n+        }\n+        this.stoppedAt = stoppedAt;\n+    }\n+\n+    public RepositoryInfo(StreamInput in) throws IOException {\n+        this.ephemeralId = in.readString();\n+        this.name = in.readString();\n+        this.type = in.readString();\n+        this.location = in.readString();\n+        this.startedAt = in.readLong();\n+        this.stoppedAt = in.readOptionalLong();\n+    }\n+\n+    public RepositoryInfo stopped(long stoppedAt) {\n+        assert isStopped() == false : \"The repository is already stopped\";\n+\n+        return new RepositoryInfo(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    public boolean isStopped() {\n+        return stoppedAt != null;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(ephemeralId);\n+        out.writeString(name);\n+        out.writeString(type);\n+        out.writeString(location);\n+        out.writeLong(startedAt);\n+        out.writeOptionalLong(stoppedAt);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"repository_name\", name);\n+        builder.field(\"repository_type\", type);\n+        builder.field(\"repository_location\", location);\n+        builder.field(\"repository_ephemeral_id\", ephemeralId);\n+        builder.field(\"repository_started_at\", startedAt);\n+        if (stoppedAt != null) {\n+            builder.field(\"repository_stopped_at\", stoppedAt);\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryInfo that = (RepositoryInfo) o;\n+        return Objects.equals(ephemeralId, that.ephemeralId) &&", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODc2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465638767", "bodyText": "Might as well use Strings.toString(this) here?", "author": "original-brownbear", "createdAt": "2020-08-05T10:49:45Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {\n+            throw new IllegalArgumentException(\"createdAt must be before or equal to stoppedAt\");\n+        }\n+        this.stoppedAt = stoppedAt;\n+    }\n+\n+    public RepositoryInfo(StreamInput in) throws IOException {\n+        this.ephemeralId = in.readString();\n+        this.name = in.readString();\n+        this.type = in.readString();\n+        this.location = in.readString();\n+        this.startedAt = in.readLong();\n+        this.stoppedAt = in.readOptionalLong();\n+    }\n+\n+    public RepositoryInfo stopped(long stoppedAt) {\n+        assert isStopped() == false : \"The repository is already stopped\";\n+\n+        return new RepositoryInfo(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    public boolean isStopped() {\n+        return stoppedAt != null;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(ephemeralId);\n+        out.writeString(name);\n+        out.writeString(type);\n+        out.writeString(location);\n+        out.writeLong(startedAt);\n+        out.writeOptionalLong(stoppedAt);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"repository_name\", name);\n+        builder.field(\"repository_type\", type);\n+        builder.field(\"repository_location\", location);\n+        builder.field(\"repository_ephemeral_id\", ephemeralId);\n+        builder.field(\"repository_started_at\", startedAt);\n+        if (stoppedAt != null) {\n+            builder.field(\"repository_stopped_at\", stoppedAt);\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryInfo that = (RepositoryInfo) o;\n+        return Objects.equals(ephemeralId, that.ephemeralId) &&\n+            Objects.equals(name, that.name) &&\n+            Objects.equals(type, that.type) &&\n+            Objects.equals(location, that.location) &&\n+            Objects.equals(startedAt, that.startedAt) &&\n+            Objects.equals(stoppedAt, that.stoppedAt);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RepositoryInfo{\" +", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465639243", "bodyText": "NIT: no need for  Objects.equals(, neither of these is ever null", "author": "original-brownbear", "createdAt": "2020-08-05T10:50:38Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java", "diffHunk": "@@ -55,4 +56,24 @@ public RepositoryStats merge(RepositoryStats otherStats) {\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeMap(requestCounts, StreamOutput::writeString, StreamOutput::writeLong);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryStats that = (RepositoryStats) o;\n+        return Objects.equals(requestCounts, that.requestCounts);", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465666468", "bodyText": "Should we remove org.elasticsearch.xpack.searchablesnapshots.rest.RestRepositoryStatsAction and associated logic now that we have this in this PR?", "author": "original-brownbear", "createdAt": "2020-08-05T11:42:55Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportRepositoriesStatsAction.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.nodes.TransportNodesAction;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public final class TransportRepositoriesStatsAction extends TransportNodesAction<", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3ODMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465678317", "bodyText": "We can remove it in a separate PR if we think it won't be useful anymore, wdyt?", "author": "fcofdez", "createdAt": "2020-08-05T12:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3ODg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465678859", "bodyText": "Fine as well :) just figured we shouldn't forget it.", "author": "original-brownbear", "createdAt": "2020-08-05T12:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTMzOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465671338", "bodyText": "After I had some time to think about this ... I wonder, why make life for users so hard by adding node_id here. Wouldn't it be much easier if we just allowed for passing a list of emphemeral_id for archived entries instead so that the consuming API can delete after having safely persisted an id avoiding essentially all kinds of possible races and making this much easier to use?\nIn the implementation we could simply broadcast the delete to all nodes so we don't have to figure out what id lives on what node I guess to keep it simple.", "author": "original-brownbear", "createdAt": "2020-08-05T11:52:50Z", "path": "docs/reference/repositories-stats/apis/clear-repositories-stats-archive.asciidoc", "diffHunk": "@@ -0,0 +1,31 @@\n+[[clear-repositories-stats-archive-api]]\n+=== Clear repositories statistics archive API\n+++++\n+<titleabbrev>Clear repositories statistics archive API</titleabbrev>\n+++++\n+\n+Removes the archived repositories statistics in the cluster.\n+\n+[[clear-repositories-stats-archive-api-request]]\n+==== {api-request-title}\n+\n+`DELETE /_nodes/<node_id>/_repositories_stats`", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3NTEwNg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465675106", "bodyText": "@ywelsch maybe you have an opinion on this as well?", "author": "original-brownbear", "createdAt": "2020-08-05T12:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NTUxOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465685518", "bodyText": "if we think this API would be hard to use, maybe we can limit its scope to a single node? I added it as I needed a way to clear the archive between tests, if there's a simpler way that can simplify this I'm open to it \ud83d\udc4d .", "author": "fcofdez", "createdAt": "2020-08-05T12:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzOTE3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r467839173", "bodyText": "Perhaps we can use a logical timestamp here to say \"only clear repositories that I've observed\", and use the cluster state version as such a logical timestamp. I think I would prefer that over a list of all IDs for archived entries. The API would still allow the ability to select nodes (in particular allow for _local).", "author": "ywelsch", "createdAt": "2020-08-10T11:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3NDQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465674484", "bodyText": "We still don't have a concept of sending this request to a specific node and supplying a ?local=true flag do we? I think this was requested and makes a lot of sense to have since it would allow for just sending these requests to all the nodes by transport address instead of having to deal with timeouts and whatnot from the combined request?", "author": "original-brownbear", "createdAt": "2020-08-05T11:59:03Z", "path": "docs/reference/repositories-stats/apis/get-repositories-stats.asciidoc", "diffHunk": "@@ -0,0 +1,142 @@\n+[[get-repositories-stats-api]]\n+=== Repositories statistics API\n+++++\n+<titleabbrev>Repositories statistics</titleabbrev>\n+++++\n+\n+Returns cluster repositories utilization statistics.\n+\n+[[get-repositories-stats-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_stats`\n+\n+[[get-repositories-stats-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories statistics API to retrieve repository utilization statistics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-stats-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-stats-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-stats-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MDUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465680522", "bodyText": "TransportGetRepositoriesAction is a subclass of TransportNodesAction, so it can resolve _local and _all nodeId references to query the local node or all the nodes transparently.", "author": "fcofdez", "createdAt": "2020-08-05T12:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3NDQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MTU3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465681579", "bodyText": "\ud83e\udd26 right my bad :)", "author": "original-brownbear", "createdAt": "2020-08-05T12:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3NDQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzNjIyNg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r467836226", "bodyText": "I would not call this repository stats API,  but repository metering API instead. Same goes for the naming throughout the PR as well as the PR title.", "author": "ywelsch", "createdAt": "2020-08-10T11:17:49Z", "path": "docs/reference/repositories-stats/apis/get-repositories-stats.asciidoc", "diffHunk": "@@ -0,0 +1,142 @@\n+[[get-repositories-stats-api]]\n+=== Repositories statistics API", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "158ad067e95df1dbdbaaf9e5711ee9d35260d890", "url": "https://github.com/elastic/elasticsearch/commit/158ad067e95df1dbdbaaf9e5711ee9d35260d890", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-10T12:10:52Z", "type": "commit"}, {"oid": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "url": "https://github.com/elastic/elasticsearch/commit/b4bb846c0979abb0cdd840f95c6587319af55f1e", "message": "Keep track of cluster version on RepositoryStatsSnapshot.\n\nAllow clearing up to a particular cluster version.", "committedDate": "2020-08-10T16:53:12Z", "type": "commit"}, {"oid": "81b2bf7cf3adb277fedd5b4eb77e71bf485e2796", "url": "https://github.com/elastic/elasticsearch/commit/81b2bf7cf3adb277fedd5b4eb77e71bf485e2796", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-10T16:54:02Z", "type": "commit"}, {"oid": "d0a5995a63e5d617c0a2ee1a7512a84c3c26df60", "url": "https://github.com/elastic/elasticsearch/commit/d0a5995a63e5d617c0a2ee1a7512a84c3c26df60", "message": "Fix test", "committedDate": "2020-08-11T08:25:37Z", "type": "commit"}, {"oid": "278eaa7181c7c2f6fc98b50570b0d864dd47e6be", "url": "https://github.com/elastic/elasticsearch/commit/278eaa7181c7c2f6fc98b50570b0d864dd47e6be", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-11T08:25:53Z", "type": "commit"}, {"oid": "d8aea38b0403d0ce0b99485ede743c5fb7d00461", "url": "https://github.com/elastic/elasticsearch/commit/d8aea38b0403d0ce0b99485ede743c5fb7d00461", "message": "Rename repositories-stats to repositories-metering", "committedDate": "2020-08-11T12:19:52Z", "type": "commit"}, {"oid": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "url": "https://github.com/elastic/elasticsearch/commit/7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "message": "Fix styleCheck", "committedDate": "2020-08-11T12:29:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MDA5MA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r468580090", "bodyText": "I'm not really sure if this is a good idea. This is used to populate the clusterVersion field for the active repositories stats. An alternative would be not populating that field for the active repositories.", "author": "fcofdez", "createdAt": "2020-08-11T13:30:34Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -75,6 +86,9 @@\n \n     private final Map<String, Repository> internalRepositories = ConcurrentCollections.newConcurrentMap();\n     private volatile Map<String, Repository> repositories = Collections.emptyMap();\n+    private final RepositoriesStatsArchive repositoriesStatsArchive;\n+\n+    private volatile long lastKnownClusterVersion;", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469145223", "bodyText": "This seems weird indeed. Technically I guess there is a relationship between the CS version and the stats, this is pretty unintuitive. Can't we simply increment a counter whenever we archive and clear any stats instead and use that as our logical time stamp for example?", "author": "original-brownbear", "createdAt": "2020-08-12T09:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzMzc1NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469333754", "bodyText": "what about ListBlobs?", "author": "ywelsch", "createdAt": "2020-08-12T15:11:53Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NDYwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469344609", "bodyText": "I think we should rename these so that they more closely reflect what's being called in Azure. For example, this should be \"GetBlobProperties\", in order to avoid confusion with the HTTP verb (there is not always 1-to-1 correspondance)", "author": "ywelsch", "createdAt": "2020-08-12T15:27:22Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`HEAD`::", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NTI4NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469345284", "bodyText": "Also, ideally we should link to the pricing categorization page here (https://azure.microsoft.com/en-us/pricing/details/storage/blobs/)", "author": "ywelsch", "createdAt": "2020-08-12T15:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NDYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NzQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469347499", "bodyText": "same here, perhaps rename to \"storage.objects.insert\", ...", "author": "ywelsch", "createdAt": "2020-08-12T15:31:24Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`HEAD`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GET`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`PUT`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`GET`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[GET] requests.\n+`LIST`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[LIST] requests.\n+`PUT`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[PUT] requests.\n+`POST`::", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MTI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469351293", "bodyText": "Also link to https://cloud.google.com/storage/pricing", "author": "ywelsch", "createdAt": "2020-08-12T15:36:47Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`HEAD`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GET`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`PUT`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MTYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469351623", "bodyText": "Link to https://aws.amazon.com/s3/pricing/", "author": "ywelsch", "createdAt": "2020-08-12T15:37:16Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`HEAD`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GET`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`PUT`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`GET`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[GET] requests.\n+`LIST`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[LIST] requests.\n+`PUT`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[PUT] requests.\n+`POST`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[POST] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `S3`", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MjcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469352708", "bodyText": "similar, call GetObject?", "author": "ywelsch", "createdAt": "2020-08-12T15:38:46Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]\n+=== Repositories metrics API\n+++++\n+<titleabbrev>Repositories metrics API</titleabbrev>\n+++++\n+\n+Returns cluster repositories metrics.\n+\n+[[get-repositories-metrics-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metrics`\n+\n+[[get-repositories-metrics-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metrics API to retrieve repositories metrics in a cluster.\n+\n+\n+All the nodes selective options are explained <<cluster-nodes,here>>.\n+\n+[[get-repositories-metrics-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+[[get-repositories-metrics-api-query-params]]\n+==== {api-query-parms-title}\n+\n+[role=\"child_attributes\"]\n+[[get-repositories-metrics-api-response-body]]\n+==== {api-response-body-title}\n+\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`::\n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`HEAD`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GET`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`PUT`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`GET`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[GET] requests.\n+`LIST`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[LIST] requests.\n+`PUT`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[PUT] requests.\n+`POST`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[POST] requests.\n+======\n++\n+.Properties of `request_counts` for repository type `S3`\n+[%collapsible%open]\n+======\n+`GET`::\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html[GET] requests.", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1Mzc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469353786", "bodyText": "Why call this metrics instead of metering?\nMetrics sounds too general here, and is too similar to general \"stats\", what we wanted to avoid in the first place with the \"metering\" terminology.", "author": "ywelsch", "createdAt": "2020-08-12T15:40:17Z", "path": "docs/reference/repositories-metering/repositories-metering.asciidoc", "diffHunk": "@@ -0,0 +1,15 @@\n+[role=\"xpack\"]\n+[testenv=\"enterprise\"]\n+[[repositories-metering-apis]]\n+== Repositories metering APIs\n+\n+experimental[]\n+\n+You can use the following APIs to retrieve repositories metrics.\n+This is an API meant to be used by Elastic's commercial offerings.\n+\n+* <<get-repositories-metrics-api,Get repositories metrics>>", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NDUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469354510", "bodyText": "Set role and testenv here?", "author": "ywelsch", "createdAt": "2020-08-12T15:41:09Z", "path": "docs/reference/repositories-metering/apis/get-repositories-metrics.asciidoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[get-repositories-metrics-api]]", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NDU4OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469354588", "bodyText": "Set role and testenv here?", "author": "ywelsch", "createdAt": "2020-08-12T15:41:13Z", "path": "docs/reference/repositories-metering/apis/clear-repositories-metrics-archive.asciidoc", "diffHunk": "@@ -0,0 +1,37 @@\n+[[clear-repositories-metrics-archive-api]]", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NDk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469354974", "bodyText": "maybe mention where that version is coming from?", "author": "ywelsch", "createdAt": "2020-08-12T15:41:34Z", "path": "docs/reference/repositories-metering/apis/clear-repositories-metrics-archive.asciidoc", "diffHunk": "@@ -0,0 +1,37 @@\n+[[clear-repositories-metrics-archive-api]]\n+=== Clear repositories metrics archive API\n+++++\n+<titleabbrev>Clear repositories metrics archive API</titleabbrev>\n+++++\n+\n+Removes the archived repositories metrics in the cluster up to\n+a particular version.", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NjA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469356048", "bodyText": "I think it would be good to add a few words on how this API is supposed to be used, even if it's just for our commercial offerings", "author": "ywelsch", "createdAt": "2020-08-12T15:42:29Z", "path": "docs/reference/repositories-metering/repositories-metering.asciidoc", "diffHunk": "@@ -0,0 +1,15 @@\n+[role=\"xpack\"]\n+[testenv=\"enterprise\"]\n+[[repositories-metering-apis]]\n+== Repositories metering APIs\n+\n+experimental[]\n+\n+You can use the following APIs to retrieve repositories metrics.\n+This is an API meant to be used by Elastic's commercial offerings.", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "47c18fab856095c37bbd2b5fac2006083cf63154", "url": "https://github.com/elastic/elasticsearch/commit/47c18fab856095c37bbd2b5fac2006083cf63154", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-18T08:11:33Z", "type": "commit"}, {"oid": "d7020cb2e3aef959d1976b0954569acc3b12f561", "url": "https://github.com/elastic/elasticsearch/commit/d7020cb2e3aef959d1976b0954569acc3b12f561", "message": "Rename operation names on repositories metering", "committedDate": "2020-08-18T11:54:47Z", "type": "commit"}, {"oid": "ddc2cc19e54765697fa2be4994db79e9a3416075", "url": "https://github.com/elastic/elasticsearch/commit/ddc2cc19e54765697fa2be4994db79e9a3416075", "message": "Fix tests", "committedDate": "2020-08-18T15:09:35Z", "type": "commit"}, {"oid": "1f93514257cf6d85adec4dd5d11040d8b17cb756", "url": "https://github.com/elastic/elasticsearch/commit/1f93514257cf6d85adec4dd5d11040d8b17cb756", "message": "Improve docs", "committedDate": "2020-08-18T15:10:02Z", "type": "commit"}, {"oid": "fdce53fbdcb992c5c043fc6571a20104adddf2ae", "url": "https://github.com/elastic/elasticsearch/commit/fdce53fbdcb992c5c043fc6571a20104adddf2ae", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-18T15:10:21Z", "type": "commit"}, {"oid": "ee0c47b5ced68f9753d6cfec87b233194bdcc515", "url": "https://github.com/elastic/elasticsearch/commit/ee0c47b5ced68f9753d6cfec87b233194bdcc515", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-20T08:31:12Z", "type": "commit"}, {"oid": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "url": "https://github.com/elastic/elasticsearch/commit/2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-31T08:58:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3MzgwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480173805", "bodyText": "perhaps \"metering information\" instead of \"meterings\" (not sure if that's even a word)", "author": "ywelsch", "createdAt": "2020-08-31T14:36:30Z", "path": "docs/reference/repositories-metering-api/apis/clear-repositories-metering-archive.asciidoc", "diffHunk": "@@ -0,0 +1,35 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[clear-repositories-metering-archive-api]]\n+=== Clear repositories metering archive\n+++++\n+<titleabbrev>Clear repositories metering archive</titleabbrev>\n+++++\n+\n+Removes the archived repositories meterings present in the cluster.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3NDM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480174362", "bodyText": "repository metering information (not metrics)", "author": "ywelsch", "createdAt": "2020-08-31T14:37:18Z", "path": "docs/reference/repositories-metering-api/apis/get-repositories-metering.asciidoc", "diffHunk": "@@ -0,0 +1,35 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[get-repositories-metering-api]]\n+=== Get repositories meterings\n+++++\n+<titleabbrev>Get repositories meterings</titleabbrev>\n+++++\n+\n+Returns cluster repositories meterings.\n+\n+[[get-repositories-metering-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metering`\n+\n+[[get-repositories-metering-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metering API to retrieve repositories metrics in a cluster.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3NDkxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480174919", "bodyText": "\"monotonically non-decreasing\", to be technically correct.", "author": "ywelsch", "createdAt": "2020-08-31T14:38:13Z", "path": "docs/reference/repositories-metering-api/apis/get-repositories-metering.asciidoc", "diffHunk": "@@ -0,0 +1,35 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[get-repositories-metering-api]]\n+=== Get repositories meterings\n+++++\n+<titleabbrev>Get repositories meterings</titleabbrev>\n+++++\n+\n+Returns cluster repositories meterings.\n+\n+[[get-repositories-metering-api-request]]\n+==== {api-request-title}\n+\n+`GET /_nodes/<node_id>/_repositories_metering`\n+\n+[[get-repositories-metering-api-desc]]\n+==== {api-description-title}\n+\n+You can use the cluster repositories metering API to retrieve repositories metrics in a cluster.\n+\n+This API exposes monotonic increasing counters and it's expected that clients would durably store ", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3ODE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480178179", "bodyText": "Why does this denote the version when the object was created? Should this not be the CS version when it got archived (perhaps call it archive_version then?)?", "author": "ywelsch", "createdAt": "2020-08-31T14:43:26Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`:: \n+(long) \n+The cluster state version when this object was created, this field", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3ODQwMA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480178400", "bodyText": "perhaps explain what  archived means here?", "author": "ywelsch", "createdAt": "2020-08-31T14:43:47Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3OTUzNg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480179536", "bodyText": "remove extra space", "author": "ywelsch", "createdAt": "2020-08-31T14:45:33Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`:: \n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version. This field is only present for archived\n+objects.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`GetBlobProperties`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GetBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`ListBlobs`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n+`PutBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+`PutBlobBlock`::\n+(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MDY3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480180672", "bodyText": "We should avoid dots in field names. Especially if the stats are going to be indexed into ES again (which treats dots in field names as subobjects).", "author": "ywelsch", "createdAt": "2020-08-31T14:47:11Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`:: \n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version. This field is only present for archived\n+objects.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`GetBlobProperties`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GetBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`ListBlobs`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n+`PutBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+`PutBlobBlock`::\n+(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.\n+\n+Azure storage https://azure.microsoft.com/en-us/pricing/details/storage/blobs/[pricing].\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`storage.objects.get`::", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MzA4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480183081", "bodyText": "What does \"Number of MultiPart requests\" mean? Multipart uploading is a three-step process involving multiple requests. What is a \"MultiPart request\" in this context?\nSame question for the other repo types", "author": "ywelsch", "createdAt": "2020-08-31T14:50:48Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`:: \n+(long) \n+The cluster state version when this object was created, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to a observed cluster version. This field is only present for archived\n+objects.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`GetBlobProperties`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GetBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`ListBlobs`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n+`PutBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+`PutBlobBlock`::\n+(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.\n+\n+Azure storage https://azure.microsoft.com/en-us/pricing/details/storage/blobs/[pricing].\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`storage.objects.get`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get] requests.\n+`storage.objects.list`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list] requests.\n+`storage.objects.resumable-insert`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[resumable insert] requests.\n+`storage.objects.insert`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[insert] requests.\n+\n+Google Cloud storage https://cloud.google.com/storage/pricing[pricing].\n+======\n++\n+.Properties of `request_counts` for repository type `S3`\n+[%collapsible%open]\n+======\n+`GetObject`::\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html[GetObject] requests.\n+`ListObjects`::\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html[ListObjects] requests.\n+`PutObject`::\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html[PutObject] requests.\n+`PutMultipartObject`::\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html[MultiPart] requests.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NDQ1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480184456", "bodyText": "remove \"meant to be\"", "author": "ywelsch", "createdAt": "2020-08-31T14:52:55Z", "path": "docs/reference/repositories-metering-api/repositories-metering-apis.asciidoc", "diffHunk": "@@ -0,0 +1,16 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[repositories-metering-apis]]\n+== Repositories metering APIs\n+\n+experimental[]\n+\n+You can use the following APIs to retrieve repositories meterings.\n+\n+This is an API meant to be used by Elastic's commercial offerings.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzA0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480187047", "bodyText": "should this be >= in case we do not use super-fine-grained time resolution?", "author": "ywelsch", "createdAt": "2020-08-31T14:56:50Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMjU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482012575", "bodyText": "This condition is to validate startedAt is less or equals to stoppedAt failing otherwise.", "author": "fcofdez", "createdAt": "2020-09-02T11:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4OTIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480189220", "bodyText": "This should probably be defined more clearly for all supported repository types? Also will there be a need for a client of this API (i.e. Cloud) to deconstruct the location back into bucket and base_path? If so, separate (repository-type specific) fields might be better, similar to how the \"request_counts\" object works?", "author": "ywelsch", "createdAt": "2020-08-31T15:00:10Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwNjQ2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480206462", "bodyText": "I can see the confusion with this version field, and how to use it correctly. This needs  documentation (i.e. with more detail on how to use it), also mentioning caveats etc.", "author": "ywelsch", "createdAt": "2020-08-31T15:27:43Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,135 @@\n+tag::repositories-metering-body[]\n+`<node_id>`::\n+(Optional, string) Comma-separated list of node IDs or names used to limit\n+returned information.\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metrics for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metrics for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(string) \n+Represents an unique location within the repository, \n+i.e. a `bucket` + `base_path`.\n+\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+\n+`cluster_version`:: ", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "449069a77d017fd1df3c90c2f06fe322706773d5", "url": "https://github.com/elastic/elasticsearch/commit/449069a77d017fd1df3c90c2f06fe322706773d5", "message": "Address review comments", "committedDate": "2020-09-02T10:24:31Z", "type": "commit"}, {"oid": "413472a6a8279be314574ba2321a8b9921befd9e", "url": "https://github.com/elastic/elasticsearch/commit/413472a6a8279be314574ba2321a8b9921befd9e", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-02T10:24:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MDE3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482770177", "bodyText": "perhaps \"repository instantiations\" instead of \"repository versions\".", "author": "ywelsch", "createdAt": "2020-09-03T07:37:41Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -71,13 +105,19 @@ since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n `archived`::\n (boolean) \n A flag that tells whether or not this object has been archived.\n+When a repository is closed or updated the repository metering information\n+is archived and kept for a certain period of time. This allows retrieving\n+the repository metering information of previous repository versions.", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NTc5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482775793", "bodyText": "Let's separate \"PutBlock\" and \"PutBlockList\" just as Azure does as well", "author": "ywelsch", "createdAt": "2020-09-03T07:46:57Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -95,23 +135,25 @@ grouped by request type.\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n `PutBlob`::\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n-`PutBlobBlock`::\n-(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.\n+`PutBlock`::", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5OTA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482799076", "bodyText": "Does this include resumable uploads? I find it confusing how this relates to ResumableInsertObject given what you link to here provides docs on Simple, Multi-part, and Resumable uploads.\nDo we even want to make the distinction between these three different upload types? Given that they are all billed the same way (with resumable uploads containing multiple HTTP requests), we could either just expose InsertObject, or refine this into InsertMultipartObject, InsertResumableObject, etc. We can independently track this internally at a more fine-grained level", "author": "ywelsch", "createdAt": "2020-09-03T08:25:07Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -95,23 +135,25 @@ grouped by request type.\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n `PutBlob`::\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n-`PutBlobBlock`::\n-(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.\n+`PutBlock`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] and https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list[Put Block List] requests.\n \n Azure storage https://azure.microsoft.com/en-us/pricing/details/storage/blobs/[pricing].\n ======\n +\n .Properties of `request_counts` for repository type `GCP`\n [%collapsible%open]\n ======\n-`storage.objects.get`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get] requests.\n-`storage.objects.list`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list] requests.\n-`storage.objects.resumable-insert`::\n-(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[resumable insert] requests.\n-`storage.objects.insert`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[insert] requests.\n+`GetObject`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get object] requests.\n+`ListObjects`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list objects] requests.\n+`ResumableInsertObject`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[resumable insert object] requests,\n+even though resumable uploads can perform multiple http requests they are considered as a single operation for billing\n+purposes.\n+`InsertObject`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[insert object] requests.", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5OTY3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482799677", "bodyText": "link to the page here that says this", "author": "ywelsch", "createdAt": "2020-09-03T08:26:03Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -95,23 +135,25 @@ grouped by request type.\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n `PutBlob`::\n (long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n-`PutBlobBlock`::\n-(long) Number of  https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] requests.\n+`PutBlock`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block] and https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list[Put Block List] requests.\n \n Azure storage https://azure.microsoft.com/en-us/pricing/details/storage/blobs/[pricing].\n ======\n +\n .Properties of `request_counts` for repository type `GCP`\n [%collapsible%open]\n ======\n-`storage.objects.get`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get] requests.\n-`storage.objects.list`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list] requests.\n-`storage.objects.resumable-insert`::\n-(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[resumable insert] requests.\n-`storage.objects.insert`::\n-(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[insert] requests.\n+`GetObject`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get object] requests.\n+`ListObjects`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list objects] requests.\n+`ResumableInsertObject`::\n+(long) Number of https://cloud.google.com/storage/docs/performing-resumable-uploads[resumable insert object] requests,\n+even though resumable uploads can perform multiple http requests they are considered as a single operation for billing\n+purposes.", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNDE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482804159", "bodyText": "Multipart, not MultiPart", "author": "ywelsch", "createdAt": "2020-09-03T08:33:28Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -126,7 +168,10 @@ Google Cloud storage https://cloud.google.com/storage/pricing[pricing].\n `PutObject`::\n (long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html[PutObject] requests.\n `PutMultipartObject`::\n-(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html[MultiPart] requests.\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html[MultiPart] requests,", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNDQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482804458", "bodyText": "CreateMultipartUpload", "author": "ywelsch", "createdAt": "2020-09-03T08:33:55Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -126,7 +168,10 @@ Google Cloud storage https://cloud.google.com/storage/pricing[pricing].\n `PutObject`::\n (long) Number of https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html[PutObject] requests.\n `PutMultipartObject`::\n-(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html[MultiPart] requests.\n+(long) Number of https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html[MultiPart] requests,\n+including https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html[CreateMultiPartUpload],", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482807148", "bodyText": "Should this be changed to match PUT /upload/storage/v1/b/*uploadType=resumable*? AFAICS, resumable sessions always identify sub-requests that way? Simpler than that isLastPart stuff", "author": "ywelsch", "createdAt": "2020-09-03T08:38:24Z", "path": "plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java", "diffHunk": "@@ -310,15 +310,15 @@ protected boolean canFailRequest(final HttpExchange exchange) {\n         @Override\n         public void maybeTrack(final String request, Headers requestHeaders) {\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n-                trackRequest(\"storage.objects.get\");\n+                trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"storage.objects.list\");\n+                trackRequest(\"ListObjects\");\n             } else if (Regex.simpleMatch(\"GET /download/storage/v1/b/*\", request)) {\n-                trackRequest(\"storage.objects.get\");\n+                trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"PUT /upload/storage/v1/b/*\", request) && isLastPart(requestHeaders)) {", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MTIzOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482851238", "bodyText": "Resumable uploads are billed as a single operation, in this case we're only tracking the last operation.", "author": "fcofdez", "createdAt": "2020-09-03T09:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MjEyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482852125", "bodyText": "ok, let's add a comment to that effect. Still allows us to match on *uploadType=resumable* here?", "author": "ywelsch", "createdAt": "2020-09-03T09:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482809152", "bodyText": "Should we just expose the setting from the user? I'm not sure if we want to do some custom sanitation using buildBasePath here.", "author": "ywelsch", "createdAt": "2020-09-03T08:41:42Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -234,6 +235,11 @@\n                 storageClass);\n     }\n \n+    private static Map<String, String> buildLocation(RepositoryMetadata metadata) {\n+        return Map.of(\"base_path\", buildBasePath(metadata).buildAsString(),", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxOTUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482919539", "bodyText": "is there any harm on sanitizing the user setting? it deals with empty and null settings", "author": "fcofdez", "createdAt": "2020-09-03T11:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyOTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482929900", "bodyText": "I would expect an external system to use this to match whatever configuration it set on the cluster (in order to identify the repo). Adapting this in any way feels trappy to me. On a related note (but not relevant for this PR), we should look at these buildBasePath methods (which are all slightly different based on repo type, and a source of trappiness with these odd rules that they implement).", "author": "ywelsch", "createdAt": "2020-09-03T12:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMTEwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482811105", "bodyText": "archive_version?", "author": "ywelsch", "createdAt": "2020-09-03T08:44:42Z", "path": "docs/reference/repositories-metering-api/apis/clear-repositories-metering-archive.asciidoc", "diffHunk": "@@ -0,0 +1,35 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[clear-repositories-metering-archive-api]]\n+=== Clear repositories metering archive\n+++++\n+<titleabbrev>Clear repositories metering archive</titleabbrev>\n+++++\n+\n+Removes the archived repositories metering information present in the cluster.\n+\n+[[clear-repositories-metering-archive-api-request]]\n+==== {api-request-title}\n+\n+`DELETE /_nodes/<node_id>/_repositories_metering/<max_version_to_clear>`\n+\n+[[clear-repositories-metering-archive-api-desc]]\n+==== {api-description-title}\n+\n+You can use this API to clear the archived repositories meterings in the cluster.\n+\n+[[clear-repositories-metering-archive-api-path-params]]\n+==== {api-path-parms-title}\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=node-id]\n+\n+`<max_version_to_clear>`::\n+    (long) Specifies the maximum <<get-repositories-metering-api-response-body, cluster_version>> to be cleared from the archive.", "originalCommit": "413472a6a8279be314574ba2321a8b9921befd9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc94df15bc86867c11069e56872ee95fe05dcde3", "url": "https://github.com/elastic/elasticsearch/commit/bc94df15bc86867c11069e56872ee95fe05dcde3", "message": "Address review comments", "committedDate": "2020-09-03T11:21:29Z", "type": "commit"}, {"oid": "e53322b42232e58b63ce6c4837e39e83cf699a54", "url": "https://github.com/elastic/elasticsearch/commit/e53322b42232e58b63ce6c4837e39e83cf699a54", "message": "Use raw base_path for Repository metering API", "committedDate": "2020-09-03T12:35:28Z", "type": "commit"}, {"oid": "1b798288e3947f280e6acb8d352fa4c8cf2974c1", "url": "https://github.com/elastic/elasticsearch/commit/1b798288e3947f280e6acb8d352fa4c8cf2974c1", "message": "minor corrections", "committedDate": "2020-09-04T09:18:19Z", "type": "commit"}, {"oid": "79cb0f1fa75f2b2e5fbc3e665d1a912ba6eb1aa1", "url": "https://github.com/elastic/elasticsearch/commit/79cb0f1fa75f2b2e5fbc3e665d1a912ba6eb1aa1", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-04T09:18:35Z", "type": "commit"}, {"oid": "f9fa36984ab63bbdc57785dd582d13953dc80f58", "url": "https://github.com/elastic/elasticsearch/commit/f9fa36984ab63bbdc57785dd582d13953dc80f58", "message": "Minor correction", "committedDate": "2020-09-04T09:36:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTc0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r483579742", "bodyText": "This is the wrong name? How is it passing tests?", "author": "ywelsch", "createdAt": "2020-09-04T12:19:06Z", "path": "plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java", "diffHunk": "@@ -312,11 +312,14 @@ public void maybeTrack(final String request, Headers requestHeaders) {\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n                 trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"ListObjects\");\n+                trackRequest(\"ListObjGects\");", "originalCommit": "bc94df15bc86867c11069e56872ee95fe05dcde3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDgxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r483634811", "bodyText": "Good catch! The test was expecting some predefined keys and using getOrDefault(key, 0) \ud83e\udd26  instead of just comparing the mock and RepositoryStats maps. I've changed it, it should catch those failures in the future.", "author": "fcofdez", "createdAt": "2020-09-04T14:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mjg5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r483582897", "bodyText": "Let's still keep mentioning here that even though resumable uploads can perform multiple http requests they are considered as a single operation for metering purposes here (and are  billed as single request, with link to the corresponding google docs on resumable uploads)", "author": "ywelsch", "createdAt": "2020-09-04T12:25:50Z", "path": "docs/reference/repositories-metering-api/apis/repositories-meterings-body.asciidoc", "diffHunk": "@@ -0,0 +1,175 @@\n+tag::repositories-metering-body[]\n+`_nodes`::\n+(object)\n+Contains statistics about the number of nodes selected by the request.\n++\n+.Properties of `_nodes`\n+[%collapsible%open]\n+====\n+`total`::\n+(integer)\n+Total number of nodes selected by the request.\n+\n+`successful`::\n+(integer)\n+Number of nodes that responded successfully to the request.\n+\n+`failed`::\n+(integer)\n+Number of nodes that rejected the request or failed to respond. If this value\n+is not `0`, a reason for the rejection or failure is included in the response.\n+====\n+\n+`cluster_name`::\n+(string)\n+Name of the cluster. Based on the <<cluster.name>> setting.\n+\n+`nodes`::\n+(object)\n+Contains repositories metering information for the nodes selected by the request.\n++\n+.Properties of `nodes`\n+[%collapsible%open]\n+====\n+`<node_id>`::\n+(array)\n+An array of repository metering information for the node.\n++\n+.Properties of objects in `node_id`\n+[%collapsible%open]\n+=====\n+`repository_name`::\n+(string) \n+Repository name.\n+\n+`repository_type`::\n+(string) \n+Repository type.\n+\n+`repository_location`::\n+(object)\n+Represents an unique location within the repository.\n++\n+.Properties of `repository_location` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`base_path`::\n+(string)\n+The path within the container where the repository stores data.\n+\n+`container`::\n+(string)\n+Container name.\n+======\n++\n+.Properties of `repository_location` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`base_path`::\n+(string)\n+The path within the bucket where the repository stores data.\n+\n+`bucket`::\n+(string)\n+Bucket name.\n+======\n++\n+.Properties of `repository_location` for repository type `S3`\n+[%collapsible%open]\n+======\n+`base_path`::\n+(string)\n+The path within the bucket where the repository stores data.\n+\n+`bucket`::\n+(string)\n+Bucket name.\n+======\n+`repository_ephemeral_id`::\n+(string) \n+An identifier that changes every time the repository is updated.\n+\n+`repository_started_at`::\n+(long)\n+Time the repository was created or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`repository_stopped_at`::\n+(Optional, long)\n+Time the repository was deleted or updated. Recorded in milliseconds\n+since the https://en.wikipedia.org/wiki/Unix_time[Unix Epoch].\n+\n+`archived`::\n+(boolean) \n+A flag that tells whether or not this object has been archived.\n+When a repository is closed or updated the repository metering information\n+is archived and kept for a certain period of time. This allows retrieving\n+the repository metering information of previous repository instantiations.\n+\n+`archive_version`::\n+(Optional, long)\n+The cluster state version when this object was archived, this field\n+can be used as a logical timestamp to delete all the archived metrics up\n+to an observed version. This field is only present for archived\n+repository metering information objects. The main purpose of this\n+field is to avoid possible race conditions during repository metering\n+information deletions, i.e. deleting archived repositories metering\n+information that we haven't observed yet.\n+\n+`request_counts`::\n+(object) \n+An object with the number of request performed against the repository\n+grouped by request type.\n++\n+.Properties of `request_counts` for repository type `Azure`\n+[%collapsible%open]\n+======\n+`GetBlobProperties`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties[Get Blob Properties] requests.\n+`GetBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob[Get Blob] requests.\n+`ListBlobs`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs[List Blobs] requests.\n+`PutBlob`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob[Put Blob] requests.\n+`PutBlock`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-block[Put Block].\n+`PutBlockList`::\n+(long) Number of https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list[Put Block List] requests.\n+\n+Azure storage https://azure.microsoft.com/en-us/pricing/details/storage/blobs/[pricing].\n+======\n++\n+.Properties of `request_counts` for repository type `GCP`\n+[%collapsible%open]\n+======\n+`GetObject`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/get[get object] requests.\n+`ListObjects`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/list[list objects] requests.\n+`InsertObject`::\n+(long) Number of https://cloud.google.com/storage/docs/json_api/v1/objects/insert[insert object] requests.", "originalCommit": "f9fa36984ab63bbdc57785dd582d13953dc80f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3a1f3ac616e0be6861f0c973cb51b495d29bf71", "url": "https://github.com/elastic/elasticsearch/commit/c3a1f3ac616e0be6861f0c973cb51b495d29bf71", "message": "Fix testRequestStats. Mention uploads tracked on GCS InsertObject.", "committedDate": "2020-09-04T13:52:12Z", "type": "commit"}, {"oid": "d1425891fdc725f2b56dfbd8f1702a379587a67c", "url": "https://github.com/elastic/elasticsearch/commit/d1425891fdc725f2b56dfbd8f1702a379587a67c", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-04T14:07:31Z", "type": "commit"}, {"oid": "bbc23c18204f39ab16fcb7248bf09880ec432155", "url": "https://github.com/elastic/elasticsearch/commit/bbc23c18204f39ab16fcb7248bf09880ec432155", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-07T08:33:20Z", "type": "commit"}, {"oid": "a7b2ef88d1b4581061fb4fdfa6f15b8d815d7bd2", "url": "https://github.com/elastic/elasticsearch/commit/a7b2ef88d1b4581061fb4fdfa6f15b8d815d7bd2", "message": "Minor corrections", "committedDate": "2020-09-07T09:09:08Z", "type": "commit"}, {"oid": "b97f5f3c4559bee69a66a6af7163346113d75d6d", "url": "https://github.com/elastic/elasticsearch/commit/b97f5f3c4559bee69a66a6af7163346113d75d6d", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-07T13:30:53Z", "type": "commit"}, {"oid": "6df275577f8ea0fe1136ccdb052e24cde773dbfe", "url": "https://github.com/elastic/elasticsearch/commit/6df275577f8ea0fe1136ccdb052e24cde773dbfe", "message": "Merge branch 'master' into metering-api-new", "committedDate": "2020-09-07T15:27:14Z", "type": "commit"}, {"oid": "3e2752bbb8c95fdd262d2dd5e42b8b4113856e36", "url": "https://github.com/elastic/elasticsearch/commit/3e2752bbb8c95fdd262d2dd5e42b8b4113856e36", "message": "Merge branch 'master' into metering-api-new", "committedDate": "2020-09-08T07:48:09Z", "type": "commit"}]}