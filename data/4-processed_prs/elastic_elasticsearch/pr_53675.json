{"pr_number": 53675, "pr_title": "[DOCS] add docs for async search", "pr_createdAt": "2020-03-17T15:48:32Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53675", "timeline": [{"oid": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "url": "https://github.com/elastic/elasticsearch/commit/5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "message": "[DOCS] add docs for async search\n\nRelates to #49091", "committedDate": "2020-03-17T15:46:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMzgyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393823824", "bodyText": "I was hoping this would work but it does cause problems. I need to see if this escaping is needed, to my mind it isn't but I may be wrong. In that case I need to only escape unless curly brackets are part of an expression like ${expression}, which I don't look forward to.", "author": "javanna", "createdAt": "2020-03-17T16:49:54Z", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy", "diffHunk": "@@ -314,10 +314,7 @@ class RestTestsFromSnippetsTask extends SnippetsTask {\n             if (path == null) {\n                 path = '' // Catch requests to the root...\n             } else {\n-                // Escape some characters that are also escaped by sense\n                 path = path.replace('<', '%3C').replace('>', '%3E')\n-                path = path.replace('{', '%7B').replace('}', '%7D')\n-                path = path.replace('|', '%7C')", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1OTc3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394659773", "bodyText": "turns out this is easy to address, there were only a couple of tests where we were using unescaped | which we can manually escape instead.", "author": "javanna", "createdAt": "2020-03-18T21:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMzgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNTM0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393825345", "bodyText": "@jimczi I was wondering if you left this out on purpose. It is settable hence I added it, let me know what you think", "author": "javanna", "createdAt": "2020-03-17T16:52:07Z", "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/async_search.submit.json", "diffHunk": "@@ -41,6 +45,15 @@\n         \"description\":\"The number of shard results that should be reduced at once on the coordinating node. This value should be used as the granularity at which progress results will be made available.\",\n         \"default\":5\n       },\n+      \"pre_filter_shard_size\":{", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2NDU3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393864577", "bodyText": "We should probably prevent users to set this and assume that the can_match phase always runs on async_search. That means that we should throw an error if the value is set in the rest API but that's out of scope for this pr. +1 to remove it from the spec here though", "author": "jimczi", "createdAt": "2020-03-17T17:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNTM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwNjE0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394506147", "bodyText": "I will have a look at disallowing to set this parameter in a followup", "author": "javanna", "createdAt": "2020-03-18T17:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNTM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MDE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393880153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {es} generally allows to quickly search across big amounts of data. There are\n          \n          \n            \n            {es} generally allows you to quickly search across big amounts of data. There are", "author": "jrodewig", "createdAt": "2020-03-17T18:18:36Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MTMyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393881321", "bodyText": "We need to provide an anchor text. Otherwise, these will be capitalized.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n          \n          \n            \n            <<frozen-indices,frozen indices>> and spanning multiple\n          \n          \n            \n            <<modules-remote-clusters,remote clusters>>, for which", "author": "jrodewig", "createdAt": "2020-03-17T18:20:44Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MTcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393881703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            results are not expected to be returned in milliseconds. When needing to\n          \n          \n            \n            results are not expected to be returned in milliseconds. When you need to", "author": "jrodewig", "createdAt": "2020-03-17T18:21:26Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n+results are not expected to be returned in milliseconds. When needing to", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MTk2OA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393881968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            execute long running searches, sending a search request and synchronously\n          \n          \n            \n            execute long-running searches, synchronously", "author": "jrodewig", "createdAt": "2020-03-17T18:21:52Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n+results are not expected to be returned in milliseconds. When needing to\n+execute long running searches, sending a search request and synchronously", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MjA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393882078", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Long running searches\n          \n          \n            \n            == Long-running searches", "author": "jrodewig", "createdAt": "2020-03-17T18:22:04Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MjkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393882900", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            waiting for its results to be returned is not ideal. Async Search allows\n          \n          \n            \n            instead to submit a search request that gets executed asynchronously and\n          \n          \n            \n            monitor its progress as well as retrieve its results at a later stage.\n          \n          \n            \n            waiting for its results to be returned is not ideal. Instead, Async search lets\n          \n          \n            \n            you submit a search request that gets executed _asynchronously_,\n          \n          \n            \n            monitor the progress of the request, and retrieve results at a later stage.", "author": "jrodewig", "createdAt": "2020-03-17T18:23:34Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n+results are not expected to be returned in milliseconds. When needing to\n+execute long running searches, sending a search request and synchronously\n+waiting for its results to be returned is not ideal. Async Search allows\n+instead to submit a search request that gets executed asynchronously and\n+monitor its progress as well as retrieve its results at a later stage.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MzMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393883339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Also, partial results can be retrieved as they become available, before\n          \n          \n            \n            the search has completed.\n          \n          \n            \n            You can also retrieve partial results as they become available but\n          \n          \n            \n            before the search has completed.", "author": "jrodewig", "createdAt": "2020-03-17T18:24:15Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n+results are not expected to be returned in milliseconds. When needing to\n+execute long running searches, sending a search request and synchronously\n+waiting for its results to be returned is not ideal. Async Search allows\n+instead to submit a search request that gets executed asynchronously and\n+monitor its progress as well as retrieve its results at a later stage.\n+Also, partial results can be retrieved as they become available, before\n+the search has completed.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NDQ2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393884466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            An async search request can be submitted using the <<submit-async-search>> API.\n          \n          \n            \n            The <<get-async-search>> API allows to monitor the progress of an async search\n          \n          \n            \n            request and retrieve its results. An async search can be deleted through the\n          \n          \n            \n            <<delete-async-search>> API.\n          \n          \n            \n            You can submit tn async search request using the <<submit-async-search,submit\n          \n          \n            \n            async search>> API. The <<get-async-search,get async search>> API allows you to\n          \n          \n            \n            monitor the progress of an async search request and retrieve its results. An\n          \n          \n            \n            ongoing async search can be deleted through the <<delete-async-search,delete\n          \n          \n            \n            async search>> API.", "author": "jrodewig", "createdAt": "2020-03-17T18:26:09Z", "path": "docs/reference/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,20 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search-intro]]\n+== Long running searches\n+\n+{es} generally allows to quickly search across big amounts of data. There are\n+situations where a search executes on many many shards, possibly against\n+<<frozen-indices>> and spanning multiple <<modules-remote-clusters>>, for which\n+results are not expected to be returned in milliseconds. When needing to\n+execute long running searches, sending a search request and synchronously\n+waiting for its results to be returned is not ideal. Async Search allows\n+instead to submit a search request that gets executed asynchronously and\n+monitor its progress as well as retrieve its results at a later stage.\n+Also, partial results can be retrieved as they become available, before\n+the search has completed.\n+\n+An async search request can be submitted using the <<submit-async-search>> API.\n+The <<get-async-search>> API allows to monitor the progress of an async search\n+request and retrieve its results. An async search can be deleted through the\n+<<delete-async-search>> API.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NDg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393884855", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Async Search\n          \n          \n            \n            === Async search", "author": "jrodewig", "createdAt": "2020-03-17T18:26:48Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NTI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393885293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Async search consists of a set of API that allow to asynchronously execute a\n          \n          \n            \n            search request, monitor its progress as well as retrieve its partial results\n          \n          \n            \n            as soon as they become available.\n          \n          \n            \n            The async search API let you asynchronously execute a\n          \n          \n            \n            search request, monitor its progress, and retrieve  partial results\n          \n          \n            \n            as they become available.", "author": "jrodewig", "createdAt": "2020-03-17T18:27:33Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NjIzMg==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393886232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Submit Async Search\n          \n          \n            \n            ==== Submit async search API", "author": "jrodewig", "createdAt": "2020-03-17T18:28:59Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NzI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393887278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Submits a search request that gets executed asynchronously. It accepts the same\n          \n          \n            \n            request as the  <<search-search,search API>>.\n          \n          \n            \n            Executes a search request asynchronously. It accepts the same\n          \n          \n            \n            parameters and request body as the <<search-search,search API>>.", "author": "jrodewig", "createdAt": "2020-03-17T18:30:38Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4ODA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393888088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The response contains the identifier of the search being executed, to be used\n          \n          \n            \n            to retrieve the results at a later stage. Also, the currently available search\n          \n          \n            \n            results are returned as part of the <<search-api-response-body,`response`>> object.\n          \n          \n            \n            The response contains an identifier of the search being executed.\n          \n          \n            \n            You can use this ID to later retrieve the search's final results.\n          \n          \n            \n            The currently available search\n          \n          \n            \n            results are returned as part of the <<search-api-response-body,`response`>> object.", "author": "jrodewig", "createdAt": "2020-03-17T18:31:52Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4ODg1OA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393888858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n          \n          \n            \n            `5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n          \n          \n            \n            defaults to `false`.\n          \n          \n            \n            \n          \n          \n            \n            * `pre_filter_shard_size` defaults to `1\n          \n          \n            \n            * `batched_reduce_size` defaults to `5`\n          \n          \n            \n            * `request_cache` defaults to `true`\n          \n          \n            \n            * `ccs_minimize_roundtrips` defaults to `false`.", "author": "jrodewig", "createdAt": "2020-03-17T18:33:15Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393889314", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n          \n          \n            \n            The submit async search API supports the same <<search-search-api-query-params,parameters>>", "author": "jrodewig", "createdAt": "2020-03-17T18:33:55Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393889476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is also possible to specify how long the async search needs to be\n          \n          \n            \n            You can also specify how long the async search needs to be", "author": "jrodewig", "createdAt": "2020-03-17T18:34:12Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MDA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393890091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Running async searches as well as saved search results are cleared once their\n          \n          \n            \n            corresponding `keep_alive` expires.\n          \n          \n            \n            Ongoing async searches and any saved search results are deleted after this\n          \n          \n            \n            period", "author": "jrodewig", "createdAt": "2020-03-17T18:35:20Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyMA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393892620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            WARNING: Async search does not support scroll searches, nor search requests that\n          \n          \n            \n            only include the `suggest` section. Cross cluster searches can be executed using\n          \n          \n            \n            async search but only with `ccs_minimize_roundtrips` disabled.\n          \n          \n            \n            WARNING: Async search does not support <<request-body-search-scroll,scroll>> or <<search-suggesters,suggesters>>. {ccs} is supported with <<ccs-min-roundtrips,`ccs_minimize_roundtrips`>> set to\n          \n          \n            \n            `false`.", "author": "jrodewig", "createdAt": "2020-03-17T18:39:35Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NzY0NA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394257644", "bodyText": "it does support suggesters, but not requests that only ask for suggestions. confusing, right? Can you confirm @jimczi ?", "author": "javanna", "createdAt": "2020-03-18T10:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MTA5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394281096", "bodyText": "That's correct @javanna", "author": "jimczi", "createdAt": "2020-03-18T11:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwOTAzNw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394309037", "bodyText": "Ah. Thanks for clarifying. I'll resolve this. Please ignore the suggestion.", "author": "jrodewig", "createdAt": "2020-03-18T12:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5Mjc2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393892769", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Get Async Search\n          \n          \n            \n            ==== Get async search", "author": "jrodewig", "createdAt": "2020-03-17T18:39:49Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get Async Search", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MzA3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393893072", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Get Async Search API can be used to retrieve the results of a previously\n          \n          \n            \n            The get async search API retrieves the results of a previously", "author": "jrodewig", "createdAt": "2020-03-17T18:40:19Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get Async Search\n+\n+The Get Async Search API can be used to retrieve the results of a previously", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393896600", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Delete Async Search API can be used to manually delete a specific async\n          \n          \n            \n            search given its id. The corresponding async search will be cancelled if it's\n          \n          \n            \n            still running, otherwise its saved results will be deleted.\n          \n          \n            \n            You can use the delete async search API to manually delete an async search\n          \n          \n            \n            by ID. If the search is still running, the search request will be cancelled.\n          \n          \n            \n            Otherwise, the saved search results are deleted.", "author": "jrodewig", "createdAt": "2020-03-17T18:46:28Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get Async Search\n+\n+The Get Async Search API can be used to retrieve the results of a previously\n+submitted async search request given its id.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The `wait_for_completion` parameter, which defaults to `1`, can also be provided\n+when calling the Get Async Search API, in order to wait for the search to be\n+completed up until the provided timeout. Final results will be returned if\n+available before the timeout expires, otherwise the currently available results\n+will be returned once the timeout expires.\n+\n+The `keep_alive` parameter, which defaults to `5d` (five days) can be provided\n+to specify how long the async search should be available in the cluster. Once\n+an async search expires, it is cancelled if still running and its saved results\n+are deleted if already completed.\n+\n+[[delete-async-search]]\n+==== Delete Async Search\n+\n+The Delete Async Search API can be used to manually delete a specific async\n+search given its id. The corresponding async search will be cancelled if it's\n+still running, otherwise its saved results will be deleted.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjcyMA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393896720", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Delete Async Search\n          \n          \n            \n            ==== Delete async search", "author": "jrodewig", "createdAt": "2020-03-17T18:46:40Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get Async Search\n+\n+The Get Async Search API can be used to retrieve the results of a previously\n+submitted async search request given its id.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The `wait_for_completion` parameter, which defaults to `1`, can also be provided\n+when calling the Get Async Search API, in order to wait for the search to be\n+completed up until the provided timeout. Final results will be returned if\n+available before the timeout expires, otherwise the currently available results\n+will be returned once the timeout expires.\n+\n+The `keep_alive` parameter, which defaults to `5d` (five days) can be provided\n+to specify how long the async search should be available in the cluster. Once\n+an async search expires, it is cancelled if still running and its saved results\n+are deleted if already completed.\n+\n+[[delete-async-search]]\n+==== Delete Async Search", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NzkwMw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r393897903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `keep_alive` parameter, which defaults to `5d` (five days) can be provided\n          \n          \n            \n            to specify how long the async search should be available in the cluster. Once\n          \n          \n            \n            an async search expires, it is cancelled if still running and its saved results\n          \n          \n            \n            are deleted if already completed.\n          \n          \n            \n            The `keep_alive` parameter, which defaults to `5d` (five days), specifies\n          \n          \n            \n            how long the async search should be available in the cluster. When this\n          \n          \n            \n            period expires, the search, if still running, is cancelled. If the search is\n          \n          \n            \n            completed, its saved results are deleted.", "author": "jrodewig", "createdAt": "2020-03-17T18:48:45Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,197 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async Search\n+\n+Async search consists of a set of API that allow to asynchronously execute a\n+search request, monitor its progress as well as retrieve its partial results\n+as soon as they become available.\n+\n+[[submit-async-search]]\n+==== Submit Async Search\n+\n+Submits a search request that gets executed asynchronously. It accepts the same\n+request as the  <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains the identifier of the search being executed, to be used\n+to retrieve the results at a later stage. Also, the currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The Submit Async Search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+`pre_filter_shard_size` defaults to `1`, `batched_reduce_size` defaults to\n+`5`, `request_cache` defaults to `true` and `ccs_minimize_roundtrips`\n+defaults to `false`.\n+\n+It is also possible to specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Running async searches as well as saved search results are cleared once their\n+corresponding `keep_alive` expires.\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get Async Search\n+\n+The Get Async Search API can be used to retrieve the results of a previously\n+submitted async search request given its id.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The `wait_for_completion` parameter, which defaults to `1`, can also be provided\n+when calling the Get Async Search API, in order to wait for the search to be\n+completed up until the provided timeout. Final results will be returned if\n+available before the timeout expires, otherwise the currently available results\n+will be returned once the timeout expires.\n+\n+The `keep_alive` parameter, which defaults to `5d` (five days) can be provided\n+to specify how long the async search should be available in the cluster. Once\n+an async search expires, it is cancelled if still running and its saved results\n+are deleted if already completed.", "originalCommit": "5a7adf0d8660a5c35154dcf64c0fe16067bfc28f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2fe1a46b1206cb05adef085e74d1d23c778ea08", "url": "https://github.com/elastic/elasticsearch/commit/b2fe1a46b1206cb05adef085e74d1d23c778ea08", "message": "Apply suggestions from code review\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-03-18T10:52:27Z", "type": "commit"}, {"oid": "414c4441ebdb4a2910e15881f7d42c6b0b82d3e8", "url": "https://github.com/elastic/elasticsearch/commit/414c4441ebdb4a2910e15881f7d42c6b0b82d3e8", "message": "remove pre_filter_shard_size from async search spec", "committedDate": "2020-03-18T10:54:23Z", "type": "commit"}, {"oid": "b74707dcb7828ce1ae9a4bae978cf80218e53821", "url": "https://github.com/elastic/elasticsearch/commit/b74707dcb7828ce1ae9a4bae978cf80218e53821", "message": "small corrections", "committedDate": "2020-03-18T12:58:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3OTc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394479751", "bodyText": "Maybe move this note near to the submit query in order to explain why the example uses a sort ?", "author": "jimczi", "createdAt": "2020-03-18T16:28:15Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,200 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async search\n+\n+The async search API let you asynchronously execute a\n+search request, monitor its progress, and retrieve  partial results\n+as they become available.\n+\n+[[submit-async-search]]\n+==== Submit async search API\n+\n+Executes a search request asynchronously. It accepts the same\n+parameters and request body as the <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains an identifier of the search being executed.\n+You can use this ID to later retrieve the search's final results.\n+The currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The submit async search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+\n+* `pre_filter_shard_size` defaults to `1`\n+* `batched_reduce_size` defaults to `5`\n+* `request_cache` defaults to `true`\n+* `ccs_minimize_roundtrips` defaults to `false`.\n+\n+You can also specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Ongoing async searches and any saved search results are deleted after this\n+period\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get async search\n+\n+The get async search API retrieves the results of a previously\n+submitted async search request given its id.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on", "originalCommit": "b74707dcb7828ce1ae9a4bae978cf80218e53821", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MTUzNA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394481534", "bodyText": "The keep_alive for the get api is a bit different since it allows to extend/change the expiration time for an existing id. Maybe good to make the distinction here since the default for get is to keep the current expiration time.", "author": "jimczi", "createdAt": "2020-03-18T16:30:57Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,200 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async search\n+\n+The async search API let you asynchronously execute a\n+search request, monitor its progress, and retrieve  partial results\n+as they become available.\n+\n+[[submit-async-search]]\n+==== Submit async search API\n+\n+Executes a search request asynchronously. It accepts the same\n+parameters and request body as the <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains an identifier of the search being executed.\n+You can use this ID to later retrieve the search's final results.\n+The currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The submit async search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+\n+* `pre_filter_shard_size` defaults to `1`\n+* `batched_reduce_size` defaults to `5`\n+* `request_cache` defaults to `true`\n+* `ccs_minimize_roundtrips` defaults to `false`.\n+\n+You can also specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Ongoing async searches and any saved search results are deleted after this\n+period\n+\n+WARNING: Async search does not support scroll searches, nor search requests that\n+only include the `suggest` section. Cross cluster searches can be executed using\n+async search but only with `ccs_minimize_roundtrips` disabled.\n+\n+[[get-async-search]]\n+==== Get async search\n+\n+The get async search API retrieves the results of a previously\n+submitted async search request given its id.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The `wait_for_completion` parameter, which defaults to `1`, can also be provided\n+when calling the Get Async Search API, in order to wait for the search to be\n+completed up until the provided timeout. Final results will be returned if\n+available before the timeout expires, otherwise the currently available results\n+will be returned once the timeout expires.\n+\n+The `keep_alive` parameter, which defaults to `5d` (five days), specifies", "originalCommit": "b74707dcb7828ce1ae9a4bae978cf80218e53821", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394485323", "bodyText": "I think we can list the ones that can be changed and omit the other. batched_reduce_size, request_cache and max_concurrent_shard_requests + the specific options (wait_for_completion, keep_alive) should be enough for this API.  I think we said that we want  to remove pre_filter_shard_size so I'd remove it from here, same for ccs_minimize_roundtrips which sounds like it could be changed but cannot.\nSo to be clear, a concrete list that presents all these options and then we can add a link to the search source documentation that should be unchanged from normal search request ?", "author": "jimczi", "createdAt": "2020-03-18T16:36:37Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,200 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async search\n+\n+The async search API let you asynchronously execute a\n+search request, monitor its progress, and retrieve  partial results\n+as they become available.\n+\n+[[submit-async-search]]\n+==== Submit async search API\n+\n+Executes a search request asynchronously. It accepts the same\n+parameters and request body as the <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains an identifier of the search being executed.\n+You can use this ID to later retrieve the search's final results.\n+The currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+The submit async search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:", "originalCommit": "b74707dcb7828ce1ae9a4bae978cf80218e53821", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NjI2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394486262", "bodyText": "batched_reduce_size is also important to document since that's the granularity at which partial results will be made available.", "author": "jimczi", "createdAt": "2020-03-18T16:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMDM1MA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394510350", "bodyText": "agreed, I was planning on looking back to this once we disallow setting pre_filter_shard_size and maybe others, but I can address the docs in the meantime.", "author": "javanna", "createdAt": "2020-03-18T17:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMTQ3NA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394511474", "bodyText": "we can add a link to the search source documentation\n\nthere is already a link. Why document max_concurrent_shard_request here? The default is the same as for search?", "author": "javanna", "createdAt": "2020-03-18T17:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzOTgxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394539810", "bodyText": "because I thought we would have the exhaustive list of options here rather than linking to the entire search request option. We only accept a subset of it so better to be explicit ?", "author": "jimczi", "createdAt": "2020-03-18T18:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYyNTkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394625936", "bodyText": "the thing is that there's a ton of options that can be set to the search request. See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html#search-search-api-query-params . I thought it's better to just link to search rather than duplicate its docs, and mention the special cases or important aspects only in the async search docs.  Would you rather list all of the search options also here?", "author": "javanna", "createdAt": "2020-03-18T20:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYyOTYxMg==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394629612", "bodyText": "Ok for a simple link but we should at least document batched_reduce_size explicitly here for the reason exposed above. We can also add the list of options that are not accepted here (scroll, ccs_minimize_roundtrips and pre_filter_shard_size)  ?", "author": "jimczi", "createdAt": "2020-03-18T20:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYzMTU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r394631543", "bodyText": "yep that's what I had in mind. batched_reduce_size makes a lot of sense to explain, I already did, I will push shortly", "author": "javanna", "createdAt": "2020-03-18T20:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTMyMw=="}], "type": "inlineReview"}, {"oid": "bbebf3c209c5eeb86d17d430a078b9b39499582f", "url": "https://github.com/elastic/elasticsearch/commit/bbebf3c209c5eeb86d17d430a078b9b39499582f", "message": "small corrections", "committedDate": "2020-03-18T21:56:36Z", "type": "commit"}, {"oid": "4635ba2ab5db7e155a46faff03e13479e829b634", "url": "https://github.com/elastic/elasticsearch/commit/4635ba2ab5db7e155a46faff03e13479e829b634", "message": "Merge branch 'master' into docs/async_search", "committedDate": "2020-03-18T21:58:46Z", "type": "commit"}, {"oid": "08639b96e4c48d24462fcb13bee375e3581ba254", "url": "https://github.com/elastic/elasticsearch/commit/08639b96e4c48d24462fcb13bee375e3581ba254", "message": "small corrections", "committedDate": "2020-03-18T22:00:41Z", "type": "commit"}, {"oid": "134b02f9cf39600a360843271954268a511baada", "url": "https://github.com/elastic/elasticsearch/commit/134b02f9cf39600a360843271954268a511baada", "message": "note on security", "committedDate": "2020-03-18T22:22:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MzM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r395293394", "bodyText": "That's only when security is enabled that we restrict the access. We should make the distinction here.", "author": "jimczi", "createdAt": "2020-03-19T20:14:10Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,210 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async search\n+\n+The async search API let you asynchronously execute a\n+search request, monitor its progress, and retrieve  partial results\n+as they become available.\n+\n+[[submit-async-search]]\n+==== Submit async search API\n+\n+Executes a search request asynchronously. It accepts the same\n+parameters and request body as the <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains an identifier of the search being executed.\n+You can use this ID to later retrieve the search's final results.\n+The currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+You can also specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Ongoing async searches and any saved search results are deleted after this\n+period.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The submit async search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+\n+* `batched_reduce_size` defaults to `5`: this affects how often partial results\n+become available., which happens whenever shard results are reduced. By default\n+a partial reduction is performed every time the coordinating node has received\n+5 new shard responses.\n+* `request_cache` defaults to `true`\n+* `pre_filter_shard_size` defaults to `1`: this is to enforce the execution of\n+a pre-filter roundtrip to retrieve statistics from each shard so that the ones\n+that surely don't hold any document matching the query can be skipped.\n+* `ccs_minimize_roundtrips` defaults to `false`, which is also the only\n+permitted value\n+\n+WARNING: Async search does not support <<request-body-search-scroll,scroll>>\n+nor search requests that only include the  <<search-suggesters,suggest section>>.\n+{ccs} is supported only with <<ccs-min-roundtrips,`ccs_minimize_roundtrips`>>\n+set to `false`.\n+\n+[[get-async-search]]\n+==== Get async search\n+\n+The get async search API retrieves the results of a previously submitted\n+async search request given its id. The access to the results of a specific", "originalCommit": "134b02f9cf39600a360843271954268a511baada", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NDU1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53675#discussion_r395294551", "bodyText": "Can you add  an explanation for expiration_time_in_millis, is_partial and is_running ? The last two are important since they determine how to interpret the search response (partial or not) and if the search is still running.", "author": "jimczi", "createdAt": "2020-03-19T20:16:22Z", "path": "docs/reference/search/async-search.asciidoc", "diffHunk": "@@ -0,0 +1,210 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[async-search]]\n+=== Async search\n+\n+The async search API let you asynchronously execute a\n+search request, monitor its progress, and retrieve  partial results\n+as they become available.\n+\n+[[submit-async-search]]\n+==== Submit async search API\n+\n+Executes a search request asynchronously. It accepts the same\n+parameters and request body as the <<search-search,search API>>.\n+\n+[source,console,id=submit-async-search-date-histogram-example]\n+--------------------------------------------------\n+POST /sales*/_async_search?size=0\n+{\n+    \"sort\" : [\n+      { \"date\" : {\"order\" : \"asc\"} }\n+    ],\n+    \"aggs\" : {\n+        \"sale_date\" : {\n+             \"date_histogram\" : {\n+                 \"field\" : \"date\",\n+                 \"calendar_interval\": \"1d\"\n+             }\n+         }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:sales]\n+// TEST[s/size=0/size=0&wait_for_completion=0/]\n+\n+The response contains an identifier of the search being executed.\n+You can use this ID to later retrieve the search's final results.\n+The currently available search\n+results are returned as part of the <<search-api-response-body,`response`>> object.\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n+  \"version\" : 0,\n+  \"is_partial\" : true, <2>\n+  \"is_running\" : true, <3>\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 1122,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 0,\n+    \"_shards\" : {\n+      \"total\" : 562, <4>\n+      \"successful\" : 3, <5>\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 157483, <6>\n+        \"relation\" : \"gte\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n+\n+<1> Identifier of the async search that can be used to monitor its progress, retrieve its results, and/or delete it.\n+<2> Whether the returned search results are partial or final\n+<3> Whether the search is still being executed or it has completed\n+<4> How many shards the search will be executed on, overall\n+<5> How many shards have successfully completed the search\n+<6> How many documents are currently matching the query, which belong to the shards that have already completed the search\n+\n+It is possible to block and wait until the search is completed up to a certain\n+timeout by providing the `wait_for_completion` parameter, which defaults to\n+`1` second.\n+\n+You can also specify how long the async search needs to be\n+available through the `keep_alive` parameter, which defaults to `5d` (five days).\n+Ongoing async searches and any saved search results are deleted after this\n+period.\n+\n+NOTE: When results are sorted by a numeric field, shards get sorted based on\n+minimum and maximum value that they hold for that field, hence partial\n+results become available following the sort criteria that was requested.\n+\n+The submit async search API supports the same <<search-search-api-query-params,parameters>>\n+as the search API, though some have different default values:\n+\n+* `batched_reduce_size` defaults to `5`: this affects how often partial results\n+become available., which happens whenever shard results are reduced. By default\n+a partial reduction is performed every time the coordinating node has received\n+5 new shard responses.\n+* `request_cache` defaults to `true`\n+* `pre_filter_shard_size` defaults to `1`: this is to enforce the execution of\n+a pre-filter roundtrip to retrieve statistics from each shard so that the ones\n+that surely don't hold any document matching the query can be skipped.\n+* `ccs_minimize_roundtrips` defaults to `false`, which is also the only\n+permitted value\n+\n+WARNING: Async search does not support <<request-body-search-scroll,scroll>>\n+nor search requests that only include the  <<search-suggesters,suggest section>>.\n+{ccs} is supported only with <<ccs-min-roundtrips,`ccs_minimize_roundtrips`>>\n+set to `false`.\n+\n+[[get-async-search]]\n+==== Get async search\n+\n+The get async search API retrieves the results of a previously submitted\n+async search request given its id. The access to the results of a specific\n+async search is restricted to the user that submitted it in the first place.\n+\n+[source,console,id=get-async-search-date-histogram-example]\n+--------------------------------------------------\n+GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n+--------------------------------------------------\n+// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n+  \"version\" : 2, <1>\n+  \"is_partial\" : true,\n+  \"is_running\" : true,\n+  \"start_time_in_millis\" : 1583945890986,\n+  \"expiration_time_in_millis\" : 1584377890986,\n+  \"response\" : {\n+    \"took\" : 12144,\n+    \"timed_out\" : false,\n+    \"num_reduce_phases\" : 38,\n+    \"_shards\" : {\n+      \"total\" : 562,\n+      \"successful\" : 188,\n+      \"skipped\" : 0,\n+      \"failed\" : 0\n+    },\n+    \"hits\" : {\n+      \"total\" : {\n+        \"value\" : 456433,\n+        \"relation\" : \"eq\"\n+      },\n+      \"max_score\" : null,\n+      \"hits\" : [ ]\n+    },\n+    \"aggregations\" : { <2>\n+      \"sale_date\" :  {\n+        \"buckets\" : []\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n+// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n+// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n+// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n+// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n+// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n+// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n+// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n+// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n+// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n+// TESTRESPONSE[s/\"num_reduce_phases\" : 38,//]\n+\n+<1> The returned `version` is useful to identify whether the response contains\n+additional results compared to previously obtained responses. If the version\n+stays the same, no new results have become available, otherwise a higher version\n+number indicates that more shards have completed their execution of the query\n+and their partial results are also included in the response.\n+<2> Partial aggregations results, coming from the shards that have already\n+completed the execution of the query.\n+", "originalCommit": "134b02f9cf39600a360843271954268a511baada", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c57c16c357cf6c863137ff8c7bb54842b657ef63", "url": "https://github.com/elastic/elasticsearch/commit/c57c16c357cf6c863137ff8c7bb54842b657ef63", "message": "Merge branch 'master' into docs/async_search", "committedDate": "2020-03-20T09:05:46Z", "type": "commit"}, {"oid": "d7c00738a4ed33ae8589a3e9f728d82a5ab22b2a", "url": "https://github.com/elastic/elasticsearch/commit/d7c00738a4ed33ae8589a3e9f728d82a5ab22b2a", "message": "iter", "committedDate": "2020-03-20T10:36:30Z", "type": "commit"}, {"oid": "d804de012f36e5e775f9fb5d75d66229b103c34a", "url": "https://github.com/elastic/elasticsearch/commit/d804de012f36e5e775f9fb5d75d66229b103c34a", "message": "iter", "committedDate": "2020-03-20T10:42:10Z", "type": "commit"}]}