{"pr_number": 63615, "pr_title": "Retry wget tasks in Dockerfile", "pr_createdAt": "2020-10-13T14:20:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63615", "timeline": [{"oid": "f3f76bbb1fc95b37a38b174441c60b6c6ac09d65", "url": "https://github.com/elastic/elasticsearch/commit/f3f76bbb1fc95b37a38b174441c60b6c6ac09d65", "message": "Retry wget tasks in Dockerfile\n\nFollowing #52519, our Docker build pulls down `curl` sources in an\nAlpine Linux container using `wget`. However that version of `wget`\ndoesn't support any retry flags. Since network issues can cause build\nfailures, wrap the `wget` calls in the same retry construct used for\n`yum` commands elsewhere.\n\nCloses #63600.", "committedDate": "2020-10-13T14:16:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/63615#discussion_r504005854", "bodyText": "A small note: one issue here is that if any of the three wgets fails here, the entire loop will fail and all downloads will be retried. Is this deliberate? Alternatively we'd have to split the wget's within separate loops.", "author": "dliappis", "createdAt": "2020-10-13T14:37:02Z", "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -61,10 +61,14 @@ RUN apk add gnupg gcc make musl-dev openssl-dev openssl-libs-static file\n RUN mkdir /work\n WORKDIR /work\n \n-# Fetch curl sources and files for validation\n-RUN wget \"https://daniel.haxx.se/mykey.asc\" -O \"curl-gpg.pub\" && \\\\\n-    wget \"\\${TARBALL_URL}.asc\" -O \"\\${TARBALL_PATH}.asc\" && \\\\\n-    wget \"\\${TARBALL_URL}\" -O \"\\${TARBALL_PATH}\"\n+# Fetch curl sources and files for validation. Note that alpine's `wget` doesn't have retry options.\n+RUN for iter in {1..10}; do \\\\\n+      wget \"https://daniel.haxx.se/mykey.asc\" -O \"curl-gpg.pub\" && \\\\\n+      wget \"\\${TARBALL_URL}.asc\" -O \"\\${TARBALL_PATH}.asc\" && \\\\\n+      wget \"\\${TARBALL_URL}\" -O \"\\${TARBALL_PATH}\" && \\\\", "originalCommit": "f3f76bbb1fc95b37a38b174441c60b6c6ac09d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzQyNA==", "url": "https://github.com/elastic/elasticsearch/pull/63615#discussion_r504107424", "bodyText": "These are idempotent operations so that's not a huge deal but you do risk that one fails one iteration and another fails the next. This is still an improvement though. Wrapping each of these is going to start getting a bit silly unless we can somehow encapsulate this logic in a function of some kind.", "author": "mark-vieira", "createdAt": "2020-10-13T16:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMDczOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63615#discussion_r504110739", "bodyText": "Yeah and while having an inline function within the scope of RUN is possible it'll look convoluted. I agree this is already an improvement.", "author": "dliappis", "createdAt": "2020-10-13T16:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyODc5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63615#discussion_r504528792", "bodyText": "@dliappis Actually the inline function isn't too bad - I've pushed a change, see what you think.", "author": "pugnascotia", "createdAt": "2020-10-14T09:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1MDc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63615#discussion_r504650744", "bodyText": "@pugnascotia Looks MUCH better, thank you!", "author": "dliappis", "createdAt": "2020-10-14T12:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg1NA=="}], "type": "inlineReview"}, {"oid": "6c5ef3f7e6525ddfe7d60c2f3ddae402160172f0", "url": "https://github.com/elastic/elasticsearch/commit/6c5ef3f7e6525ddfe7d60c2f3ddae402160172f0", "message": "Retry each wget command seperately", "committedDate": "2020-10-14T09:18:44Z", "type": "commit"}]}