{"pr_number": 55435, "pr_title": "Fix expiration time in async search response", "pr_createdAt": "2020-04-19T21:50:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55435", "timeline": [{"oid": "7adb0b05f81c4b0a0a401bac5f129ceb143281c9", "url": "https://github.com/elastic/elasticsearch/commit/7adb0b05f81c4b0a0a401bac5f129ceb143281c9", "message": "Fix expiration time in async search response\n\nThis change ensures that we return the latest expiration time\nwhen retrieving the response from the index.", "committedDate": "2020-04-19T21:48:53Z", "type": "commit"}, {"oid": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "url": "https://github.com/elastic/elasticsearch/commit/df22f66314d0b1aff801dca6a4d3157aea41cd4f", "message": "unused import", "committedDate": "2020-04-19T21:58:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411152160", "bodyText": "not related to your change, but I think this one should be changed like I did in other places to use ExceptionHelper.unwrapCause , I forgot about this one. When can version conflict be thrown again?", "author": "javanna", "createdAt": "2020-04-20T07:24:18Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -187,7 +188,8 @@ private void onFinalResponse(CancellableTask submitTask,\n             store.storeFinalResponse(searchTask.getSearchId().getDocId(), threadContext.getResponseHeaders(),response,\n                 ActionListener.wrap(resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n                                     exc -> {\n-                                        if (exc.getCause() instanceof DocumentMissingException == false) {\n+                                        if (exc.getCause() instanceof DocumentMissingException == false &&\n+                                                exc.getCause() instanceof VersionConflictEngineException == false) {", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NjU3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411356570", "bodyText": "++, I pushed bf01fc0", "author": "jimczi", "createdAt": "2020-04-20T12:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411152777", "bodyText": "ops", "author": "javanna", "createdAt": "2020-04-20T07:25:26Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/GetAsyncSearchRequestTests.java", "diffHunk": "@@ -34,8 +34,4 @@ static String randomSearchId() {\n         return AsyncSearchId.encode(UUIDs.randomBase64UUID(),\n             new TaskId(randomAlphaOfLengthBetween(10, 20), randomLongBetween(0, Long.MAX_VALUE)));\n     }\n-\n-    public void testValidateWaitForCompletion() {\n-\n-    }", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NjYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411356613", "bodyText": ";)", "author": "jimczi", "createdAt": "2020-04-20T12:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411157670", "bodyText": "do we plan on using this new setting only in our tests? Or can it be useful for users too?", "author": "javanna", "createdAt": "2020-04-20T07:34:10Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "diffHunk": "@@ -26,13 +28,17 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static org.elasticsearch.xpack.search.AsyncSearchIndexService.EXPIRATION_TIME_FIELD;\n+import static org.elasticsearch.xpack.search.AsyncSearchIndexService.INDEX;\n \n /**\n  * A service that runs a periodic cleanup over the async-search index.\n  */\n class AsyncSearchMaintenanceService implements Releasable, ClusterStateListener {\n     private static final Logger logger = LogManager.getLogger(AsyncSearchMaintenanceService.class);\n \n+    public static final Setting<TimeValue> ASYNC_SEARCH_CLEANUP_INTERVAL_SETTING =\n+        Setting.timeSetting(\"async_search.index_cleanup_interval\", TimeValue.timeValueHours(1), Setting.Property.NodeScope);", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NzQwNw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411357407", "bodyText": "Maybe for debug but I don't think it's useful for users, only for tests at the moment.", "author": "jimczi", "createdAt": "2020-04-20T13:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1OTM5MA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411359390", "bodyText": "There is no way to somehow make this \"private\" or for use only in our tests? I worry mostly about naming, and the fact that users may end up using it although we would not want them to.", "author": "javanna", "createdAt": "2020-04-20T13:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2ODQ0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411368449", "bodyText": "The default value is quite large (1h) so maybe there's some value to change it. I am not sure, I can make it private but that would work only in fantasy integration tests (single vm) so this will come back. I was expecting that the lack of documentation would make this setting an expert thing that users would never heard from ?", "author": "jimczi", "createdAt": "2020-04-20T13:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3NDUwMw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411374503", "bodyText": "yea I see, can you add a comment that this is intentionally undocumented?", "author": "javanna", "createdAt": "2020-04-20T13:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5ODQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411698465", "bodyText": "I pushed 09afaca", "author": "jimczi", "createdAt": "2020-04-20T21:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTE5OA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411159198", "bodyText": "I think that isCleanupRunning no longer needs to be atomic boolean given that it's only accessed from synchronized methods", "author": "javanna", "createdAt": "2020-04-20T07:36:52Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "diffHunk": "@@ -62,31 +68,29 @@ public void clusterChanged(ClusterChangedEvent event) {\n         tryStartCleanup(state);\n     }\n \n-    void tryStartCleanup(ClusterState state) {\n+    synchronized void tryStartCleanup(ClusterState state) {", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NzY5OA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411357698", "bodyText": "++, I pushed 47f3544", "author": "jimczi", "createdAt": "2020-04-20T13:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTk0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411159943", "bodyText": "I am curious about these changesL: the newly added tests uncovered some bug?", "author": "javanna", "createdAt": "2020-04-20T07:38:13Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "diffHunk": "@@ -107,11 +111,17 @@ synchronized void scheduleNextCleanup() {\n         }\n     }\n \n+    synchronized void stop() {\n+        if (isCleanupRunning.compareAndSet(true, false)) {\n+            if (cancellable != null && cancellable.isCancelled() == false) {\n+                cancellable.cancel();\n+            }\n+        }\n+    }", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NDk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411184961", "bodyText": "Yes, if the index is deleted we close the service. I added a test for this AsyncSearchActionIT#testRemoveAsyncIndex. I can add a note in the commit/pr or open a separate pr if you prefer.", "author": "jimczi", "createdAt": "2020-04-20T08:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MDYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411160629", "bodyText": "this seems at first glance unrelated, did it come up from the tests you added as part of this PR?", "author": "javanna", "createdAt": "2020-04-20T07:39:17Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchIndexService.java", "diffHunk": "@@ -265,14 +265,17 @@ void getResponse(AsyncSearchId searchId,\n                     return;\n                 }\n \n-                if (restoreResponseHeaders) {\n+                if (restoreResponseHeaders && get.getSource().containsKey(RESPONSE_HEADERS_FIELD)) {", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzNzIxMg==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411237212", "bodyText": "Yes, this fixes an NPE when retrieving the initial result (if the coordinating node died during the request). We discussed some options here,  whether we should throw a resource not found  or not but this change is just an hot-fix", "author": "jimczi", "createdAt": "2020-04-20T09:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MDYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MjQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411162461", "bodyText": "this one was causing NPE? lovely to get NPE as part of a null check :) maybe getNodeId should be changed to return null instead of NPE when nodeId is null? it seems like a trappy behaviour.", "author": "javanna", "createdAt": "2020-04-20T07:42:36Z", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -338,7 +341,7 @@ protected void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exc\n             // best effort to cancel expired tasks\n             checkCancellation();\n             searchResponse.get().addShardFailure(shardIndex,\n-                new ShardSearchFailure(exc, shardTarget.getNodeId() != null ? shardTarget : null));\n+                new ShardSearchFailure(exc, shardTarget.getNodeIdText() != null ? shardTarget : null));", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1ODAyNA==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411358024", "bodyText": "+1, I pushed 47f3544 to adapt the code in the shard search target class directly.", "author": "jimczi", "createdAt": "2020-04-20T13:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDY4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411164686", "bodyText": "I wonder if we could add a constructor that takes this, it seems possible given that we call decode in one place only and it could accept the expiration time too, and pass it to the constructor.", "author": "javanna", "createdAt": "2020-04-20T07:46:26Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -157,6 +157,10 @@ public long getExpirationTime() {\n         return expirationTimeMillis;\n     }\n \n+    public void setExpirationTime(long expirationTimeMillis) {\n+        this.expirationTimeMillis = expirationTimeMillis;", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1ODEwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411358105", "bodyText": "+1, I pushed 47f3544", "author": "jimczi", "createdAt": "2020-04-20T13:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDkyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411164929", "bodyText": "I am curious, what triggered this change?", "author": "javanna", "createdAt": "2020-04-20T07:46:49Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/GetAsyncSearchAction.java", "diffHunk": "@@ -63,12 +60,7 @@ public void writeTo(StreamOutput out) throws IOException {\n \n         @Override\n         public ActionRequestValidationException validate() {\n-            ActionRequestValidationException validationException = null;\n-            if (keepAlive.getMillis() != -1 && keepAlive.getMillis() < MIN_KEEP_ALIVE) {\n-                validationException =\n-                    addValidationError(\"keep_alive must be greater than 1 minute, got:\" + keepAlive.toString(), validationException);\n-            }\n-            return validationException;", "originalCommit": "df22f66314d0b1aff801dca6a4d3157aea41cd4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1ODYxMg==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411358612", "bodyText": "The fact that we use very small value of keep_alive in tests to check the automatic cancellation.", "author": "jimczi", "createdAt": "2020-04-20T13:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2Mzk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411363997", "bodyText": "I see, while less than one minute does not make sense for submit, it does for get, probably.", "author": "javanna", "createdAt": "2020-04-20T13:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDkyOQ=="}], "type": "inlineReview"}, {"oid": "47f35443ad45f0fb2ac4959761c99ff195be22ac", "url": "https://github.com/elastic/elasticsearch/commit/47f35443ad45f0fb2ac4959761c99ff195be22ac", "message": "address review comments", "committedDate": "2020-04-20T12:57:09Z", "type": "commit"}, {"oid": "bf01fc0a6640c82ddcc04af379313e4b950cef38", "url": "https://github.com/elastic/elasticsearch/commit/bf01fc0a6640c82ddcc04af379313e4b950cef38", "message": "unwrap cause\u00e9", "committedDate": "2020-04-20T12:59:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NzY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411387676", "bodyText": "perhaps you can now remove this TODO? 146b2a8#diff-97b9cc86781ba2021cd3ae58d6851834R38", "author": "javanna", "createdAt": "2020-04-20T13:43:15Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchActionIT.java", "diffHunk": "@@ -277,4 +279,117 @@ public void testCancellation() throws Exception {\n         deleteAsyncSearch(response.getId());\n         ensureTaskRemoval(response.getId());\n     }\n+", "originalCommit": "bf01fc0a6640c82ddcc04af379313e4b950cef38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5ODg1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411698851", "bodyText": "That's already removed in this change:\nhttps://github.com/elastic/elasticsearch/pull/55435/files#diff-dcd3d2ba4a8ca88c8655de7eb18981e6L38", "author": "jimczi", "createdAt": "2020-04-20T21:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NzY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzMzE1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55435#discussion_r411933151", "bodyText": "great I did not notice", "author": "javanna", "createdAt": "2020-04-21T07:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NzY3Ng=="}], "type": "inlineReview"}, {"oid": "812cf0b40afcdf5b1332138009bc561136a82f6a", "url": "https://github.com/elastic/elasticsearch/commit/812cf0b40afcdf5b1332138009bc561136a82f6a", "message": "Merge branch 'master' into async_search_expiration_time", "committedDate": "2020-04-20T14:08:24Z", "type": "commit"}, {"oid": "09afaca88da489560060ad5a90671652e269006f", "url": "https://github.com/elastic/elasticsearch/commit/09afaca88da489560060ad5a90671652e269006f", "message": "add javadocs for the new setting", "committedDate": "2020-04-20T21:16:19Z", "type": "commit"}, {"oid": "c9ff64fdf6376c84fed5b951fe3378ac584b78ce", "url": "https://github.com/elastic/elasticsearch/commit/c9ff64fdf6376c84fed5b951fe3378ac584b78ce", "message": "Merge branch 'master' into async_search_expiration_time", "committedDate": "2020-04-20T21:17:07Z", "type": "commit"}]}