{"pr_number": 52365, "pr_title": "Refactor Inflexible Snapshot Repository BwC", "pr_createdAt": "2020-02-14T14:15:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52365", "timeline": [{"oid": "d2bbd07ee73b4b19509e75ca9834daafcca0f1c3", "url": "https://github.com/elastic/elasticsearch/commit/d2bbd07ee73b4b19509e75ca9834daafcca0f1c3", "message": "Refactor Repository APIs for easier BwC\n\nThis there will be more updates to the repository format now we\nshould pass around the min compatible version instead of flags for various metadata features.", "committedDate": "2020-02-14T11:10:39Z", "type": "commit"}, {"oid": "30722f148046262f9b8675a8feb5b67b8467af4b", "url": "https://github.com/elastic/elasticsearch/commit/30722f148046262f9b8675a8feb5b67b8467af4b", "message": "fix snapshot shard", "committedDate": "2020-02-14T12:58:48Z", "type": "commit"}, {"oid": "3042b8b60547582f7e7b6eb1c44712d1e9145964", "url": "https://github.com/elastic/elasticsearch/commit/3042b8b60547582f7e7b6eb1c44712d1e9145964", "message": "fix finalize snapshot", "committedDate": "2020-02-14T13:10:54Z", "type": "commit"}, {"oid": "fdd77b15eca95f1a83c2ef544ccae6e3d601c9a4", "url": "https://github.com/elastic/elasticsearch/commit/fdd77b15eca95f1a83c2ef544ccae6e3d601c9a4", "message": "done", "committedDate": "2020-02-14T13:54:59Z", "type": "commit"}, {"oid": "60176abddea1b17f25e738ea19e098147391f711", "url": "https://github.com/elastic/elasticsearch/commit/60176abddea1b17f25e738ea19e098147391f711", "message": "shorter", "committedDate": "2020-02-14T13:56:22Z", "type": "commit"}, {"oid": "6a08203834752e7c3e7b624be61a6e66f9feb66c", "url": "https://github.com/elastic/elasticsearch/commit/6a08203834752e7c3e7b624be61a6e66f9feb66c", "message": "docs and efficiency", "committedDate": "2020-02-14T14:11:32Z", "type": "commit"}, {"oid": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "url": "https://github.com/elastic/elasticsearch/commit/35adacd157a4b7475e6f69b0db084df7d4ec6067", "message": "keep old behavior", "committedDate": "2020-02-14T15:20:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380029371", "bodyText": "this should be out.getVersion().onOrAfter(VERSION_IN_SNAPSHOT_VERSION)?", "author": "ywelsch", "createdAt": "2020-02-17T08:02:41Z", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -579,7 +582,9 @@ public void writeTo(StreamOutput out) throws IOException {\n                 out.writeMap(entry.userMetadata);\n             }\n             if (out.getVersion().onOrAfter(SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION)) {", "originalCommit": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MzAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380063006", "bodyText": "Right urgh ... we should have a better BwC test for this stuff to show up in a deterministic fashion. I'll look into that elsewhere.", "author": "original-brownbear", "createdAt": "2020-02-17T09:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMTc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380031782", "bodyText": "Instead of the onOrAfter checks, I would prefer a method on SnapshotsService of the form\nboolean useShardGenerations(Version repositoryMetaVersion) {\n  return repositoryMetaVersion.onOrAfter(Version.V_7_6_0);\n}\n\nand then remove the public SHARD_GEN_IN_REPO_DATA_VERSION field.", "author": "ywelsch", "createdAt": "2020-02-17T08:09:48Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -282,9 +283,9 @@ private void startNewShards(SnapshotsInProgress.Entry entry, Map<ShardId, IndexS\n                 final IndexShardSnapshotStatus snapshotStatus = shardEntry.getValue();\n                 final IndexId indexId = indicesMap.get(shardId.getIndexName());\n                 assert indexId != null;\n-                assert entry.useShardGenerations() || snapshotStatus.generation() == null :\n+                assert entry.version().onOrAfter(SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION) || snapshotStatus.generation() == null :", "originalCommit": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NDIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380094206", "bodyText": "Added the method and dried up all spots that it applied to. I'm afraid we'll have to keep the constant though so it can be written to the wire in the BwC case in SnapshotsInProgress.Entry.\nWe can get rid of it in master though once 7.7 is out :)", "author": "original-brownbear", "createdAt": "2020-02-17T10:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjk1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380032952", "bodyText": "can we avoid passing the full cluster state?\nThe cluster state is possibly a very large object, and holding onto it for a longer time has caused issues in the past, given that we go onto a different thread here, with a potentially large queue of other snapshot-related tasks to execute first.", "author": "ywelsch", "createdAt": "2020-02-17T08:13:04Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1449,16 +1461,15 @@ public static boolean isRepositoryInUse(ClusterState clusterState, String reposi\n      * @param snapshot   snapshot\n      * @param listener   listener\n      * @param repositoryStateId the unique id representing the state of the repository at the time the deletion began\n-     * @param version minimum ES version the repository should be readable by\n+     * @param state      cluster state\n      */\n     private void deleteSnapshotFromRepository(Snapshot snapshot, @Nullable ActionListener<Void> listener, long repositoryStateId,\n-                                              Version version) {\n+                                              ClusterState state) {", "originalCommit": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5Mjk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380092955", "bodyText": "Jup done, that was certainly a little too dry :)", "author": "original-brownbear", "createdAt": "2020-02-17T10:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDAzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380034035", "bodyText": "Let's introduce a constant for this denoting \"old unknown repository format\".", "author": "ywelsch", "createdAt": "2020-02-17T08:15:56Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1402,12 +1370,56 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                     ));\n                 } else {\n                     logger.debug(\"deleted snapshot is not running - deleting files\");\n-                    deleteSnapshotFromRepository(snapshot, listener, repositoryStateId, newState.nodes().getMinNodeVersion());\n+                    deleteSnapshotFromRepository(snapshot, listener, repositoryStateId, newState);\n                 }\n             }\n         });\n     }\n \n+    /**\n+     * Determines the minimum {@link Version} that the snapshot repository must be compatible with from the current nodes in the cluster\n+     * and the contents of the repository. The minimum version is determined as the lowest version found across all snapshots in the\n+     * repository and all nodes in the cluster.\n+     *\n+     * @param state          current cluster state\n+     * @param repositoryName name of the repository to modify\n+     * @param repositoryData current {@link RepositoryData} of that repository\n+     * @param excluded       snapshot id to ignore when computing the minimum version\n+     *                       (used to use newer metadata version after a snapshot delete)\n+     * @return minimum node version that must still be able to read the repository metadata\n+     */\n+    public Version minCompatibleVersion(ClusterState state, String repositoryName, RepositoryData repositoryData,\n+                                        @Nullable SnapshotId excluded) {\n+        Version minCompatVersion = state.nodes().getMinNodeVersion();\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final Repository repository = repositoriesService.repository(repositoryName);\n+        for (SnapshotId snapshotId :\n+            snapshotIds.stream().filter(snapshotId -> snapshotId.equals(excluded) == false).collect(Collectors.toList())) {\n+            final Version known = repositoryData.getVersion(snapshotId);\n+            // If we don't have the version cached in the repository data yet we load it from the snapshot info blobs\n+            if (known == null) {\n+                assert repositoryData.shardGenerations().totalShards() == 0 :\n+                    \"Saw shard generations [\" + repositoryData.shardGenerations() +\n+                        \"] but did not have versions tracked for snapshot [\" + snapshotId + \"]\";\n+                try {\n+                    final Version foundVersion = repository.getSnapshotInfo(snapshotId).version();\n+                    if (foundVersion.before(SHARD_GEN_IN_REPO_DATA_VERSION)) {\n+                        // We don't really care about the exact version if its before 7.6 as the 7.5 metadata is the oldest we are able\n+                        // to write out so we stop iterating here and just use 7.5.0 as a placeholder.\n+                        return Version.V_7_5_0;", "originalCommit": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDQ4OA==", "url": "https://github.com/elastic/elasticsearch/pull/52365#discussion_r380034488", "bodyText": "can we give this a more meaningful name than just \"version\"? Perhaps repositoryMetaVersion?", "author": "ywelsch", "createdAt": "2020-02-17T08:17:06Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -235,21 +236,21 @@\n     @Override\n     public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n                                  List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 MetaData clusterMetaData, Map<String, Object> userMetadata, boolean writeShardGens,\n+                                 MetaData clusterMetaData, Map<String, Object> userMetadata, Version version,", "originalCommit": "35adacd157a4b7475e6f69b0db084df7d4ec6067", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ccb3eb002c7bb30a7b46b23a2abc1c9997a548f", "url": "https://github.com/elastic/elasticsearch/commit/9ccb3eb002c7bb30a7b46b23a2abc1c9997a548f", "message": "Merge remote-tracking branch 'elastic/master' into cleanup-annoying-bwc-blobstore", "committedDate": "2020-02-17T09:17:24Z", "type": "commit"}, {"oid": "d82bd5e6423551df5fd724999b323c3dbbad5f80", "url": "https://github.com/elastic/elasticsearch/commit/d82bd5e6423551df5fd724999b323c3dbbad5f80", "message": "CR: comments", "committedDate": "2020-02-17T10:05:43Z", "type": "commit"}, {"oid": "05327b92259a25ba4033a9df71f0c2a24d8e3882", "url": "https://github.com/elastic/elasticsearch/commit/05327b92259a25ba4033a9df71f0c2a24d8e3882", "message": "fix", "committedDate": "2020-02-17T10:14:04Z", "type": "commit"}]}