{"pr_number": 54412, "pr_title": "[DOCS] Adds HTTP response count example to Painless examples", "pr_createdAt": "2020-03-30T12:21:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54412", "timeline": [{"oid": "97c6a787b75720be0fb6d2b1b303b69b9360de06", "url": "https://github.com/elastic/elasticsearch/commit/97c6a787b75720be0fb6d2b1b303b69b9360de06", "message": "[DOCS] Adds HTTP response count example to Painless examples.", "committedDate": "2020-03-30T12:19:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MDY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400240641", "bodyText": "craters -> create ??", "author": "davidkyle", "createdAt": "2020-03-30T14:34:02Z", "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>\n+  \"responses.counts\": { <2>\n+    \"scripted_metric\": { <3>\n+      \"init_script\": \"state.responses = ['error':0L,'success':0L,'other':0L]\", <4>\n+      \"map_script\": \"\"\" <5>\n+        def code = doc['response.keyword'].value;\n+        if (code.startsWith('5') || code.startsWith('4')) {\n+          state.responses.error += 1 ;\n+        } else if(code.startsWith('2')) {\n+          state.responses.success += 1;\n+        } else {\n+          state.responses.other += 1;\n+        }\n+        \"\"\",\n+      \"combine_script\": \"state.responses\", <6>\n+      \"reduce_script\": \"\"\" <7>\n+        def counts = ['error': 0L, 'success': 0L, 'other': 0L];\n+        for (responses in states) {\n+          counts.error += responses['error'];\n+          counts.success += responses['success'];\n+          counts.other += responses['other'];\n+        }\n+        return counts;\n+        \"\"\"\n+      }\n+    },\n+  ...  \n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `aggregations` object of the {transform} that contains all aggregations.\n+<2> Object of the `scripted_metric` aggregation.\n+<3> This `scripted_metric` performs a distributed operation on the web log data \n+to count specific types of HTTP responses (error, success, and other).\n+<4> The `init_script` creates a `responses` array in the `state` object with \n+three properties (`error`, `success`, `other`) with long data type.\n+<5> The `map_script` defines `code` based on the `response.keyword` value of the \n+document, then it counts the errors, successes, and other responses based on the \n+first digit of the responses.\n+<6> The `combine_script` returns `state.responses` from each shard.\n+<7> The `reduce_script` craters a `counts` array with the `error`, `success`, ", "originalCommit": "97c6a787b75720be0fb6d2b1b303b69b9360de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NjgxMw==", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400266813", "bodyText": "I honestly don't know how it happened. Thanks @davidkyle for spotting it! :)", "author": "szabosteve", "createdAt": "2020-03-30T15:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MDY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400265942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <7> The `reduce_script` craters a `counts` array with the `error`, `success`, \n          \n          \n            \n            <7> The `reduce_script` creates a `counts` array with the `error`, `success`,", "author": "szabosteve", "createdAt": "2020-03-30T15:06:10Z", "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>\n+  \"responses.counts\": { <2>\n+    \"scripted_metric\": { <3>\n+      \"init_script\": \"state.responses = ['error':0L,'success':0L,'other':0L]\", <4>\n+      \"map_script\": \"\"\" <5>\n+        def code = doc['response.keyword'].value;\n+        if (code.startsWith('5') || code.startsWith('4')) {\n+          state.responses.error += 1 ;\n+        } else if(code.startsWith('2')) {\n+          state.responses.success += 1;\n+        } else {\n+          state.responses.other += 1;\n+        }\n+        \"\"\",\n+      \"combine_script\": \"state.responses\", <6>\n+      \"reduce_script\": \"\"\" <7>\n+        def counts = ['error': 0L, 'success': 0L, 'other': 0L];\n+        for (responses in states) {\n+          counts.error += responses['error'];\n+          counts.success += responses['success'];\n+          counts.other += responses['other'];\n+        }\n+        return counts;\n+        \"\"\"\n+      }\n+    },\n+  ...  \n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `aggregations` object of the {transform} that contains all aggregations.\n+<2> Object of the `scripted_metric` aggregation.\n+<3> This `scripted_metric` performs a distributed operation on the web log data \n+to count specific types of HTTP responses (error, success, and other).\n+<4> The `init_script` creates a `responses` array in the `state` object with \n+three properties (`error`, `success`, `other`) with long data type.\n+<5> The `map_script` defines `code` based on the `response.keyword` value of the \n+document, then it counts the errors, successes, and other responses based on the \n+first digit of the responses.\n+<6> The `combine_script` returns `state.responses` from each shard.\n+<7> The `reduce_script` craters a `counts` array with the `error`, `success`, ", "originalCommit": "97c6a787b75720be0fb6d2b1b303b69b9360de06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e4b199d2191981242922b3874e1169b326f50165", "url": "https://github.com/elastic/elasticsearch/commit/e4b199d2191981242922b3874e1169b326f50165", "message": "Update docs/reference/transform/painless-examples.asciidoc", "committedDate": "2020-03-30T15:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNjA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400816058", "bodyText": "we omit \"aggregations\" on the other example. I think we should be consistent. However I like it, so I suggest to add \"aggregations\" on the other example.", "author": "hendrikmuhs", "createdAt": "2020-03-31T10:46:28Z", "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>", "originalCommit": "e4b199d2191981242922b3874e1169b326f50165", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNzEzOA==", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400817138", "bodyText": "I would add that the response code is stored as keyword and not as numeric.", "author": "hendrikmuhs", "createdAt": "2020-03-31T10:48:34Z", "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.", "originalCommit": "e4b199d2191981242922b3874e1169b326f50165", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7c9619e260e775a208c0243c0cd7747097ab3b8", "url": "https://github.com/elastic/elasticsearch/commit/b7c9619e260e775a208c0243c0cd7747097ab3b8", "message": "[DOCS] Addresses feedback and minor changes.", "committedDate": "2020-03-31T12:01:06Z", "type": "commit"}, {"oid": "57b009b843b98e342c02406c3409ac6059b75f17", "url": "https://github.com/elastic/elasticsearch/commit/57b009b843b98e342c02406c3409ac6059b75f17", "message": "Merge branch 'sm.painless' of github.com:szabosteve/elasticsearch into sm.painless", "committedDate": "2020-03-31T12:01:54Z", "type": "commit"}, {"oid": "b22197f56be7ad79a0781d03b05524d5088c20c0", "url": "https://github.com/elastic/elasticsearch/commit/b22197f56be7ad79a0781d03b05524d5088c20c0", "message": "[DOCS] Addresses feedback and minor changes.", "committedDate": "2020-03-31T12:02:49Z", "type": "commit"}]}