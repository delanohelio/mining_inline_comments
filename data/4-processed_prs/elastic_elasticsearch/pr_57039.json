{"pr_number": 57039, "pr_title": "Add http proxy support for OIDC realm", "pr_createdAt": "2020-05-21T13:24:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57039", "timeline": [{"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212", "url": "https://github.com/elastic/elasticsearch/commit/11fbefdf6825e788226e543f2b1628ffe62a1212", "message": "Add http proxy support for OIDC realm\n\nThis change introduces support for using an http proxy for egress\ncommunication of the OpenID Connect realm.", "committedDate": "2020-05-21T13:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxOTMyMA==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429619320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));\n          \n          \n            \n                    key -> Setting.intSetting(key, 80, 1, 65535, Setting.Property.NodeScope), () -> HTTP_PROXY_HOST);", "author": "albertzaharovits", "createdAt": "2020-05-24T09:57:42Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<Integer> HTTP_PROXY_PORT\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.port\",\n+        key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));", "originalCommit": "11fbefdf6825e788226e543f2b1628ffe62a1212", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzU5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637596", "bodyText": "The value validation for hostname is probably overkill in this form, it might be more pragmatic to use smth similar to TextUtils.containsBlanks(argument), but I prefer it like this because it doesn't require assuming anything about the validations that HttpHost may do internally.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n          \n          \n            \n                    key -> Setting.simpleString(key, Setting.Property.NodeScope));\n          \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"\", new Setting.Validator<String>() {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void validate(final String value) {\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void validate(final String value, final Map<Setting<?>, Object> settings) {\n          \n          \n            \n                            switch (value) {\n          \n          \n            \n                                case \"\":\n          \n          \n            \n                                    break;\n          \n          \n            \n                                default:\n          \n          \n            \n                                    final String namespace = HTTP_PROXY_HOST.getNamespace(HTTP_PROXY_HOST.getConcreteSetting(key));\n          \n          \n            \n                                    final Integer port = (Integer) settings.get(HTTP_PROXY_PORT.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                                    final String scheme = (String) settings.get(HTTP_PROXY_SCHEME.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        new HttpHost(value, port, scheme);\n          \n          \n            \n                                    } catch (Exception e) {\n          \n          \n            \n                                        throw new SettingsException(\"host [\" + value + \"] for key [\" + key + \"] is invalid\", e);\n          \n          \n            \n                                    }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public Iterator<Setting<?>> settings() {\n          \n          \n            \n                            final String namespace = HTTP_PROXY_HOST.getNamespace(HTTP_PROXY_HOST.getConcreteSetting(key));\n          \n          \n            \n                            final List<Setting<?>> settings = List.of(HTTP_PROXY_PORT.getConcreteSettingForNamespace(namespace),\n          \n          \n            \n                                    HTTP_PROXY_SCHEME.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                            return settings.iterator();\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                    }, Setting.Property.NodeScope));", "author": "albertzaharovits", "createdAt": "2020-05-24T13:36:46Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));", "originalCommit": "11fbefdf6825e788226e543f2b1628ffe62a1212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NjQ0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429646446", "bodyText": "The value validation for hostname is probably overkill in this form\n\nNah, I like delegating the validation to the class that would actually do it in runtime too, +1", "author": "jkakavas", "createdAt": "2020-05-24T15:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzYxMA==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637610", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"http\", Setting.Property.NodeScope));\n          \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"http\", scheme -> {\n          \n          \n            \n                        String normalizedScheme = scheme.toLowerCase(Locale.ROOT);\n          \n          \n            \n                        if (false == (\"https\".equals(normalizedScheme) || \"http\".equals(normalizedScheme))) {\n          \n          \n            \n                            throw new SettingsException(\"scheme [\" + scheme + \"] for key [\" + key + \"] is invalid, not http or https\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }, Setting.Property.NodeScope), () -> HTTP_PROXY_HOST);", "author": "albertzaharovits", "createdAt": "2020-05-24T13:36:53Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<Integer> HTTP_PROXY_PORT\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.port\",\n+        key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n+        key -> Setting.simpleString(key, \"http\", Setting.Property.NodeScope));", "originalCommit": "11fbefdf6825e788226e543f2b1628ffe62a1212", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637767", "bodyText": "typo ephmeralOpPort -> ephemeralOpPort", "author": "albertzaharovits", "createdAt": "2020-05-24T13:38:18Z", "path": "x-pack/qa/oidc-op-tests/build.gradle", "diffHunk": "@@ -12,13 +12,15 @@ dependencies {\n }\n testFixtures.useFixture \":x-pack:test:idp-fixture\", \"oidc-provider\"\n \n-String ephemeralPort;\n+String ephmeralOpPort", "originalCommit": "11fbefdf6825e788226e543f2b1628ffe62a1212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwOTQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434009426", "bodyText": "this nit is still standing", "author": "albertzaharovits", "createdAt": "2020-06-02T16:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434322955", "bodyText": "\ud83e\udd26", "author": "jkakavas", "createdAt": "2020-06-03T05:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw=="}], "type": "inlineReview"}, {"oid": "71b74fd1bd8fbbb78b671cb0c9105e401a5ef2f4", "url": "https://github.com/elastic/elasticsearch/commit/71b74fd1bd8fbbb78b671cb0c9105e401a5ef2f4", "message": "address feedback", "committedDate": "2020-05-26T09:34:44Z", "type": "commit"}, {"oid": "702ae5a28cd6612c34c0fc3a74bcf8a712c351a5", "url": "https://github.com/elastic/elasticsearch/commit/702ae5a28cd6612c34c0fc3a74bcf8a712c351a5", "message": "Merge remote-tracking branch 'origin/master' into oidc-proxy-support", "committedDate": "2020-05-26T09:35:17Z", "type": "commit"}, {"oid": "a0558ff3ee4beb8b604b9dbc57a90f42252b3347", "url": "https://github.com/elastic/elasticsearch/commit/a0558ff3ee4beb8b604b9dbc57a90f42252b3347", "message": "Remove auto-import mess", "committedDate": "2020-05-26T11:29:03Z", "type": "commit"}, {"oid": "aa5df032e9a66266c85b3ba97a446277f36b53dc", "url": "https://github.com/elastic/elasticsearch/commit/aa5df032e9a66266c85b3ba97a446277f36b53dc", "message": "Merge branch 'master' into oidc-proxy-support", "committedDate": "2020-06-02T08:19:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwOTI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434009288", "bodyText": "nit \"backchannel\" is a valid english word.", "author": "albertzaharovits", "createdAt": "2020-06-02T16:23:04Z", "path": "docs/reference/settings/security-settings.asciidoc", "diffHunk": "@@ -1347,6 +1347,24 @@ id tokens with regards to their creation and expiration times.\n Specifies whether to populate the {es} user's metadata with the values that are\n provided by the OpenID Connect claims. Defaults to `true`.\n \n+`http.proxy.host`::\n+Specifies the address of the proxy server that will be used by the internal\n+http client for all back-channel communication to the OpenID Connect Provider", "originalCommit": "aa5df032e9a66266c85b3ba97a446277f36b53dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ea8d297c81bd4052a5c26bccf648abd3df67f10", "url": "https://github.com/elastic/elasticsearch/commit/2ea8d297c81bd4052a5c26bccf648abd3df67f10", "message": "address feedback", "committedDate": "2020-06-03T05:51:51Z", "type": "commit"}, {"oid": "c1dbfc2fb052d2b5122aca9661529cd6c209eaf3", "url": "https://github.com/elastic/elasticsearch/commit/c1dbfc2fb052d2b5122aca9661529cd6c209eaf3", "message": "Merge remote-tracking branch 'origin/master' into oidc-proxy-support", "committedDate": "2020-06-03T05:51:56Z", "type": "commit"}]}