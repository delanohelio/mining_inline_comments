{"pr_number": 54532, "pr_title": "Fix responses for the token APIs", "pr_createdAt": "2020-03-31T20:08:38Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54532", "timeline": [{"oid": "a58867908a7fca6f2ea4d430f432089d4a03e5d9", "url": "https://github.com/elastic/elasticsearch/commit/a58867908a7fca6f2ea4d430f432089d4a03e5d9", "message": "Fix responses for the token APIs\n\nThis commit fixes our behavior for the use of token related APIs.\nMore concretely:\n\n- In the Get Token API with the `refresh` grant, when an invalid\n(already deleted, malformed, unknown) refresh token is used in the\nbody of the request, we respond with 400 and an error_description\nheader with the message \"could not refresh the requested token\" as\nopposed to sometimes doing that and sometimes returning `401` and\na message \"token malformed\"\n\n- In the Invalidate Token API, when using an invalid (already\ndeleted, malformed, unknown) access or refresh token, we respond\nwith 200 and a body that shows that no tokens were invalidated:\n```\n{\n  \"invalidated_tokens\":0,\n  \"previously_invalidated_tokens\":0,\n  \"error_count\":0\n}\n```\nas opposed to the current behavior which was to throw an error\nwith 400 or 401 ( depending on the case )", "committedDate": "2020-03-31T19:51:23Z", "type": "commit"}, {"oid": "262cffa6ac1ba618a009581e947a279c16dcaf05", "url": "https://github.com/elastic/elasticsearch/commit/262cffa6ac1ba618a009581e947a279c16dcaf05", "message": "fix expected error", "committedDate": "2020-03-31T21:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDI5OA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r401214298", "bodyText": "The (expected for this test) 500 was masked by the 401 that was thrown in \n  \n    \n      elasticsearch/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/oidc/TransportOpenIdConnectLogoutAction.java\n    \n    \n         Line 55\n      in\n      d029a13\n    \n    \n    \n    \n\n        \n          \n           invalidateRefreshToken(request.getRefreshToken(), ActionListener.wrap(ignore -> {", "author": "jkakavas", "createdAt": "2020-03-31T21:04:10Z", "path": "x-pack/docs/en/rest-api/security/oidc-logout-api.asciidoc", "diffHunk": "@@ -48,7 +48,7 @@ POST /_security/oidc/logout\n   \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n }\n --------------------------------------------------\n-// TEST[catch:unauthorized]\n+// TEST[catch:request]", "originalCommit": "262cffa6ac1ba618a009581e947a279c16dcaf05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1Njc5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r402056797", "bodyText": "This is necessary because the response changes to 200 and error now happens in the OIDC part as 500?", "author": "ywangd", "createdAt": "2020-04-02T05:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MjE5OA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r406252198", "bodyText": "this is necessary because we don't do the login flow so we don't have tokens to invalidate for the logout. We expect that this call would fail for that reason - but it failing with a 401 was a mistake", "author": "jkakavas", "createdAt": "2020-04-09T14:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDI5OA=="}], "type": "inlineReview"}, {"oid": "a12ba64e52b849720fe702a5c6c56a4f9ca46cae", "url": "https://github.com/elastic/elasticsearch/commit/a12ba64e52b849720fe702a5c6c56a4f9ca46cae", "message": "fix doc test", "committedDate": "2020-04-01T09:50:09Z", "type": "commit"}, {"oid": "24eb4b788ca73e5bcdf326651cc8d9b02bc7e489", "url": "https://github.com/elastic/elasticsearch/commit/24eb4b788ca73e5bcdf326651cc8d9b02bc7e489", "message": "Merge remote-tracking branch 'origin/master' into fix-token-invalidation", "committedDate": "2020-04-01T10:09:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NTE0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r402055145", "bodyText": "With this change, a 200 response will be returned if the token index does not exist. This behaviour is different from the refresh token invalidation, which returns 400 invalidGrant when the index does not exist.", "author": "ywangd", "createdAt": "2020-04-02T05:12:19Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -584,7 +585,8 @@ public void invalidateAccessToken(String accessToken, ActionListener<TokensInval\n             final Iterator<TimeValue> backoff = DEFAULT_BACKOFF.iterator();\n             decodeToken(accessToken, ActionListener.wrap(userToken -> {\n                 if (userToken == null) {\n-                    listener.onFailure(traceLog(\"invalidate token\", accessToken, malformedTokenException()));\n+                    logger.trace(\"The access token [{}] is expired and already deleted\", accessToken);\n+                    listener.onResponse(TokensInvalidationResult.emptyResult());", "originalCommit": "24eb4b788ca73e5bcdf326651cc8d9b02bc7e489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MTMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r402061309", "bodyText": "All usage of malformedTokenException seems to be deleted so itself can be removed as well.", "author": "ywangd", "createdAt": "2020-04-02T05:34:55Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -872,7 +891,7 @@ private void findTokenFromRefreshToken(String refreshToken, Iterator<TimeValue>\n                     }\n                 } catch (IOException e) {\n                     logger.debug(() -> new ParameterizedMessage(\"Could not decode refresh token [{}].\", refreshToken), e);\n-                    listener.onFailure(malformedTokenException());\n+                    listener.onResponse(SearchHits.empty());", "originalCommit": "24eb4b788ca73e5bcdf326651cc8d9b02bc7e489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00efc5421aaeb21809b0478432929739a994637c", "url": "https://github.com/elastic/elasticsearch/commit/00efc5421aaeb21809b0478432929739a994637c", "message": "Merge remote-tracking branch 'origin/master' into fix-token-invalidation", "committedDate": "2020-04-08T13:20:48Z", "type": "commit"}, {"oid": "406e4ebdfb40544874b226ec8367f7b45795b074", "url": "https://github.com/elastic/elasticsearch/commit/406e4ebdfb40544874b226ec8367f7b45795b074", "message": "Set status codes correctly. Allow callers of  to handle the exceptions thrown", "committedDate": "2020-04-09T13:48:01Z", "type": "commit"}, {"oid": "6344a1253085b5054c5db4e0360d1f1c188b652a", "url": "https://github.com/elastic/elasticsearch/commit/6344a1253085b5054c5db4e0360d1f1c188b652a", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix-token-invalidation", "committedDate": "2020-04-09T14:39:40Z", "type": "commit"}, {"oid": "9e0831f7cdca8c1cfa412bc4f7cde1ed281b21e5", "url": "https://github.com/elastic/elasticsearch/commit/9e0831f7cdca8c1cfa412bc4f7cde1ed281b21e5", "message": "remove unnecessary field from response, add yaml test to test response codes", "committedDate": "2020-04-09T16:56:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODY4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r406348688", "bodyText": "This was added because we couldn't trigger the index to be unavailable ( but rather only not existent ) in TokenAuthIntegTests", "author": "jkakavas", "createdAt": "2020-04-09T17:05:05Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportInvalidateTokenActionTests.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.token;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ClusterServiceUtils;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.action.token.InvalidateTokenRequest;\n+import org.elasticsearch.xpack.core.security.action.token.InvalidateTokenResponse;\n+import org.elasticsearch.xpack.security.authc.AuthenticationService;\n+import org.elasticsearch.xpack.security.authc.TokenService;\n+import org.elasticsearch.xpack.security.support.SecurityIndexManager;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Clock;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.elasticsearch.xpack.core.security.action.token.InvalidateTokenRequest.Type.ACCESS_TOKEN;\n+import static org.elasticsearch.xpack.core.security.action.token.InvalidateTokenRequest.Type.REFRESH_TOKEN;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TransportInvalidateTokenActionTests extends ESTestCase {\n+\n+    private static final Settings SETTINGS = Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), \"TokenServiceTests\")\n+        .put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), true).build();\n+\n+    private ThreadPool threadPool;\n+    private Client client;\n+    private SecurityIndexManager securityIndex;\n+    private ClusterService clusterService;\n+    private AuthenticationService authenticationService;\n+    private XPackLicenseState license;\n+    private SecurityContext securityContext;\n+\n+    @Before\n+    public void setup() {\n+        threadPool = new TestThreadPool(getTestName());\n+        securityContext = new SecurityContext(Settings.EMPTY, threadPool.getThreadContext());\n+        client = mock(Client.class);\n+        when(client.threadPool()).thenReturn(threadPool);\n+        when(client.settings()).thenReturn(SETTINGS);\n+        securityIndex = mock(SecurityIndexManager.class);\n+        this.clusterService = ClusterServiceUtils.createClusterService(threadPool);\n+        this.license = mock(XPackLicenseState.class);\n+        when(license.isTokenServiceAllowed()).thenReturn(true);\n+    }\n+\n+    public void testInvalidateTokensWhenIndexUnavailable() throws Exception {", "originalCommit": "9e0831f7cdca8c1cfa412bc4f7cde1ed281b21e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3NzU1MA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407477550", "bodyText": "By read the code, it seems that a closed index counts as \"unavailable\"?", "author": "ywangd", "createdAt": "2020-04-13T13:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTExNw==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r408765117", "bodyText": "Is it worthwhile to test \"unavailable\" index in TokenAuthIntegTests by closing the token index before invalidation?", "author": "ywangd", "createdAt": "2020-04-15T11:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODY4OA=="}], "type": "inlineReview"}, {"oid": "05816fe36e538b0b2eb271103d4792a9e777ab33", "url": "https://github.com/elastic/elasticsearch/commit/05816fe36e538b0b2eb271103d4792a9e777ab33", "message": "complete the cleanup", "committedDate": "2020-04-10T10:24:54Z", "type": "commit"}, {"oid": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "url": "https://github.com/elastic/elasticsearch/commit/a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "message": "Fix test", "committedDate": "2020-04-10T13:14:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0NTAzMg==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407445032", "bodyText": "This is a good catch.", "author": "ywangd", "createdAt": "2020-04-13T11:57:47Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ExpiredTokenRemover.java", "diffHunk": "@@ -70,6 +70,7 @@ public void doRun() {\n             indicesWithTokens.add(securityMainIndex.aliasName());\n         }\n         if (indicesWithTokens.isEmpty()) {\n+            markComplete();", "originalCommit": "9e0831f7cdca8c1cfa412bc4f7cde1ed281b21e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2MjMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407462314", "bodyText": "This method does not seem to be used anywhere?", "author": "ywangd", "createdAt": "2020-04-13T12:49:50Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -1749,15 +1784,10 @@ private static ElasticsearchSecurityException expiredTokenException() {\n     }\n \n     /**\n-     * Creates an {@link ElasticsearchSecurityException} that indicates the token was malformed. It\n-     * is up to the client to re-authenticate and obtain a new token. The format for this response\n-     * is defined in <a href=\"https://tools.ietf.org/html/rfc6750#section-3.1\"></a>\n+     * Creates an {@link ElasticsearchSecurityException} that indicates that we couldn't find the token document in our tokens index\n      */\n-    private static ElasticsearchSecurityException malformedTokenException() {\n-        ElasticsearchSecurityException e =\n-                new ElasticsearchSecurityException(\"token malformed\", RestStatus.UNAUTHORIZED);\n-        e.addHeader(\"WWW-Authenticate\", MALFORMED_TOKEN_WWW_AUTH_VALUE);\n-        return e;\n+    private static ElasticsearchException tokenNotFoundException() {", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MzM1NA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407483354", "bodyText": "\ud83d\udc4dI think it is worth to make the behaviour of deleteXxx and invalidateXxx more consistent. It seems most of them are ignoring 404, e.g. deleteUser. Not suggesting it for this PR, but we could potentially push for more consistency in future work. Currently deleteRoleMapping and invalidateApiKey are not yet with this pattern.", "author": "ywangd", "createdAt": "2020-04-13T13:41:18Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java", "diffHunk": "@@ -765,7 +765,7 @@ public Cancellable createTokenAsync(CreateTokenRequest request, RequestOptions o\n      */\n     public InvalidateTokenResponse invalidateToken(InvalidateTokenRequest request, RequestOptions options) throws IOException {\n         return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::invalidateToken, options,\n-            InvalidateTokenResponse::fromXContent, emptySet());\n+            InvalidateTokenResponse::fromXContent, singleton(404));", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNTU0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407505549", "bodyText": "I am not sure what this suppose to test? It's valid base64 and we expect it to fail due to which failure?", "author": "ywangd", "createdAt": "2020-04-13T14:26:08Z", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/token/11_invalidation.yml", "diffHunk": "@@ -0,0 +1,143 @@\n+---\n+setup:\n+  - skip:\n+      features: headers\n+\n+  - do:\n+      cluster.health:\n+        wait_for_status: yellow\n+\n+  - do:\n+      security.put_role:\n+        name: \"admin_role\"\n+        body:  >\n+          {\n+            \"cluster\": [\"manage_security\"]\n+          }\n+\n+  - do:\n+      security.put_user:\n+        username: \"token_user\"\n+        body:  >\n+          {\n+            \"password\" : \"x-pack-test-password\",\n+            \"roles\" : [ \"admin_role\" ],\n+            \"full_name\" : \"Token User\"\n+          }\n+\n+---\n+teardown:\n+\n+  - do:\n+      security.delete_role:\n+        name: \"admin_role\"\n+        ignore: 404\n+\n+  - do:\n+      security.delete_user:\n+        username: \"token_user\"\n+        ignore: 404\n+\n+---\n+\"Test invalidate access token return statuses\":\n+\n+  - do:\n+      catch: unavailable\n+      security.invalidate_token:\n+        body:\n+          token: 46ToAxYzNUdPZWdYOFRQcWhjeHR3NWpvTmVB\n+\n+  - do:\n+      security.get_token:\n+        body:\n+          grant_type: \"password\"\n+          username: \"token_user\"\n+          password: \"x-pack-test-password\"\n+\n+  - match: { type: \"Bearer\" }\n+  - is_true: access_token\n+  - set: { access_token: token }\n+  - match: { expires_in: 1200 }\n+  - is_false: scope\n+\n+  - do:\n+      catch: missing\n+      security.invalidate_token:\n+        body:\n+          token: \"!this_is_not_a_base64_string_and_we_should_fail_decoding_it\"\n+\n+  - match: { invalidated_tokens: 0 }\n+  - match: { previously_invalidated_tokens: 0 }\n+  - match: { error_count: 0 }\n+\n+  - do:\n+      catch: missing\n+      security.invalidate_token:\n+        body:\n+          token: \"10we+might+assume+this+is+valid+old+token\"", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407558004", "bodyText": "A wrong token that happens to start with a substring that would \"trick\" (First few bytes would decode to something that looks like an old version ) our decoding implementation ( InputStreamStreamInput wrapping a Base64.Decoder wrapping a ByteArrayInputStream) into assuming this is an old style token ( pre 7.2 ) and we would try to decrypt it and fail in https://github.com/elastic/elasticsearch/blob/7.x/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java#L547", "author": "jkakavas", "createdAt": "2020-04-13T16:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MDEwMw==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407790103", "bodyText": "Had a debug session for this and it actually failed at here due to length check. Anyway, it serves the same purpose. Thanks.", "author": "ywangd", "createdAt": "2020-04-14T00:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNTU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjA0MA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407512040", "bodyText": "This kinda reasonates on what we have discussed the other day around how many statements should be surrounded by a try-catch block. The IOException is only thrown by unpackVersionAndPayload() which is the first statement in this try-catch block. The intention for returning 404 when unpacking fails would be much easier to understand if unpackVersionAndPayload is the only statement surrounded by this try-catch block.", "author": "ywangd", "createdAt": "2020-04-13T14:38:48Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -872,7 +912,7 @@ private void findTokenFromRefreshToken(String refreshToken, Iterator<TimeValue>\n                     }\n                 } catch (IOException e) {", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MDM0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407980342", "bodyText": "I see your point, took a swing at it", "author": "jkakavas", "createdAt": "2020-04-14T09:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODg2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407528867", "bodyText": "Will this change an index related error (unavailable or not exists) to an security exception (401)? Do we need a isShardNotAvailableException here?", "author": "ywangd", "createdAt": "2020-04-13T15:10:31Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -578,17 +597,21 @@ void decodeToken(String token, ActionListener<UserToken> listener) {\n     public void invalidateAccessToken(String accessToken, ActionListener<TokensInvalidationResult> listener) {\n         ensureEnabled();\n         if (Strings.isNullOrEmpty(accessToken)) {\n-            listener.onFailure(traceLog(\"no access token provided\", new IllegalArgumentException(\"access token must be provided\")));\n+            listener.onFailure(traceLog(\"invalidate access token\", new IllegalArgumentException(\"access token must be provided\")));\n         } else {\n+            logger.debug(\"INVALIDATE ACCESS TOKEN\");\n             maybeStartTokenRemover();\n             final Iterator<TimeValue> backoff = DEFAULT_BACKOFF.iterator();\n             decodeToken(accessToken, ActionListener.wrap(userToken -> {\n                 if (userToken == null) {\n-                    listener.onFailure(traceLog(\"invalidate token\", accessToken, malformedTokenException()));\n+                    // The chances of a random token string decoding to something that we can read is minimal, so\n+                    // we assume that this was a token we have created but is now expired/revoked and deleted\n+                    logger.trace(\"The access token [{}] is expired and already deleted\", accessToken);\n+                    listener.onResponse(TokensInvalidationResult.emptyResult(RestStatus.NOT_FOUND));\n                 } else {\n                     indexInvalidation(Collections.singleton(userToken), backoff, \"access_token\", null, listener);\n                 }\n-            }, listener::onFailure));\n+            }, e -> listener.onFailure(unableToPerformAction(e))));", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NzEyMw==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407977123", "bodyText": "Will this change an index related error (unavailable or not exists) to an security exception (401)?\n\nNo, because unableToPerformAction will set the status code to 503. The idea here is that if there is an \"expected\" reason this failed to decode, we catch it in the decodeToken and call the listeners onResponse() with null. If something unexpected happen, we want to return 503 so that the caller knows that the token might still not be invalidated and should probably try again", "author": "jkakavas", "createdAt": "2020-04-14T08:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MDkxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407980915", "bodyText": "You are right. The status is service unavailable, not 401.", "author": "ywangd", "createdAt": "2020-04-14T09:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMDQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407530475", "bodyText": "Is this going to cause a NPE down the line, e.g. https://github.com/elastic/elasticsearch/blob/7.6/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlLogoutAction.java#L57", "author": "ywangd", "createdAt": "2020-04-13T15:13:34Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -431,14 +444,20 @@ public void authenticateToken(SecureString tokenString, ActionListener<Authentic\n      */\n     public void getAuthenticationAndMetadata(String token, ActionListener<Tuple<Authentication, Map<String, Object>>> listener) {\n         decodeToken(token, ActionListener.wrap(\n-                userToken -> {\n-                    if (userToken == null) {\n-                        listener.onFailure(new ElasticsearchSecurityException(\"supplied token is not valid\"));\n-                    } else {\n-                        listener.onResponse(new Tuple<>(userToken.getAuthentication(), userToken.getMetadata()));\n-                    }\n-                },\n-                listener::onFailure\n+            userToken -> {\n+                if (userToken == null) {\n+                    listener.onFailure(new ElasticsearchSecurityException(\"supplied token is not valid\"));\n+                } else {\n+                    listener.onResponse(new Tuple<>(userToken.getAuthentication(), userToken.getMetadata()));\n+                }\n+            },\n+            e -> {\n+                if (isShardNotAvailableException(e)) {\n+                    listener.onResponse(null);", "originalCommit": "a240c8d96ef148c555d171b3f2c93ea8bbd8d5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3OTg4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r407979888", "bodyText": "Good catch thanks, I will revert this part of the change. We should fail this either way and null doesn't make sense for this Listener", "author": "jkakavas", "createdAt": "2020-04-14T09:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMDQ3NQ=="}], "type": "inlineReview"}, {"oid": "fa3075adfb0a89464feb408249abde34be5c2fe8", "url": "https://github.com/elastic/elasticsearch/commit/fa3075adfb0a89464feb408249abde34be5c2fe8", "message": "address feedback", "committedDate": "2020-04-14T09:05:42Z", "type": "commit"}, {"oid": "33778d6b751326433b5c61e7edb54e100ca946bf", "url": "https://github.com/elastic/elasticsearch/commit/33778d6b751326433b5c61e7edb54e100ca946bf", "message": "Merge branch 'master' into fix-token-invalidation", "committedDate": "2020-04-14T09:45:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODgzMA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r408708830", "bodyText": "I think you should you the securityIndexManager.freeze() pattern here.", "author": "albertzaharovits", "createdAt": "2020-04-15T09:33:52Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -450,7 +463,7 @@ private void getUserTokenFromId(String userTokenId, Version tokenVersion, Action\n         final SecurityIndexManager tokensIndex = getTokensIndexForVersion(tokenVersion);\n         if (tokensIndex.isAvailable() == false) {\n             logger.warn(\"failed to get access token [{}] because index [{}] is not available\", userTokenId, tokensIndex.aliasName());\n-            listener.onResponse(null);\n+            listener.onFailure(tokensIndex.getUnavailableReason());", "originalCommit": "33778d6b751326433b5c61e7edb54e100ca946bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ba228bc8e54f149becbcad518e2fef1c392b2df", "url": "https://github.com/elastic/elasticsearch/commit/2ba228bc8e54f149becbcad518e2fef1c392b2df", "message": "address feedback", "committedDate": "2020-04-15T10:07:04Z", "type": "commit"}, {"oid": "84b6296d473b3ca44738d2d740a892a3b124a2e0", "url": "https://github.com/elastic/elasticsearch/commit/84b6296d473b3ca44738d2d740a892a3b124a2e0", "message": "Fix mocks to support SecurityIndexManager#freeze", "committedDate": "2020-04-15T12:04:08Z", "type": "commit"}, {"oid": "c78cb21fb1873a4d7da5b156cab7e8e046038257", "url": "https://github.com/elastic/elasticsearch/commit/c78cb21fb1873a4d7da5b156cab7e8e046038257", "message": "Differentiate between index closed/not-existent and unavailable", "committedDate": "2020-04-15T13:10:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNjUwNg==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r408836506", "bodyText": "I'd prefer to have the new logic encapsulated inside unableToPerformAction(e). Otherwise it looks good.", "author": "ywangd", "createdAt": "2020-04-15T13:22:27Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -578,17 +594,26 @@ void decodeToken(String token, ActionListener<UserToken> listener) {\n     public void invalidateAccessToken(String accessToken, ActionListener<TokensInvalidationResult> listener) {\n         ensureEnabled();\n         if (Strings.isNullOrEmpty(accessToken)) {\n-            listener.onFailure(traceLog(\"no access token provided\", new IllegalArgumentException(\"access token must be provided\")));\n+            listener.onFailure(traceLog(\"invalidate access token\", new IllegalArgumentException(\"access token must be provided\")));\n         } else {\n             maybeStartTokenRemover();\n             final Iterator<TimeValue> backoff = DEFAULT_BACKOFF.iterator();\n             decodeToken(accessToken, ActionListener.wrap(userToken -> {\n                 if (userToken == null) {\n-                    listener.onFailure(traceLog(\"invalidate token\", accessToken, malformedTokenException()));\n+                    // The chances of a random token string decoding to something that we can read is minimal, so\n+                    // we assume that this was a token we have created but is now expired/revoked and deleted\n+                    logger.trace(\"The access token [{}] is expired and already deleted\", accessToken);\n+                    listener.onResponse(TokensInvalidationResult.emptyResult(RestStatus.NOT_FOUND));\n                 } else {\n                     indexInvalidation(Collections.singleton(userToken), backoff, \"access_token\", null, listener);\n                 }\n-            }, listener::onFailure));\n+            }, e -> {\n+                if (e instanceof IndexNotFoundException || e instanceof IndexClosedException) {\n+                    listener.onFailure(new ElasticsearchSecurityException(\"failed to invalidate token\", RestStatus.BAD_REQUEST));\n+                } else {\n+                    listener.onFailure(unableToPerformAction(e));\n+                }", "originalCommit": "c78cb21fb1873a4d7da5b156cab7e8e046038257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzOTkxNg==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r408839916", "bodyText": "unableToPerformAction is meant to be a simple wrapper to throw an ESS with 503. If your issue is with the duplication of these 4 lines and you feel strongly about this, I can add method but I don't see so much value in it", "author": "jkakavas", "createdAt": "2020-04-15T13:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NTMyNA==", "url": "https://github.com/elastic/elasticsearch/pull/54532#discussion_r408845324", "bodyText": "I often apply rule of 3 and these code is duplicated 2 times, not 3 or more. So, no, I don't feel strongly about it.", "author": "ywangd", "createdAt": "2020-04-15T13:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNjUwNg=="}], "type": "inlineReview"}]}