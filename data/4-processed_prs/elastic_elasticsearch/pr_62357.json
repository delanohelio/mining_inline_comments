{"pr_number": 62357, "pr_title": "Introduce FetchContext", "pr_createdAt": "2020-09-15T08:55:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62357", "timeline": [{"oid": "f3153aa44834e64c4ca79d193ef2256284cf8689", "url": "https://github.com/elastic/elasticsearch/commit/f3153aa44834e64c4ca79d193ef2256284cf8689", "message": "WIP", "committedDate": "2020-09-10T13:05:26Z", "type": "commit"}, {"oid": "7966f1e4c2baedca0f5252745f5876cdf8fdfac5", "url": "https://github.com/elastic/elasticsearch/commit/7966f1e4c2baedca0f5252745f5876cdf8fdfac5", "message": "Rationalise fetch phase exceptions", "committedDate": "2020-09-10T13:54:25Z", "type": "commit"}, {"oid": "9c0ad25bdc541472ea5952ff3316b60165868686", "url": "https://github.com/elastic/elasticsearch/commit/9c0ad25bdc541472ea5952ff3316b60165868686", "message": "Merge branch 'fetch/exceptions' into fetch/fetchcontext", "committedDate": "2020-09-10T15:51:19Z", "type": "commit"}, {"oid": "66541df9770c8948285f419ba7e8d7931694dc1f", "url": "https://github.com/elastic/elasticsearch/commit/66541df9770c8948285f419ba7e8d7931694dc1f", "message": "Introduce FetchContext", "committedDate": "2020-09-12T15:46:38Z", "type": "commit"}, {"oid": "a994425fb7a894e5fc758b33d4ba62f7e447cd67", "url": "https://github.com/elastic/elasticsearch/commit/a994425fb7a894e5fc758b33d4ba62f7e447cd67", "message": "Merge remote-tracking branch 'origin/master' into fetch/fetchcontext", "committedDate": "2020-09-13T10:49:31Z", "type": "commit"}, {"oid": "8df15359f34d4094567b879e4be2b00ab44856d0", "url": "https://github.com/elastic/elasticsearch/commit/8df15359f34d4094567b879e4be2b00ab44856d0", "message": "reduce our surface area a little", "committedDate": "2020-09-13T14:56:19Z", "type": "commit"}, {"oid": "39f599cabbc9d2a519f86d5940eab8759a9f77e6", "url": "https://github.com/elastic/elasticsearch/commit/39f599cabbc9d2a519f86d5940eab8759a9f77e6", "message": "Merge remote-tracking branch 'origin/master' into fetch/fetchcontext", "committedDate": "2020-09-14T15:03:52Z", "type": "commit"}, {"oid": "e66798aee28445ef9039c4a238c94b88e999c8c5", "url": "https://github.com/elastic/elasticsearch/commit/e66798aee28445ef9039c4a238c94b88e999c8c5", "message": "null check on matchedqueries", "committedDate": "2020-09-14T15:15:55Z", "type": "commit"}, {"oid": "8c13e6165722927df146bae37140a87dd68f2999", "url": "https://github.com/elastic/elasticsearch/commit/8c13e6165722927df146bae37140a87dd68f2999", "message": "Merge remote-tracking branch 'origin/master' into fetch/fetchcontext", "committedDate": "2020-09-15T08:37:11Z", "type": "commit"}, {"oid": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "url": "https://github.com/elastic/elasticsearch/commit/d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "message": "javadocs", "committedDate": "2020-09-15T08:48:01Z", "type": "commit"}, {"oid": "762f3a89146a93ba149efacb3878f4d47a097c10", "url": "https://github.com/elastic/elasticsearch/commit/762f3a89146a93ba149efacb3878f4d47a097c10", "message": "precommit", "committedDate": "2020-09-15T09:06:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488501571", "bodyText": "This is I think only used in error messages, and is duplicated by information in FetchPhaseExecutionException so we may be able to remove it.", "author": "romseygeek", "createdAt": "2020-09-15T08:56:57Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchContext.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.query.ParsedQuery;\n+import org.elasticsearch.search.SearchExtBuilder;\n+import org.elasticsearch.search.fetch.subphase.FetchDocValuesContext;\n+import org.elasticsearch.search.fetch.subphase.FetchFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.search.fetch.subphase.FieldAndFormat;\n+import org.elasticsearch.search.fetch.subphase.InnerHitsContext;\n+import org.elasticsearch.search.fetch.subphase.ScriptFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.highlight.SearchHighlightContext;\n+import org.elasticsearch.search.internal.ContextIndexSearcher;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.rescore.RescoreContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Encapsulates state required to execute fetch phases\n+ */\n+public class FetchContext {\n+\n+    private FetchContext(SearchContext searchContext) {\n+        this.searchContext = searchContext;\n+    }\n+\n+    /**\n+     * Create a FetchContext based on a SearchContext\n+     */\n+    public static FetchContext fromSearchContext(SearchContext context) {\n+        return new FetchContext(context);\n+    }\n+\n+    private final SearchContext searchContext;\n+\n+    /**\n+     * The name of the index that documents are being fetched from\n+     */\n+    public String getIndexName() {", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488501916", "bodyText": "It would be really nice to be able to replace this with a SearchLookup", "author": "romseygeek", "createdAt": "2020-09-15T08:57:24Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchContext.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.query.ParsedQuery;\n+import org.elasticsearch.search.SearchExtBuilder;\n+import org.elasticsearch.search.fetch.subphase.FetchDocValuesContext;\n+import org.elasticsearch.search.fetch.subphase.FetchFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.search.fetch.subphase.FieldAndFormat;\n+import org.elasticsearch.search.fetch.subphase.InnerHitsContext;\n+import org.elasticsearch.search.fetch.subphase.ScriptFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.highlight.SearchHighlightContext;\n+import org.elasticsearch.search.internal.ContextIndexSearcher;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.rescore.RescoreContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Encapsulates state required to execute fetch phases\n+ */\n+public class FetchContext {\n+\n+    private FetchContext(SearchContext searchContext) {\n+        this.searchContext = searchContext;\n+    }\n+\n+    /**\n+     * Create a FetchContext based on a SearchContext\n+     */\n+    public static FetchContext fromSearchContext(SearchContext context) {\n+        return new FetchContext(context);\n+    }\n+\n+    private final SearchContext searchContext;\n+\n+    /**\n+     * The name of the index that documents are being fetched from\n+     */\n+    public String getIndexName() {\n+        return searchContext.indexShard().shardId().getIndexName();\n+    }\n+\n+    /**\n+     * The point-in-time searcher the original query was executed against\n+     */\n+    public ContextIndexSearcher searcher() {\n+        return searchContext.searcher();\n+    }\n+\n+    /**\n+     * The mapper service for the index we are fetching documents from\n+     */\n+    public MapperService mapperService() {\n+        return searchContext.mapperService();\n+    }\n+\n+    /**\n+     * The index settings for the index we are fetching documents from\n+     */\n+    public IndexSettings getIndexSettings() {\n+        return mapperService().getIndexSettings();\n+    }\n+\n+    /**\n+     * Gets index field data for a specific fieldtype\n+     */", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NjIxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488546219", "bodyText": "What do you mean?  A method returning search lookup instead of index field data?", "author": "javanna", "createdAt": "2020-09-15T10:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NzQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488547444", "bodyText": "Yes!", "author": "romseygeek", "createdAt": "2020-09-15T10:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1Mzc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488553748", "bodyText": "I don't follow 100% how that makes things better but I guess I need to see this updated once #61995 gets merged to understand how the two interact.", "author": "javanna", "createdAt": "2020-09-15T10:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyMjQwNw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489422407", "bodyText": "This is now gone entirely, but I think it would be useful to move SearchLookup directly into the FetchContext - it's not clear at present how to do that and get rid of the new QueryShardContext.newFetchLookup() method though.", "author": "romseygeek", "createdAt": "2020-09-16T13:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNTcwNw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r490025707", "bodyText": "agreed on moving search lookup into fetch context, I think Nik proposed it as well somewhere.", "author": "javanna", "createdAt": "2020-09-17T07:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMzg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488503875", "bodyText": "It seems odd that disabling stored fields means that we don't return the version, but this does not apply to seqNo/primaryTerm?", "author": "romseygeek", "createdAt": "2020-09-15T09:00:15Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchContext.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.query.ParsedQuery;\n+import org.elasticsearch.search.SearchExtBuilder;\n+import org.elasticsearch.search.fetch.subphase.FetchDocValuesContext;\n+import org.elasticsearch.search.fetch.subphase.FetchFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.search.fetch.subphase.FieldAndFormat;\n+import org.elasticsearch.search.fetch.subphase.InnerHitsContext;\n+import org.elasticsearch.search.fetch.subphase.ScriptFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.highlight.SearchHighlightContext;\n+import org.elasticsearch.search.internal.ContextIndexSearcher;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.rescore.RescoreContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Encapsulates state required to execute fetch phases\n+ */\n+public class FetchContext {\n+\n+    private FetchContext(SearchContext searchContext) {\n+        this.searchContext = searchContext;\n+    }\n+\n+    /**\n+     * Create a FetchContext based on a SearchContext\n+     */\n+    public static FetchContext fromSearchContext(SearchContext context) {\n+        return new FetchContext(context);\n+    }\n+\n+    private final SearchContext searchContext;\n+\n+    /**\n+     * The name of the index that documents are being fetched from\n+     */\n+    public String getIndexName() {\n+        return searchContext.indexShard().shardId().getIndexName();\n+    }\n+\n+    /**\n+     * The point-in-time searcher the original query was executed against\n+     */\n+    public ContextIndexSearcher searcher() {\n+        return searchContext.searcher();\n+    }\n+\n+    /**\n+     * The mapper service for the index we are fetching documents from\n+     */\n+    public MapperService mapperService() {\n+        return searchContext.mapperService();\n+    }\n+\n+    /**\n+     * The index settings for the index we are fetching documents from\n+     */\n+    public IndexSettings getIndexSettings() {\n+        return mapperService().getIndexSettings();\n+    }\n+\n+    /**\n+     * Gets index field data for a specific fieldtype\n+     */\n+    public IndexFieldData<?> getForField(MappedFieldType fieldType) {\n+        return searchContext.getForField(fieldType);\n+    }\n+\n+    /**\n+     * The original query\n+     */\n+    public Query query() {\n+        return searchContext.query();\n+    }\n+\n+    /**\n+     * The original query with additional filters and named queries\n+     */\n+    public ParsedQuery parsedQuery() {\n+        return searchContext.parsedQuery();\n+    }\n+\n+    /**\n+     * Any post-filters run as part of the search\n+     */\n+    public ParsedQuery parsedPostFilter() {\n+        return searchContext.parsedPostFilter();\n+    }\n+\n+    /**\n+     * Configuration for fetching _source\n+     */\n+    public FetchSourceContext fetchSourceContext() {\n+        return searchContext.fetchSourceContext();\n+    }\n+\n+    /**\n+     * Should the response include `explain` output\n+     */\n+    public boolean explain() {\n+        return searchContext.explain();\n+    }\n+\n+    /**\n+     * The rescorers included in the original search, used for explain output\n+     */\n+    public List<RescoreContext> rescore() {\n+        return searchContext.rescore();\n+    }\n+\n+    /**\n+     * Should the response include sequence number and primary term metadata\n+     */\n+    public boolean seqNoAndPrimaryTerm() {\n+        return searchContext.seqNoAndPrimaryTerm();\n+    }\n+\n+    /**\n+     * Configuration for fetching docValues fields\n+     */\n+    public FetchDocValuesContext docValuesContext() {\n+        FetchDocValuesContext dvContext = searchContext.docValuesContext();\n+        if (searchContext.collapse() != null) {\n+            // retrieve the `doc_value` associated with the collapse field\n+            String name = searchContext.collapse().getFieldName();\n+            if (dvContext == null) {\n+                return new FetchDocValuesContext(Collections.singletonList(new FieldAndFormat(name, null)));\n+            } else if (searchContext.docValuesContext().fields().stream().map(ff -> ff.field).anyMatch(name::equals) == false) {\n+                dvContext.fields().add(new FieldAndFormat(name, null));\n+            }\n+        }\n+        return dvContext;\n+    }\n+\n+    /**\n+     * Configuration for highlighting\n+     */\n+    public SearchHighlightContext highlight() {\n+        return searchContext.highlight();\n+    }\n+\n+    /**\n+     * Should the response include scores, even if scores were not calculated in the original query\n+     */\n+    public boolean fetchScores() {\n+        return searchContext.sort() != null && searchContext.trackScores();\n+    }\n+\n+    /**\n+     * Configuration for returning inner hits\n+     */\n+    public InnerHitsContext innerHits() {\n+        return searchContext.innerHits();\n+    }\n+\n+    /**\n+     * Should the response include version metadata\n+     */\n+    public boolean version() {\n+        // TODO version is loaded from docvalues, not stored fields, so why are we checking\n+        // stored fields here?\n+        return searchContext.version() &&", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MDAzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488880035", "bodyText": "This does seem off! I think we could treat it as a bug and fix it in another PR.", "author": "jtibshirani", "createdAt": "2020-09-15T18:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNDI1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489424259", "bodyText": "I opened #62456", "author": "romseygeek", "createdAt": "2020-09-16T13:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMzg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNTYzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488505631", "bodyText": "We were checking in a couple of subphases for things like \"how many docs are we executing against\" or \"is this a suggest-only response\".  This pulls this check up to the top level, which also means we don't need to include this information in the FetchContext.", "author": "romseygeek", "createdAt": "2020-09-15T09:03:01Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -87,19 +88,28 @@ public void execute(SearchContext context) {\n             LOGGER.trace(\"{}\", new SearchContextSourcePrinter(context));\n         }\n \n-        Map<String, Set<String>> storedToRequestedFields = new HashMap<>();\n-        FieldsVisitor fieldsVisitor = createStoredFieldsVisitor(context, storedToRequestedFields);\n+        if (context.docIdsToLoadSize() == 0) {\n+            // no individual hits to process, so we shortcut", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNjYxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488506619", "bodyText": "The hasOnlySuggest check is now done at the top level", "author": "romseygeek", "createdAt": "2020-09-15T09:04:31Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/ExplainPhase.java", "diffHunk": "@@ -33,8 +33,8 @@\n public final class ExplainPhase implements FetchSubPhase {\n \n     @Override\n-    public FetchSubPhaseProcessor getProcessor(SearchContext context) {\n-        if (context.explain() == false || context.hasOnlySuggest()) {", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1MTE4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488551182", "bodyText": "slight update; instead of checking for hasOnlySuggest(), we check that query() != null which is more general.", "author": "romseygeek", "createdAt": "2020-09-15T10:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488507063", "bodyText": "This logic is moved into FetchContext#docValuesContext(), meaning that we don't need to expose collapse() on FetchContext", "author": "romseygeek", "createdAt": "2020-09-15T09:05:10Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchDocValuesPhase.java", "diffHunk": "@@ -48,24 +48,15 @@\n public final class FetchDocValuesPhase implements FetchSubPhase {\n \n     @Override\n-    public FetchSubPhaseProcessor getProcessor(SearchContext context) throws IOException {\n-        if (context.collapse() != null) {", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MzIzNw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488883237", "bodyText": "To me it seems off to have non-trivial logic in a simple getter. It feels okay to keep this in FetchDocValuesPhase and expose FetchContext#collapse() since it has some relevance to the fetch phase ?", "author": "jtibshirani", "createdAt": "2020-09-15T18:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyOTYyMg==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489429622", "bodyText": "Would it feel better if the logic was in FetchContext's ctor? I do like the idea of moving separating \"which doc values do we need\" from \"how do we load doc values\". We do the same thing with source visiting right now so it kind of makes sense.", "author": "nik9000", "createdAt": "2020-09-16T13:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMTg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489431866", "bodyText": "I disagree, I think.  FetchContext#collapse() doesn't really have any relevance to this phase - all the phase cares about is getting a set of fields to fetch from docvalues, and doesn't need to know where the list is from.  And collapse() isn't needed for any of the other subphases either.  Whereas inside the FetchContext we have access to the search context as a whole, so we can combine the user request with information from other sources (like the collapse context).  Other methods on FetchContext also combine information from the search context in more or less complex ways (eg version() or fetchScores()).", "author": "romseygeek", "createdAt": "2020-09-16T13:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MjAyMg==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489442022", "bodyText": "I don't really like the idea of adding it in the constructor either as it's adding extra state where I don't think we need it?", "author": "romseygeek", "createdAt": "2020-09-16T13:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyODgyNw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489528827", "bodyText": "The approach makes sense to me now, it was helpful to talk it through!", "author": "jtibshirani", "createdAt": "2020-09-16T15:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwODM4OA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488508388", "bodyText": "This logic is all contained in FetchContext#fetchScores()", "author": "romseygeek", "createdAt": "2020-09-15T09:07:31Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchScorePhase.java", "diffHunk": "@@ -25,19 +25,17 @@\n import org.apache.lucene.search.Scorer;\n import org.apache.lucene.search.ScorerSupplier;\n import org.apache.lucene.search.Weight;\n+import org.elasticsearch.search.fetch.FetchContext;\n import org.elasticsearch.search.fetch.FetchSubPhase;\n import org.elasticsearch.search.fetch.FetchSubPhaseProcessor;\n-import org.elasticsearch.search.internal.SearchContext;\n \n import java.io.IOException;\n \n public class FetchScorePhase implements FetchSubPhase {\n \n     @Override\n-    public FetchSubPhaseProcessor getProcessor(SearchContext context) throws IOException {\n-        if (context.trackScores() == false || context.docIdsToLoadSize() == 0 ||", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwOTg0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488509849", "bodyText": "IOExceptions are handled in the top-level FetchPhase", "author": "romseygeek", "createdAt": "2020-09-15T09:09:59Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/UnifiedHighlighter.java", "diffHunk": "@@ -80,13 +79,7 @@ public HighlightField highlight(FieldHighlightContext fieldContext) throws IOExc\n             }\n             return mergeFieldValues(fieldValues, MULTIVAL_SEP_CHAR);\n         };\n-        Snippet[] fieldSnippets;\n-        try {\n-            fieldSnippets = highlighter.highlightField(hitContext.reader(), hitContext.docId(), loadFieldValues);\n-        } catch (IOException e) {\n-            throw new FetchPhaseExecutionException(fieldContext.shardTarget,", "originalCommit": "d292e4ff61b6d68e20c9cb2ed954f418d27351a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa61e5b51a564b40f801f5b6a78528a31b963d40", "url": "https://github.com/elastic/elasticsearch/commit/fa61e5b51a564b40f801f5b6a78528a31b963d40", "message": "check for null query in explain", "committedDate": "2020-09-15T10:11:11Z", "type": "commit"}, {"oid": "9f76bd7502b7ec4c078246d420919d638678b0a1", "url": "https://github.com/elastic/elasticsearch/commit/9f76bd7502b7ec4c078246d420919d638678b0a1", "message": "test plugin failure", "committedDate": "2020-09-15T11:02:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1OTE5NA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488859194", "bodyText": "This sort of deletion is a good sign !", "author": "jtibshirani", "createdAt": "2020-09-15T17:55:59Z", "path": "server/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourcePhaseTests.java", "diffHunk": "@@ -173,30 +172,4 @@ private HitContext hitExecuteMultiple(XContentBuilder source, boolean fetchSourc\n         return hitContext;\n     }\n \n-    private static class FetchSourcePhaseTestSearchContext extends TestSearchContext {", "originalCommit": "9f76bd7502b7ec4c078246d420919d638678b0a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2MzY2MA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488863660", "bodyText": "Checking I understand, does this actually fix a bug where we wouldn't return named query information if there was only a post filter?", "author": "jtibshirani", "createdAt": "2020-09-15T18:04:08Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/MatchedQueriesPhase.java", "diffHunk": "@@ -38,13 +38,11 @@\n public final class MatchedQueriesPhase implements FetchSubPhase {\n \n     @Override\n-    public FetchSubPhaseProcessor getProcessor(SearchContext context) throws IOException {\n-        if (context.docIdsToLoadSize() == 0 ||\n-            // in case the request has only suggest, parsed query is null\n-            context.parsedQuery() == null) {\n-            return null;\n+    public FetchSubPhaseProcessor getProcessor(FetchContext context) throws IOException {\n+        Map<String, Query> namedQueries = new HashMap<>();", "originalCommit": "9f76bd7502b7ec4c078246d420919d638678b0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMjgwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489432805", "bodyText": "I don't think it's actually possible to have a post filter without a query, but the logic of what gets set where is pretty hairy so I thought it best to be extra defensive here.", "author": "romseygeek", "createdAt": "2020-09-16T13:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2MzY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODkyNg==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r488868926", "bodyText": "Checking I understand, is this just an optional clean-up ?", "author": "jtibshirani", "createdAt": "2020-09-15T18:13:48Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java", "diffHunk": "@@ -139,19 +135,18 @@ private void hitExecute(SearchContext context, HitContext hitContext) {\n                 hitField = new DocumentField(NAME, new ArrayList<>(1));\n                 hitContext.hit().setDocumentField(NAME, hitField);\n             }\n-            TermVectorsRequest termVectorsRequest = new TermVectorsRequest(context.indexShard().shardId().getIndex().getName(),\n-                    hitContext.hit().getId());\n-            TermVectorsResponse termVector = TermVectorsService.getTermVectors(context.indexShard(), termVectorsRequest);\n-            try {\n+            Terms terms = hitContext.reader().getTermVector(hitContext.docId(), field);", "originalCommit": "9f76bd7502b7ec4c078246d420919d638678b0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMzEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489433108", "bodyText": "Right, it means that we don't need to expose the whole index shard to the FetchContext.", "author": "romseygeek", "createdAt": "2020-09-16T13:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODkyNg=="}], "type": "inlineReview"}, {"oid": "12e9bbb331fd2c798a8d5f1382fc88956c570ac1", "url": "https://github.com/elastic/elasticsearch/commit/12e9bbb331fd2c798a8d5f1382fc88956c570ac1", "message": "Merge remote-tracking branch 'origin/master' into fetch/fetchcontext", "committedDate": "2020-09-16T12:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489425476", "bodyText": "Why the private ctor and static factory? I know its nice sometimes when you need the name to describe, but I think we don't here?", "author": "nik9000", "createdAt": "2020-09-16T13:12:43Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchContext.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.query.ParsedQuery;\n+import org.elasticsearch.search.SearchExtBuilder;\n+import org.elasticsearch.search.fetch.subphase.FetchDocValuesContext;\n+import org.elasticsearch.search.fetch.subphase.FetchFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.search.fetch.subphase.FieldAndFormat;\n+import org.elasticsearch.search.fetch.subphase.InnerHitsContext;\n+import org.elasticsearch.search.fetch.subphase.ScriptFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.highlight.SearchHighlightContext;\n+import org.elasticsearch.search.internal.ContextIndexSearcher;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.rescore.RescoreContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Encapsulates state required to execute fetch phases\n+ */\n+public class FetchContext {\n+\n+    private FetchContext(SearchContext searchContext) {\n+        this.searchContext = searchContext;\n+    }\n+\n+    /**\n+     * Create a FetchContext based on a SearchContext\n+     */\n+    public static FetchContext fromSearchContext(SearchContext context) {", "originalCommit": "12e9bbb331fd2c798a8d5f1382fc88956c570ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzOTcxNA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489439714", "bodyText": "I started out with a few ways of building the FetchContext but have ended up with just the one, so the factory method is unnecessary.  I'll get rid.", "author": "romseygeek", "createdAt": "2020-09-16T13:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489425828", "bodyText": "Could you float it to the top so it doesn't get lost? I get really confused if member variables aren't above member methods. I'm just super used to that.", "author": "nik9000", "createdAt": "2020-09-16T13:13:13Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchContext.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.query.ParsedQuery;\n+import org.elasticsearch.search.SearchExtBuilder;\n+import org.elasticsearch.search.fetch.subphase.FetchDocValuesContext;\n+import org.elasticsearch.search.fetch.subphase.FetchFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.search.fetch.subphase.FieldAndFormat;\n+import org.elasticsearch.search.fetch.subphase.InnerHitsContext;\n+import org.elasticsearch.search.fetch.subphase.ScriptFieldsContext;\n+import org.elasticsearch.search.fetch.subphase.highlight.SearchHighlightContext;\n+import org.elasticsearch.search.internal.ContextIndexSearcher;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.rescore.RescoreContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Encapsulates state required to execute fetch phases\n+ */\n+public class FetchContext {\n+\n+    private FetchContext(SearchContext searchContext) {\n+        this.searchContext = searchContext;\n+    }\n+\n+    /**\n+     * Create a FetchContext based on a SearchContext\n+     */\n+    public static FetchContext fromSearchContext(SearchContext context) {\n+        return new FetchContext(context);\n+    }\n+\n+    private final SearchContext searchContext;", "originalCommit": "12e9bbb331fd2c798a8d5f1382fc88956c570ac1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNzcwMA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489427700", "bodyText": "Do you think lookup should be a member on FetchContext? I know I just added it, but now that you are proposing our own \"context\" I think I'd be nice to fold it in.", "author": "nik9000", "createdAt": "2020-09-16T13:15:57Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java", "diffHunk": "@@ -100,8 +99,8 @@ public IndexReader topLevelReader() {\n     /**\n      * Returns a {@link FetchSubPhaseProcessor} for this sub phase.\n      *\n-     * If nothing should be executed for the provided {@link SearchContext}, then the\n+     * If nothing should be executed for the provided {@code FetchContext}, then the\n      * implementation should return {@code null}\n      */\n-    FetchSubPhaseProcessor getProcessor(SearchContext searchContext, SearchLookup lookup) throws IOException;\n+    FetchSubPhaseProcessor getProcessor(FetchContext fetchContext, SearchLookup lookup) throws IOException;", "originalCommit": "12e9bbb331fd2c798a8d5f1382fc88956c570ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNDA3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489434073", "bodyText": "Yes! I gave it a quick try after the merge but I think we really want to remove the QueryShardContext#newFetchLookup() method at the same time and it's not obvious to me how to do that yet, so I thought I'd leave it for a follow-up.", "author": "romseygeek", "createdAt": "2020-09-16T13:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNzcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MDM1OA==", "url": "https://github.com/elastic/elasticsearch/pull/62357#discussion_r489440358", "bodyText": "I'd be ok moving to a member now if you're happy with it. It can wait too. Either way.\nIt isn't so much that we want to get rid of newFetchLookup as that we want it to return a FetchLookup instead of a SearchLookup. We just haven't boiled out the common interface for those.", "author": "nik9000", "createdAt": "2020-09-16T13:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNzcwMA=="}], "type": "inlineReview"}, {"oid": "5b429a82dea54cd2c2fb6103475df0dec626d8d5", "url": "https://github.com/elastic/elasticsearch/commit/5b429a82dea54cd2c2fb6103475df0dec626d8d5", "message": "feedback", "committedDate": "2020-09-16T14:25:11Z", "type": "commit"}, {"oid": "1ccde5e1ec556394a08b52ad0163fc2f541ba6bf", "url": "https://github.com/elastic/elasticsearch/commit/1ccde5e1ec556394a08b52ad0163fc2f541ba6bf", "message": "Merge branch 'master' into fetch/fetchcontext", "committedDate": "2020-09-16T15:21:55Z", "type": "commit"}, {"oid": "ff13ae34ec5a961fc808bd06fae5693c076df93c", "url": "https://github.com/elastic/elasticsearch/commit/ff13ae34ec5a961fc808bd06fae5693c076df93c", "message": "Merge branch 'master' into fetch/fetchcontext", "committedDate": "2020-09-17T07:51:02Z", "type": "commit"}]}