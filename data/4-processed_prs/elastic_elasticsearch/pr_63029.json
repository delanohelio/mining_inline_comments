{"pr_number": 63029, "pr_title": "Scripting: enable regular expressions by default", "pr_createdAt": "2020-09-29T17:11:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63029", "timeline": [{"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "url": "https://github.com/elastic/elasticsearch/commit/e3e15cf46998120b017ac620afad0dbba2d6dd7b", "message": "Scripting: enable regular expressions by default\n\n* Setting `script.painless.regex.enabled` has a new option,\n  `use-factor`, the default.  This defaults to using regular\n  expressions but limiting the complexity of the regular\n  expressions.\n\n  In addition to `use-factor`, the setting can be `true`, as\n  before, which enables regular expressions without limiting them.\n\n  `false` totally disables regular expressions, which was the\n  old default.\n\n* New setting `script.painless.regex.limit-factor`.  This limits\n  regular expression complexity by limiting the number characters\n  a regular expression can consider based on input length.\n\n  The default is `6`, so a regular expression can consider\n  `6` * input length number of characters.  With input\n  `foobarbaz` (length `9`), for example, the regular expression\n  can consider `54` (`6 * 9`) characters.\n\n  This reduces the impact of exponential backtracking in Java's\n  regular expression engine.\n\n* add `@inject_constant` annotation to whitelist.\n\n  This annotation signals that a compiler settings will\n  be injected at the beginning of a whitelisted method.\n\n  The format is `argnum=settingname`:\n  `1=foo_setting 2=bar_setting`.\n\n  Argument numbers must start at one and must be sequential.\n\n* Augment\n  `Pattern.split(CharSequence)`\n  `Pattern.split(CharSequence, int)`,\n  `Pattern.splitAsStream(CharSequence)`\n  `Pattern.matcher(CharSequence)`\n  to take the value of `script.painless.regex.limit-factor` as a\n  an injected parameter, limiting as explained above when this\n  setting is in use.\n\nFixes: #49873", "committedDate": "2020-09-29T17:09:47Z", "type": "commit"}, {"oid": "6d58686cfb46b976007f235e9c04641881684a29", "url": "https://github.com/elastic/elasticsearch/commit/6d58686cfb46b976007f235e9c04641881684a29", "message": "Add javadoc, remove done TODOS", "committedDate": "2020-09-29T17:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912078", "bodyText": "Since we don't actually whitelist this method, I think this is just a comment to note if we did allow that method it would allow escaping the regex limiting? Could you clarify the comment?", "author": "rjernst", "createdAt": "2020-09-29T17:24:11Z", "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "diffHunk": "@@ -58,6 +58,7 @@ class java.util.regex.Matcher {\n   String replaceFirst(String)\n   boolean requireEnd()\n   Matcher reset()\n+  # Whitelisting Matcher.reset(String) works around the regex limiting", "originalCommit": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497572193", "bodyText": "Will do.", "author": "stu-elastic", "createdAt": "2020-09-30T14:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3NzUyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497577525", "bodyText": "Updated comment.", "author": "stu-elastic", "createdAt": "2020-09-30T14:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjIzMA==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912230", "bodyText": "leftover todo?", "author": "rjernst", "createdAt": "2020-09-29T17:24:24Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/ScriptScope.java", "diffHunk": "@@ -66,6 +66,8 @@ public ScriptScope(PainlessLookup painlessLookup, CompilerSettings compilerSetti\n         staticConstants.put(\"$SOURCE\", scriptSource);\n         staticConstants.put(\"$DEFINITION\", painlessLookup);\n         staticConstants.put(\"$FUNCTIONS\", functionTable);\n+        // TODO(stu): inject compiler settings here", "originalCommit": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571763", "bodyText": "Yup, these and all the left over todos were why this was initially a draft.  They are gone now.", "author": "stu-elastic", "createdAt": "2020-09-30T14:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODAyNg==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496918026", "bodyText": "what is this todo?", "author": "rjernst", "createdAt": "2020-09-29T17:33:21Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -211,7 +211,7 @@ protected void injectStaticFieldsAndGetters() {\n         irLoadFieldMemberNode.setLocation(internalLocation);\n         irLoadFieldMemberNode.setExpressionType(String.class);\n         irLoadFieldMemberNode.setName(\"$NAME\");\n-        irLoadFieldMemberNode.setStatic(true);\n+        irLoadFieldMemberNode.setStatic(true); // TODO(stu): add $COMPILER_INJECTS, add hash map and set it", "originalCommit": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571458", "bodyText": "Removed.", "author": "stu-elastic", "createdAt": "2020-09-30T14:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919527", "bodyText": "Todos like this are very cryptic. Can we just have a normal comment if some explanation is needed?", "author": "rjernst", "createdAt": "2020-09-29T17:35:50Z", "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotationParser.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+public class InjectConstantAnnotationParser implements WhitelistAnnotationParser {\n+\n+    public static final InjectConstantAnnotationParser INSTANCE = new InjectConstantAnnotationParser();\n+\n+    private InjectConstantAnnotationParser() {}\n+\n+    @Override\n+    public Object parse(Map<String, String> arguments) {\n+        if (arguments.isEmpty()) {\n+            throw new IllegalArgumentException(\"[@inject_constant] requires at least one name to inject\");\n+        }\n+        ArrayList<String> argList = new ArrayList<>(arguments.size());\n+        for (int i = 1; i <= arguments.size(); i++) {\n+            String argNum = Integer.toString(i);\n+            if (arguments.containsKey(argNum) == false) {\n+                throw new IllegalArgumentException(\"[@inject_constant] missing argument number [\" + argNum + \"]\");\n+            }\n+            // TODO(stu): Jack, how do I verify against CompilerSettings.", "originalCommit": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571905", "bodyText": "Removed when draft.", "author": "stu-elastic", "createdAt": "2020-09-30T14:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919928", "bodyText": "Can we have some basic java docs on this?", "author": "rjernst", "createdAt": "2020-09-29T17:36:33Z", "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class InjectConstantAnnotation {", "originalCommit": "6d58686cfb46b976007f235e9c04641881684a29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497572301", "bodyText": "Will do.", "author": "stu-elastic", "createdAt": "2020-09-30T14:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3NzI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497577250", "bodyText": "Done.", "author": "stu-elastic", "createdAt": "2020-09-30T14:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA=="}], "type": "inlineReview"}, {"oid": "3a139fc831d4c555307ea84b896a6a0ea5d2073a", "url": "https://github.com/elastic/elasticsearch/commit/3a139fc831d4c555307ea84b896a6a0ea5d2073a", "message": "Regexes are enabled by default", "committedDate": "2020-09-30T14:47:24Z", "type": "commit"}, {"oid": "b89bea1bde0a7eafbe0111b3ecd3e604c347f06d", "url": "https://github.com/elastic/elasticsearch/commit/b89bea1bde0a7eafbe0111b3ecd3e604c347f06d", "message": "use_factor -> limited, InjectConstantAnnotation javadocs", "committedDate": "2020-09-30T14:55:44Z", "type": "commit"}, {"oid": "3895974258e90c63872580930dc38704110a03a3", "url": "https://github.com/elastic/elasticsearch/commit/3895974258e90c63872580930dc38704110a03a3", "message": "merge", "committedDate": "2020-10-01T16:39:02Z", "type": "commit"}, {"oid": "8e17ec86bbd7c8dcff340237f27b784d3e2fa978", "url": "https://github.com/elastic/elasticsearch/commit/8e17ec86bbd7c8dcff340237f27b784d3e2fa978", "message": "find and match operator", "committedDate": "2020-10-01T19:30:46Z", "type": "commit"}, {"oid": "51bda05efc560152f98f4f06d1f3707e454b8047", "url": "https://github.com/elastic/elasticsearch/commit/51bda05efc560152f98f4f06d1f3707e454b8047", "message": "Set limit factor for Find, add tests", "committedDate": "2020-10-01T19:41:16Z", "type": "commit"}, {"oid": "a8c838dfaf1a3ac32e93a48a2f1b22bcd357beb5", "url": "https://github.com/elastic/elasticsearch/commit/a8c838dfaf1a3ac32e93a48a2f1b22bcd357beb5", "message": "Add pattern", "committedDate": "2020-10-01T20:14:00Z", "type": "commit"}, {"oid": "f6e0363343b155992604d5928ac5e49679f0a89a", "url": "https://github.com/elastic/elasticsearch/commit/f6e0363343b155992604d5928ac5e49679f0a89a", "message": "Add tests for unlimited", "committedDate": "2020-10-01T20:56:30Z", "type": "commit"}, {"oid": "821639163de34db8b16386d8a9735a93edec4fb7", "url": "https://github.com/elastic/elasticsearch/commit/821639163de34db8b16386d8a9735a93edec4fb7", "message": "fix style problems", "committedDate": "2020-10-01T21:04:46Z", "type": "commit"}, {"oid": "e8ebf4ddea4f30fa44f7cce204496ec1bb2cab78", "url": "https://github.com/elastic/elasticsearch/commit/e8ebf4ddea4f30fa44f7cce204496ec1bb2cab78", "message": "Skip todo", "committedDate": "2020-10-01T21:15:36Z", "type": "commit"}, {"oid": "6a2ed98ea3465855d82213165b7fa99a0c8f5e55", "url": "https://github.com/elastic/elasticsearch/commit/6a2ed98ea3465855d82213165b7fa99a0c8f5e55", "message": "add snippet", "committedDate": "2020-10-01T21:32:10Z", "type": "commit"}, {"oid": "60bc11a96b7f0ce6861c3259d86bc4386366575e", "url": "https://github.com/elastic/elasticsearch/commit/60bc11a96b7f0ce6861c3259d86bc4386366575e", "message": "unused import", "committedDate": "2020-10-01T21:34:28Z", "type": "commit"}, {"oid": "297d4403faf836c069ab1148f8306fff595a7a0d", "url": "https://github.com/elastic/elasticsearch/commit/297d4403faf836c069ab1148f8306fff595a7a0d", "message": "No longer disabled", "committedDate": "2020-10-02T16:07:10Z", "type": "commit"}]}