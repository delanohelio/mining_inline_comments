{"pr_number": 60219, "pr_title": "[ML] Ensure bulk requests are not over memory limit", "pr_createdAt": "2020-07-27T14:30:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60219", "timeline": [{"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "url": "https://github.com/elastic/elasticsearch/commit/12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "message": "[ML] Ensure bulk requests are not over memory limit\n\nData frame analytics jobs that work with very large datasets\nmay produce bulk requests that are over the memory limit\nfor indexing. This commit adds a helper class that bundles\nindex requests in bulk requests that steer away from the\nmemory limit. We then use this class both from the results\njoiner and the inference runner ensuring data frame analytics\njobs do not generate bulk requests that are too large.\n\nNote the limit was implemented in #58885.", "committedDate": "2020-07-27T14:29:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTA2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389067", "bodyText": "Would Settings.EMPTY work here as well?", "author": "przemekwitek", "createdAt": "2020-07-28T07:54:43Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsProcessManagerTests.java", "diffHunk": "@@ -112,8 +112,8 @@ public void setUpMocks() {\n \n         resultsPersisterService = mock(ResultsPersisterService.class);\n         modelLoadingService = mock(ModelLoadingService.class);\n-        processManager = new AnalyticsProcessManager(client, executorServiceForJob, executorServiceForProcess, processFactory, auditor,\n-            trainedModelProvider, modelLoadingService, resultsPersisterService, 1);\n+        processManager = new AnalyticsProcessManager(Settings.builder().build(), client, executorServiceForJob, executorServiceForProcess,", "originalCommit": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwMDkwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461400909", "bodyText": "I wanted to change those and forgot. Thanks for spotting!", "author": "dimitris-athanasiou", "createdAt": "2020-07-28T08:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTM5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389392", "bodyText": "hasSize matcher could be used here instead.", "author": "przemekwitek", "createdAt": "2020-07-28T07:55:14Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java", "diffHunk": "@@ -263,7 +264,10 @@ public void testProcess_GivenMoreResultsThanRows() throws IOException {\n         RowResults result2 = new RowResults(2, resultFields);\n         givenProcessResults(Arrays.asList(result1, result2));\n \n-        verifyNoMoreInteractions(resultsPersisterService);\n+        List<BulkRequest> capturedBulkRequests = bulkRequestCaptor.getAllValues();\n+        assertThat(capturedBulkRequests.size(), equalTo(1));", "originalCommit": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTY5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389693", "bodyText": "final?", "author": "przemekwitek", "createdAt": "2020-07-28T07:55:45Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexerTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MlBulkIndexerTests extends ESTestCase {\n+\n+    private List<BulkRequest> executedBulkRequests = new ArrayList<>();", "originalCommit": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwMTQ1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461401451", "bodyText": "This is getting reinitialised for each test so it cannot be final.", "author": "dimitris-athanasiou", "createdAt": "2020-07-28T08:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDEwNg==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461390106", "bodyText": "There is no ML-specific code in this class. Would it make sense to rename it to BulkIndexer?", "author": "przemekwitek", "createdAt": "2020-07-28T07:56:34Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.IndexingPressure;\n+\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A helper class that gathers index requests in bulk requests\n+ * that do exceed a 1000 operations or half the available memory\n+ * limit for indexing.\n+ */\n+public class MlBulkIndexer implements AutoCloseable {", "originalCommit": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMTI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461431283", "bodyText": "I wanted to avoid calling it plainly BulkIndexer as it sounds too much like a basic ES component. I decided to prefix with Ml to indicate this is a utility designed to serve purposes within the ML plugin. If we end up using it in other places then we shall move it and rename it accordingly.", "author": "dimitris-athanasiou", "createdAt": "2020-07-28T09:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDEwNg=="}], "type": "inlineReview"}, {"oid": "195acdbbf4de73a81ff2009ccc8666eefa2b10ff", "url": "https://github.com/elastic/elasticsearch/commit/195acdbbf4de73a81ff2009ccc8666eefa2b10ff", "message": "Address review points", "committedDate": "2020-07-28T09:06:30Z", "type": "commit"}, {"oid": "9dd6221362bd6e4b2d08c3ada98d220820e984fa", "url": "https://github.com/elastic/elasticsearch/commit/9dd6221362bd6e4b2d08c3ada98d220820e984fa", "message": "Add debug log message", "committedDate": "2020-07-28T09:22:15Z", "type": "commit"}, {"oid": "037e9f3d23f7379862c7b5b29467978fc9591d75", "url": "https://github.com/elastic/elasticsearch/commit/037e9f3d23f7379862c7b5b29467978fc9591d75", "message": "Merge branch 'master' into ensure-ml-bulk-requests-are-not-over-limit", "committedDate": "2020-07-28T09:38:13Z", "type": "commit"}, {"oid": "639f0fcfa742398bcb5a201a42c7d9051ba738ab", "url": "https://github.com/elastic/elasticsearch/commit/639f0fcfa742398bcb5a201a42c7d9051ba738ab", "message": "Rename to `LimitAwareBulkIndexer`", "committedDate": "2020-07-28T09:42:36Z", "type": "commit"}]}