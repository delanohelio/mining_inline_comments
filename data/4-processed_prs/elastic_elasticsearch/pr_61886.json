{"pr_number": 61886, "pr_title": "Simplify adding plugins and modules to testclusters", "pr_createdAt": "2020-09-03T00:40:39Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61886", "timeline": [{"oid": "acd3dab1206778e78065020ba64558567ec1bafa", "url": "https://github.com/elastic/elasticsearch/commit/acd3dab1206778e78065020ba64558567ec1bafa", "message": "Simplify adding plugins and modules to testclusters\n\nThere are currently half a dozen ways to add plugins and modules for\ntest clusters to use. All of them require the calling project to peek\ninto the plugin or module they want to use to grab its bundlePlugin\ntask, and then both depend on that task, as well as extract the archive\npath the task will produce. This creates cross project dependencies that\nare difficult to detect, and if the dependent plugin/module has not yet\nbeen configured, the build will fail because the task does not yet\nexist.\n\nThis commit makes the plugin and module methods for testclusters\nsymmetetric, and simply adding a file provider directly, or a project\npath that will produce the plugin/module zip. Internally this new\nvariant uses normal configuration/dependencies across projects to get\nthe zip artifact. It also has the added benefit of no longer needing the\ncaller to add to the test task a dependsOn for bundlePlugin task.", "committedDate": "2020-09-03T00:34:20Z", "type": "commit"}, {"oid": "dac60b4d9b17185cce5def811406a0ccd1b4857b", "url": "https://github.com/elastic/elasticsearch/commit/dac60b4d9b17185cce5def811406a0ccd1b4857b", "message": "checkstyle", "committedDate": "2020-09-03T00:46:59Z", "type": "commit"}, {"oid": "68ae03511dfda097f49872e1d6dc6df8820d2dfb", "url": "https://github.com/elastic/elasticsearch/commit/68ae03511dfda097f49872e1d6dc6df8820d2dfb", "message": "spotless", "committedDate": "2020-09-03T00:47:51Z", "type": "commit"}, {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "url": "https://github.com/elastic/elasticsearch/commit/25d8fa7ddd795e2077e897bf93597c002c07f60b", "message": "remove explicit deps on buildPlugin from test tasks", "committedDate": "2020-09-03T02:05:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMzE5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483233197", "bodyText": "Building on what Jake has been doing, I think we should make this project.testClusters.all { }, such that regardless of what kind of test plugin is applied (yaml rest, java rest, etc) we auto wire this up for folks, rather than relying on the loose convention of integTest.\nAdditionally, I think he has some stuff in flight that removes this task entirely and makes all this stuff explicit.", "author": "mark-vieira", "createdAt": "2020-09-03T20:21:51Z", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "diffHunk": "@@ -79,10 +75,7 @@ class PluginBuildPlugin implements Plugin<Project> {\n             project.extensions.getByType(PluginPropertiesExtension).extendedPlugins.each { pluginName ->\n                 // Auto add dependent modules to the test cluster\n                 if (project.findProject(\":modules:${pluginName}\") != null) {\n-                    project.integTest.dependsOn(project.project(\":modules:${pluginName}\").tasks.bundlePlugin)\n-                    project.testClusters.integTest.module(\n-                            project.project(\":modules:${pluginName}\").tasks.bundlePlugin.archiveFile\n-                    )\n+                    project.testClusters.integTest.module(\":modules:${pluginName}\")", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNTM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483235386", "bodyText": "I'm wondering if we should wrap node.getPluginAndModuleConfigurations() in a Callable to limit any odd configuration ordering stuff. That would allow folks to define a plugin/module dependency after creating the test task and everything would still wire up properly.", "author": "mark-vieira", "createdAt": "2020-09-03T20:26:18Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersAware.java", "diffHunk": "@@ -34,6 +34,7 @@ default void useCluster(ElasticsearchCluster cluster) {\n         }\n \n         cluster.getNodes().stream().flatMap(node -> node.getDistributions().stream()).forEach(distro -> dependsOn(distro.getExtracted()));\n+        cluster.getNodes().forEach(node -> dependsOn(node.getPluginAndModuleConfigurations()));", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483236717", "bodyText": "Should we use something more unique here? Any chance of collisions by just using the project name?", "author": "mark-vieira", "createdAt": "2020-09-03T20:29:02Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzODE1MA==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483238150", "bodyText": "Perhaps this is a good use case for using a detached configuration for a few reasons:\n\nWe don't want folks to fiddle with this configuration in any way\nWe dont' want it accidentally attempted to resolve externally, such as via resolveAllDependencies task\nThe only thing that needs a reference to it is this ElasticsearchNode itself, so there's no benefit to it being accessible via the projects DependencyHandler\nWe avoid the name conflict issue I mention above.\n\nIf the concern is the same dependency being added twice we could track the list of project paths added as a separate Set.", "author": "mark-vieira", "createdAt": "2020-09-03T20:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MzkxMA==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483283910", "bodyText": "The detached configuration actually makes this a lot cleaner. Done.", "author": "rjernst", "createdAt": "2020-09-03T22:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483239905", "bodyText": "I don't think this extra wrapping step is necessary. The result of findFirst() should return a RegularFile although we'd have to cast it as such. If what we get isn't a RegularFIle we should error, as that indicates something went wrong.", "author": "mark-vieira", "createdAt": "2020-09-03T20:35:56Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());\n+        return project.getLayout().file(fileProvider);", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NDc5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483284796", "bodyText": "The collection is of File, not RegularFile. The map method lambda gets a Set, and since Set in java has no way to get the \"first\", we must stream it and grab the first.", "author": "rjernst", "createdAt": "2020-09-03T22:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483309652", "bodyText": "It's actually a Set of FileSystemLocation, which you them map to a File via getAsFile(). You then have to wrap the File again to get a RegularFile back. What I'm saying is that the FileSystemLocation implementation type actually is RegularFile already, you just have to cast it, rather than to to a File then back to a RegularFile.", "author": "mark-vieira", "createdAt": "2020-09-03T23:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MDUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483240535", "bodyText": "Let's use orElseThrow() instead of get() and throw an exception with a useful message rather than the default NoSuchElementException that would result here if something went wrong.", "author": "mark-vieira", "createdAt": "2020-09-03T20:37:21Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MTQ1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483241453", "bodyText": "I think this can be completely removed as we no longer allow installing remote plugins via URI. These files will otherwise be tracked via getInstalledFiles().", "author": "mark-vieira", "createdAt": "2020-09-03T20:39:25Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1256,12 +1255,8 @@ private Path getExtractedDistributionDir() {\n     }\n \n     @Input\n-    public Set<URI> getRemotePlugins() {\n-        Set<URI> file = plugins.stream()\n-            .map(Provider::get)\n-            .filter(uri -> uri.getScheme().equalsIgnoreCase(\"file\") == false)\n-            .collect(Collectors.toSet());\n-        return file;\n+    public Set<File> getRemotePlugins() {", "originalCommit": "25d8fa7ddd795e2077e897bf93597c002c07f60b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d0e17c9a25a690013784463fc558a85f598fcdf", "url": "https://github.com/elastic/elasticsearch/commit/6d0e17c9a25a690013784463fc558a85f598fcdf", "message": "address feedback", "committedDate": "2020-09-03T22:30:13Z", "type": "commit"}, {"oid": "f2313a85af27383269f798f318a8ac2b48483606", "url": "https://github.com/elastic/elasticsearch/commit/f2313a85af27383269f798f318a8ac2b48483606", "message": "dont self reference plugin", "committedDate": "2020-09-03T23:55:59Z", "type": "commit"}, {"oid": "039c682b4cc31104bda725eefa7f83d64c0c5fca", "url": "https://github.com/elastic/elasticsearch/commit/039c682b4cc31104bda725eefa7f83d64c0c5fca", "message": "Merge branch 'master' into build_testclusters_plugins", "committedDate": "2020-09-04T01:36:50Z", "type": "commit"}]}