{"pr_number": 59372, "pr_title": "Add term query for keyword script fields", "pr_createdAt": "2020-07-12T15:12:48Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59372", "timeline": [{"oid": "b7a454e9407fe97df2bce9194124870876b6cf5d", "url": "https://github.com/elastic/elasticsearch/commit/b7a454e9407fe97df2bce9194124870876b6cf5d", "message": "Add term query for keyword script fields\n\nThis adds what I think is just about the simplest possible `term` query\nimplementation for `keyword` script fields and wires it into the field\nmapper that we build for them.", "committedDate": "2020-07-12T15:11:13Z", "type": "commit"}, {"oid": "9ee138caf2959d23b9b7a78cbd33c6bf03623b33", "url": "https://github.com/elastic/elasticsearch/commit/9ee138caf2959d23b9b7a78cbd33c6bf03623b33", "message": "Helper", "committedDate": "2020-07-13T15:25:10Z", "type": "commit"}, {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5", "url": "https://github.com/elastic/elasticsearch/commit/79fccfc02879a7d4284a9377c24c8ff938c415e5", "message": "Accumulate a list", "committedDate": "2020-07-13T16:14:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453871397", "bodyText": "did we say that approximation.cost() was not good here?", "author": "javanna", "createdAt": "2020-07-13T19:10:52Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "originalCommit": "79fccfc02879a7d4284a9377c24c8ff938c415e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MDQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453880468", "bodyText": "Yeah, Lucene documents this as \"An estimate of the expected cost to determine that a single document\". So multiplying by the cost of the approximation don't feel right. 9000 is kind of bogus too, but maybe less so.", "author": "nik9000", "createdAt": "2020-07-13T19:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzE0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453883149", "bodyText": "let's ask @jpountz what he thinks. I thought I remembered discussing with him that the cost could be the cost of the approximation but I may be wrong.", "author": "javanna", "createdAt": "2020-07-13T19:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453883360", "bodyText": "this should not block merging the PR, we can always update the cost later.", "author": "javanna", "createdAt": "2020-07-13T19:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNDEwMw==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453914103", "bodyText": "++", "author": "nik9000", "createdAt": "2020-07-13T20:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NDkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r455894902", "bodyText": "+1 a high constant looks good to me", "author": "jpountz", "createdAt": "2020-07-16T15:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}], "type": "inlineReview"}, {"oid": "6314f90e1f9bb85e69e462c28c3ed096c8cc9a0d", "url": "https://github.com/elastic/elasticsearch/commit/6314f90e1f9bb85e69e462c28c3ed096c8cc9a0d", "message": "Merge branch 'feature/runtime_fields' into runtime_string_term", "committedDate": "2020-07-13T19:54:42Z", "type": "commit"}]}