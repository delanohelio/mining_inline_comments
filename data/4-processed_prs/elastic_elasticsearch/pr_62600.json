{"pr_number": 62600, "pr_title": "Use BitArray instead of FixedBitSet for collecting ordinals in Cardinality Aggregator", "pr_createdAt": "2020-09-18T08:02:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62600", "timeline": [{"oid": "38db5451a2003b5c0f125ce96e50d62a18a6cf78", "url": "https://github.com/elastic/elasticsearch/commit/38db5451a2003b5c0f125ce96e50d62a18a6cf78", "message": "Use BitArray instead if FixedBitSet for collecting ordinals", "committedDate": "2020-09-18T07:59:19Z", "type": "commit"}, {"oid": "baeacefdc1564f3a122d79740e4b89d92c367b20", "url": "https://github.com/elastic/elasticsearch/commit/baeacefdc1564f3a122d79740e4b89d92c367b20", "message": "checkStyle", "committedDate": "2020-09-18T08:18:46Z", "type": "commit"}, {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71", "url": "https://github.com/elastic/elasticsearch/commit/434fd2aa80e12a8c42c0444079432eb211ba2b71", "message": "Merge branch 'master' into bitArrayOrdinals", "committedDate": "2020-09-18T08:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNDAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490834006", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while(++wordNum < bits.size()) {\n          \n          \n            \n                    while (++wordNum < bits.size()) {", "author": "jimczi", "createdAt": "2020-09-18T09:50:01Z", "path": "server/src/main/java/org/elasticsearch/common/util/BitArray.java", "diffHunk": "@@ -50,6 +50,37 @@ public void set(long index) {\n         bits.set(wordNum, bits.get(wordNum) | bitmask(index));\n     }\n \n+    /** this = this OR other */\n+    public void or(BitArray other) {\n+        or(other.bits);\n+    }\n+\n+    private void or(final LongArray otherArr) {\n+        long pos = otherArr.size();\n+        bits = bigArrays.grow(bits, pos + 1);\n+        final LongArray thisArr = this.bits;\n+        while (--pos >= 0) {\n+            thisArr.set(pos, thisArr.get(pos) | otherArr.get(pos));\n+        }\n+    }\n+\n+    public long nextSetBit(long index) {\n+        long wordNum = wordNum(index);\n+        long word = bits.get(wordNum) >> index;  // skip all the bits to the right of index\n+\n+        if (word!=0) {\n+            return index + Long.numberOfTrailingZeros(word);\n+        }\n+\n+        while(++wordNum < bits.size()) {", "originalCommit": "434fd2aa80e12a8c42c0444079432eb211ba2b71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTI2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835265", "bodyText": "Should it use Long.MAX_VALUE instead of DocIdSetIterator.NO_MORE_DOCS ?", "author": "jimczi", "createdAt": "2020-09-18T09:52:23Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;", "originalCommit": "434fd2aa80e12a8c42c0444079432eb211ba2b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0MTgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490841836", "bodyText": "Yes", "author": "iverase", "createdAt": "2020-09-18T10:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTMxMw==", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835313", "bodyText": "same here ?", "author": "jimczi", "createdAt": "2020-09-18T09:52:29Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                         ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {", "originalCommit": "434fd2aa80e12a8c42c0444079432eb211ba2b71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTQxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835411", "bodyText": "and here ;)", "author": "jimczi", "createdAt": "2020-09-18T09:52:40Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                         ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n+                        final BytesRef value = values.lookupOrd(ord);\n+                        MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n+                        hashes.set(ord, hash.h1);\n+                    }\n \n-                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                    final FixedBitSet bits = visitedOrds.get(bucket);\n-                    if (bits != null) {\n-                        for (int ord = bits.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                                ord = ord + 1 < maxOrd ? bits.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                            counts.collect(bucket, hashes.get(ord));\n+                    for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                        final BitArray bits = visitedOrds.get(bucket);\n+                        if (bits != null) {\n+                            for (long ord = bits.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                                 ord = ord + 1 < maxOrd ? bits.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {", "originalCommit": "434fd2aa80e12a8c42c0444079432eb211ba2b71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "22cb13643726949d8dd012b1b3ec590f554e9bcf", "url": "https://github.com/elastic/elasticsearch/commit/22cb13643726949d8dd012b1b3ec590f554e9bcf", "message": "address review comments", "committedDate": "2020-09-18T10:04:44Z", "type": "commit"}]}