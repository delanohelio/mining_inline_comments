{"pr_number": 64528, "pr_title": "Add Netty ByteBuf Leak Check to REST Test Clusters", "pr_createdAt": "2020-11-03T13:47:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64528", "timeline": [{"oid": "d83343f6ee61a45543cbed53747be13efeb36228", "url": "https://github.com/elastic/elasticsearch/commit/d83343f6ee61a45543cbed53747be13efeb36228", "message": "Add Netty ByteBuf Leak Check to REST Test Clusters\n\nWe do this check in all tests that inherit from `EsTestCase` but didn't check for `ByteBuf`\nleaks in rest test clusters, which means we have very little coverage of the REST layer.\nWith recent reports of very rare leak warnings in logs I think it's worthwhile to do this check\nin REST tests as well.", "committedDate": "2020-11-03T13:42:13Z", "type": "commit"}, {"oid": "65e6df7c2256f8dbbc3cde121da090852ad0f655", "url": "https://github.com/elastic/elasticsearch/commit/65e6df7c2256f8dbbc3cde121da090852ad0f655", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests", "committedDate": "2020-11-23T03:06:09Z", "type": "commit"}, {"oid": "bc7c5fe9ea8d9c8b242be0567610b001921d137b", "url": "https://github.com/elastic/elasticsearch/commit/bc7c5fe9ea8d9c8b242be0567610b001921d137b", "message": "CR: add mute facility and enhance failure", "committedDate": "2020-11-23T05:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMzk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r528923993", "bodyText": "We need to make this lenient. Calling get() here will throw an exception if that extra property isn't defined, which it may not be for external users of this plugin. We need to check for its existance first.", "author": "mark-vieira", "createdAt": "2020-11-23T18:51:17Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -968,31 +970,58 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final boolean leakTestsEnabled = (Boolean) project.getExtensions().getExtraProperties().get(\"netty_leak_tests_enabled\");", "originalCommit": "bc7c5fe9ea8d9c8b242be0567610b001921d137b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwMzQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r529403477", "bodyText": "Fixed :)", "author": "original-brownbear", "createdAt": "2020-11-24T10:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMzk5Mw=="}], "type": "inlineReview"}, {"oid": "e52658291d3acc34440d2bfb63e360da0e1b8886", "url": "https://github.com/elastic/elasticsearch/commit/e52658291d3acc34440d2bfb63e360da0e1b8886", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests", "committedDate": "2020-11-24T08:40:18Z", "type": "commit"}, {"oid": "4518373c0d7f2bc964b40fc51fa1685459a859c2", "url": "https://github.com/elastic/elasticsearch/commit/4518373c0d7f2bc964b40fc51fa1685459a859c2", "message": "CR: check for exists", "committedDate": "2020-11-24T08:48:17Z", "type": "commit"}, {"oid": "af8e0cb262d65c82542ac2b45391fedb730be64b", "url": "https://github.com/elastic/elasticsearch/commit/af8e0cb262d65c82542ac2b45391fedb730be64b", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests", "committedDate": "2020-11-24T09:25:13Z", "type": "commit"}, {"oid": "ccf33333310b5dddf48a0d514f68d88be718b00b", "url": "https://github.com/elastic/elasticsearch/commit/ccf33333310b5dddf48a0d514f68d88be718b00b", "message": "cleaner boolean", "committedDate": "2020-11-24T09:29:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r529811502", "bodyText": "I think we want this to be final boolean leakTestsEnabled = extension.has(\"netty_leak_tests_enabled\") && (Boolean) extension.get(\"netty_leak_tests_enabled\");. For external plugin authors we want this disabled by default.", "author": "mark-vieira", "createdAt": "2020-11-24T19:03:04Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -968,31 +971,60 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final ExtraPropertiesExtension extension = project.getExtensions().getExtraProperties();\n+            final boolean leakTestsEnabled = extension.has(\"netty_leak_tests_enabled\") == false", "originalCommit": "ccf33333310b5dddf48a0d514f68d88be718b00b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxNTMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r529815317", "bodyText": "Are we sure about that? Anything they build that has Netty leaks will be broken from the get-go, why deny them this functionality by default (I don't see how we would document it in a way that would make people aware of its existence).\n<=> I basically chose defaulting to true because this is a pretty catastrophic issue.", "author": "original-brownbear", "createdAt": "2020-11-24T19:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxNzcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r529817713", "bodyText": "I'll defer to @rjernst on this one since it has plugin authoring implications.", "author": "mark-vieira", "createdAt": "2020-11-24T19:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r532987441", "bodyText": "In the past we have erred on the side of forcing anything we deem relevant to our plugins/modules to be used by all plugin authors. I think we have found this to be to burdensome on those users as the vast majority don't care about our internal rules. I would say do not force this on plugin authors at first.\nI'm also wondering if this is something we should have on for all builds, but instead have as another CI job? It makes sense to set it for tests inside the netty module, since that is testing our netty code, but forcing this on all developers seems like a step backwards towards the old pattern of \"lets make everything an integration test and we will naturally catch distributed bugs\". The cost is high when developers outside the distributed area hit an issue.  I also do not think we should reuse the build.gradle based setting like with bwc tests, as that was specifically added to enable back ports, while this seems like a general switch to disable the testing globally \"just in case\", which to me indicates it should be an isolated test run periodically.", "author": "rjernst", "createdAt": "2020-12-01T00:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMDQ5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r533000496", "bodyText": "I think we have found this to be to burdensome on those users as the vast majority don't care about our internal rules.\n\nThis isn't an arbitrary code style rule though? Anything you build that leaks Netty buffers will be fundamentally broken and OOM eventually. Also note that EsTestCase does similar checks for both Netty and our self-managed buffer pool by default for all unit tests so I don't see why being more lax about this in integration tests would be necessary?\n\nthis seems like a general switch to disable the testing globally \"just in case\", which to me indicates it should be an isolated test run periodically.\n\nThe thing is, running this in a periodic job makes it a lot less useful. David's argument here #64528 (comment) makes a lot of sense and also, as explained above in the real world this is expected to fail at an incredibly low rate (currently I'm seeing leak warnings in Cloud logs at a frequency of less than 10 globally per day and an even lower rate for 7.x versions). Again, if this triggers at any meaningful frequency something is very broken.", "author": "original-brownbear", "createdAt": "2020-12-01T00:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MzIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r533673223", "bodyText": "This isn't an arbitrary code style rule though? Anything you build that leaks Netty buffers will be fundamentally broken and OOM eventually.\n\nTrue, but we can't anticipate all plugin authors use cases or intentions. What if they are testing something that purposefully creates a leak, etc. Now they can't build their plugin. I vote for disabling this externally only because we've been so disruptive in the past and I don't want to risk any more side-effects from stuff like this. Of course, external plugin authors that are doing bytebuf allocation in their plugins (probably not common) should have leak-detection enabled, but I agree with Ryan that we should lean towards being less prescriptive there, simply because historically it has caused lots of problem.", "author": "mark-vieira", "createdAt": "2020-12-01T19:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MzU0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r533673545", "bodyText": "RE: the periodic job, we can start with doing this across the board and then potentially move it into a periodic job if it becomes too disruptive or costly.", "author": "mark-vieira", "createdAt": "2020-12-01T19:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NzA1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r533677054", "bodyText": "I'm fine with moving to a periodic job as necessary, but then I don't think we should have an escape hatch. If it is problematic, let's move it at that time, rather than try to proactively allow for disabling across the board.", "author": "rjernst", "createdAt": "2020-12-01T19:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3ODIxNw==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r533678217", "bodyText": "I think \"problematic\" needs to take into consideration the existence of an escape hatch. Just as we do for BWC testing (which is included in the pr/merge workflow). We would not add any check to the build that we could not somehow mute temporarily, and this is no different.\nMuting temporarily does not mean it's problematic. It's a necessary tool to keep work flowing. If this becomes the norm (i.e. it's disable more often than it isn't) then that's very different.", "author": "mark-vieira", "createdAt": "2020-12-01T19:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwMTk1MA==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r534001950", "bodyText": "Alright :) disabled the check by default now so that plugin authors. I'd still rather not make this a separate CI task for previously stated reasons. Let me know what you think", "author": "original-brownbear", "createdAt": "2020-12-02T09:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg=="}], "type": "inlineReview"}, {"oid": "4f1ea876aeeb794816e7dde373ca41075871e0e0", "url": "https://github.com/elastic/elasticsearch/commit/4f1ea876aeeb794816e7dde373ca41075871e0e0", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests", "committedDate": "2020-12-02T07:22:30Z", "type": "commit"}, {"oid": "a6b6007734c3b450439abde3a6f8240b4c5593e6", "url": "https://github.com/elastic/elasticsearch/commit/a6b6007734c3b450439abde3a6f8240b4c5593e6", "message": "default to false", "committedDate": "2020-12-02T07:41:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0ODE4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r534348186", "bodyText": "Let's log this at warn level since we aren't failing the build.", "author": "mark-vieira", "createdAt": "2020-12-02T17:26:05Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -985,31 +988,58 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final ExtraPropertiesExtension extension = project.getExtensions().getExtraProperties();\n+            if (extension.has(\"netty_leak_tests_enabled\") && (Boolean) extension.get(\"netty_leak_tests_enabled\")) {\n+                throw new TestClustersException(\n+                    \"Found Netty ByteBuf leaks in node logs. In order to temporarily mute this check, set \"\n+                        + \"\\\"netty_leak_tests_enabled\\\" to false in the root level build.gradle file\"\n+                );\n+            } else {\n+                LOGGER.error(", "originalCommit": "a6b6007734c3b450439abde3a6f8240b4c5593e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e431859e630c78cca7356056e70610937bc10ecf", "url": "https://github.com/elastic/elasticsearch/commit/e431859e630c78cca7356056e70610937bc10ecf", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests", "committedDate": "2020-12-03T08:10:58Z", "type": "commit"}, {"oid": "652ee3cbeed35bae03c3612127efa7efbc7dbc92", "url": "https://github.com/elastic/elasticsearch/commit/652ee3cbeed35bae03c3612127efa7efbc7dbc92", "message": "bye escape hatch", "committedDate": "2020-12-03T08:17:32Z", "type": "commit"}]}