{"pr_number": 65284, "pr_title": "Refactor deprecation plugin for easier extensibility", "pr_createdAt": "2020-11-19T20:10:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65284", "timeline": [{"oid": "b9af7a9ba3ec6891d3eb63a0ea75e716847cd19b", "url": "https://github.com/elastic/elasticsearch/commit/b9af7a9ba3ec6891d3eb63a0ea75e716847cd19b", "message": "Refactor deprecation plugin for easier extensibility", "committedDate": "2020-11-19T20:06:31Z", "type": "commit"}, {"oid": "eb0eeb715f8d8c69923f9ae4b1ddba9f278a3b89", "url": "https://github.com/elastic/elasticsearch/commit/eb0eeb715f8d8c69923f9ae4b1ddba9f278a3b89", "message": "fixing style", "committedDate": "2020-11-19T20:18:10Z", "type": "commit"}, {"oid": "4fd6bb0f03ddd58f80321f0abae6c1a6553bb235", "url": "https://github.com/elastic/elasticsearch/commit/4fd6bb0f03ddd58f80321f0abae6c1a6553bb235", "message": "fixing test", "committedDate": "2020-11-19T20:25:18Z", "type": "commit"}, {"oid": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "url": "https://github.com/elastic/elasticsearch/commit/6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "message": "Merge branch 'master' into feature/deprecation-plugin-refactor", "committedDate": "2020-11-30T16:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0Mjg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532942859", "bodyText": "I think we should verify that this map doesn't have keys that would conflict with cluster/node/index settings, given it's plumbed into the XContent via mapContents later.", "author": "gwbrown", "createdAt": "2020-11-30T22:24:11Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java", "diffHunk": "@@ -81,24 +80,30 @@ private DeprecationInfoAction() {\n         private List<DeprecationIssue> clusterSettingsIssues;\n         private List<DeprecationIssue> nodeSettingsIssues;\n         private Map<String, List<DeprecationIssue>> indexSettingsIssues;\n-        private List<DeprecationIssue> mlSettingsIssues;\n+        private Map<String, List<DeprecationIssue>> pluginSettingsIssues;\n \n         public Response(StreamInput in) throws IOException {\n             super(in);\n             clusterSettingsIssues = in.readList(DeprecationIssue::new);\n             nodeSettingsIssues = in.readList(DeprecationIssue::new);\n             indexSettingsIssues = in.readMapOfLists(StreamInput::readString, DeprecationIssue::new);\n-            mlSettingsIssues = in.readList(DeprecationIssue::new);\n+            if (in.getVersion().before(Version.V_7_11_0)) {\n+                List<DeprecationIssue> mlIssues = in.readList(DeprecationIssue::new);\n+                pluginSettingsIssues = new HashMap<>();\n+                pluginSettingsIssues.put(\"ml_settings\", mlIssues);\n+            } else {\n+                pluginSettingsIssues = in.readMapOfLists(StreamInput::readString, DeprecationIssue::new);\n+            }\n         }\n \n         public Response(List<DeprecationIssue> clusterSettingsIssues,\n                         List<DeprecationIssue> nodeSettingsIssues,\n                         Map<String, List<DeprecationIssue>> indexSettingsIssues,\n-                        List<DeprecationIssue> mlSettingsIssues) {\n+                        Map<String, List<DeprecationIssue>> pluginSettingsIssues) {\n             this.clusterSettingsIssues = clusterSettingsIssues;\n             this.nodeSettingsIssues = nodeSettingsIssues;\n             this.indexSettingsIssues = indexSettingsIssues;\n-            this.mlSettingsIssues = mlSettingsIssues;\n+            this.pluginSettingsIssues = pluginSettingsIssues;", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NDI3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532944271", "bodyText": "Can we move the Version.V_7_11_0 to a constant? I find doing so makes the code clearer and less error-prone if we have to change the version on backport or similar.", "author": "gwbrown", "createdAt": "2020-11-30T22:27:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java", "diffHunk": "@@ -81,24 +80,30 @@ private DeprecationInfoAction() {\n         private List<DeprecationIssue> clusterSettingsIssues;\n         private List<DeprecationIssue> nodeSettingsIssues;\n         private Map<String, List<DeprecationIssue>> indexSettingsIssues;\n-        private List<DeprecationIssue> mlSettingsIssues;\n+        private Map<String, List<DeprecationIssue>> pluginSettingsIssues;\n \n         public Response(StreamInput in) throws IOException {\n             super(in);\n             clusterSettingsIssues = in.readList(DeprecationIssue::new);\n             nodeSettingsIssues = in.readList(DeprecationIssue::new);\n             indexSettingsIssues = in.readMapOfLists(StreamInput::readString, DeprecationIssue::new);\n-            mlSettingsIssues = in.readList(DeprecationIssue::new);\n+            if (in.getVersion().before(Version.V_7_11_0)) {", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4OTYyNw==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r533389627", "bodyText": "Can we move the Version.V_7_11_0 to a constant? I find doing so makes the code clearer and less error-prone if we have to change the version on backport or similar.\n\nGiven that Version.V_7_11_0 is already a constant, separating the version from the BWC serialization increases cognitive load when determining which version supports this thing. Its an extra check logical jump which would be frustrating when troubleshooting/checking what version is supported.\nI would rather not replace with a constant. Especially since the almost universal pattern in the code base is to not use special constants.", "author": "benwtrent", "createdAt": "2020-12-01T13:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r536411652", "bodyText": "It only moves it one level (i.e. one \"go to definition\" click), and I find that it 1) makes changing the version during backports significantly less error prone, particularly if there are multiple version checks in the serialization, or 2) the same version is used in multiple class's serialization methods for a single logical feature.\nThat said, given that neither of those apply in this case, if you feel strongly about it I'm not going to pick a fight about it.", "author": "gwbrown", "createdAt": "2020-12-04T22:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NTE0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532955149", "bodyText": "Why make Components an interface? Unless I'm missing something, there's not really multiple ways to implement this interface, it's basically just a POJO - why not break the StandardComponents class out into its own file and just use that directly?", "author": "gwbrown", "createdAt": "2020-11-30T22:51:12Z", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/DeprecationChecker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.xpack.core.deprecation.DeprecationIssue;\n+\n+import java.util.List;\n+\n+public interface DeprecationChecker {\n+\n+    interface Components {", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MDI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532980244", "bodyText": "It's very possible I've overlooked something, but couldn't this be done by building a chain of ListenableFutures in advance and only starting the first one here, which would reuse that well-tested common code for the concurrency bits, and also avoid the case where tasks can be modified while execution is in flight?\n(that case never comes up in this code as-written, but it could if this class is reused elsewhere - the lock is not held while waiting for the submitted AbstractRunnable to be executed by executionService)", "author": "gwbrown", "createdAt": "2020-11-30T23:53:09Z", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/TransportDeprecationInfoAction.java", "diffHunk": "@@ -106,15 +110,116 @@ protected final void masterOperation(Task task, final DeprecationInfoAction.Requ\n         }\n     }\n \n-    private void getDatafeedConfigs(ActionListener<List<DatafeedConfig>> listener) {\n-        if (XPackSettings.MACHINE_LEARNING_ENABLED.get(settings) == false) {\n-            listener.onResponse(Collections.emptyList());\n-        } else {\n-            ClientHelper.executeAsyncWithOrigin(client, ClientHelper.DEPRECATION_ORIGIN, GetDatafeedsAction.INSTANCE,\n-                    new GetDatafeedsAction.Request(GetDatafeedsAction.ALL), ActionListener.wrap(\n-                            datafeedsResponse -> listener.onResponse(datafeedsResponse.getResponse().results()),\n-                            listener::onFailure\n-                    ));\n+    static void pluginSettingIssues(List<DeprecationChecker> checkers,\n+                                    ExecutorService executorService,\n+                                    DeprecationChecker.Components components,\n+                                    ActionListener<Map<String, List<DeprecationIssue>>> listener) {\n+        NamedChainedExecutor<List<DeprecationIssue>> namedChainedExecutor = new NamedChainedExecutor<>(executorService);\n+        for (DeprecationChecker checker : checkers) {\n+            if (checker.enabled(components.settings())) {\n+                namedChainedExecutor.add(new NamedChainedExecutor.ChainTask<>() {\n+                    @Override\n+                    public void run(ActionListener<List<DeprecationIssue>> listener) {\n+                        checker.check(components, listener);\n+                    }\n+\n+                    @Override\n+                    public String name() {\n+                        return checker.getName();\n+                    }\n+                });\n+            }\n+        }\n+        namedChainedExecutor.execute(listener);\n+    }\n+\n+    static class StandardComponents implements DeprecationChecker.Components {\n+\n+        private final NamedXContentRegistry xContentRegistry;\n+        private final Settings settings;\n+        private final Client client;\n+\n+        StandardComponents(NamedXContentRegistry xContentRegistry, Settings settings, Client client) {\n+            this.xContentRegistry = xContentRegistry;\n+            this.settings = settings;\n+            this.client = client;\n+        }\n+\n+        @Override\n+        public NamedXContentRegistry xContentRegistry() {\n+            return xContentRegistry;\n+        }\n+\n+        @Override\n+        public Settings settings() {\n+            return settings;\n+        }\n+\n+        @Override\n+        public Client client() {\n+            return client;\n+        }\n+    }\n+\n+    static class NamedChainedExecutor<T> {\n+        public interface ChainTask<T> {\n+            void run(ActionListener<T> listener);\n+\n+            String name();\n+        }\n+\n+        private final ExecutorService executorService;\n+        private final LinkedList<ChainTask<T>> tasks = new LinkedList<>();\n+        private final Map<String, T> collectedResponses;\n+\n+        /**\n+         * Creates a new NamedChainedExecutor.\n+         * Each chainedTask is executed in order serially\n+         * @param executorService The service where to execute the tasks\n+         */\n+        NamedChainedExecutor(ExecutorService executorService) {\n+            this.executorService = Objects.requireNonNull(executorService);\n+            this.collectedResponses = new HashMap<>();\n+        }\n+\n+        public synchronized void add(ChainTask<T> task) {\n+            tasks.add(task);\n+        }\n+\n+        private synchronized void execute(String previousName, T previousValue, ActionListener<Map<String, T>> listener) {", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MjQ1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532982451", "bodyText": "Do we expect to have multiple implementations of this? If not, why is it an interface and not just a class?\nGoing a step further, if we don't expect to add more fields in the future, we could really simplify down and make tasks a LinkedHashMap<String, Consumer<ActionListener<T>>> and eliminate this interface/class entirely.", "author": "gwbrown", "createdAt": "2020-11-30T23:59:27Z", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/TransportDeprecationInfoAction.java", "diffHunk": "@@ -106,15 +110,116 @@ protected final void masterOperation(Task task, final DeprecationInfoAction.Requ\n         }\n     }\n \n-    private void getDatafeedConfigs(ActionListener<List<DatafeedConfig>> listener) {\n-        if (XPackSettings.MACHINE_LEARNING_ENABLED.get(settings) == false) {\n-            listener.onResponse(Collections.emptyList());\n-        } else {\n-            ClientHelper.executeAsyncWithOrigin(client, ClientHelper.DEPRECATION_ORIGIN, GetDatafeedsAction.INSTANCE,\n-                    new GetDatafeedsAction.Request(GetDatafeedsAction.ALL), ActionListener.wrap(\n-                            datafeedsResponse -> listener.onResponse(datafeedsResponse.getResponse().results()),\n-                            listener::onFailure\n-                    ));\n+    static void pluginSettingIssues(List<DeprecationChecker> checkers,\n+                                    ExecutorService executorService,\n+                                    DeprecationChecker.Components components,\n+                                    ActionListener<Map<String, List<DeprecationIssue>>> listener) {\n+        NamedChainedExecutor<List<DeprecationIssue>> namedChainedExecutor = new NamedChainedExecutor<>(executorService);\n+        for (DeprecationChecker checker : checkers) {\n+            if (checker.enabled(components.settings())) {\n+                namedChainedExecutor.add(new NamedChainedExecutor.ChainTask<>() {\n+                    @Override\n+                    public void run(ActionListener<List<DeprecationIssue>> listener) {\n+                        checker.check(components, listener);\n+                    }\n+\n+                    @Override\n+                    public String name() {\n+                        return checker.getName();\n+                    }\n+                });\n+            }\n+        }\n+        namedChainedExecutor.execute(listener);\n+    }\n+\n+    static class StandardComponents implements DeprecationChecker.Components {\n+\n+        private final NamedXContentRegistry xContentRegistry;\n+        private final Settings settings;\n+        private final Client client;\n+\n+        StandardComponents(NamedXContentRegistry xContentRegistry, Settings settings, Client client) {\n+            this.xContentRegistry = xContentRegistry;\n+            this.settings = settings;\n+            this.client = client;\n+        }\n+\n+        @Override\n+        public NamedXContentRegistry xContentRegistry() {\n+            return xContentRegistry;\n+        }\n+\n+        @Override\n+        public Settings settings() {\n+            return settings;\n+        }\n+\n+        @Override\n+        public Client client() {\n+            return client;\n+        }\n+    }\n+\n+    static class NamedChainedExecutor<T> {\n+        public interface ChainTask<T> {", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MzEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532983126", "bodyText": "Testing this code path would be nice for completeness, especially if we add some validation logic to the plugin issues keys.", "author": "gwbrown", "createdAt": "2020-12-01T00:01:18Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoActionResponseTests.java", "diffHunk": "@@ -101,9 +100,13 @@ public void testFrom() throws IOException {\n             emptyList());\n \n         DeprecationInfoAction.Request request = new DeprecationInfoAction.Request(Strings.EMPTY_ARRAY);\n-        DeprecationInfoAction.Response response = DeprecationInfoAction.Response.from(state, NamedXContentRegistry.EMPTY,\n-            resolver, request, datafeeds,\n-            nodeDeprecationIssues, indexSettingsChecks, clusterSettingsChecks, mlSettingsChecks);\n+        DeprecationInfoAction.Response response = DeprecationInfoAction.Response.from(state,\n+            resolver,\n+            request,\n+            nodeDeprecationIssues,\n+            indexSettingsChecks,\n+            clusterSettingsChecks,\n+            Collections.emptyMap());", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NTY5OA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532985698", "bodyText": "Is there a benefit to mocking here over just doing new StandardComponents(null, Settings.EMPTY, null)? I'm not against mocks in general, but I prefer to use them as sparingly as possible, especially when it seems easy to avoid them.", "author": "gwbrown", "createdAt": "2020-12-01T00:08:31Z", "path": "x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/TransportDeprecationInfoActionTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.deprecation.DeprecationIssue;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TransportDeprecationInfoActionTests extends ESTestCase {\n+\n+    private ThreadPool threadPool;\n+\n+    @Before\n+    public void startThreadPool() {\n+        threadPool = new TestThreadPool(\"TransportDeprecationInfoActionTests\");\n+    }\n+\n+    @After\n+    public void stopThreadPool() throws InterruptedException {\n+        terminate(threadPool);\n+    }\n+\n+    public void testPluginSettingIssues() {\n+        DeprecationChecker.Components components = mock(DeprecationChecker.Components.class);", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r532987718", "bodyText": "I see why you did it this way - it allows us to make this change without breaking the API response format - but I think it would be worth coordinating with the ES UI team to see what would work best for them, as I believe currently any new keys here will just be ignored by the UI. This API is consumed most commonly through the UI, so it would definitely be nice if it could pick up any new plugin issue categories automatically.", "author": "gwbrown", "createdAt": "2020-12-01T00:14:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java", "diffHunk": "@@ -132,7 +141,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n                 .array(\"node_settings\", nodeSettingsIssues.toArray())\n                 .field(\"index_settings\")\n                 .map(indexSettingsIssues)\n-                .array(\"ml_settings\", mlSettingsIssues.toArray())\n+                .mapContents(pluginSettingsIssues)", "originalCommit": "6847af5e5b8293f7aea7926f2d58e2f3b24d62cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4Nzg2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r533687869", "bodyText": "@elastic/es-ui  any thoughts?\nThe idea here is that each plugin would have a unique key entry (i.e. how ml_settings is now). For ml_settings it will contain ALL deprecations related to ML.", "author": "benwtrent", "createdAt": "2020-12-01T20:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r533741815", "bodyText": "It looks like the Upgrade Assistant ends up concatenating all of these arrays into a single array anyway. As Gordon mentioned, the UI is currently designed to know about all the available categories up-front, so it won't pick up new ones dynamically.\n@alisonelizabeth is currently leading the 8.0 Upgrade Assistant effort and is best-situated to offer guidance on changes to the API design. I'll leave it to her to give you insight into how this information will be surfaced in the UI and how the API can change to best support that, if at all.", "author": "cjcenizal", "createdAt": "2020-12-01T21:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMzg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r534123870", "bodyText": "guidance on changes to the API design.\n\nTechnically, this doesn't change the API at all. I just want to be able to add new ML deprecation warnings. If we could, please, @gwbrown @cjcenizal if there were to be API changes, can that be another PR that is handled by whomever owns the plugin?", "author": "benwtrent", "createdAt": "2020-12-02T12:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4MDUxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r534180519", "bodyText": "@benwtrent I\u2019m comfortable with handling any additional changes in a separate PR since it doesn\u2019t seem like there is an immediate impact. However, I\u2019m on the same page as Gordon and CJ in that the UI won\u2019t pick up any new plugin issue categories, and it doesn\u2019t seem ideal to have to remember to add support in the UI whenever a new plugin category is added.\n\nI just want to be able to add new ML deprecation warnings.\n\nCan you provide an example? Based on #65284 (comment), it sounds like all deprecations will remain under ml_settings, but just want to confirm.\nI\u2019ve also opened an issue on the Kibana side to track any follow-up work regarding this: elastic/kibana#84761.", "author": "alisonelizabeth", "createdAt": "2020-12-02T13:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTMwMA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r534241300", "bodyText": "Can you provide an example? Based on #65284 (comment), it sounds like all deprecations will remain under ml_settings, but just want to confirm.\n\nYes.\nml_settings is still the top level entry where all ML related deprecations will live.", "author": "benwtrent", "createdAt": "2020-12-02T15:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NzcxOA=="}], "type": "inlineReview"}, {"oid": "db857d9aef0ab267dcbe690534428346fc28f412", "url": "https://github.com/elastic/elasticsearch/commit/db857d9aef0ab267dcbe690534428346fc28f412", "message": "checking for duplicate keys", "committedDate": "2020-12-01T18:20:46Z", "type": "commit"}, {"oid": "0f768043b4207395c9fb78aeb2d8c485cbd2dc2d", "url": "https://github.com/elastic/elasticsearch/commit/0f768043b4207395c9fb78aeb2d8c485cbd2dc2d", "message": "refactoring to use grouped listener", "committedDate": "2020-12-01T20:02:26Z", "type": "commit"}, {"oid": "02c745abc31013223de598885e00a621607944c9", "url": "https://github.com/elastic/elasticsearch/commit/02c745abc31013223de598885e00a621607944c9", "message": "Merge branch 'feature/deprecation-plugin-refactor' of github.com:benwtrent/elasticsearch into feature/deprecation-plugin-refactor", "committedDate": "2020-12-01T20:02:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMzI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r536413243", "bodyText": "Index names are nested under the index_settings key, so we don't need to include them in this check.", "author": "gwbrown", "createdAt": "2020-12-04T22:10:31Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java", "diffHunk": "@@ -78,27 +81,44 @@ private DeprecationInfoAction() {\n     }\n \n     public static class Response extends ActionResponse implements ToXContentObject {\n+        private static final Set<String> RESERVED_NAMES = Sets.newHashSet(\"cluster_settings\", \"node_settings\");\n         private List<DeprecationIssue> clusterSettingsIssues;\n         private List<DeprecationIssue> nodeSettingsIssues;\n         private Map<String, List<DeprecationIssue>> indexSettingsIssues;\n-        private List<DeprecationIssue> mlSettingsIssues;\n+        private Map<String, List<DeprecationIssue>> pluginSettingsIssues;\n \n         public Response(StreamInput in) throws IOException {\n             super(in);\n             clusterSettingsIssues = in.readList(DeprecationIssue::new);\n             nodeSettingsIssues = in.readList(DeprecationIssue::new);\n             indexSettingsIssues = in.readMapOfLists(StreamInput::readString, DeprecationIssue::new);\n-            mlSettingsIssues = in.readList(DeprecationIssue::new);\n+            if (in.getVersion().before(Version.V_7_11_0)) {\n+                List<DeprecationIssue> mlIssues = in.readList(DeprecationIssue::new);\n+                pluginSettingsIssues = new HashMap<>();\n+                pluginSettingsIssues.put(\"ml_settings\", mlIssues);\n+            } else {\n+                pluginSettingsIssues = in.readMapOfLists(StreamInput::readString, DeprecationIssue::new);\n+            }\n         }\n \n         public Response(List<DeprecationIssue> clusterSettingsIssues,\n                         List<DeprecationIssue> nodeSettingsIssues,\n                         Map<String, List<DeprecationIssue>> indexSettingsIssues,\n-                        List<DeprecationIssue> mlSettingsIssues) {\n+                        Map<String, List<DeprecationIssue>> pluginSettingsIssues) {\n             this.clusterSettingsIssues = clusterSettingsIssues;\n             this.nodeSettingsIssues = nodeSettingsIssues;\n             this.indexSettingsIssues = indexSettingsIssues;\n-            this.mlSettingsIssues = mlSettingsIssues;\n+            Set<String> reservedNames = new HashSet<>(RESERVED_NAMES);\n+            reservedNames.addAll(indexSettingsIssues.keySet());", "originalCommit": "02c745abc31013223de598885e00a621607944c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r536416304", "bodyText": "Not necessary but a super-minor cleanup we could do is move this into the DeprecationChecker interface as a sibling of CheckResult.\n(I forgot classes could be defined inside interfaces when I said to move this to its own file. Again, feel free to disregard this)", "author": "gwbrown", "createdAt": "2020-12-04T22:17:20Z", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/DeprecationCheckerComponents.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+\n+public class DeprecationCheckerComponents {", "originalCommit": "02c745abc31013223de598885e00a621607944c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxOTA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/65284#discussion_r536419064", "bodyText": "Is there a good reason not to construct the Components with an OriginSettingClient, so each plugin doesn't have to do this wrapping itself?", "author": "gwbrown", "createdAt": "2020-12-04T22:23:40Z", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/MlDeprecationChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.deprecation.DeprecationIssue;\n+import org.elasticsearch.xpack.core.ml.action.GetDatafeedsAction;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class MlDeprecationChecker implements DeprecationChecker {\n+\n+    static Optional<DeprecationIssue> checkDataFeedQuery(DatafeedConfig datafeedConfig, NamedXContentRegistry xContentRegistry) {\n+        List<String> deprecations = datafeedConfig.getQueryDeprecations(xContentRegistry);\n+        if (deprecations.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(new DeprecationIssue(DeprecationIssue.Level.WARNING,\n+                \"Datafeed [\" + datafeedConfig.getId() + \"] uses deprecated query options\",\n+                \"https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html#breaking_70_search_changes\",\n+                deprecations.toString()));\n+        }\n+    }\n+\n+    static Optional<DeprecationIssue> checkDataFeedAggregations(DatafeedConfig datafeedConfig, NamedXContentRegistry xContentRegistry) {\n+        List<String> deprecations = datafeedConfig.getAggDeprecations(xContentRegistry);\n+        if (deprecations.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(new DeprecationIssue(DeprecationIssue.Level.WARNING,\n+                \"Datafeed [\" + datafeedConfig.getId() + \"] uses deprecated aggregation options\",\n+                \"https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html\" +\n+                    \"#breaking_70_aggregations_changes\", deprecations.toString()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean enabled(Settings settings) {\n+        return XPackSettings.MACHINE_LEARNING_ENABLED.get(settings);\n+    }\n+\n+    @Override\n+    public void check(DeprecationCheckerComponents components, ActionListener<CheckResult> deprecationIssueListener) {\n+        if (XPackSettings.MACHINE_LEARNING_ENABLED.get(components.settings()) == false) {\n+            deprecationIssueListener.onResponse(new CheckResult(getName(), Collections.emptyList()));\n+        }\n+        Client client = components.client();\n+        ClientHelper.executeAsyncWithOrigin(client, ClientHelper.DEPRECATION_ORIGIN, GetDatafeedsAction.INSTANCE,", "originalCommit": "02c745abc31013223de598885e00a621607944c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a457beb4f63421067532c9082510a09824e3620a", "url": "https://github.com/elastic/elasticsearch/commit/a457beb4f63421067532c9082510a09824e3620a", "message": "addressing pr comments", "committedDate": "2020-12-07T15:27:52Z", "type": "commit"}, {"oid": "07f09e6f086d0e5d43eacb36e982fa7ee495a806", "url": "https://github.com/elastic/elasticsearch/commit/07f09e6f086d0e5d43eacb36e982fa7ee495a806", "message": "Merge branch 'master' into feature/deprecation-plugin-refactor", "committedDate": "2020-12-07T15:28:25Z", "type": "commit"}, {"oid": "919d21194418c4d81680d370bef9db6bb951cbe7", "url": "https://github.com/elastic/elasticsearch/commit/919d21194418c4d81680d370bef9db6bb951cbe7", "message": "fixing style", "committedDate": "2020-12-07T16:25:44Z", "type": "commit"}, {"oid": "5241c70f375ab08e35a42e026fad9e80903c65f5", "url": "https://github.com/elastic/elasticsearch/commit/5241c70f375ab08e35a42e026fad9e80903c65f5", "message": "Merge branch 'feature/deprecation-plugin-refactor' of github.com:benwtrent/elasticsearch into feature/deprecation-plugin-refactor", "committedDate": "2020-12-07T16:27:01Z", "type": "commit"}]}