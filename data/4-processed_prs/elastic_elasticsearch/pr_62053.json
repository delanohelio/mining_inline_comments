{"pr_number": 62053, "pr_title": "Fix ccs permission for search with a scroll id", "pr_createdAt": "2020-09-07T12:00:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62053", "timeline": [{"oid": "90caab3e934b55fa8f98f4faec098097c3adb22e", "url": "https://github.com/elastic/elasticsearch/commit/90caab3e934b55fa8f98f4faec098097c3adb22e", "message": "Fix ccs permission for scroll search", "committedDate": "2020-09-07T11:49:52Z", "type": "commit"}, {"oid": "f455e977cd32b782aac00147c4c12a755eba4c2f", "url": "https://github.com/elastic/elasticsearch/commit/f455e977cd32b782aac00147c4c12a755eba4c2f", "message": "Checkstyle", "committedDate": "2020-09-07T12:20:19Z", "type": "commit"}, {"oid": "7518acd0675cbd7593b8f4afddc893fbd6e2e366", "url": "https://github.com/elastic/elasticsearch/commit/7518acd0675cbd7593b8f4afddc893fbd6e2e366", "message": "Merge remote-tracking branch 'origin/master' into es-61828-ccs-scroll-privileges", "committedDate": "2020-09-07T12:28:21Z", "type": "commit"}, {"oid": "6bf7704fde501d74205e4ccb3b7a28af4d3024dd", "url": "https://github.com/elastic/elasticsearch/commit/6bf7704fde501d74205e4ccb3b7a28af4d3024dd", "message": "Fix test failure", "committedDate": "2020-09-07T13:17:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r484745362", "bodyText": "I would suggest that hasLocalIndices be a method of ParsedScrollId , it's more OO this way.", "author": "albertzaharovits", "createdAt": "2020-09-08T08:32:16Z", "path": "server/src/main/java/org/elasticsearch/action/search/TransportSearchHelper.java", "diffHunk": "@@ -108,6 +109,10 @@ static ParsedScrollId parseScrollId(String scrollId) {\n         }\n     }\n \n+    static boolean hasLocalIndices(String scrollId) {\n+        return Arrays.stream(parseScrollId(scrollId).getContext()).anyMatch(c -> c.getClusterAlias() == null);", "originalCommit": "6bf7704fde501d74205e4ccb3b7a28af4d3024dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1Nzg0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r484957845", "bodyText": "You are absolutely right. Now I wonder why I didn't do it initially ...", "author": "ywangd", "createdAt": "2020-09-08T14:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc1MzgyMw==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r484753823", "bodyText": "I would avoid throwing exceptions in this part of the code, it's very brittle, better call the listener.onFailure .", "author": "albertzaharovits", "createdAt": "2020-09-08T08:45:46Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -261,7 +262,7 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                 // if the action is a search scroll action, we first authorize that the user can execute the action for some\n                 // index and if they cannot, we can fail the request early before we allow the execution of the action and in\n                 // turn the shard actions\n-                if (SearchScrollAction.NAME.equals(action)) {\n+                if (SearchScrollAction.NAME.equals(action) && ((SearchScrollRequest) request).hasLocalIndices()) {", "originalCommit": "6bf7704fde501d74205e4ccb3b7a28af4d3024dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1ODY0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r484958646", "bodyText": "This is a good catch. Thanks. I have added the exception handling and listener call. It is a pretty basic try..catch block. Please let me know if there are better way or convention to do it differently. Thanks.", "author": "ywangd", "createdAt": "2020-09-08T14:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc1MzgyMw=="}], "type": "inlineReview"}, {"oid": "43323950385bf88ed6fcf9cd395f2748e45444be", "url": "https://github.com/elastic/elasticsearch/commit/43323950385bf88ed6fcf9cd395f2748e45444be", "message": "Address feedback", "committedDate": "2020-09-08T14:16:42Z", "type": "commit"}, {"oid": "38c71eaf878e400fd9cac4802f99ac03de671e0c", "url": "https://github.com/elastic/elasticsearch/commit/38c71eaf878e400fd9cac4802f99ac03de671e0c", "message": "Add randomness to test", "committedDate": "2020-09-08T22:23:01Z", "type": "commit"}, {"oid": "177f9ee906d3953e4672d006421d9be96deeedf1", "url": "https://github.com/elastic/elasticsearch/commit/177f9ee906d3953e4672d006421d9be96deeedf1", "message": "Merge remote-tracking branch 'origin/master' into es-61828-ccs-scroll-privileges", "committedDate": "2020-09-08T23:22:22Z", "type": "commit"}, {"oid": "161013453afd4e865871d385ac11a02cafc5d8f9", "url": "https://github.com/elastic/elasticsearch/commit/161013453afd4e865871d385ac11a02cafc5d8f9", "message": "Merge remote-tracking branch 'origin/master' into es-61828-ccs-scroll-privileges", "committedDate": "2020-09-11T01:59:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNjA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r487806064", "bodyText": "I would've made this variable take both values in this test, i.e. don't rely on randomisation.\nIn principle, it's better to avoid randomisation for test coverage, and use it for variables that don't have any bearing on the output of the test. That's in principle, but sometimes the input value space is large and randomisation might be used on the independent variables as well (more often inside, but sometimes across, value spaces that change the outcome of the test).", "author": "albertzaharovits", "createdAt": "2020-09-14T10:20:43Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizationServiceTests.java", "diffHunk": "@@ -411,6 +412,31 @@ public void testUserWithNoRolesCanPerformRemoteSearch() throws IOException {\n         verifyNoMoreInteractions(auditTrail);\n     }\n \n+    public void testUserWithNoRolesPerformsRemoteSearchWithScroll() throws IOException {\n+        final ParsedScrollId parsedScrollId = mock(ParsedScrollId.class);\n+        final boolean hasLocalIndices = randomBoolean();", "originalCommit": "161013453afd4e865871d385ac11a02cafc5d8f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NjI0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r490656246", "bodyText": "Thanks that's a good point. I changed it to always test both situations.", "author": "ywangd", "createdAt": "2020-09-18T01:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNjQwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r487806401", "bodyText": "ditto https://github.com/elastic/elasticsearch/pull/62053/files#r487806064", "author": "albertzaharovits", "createdAt": "2020-09-14T10:21:22Z", "path": "server/src/test/java/org/elasticsearch/action/search/ParsedScrollIdTests.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.search;\n+\n+import org.elasticsearch.search.internal.ShardSearchContextId;\n+import org.elasticsearch.test.ESTestCase;\n+\n+public class ParsedScrollIdTests extends ESTestCase {\n+    public void testHasLocalIndices() {\n+        final int nResults = randomIntBetween(1, 3);\n+        final SearchContextIdForNode[] searchContextIdForNodes = new SearchContextIdForNode[nResults];\n+\n+        boolean hasLocal = false;\n+        for (int i = 0; i < nResults; i++) {\n+\n+            String clusterAlias = randomBoolean() ? randomAlphaOfLength(8) : null;", "originalCommit": "161013453afd4e865871d385ac11a02cafc5d8f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NzkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r490657927", "bodyText": "I tried to remove the randomness, but then decided to keep it as is. Here is why: The intention is to test that \"any local indices will be reported as hasLocalIndices\". The \"any\" bit makes it more suitable for randomness, because it can be:\n\nA single search context\nMultiple search contexts where\n\nthe local one can be in the first position, second position, last position etc.\nOr there might be more than one local contexts, e.g. all of them are local contexts or only one of them is not local context.\n\n\n\nThe randomness in the test is intended to cover all above situations. If removed, the coverage will be reduced (or we can replace it with a very bloated test method, but I think that is less ideal).", "author": "ywangd", "createdAt": "2020-09-18T02:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNjQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMTk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r487811965", "bodyText": "This test relies on the TransportSearchHelperTests#testParseScrollId , where, given SearchShardTargets, the scroll id is encoded and then decoded, and the test asserts that the \"cluster alias\" shows up after decoding.\nIMO, this test adds little value on top of that, and it's coded away from the above mentioned piece of code.\nMy personal approach would've been to parametrise the TransportSearchHelperTests#generateQueryResults method to allow it to generate scroll ids with/without cluster aliases, and assert the ParsedScrollId#hasLocalIndices method there as well (probably in another test but not necessarily so).", "author": "albertzaharovits", "createdAt": "2020-09-14T10:31:48Z", "path": "server/src/test/java/org/elasticsearch/action/search/ParsedScrollIdTests.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.search;\n+\n+import org.elasticsearch.search.internal.ShardSearchContextId;\n+import org.elasticsearch.test.ESTestCase;\n+\n+public class ParsedScrollIdTests extends ESTestCase {\n+    public void testHasLocalIndices() {", "originalCommit": "161013453afd4e865871d385ac11a02cafc5d8f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1ODYxNw==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r490658617", "bodyText": "I am not sure if I follow your comment. This test is an unit test for ParsedScrollId and has nothing to do with TransportSearchHelperTests#testParseScrollId . Maybe you were commenting on a previous version of this test, i.e. the one before I moved this method as part of ParsedScrollId following your comment of OO design?", "author": "ywangd", "createdAt": "2020-09-18T02:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMjU2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r487812567", "bodyText": "In principle, I would shy away from getters that do any processing, unless the method has a verb in the name.", "author": "albertzaharovits", "createdAt": "2020-09-14T10:33:01Z", "path": "server/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java", "diffHunk": "@@ -83,6 +83,10 @@ public SearchScrollRequest scrollId(String scrollId) {\n         return this;\n     }\n \n+    public ParsedScrollId parsedScrollId() {\n+        return TransportSearchHelper.parseScrollId(scrollId);", "originalCommit": "161013453afd4e865871d385ac11a02cafc5d8f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1OTI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r490659250", "bodyText": "Given TransportSearchHelper.parseScrollId(scrollId) can throw exception, I think it is fair to name it with a verb. I updated to be parseScrollId (same name as TransportSearchHelper#parseScrollId). The extra layer of proxy (from ParsedScrollId to TransportSearchHelper) is because TransportSearchHelper is not public and it feels better to keep it that way.", "author": "ywangd", "createdAt": "2020-09-18T02:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDI5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r487820292", "bodyText": "As you've mentioned the try-catch structure unfortunately doesn't fit too nicely with the async listener idiom .\nI personally would've maintained a check like request instanceof SearchScrollRequest && ((SearchScrollRequest)request).scrollId() != null as I'm not a fan of catching runtime exceptions .\nAgain, this is a feedback with my perspective, the codebase is cot consistent in this regard; it's your choice.", "author": "albertzaharovits", "createdAt": "2020-09-14T10:48:02Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -262,7 +264,16 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                 // index and if they cannot, we can fail the request early before we allow the execution of the action and in\n                 // turn the shard actions\n                 if (SearchScrollAction.NAME.equals(action)) {\n-                    authorizeIndexActionName(action, authorizationInfo, null, listener);\n+                    try {", "originalCommit": "161013453afd4e865871d385ac11a02cafc5d8f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2MDA0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62053#discussion_r490660046", "bodyText": "I changed it to use ActionRunnable.supply(...).run(), which takes a CheckedSupplier to handle the exception. Honestly, the code is less readable with this change. But it is more in line with the overwhelming callback style.\nThe other option is to have SearchScrollRequest#parseScrollId catch the exception internally and returnnull if exception is thrown. But I am less favorable of this approach mainly because the actual exception is basically suppressed so that caller does not know what went wrong. In addition, it is trading a try-catch with a different try-catch plus a null check. Overall not necessarily better.", "author": "ywangd", "createdAt": "2020-09-18T02:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDI5Mg=="}], "type": "inlineReview"}, {"oid": "fe4bc2785c4ae6d3cc7d7e4b723fb06cb370c9d3", "url": "https://github.com/elastic/elasticsearch/commit/fe4bc2785c4ae6d3cc7d7e4b723fb06cb370c9d3", "message": "Merge remote-tracking branch 'origin/master' into es-61828-ccs-scroll-privileges", "committedDate": "2020-09-17T06:47:20Z", "type": "commit"}, {"oid": "7b83bc0a50687c98903904d68acd06257c3197ee", "url": "https://github.com/elastic/elasticsearch/commit/7b83bc0a50687c98903904d68acd06257c3197ee", "message": "Address feedback", "committedDate": "2020-09-18T01:55:56Z", "type": "commit"}, {"oid": "44f5188b54c1ad4e8bb648504d7e6f83a77a1dbc", "url": "https://github.com/elastic/elasticsearch/commit/44f5188b54c1ad4e8bb648504d7e6f83a77a1dbc", "message": "Merge remote-tracking branch 'origin/master' into es-61828-ccs-scroll-privileges", "committedDate": "2020-09-18T02:47:01Z", "type": "commit"}]}