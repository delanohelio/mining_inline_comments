{"pr_number": 51452, "pr_title": "Move variable slotting to the IR tree", "pr_createdAt": "2020-01-24T22:31:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51452", "timeline": [{"oid": "170fa452bc929cc175ffcc3b092999310ac93c37", "url": "https://github.com/elastic/elasticsearch/commit/170fa452bc929cc175ffcc3b092999310ac93c37", "message": "rebuild scope table in ir tree", "committedDate": "2020-01-24T21:51:31Z", "type": "commit"}, {"oid": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "url": "https://github.com/elastic/elasticsearch/commit/6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "message": "missed some private variables during the cherry-pick", "committedDate": "2020-01-24T22:32:50Z", "type": "commit"}, {"oid": "cdaef3be3d1d7927ba2e7d9dbb3e8bdd3fce3e07", "url": "https://github.com/elastic/elasticsearch/commit/cdaef3be3d1d7927ba2e7d9dbb3e8bdd3fce3e07", "message": "fix imports", "committedDate": "2020-01-24T22:38:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDkzMg==", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370874932", "bodyText": "why do we need an explicit empty ctor the same as the default ctor?", "author": "rjernst", "createdAt": "2020-01-24T22:44:46Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "diffHunk": "@@ -22,15 +22,23 @@\n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Globals;\n import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.symbol.ScopeTable;\n+import org.elasticsearch.painless.symbol.ScopeTable.Variable;\n import org.objectweb.asm.Label;\n import org.objectweb.asm.Opcodes;\n \n public class DoWhileLoopNode extends LoopNode {\n \n+    public DoWhileLoopNode() {", "originalCommit": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MDA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370890080", "bodyText": "Good catch. Missed this during the merge.", "author": "jdconrad", "createdAt": "2020-01-24T23:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MjQ5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370882496", "bodyText": "Maybe we could have another method for special/private/hidden (whatever we want to call them) variables? I'd rather have a dedicated method than have to remember # is outside our grammar and so this cannot collide with user variables.", "author": "rjernst", "createdAt": "2020-01-24T23:15:11Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -81,42 +123,48 @@ public void setIndexedType(Class<?> indexedType) {\n     public String getIndexedCanonicalTypeName() {\n         return PainlessLookupUtility.typeToCanonicalTypeName(indexedType);\n     }\n-    \n+\n     /* ---- end node data ---- */\n \n     @Override\n-    protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals) {\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals, ScopeTable scopeTable) {\n         methodWriter.writeStatementOffset(location);\n \n-        getConditionNode().write(classWriter, methodWriter, globals);\n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ISTORE), array.getSlot());\n+        Variable variable = scopeTable.defineVariable(variableType, variableName);\n+        Variable array = scopeTable.defineVariable(arrayType, arrayName);\n+        Variable index = scopeTable.defineVariable(indexType, indexName);\n+\n+        getConditionNode().write(classWriter, methodWriter, globals, scopeTable);\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ISTORE), array.getSlot());\n         methodWriter.push(-1);\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ISTORE), index.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ISTORE), index.getSlot());\n \n         Label begin = new Label();\n         Label end = new Label();\n \n         methodWriter.mark(begin);\n \n         methodWriter.visitIincInsn(index.getSlot(), 1);\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot());\n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ILOAD), index.getSlot());\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ILOAD), array.getSlot());\n         methodWriter.arrayLength();\n         methodWriter.ifICmp(MethodWriter.GE, end);\n \n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot());\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot());\n-        methodWriter.arrayLoad(MethodWriter.getType(getIndexedType()));\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ILOAD), array.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ILOAD), index.getSlot());\n+        methodWriter.arrayLoad(MethodWriter.getType(indexedType));\n         methodWriter.writeCast(cast);\n-        methodWriter.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot());\n+        methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n+\n+        Variable loop = scopeTable.getVariable(\"#loop\");", "originalCommit": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MjA1MA==", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370892050", "bodyText": "Added defineInternalVariable and getInternalVariable to address this specific issue. Let me know if you'd prefer a different name, but I like \"internal\" because I think it makes it clear this is something defined by the compiler rather than a user.", "author": "jdconrad", "createdAt": "2020-01-25T00:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MjQ5Ng=="}], "type": "inlineReview"}, {"oid": "e70ac4c7644566884cb27ba04da17a0d224ddb06", "url": "https://github.com/elastic/elasticsearch/commit/e70ac4c7644566884cb27ba04da17a0d224ddb06", "message": "added methods for internal variables", "committedDate": "2020-01-25T00:15:07Z", "type": "commit"}]}