{"pr_number": 61082, "pr_title": "Add tests that simulate new indexing strategy upgrade procedure.", "pr_createdAt": "2020-08-13T09:33:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61082", "timeline": [{"oid": "3d86fe7db016665b3948e68cfd3a5e1649e56fc6", "url": "https://github.com/elastic/elasticsearch/commit/3d86fe7db016665b3948e68cfd3a5e1649e56fc6", "message": "Add tests that simulate new indexing strategy upgrade procedure.\n\nCloses #58251", "committedDate": "2020-08-13T09:31:03Z", "type": "commit"}, {"oid": "732bc45bbdbe813025347f76b3291ffeb7f7b3ca", "url": "https://github.com/elastic/elasticsearch/commit/732bc45bbdbe813025347f76b3291ffeb7f7b3ca", "message": "spotless", "committedDate": "2020-08-13T09:41:19Z", "type": "commit"}, {"oid": "f0834faea67479b336f56a96461ae65b252959b8", "url": "https://github.com/elastic/elasticsearch/commit/f0834faea67479b336f56a96461ae65b252959b8", "message": "delete ds after test", "committedDate": "2020-08-13T11:07:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDU1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61082#discussion_r469880555", "bodyText": "The update pipeline should happen before line 151, but in our case we have 2 versions of the pipeline, old and new, and the old one is remove after upgrade. Like this the old index keeps the old pipeline until the rollover happened, and the new index has the new one.", "author": "ruflin", "createdAt": "2020-08-13T11:22:37Z", "path": "x-pack/plugin/data-streams/qa/rest/src/test/java/org/elasticsearch/xpack/datastreams/DataStreamUpgradeRestIT.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.datastreams;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+public class DataStreamUpgradeRestIT extends ESRestTestCase {\n+\n+    public void testCompatibleMappingUpgrade() throws Exception {\n+        // Create pipeline\n+        Request putPipelineRequest = new Request(\"PUT\", \"/_ingest/pipeline/mysql-error\");\n+        putPipelineRequest.setJsonEntity(\"{\\\"processors\\\":[]}\");\n+        assertOK(client().performRequest(putPipelineRequest));\n+\n+        // Create a template\n+        Request putComposableIndexTemplateRequest = new Request(\"POST\", \"/_index_template/mysql-error\");\n+        putComposableIndexTemplateRequest.setJsonEntity(\n+            \"{\"\n+                + \"\\\"index_patterns\\\":[\\\"logs-mysql-*\\\"],\"\n+                + \"\\\"priority\\\":200,\"\n+                + \"\\\"composed_of\\\":[\\\"logs-mappings\\\",\\\"logs-settings\\\"],\"\n+                + \"\\\"data_stream\\\":{},\"\n+                + \"\\\"template\\\":{\"\n+                + \"\\\"mappings\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"thread_id\\\":{\\\"type\\\":\\\"long\\\"}\"\n+                + \"}\"\n+                + \"},\"\n+                + \"\\\"settings\\\":{\"\n+                + \"\\\"index.default_pipeline\\\":\\\"mysql-error\\\"\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+        );\n+        assertOK(client().performRequest(putComposableIndexTemplateRequest));\n+\n+        // Create a data stream and index first doc\n+        Request indexRequest = new Request(\"POST\", \"/logs-mysql-error/_doc\");\n+        indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"2020-12-12\\\",\\\"message\\\":\\\"abc\\\",\\\"thread_id\\\":23}\");\n+        assertOK(client().performRequest(indexRequest));\n+\n+        // Update template\n+        putComposableIndexTemplateRequest = new Request(\"POST\", \"/_index_template/mysql-error\");\n+        putComposableIndexTemplateRequest.setJsonEntity(\n+            \"{\"\n+                + \"\\\"index_patterns\\\":[\\\"logs-mysql-*\\\"],\"\n+                + \"\\\"priority\\\":200,\"\n+                + \"\\\"composed_of\\\":[\\\"logs-mappings\\\",\\\"logs-settings\\\"],\"\n+                + \"\\\"data_stream\\\":{},\"\n+                + \"\\\"template\\\":{\"\n+                + \"\\\"mappings\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"thread\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"id\\\":{\\\"type\\\":\\\"long\\\"}\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+                + \"},\"\n+                + \"\\\"settings\\\":{\"\n+                + \"\\\"index.default_pipeline\\\":\\\"mysql-error\\\"\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+        );\n+        assertOK(client().performRequest(putComposableIndexTemplateRequest));\n+\n+        // Update mapping\n+        Request putMappingRequest = new Request(\"PUT\", \"/logs-mysql-error/_mappings\");\n+        putMappingRequest.addParameters(Map.of(\"write_index_only\", \"true\"));\n+        putMappingRequest.setJsonEntity(\"{\\\"properties\\\":{\\\"thread\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"long\\\"}}}}}\");\n+        assertOK(client().performRequest(putMappingRequest));\n+\n+        // Update pipeline\n+        putPipelineRequest = new Request(\"PUT\", \"/_ingest/pipeline/mysql-error\");\n+        putPipelineRequest.setJsonEntity(\n+            \"{\\\"processors\\\":[{\\\"rename\\\":{\\\"field\\\":\\\"thread_id\\\",\\\"target_field\\\":\\\"thread.id\\\",\" + \"\\\"ignore_failure\\\":true}}]}\"\n+        );\n+        assertOK(client().performRequest(putPipelineRequest));\n+\n+        // Index more docs\n+        indexRequest = new Request(\"POST\", \"/logs-mysql-error/_doc\");\n+        indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"2020-12-12\\\",\\\"message\\\":\\\"abc\\\",\\\"thread_id\\\":24}\");\n+        assertOK(client().performRequest(indexRequest));\n+        indexRequest = new Request(\"POST\", \"/logs-mysql-error/_doc\");\n+        indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"2020-12-12\\\",\\\"message\\\":\\\"abc\\\",\\\"thread\\\":{\\\"id\\\":24}}\");\n+        assertOK(client().performRequest(indexRequest));\n+\n+        Request refreshRequest = new Request(\"POST\", \"/logs-mysql-error/_refresh\");\n+        assertOK(client().performRequest(refreshRequest));\n+\n+        verifyTotalHitCount(\"logs-mysql-error\", \"{\\\"query\\\":{\\\"match\\\":{\\\"thread.id\\\": 24}}}\", 2, \"thread.id\");\n+\n+        Request deleteDateStreamRequest = new Request(\"DELETE\", \"/_data_stream/logs-mysql-error\");\n+        assertOK(client().performRequest(deleteDateStreamRequest));\n+    }\n+\n+    public void testConflictingMappingUpgrade() throws Exception {\n+        // Create pipeline\n+        Request putPipelineRequest = new Request(\"PUT\", \"/_ingest/pipeline/mysql-error\");\n+        putPipelineRequest.setJsonEntity(\"{\\\"processors\\\":[]}\");\n+        assertOK(client().performRequest(putPipelineRequest));\n+\n+        // Create a template\n+        Request putComposableIndexTemplateRequest = new Request(\"POST\", \"/_index_template/mysql-error\");\n+        putComposableIndexTemplateRequest.setJsonEntity(\n+            \"{\"\n+                + \"\\\"index_patterns\\\":[\\\"logs-mysql-*\\\"],\"\n+                + \"\\\"priority\\\":200,\"\n+                + \"\\\"composed_of\\\":[\\\"logs-mappings\\\",\\\"logs-settings\\\"],\"\n+                + \"\\\"data_stream\\\":{},\"\n+                + \"\\\"template\\\":{\"\n+                + \"\\\"mappings\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"thread\\\":{\\\"type\\\":\\\"long\\\"}\"\n+                + \"}\"\n+                + \"},\"\n+                + \"\\\"settings\\\":{\"\n+                + \"\\\"index.default_pipeline\\\":\\\"mysql-error\\\"\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+        );\n+        assertOK(client().performRequest(putComposableIndexTemplateRequest));\n+\n+        // Create a data stream and index first doc\n+        Request indexRequest = new Request(\"POST\", \"/logs-mysql-error/_doc\");\n+        indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"2020-12-12\\\",\\\"message\\\":\\\"abc\\\",\\\"thread\\\":23}\");\n+        assertOK(client().performRequest(indexRequest));\n+\n+        // Update template\n+        putComposableIndexTemplateRequest = new Request(\"POST\", \"/_index_template/mysql-error\");\n+        putComposableIndexTemplateRequest.setJsonEntity(\n+            \"{\"\n+                + \"\\\"index_patterns\\\":[\\\"logs-mysql-*\\\"],\"\n+                + \"\\\"priority\\\":200,\"\n+                + \"\\\"composed_of\\\":[\\\"logs-mappings\\\",\\\"logs-settings\\\"],\"\n+                + \"\\\"data_stream\\\":{},\"\n+                + \"\\\"template\\\":{\"\n+                + \"\\\"mappings\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"thread\\\":{\"\n+                + \"\\\"properties\\\":{\"\n+                + \"\\\"id\\\":{\\\"type\\\":\\\"long\\\"}\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+                + \"},\"\n+                + \"\\\"settings\\\":{\"\n+                + \"\\\"index.default_pipeline\\\":\\\"mysql-error\\\"\"\n+                + \"}\"\n+                + \"}\"\n+                + \"}\"\n+        );\n+        assertOK(client().performRequest(putComposableIndexTemplateRequest));\n+\n+        // Update mapping\n+        Request putMappingRequest = new Request(\"PUT\", \"/logs-mysql-error/_mappings\");\n+        putMappingRequest.addParameters(Map.of(\"write_index_only\", \"true\"));\n+        putMappingRequest.setJsonEntity(\"{\\\"properties\\\":{\\\"thread\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"long\\\"}}}}}\");\n+        Exception e = expectThrows(ResponseException.class, () -> client().performRequest(putMappingRequest));\n+        assertThat(e.getMessage(), containsString(\"can't merge a non object mapping [thread] with an object mapping\"));\n+\n+        // Rollover\n+        Request rolloverRequest = new Request(\"POST\", \"/logs-mysql-error/_rollover\");\n+        assertOK(client().performRequest(rolloverRequest));\n+\n+        // Update pipeline", "originalCommit": "f0834faea67479b336f56a96461ae65b252959b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxMzU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61082#discussion_r469913563", "bodyText": "Good to know, I will mimic that behaviour in this test as well.", "author": "martijnvg", "createdAt": "2020-08-13T12:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDU1NQ=="}], "type": "inlineReview"}, {"oid": "4740359489984bb948ae41e87930d8bdef237957", "url": "https://github.com/elastic/elasticsearch/commit/4740359489984bb948ae41e87930d8bdef237957", "message": "Merge remote-tracking branch 'es/master' into new_indexing_strategy_upgrade_tests", "committedDate": "2020-08-18T09:51:37Z", "type": "commit"}, {"oid": "0e7f00f4fc04e2a965b35517981126a79f2ededf", "url": "https://github.com/elastic/elasticsearch/commit/0e7f00f4fc04e2a965b35517981126a79f2ededf", "message": "iter", "committedDate": "2020-08-18T11:52:39Z", "type": "commit"}]}