{"pr_number": 55015, "pr_title": "Handle v2 template with index.hidden setting", "pr_createdAt": "2020-04-09T15:24:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55015", "timeline": [{"oid": "321f74a60603382a88d5335bbcd17c0d318540aa", "url": "https://github.com/elastic/elasticsearch/commit/321f74a60603382a88d5335bbcd17c0d318540aa", "message": "Handle v2 template with index.hidden setting\n\nThis commit handles the case where the user request doesn't explicitly set\nthe index as hidden but a mathcing template has the `index.hidden` setting\nconfigured to true. In this case the global templates need to be excluded.", "committedDate": "2020-04-09T15:22:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5MzYzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r406293635", "bodyText": "#55010 guards against this when creating a v2 template", "author": "andreidan", "createdAt": "2020-04-09T15:36:07Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -663,6 +663,27 @@ public static String findV2Template(Metadata metadata, String indexName, @Nullab\n             return null;\n         }\n \n+        // this is complex but if the index is not hidden in the create request but is hidden as the result of template application,\n+        // then we need to exclude global templates\n+        if (isHidden == null) {\n+            final Optional<Map.Entry<IndexTemplateV2, String>> templateWithHiddenSetting = matchedTemplates.entrySet().stream()\n+                .filter(entry -> IndexMetadata.INDEX_HIDDEN_SETTING.exists(resolveSettings(metadata, entry.getValue()))).findFirst();\n+            if (templateWithHiddenSetting.isPresent()) {\n+                Map.Entry<IndexTemplateV2, String> indexTemplateV2ToNameEntry = templateWithHiddenSetting.get();\n+                final boolean templateIsHidden =\n+                    IndexMetadata.INDEX_HIDDEN_SETTING.get(resolveSettings(metadata, indexTemplateV2ToNameEntry.getValue()));\n+                if (templateIsHidden) {\n+                    // remove the global templates\n+                    matchedTemplates.keySet().removeIf(current -> current.indexPatterns().stream().anyMatch(Regex::isMatchAllPattern));\n+                }\n+                // validate that hidden didn't change\n+                if (matchedTemplates.containsKey(indexTemplateV2ToNameEntry.getKey()) == false) {\n+                    throw new IllegalStateException(\"A global index V2 template [\" + indexTemplateV2ToNameEntry.getValue() +\n+                        \"] defined the index hidden setting, which is not allowed\");", "originalCommit": "321f74a60603382a88d5335bbcd17c0d318540aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDU2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r406460569", "bodyText": "So this brings a question:\n\nShould we throw an error (the error below for validation) on index creation for a template that won't actually \"win\" for the creation?\n\nIf the answer is yes, then I think rather than returning only the first one, it would be good to return all templates (in the error message I mean) that exhibit this behavior.\nIf the answer is no, then we can move this check to be below the candidate sorting and only check the winner template.\nWhat do you think?", "author": "dakrone", "createdAt": "2020-04-09T20:32:52Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -663,6 +663,27 @@ public static String findV2Template(Metadata metadata, String indexName, @Nullab\n             return null;\n         }\n \n+        // this is complex but if the index is not hidden in the create request but is hidden as the result of template application,\n+        // then we need to exclude global templates\n+        if (isHidden == null) {\n+            final Optional<Map.Entry<IndexTemplateV2, String>> templateWithHiddenSetting = matchedTemplates.entrySet().stream()\n+                .filter(entry -> IndexMetadata.INDEX_HIDDEN_SETTING.exists(resolveSettings(metadata, entry.getValue()))).findFirst();", "originalCommit": "321f74a60603382a88d5335bbcd17c0d318540aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5ODA5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r406498095", "bodyText": "For me the answer is no and we should only be interested in winning template - index can became hidden only by the means of the winner, doesn't matter what is in other templates.\nSo I'd move the code after winner is selected.\nI'd also change sorting to linear min selection to avoid creating new list and sorting candidates that won't win:\nIndexTemplateV2 winner = matchedTemplates.keySet().stream().min(Comparator.comparing(IndexTemplateV2::priority,\n            Comparator.nullsLast(Comparator.reverseOrder()))).get();", "author": "probakowski", "createdAt": "2020-04-09T21:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwNjUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r407406522", "bodyText": "Great points. Thanks for bringing this up.\nI saw this validation as \"filter the invalid templates before we find the winner template\" (ie. the global templates should not even be considered when finding the winning template).\nThe other way around, as I understand it, applying this validation on the winner template would be a no-op (since we don't support inheritance anymore, so settings from the global templates cannot be applied) and would look something along the lines of:\n\nthe winning template is a global template - no index.hiddne property is allowed on the global templates - so just return it\nthe winning template is not a global one but it has an index.hidden setting set to true in the resolved settings, but the other templates have a lower priority so just return it\nthe winning template is not a global one and doesn't have index.hidden set, so just return it\n\nI do agree that having a lower priority (an explicit template) influence and remove a higher priority template (the global one - as illustrated in this test https://github.com/elastic/elasticsearch/pull/55015/files#diff-4e391d69e5a1fe53728ba9530499a6e8R552-R554) from the list of candidates might be (is) counter-intuitive so I think we either go along with this approach or, given the user has the option to override a global template using the priority, we could just issue a warning that a gloabl template is used as the matching one but that it is shadowing  explicit templates that try to configure the index as hidden (I do however think this would go unnoticed in the logs, so treating this as expected and dropping this complex use case would also be an option I think)", "author": "andreidan", "createdAt": "2020-04-13T09:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MzQwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r409663402", "bodyText": "Ok, we decided to validate only the winner in this particular case. Generally (together with #55010) we will be failing if the index.hidden setting is present in the resolved settings of a global template (regardless of the setting value).\nWith regards to this particular validation, if the winner is a global template we'll do a sanity check to make sure it doesn't include the index.hidden setting, in which case we'll fail, but otherwise we'll return it as the winner template.", "author": "andreidan", "createdAt": "2020-04-16T15:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjE2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r406502169", "bodyText": "This can be simplified to something like this:\nif (isHidden == null) {\n    matchedTemplates.entrySet().stream()\n        .filter(entry -> IndexMetadata.INDEX_HIDDEN_SETTING.get(resolveSettings(metadata, entry.getValue())))\n        // relies on the fact that default for INDEX_HIDDEN_SETTING is false\n        .findAny()\n        .ifPresent(indexTemplateV2ToNameEntry -> {\n            matchedTemplates.keySet().removeIf(current -> current.indexPatterns().stream().anyMatch(Regex::isMatchAllPattern));\n            if (matchedTemplates.containsKey(indexTemplateV2ToNameEntry.getKey()) == false) {\n                throw new IllegalStateException(\"A global index V2 template [\" + indexTemplateV2ToNameEntry.getValue() +\n                    \"] defined the index hidden setting, which is not allowed\");\n            }\n        });\n}", "author": "probakowski", "createdAt": "2020-04-09T22:00:55Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -663,6 +663,27 @@ public static String findV2Template(Metadata metadata, String indexName, @Nullab\n             return null;\n         }\n \n+        // this is complex but if the index is not hidden in the create request but is hidden as the result of template application,\n+        // then we need to exclude global templates\n+        if (isHidden == null) {", "originalCommit": "321f74a60603382a88d5335bbcd17c0d318540aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODE3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r406868177", "bodyText": "On the second iteration on this I think there's a problem (fixed by proposal above): we can have 2 templates one with INDEX_HIDDEN_SETTING=false (explicitly set) and one with INDEX_HIDDEN_SETTING=true, findFirst can pick up false one and skip the whole block despite the fact that there's still one template with true", "author": "probakowski", "createdAt": "2020-04-10T17:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjE2OQ=="}], "type": "inlineReview"}, {"oid": "9b54661a1b6363d63a8098bb83f6f50a928065d0", "url": "https://github.com/elastic/elasticsearch/commit/9b54661a1b6363d63a8098bb83f6f50a928065d0", "message": "Merge branch 'master' into itv2-null-isHidden-flag", "committedDate": "2020-04-16T13:30:08Z", "type": "commit"}, {"oid": "d7f2393714392a14f429e0a73e7ceefc341cb678", "url": "https://github.com/elastic/elasticsearch/commit/d7f2393714392a14f429e0a73e7ceefc341cb678", "message": "Validate the winner template when isHidden is null", "committedDate": "2020-04-16T15:47:21Z", "type": "commit"}, {"oid": "8239490d6670089c134cd4fc15d7b7a9385e141e", "url": "https://github.com/elastic/elasticsearch/commit/8239490d6670089c134cd4fc15d7b7a9385e141e", "message": "Check if winner is a global template", "committedDate": "2020-04-16T16:03:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwNzc0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r409707741", "bodyText": "\ud83d\udc4d", "author": "dakrone", "createdAt": "2020-04-16T16:56:00Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -268,7 +268,7 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n     }\n \n     /**\n-     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * Add the given index template to the cluster state. If {@code create} is true, an", "originalCommit": "8239490d6670089c134cd4fc15d7b7a9385e141e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwODMzOA==", "url": "https://github.com/elastic/elasticsearch/pull/55015#discussion_r409708338", "bodyText": "Super minor nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalStateException(\"A global index V2 template [\" + winnerName + \"], composed of component templates [\" +\n          \n          \n            \n                            throw new IllegalStateException(\"global index template [\" + winnerName + \"], composed of component templates [\" +", "author": "dakrone", "createdAt": "2020-04-16T16:56:58Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -696,7 +696,21 @@ public static String findV2Template(Metadata metadata, String indexName, @Nullab\n \n         assert candidates.size() > 0 : \"we should have returned early with no candidates\";\n         IndexTemplateV2 winner = candidates.get(0);\n-        return matchedTemplates.get(winner);\n+        String winnerName = matchedTemplates.get(winner);\n+\n+        // if the index is not hidden in the create request but the winner template is a global template that specifies the `index.hidden`\n+        // setting (which is not allowed, so it'd be due to a restored index cluster state that modified a component template used by this\n+        // global template such that it has this setting) we will fail and the user will have to update the index template and remove\n+        // this setting or update the corresponding component template that contributes to the index template resolved settings\n+        if (isHidden == null) {\n+            if (winner.indexPatterns().stream().anyMatch(Regex::isMatchAllPattern) &&\n+                IndexMetadata.INDEX_HIDDEN_SETTING.exists(resolveSettings(metadata, winnerName))) {\n+                throw new IllegalStateException(\"A global index V2 template [\" + winnerName + \"], composed of component templates [\" +", "originalCommit": "8239490d6670089c134cd4fc15d7b7a9385e141e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b11c6f297cf81075a1bca304c044522074ea6dda", "url": "https://github.com/elastic/elasticsearch/commit/b11c6f297cf81075a1bca304c044522074ea6dda", "message": "Update exception message\n\nCo-Authored-By: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-04-16T17:00:49Z", "type": "commit"}, {"oid": "5cb83b8a608fe2e5f13dd75a0f2f0609a3b6f4fe", "url": "https://github.com/elastic/elasticsearch/commit/5cb83b8a608fe2e5f13dd75a0f2f0609a3b6f4fe", "message": "Remve the isHidden flag null check", "committedDate": "2020-04-17T09:09:06Z", "type": "commit"}, {"oid": "66ba8016201e34f65f7b7706b1c349a07adf31ee", "url": "https://github.com/elastic/elasticsearch/commit/66ba8016201e34f65f7b7706b1c349a07adf31ee", "message": "Merge branch 'master' into itv2-null-isHidden-flag", "committedDate": "2020-04-17T09:20:48Z", "type": "commit"}, {"oid": "819c9cf23f961f7e8e22a388368bdffcd0fa789c", "url": "https://github.com/elastic/elasticsearch/commit/819c9cf23f961f7e8e22a388368bdffcd0fa789c", "message": "Merge branch 'master' into itv2-null-isHidden-flag", "committedDate": "2020-04-17T09:43:50Z", "type": "commit"}, {"oid": "5fc3fec1180d6494be67d0ae9547d902b63b67de", "url": "https://github.com/elastic/elasticsearch/commit/5fc3fec1180d6494be67d0ae9547d902b63b67de", "message": "Merge branch 'master' into itv2-null-isHidden-flag", "committedDate": "2020-04-17T12:32:43Z", "type": "commit"}]}