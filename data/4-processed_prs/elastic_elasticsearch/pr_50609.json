{"pr_number": 50609, "pr_title": "Support offset in composite aggs", "pr_createdAt": "2020-01-03T15:41:17Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50609", "timeline": [{"oid": "3032d62a9f23c7650f40090823f5e456094f0782", "url": "https://github.com/elastic/elasticsearch/commit/3032d62a9f23c7650f40090823f5e456094f0782", "message": "Support offset in composite aggs\n\nAdds support for the `offset` parameter to the `date_histogram` source\nof composite aggs. The `offset` parameter is supported by the normal\n`date_histogram` aggregation and is useful for folks that need to\nmeasure things from, say, 6am one day to 6am the next day.\n\nThis is implemented by creating a new `Rounding` that knows how to\nhandle offsets and delegates to other rounding implementations. That\nimplementation doesn't fully implement the `Rounding` contract, namely\n`nextRoundingValue`. That method isn't used by composite aggs so I can't\nbe sure that any implementation that I add will be correct. I propose to\nleave it throwing `UnsupportedOperationException` until I need it.\n\nCloses #48757", "committedDate": "2020-01-03T15:40:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362855221", "bodyText": "We don't actually serialize this Rounding but I believe I've got this bit right so I kept it. I'd like to move the other offset code over to this Rounding which means that we will eventually serialize it. At that point we'll get exhaustive tests for this code.", "author": "nik9000", "createdAt": "2020-01-03T15:43:09Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().before(Version.V_8_0_0)) {", "originalCommit": "3032d62a9f23c7650f40090823f5e456094f0782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362856101", "bodyText": "Modulo the version check which I discuss below.", "author": "nik9000", "createdAt": "2020-01-03T15:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTk2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362855966", "bodyText": "I think this is the way to do this, but it has been a long time. I want to land this change in master and 7.x, but these tests have no change of passing the bwc tests until I backport it.\nNow that I think about it, maybe this version check should be V_7_6_0 actually. Help!", "author": "nik9000", "createdAt": "2020-01-03T15:45:06Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/DateHistogramValuesSourceBuilder.java", "diffHunk": "@@ -80,12 +91,18 @@ protected DateHistogramValuesSourceBuilder(StreamInput in) throws IOException {\n         super(in);\n         dateHistogramInterval = new DateIntervalWrapper(in);\n         timeZone = in.readOptionalZoneId();\n+        if (in.getVersion().after(Version.V_8_0_0)) {", "originalCommit": "3032d62a9f23c7650f40090823f5e456094f0782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362874639", "bodyText": "The tests caught an error - this at least be onOrAfter but I'll switch it to V_7_6_0 while I'm there.", "author": "nik9000", "createdAt": "2020-01-03T16:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU4OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362856588", "bodyText": "I figured because the option is the same I should just include the docs from the normal date histogram.", "author": "nik9000", "createdAt": "2020-01-03T15:46:49Z", "path": "docs/reference/aggregations/bucket/composite-aggregation.asciidoc", "diffHunk": "@@ -287,6 +287,72 @@ Time zones may either be specified as an ISO 8601 UTC offset (e.g. `+01:00` or\n `-08:00`)  or as a timezone id, an identifier used in the TZ database like\n `America/Los_Angeles`.\n \n+*Offset*\n+\n+include::datehistogram-aggregation.asciidoc[tag=offset-explanation]", "originalCommit": "3032d62a9f23c7650f40090823f5e456094f0782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362911278", "bodyText": "\ud83d\udc4d", "author": "polyfractal", "createdAt": "2020-01-03T18:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU4OA=="}], "type": "inlineReview"}, {"oid": "b8f692ec7df6f769fac0111e6fa7dee80485d630", "url": "https://github.com/elastic/elasticsearch/commit/b8f692ec7df6f769fac0111e6fa7dee80485d630", "message": "version checks", "committedDate": "2020-01-03T16:47:00Z", "type": "commit"}, {"oid": "95da5cb0db5008174298d6ff3980246b2426f209", "url": "https://github.com/elastic/elasticsearch/commit/95da5cb0db5008174298d6ff3980246b2426f209", "message": "use 8.0.0", "committedDate": "2020-01-03T18:08:39Z", "type": "commit"}, {"oid": "e7eea38b250a21ac61498c07c2b1399efbd239a7", "url": "https://github.com/elastic/elasticsearch/commit/e7eea38b250a21ac61498c07c2b1399efbd239a7", "message": "Revert \"use 8.0.0\"\n\nThis reverts commit 95da5cb0db5008174298d6ff3980246b2426f209.", "committedDate": "2020-01-03T18:11:53Z", "type": "commit"}, {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "url": "https://github.com/elastic/elasticsearch/commit/393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "message": "Disable bwc tests", "committedDate": "2020-01-03T18:15:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362919839", "bodyText": "Is the intention to migrate the existing users of offsets (regular date histo agg, etc) over to this wrapper?  E.g. it seems a bit heavyweight to create a whole new rounding, but if the idea is to followup with changes to the existing users of offset (rather than baking the logic into the aggs) it makes sense to me.", "author": "polyfractal", "createdAt": "2020-01-03T18:52:00Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {", "originalCommit": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDIwMw==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920203", "bodyText": "Also, we should probably add a javadoc explaining why/when to use this class", "author": "polyfractal", "createdAt": "2020-01-03T18:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMTI1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362931253", "bodyText": "Yeah, I did intend to migrate the rest over of the uses of offset over to it.\nI added javadoc on the public interface to the class which is what the rest of the classes in this file do. Do you think I should duplicate it onto this one? Or add something maybe?", "author": "nik9000", "createdAt": "2020-01-03T19:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0MDQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362940441", "bodyText": "Ah, missed that it was documented on the public method.  Since the rest of the class does it that way, fine with me :)\nThanks for the explanation!", "author": "polyfractal", "createdAt": "2020-01-03T19:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920068", "bodyText": "maybe read/write ZLong instead?  I suspect offsets will be small-to-medium'ish sized and either positive or negative, so zlong might be a win?", "author": "polyfractal", "createdAt": "2020-01-03T18:52:44Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();", "originalCommit": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMTQxMg==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362931412", "bodyText": "In other places offsets are written as long and I just copied it. But I'd be fine with zlong.", "author": "nik9000", "createdAt": "2020-01-03T19:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NDg0NA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362954844", "bodyText": "Pushed the switch to zlong.", "author": "nik9000", "createdAt": "2020-01-03T20:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDU1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920555", "bodyText": "\ud83d\ude4f for the cleanup here :)", "author": "polyfractal", "createdAt": "2020-01-03T18:54:14Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().onOrAfter(Version.V_7_6_0)) {\n+                throw new IllegalArgumentException(\"Offset rounding not supported before 8.0.0\");\n+            }\n+            delegate.writeTo(out);\n+            out.writeLong(offset);\n+        }\n+\n+        @Override\n+        public byte id() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public long round(long value) {\n+            return delegate.round(value - offset) + offset;\n+        }\n+\n+        @Override\n+        public long nextRoundingValue(long value) {\n+            // This isn't needed by the current users. We'll implement it when we migrate other users to it.\n+            throw new UnsupportedOperationException(\"not yet supported\");\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(delegate, offset);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            OffsetRounding other = (OffsetRounding) obj;\n+            return delegate.equals(other.delegate) && offset == other.offset;\n+        }\n+    }\n+\n     public static Rounding read(StreamInput in) throws IOException {\n-        Rounding rounding;\n         byte id = in.readByte();\n         switch (id) {\n             case TimeUnitRounding.ID:\n-                rounding = new TimeUnitRounding(in);\n-                break;\n+                return new TimeUnitRounding(in);", "originalCommit": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMTQ5MA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362931490", "bodyText": "I'm not sure everyone would consider that cleaner, but I sure do!", "author": "nik9000", "createdAt": "2020-01-03T19:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzczNA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362923734", "bodyText": "Hmm, do you know if we have any serialization tests for Rounding?  I was looking to see if we test that the id() bytes are correct and don't accidentally change (similar to what we do with AbstractWriteableEnumTestCase enum tests)... but couldn't find any serialization tests at all.\nIf we have them somewhere, let's add a test for the id byte.  If not, probably too much to add to this PR but we should file a ticket so we don't forget to add some tests... makes me uneasy that such a widespread class doesn't have serialization tests :)", "author": "polyfractal", "createdAt": "2020-01-03T19:03:49Z", "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -195,6 +195,16 @@ public void testTimeUnitRoundingDST() {\n         assertThat(tzRounding_chg.round(time(\"2014-11-02T06:01:01\", chg)), isDate(time(\"2014-11-02T06:00:00\", chg), chg));\n     }\n ", "originalCommit": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMTkxMA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362931910", "bodyText": "I believe we end up testing serialization as part of testing things like extended bounds bucket response. Adding a unit test for just this class's serialization makes sense to me though. I figured I'd wait until I used it in a context where we serialized it but since I'm writing the serialization code now I probably ought to write the test now.", "author": "nik9000", "createdAt": "2020-01-03T19:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NDkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362954933", "bodyText": "I pushed a wire test case.", "author": "nik9000", "createdAt": "2020-01-03T20:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362923955", "bodyText": "Let's add another test that does negative offsets too?", "author": "polyfractal", "createdAt": "2020-01-03T19:04:29Z", "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -195,6 +195,16 @@ public void testTimeUnitRoundingDST() {\n         assertThat(tzRounding_chg.round(time(\"2014-11-02T06:01:01\", chg)), isDate(time(\"2014-11-02T06:00:00\", chg), chg));\n     }\n \n+    public void testOffsetRounding() {", "originalCommit": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMTk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362931958", "bodyText": "Sure!", "author": "nik9000", "createdAt": "2020-01-03T19:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NTEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362955101", "bodyText": "I pushed a test with negative offsets.", "author": "nik9000", "createdAt": "2020-01-03T20:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzk1NQ=="}], "type": "inlineReview"}, {"oid": "14de4c85993d581ccad7a82fd4ac83237ff88014", "url": "https://github.com/elastic/elasticsearch/commit/14de4c85993d581ccad7a82fd4ac83237ff88014", "message": "Merge branch 'master' into composite_date_offset", "committedDate": "2020-01-03T19:43:00Z", "type": "commit"}, {"oid": "b271143d03877df8c95381abc8f43f5656f091e1", "url": "https://github.com/elastic/elasticsearch/commit/b271143d03877df8c95381abc8f43f5656f091e1", "message": "Rework public interface and add wire tests\n\nThe serialization was subtly wrong, particularly in the Eire time zone.", "committedDate": "2020-01-03T20:40:36Z", "type": "commit"}, {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c", "url": "https://github.com/elastic/elasticsearch/commit/08fc2672277730ed1bef85db450f61dbf3b6b70c", "message": "zlong", "committedDate": "2020-01-03T20:42:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NTk4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362955989", "bodyText": "I'll revert this change. It snuck in because I thought the comparison was wrong.", "author": "nik9000", "createdAt": "2020-01-03T20:47:30Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -418,24 +434,16 @@ public boolean equals(Object obj) {\n                 return false;\n             }\n             TimeUnitRounding other = (TimeUnitRounding) obj;\n-            return Objects.equals(unit, other.unit) && Objects.equals(timeZone, other.timeZone);\n+            return unit == other.unit && timeZone.equals(other.timeZone);", "originalCommit": "08fc2672277730ed1bef85db450f61dbf3b6b70c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2113c0ebd9c4c750fb760bae1144838e89b3ce81", "url": "https://github.com/elastic/elasticsearch/commit/2113c0ebd9c4c750fb760bae1144838e89b3ce81", "message": "Revert equals", "committedDate": "2020-01-03T20:48:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NjQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362956478", "bodyText": "The toString implementations weren't consistent which made reading the error messages hard. So I changed them.", "author": "nik9000", "createdAt": "2020-01-03T20:49:18Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -552,23 +560,88 @@ public boolean equals(Object obj) {\n                 return false;\n             }\n             TimeIntervalRounding other = (TimeIntervalRounding) obj;\n-            return Objects.equals(interval, other.interval) && Objects.equals(timeZone, other.timeZone);\n+            return interval == other.interval && timeZone.equals(other.timeZone);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";", "originalCommit": "08fc2672277730ed1bef85db450f61dbf3b6b70c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2256e203c411a11cedddb7b27f37dd26122c570", "url": "https://github.com/elastic/elasticsearch/commit/c2256e203c411a11cedddb7b27f37dd26122c570", "message": "Fix up test case\n\nLooks like I never ran it!", "committedDate": "2020-01-03T21:52:26Z", "type": "commit"}, {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448", "url": "https://github.com/elastic/elasticsearch/commit/54f53edcd9b13ed659408d432b77a50eb7bbf448", "message": "Disable some more bwc tests for the backport", "committedDate": "2020-01-05T21:46:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNjQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363806458", "bodyText": "I'm a nervous nellie... would it be possible to explicitly test the \"short\" deprecated TZs from DateUtils, just to make sure we aren't breaking them?", "author": "polyfractal", "createdAt": "2020-01-07T15:35:15Z", "path": "server/src/test/java/org/elasticsearch/common/RoundingWireTests.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common;\n+\n+import org.elasticsearch.common.Rounding.DateTimeUnit;\n+import org.elasticsearch.common.io.stream.Writeable.Reader;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+public class RoundingWireTests extends AbstractWireSerializingTestCase<Rounding> {", "originalCommit": "54f53edcd9b13ed659408d432b77a50eb7bbf448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0Nzc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363847761", "bodyText": "So I'm not 100% sure I can or should. Like, I can write a test that uses one of the short IDs, but I'm not super familiar with how to use them properly. The randomized testing doesn't like to generate them, presumably because they don't work on all jvms. I know one of them didn't work for me locally.\nThe class itself only takes ZoneId, not string. So it'd be fairly difficult to get one of those deprecated zone ids into it.", "author": "nik9000", "createdAt": "2020-01-07T16:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNjQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5OTQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363899431", "bodyText": "Ah, I see.  And tracing backwards, DateHisto parses the input string with ZoneId.of() which should reject these deprecated short IDs as well.\nAnd the only other potential problem area is Rollup (which stored some short TZs before the javatime switch), but we have an alias lookup map for that use-case.\nRighto, carry on \ud83d\udc4d", "author": "polyfractal", "createdAt": "2020-01-07T18:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNjQ1OA=="}], "type": "inlineReview"}, {"oid": "9d3c3547a9efb39b3a8bc738fec6a072acb5bbd2", "url": "https://github.com/elastic/elasticsearch/commit/9d3c3547a9efb39b3a8bc738fec6a072acb5bbd2", "message": "Merge branch 'master' into composite_date_offset", "committedDate": "2020-01-07T16:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MzgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363193815", "bodyText": "Let's use the new format, this option should be removed soon.", "author": "jimczi", "createdAt": "2020-01-06T08:16:37Z", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml", "diffHunk": "@@ -367,6 +367,40 @@ setup:\n   - match: { aggregations.test.buckets.0.key.date: \"2017-10-21\" }\n   - match: { aggregations.test.buckets.0.doc_count: 1 }\n \n+---\n+\"Composite aggregation with date_histogram offset\":\n+  - skip:\n+      version: \" - 7.99.99\" # after BWC merged revert to 7.5.99\n+      reason:  offset introduced in 8.0.0\n+\n+  - do:\n+      search:\n+        rest_total_hits_as_int: true", "originalCommit": "54f53edcd9b13ed659408d432b77a50eb7bbf448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NjgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363896820", "bodyText": "Sure!", "author": "nik9000", "createdAt": "2020-01-07T18:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MzgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MTU3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363891576", "bodyText": "should the message be before 7.6.0 ?", "author": "jimczi", "createdAt": "2020-01-07T18:40:16Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -554,21 +562,86 @@ public boolean equals(Object obj) {\n             TimeIntervalRounding other = (TimeIntervalRounding) obj;\n             return Objects.equals(interval, other.interval) && Objects.equals(timeZone, other.timeZone);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";\n+        }\n+    }\n+\n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            // Versions before 7.6.0 will never send this type of rounding.\n+            delegate = Rounding.read(in);\n+            offset = in.readZLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().before(Version.V_7_6_0)) {\n+                throw new IllegalArgumentException(\"Offset rounding not supported before 8.0.0\");", "originalCommit": "54f53edcd9b13ed659408d432b77a50eb7bbf448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5Njg5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363896893", "bodyText": "Yeah. I'll fix it.", "author": "nik9000", "createdAt": "2020-01-07T18:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MTU3Ng=="}], "type": "inlineReview"}, {"oid": "fc77e34b7d70f93761320f04a9f74dfacad8f766", "url": "https://github.com/elastic/elasticsearch/commit/fc77e34b7d70f93761320f04a9f74dfacad8f766", "message": "Fix from review", "committedDate": "2020-01-07T18:57:04Z", "type": "commit"}]}