{"pr_number": 55084, "pr_title": "EQL: Add number function", "pr_createdAt": "2020-04-10T19:02:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55084", "timeline": [{"oid": "8309b8f325ff491fa1bf1d370787a3a823e5bf80", "url": "https://github.com/elastic/elasticsearch/commit/8309b8f325ff491fa1bf1d370787a3a823e5bf80", "message": "EQL: Add number function", "committedDate": "2020-04-10T18:52:38Z", "type": "commit"}, {"oid": "4b698eb9f9922199069b89168ece053edab8602e", "url": "https://github.com/elastic/elasticsearch/commit/4b698eb9f9922199069b89168ece053edab8602e", "message": "EQL: Fix the locale used for number for deterministic functionality", "committedDate": "2020-04-10T18:58:41Z", "type": "commit"}, {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704", "url": "https://github.com/elastic/elasticsearch/commit/750f6bb9c678ebb9269b213d3cb0527933502704", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function", "committedDate": "2020-04-10T19:26:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698010", "bodyText": "Use the same name for the first argument as in ToNumber.java (value instead of source).", "author": "astefan", "createdAt": "2020-04-15T09:15:38Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODU0NA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698544", "bodyText": "Did you forget the base here?", "author": "astefan", "createdAt": "2020-04-15T09:16:35Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODczMg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698732", "bodyText": "base?", "author": "astefan", "createdAt": "2020-04-15T09:16:52Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        if (newSource == source) {\n+            return this;\n+        }\n+        return replaceChildren(Collections.singletonList(newSource));\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery();", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODg0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698842", "bodyText": "base?\nAnd the rest of the class.", "author": "astefan", "createdAt": "2020-04-15T09:17:04Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        if (newSource == source) {\n+            return this;\n+        }\n+        return replaceChildren(Collections.singletonList(newSource));\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery();\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        return source.resolved();", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDA0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408700045", "bodyText": "I think we should add a new FunctionDefinition[] array for math/numerical functions.", "author": "astefan", "createdAt": "2020-04-15T09:19:07Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,6 +38,7 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(ToNumber.class, ToNumber::new, \"number\"),", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MDM0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409870347", "bodyText": "agreed. @aleksmaus has one in his PR. I wasn't sure if this was math or still string, since it's parsing from strings", "author": "rw-access", "createdAt": "2020-04-16T21:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDYwNg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408700606", "bodyText": "You forgot base.", "author": "astefan", "createdAt": "2020-04-15T09:20:07Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDMyMw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409894323", "bodyText": "867e122", "author": "rw-access", "createdAt": "2020-04-16T22:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTE4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408701186", "bodyText": "Use value instead of source to have a consistent naming throughout the function classes.", "author": "astefan", "createdAt": "2020-04-15T09:21:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDA0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409894040", "bodyText": "86c9949", "author": "rw-access", "createdAt": "2020-04-16T22:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408701826", "bodyText": "When can source be a Number? Shouldn't always be a String?\nIn the function definition you also added the isStringAndExact restriction....", "author": "astefan", "createdAt": "2020-04-15T09:22:12Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MjAxMw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409872013", "bodyText": "No idea if it's possible, but I can remove this special run-time only handling", "author": "rw-access", "createdAt": "2020-04-16T21:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408702537", "bodyText": "What if the source string is   0x? (leading whitespaces)\nHow does the EQL Endpoint work in this case?", "author": "astefan", "createdAt": "2020-04-15T09:23:15Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MjczNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409872735", "bodyText": ">>> print(eql.parse_expression(\"number('0x')\"))\nTraceback (most recent call last):\n...\nValueError: invalid literal for int() with base 16: ''", "author": "rw-access", "createdAt": "2020-04-16T21:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408703104", "bodyText": "instanceof Number doesn't match the error message, which talks about an integer.", "author": "astefan", "createdAt": "2020-04-15T09:24:08Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwNzg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408707875", "bodyText": "Here I would prefer to see in the error message the original base. If that is null because the user didn't provide one, then print radix.", "author": "astefan", "createdAt": "2020-04-15T09:32:12Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708122", "bodyText": "How are the EQL endpoints dealing with locale?", "author": "astefan", "createdAt": "2020-04-15T09:32:39Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5ODM4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409898387", "bodyText": "Removed locale handling in 4b698eb.\nNow the format is effectively consistent with [0-9]+(\\.[0-9]+)?", "author": "rw-access", "createdAt": "2020-04-16T23:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODU5MA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708590", "bodyText": "base missing.", "author": "astefan", "createdAt": "2020-04-15T09:33:29Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);\n+        }\n+\n+    }\n+\n+    protected Processor source() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        ToNumberFunctionProcessor other = (ToNumberFunctionProcessor) obj;\n+        return Objects.equals(source(), other.source());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODcxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708715", "bodyText": "base missing.", "author": "astefan", "createdAt": "2020-04-15T09:33:39Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);\n+        }\n+\n+    }\n+\n+    protected Processor source() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MzQ3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r409893473", "bodyText": "fixed in 867e122", "author": "rw-access", "createdAt": "2020-04-16T22:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzY1NA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408717654", "bodyText": "Can you add more tests here, please?\nThe way I see it, there are tests (just one) for no argument number function and for base 16. How about base 2, explicit base 10, and custom bases?", "author": "astefan", "createdAt": "2020-04-15T09:48:22Z", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -849,24 +849,8 @@ process where modulo(11, add(serial_event_id, 1)) == serial_event_id'''\n expected_event_ids  = [1, 2, 3, 5, 11]\n description = \"test built-in math functions\"\n \n-[[queries]]", "originalCommit": "750f6bb9c678ebb9269b213d3cb0527933502704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjQ5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413036491", "bodyText": "I would still like to see here more tests.", "author": "astefan", "createdAt": "2020-04-22T14:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMTc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413301751", "bodyText": "Added tests for the processor, and added integration tests here\n867fc01", "author": "rw-access", "createdAt": "2020-04-22T20:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzY1NA=="}], "type": "inlineReview"}, {"oid": "82e8076d5d7ba89ea1e53c5290c15bdb5392b9da", "url": "https://github.com/elastic/elasticsearch/commit/82e8076d5d7ba89ea1e53c5290c15bdb5392b9da", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function", "committedDate": "2020-04-16T15:56:04Z", "type": "commit"}, {"oid": "ea3d9491c50dc49eb12c1136c0da4e64428fbcd3", "url": "https://github.com/elastic/elasticsearch/commit/ea3d9491c50dc49eb12c1136c0da4e64428fbcd3", "message": "EQL: Add more ToNumber tests", "committedDate": "2020-04-16T18:37:56Z", "type": "commit"}, {"oid": "20aa77fba1f7fba820ee16502956cbe21e73cf1f", "url": "https://github.com/elastic/elasticsearch/commit/20aa77fba1f7fba820ee16502956cbe21e73cf1f", "message": "EQL: Add more number ToNumberProcessor unit tests", "committedDate": "2020-04-16T22:06:32Z", "type": "commit"}, {"oid": "867e122d094da2ba0c68231a352ee225acfc460c", "url": "https://github.com/elastic/elasticsearch/commit/867e122d094da2ba0c68231a352ee225acfc460c", "message": "EQL: Remove unnecessary overrides, fix processor methods", "committedDate": "2020-04-16T22:33:20Z", "type": "commit"}, {"oid": "e2321d845c357e62b83ffc57b9cacca89231facd", "url": "https://github.com/elastic/elasticsearch/commit/e2321d845c357e62b83ffc57b9cacca89231facd", "message": "EQL: Remove additional unnecessary overrides", "committedDate": "2020-04-16T22:45:37Z", "type": "commit"}, {"oid": "a123c7d0886ae794dd26a401c00e1202158dddd6", "url": "https://github.com/elastic/elasticsearch/commit/a123c7d0886ae794dd26a401c00e1202158dddd6", "message": "EQL: Lint fixes for ToNumber", "committedDate": "2020-04-16T22:47:18Z", "type": "commit"}, {"oid": "86c9949375d04ee8a3f6783995a9f32548baab7d", "url": "https://github.com/elastic/elasticsearch/commit/86c9949375d04ee8a3f6783995a9f32548baab7d", "message": "EQL: ToNumber renames from PR feedback", "committedDate": "2020-04-16T22:51:38Z", "type": "commit"}, {"oid": "c1dac67508fedaf845da2d3feb08a26268e5b83a", "url": "https://github.com/elastic/elasticsearch/commit/c1dac67508fedaf845da2d3feb08a26268e5b83a", "message": "EQL: Remove NumberFormat locale handling", "committedDate": "2020-04-16T23:20:01Z", "type": "commit"}, {"oid": "22ec36d8e7c1b0c0bdf8ec07c506cf9ca59a79a1", "url": "https://github.com/elastic/elasticsearch/commit/22ec36d8e7c1b0c0bdf8ec07c506cf9ca59a79a1", "message": "EQL: Removed NumberFormat from ToNumber", "committedDate": "2020-04-16T23:40:40Z", "type": "commit"}, {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "url": "https://github.com/elastic/elasticsearch/commit/0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "message": "Merge branch 'master' into eql/number-function", "committedDate": "2020-04-21T20:32:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyODg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413028878", "bodyText": "Change the src parameter name to match the one of the internal variable - value.", "author": "astefan", "createdAt": "2020-04-22T14:24:46Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMTg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413031866", "bodyText": "Same here: change src to value to have a consistent naming.", "author": "astefan", "createdAt": "2020-04-22T14:28:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe value, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413036049", "bodyText": "I believe we should add a new package for the numeric/math functions. At the moment this is ...function.scalar.string. ES SQL has .math. Probably worth doing the same here. Add a package ...function.scalar.math.", "author": "astefan", "createdAt": "2020-04-22T14:32:59Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzODQwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413038401", "bodyText": "I think here you are missing the base.", "author": "astefan", "createdAt": "2020-04-22T14:35:51Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {\n+        super(source, Arrays.asList(src, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = src;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s)\"),\n+                \"number\",\n+                valueScript.template()),", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzODY3OA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413038678", "bodyText": "This should be a two parameters function, no?", "author": "astefan", "createdAt": "2020-04-22T14:36:08Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {\n+        super(source, Arrays.asList(src, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = src;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s)\"),", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0MTk3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413041979", "bodyText": "Extra unnecessary empty line.", "author": "astefan", "createdAt": "2020-04-22T14:40:05Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberProcessorTests.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+\n+public class ToNumberProcessorTests extends ESTestCase {\n+\n+    private static Object process(Object value, Object base) {\n+        return new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null);\n+    }\n+", "originalCommit": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5NDU3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413294579", "bodyText": "removed in 1b0ac6f", "author": "rw-access", "createdAt": "2020-04-22T20:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0MTk3OQ=="}], "type": "inlineReview"}, {"oid": "5e23e9a17fc16be79bf93bfef482e24a5892e9b1", "url": "https://github.com/elastic/elasticsearch/commit/5e23e9a17fc16be79bf93bfef482e24a5892e9b1", "message": "EQL: Add number function tests", "committedDate": "2020-04-22T19:57:57Z", "type": "commit"}, {"oid": "1b0ac6f4aa3dcfea7e3ebec5d8e1d995e105e931", "url": "https://github.com/elastic/elasticsearch/commit/1b0ac6f4aa3dcfea7e3ebec5d8e1d995e105e931", "message": "EQL: ToNumberProcessorTests formatting", "committedDate": "2020-04-22T20:10:48Z", "type": "commit"}, {"oid": "867fc01a7fc39285c118792283e3457e4e1c85b3", "url": "https://github.com/elastic/elasticsearch/commit/867fc01a7fc39285c118792283e3457e4e1c85b3", "message": "EQL: Remove newline in ToNumberProcessorTests", "committedDate": "2020-04-22T20:12:30Z", "type": "commit"}, {"oid": "33e2ffa7b6cac74ea437075076f79909d5e95115", "url": "https://github.com/elastic/elasticsearch/commit/33e2ffa7b6cac74ea437075076f79909d5e95115", "message": "EQL: Add number(..., null) test", "committedDate": "2020-04-22T21:04:41Z", "type": "commit"}, {"oid": "b49ea23970b774a2d015cb7ef9b87c75260a221f", "url": "https://github.com/elastic/elasticsearch/commit/b49ea23970b774a2d015cb7ef9b87c75260a221f", "message": "Merge branch 'master' into eql/number-function", "committedDate": "2020-05-05T20:06:01Z", "type": "commit"}, {"oid": "a6501b4b66bc75f8e95c96f79010c7e072553f81", "url": "https://github.com/elastic/elasticsearch/commit/a6501b4b66bc75f8e95c96f79010c7e072553f81", "message": "Create expression.function.scalar.math package", "committedDate": "2020-05-05T20:46:53Z", "type": "commit"}, {"oid": "1ae345c4265b903097fe95af0af1bcb886389927", "url": "https://github.com/elastic/elasticsearch/commit/1ae345c4265b903097fe95af0af1bcb886389927", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function", "committedDate": "2020-05-05T21:58:15Z", "type": "commit"}, {"oid": "326328df936632ca0140a52c675cb224e2542ae1", "url": "https://github.com/elastic/elasticsearch/commit/326328df936632ca0140a52c675cb224e2542ae1", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function", "committedDate": "2020-05-08T17:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTEzNg==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424309136", "bodyText": "nitpick: please, remove the whitespace between the Painless script parameters: {eql}.%s(%s,%s)", "author": "astefan", "createdAt": "2020-05-13T09:42:22Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumber.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.math.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression value, Expression base) {\n+        super(source, Arrays.asList(value, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = value;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s, %s)\"),", "originalCommit": "326328df936632ca0140a52c675cb224e2542ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MzY4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424493686", "bodyText": "fixed in 2ef2ce4", "author": "rw-access", "createdAt": "2020-05-13T14:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4NjU1NA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424386554", "bodyText": "assertNull(process(123, null)) is missing.", "author": "astefan", "createdAt": "2020-05-13T12:10:27Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberProcessorTests.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+\n+public class ToNumberProcessorTests extends ESTestCase {\n+\n+    private static Object process(Object value, Object base) {\n+        return new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null);\n+    }\n+\n+    private static String error(Object value, Object base) {\n+        QlIllegalArgumentException saie = expectThrows(QlIllegalArgumentException.class,\n+            () -> new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null));\n+        return saie.getMessage();\n+    }\n+\n+    public void toNumberWithPositiveInteger() {\n+        int number = randomIntBetween(0, 1000);\n+\n+        assertEquals(number, process(Integer.toString(number), null));\n+        assertEquals(number, process(\"0x\" + Integer.toHexString(number), null));\n+\n+        assertEquals(number, process(Integer.toString(number), 10));\n+        assertEquals(number, process(Integer.toOctalString(number), 8));\n+        assertEquals(number, process(Integer.toHexString(number), 16));\n+        assertEquals(number, process(\"0x\" + Integer.toHexString(number), 16));\n+    }\n+\n+    public void toNumberWithNegativeInteger() {\n+        int posInt = randomIntBetween(1, 1000);\n+        int negInt = -posInt;\n+\n+        assertEquals(negInt, process(Integer.toString(negInt), null));\n+\n+        assertEquals(negInt, process(Integer.toString(negInt), 10));\n+        assertEquals(negInt, process(\"-\" + Integer.toOctalString(posInt), 8));\n+        assertEquals(negInt, process(\"-\" + Integer.toHexString(posInt), 16));\n+\n+        assertEquals(negInt, process(\"-0x\" + Integer.toHexString(posInt), 16));\n+    }\n+\n+    public void toNumberWithPositiveFloat() {\n+        double number = randomDoubleBetween(0.0, 1000.0, true);\n+\n+        assertEquals(number, process(Double.toString(number), null));\n+        assertEquals(number, process(Double.toString(number), 10));\n+    }\n+\n+    public void toNumberWithNegativeFloat() {\n+        double number = randomDoubleBetween(-1000.0, -0.1, true);\n+\n+        assertEquals(number, process(Double.toString(number), null));\n+        assertEquals(number, process(Double.toString(number), 10));\n+    }\n+\n+    public void toNumberWithMissingInput() {\n+        assertNull(process(null, null));\n+        assertNull(process(null, 8));\n+        assertNull(process(null, 10));\n+        assertNull(process(null, 16));", "originalCommit": "326328df936632ca0140a52c675cb224e2542ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MjYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424492630", "bodyText": "ah. that's because if the base is null, then the base will be autodetected.\nI don't know if there's a way to mention that the parameter was not supplied vs it was evaluated as false. I believe substring() and a few other functions have similar behavior", "author": "rw-access", "createdAt": "2020-05-13T14:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4NjU1NA=="}], "type": "inlineReview"}, {"oid": "faa3fe5a7bc5adec96ae152024ba1e70c858ae4f", "url": "https://github.com/elastic/elasticsearch/commit/faa3fe5a7bc5adec96ae152024ba1e70c858ae4f", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function", "committedDate": "2020-05-13T14:36:59Z", "type": "commit"}, {"oid": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "url": "https://github.com/elastic/elasticsearch/commit/2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "message": "EQL: Remove painless whitespace for ToNumber.asScript", "committedDate": "2020-05-13T14:42:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjY4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424636689", "bodyText": "just curious, why Integer? should we use Long as a base type? Long.valueOf()?", "author": "aleksmaus", "createdAt": "2020-05-13T18:13:59Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+        out.writeNamedWriteable(base);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    private static Number parseDecimal(String source) {\n+        try {\n+            return Integer.valueOf(source);", "originalCommit": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424672131", "bodyText": "thank you! good catch, I'll update this", "author": "rw-access", "createdAt": "2020-05-13T19:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzM1MA==", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424637350", "bodyText": "same question here as above about Long vs Integer", "author": "aleksmaus", "createdAt": "2020-05-13T18:15:08Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+        out.writeNamedWriteable(base);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    private static Number parseDecimal(String source) {\n+        try {\n+            return Integer.valueOf(source);\n+        } catch (NumberFormatException e) {\n+            return Double.valueOf(source);\n+        }\n+    }\n+\n+    public static Object doProcess(Object value, Object base) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (!(value instanceof String || value instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", value);\n+        }\n+\n+        boolean detectedHexPrefix = value.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Integer == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", base);\n+        }\n+\n+        int radix = (Integer) base;\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            value = value.toString().substring(2);\n+        }\n+\n+        try {\n+            if (radix == 10) {\n+                return parseDecimal(value.toString());\n+            } else {\n+                return Integer.parseInt(value.toString(), radix);", "originalCommit": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2e90233ae6963ca8ad0e45b2085aa10d087dbf8", "url": "https://github.com/elastic/elasticsearch/commit/c2e90233ae6963ca8ad0e45b2085aa10d087dbf8", "message": "EQL: Add Long support", "committedDate": "2020-05-13T19:21:14Z", "type": "commit"}]}