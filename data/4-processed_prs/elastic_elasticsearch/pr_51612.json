{"pr_number": 51612, "pr_title": "Log exceptions in TcpTransport at DEBUG level", "pr_createdAt": "2020-01-29T13:06:23Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51612", "timeline": [{"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9", "url": "https://github.com/elastic/elasticsearch/commit/6ec90e5c87ca751236898ba3ff96d49fd722c0f9", "message": "Log exceptions in TcpTransport at DEBUG level\n\nWhen running Elasticsearch on a flaky network, we may see nodes leaving the\ncluster with reason `disconnected`. It may be useful to the cluster\nadministrator to see the full exception that caused the disconnection, but this\nis only available with `TRACE` level logging which commingles the details of\nthe problem with other messages that are not useful to end users.\n\nThis commit promotes logging of exceptions in `TcpTransport` from `TRACE` to\n`DEBUG` to separate them from the truly `TRACE`-level messages.", "committedDate": "2020-01-29T13:03:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/51612#discussion_r372371760", "bodyText": "NIT: Maybe use org.elasticsearch.threadpool.ThreadPool#terminate(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit) here so we don't get the leaked thread warning when running this one?", "author": "original-brownbear", "createdAt": "2020-01-29T13:09:27Z", "path": "server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java", "diffHunk": "@@ -354,4 +366,101 @@ public void testHTTPResponse() throws IOException {\n                     \"(not HTTP port) of a remote node is specified in the configuration\", ex.getMessage());\n         }\n     }\n+\n+    @TestLogging(reason = \"testing logging\", value = \"org.elasticsearch.transport.TcpTransport:DEBUG\")\n+    public void testExceptionHandling() throws IOException, IllegalAccessException {\n+        testExceptionHandling(false, new ElasticsearchException(\"simulated\"), true,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new ElasticsearchException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"exception caught on transport layer [*], closing connection\"));\n+        testExceptionHandling(new ClosedChannelException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new ElasticsearchException(\"Connection reset\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new BindException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"bind exception caught on transport layer [*]\"));\n+        testExceptionHandling(new CancelledKeyException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"cancelled key exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(\"test\"), false,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new StreamCorruptedException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"simulated, [*], closing connection\"));\n+    }\n+\n+    private void testExceptionHandling(Exception exception,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        testExceptionHandling(true, exception, true, expectations);\n+    }\n+\n+    private void testExceptionHandling(boolean startTransport, Exception exception, boolean expectClosed,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        final TestThreadPool testThreadPool = new TestThreadPool(\"test\");\n+        TcpTransport tcpTransport = null;\n+        MockLogAppender appender = new MockLogAppender();\n+\n+        try {\n+            appender.start();\n+\n+            Loggers.addAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            for (MockLogAppender.LoggingExpectation expectation : expectations) {\n+                appender.addExpectation(expectation);\n+            }\n+\n+            tcpTransport = new TcpTransport(Settings.EMPTY, Version.CURRENT, testThreadPool,\n+                new MockPageCacheRecycler(Settings.EMPTY),\n+                new NoneCircuitBreakerService(), writableRegistry(), new NetworkService(Collections.emptyList())) {\n+\n+                @Override\n+                protected TcpServerChannel bind(String name, InetSocketAddress address) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected TcpChannel initiateChannel(DiscoveryNode node) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected void stopInternal() {\n+                }\n+            };\n+\n+            if (startTransport) {\n+                tcpTransport.start();\n+            }\n+\n+            final FakeTcpChannel channel = new FakeTcpChannel();\n+            final PlainActionFuture<Void> listener = new PlainActionFuture<>();\n+            channel.addCloseListener(listener);\n+\n+            tcpTransport.onException(channel, exception);\n+\n+            if (expectClosed) {\n+                assertTrue(listener.isDone());\n+                assertThat(listener.actionGet(), nullValue());\n+            } else {\n+                assertFalse(listener.isDone());\n+            }\n+\n+            appender.assertAllExpectationsMatched();\n+\n+        } finally {\n+            Loggers.removeAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            appender.stop();\n+            IOUtils.close(tcpTransport);\n+            testThreadPool.shutdown();", "originalCommit": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjU4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51612#discussion_r372376582", "bodyText": "TIL. Yes, done in f0e813b.", "author": "DaveCTurner", "createdAt": "2020-01-29T13:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTc2MA=="}], "type": "inlineReview"}, {"oid": "f0e813b23bef8ed648296a70d004d4d0b0221362", "url": "https://github.com/elastic/elasticsearch/commit/f0e813b23bef8ed648296a70d004d4d0b0221362", "message": "ThreadPool.terminate", "committedDate": "2020-01-29T13:19:21Z", "type": "commit"}, {"oid": "a62032c3fbcb027449decef025e32a22cef398a2", "url": "https://github.com/elastic/elasticsearch/commit/a62032c3fbcb027449decef025e32a22cef398a2", "message": "Use a static method to reduce the mockery", "committedDate": "2020-01-29T17:19:44Z", "type": "commit"}]}