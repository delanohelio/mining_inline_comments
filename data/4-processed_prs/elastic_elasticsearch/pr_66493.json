{"pr_number": 66493, "pr_title": "EQL: Fix early trimming of in-flight data", "pr_createdAt": "2020-12-17T09:42:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66493", "timeline": [{"oid": "2e0d4657100886b25cbd0717e1f7c531f897dd83", "url": "https://github.com/elastic/elasticsearch/commit/2e0d4657100886b25cbd0717e1f7c531f897dd83", "message": "EQL: Fix early trimming of in-flight data\n\nRework trimToLast to take into account an ordinal for last trimming so\ninstead of keeping the last entry in a stage, it keeps the last entry\nbefore the given ordinal.\nThis takes care of the case where a dense stage that requires several\npasses does not discard valid data from a previous sparse stage that go\nbeyond the current stage point.", "committedDate": "2020-12-17T09:42:55Z", "type": "forcePushed"}, {"oid": "5a633834c4b724ac7714ec76a33e87526d81b230", "url": "https://github.com/elastic/elasticsearch/commit/5a633834c4b724ac7714ec76a33e87526d81b230", "message": "EQL: Fix early trimming of in-flight data\n\nRework trimToLast to take into account an ordinal for last trimming so\ninstead of keeping the last entry in a stage, it keeps the last entry\nbefore the given ordinal.\nThis takes care of the case where a dense stage that requires several\npasses does not discard valid data from a previous sparse stage that go\nbeyond the current stage point.", "committedDate": "2020-12-17T11:52:54Z", "type": "commit"}, {"oid": "5a633834c4b724ac7714ec76a33e87526d81b230", "url": "https://github.com/elastic/elasticsearch/commit/5a633834c4b724ac7714ec76a33e87526d81b230", "message": "EQL: Fix early trimming of in-flight data\n\nRework trimToLast to take into account an ordinal for last trimming so\ninstead of keeping the last entry in a stage, it keeps the last entry\nbefore the given ordinal.\nThis takes care of the case where a dense stage that requires several\npasses does not discard valid data from a previous sparse stage that go\nbeyond the current stage point.", "committedDate": "2020-12-17T11:52:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA5NzcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545097705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // to trim unneeded until that occur before it\n          \n          \n            \n                        // to trim the ones before it", "author": "bpintea", "createdAt": "2020-12-17T13:41:26Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/KeyToSequences.java", "diffHunk": "@@ -95,27 +95,30 @@ void remove(int stage, SequenceKey key) {\n     }\n \n     /**\n-     * Remove all matches expect the latest.\n+     * Remove all matches except the latest occurring _before_ the given ordinal.\n      */\n-    void trimToTail() {\n+    void trimToTail(Ordinal ordinal) {\n         for (Iterator<SequenceEntry> it = keyToSequences.values().iterator(); it.hasNext(); ) {\n             SequenceEntry seqs =  it.next();\n-            // first remove the sequences\n-            // and remember the last item from the first\n-            // initialized stage to be used with until\n+            // remember the last item found (will be ascending)\n+            // to trim unneeded until that occur before it", "originalCommit": "5a633834c4b724ac7714ec76a33e87526d81b230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMDMzMg==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545100332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * less than the given argument alongside its position in the list.\n          \n          \n            \n                 * less than the given argument's timestamp, alongside its position in the list.", "author": "bpintea", "createdAt": "2020-12-17T13:45:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/OrdinalGroup.java", "diffHunk": "@@ -52,11 +52,27 @@ void add(E element) {\n      * The element and everything before it is removed.\n      */\n     E trimBefore(Ordinal ordinal) {\n+        return trimBefore(ordinal, true);\n+    }\n+\n+    /**\n+     * Returns the latest element from the group that has its timestamp\n+     * less than the given argument alongside its position in the list.", "originalCommit": "5a633834c4b724ac7714ec76a33e87526d81b230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMDQ5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545100496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Everything before the element it is removed. The element is kept.\n          \n          \n            \n                 * Everything before this element is removed. The element is kept.", "author": "bpintea", "createdAt": "2020-12-17T13:45:20Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/OrdinalGroup.java", "diffHunk": "@@ -52,11 +52,27 @@ void add(E element) {\n      * The element and everything before it is removed.\n      */\n     E trimBefore(Ordinal ordinal) {\n+        return trimBefore(ordinal, true);\n+    }\n+\n+    /**\n+     * Returns the latest element from the group that has its timestamp\n+     * less than the given argument alongside its position in the list.\n+     * Everything before the element it is removed. The element is kept.", "originalCommit": "5a633834c4b724ac7714ec76a33e87526d81b230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE3MDAxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545170011", "bodyText": "Will pick them up in a separate PR to avoid another build.", "author": "costin", "createdAt": "2020-12-17T15:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMDQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNDAwMA==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545104000", "bodyText": "Wondering if @Nullable would be welcome here, as an indicator of null as a branching value?", "author": "bpintea", "createdAt": "2020-12-17T13:50:26Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceMatcher.java", "diffHunk": "@@ -253,19 +253,15 @@ void until(Iterable<KeyAndOrdinal> markers) {\n      * This allows the matcher to keep only the last match per stage\n      * and adjust insertion positions.\n      */\n-    void trim(boolean everything) {\n+    void trim(Ordinal ordinal) {", "originalCommit": "5a633834c4b724ac7714ec76a33e87526d81b230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2OTY5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66493#discussion_r545169699", "bodyText": "I'm not a fan of @Nullable since it doesn't enforce anything nor it is used consistently through-out the code.", "author": "costin", "createdAt": "2020-12-17T15:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNDAwMA=="}], "type": "inlineReview"}]}