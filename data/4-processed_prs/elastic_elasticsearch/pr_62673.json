{"pr_number": 62673, "pr_title": "Transfer network bytes to smaller buffer", "pr_createdAt": "2020-09-18T23:21:31Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62673", "timeline": [{"oid": "cad0b68ead8d902286052fceba1b829fb2651912", "url": "https://github.com/elastic/elasticsearch/commit/cad0b68ead8d902286052fceba1b829fb2651912", "message": "Transfer network bytes to smaller buffer\n\nCurrently we read in 64KB blocks from the network. When TLS is not\nenabled, these bytes are normally passed all the way to the application\nlayer (some exceptions: compression). For the HTTP layer this means that\nthese bytes can live throughout the entire lifecycle of an indexing\nrequest.\n\nThe problem is that if the reads from the socket are small, this means\nthat 64KB buffers can be consumed by 1KB or smaller reads. If the socket\nbuffer or TCP buffer sizes are small, the leads to massive memory\nwaste. It has been identified as a major source of OOMs on coordinating\nnodes as Elasticsearch easily exhausts the heap for these network bytes.\n\nThis commit resolves the problem by placing a handler after the TLS\nhandler to copy these bytes to a more appropriate buffer size as\nnecessary. This comes after TLS, because TLS is a framing layer which\noften resolves this problem for us (the 64KB buffer will be decoded\ninto a more appropriate buffer size). However, this extra handler will\nsolve it for the non-TLS pipelines.", "committedDate": "2020-09-18T23:14:15Z", "type": "commit"}, {"oid": "4924f1d114a5e91f5d4b37ff689c6c63ba575387", "url": "https://github.com/elastic/elasticsearch/commit/4924f1d114a5e91f5d4b37ff689c6c63ba575387", "message": "Fiux", "committedDate": "2020-09-18T23:21:00Z", "type": "commit"}, {"oid": "135ebe052e54880c27feaef7b3e0ae277052fdef", "url": "https://github.com/elastic/elasticsearch/commit/135ebe052e54880c27feaef7b3e0ae277052fdef", "message": "Use estimated size", "committedDate": "2020-09-18T23:26:39Z", "type": "commit"}, {"oid": "73699e2e75a88127cf431f02e8caa76066515c2f", "url": "https://github.com/elastic/elasticsearch/commit/73699e2e75a88127cf431f02e8caa76066515c2f", "message": "Checkstyle", "committedDate": "2020-09-19T05:07:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxODIzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r491318239", "bodyText": "Cache buf.maxFastWritableBytes() and buf.readableBytes() to variables?", "author": "original-brownbear", "createdAt": "2020-09-19T07:50:04Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyByteBufSizer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.transport;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+\n+import java.util.List;\n+\n+@ChannelHandler.Sharable\n+public class NettyByteBufSizer extends MessageToMessageDecoder<ByteBuf> {\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> out) {\n+        // If max fast writeable bytes is greater than the number of readable bytes, this buffer is at least\n+        // twice as big as necessary to contain the data. If that is the case, allocate a new buffer and\n+        // copy.\n+        int estimatedSize = buf.maxFastWritableBytes() + buf.writerIndex();", "originalCommit": "73699e2e75a88127cf431f02e8caa76066515c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxOTEyNA==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r491319124", "bodyText": "Might give us more optimally sized buffers if we set the max capacity as well through\nvia ctx.alloc().heapBuffer(length, length); ?", "author": "original-brownbear", "createdAt": "2020-09-19T07:52:57Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyByteBufSizer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.transport;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+\n+import java.util.List;\n+\n+@ChannelHandler.Sharable\n+public class NettyByteBufSizer extends MessageToMessageDecoder<ByteBuf> {\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> out) {\n+        // If max fast writeable bytes is greater than the number of readable bytes, this buffer is at least\n+        // twice as big as necessary to contain the data. If that is the case, allocate a new buffer and\n+        // copy.\n+        int estimatedSize = buf.maxFastWritableBytes() + buf.writerIndex();\n+        if (estimatedSize > 1024 && buf.maxFastWritableBytes() >= buf.readableBytes()) {\n+            ByteBuf newBuffer = ctx.alloc().heapBuffer(buf.readableBytes());", "originalCommit": "73699e2e75a88127cf431f02e8caa76066515c2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r494449728", "bodyText": "The max capacity does not impact the allocation size. It is essentially a limit for future expansion (reallocations) of the buffer.", "author": "tbrooks8", "createdAt": "2020-09-24T16:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxOTEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxOTU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r491319571", "bodyText": "Should we really do this in general? It seems only makes sense for REST handlers that don't copy the buffers to unpooled anyway (search and bulk only as of right now). Maybe we should just copy those requests to new pooled buffers of appropriate size and leave the rest of them alone since we're releasing them on the io thread right away anyway?", "author": "original-brownbear", "createdAt": "2020-09-19T07:54:45Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyByteBufSizer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.transport;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+\n+import java.util.List;\n+\n+@ChannelHandler.Sharable\n+public class NettyByteBufSizer extends MessageToMessageDecoder<ByteBuf> {\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> out) {", "originalCommit": "73699e2e75a88127cf431f02e8caa76066515c2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTU0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r494449547", "bodyText": "As discussed in the meeting, this is valuable as large messages can be aggregated for a period of time, hurting the memory ratios without this change.", "author": "tbrooks8", "createdAt": "2020-09-24T16:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxOTU3MQ=="}], "type": "inlineReview"}, {"oid": "56f92e6ee7e2a1a46aefbf61e25c277c526e6fa3", "url": "https://github.com/elastic/elasticsearch/commit/56f92e6ee7e2a1a46aefbf61e25c277c526e6fa3", "message": "Merge remote-tracking branch 'upstream/master' into size_buffers_to_be_smaller", "committedDate": "2020-09-19T16:32:01Z", "type": "commit"}, {"oid": "806e766c1c4496df715831bd4eb074058ee70cb2", "url": "https://github.com/elastic/elasticsearch/commit/806e766c1c4496df715831bd4eb074058ee70cb2", "message": "Variable names", "committedDate": "2020-09-19T17:07:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NDU2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r497254565", "bodyText": "Couldn't we, instead of rolling our own copying here, just use a call to ByteBuf#capacity and make Netty resize things? I.e. just do something like:\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> out) {\n        final int readableBytes = buf.readableBytes();\n        out.add(buf.discardReadBytes().capacity(readableBytes).retain()); \n    }\nAt least in some quick experimentation with the debugger that method seems to accomplish a similar if not the same thing we do here but with less copying in case the reader index is 0 (which it probably is most of the time?) but maybe I'm missing something?", "author": "original-brownbear", "createdAt": "2020-09-30T05:41:29Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyByteBufSizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.transport;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+\n+import java.util.List;\n+\n+@ChannelHandler.Sharable\n+public class NettyByteBufSizer extends MessageToMessageDecoder<ByteBuf> {\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> out) {\n+        final int maxFastWritableBytes = buf.maxFastWritableBytes();\n+        final int readableBytes = buf.readableBytes();\n+        // If max fast writeable bytes is greater than the number of readable bytes, this buffer is at least\n+        // twice as big as necessary to contain the data. If that is the case, allocate a new buffer and\n+        // copy.\n+        int estimatedSize = maxFastWritableBytes + buf.writerIndex();\n+        if (estimatedSize > 1024 && maxFastWritableBytes >= readableBytes) {", "originalCommit": "806e766c1c4496df715831bd4eb074058ee70cb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NTA5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62673#discussion_r497655097", "bodyText": "This seems fine. I guarded against less than 1024 because capacity will always copy small arrays which seems unnecessary.", "author": "tbrooks8", "createdAt": "2020-09-30T16:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NDU2NQ=="}], "type": "inlineReview"}, {"oid": "027cc6340833b19f341599448324b5a431deaf70", "url": "https://github.com/elastic/elasticsearch/commit/027cc6340833b19f341599448324b5a431deaf70", "message": "Test", "committedDate": "2020-09-30T16:13:36Z", "type": "commit"}, {"oid": "62b9ef6247f75dfd052c7b7de99e404141b6d324", "url": "https://github.com/elastic/elasticsearch/commit/62b9ef6247f75dfd052c7b7de99e404141b6d324", "message": "Merge remote-tracking branch 'upstream/master' into size_buffers_to_be_smaller", "committedDate": "2020-09-30T16:14:30Z", "type": "commit"}, {"oid": "c949ed907ea78759a2477f3dac7050e26831e1de", "url": "https://github.com/elastic/elasticsearch/commit/c949ed907ea78759a2477f3dac7050e26831e1de", "message": "Merge remote-tracking branch 'upstream/master' into size_buffers_to_be_smaller", "committedDate": "2020-09-30T16:14:45Z", "type": "commit"}, {"oid": "6785615f386c60531dbb162290527dc2dd0c4462", "url": "https://github.com/elastic/elasticsearch/commit/6785615f386c60531dbb162290527dc2dd0c4462", "message": "Change", "committedDate": "2020-09-30T16:43:51Z", "type": "commit"}]}