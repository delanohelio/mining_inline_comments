{"pr_number": 54440, "pr_title": "Resolve SSO roles by pattern", "pr_createdAt": "2020-03-30T15:52:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54440", "timeline": [{"oid": "a056b6c35e47b07fb1de0bd4c61c24ad17983313", "url": "https://github.com/elastic/elasticsearch/commit/a056b6c35e47b07fb1de0bd4c61c24ad17983313", "message": "Resolve SSO roles by pattern\n\nThis changes a SamlServiceProvider to have a function that maps\nfrom an \"action-name\" to set of role-names instead of a Map that does\nso.\n\nThe on-disk representation of this mapping is a set of Java Regexp\nPatterns, for which the first matching group is the role name.\n\nFor example \"sso:(\\w+)\" would map any action that started with \"sso:\"\nto the corresponding role name (e.g. \"sso:superuser\" -> \"superuser\").", "committedDate": "2020-03-30T15:46:16Z", "type": "commit"}, {"oid": "67581b3e5d0a667584cc8745692f99e925297af1", "url": "https://github.com/elastic/elasticsearch/commit/67581b3e5d0a667584cc8745692f99e925297af1", "message": "Merge branch 'master' into idp/role-prefix", "committedDate": "2020-03-31T04:56:16Z", "type": "commit"}, {"oid": "dd515d4ecac9637e9236ae6104e4813dbdf07da8", "url": "https://github.com/elastic/elasticsearch/commit/dd515d4ecac9637e9236ae6104e4813dbdf07da8", "message": "Merge branch 'master' into idp/role-prefix", "committedDate": "2020-04-01T04:10:00Z", "type": "commit"}, {"oid": "0aa66420416523abe00eb6cd6f106a0e8538e3b0", "url": "https://github.com/elastic/elasticsearch/commit/0aa66420416523abe00eb6cd6f106a0e8538e3b0", "message": "Merge branch 'master' into idp/role-prefix", "committedDate": "2020-04-02T01:29:50Z", "type": "commit"}, {"oid": "adad460aee8b3bebc9c41d607907aa942c2aedf0", "url": "https://github.com/elastic/elasticsearch/commit/adad460aee8b3bebc9c41d607907aa942c2aedf0", "message": "Update IdentityProviderAuthenticationIT to use role prefix", "committedDate": "2020-04-02T01:57:58Z", "type": "commit"}, {"oid": "a4af21f26c271cd5a616c9145a538ccea7f5681b", "url": "https://github.com/elastic/elasticsearch/commit/a4af21f26c271cd5a616c9145a538ccea7f5681b", "message": "Merge branch 'idp/role-prefix' of github.com:tvernum/elasticsearch into idp/role-prefix", "committedDate": "2020-04-02T01:58:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1Nzk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402057955", "bodyText": "Can you explain why we preload this cache? I think it's because\n\nwe know we should be getting many requests for the default application but\nwe don't want to statically resolve the actions in here as these are configurable ( even if they probably won't change often ) and\nwe don't want to be making GetPrivilege related searches to the security index too often.\n\nWould this behavior change when we add a cache for Application Privileges and if so, should we add a TODO or note here ?", "author": "jkakavas", "createdAt": "2020-04-02T05:22:35Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/privileges/ApplicationActionsResolver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+/*\n+ * ELASTICSEARCH CONFIDENTIAL\n+ * __________________\n+ *\n+ *  [2020] Elasticsearch Incorporated. All Rights Reserved.\n+ *\n+ * NOTICE:  All information contained herein is, and remains\n+ * the property of Elasticsearch Incorporated and its suppliers,\n+ * if any.  The intellectual and technical concepts contained\n+ * herein are proprietary to Elasticsearch Incorporated\n+ * and its suppliers and may be covered by U.S. and Foreign Patents,\n+ * patents in process, and are protected by trade secret or copyright law.\n+ * Dissemination of this information or reproduction of this material\n+ * is strictly forbidden unless prior written permission is obtained\n+ * from Elasticsearch Incorporated.\n+ */\n+\n+package org.elasticsearch.xpack.idp.privileges;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.cache.CacheBuilder;\n+import org.elasticsearch.common.component.AbstractLifecycleComponent;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.action.privilege.GetPrivilegesAction;\n+import org.elasticsearch.xpack.core.security.action.privilege.GetPrivilegesRequest;\n+import org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class ApplicationActionsResolver extends AbstractLifecycleComponent {\n+\n+    private static final int CACHE_SIZE_DEFAULT = 100;\n+    private static final TimeValue CACHE_TTL_DEFAULT = TimeValue.timeValueMinutes(90);\n+\n+    public static final Setting<Integer> CACHE_SIZE\n+        = Setting.intSetting(\"xpack.idp.privileges.cache.size\", CACHE_SIZE_DEFAULT, Setting.Property.NodeScope);\n+    public static final Setting<TimeValue> CACHE_TTL\n+        = Setting.timeSetting(\"xpack.idp.privileges.cache.ttl\", CACHE_TTL_DEFAULT, Setting.Property.NodeScope);\n+\n+    private final Logger logger = LogManager.getLogger();\n+\n+    private final ServiceProviderDefaults defaults;\n+    private final Client client;\n+    private final Cache<String, Set<String>> cache;\n+\n+    public ApplicationActionsResolver(Settings settings, ServiceProviderDefaults defaults, Client client) {\n+        this.defaults = defaults;\n+        this.client = new OriginSettingClient(client, ClientHelper.IDP_ORIGIN);\n+\n+        final TimeValue cacheTtl = CACHE_TTL.get(settings);\n+        this.cache = CacheBuilder.<String, Set<String>>builder()\n+            .setMaximumWeight(CACHE_SIZE.get(settings))\n+            .setExpireAfterWrite(cacheTtl)\n+            .build();\n+\n+        // Preload the cache at 2/3 of its expiry time (TTL). This means that we should never have an empty cache, but if for some reason\n+        // the preload thread stops running, we will still automatically refresh the cache on access.\n+        final TimeValue preloadInterval = TimeValue.timeValueMillis(cacheTtl.millis() * 2 / 3);\n+        client.threadPool().scheduleWithFixedDelay(this::loadPrivilegesForDefaultApplication, preloadInterval, ThreadPool.Names.GENERIC);", "originalCommit": "a4af21f26c271cd5a616c9145a538ccea7f5681b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402074202", "bodyText": "Realistically we should only have 1 application that we're loading privileges for.\nExcept that code doesn't currently enforce that from top-to-bottom, so we were left with a weird situation where an \"application\" string gets passed down when we resolve the privileges. I could have put in a check that application.equals(defaults.applicationName), but decide to just accept that multiple application could be a thing.\nBecause all (or even most) of the requests are going to be for the same application, when the cache expires we would be likely to have a flood of threads all trying to reload the same data at the same time.\nBy pre-loading it we can enforce that we have a single request to load the privileges which is going to make a big difference for the load on the security cluster.\nBut we definitely don't want to cache forever, because adding a new action is a reasonable thing to do, and we don't want to require an IdP restart when it does.\nI don't think I would change this with caching on the privileges API - a flood of requests to that action would still be unnecesary and potentially exhaust threadpools etc.", "author": "tvernum", "createdAt": "2020-04-02T06:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1Nzk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1OTQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402059422", "bodyText": "nit but saw it above in line 39\nthrow new IllegalArgumentException(\"a user without access ([\" + hasAccess + \"]) may not have roles ([\" + roles + \"])\");\n\nto ->\nthrow new IllegalArgumentException(\"a user without access may not have roles ([\" + roles + \"])\");", "author": "jkakavas", "createdAt": "2020-04-02T05:27:50Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/privileges/UserPrivilegeResolver.java", "diffHunk": "@@ -66,62 +65,79 @@ public static UserPrivileges noAccess(String principal) {\n     private final Logger logger = LogManager.getLogger();\n     private final Client client;\n     private final SecurityContext securityContext;\n+    private final ApplicationActionsResolver actionsResolver;", "originalCommit": "a4af21f26c271cd5a616c9145a538ccea7f5681b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MDYwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402060609", "bodyText": "remove this line", "author": "jkakavas", "createdAt": "2020-04-02T05:32:28Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/privileges/UserPrivilegeResolver.java", "diffHunk": "@@ -66,62 +65,79 @@ public static UserPrivileges noAccess(String principal) {\n     private final Logger logger = LogManager.getLogger();\n     private final Client client;\n     private final SecurityContext securityContext;\n+    private final ApplicationActionsResolver actionsResolver;\n \n-    public UserPrivilegeResolver(Client client, SecurityContext securityContext) {\n+    public UserPrivilegeResolver(Client client, SecurityContext securityContext, ApplicationActionsResolver actionsResolver) {\n         this.client = client;\n         this.securityContext = securityContext;\n+        this.actionsResolver = actionsResolver;\n     }\n \n     /**\n      * Resolves the user's privileges for the specified service.\n      * Requires that the active user is set in the {@link org.elasticsearch.xpack.core.security.SecurityContext}.\n      */\n     public void resolve(ServiceProviderPrivileges service, ActionListener<UserPrivileges> listener) {\n-        HasPrivilegesRequest request = new HasPrivilegesRequest();\n-        final String username = securityContext.requireUser().principal();\n-        request.username(username);\n-        request.applicationPrivileges(buildResourcePrivilege(service));\n-        request.clusterPrivileges(Strings.EMPTY_ARRAY);\n-        request.indexPrivileges(new RoleDescriptor.IndicesPrivileges[0]);\n-        client.execute(HasPrivilegesAction.INSTANCE, request, ActionListener.wrap(\n-            response -> {\n-                logger.debug(\"Checking access for user [{}] to application [{}] resource [{}]\",\n-                    username, service.getApplicationName(), service.getResource());\n-                UserPrivileges privileges = buildResult(response, service);\n-                logger.debug(\"Resolved service privileges [{}]\", privileges);\n-                listener.onResponse(privileges);\n-            },\n-            listener::onFailure\n-        ));\n+        buildResourcePrivilege(service, ActionListener.wrap(resourcePrivilege -> {\n+            final String username = securityContext.requireUser().principal();\n+            if (resourcePrivilege == null) {\n+                listener.onResponse(UserPrivileges.noAccess(username));\n+                return;\n+            }\n+            HasPrivilegesRequest request = new HasPrivilegesRequest();\n+            request.username(username);\n+            request.applicationPrivileges();", "originalCommit": "a4af21f26c271cd5a616c9145a538ccea7f5681b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MjE1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402062156", "bodyText": "why?", "author": "jkakavas", "createdAt": "2020-04-02T05:37:54Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/ServiceProviderCacheSettings.java", "diffHunk": "@@ -26,7 +26,7 @@\n     public static final Setting<TimeValue> CACHE_TTL\n         = Setting.timeSetting(\"xpack.idp.sp.cache.ttl\", CACHE_TTL_DEFAULT, Setting.Property.NodeScope);\n \n-    static <K, V> Cache<K, V> buildCache(Settings settings) {\n+    public static <K, V> Cache<K, V> buildCache(Settings settings) {", "originalCommit": "a4af21f26c271cd5a616c9145a538ccea7f5681b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MDc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54440#discussion_r402070784", "bodyText": "I was going to re-use this for the application privileges cache, but decided against it.", "author": "tvernum", "createdAt": "2020-04-02T06:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MjE1Ng=="}], "type": "inlineReview"}, {"oid": "1f60af7ffe264a4b6bddc629374cdb2463782d60", "url": "https://github.com/elastic/elasticsearch/commit/1f60af7ffe264a4b6bddc629374cdb2463782d60", "message": "Merge branch 'master' into idp/role-prefix", "committedDate": "2020-04-02T06:17:20Z", "type": "commit"}, {"oid": "a36bc8f62af52157fb3ebb7041888f7a0087906c", "url": "https://github.com/elastic/elasticsearch/commit/a36bc8f62af52157fb3ebb7041888f7a0087906c", "message": "Address feedback", "committedDate": "2020-04-02T06:34:19Z", "type": "commit"}, {"oid": "ccb356bad36461bc0257821442464dc9975a1f2d", "url": "https://github.com/elastic/elasticsearch/commit/ccb356bad36461bc0257821442464dc9975a1f2d", "message": "Merge branch 'master' into idp/role-prefix", "committedDate": "2020-04-03T05:21:56Z", "type": "commit"}]}