{"pr_number": 58519, "pr_title": "[DOCS] Adding create index snapshot API docs", "pr_createdAt": "2020-06-24T22:35:27Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58519", "timeline": [{"oid": "3109ac90935e6290e06d119761d6caaee85631e7", "url": "https://github.com/elastic/elasticsearch/commit/3109ac90935e6290e06d119761d6caaee85631e7", "message": "Adding create index snapshot API page.", "committedDate": "2020-06-24T22:32:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxODk0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445218947", "bodyText": "I think these lines are too long.\nSince this is intended to be reference, I'd keep this intro short and simple.\nThe A repository... sentence isn't particularly relevant.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n          \n          \n            \n            Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and\n          \n          \n            \n            indices.", "author": "jrodewig", "createdAt": "2020-06-24T23:05:55Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxOTM3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445219375", "bodyText": "I'd use my_repository. It's a bit more obvious about what the resource is here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            PUT /_snapshot/my_backup\n          \n          \n            \n            PUT /_snapshot/my_repository", "author": "jrodewig", "createdAt": "2020-06-24T23:07:17Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxOTU0NA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445219544", "bodyText": "Generally, we avoid including query parameters in this example (unless they're required).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n          \n          \n            \n            PUT /_snapshot/my_repository/my_snapshot", "author": "jrodewig", "createdAt": "2020-06-24T23:07:52Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNzgzMw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445627833", "bodyText": "I was curious about whether to include the parameter, so thank you for the guidance.", "author": "lockewritesdocs", "createdAt": "2020-06-25T15:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxOTU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxOTc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445219763", "bodyText": "We should include both accepted HTTP methods here. I don't think -name is adding much here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `POST /_snapshot/<repository>/<snapshot-name>`\n          \n          \n            \n            `PUT /_snapshot/<repository>/<snapshot>`\n          \n          \n            \n            \n          \n          \n            \n            `POST /_snapshot/<repository>/<snapshot>`", "author": "jrodewig", "createdAt": "2020-06-24T23:08:33Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMDU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445220574", "bodyText": "It'd be good to include any naming requirements or constraints here. For example,  I don't think snapshot names must be lowercase.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `<snapshot-name>`::\n          \n          \n            \n            (Required, string)\n          \n          \n            \n            Unique name of the snapshot.\n          \n          \n            \n            `<snapshot-name>`::\n          \n          \n            \n            (Required, string)\n          \n          \n            \n            Name of the snapshot to create. This name must be unique in the snapshot repository.", "author": "jrodewig", "createdAt": "2020-06-24T23:11:05Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMTU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445221597", "bodyText": "You can guess from the param name, but this doesn't actually specify which value does what.\nWe also try to use a \"If true,...\" convention for boolean params.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n          \n          \n            \n            If `true`, the request returns a response when the snapshot is complete.\n          \n          \n            \n            If `false`, the request returns a response when the snapshot initializes.\n          \n          \n            \n            Defaults to `false`.", "author": "jrodewig", "createdAt": "2020-06-24T23:14:29Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMjk5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445222991", "bodyText": "I think the line wrapping is off here. Technically this isn't a command, it's a request.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: During snapshot initialization, information about all\n          \n          \n            \n            previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n          \n          \n            \n            NOTE: During snapshot initialization, information about all\n          \n          \n            \n            previous snapshots is loaded into memory. In large repositories, this load time can cause requests to take several seconds (or even minutes) to return a response, even if the `wait_for_completion` parameter is `false`.", "author": "jrodewig", "createdAt": "2020-06-24T23:18:56Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzg5OA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445223898", "bodyText": "I think this is a query parameter, not a path parameter.", "author": "jrodewig", "createdAt": "2020-06-24T23:21:43Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MjE4OA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445682188", "bodyText": "I'll move wait_for_completion to the query params section.", "author": "lockewritesdocs", "createdAt": "2020-06-25T16:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNDE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445224174", "bodyText": "I think these are request body parameters, not query parameters.\nIt also looks like documentation for the master_timeout query parameter is missing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[create-snapshot-api-query-params]]\n          \n          \n            \n            ==== {api-query-parms-title}\n          \n          \n            \n            [role=\"child_attributes\"]\n          \n          \n            \n            [[create-snapshot-api-request-body]]\n          \n          \n            \n            ==== {api-request-body-title}", "author": "jrodewig", "createdAt": "2020-06-24T23:22:37Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MzE3OA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445783178", "bodyText": "I'll make this change to request body params and also reorder them.", "author": "lockewritesdocs", "createdAt": "2020-06-25T19:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNDk1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445224951", "bodyText": "I don't think the although the options... note isn't needed as this is the request body.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n          \n          \n            \n            must be supplied in the body of the request, rather than as request parameters.\n          \n          \n            \n            A comma-separated list of data streams and indices to include in the snapshot.\n          \n          \n            \n            <<multi-index,Multi-index syntax>> is supported.\n          \n          \n            \n            \n          \n          \n            \n            By default, a snapshot includes all data streams and indices in the cluster. If this\n          \n          \n            \n            argument is provided, the snapshot only includes the specified data streams and clusters.", "author": "jrodewig", "createdAt": "2020-06-24T23:25:03Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNjAwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445226001", "bodyText": "I don't think the current def in common-parms is all that good. We need to mention data streams\nhere anyway.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n          \n          \n            \n            `ignore_unavailable`::\n          \n          \n            \n            (Optional, boolean)\n          \n          \n            \n            If `true`, the request ignores data streams and indices in `indices` that are missing or closed. \n          \n          \n            \n            If `false`, the request returns an error for any data stream or index that is missing or closed. \n          \n          \n            \n            Defaults to `false`.", "author": "jrodewig", "createdAt": "2020-06-24T23:28:11Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyODY4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445228689", "bodyText": "I think this parameter defaults to true: https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java#L81\nI also think we can streamline the def a good bit by excluding info related to restore.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `include_global_state`::\n          \n          \n            \n            (Optional, boolean)\n          \n          \n            \n            If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n          \n          \n            \n            +\n          \n          \n            \n            If `true`, the snapshot's persistent settings, index templates, ingest\n          \n          \n            \n            pipelines, and {ilm-init} policies are restored into the current cluster. This\n          \n          \n            \n            overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n          \n          \n            \n            policies whose names match those in the snapshot.\n          \n          \n            \n            `include_global_state`::\n          \n          \n            \n            +\n          \n          \n            \n            --\n          \n          \n            \n            (Optional, boolean)\n          \n          \n            \n            If `true`, the current cluster state is included in the snapshot.\n          \n          \n            \n            Defaults to `true`.\n          \n          \n            \n            \n          \n          \n            \n            The cluster state includes:\n          \n          \n            \n            \n          \n          \n            \n            * Persistent cluster settings\n          \n          \n            \n            * Composable index templates\n          \n          \n            \n            * Legacy index templates\n          \n          \n            \n            * Ingest pipelines\n          \n          \n            \n            * {ilm-init} lifecycle policies\n          \n          \n            \n            --", "author": "jrodewig", "createdAt": "2020-06-24T23:37:29Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyODg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445228866", "bodyText": "It looks like the param def for partial is missing. I'd consider adding this admon there.", "author": "jrodewig", "createdAt": "2020-06-24T23:38:04Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMTQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445701422", "bodyText": "I'll add partial to the list of query parameters.", "author": "lockewritesdocs", "createdAt": "2020-06-25T16:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyODg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyOTIxMA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445229210", "bodyText": "I think this needs to be less than 1024 bytes: https://github.com/elastic/elasticsearch/blame/master/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java#L153", "author": "jrodewig", "createdAt": "2020-06-24T23:39:16Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MjEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445692101", "bodyText": "Adding to the metadata description:\n\nMetadata must be less than 1024 bytes.", "author": "lockewritesdocs", "createdAt": "2020-06-25T16:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyOTIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzMTI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445231278", "bodyText": "Looks like there is a missing settings param that might need to be documented?\nhttps://github.com/elastic/elasticsearch/blame/master/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java#L79", "author": "jrodewig", "createdAt": "2020-06-24T23:46:14Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data.\n+", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMTU2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445711569", "bodyText": "I'll add a description of settings with a pointer to that information in the Put snapshot repository API docs.", "author": "lockewritesdocs", "createdAt": "2020-06-25T17:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzMTI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzMTUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445231504", "bodyText": "I'd reword so we don't end the sentence in a preposition.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the following example, `index_1` and `index_2` are the indices to take snapshots of.\n          \n          \n            \n            The following request takes a snapshot of `index_1` and `index_2`.", "author": "jrodewig", "createdAt": "2020-06-24T23:47:06Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data.\n+\n+[[create-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+In the following example, `index_1` and `index_2` are the indices to take snapshots of.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NzY2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445577661", "bodyText": "Technically, this API isn't for respository management; it's for snapshot management.\nI'd create a new subsection for \"Snapshot management APIs\" or something similar.", "author": "jrodewig", "createdAt": "2020-06-25T13:56:04Z", "path": "docs/reference/snapshot-restore/apis/snapshot-restore-apis.asciidoc", "diffHunk": "@@ -16,15 +16,16 @@ content may not be included yet.\n [[snapshot-restore-repo-apis]]\n === Snapshot repository management APIs\n \n+* <<create-snapshot-api,Create snapshot>>", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwNDQ5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445604493", "bodyText": "Snippet tests help ensure our docs are correct. Generally, we don't use // TEST[skip:... unless absolutely necessary.  In this case,  I think the skipped test is hiding an incorrect response.\nI suggested a valid response below. Here's how you can get it yourself next time:\n\nUse a command like ./gradlew :docs:integTestRunner --tests \"*create-snapshot-api*\" to test the snippets in the file.\nUse // TESTRESPONSE[s/.../.../] to selectively replace some properties in the response.\n\nThis is covered in more depth in the docs README: https://github.com/elastic/elasticsearch/tree/master/docs\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [source,console-result]\n          \n          \n            \n            ----\n          \n          \n            \n            {\n          \n          \n            \n              \"accepted\" : true\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            // TEST[skip:cannot complete subsequent snapshot]\n          \n          \n            \n            [source,console-result]\n          \n          \n            \n            ----\n          \n          \n            \n            {\n          \n          \n            \n              \"snapshot\": {\n          \n          \n            \n                \"snapshot\": \"snapshot_2\",\n          \n          \n            \n                \"uuid\": \"vdRctLCxSketdKb54xw67g\",\n          \n          \n            \n                \"version_id\": 8000099,\n          \n          \n            \n                \"version\": \"8.0.0\",\n          \n          \n            \n                \"indices\": [],\n          \n          \n            \n                \"data_streams\": [],\n          \n          \n            \n                \"include_global_state\": false,\n          \n          \n            \n                \"metadata\": {\n          \n          \n            \n                  \"taken_by\": \"user123\",\n          \n          \n            \n                  \"taken_because\": \"backup before upgrading\"\n          \n          \n            \n                },\n          \n          \n            \n                \"state\": \"SUCCESS\",\n          \n          \n            \n                \"start_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"start_time_in_millis\": 1593093628850,\n          \n          \n            \n                \"end_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"end_time_in_millis\": 1593094752018,\n          \n          \n            \n                \"duration_in_millis\": 0,\n          \n          \n            \n                \"failures\": [],\n          \n          \n            \n                \"shards\": {\n          \n          \n            \n                  \"total\": 0,\n          \n          \n            \n                  \"failed\": 0,\n          \n          \n            \n                  \"successful\": 0\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            // TESTRESPONSE[s/\"uuid\": \"vdRctLCxSketdKb54xw67g\"/\"uuid\": $body.snapshot.uuid/]\n          \n          \n            \n            // TESTRESPONSE[s/\"start_time\": \"2020-06-25T14:00:28.850Z\"/\"start_time\": $body.snapshot.start_time/]\n          \n          \n            \n            // TESTRESPONSE[s/\"start_time_in_millis\": 1593093628850/\"start_time_in_millis\": $body.snapshot.start_time_in_millis/]\n          \n          \n            \n            // TESTRESPONSE[s/\"end_time\": \"2020-06-25T14:00:28.850Z\"/\"end_time\": $body.snapshot.end_time/]\n          \n          \n            \n            // TESTRESPONSE[s/\"end_time_in_millis\": 1593094752018/\"end_time_in_millis\": $body.snapshot.end_time_in_millis/]\n          \n          \n            \n            // TESTRESPONSE[s/\"duration_in_millis\": 0/\"duration_in_millis\": $body.snapshot.duration_in_millis/]", "author": "jrodewig", "createdAt": "2020-06-25T14:32:46Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot-name>`::\n+(Required, string)\n+Unique name of the snapshot.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.\n+\n+[[create-snapshot-api-query-params]]\n+==== {api-query-parms-title}\n+\n+`indices`::\n+(Optional, string)\n+A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax\n+must be supplied in the body of the request, rather than as request parameters.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\n+`include_global_state`::\n+(Optional, boolean)\n+If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.\n++\n+If `true`, the snapshot's persistent settings, index templates, ingest\n+pipelines, and {ilm-init} policies are restored into the current cluster. This\n+overwrites any existing cluster settings, templates, pipelines and {ilm-init}\n+policies whose names match those in the snapshot.\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data.\n+\n+[[create-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+In the following example, `index_1` and `index_2` are the indices to take snapshots of.\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_1,index_2\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"user123\",\n+    \"taken_because\": \"backup before upgrading\"\n+  }\n+}\n+-----------------------------------\n+\n+The API returns the following response:\n+\n+[source,console-result]\n+----\n+{\n+  \"accepted\" : true\n+}\n+----\n+// TEST[skip:cannot complete subsequent snapshot]", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxMDA4NA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445610084", "bodyText": "By default, snapshots include an entire cluster, including the cluster state.\nWith #57675, snapshots now support data streams in master and 7.x.\nI'd avoid associating snapshots too closely with indices.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[create-snapshot-api]]\n          \n          \n            \n            === Create index snapshot API\n          \n          \n            \n            ++++\n          \n          \n            \n            <titleabbrev>Create index snapshot</titleabbrev>\n          \n          \n            \n            ++++\n          \n          \n            \n            [[create-snapshot-api]]\n          \n          \n            \n            === Create snapshot API\n          \n          \n            \n            ++++\n          \n          \n            \n            <titleabbrev>Create snapshot</titleabbrev>\n          \n          \n            \n            ++++", "author": "jrodewig", "createdAt": "2020-06-25T14:40:05Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxOTY4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445619687", "bodyText": "I would add a higher-level intro sentence. We also need to mention data streams.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n          \n          \n            \n            You can use the create snapshot API to create a <<snapshot-restore,snapshot>>, a\n          \n          \n            \n            backup taken from a running {es} cluster.\n          \n          \n            \n            \n          \n          \n            \n            By default, a snapshot includes all data streams and open indices in the\n          \n          \n            \n            cluster, as well as the cluster state.  You can change this behavior by\n          \n          \n            \n            specifying a list of data streams and indices to back up in the body of the\n          \n          \n            \n            snapshot request.", "author": "jrodewig", "createdAt": "2020-06-25T14:52:57Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMDI4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445620281", "bodyText": "I made some suggestions to remove index references. These also apply to data streams now.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n          \n          \n            \n            The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.", "author": "jrodewig", "createdAt": "2020-06-25T14:53:43Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMDQ2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445620469", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n          \n          \n            \n            The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the data stream or index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.", "author": "jrodewig", "createdAt": "2020-06-25T14:53:58Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTIzNg==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445621236", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n          \n          \n            \n            A snapshot represents a point-in-time view of the moment when the snapshot was created. No records that were added to a data stream or index after the snapshot process started will be present in the snapshot.", "author": "jrodewig", "createdAt": "2020-06-25T14:54:55Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r445621645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n          \n          \n            \n            Besides creating a copy of each data stream and index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.", "author": "jrodewig", "createdAt": "2020-06-25T14:55:29Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,122 @@\n+[[create-snapshot-api]]\n+=== Create index snapshot API\n+++++\n+<titleabbrev>Create index snapshot</titleabbrev>\n+++++\n+\n+Takes a snapshot of one or more indices. A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names in the cluster, such as `snapshot_1`.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot-name>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+By default, a snapshot of all open and started indices in the cluster is created. You can change this behavior by specifying the list of indices in the body of the snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The index snapshot process is incremental. When creating the index snapshot, {es} analyzes the list of index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+Because a snapshot represents the index at the moment when the snapshot was created, no records that were added to the index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.", "originalCommit": "3109ac90935e6290e06d119761d6caaee85631e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "859cba5c97930ffa49e085392275732e88ff7d74", "url": "https://github.com/elastic/elasticsearch/commit/859cba5c97930ffa49e085392275732e88ff7d74", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nCondense API description.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:03:19Z", "type": "commit"}, {"oid": "42fd2f5949cfa44e1a201d218bc87cb40bc5323d", "url": "https://github.com/elastic/elasticsearch/commit/42fd2f5949cfa44e1a201d218bc87cb40bc5323d", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nRemove parameter from query.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:03:56Z", "type": "commit"}, {"oid": "b79723b133be4efa1af34605d6ea758901f8f65f", "url": "https://github.com/elastic/elasticsearch/commit/b79723b133be4efa1af34605d6ea758901f8f65f", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd POST method and remove `-name` from the snapshot variable.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:05:58Z", "type": "commit"}, {"oid": "0a539b9f47f6d7cdc8cee04aece94fcfda70cc43", "url": "https://github.com/elastic/elasticsearch/commit/0a539b9f47f6d7cdc8cee04aece94fcfda70cc43", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nExpand description of `<snapshot>`.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:07:31Z", "type": "commit"}, {"oid": "0eb389c05669f030d3c3b330e939e9d582ab25c5", "url": "https://github.com/elastic/elasticsearch/commit/0eb389c05669f030d3c3b330e939e9d582ab25c5", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd data streams to introduction and expand the overall description.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:09:16Z", "type": "commit"}, {"oid": "67229d5c5818eb28fe62db59fe6812ec9ca52769", "url": "https://github.com/elastic/elasticsearch/commit/67229d5c5818eb28fe62db59fe6812ec9ca52769", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd support for data streams.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:09:36Z", "type": "commit"}, {"oid": "8dc6901e6f65a5b0b98b61c57529835c7976a9ba", "url": "https://github.com/elastic/elasticsearch/commit/8dc6901e6f65a5b0b98b61c57529835c7976a9ba", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd support for data streams.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:09:53Z", "type": "commit"}, {"oid": "11f38308cf489c8ba6f330067665b19ec2c5298d", "url": "https://github.com/elastic/elasticsearch/commit/11f38308cf489c8ba6f330067665b19ec2c5298d", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd data stream and reference for \"point-in-time view\".\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:10:33Z", "type": "commit"}, {"oid": "9096e8c4ab4b6a0e69a3f936dbe6a00932fab7d5", "url": "https://github.com/elastic/elasticsearch/commit/9096e8c4ab4b6a0e69a3f936dbe6a00932fab7d5", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd data streams.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:10:46Z", "type": "commit"}, {"oid": "668361ac732723ac8cf4adc7f9dc64f32483095c", "url": "https://github.com/elastic/elasticsearch/commit/668361ac732723ac8cf4adc7f9dc64f32483095c", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nChange `my_backup` to `my_repository`.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T15:11:14Z", "type": "commit"}, {"oid": "2d69789b60b38e6838d46dd45e4ad607a3f76da6", "url": "https://github.com/elastic/elasticsearch/commit/2d69789b60b38e6838d46dd45e4ad607a3f76da6", "message": "Update docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc\r\n\r\nAdd description of boolean options for `wait_for_completion` parameter.\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:07:58Z", "type": "commit"}, {"oid": "f3227d7aaf37f57f10531dcdc384bb68dc0ee890", "url": "https://github.com/elastic/elasticsearch/commit/f3227d7aaf37f57f10531dcdc384bb68dc0ee890", "message": "Change command --> response\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:08:51Z", "type": "commit"}, {"oid": "d6963d0d2ab295bac5729a43a84dd3217c726bd8", "url": "https://github.com/elastic/elasticsearch/commit/d6963d0d2ab295bac5729a43a84dd3217c726bd8", "message": "Clarify `indices` parameter description\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:10:36Z", "type": "commit"}, {"oid": "308f7cd0309b567a4ec42c83692375ffd15860c5", "url": "https://github.com/elastic/elasticsearch/commit/308f7cd0309b567a4ec42c83692375ffd15860c5", "message": "Update `ignore-unavailable` parameter description\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:12:52Z", "type": "commit"}, {"oid": "09cbbc6417f534d69a1b8b0aeecaf1fdaa291efe", "url": "https://github.com/elastic/elasticsearch/commit/09cbbc6417f534d69a1b8b0aeecaf1fdaa291efe", "message": "Reword example description\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:14:09Z", "type": "commit"}, {"oid": "1ee2c92728a557f54e89869fd76417cf621f5e8a", "url": "https://github.com/elastic/elasticsearch/commit/1ee2c92728a557f54e89869fd76417cf621f5e8a", "message": "Remove \"index\" from API name\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T16:14:53Z", "type": "commit"}, {"oid": "15afcb8dceae6424c9fc2afb923f50ffdb73180a", "url": "https://github.com/elastic/elasticsearch/commit/15afcb8dceae6424c9fc2afb923f50ffdb73180a", "message": "Incorporating review comments from James R.", "committedDate": "2020-06-25T18:34:08Z", "type": "commit"}, {"oid": "40bf91b9fe7f17cd43889b526f1cbdda5ee0f4ed", "url": "https://github.com/elastic/elasticsearch/commit/40bf91b9fe7f17cd43889b526f1cbdda5ee0f4ed", "message": "Adding a much better request + response\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T18:35:02Z", "type": "commit"}, {"oid": "3d6ff77961606c27b28416b9acfd60d52859668c", "url": "https://github.com/elastic/elasticsearch/commit/3d6ff77961606c27b28416b9acfd60d52859668c", "message": "Clarify `include_global_state` description\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-25T18:37:27Z", "type": "commit"}, {"oid": "c45bfe32816c26d93188eed1c3a79b735c8f12d9", "url": "https://github.com/elastic/elasticsearch/commit/c45bfe32816c26d93188eed1c3a79b735c8f12d9", "message": "Merge branch 'master' into docs__create-snapshot-api-docs", "committedDate": "2020-06-25T20:03:21Z", "type": "commit"}, {"oid": "cffce470fa6d173f07360a485b1e265e9c0f47ad", "url": "https://github.com/elastic/elasticsearch/commit/cffce470fa6d173f07360a485b1e265e9c0f47ad", "message": "Incorporating additional edits.", "committedDate": "2020-06-25T20:21:41Z", "type": "commit"}, {"oid": "8509d0566a4c0761791816788fb383782a95822f", "url": "https://github.com/elastic/elasticsearch/commit/8509d0566a4c0761791816788fb383782a95822f", "message": "Changing my_backup to my_repository in example.", "committedDate": "2020-06-25T21:35:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2MTc3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446161771", "bodyText": "It looks like the docs CI is failing because this snapshot doesn't finish before the example at the bottom starts. You can spoof the wait_for_completion query param using a // TEST comment.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [source,console]\n          \n          \n            \n            -----------------------------------\n          \n          \n            \n            PUT /_snapshot/my_repository/my_snapshot\n          \n          \n            \n            -----------------------------------\n          \n          \n            \n            [source,console]\n          \n          \n            \n            -----------------------------------\n          \n          \n            \n            PUT /_snapshot/my_repository/my_snapshot\n          \n          \n            \n            -----------------------------------\n          \n          \n            \n            // TEST[s/my_snapshot/my_snapshot?wait_for_completion=true/]", "author": "jrodewig", "createdAt": "2020-06-26T12:46:25Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,190 @@\n+[[create-snapshot-api]]\n+=== Create snapshot API\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++\n+\n+Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and\n+indices.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository/my_snapshot\n+-----------------------------------", "originalCommit": "8509d0566a4c0761791816788fb383782a95822f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2MjcyNw==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446162727", "bodyText": "I didn't notice this earlier, but it looks like this response includes a version_id and version. This won't cause problems on the master branch, but it'll fail as soon as it's ported to any other branches.\nThe suggestion below replaces the version properties with variables and fixes them with // TESTRESPONSE comments.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [source,console-result]\n          \n          \n            \n            ----\n          \n          \n            \n            {\n          \n          \n            \n              \"snapshot\": {\n          \n          \n            \n                \"snapshot\": \"snapshot_2\",\n          \n          \n            \n                \"uuid\": \"vdRctLCxSketdKb54xw67g\",\n          \n          \n            \n                \"version_id\": 8000099,\n          \n          \n            \n                \"version\": \"8.0.0\",\n          \n          \n            \n                \"indices\": [],\n          \n          \n            \n                \"data_streams\": [],\n          \n          \n            \n                \"include_global_state\": false,\n          \n          \n            \n                \"metadata\": {\n          \n          \n            \n                  \"taken_by\": \"user123\",\n          \n          \n            \n                  \"taken_because\": \"backup before upgrading\"\n          \n          \n            \n                },\n          \n          \n            \n                \"state\": \"SUCCESS\",\n          \n          \n            \n                \"start_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"start_time_in_millis\": 1593093628850,\n          \n          \n            \n                \"end_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"end_time_in_millis\": 1593094752018,\n          \n          \n            \n                \"duration_in_millis\": 0,\n          \n          \n            \n                \"failures\": [],\n          \n          \n            \n                \"shards\": {\n          \n          \n            \n                  \"total\": 0,\n          \n          \n            \n                  \"failed\": 0,\n          \n          \n            \n                  \"successful\": 0\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            // TESTRESPONSE[s/\"uuid\": \"vdRctLCxSketdKb54xw67g\"/\"uuid\": $body.snapshot.uuid/]\n          \n          \n            \n            [source,console-result]\n          \n          \n            \n            ----\n          \n          \n            \n            {\n          \n          \n            \n              \"snapshot\": {\n          \n          \n            \n                \"snapshot\": \"snapshot_2\",\n          \n          \n            \n                \"uuid\": \"vdRctLCxSketdKb54xw67g\",\n          \n          \n            \n                \"version_id\": <version_id>,\n          \n          \n            \n                \"version\": <version>,\n          \n          \n            \n                \"indices\": [],\n          \n          \n            \n                \"data_streams\": [],\n          \n          \n            \n                \"include_global_state\": false,\n          \n          \n            \n                \"metadata\": {\n          \n          \n            \n                  \"taken_by\": \"user123\",\n          \n          \n            \n                  \"taken_because\": \"backup before upgrading\"\n          \n          \n            \n                },\n          \n          \n            \n                \"state\": \"SUCCESS\",\n          \n          \n            \n                \"start_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"start_time_in_millis\": 1593093628850,\n          \n          \n            \n                \"end_time\": \"2020-06-25T14:00:28.850Z\",\n          \n          \n            \n                \"end_time_in_millis\": 1593094752018,\n          \n          \n            \n                \"duration_in_millis\": 0,\n          \n          \n            \n                \"failures\": [],\n          \n          \n            \n                \"shards\": {\n          \n          \n            \n                  \"total\": 0,\n          \n          \n            \n                  \"failed\": 0,\n          \n          \n            \n                  \"successful\": 0\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            // TESTRESPONSE[s/\"uuid\": \"vdRctLCxSketdKb54xw67g\"/\"uuid\": $body.snapshot.uuid/]\n          \n          \n            \n            // TESTRESPONSE[s/\"version_id\": <version_id>/\"version_id\": $body.snapshot.version_id/]\n          \n          \n            \n            // TESTRESPONSE[s/\"version\": <version>/\"version\": $body.snapshot.version/]", "author": "jrodewig", "createdAt": "2020-06-26T12:48:26Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,190 @@\n+[[create-snapshot-api]]\n+=== Create snapshot API\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++\n+\n+Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and\n+indices.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository/my_snapshot\n+-----------------------------------\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`PUT /_snapshot/<repository>/<snapshot>`\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+You can use the create snapshot API to create a <<snapshot-restore,snapshot>>, which is a\n+backup taken from a running {es} cluster.\n+\n+By default, a snapshot includes all data streams and open indices in the\n+cluster, as well as the cluster state.  You can change this behavior by\n+specifying a list of data streams and indices to back up in the body of the\n+snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the data stream or index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+A snapshot represents a point-in-time view of the moment when the snapshot was created. No records that were added to a data stream or index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each data stream and index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to create. This name must be unique in the snapshot repository.\n+\n+[role=\"child_attributes\"]\n+[[create-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_unavailable`::\n+(Optional, boolean)\n+If `false`, the request returns an error for any data stream or index that is missing or closed. Defaults to `false`.\n++\n+If `true`, the request ignores data streams and indices in `indices` that are missing or closed.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to include in the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a snapshot includes all data streams and indices in the cluster. If this\n+argument is provided, the snapshot only includes the specified data streams and clusters.\n+\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `true`, the current cluster state is included in the snapshot.\n+Defaults to `true`.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<create-snapshot-api-partial,`partial`>> to `true`.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data. Metadata must be less than 1024 bytes.\n+\n+[[create-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows taking a partial snapshot of indices with unavailable shards.\n+\n+`settings`::\n+(Optional, object)\n+Sets snapshot settings for the repository in JSON or YAML format. See <<put-snapshot-repo-api-settings-param,`settings`>> in the Put snapshot repository API documentation.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+If `true`, the request returns a response when the snapshot is complete.\n+If `false`, the request returns a response when the snapshot initializes.\n+Defaults to `false`.\n++\n+NOTE: During snapshot initialization, information about all\n+previous snapshots is loaded into memory. In large repositories, this load time can cause requests to take several seconds (or even minutes) to return a response, even if the `wait_for_completion` parameter is `false`.\n+\n+[[create-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+The following request takes a snapshot of `index_1` and `index_2`.\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_1,index_2\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"user123\",\n+    \"taken_because\": \"backup before upgrading\"\n+  }\n+}\n+-----------------------------------\n+\n+The API returns the following response:\n+\n+[source,console-result]\n+----\n+{\n+  \"snapshot\": {\n+    \"snapshot\": \"snapshot_2\",\n+    \"uuid\": \"vdRctLCxSketdKb54xw67g\",\n+    \"version_id\": 8000099,\n+    \"version\": \"8.0.0\",\n+    \"indices\": [],\n+    \"data_streams\": [],\n+    \"include_global_state\": false,\n+    \"metadata\": {\n+      \"taken_by\": \"user123\",\n+      \"taken_because\": \"backup before upgrading\"\n+    },\n+    \"state\": \"SUCCESS\",\n+    \"start_time\": \"2020-06-25T14:00:28.850Z\",\n+    \"start_time_in_millis\": 1593093628850,\n+    \"end_time\": \"2020-06-25T14:00:28.850Z\",\n+    \"end_time_in_millis\": 1593094752018,\n+    \"duration_in_millis\": 0,\n+    \"failures\": [],\n+    \"shards\": {\n+      \"total\": 0,\n+      \"failed\": 0,\n+      \"successful\": 0\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"uuid\": \"vdRctLCxSketdKb54xw67g\"/\"uuid\": $body.snapshot.uuid/]", "originalCommit": "8509d0566a4c0761791816788fb383782a95822f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c89cdb56529e5559e3e5d8bd20a667e2a85e6951", "url": "https://github.com/elastic/elasticsearch/commit/c89cdb56529e5559e3e5d8bd20a667e2a85e6951", "message": "Update snippet test to avoid failures\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-26T15:06:34Z", "type": "commit"}, {"oid": "21beabeabca6d86a646d84ccf1c1040f99cd12b4", "url": "https://github.com/elastic/elasticsearch/commit/21beabeabca6d86a646d84ccf1c1040f99cd12b4", "message": "Update TESTRESPONSE snippets\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-26T15:07:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxMzI5NA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446413294", "bodyText": "Extra space. Line wrapping is also too long.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n          \n          \n            \n            The snapshot process is incremental. When creating a snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.", "author": "jrodewig", "createdAt": "2020-06-26T21:14:59Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[create-snapshot-api]]\n+=== Create snapshot API\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++\n+\n+Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and\n+indices.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository/my_snapshot\n+-----------------------------------\n+// TEST[s/my_snapshot/my_snapshot?wait_for_completion=true/]\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`PUT /_snapshot/<repository>/<snapshot>`\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+You can use the create snapshot API to create a <<snapshot-restore,snapshot>>, which is a\n+backup taken from a running {es} cluster.\n+\n+By default, a snapshot includes all data streams and open indices in the\n+cluster, as well as the cluster state.  You can change this behavior by\n+specifying a list of data streams and indices to back up in the body of the\n+snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.", "originalCommit": "21beabeabca6d86a646d84ccf1c1040f99cd12b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYxOA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446417618", "bodyText": "I tested this parameter, and it seems weird... you can throw any arbitrary object in there and it accepts it.\n@original-brownbear Any thoughts? I wonder if this is just a param that never got used. If so, we should maybe look at removing it.\nIn any case, I don't think this definition is accurate or makes sense. You shouldn't be able to overwrite snapshot repo settings from a snapshot.\nIf this is just an unused param, I wonder if we should A) not document it or B) document it with a warning that it doesn't do anything. I'd hate to see a user throw values in here expecting something to happen if it does nothing.", "author": "jrodewig", "createdAt": "2020-06-26T21:27:20Z", "path": "docs/reference/snapshot-restore/apis/create-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[create-snapshot-api]]\n+=== Create snapshot API\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++\n+\n+Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and\n+indices.\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+-----------------------------------\n+// TESTSETUP\n+////\n+\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_repository/my_snapshot\n+-----------------------------------\n+// TEST[s/my_snapshot/my_snapshot?wait_for_completion=true/]\n+\n+[[create-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`PUT /_snapshot/<repository>/<snapshot>`\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[create-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+You can use the create snapshot API to create a <<snapshot-restore,snapshot>>, which is a\n+backup taken from a running {es} cluster.\n+\n+By default, a snapshot includes all data streams and open indices in the\n+cluster, as well as the cluster state.  You can change this behavior by\n+specifying a list of data streams and indices to back up in the body of the\n+snapshot request.\n+\n+NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.\n+\n+The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the data stream or index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.\n+\n+A snapshot represents a point-in-time view of the moment when the snapshot was created. No records that were added to a data stream or index after the snapshot process started will be present in the snapshot.\n+\n+For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.\n+\n+IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.\n+\n+Besides creating a copy of each data stream and index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n+\n+[[create-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to create a snapshot in.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to create. This name must be unique in the snapshot repository.\n+\n+[role=\"child_attributes\"]\n+[[create-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_unavailable`::\n+(Optional, boolean)\n+If `false`, the request returns an error for any data stream or index that is missing or closed. Defaults to `false`.\n++\n+If `true`, the request ignores data streams and indices in `indices` that are missing or closed.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to include in the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a snapshot includes all data streams and indices in the cluster. If this\n+argument is provided, the snapshot only includes the specified data streams and clusters.\n+\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `true`, the current cluster state is included in the snapshot.\n+Defaults to `true`.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<create-snapshot-api-partial,`partial`>> to `true`.\n+\n+include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n+\n+`metadata`::\n+(Optional, string)\n+Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data. Metadata must be less than 1024 bytes.\n+\n+[[create-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows taking a partial snapshot of indices with unavailable shards.\n+\n+`settings`::\n+(Optional, object)\n+Sets snapshot settings for the repository in JSON or YAML format. See <<put-snapshot-repo-api-settings-param,`settings`>> in the Put snapshot repository API documentation.", "originalCommit": "21beabeabca6d86a646d84ccf1c1040f99cd12b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4ODkwNA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446888904", "bodyText": "If this is just an unused param, I wonder if we should A) not document it or B) document it with a warning that it doesn't do anything. I'd hate to see a user throw values in here expecting something to happen if it does nothing.\n\nSorry for the delay here. You're right ... this parameter doesn't do anything at the moment (I'll look into removing it). IMO, we probably should just not document it. Was it ever documented in the first place even?", "author": "original-brownbear", "createdAt": "2020-06-29T11:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzU2OA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r446923568", "bodyText": "#58661", "author": "original-brownbear", "createdAt": "2020-06-29T12:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MjYyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r447172621", "bodyText": "Thanks @jrodewig for testing this parameter, and @original-brownbear for confirming that we can remove it. With that parameter removed, I think that this PR is ready to merge.", "author": "lockewritesdocs", "createdAt": "2020-06-29T18:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3NTYxOA==", "url": "https://github.com/elastic/elasticsearch/pull/58519#discussion_r447175618", "bodyText": "Agree. Thanks for taking this one to the finish line @lockewritesdocs.", "author": "jrodewig", "createdAt": "2020-06-29T18:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYxOA=="}], "type": "inlineReview"}, {"oid": "a34327397ba842ce0c44c2edfd3eb58363de4ceb", "url": "https://github.com/elastic/elasticsearch/commit/a34327397ba842ce0c44c2edfd3eb58363de4ceb", "message": "Remove errant space\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-26T22:37:02Z", "type": "commit"}, {"oid": "cfb51409b7c49bd04a406123a50c42091328742b", "url": "https://github.com/elastic/elasticsearch/commit/cfb51409b7c49bd04a406123a50c42091328742b", "message": "Removing the  parameter per reviewer comments.", "committedDate": "2020-06-29T18:32:56Z", "type": "commit"}]}