{"pr_number": 53082, "pr_title": "SQL: transfer version compatibility decision to the server", "pr_createdAt": "2020-03-03T20:47:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53082", "timeline": [{"oid": "40bb649e0b00a6b79c7d52af8a3367ee4b63455b", "url": "https://github.com/elastic/elasticsearch/commit/40bb649e0b00a6b79c7d52af8a3367ee4b63455b", "message": "add a new version request object parameter\n\nThis commit adds a new request object field, \"request_version\",\ncontaining the version of the requesting client. This parameter is\nnow accepted by the server and the request is validated against it.\nCurrently server's and client's versions need to be equal in order for\nthe request to be accepted.", "committedDate": "2020-02-27T08:48:49Z", "type": "commit"}, {"oid": "3c89600ecaa4610e2fccdf3c7747f55a4f9b88bb", "url": "https://github.com/elastic/elasticsearch/commit/3c89600ecaa4610e2fccdf3c7747f55a4f9b88bb", "message": "refactor 'clientVersion' to 'version'; more tests\n\n- change 'clientVersion' to 'version' in function names and members;\n- add testing for the validation of client's version.", "committedDate": "2020-02-28T20:34:40Z", "type": "commit"}, {"oid": "9e8606e37add817b7c9f6b8ce67cf83ef3a6274a", "url": "https://github.com/elastic/elasticsearch/commit/9e8606e37add817b7c9f6b8ce67cf83ef3a6274a", "message": "propagate the 'client_version' to more tests\n\nAdd the new 'client_version' field into the tests.\n\nAlso:\n- add the 'client_version' field into proto/SqlClearCursorRequest.java\nbuilder.\n- remove one unused member (ConnectionConfiguration.java:CLIENT_ID).", "committedDate": "2020-03-02T21:30:10Z", "type": "commit"}, {"oid": "721239cf698674c5ac2a21dee8cf89d7606b31cc", "url": "https://github.com/elastic/elasticsearch/commit/721239cf698674c5ac2a21dee8cf89d7606b31cc", "message": "update version checking. update tests\n\nThis commit updates the clients to only check server's version against a\nlower bound: the server needs to always be on a higher version than the\nclient.\n\nThe server now enforces the version backwards compatibility. Currently,\nthe versions still need to be in lockstep. Laxing this would be part of\nfuture work.\n\nThe tests are updated to reflect the policy change and to have the\nversion always included in query requests.", "committedDate": "2020-03-03T19:00:22Z", "type": "commit"}, {"oid": "3fffe2be729654880a8fba8839317f9909999c5f", "url": "https://github.com/elastic/elasticsearch/commit/3fffe2be729654880a8fba8839317f9909999c5f", "message": "further tests fixing\n\n- add the version field into the request object of more tests", "committedDate": "2020-03-03T20:12:44Z", "type": "commit"}, {"oid": "33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "url": "https://github.com/elastic/elasticsearch/commit/33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "message": "Merge branch 'master' into feat/add_version_request_field", "committedDate": "2020-03-04T07:13:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzNjc0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387536747", "bodyText": "I don't see the usefulness of this method tbh. Mode is an enum, and there is only one CLI type of mode. Why not keeping the == Mode.CLI? Things are different for isDriver where is a double check, but for CLI why?", "author": "astefan", "createdAt": "2020-03-04T09:18:38Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/Mode.java", "diffHunk": "@@ -33,4 +33,9 @@ public String toString() {\n     public static boolean isDriver(Mode mode) {\n         return mode == JDBC || mode == ODBC;\n     }\n+\n+    // TODO: replace all \"== Mode.CLI\"?\n+    public static boolean isCli(Mode mode) {", "originalCommit": "33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387655481", "bodyText": "In many cases the code look like Mode.isDriver(mode) || mode == Mode.CLI and Mode.isDriver(mode) || Mode.isCli(mode) looked more consistent to me. I got to it from a first thought of adding a Mode.isStrictClient() to check for all drivers+cli (since we treat those grouped in many cases). Irrespective of that, though, if Mode being an enum is to be considered, one would either stick to mode == Mode.JDBC || mode == Mode.jdbc || mode == Mode.CLI or the two methods wrapping, IMO.\nHowever, this isn't a strictly necessary refactoring, it is subjective and I'll happily change it back if you still think the old way is better (just \ud83d\udc4d this comment).", "author": "bpintea", "createdAt": "2020-03-04T13:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzNjc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NDkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387564913", "bodyText": "Why was this changed?", "author": "astefan", "createdAt": "2020-03-04T10:08:08Z", "path": "x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n     public void testProperConnection() throws Exception {\n         HttpClient httpClient = mock(HttpClient.class);\n-        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(),\n+        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), Version.CURRENT.toString(),", "originalCommit": "33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387655629", "bodyText": "The class has been making use of the client.Version class already. Using two Version versions is not strictly needed anymore. Before this PR client.Version.toString() behaved differently than elasticsearch.Version.toString(), but this has been changed (old behavior is still available in client.Version.versionString(), but that's not used anywhere atm.)", "author": "bpintea", "createdAt": "2020-03-04T13:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NDkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2OTY3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387569675", "bodyText": "I think we should check the error message itself, as well.", "author": "astefan", "createdAt": "2020-03-04T10:16:38Z", "path": "x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java", "diffHunk": "@@ -44,6 +44,31 @@ public void testConnection() throws Exception {\n     }\n \n     public void testWrongServerVersion() throws Exception {\n+        HttpClient httpClient = mock(HttpClient.class);\n+        byte minor;\n+        byte major;\n+        if (randomBoolean()) {\n+            if (Version.CURRENT.minor <= 0) {\n+                minor = Version.REVISION_MULTIPLIER - 1;\n+                major = (byte)(Version.CURRENT.major - 1);\n+            } else {\n+                minor = (byte) (Version.CURRENT.minor - 1);\n+                major = Version.CURRENT.major;\n+            }\n+        } else {\n+            minor = Version.CURRENT.minor;\n+            major = (byte) (Version.CURRENT.major - 1);\n+        }\n+        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5),\n+                Version.fromString(major + \".\" + minor + \".23\").toString(),\n+                ClusterName.DEFAULT.value(), UUIDs.randomBase64UUID()));\n+        CliSession cliSession = new CliSession(httpClient);\n+        expectThrows(ClientException.class, cliSession::checkConnection);", "originalCommit": "33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387655558", "bodyText": "Sure. Neither of the already defined tests check the message, but I'll look into adding it.", "author": "bpintea", "createdAt": "2020-03-04T13:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2OTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MjExNw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387792117", "bodyText": "added.", "author": "bpintea", "createdAt": "2020-03-04T16:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2OTY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5Mjk1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387592952", "bodyText": "Maybe call this version something different. For example, in AbstractFieldHitExtractor we have SWITCHED_FROM_DOCVALUES_TO_SOURCE_EXTRACTION. Does it make sense to have this one called ENFORCED_CLIENT_VERSION_PARAMETER?", "author": "astefan", "createdAt": "2020-03-04T10:58:59Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/Version.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.proto;\n+\n+import java.security.InvalidParameterException;\n+\n+public class Version implements Comparable<Version>{\n+\n+    public final int id;\n+    public final String version; // originally provided String representation\n+    public final byte major;\n+    public final byte minor;\n+    public final byte revision;\n+\n+    public static final int REVISION_MULTIPLIER = 100;\n+    public static final int MINOR_MULTIPLIER = REVISION_MULTIPLIER * REVISION_MULTIPLIER;\n+    public static final int MAJOR_MULTIPLIER = REVISION_MULTIPLIER * MINOR_MULTIPLIER;\n+\n+\n+\n+    public static final Version V_7_7_0 = new Version(7, 7, 0);", "originalCommit": "33bcd3d5164c6da825ab88cb08f3f0382ea6ca35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTQzMA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387655430", "bodyText": "It could make sense, yes, but I imagine that we'll need to log a new version here with each \"breaking\" change we add in the protocol. If we'd instrument somehow these changes, referring to the versions by their number might be easier. But we could also refer to the versions by a name that conveys the gist of the breaking change, true. Wdyt?", "author": "bpintea", "createdAt": "2020-03-04T13:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5Mjk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzA5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387897097", "bodyText": "While I would prefer a name, I think using the versions gives us excellent flexibility in the long term. I'd opt towards adding a comment plus an utility method (that uses the field internally) with a verbose name:\npublic boolean supportsVersioning(Version version) {\n  return version.compareTo(V_7_...) >= 0;\n}", "author": "costin", "createdAt": "2020-03-04T19:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5Mjk1Mg=="}], "type": "inlineReview"}, {"oid": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "url": "https://github.com/elastic/elasticsearch/commit/1058b72cad5ac4f50bb54bed64d8157a58c3674a", "message": "update renamed method assertThrows\n\ns/assertThrows/assertRequestBuilderThrows as per #52582", "committedDate": "2020-03-04T12:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMzE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387713160", "bodyText": "should it be version(m) here?", "author": "matriv", "createdAt": "2020-03-04T14:47:16Z", "path": "x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java", "diffHunk": "@@ -233,15 +237,16 @@ public void testHijackScrollFails() throws Exception {\n \n         String mode = randomMode();\n         Map<String, Object> adminResponse = RestActions.runSql(null,\n-                new StringEntity(\"{\\\"query\\\": \\\"SELECT * FROM test\\\", \\\"fetch_size\\\": 1\" + mode(mode) + \"}\",\n+                new StringEntity(\"{\\\"query\\\": \\\"SELECT * FROM test\\\", \\\"fetch_size\\\": 1\" + mode(mode) + version(mode) + \"}\",\n                         ContentType.APPLICATION_JSON), mode);\n \n         String cursor = (String) adminResponse.remove(\"cursor\");\n         assertNotNull(cursor);\n \n         final String m = randomMode();\n         ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql(\"full_access\",\n-                new StringEntity(\"{\\\"cursor\\\":\\\"\" + cursor + \"\\\"\" + mode(m) + \"}\", ContentType.APPLICATION_JSON), m));\n+                new StringEntity(\"{\\\"cursor\\\":\\\"\" + cursor + \"\\\"\" + mode(m) + version(mode) + \"}\", ContentType.APPLICATION_JSON),", "originalCommit": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTI5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387791291", "bodyText": "nice catch, thanks. fixed.", "author": "bpintea", "createdAt": "2020-03-04T16:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMzE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMzY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387713641", "bodyText": "maybe mode(\"odbc\") as well (also below)?", "author": "matriv", "createdAt": "2020-03-04T14:47:59Z", "path": "x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/RestSqlIT.java", "diffHunk": "@@ -42,16 +42,16 @@ public void testErrorMessageForTranslatingSQLCommandStatement() throws IOExcepti\n \n     public void testErrorMessageForInvalidParamDataType() throws IOException {\n         expectBadRequest(() -> runTranslateSql(\n-            \"{\\\"query\\\":\\\"SELECT null WHERE 0 = ? \\\", \\\"mode\\\": \\\"odbc\\\", \\\"params\\\":[{\\\"type\\\":\\\"invalid\\\", \\\"value\\\":\\\"irrelevant\\\"}]}\"\n-            ),\n+            \"{\\\"query\\\":\\\"SELECT null WHERE 0 = ? \\\", \\\"mode\\\": \\\"odbc\\\" \" + version(\"odbc\") +", "originalCommit": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTM3NA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387791374", "bodyText": "makes sense, fixed.", "author": "bpintea", "createdAt": "2020-03-04T16:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMzY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNjU4OA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387716588", "bodyText": "since you use writeOptionalString no need for null check.", "author": "matriv", "createdAt": "2020-03-04T14:52:25Z", "path": "x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlRequest.java", "diffHunk": "@@ -56,8 +58,9 @@ public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n         out.writeEnum(requestInfo.mode());\n         out.writeOptionalString(requestInfo.clientId());\n+        out.writeOptionalString(requestInfo.version() == null ? null : requestInfo.version().toString());", "originalCommit": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NTczMw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387795733", "bodyText": "the check is there for the .toString() to be safe.", "author": "bpintea", "createdAt": "2020-03-04T16:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNjU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5OTY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387799652", "bodyText": "ah yep, I see, thx!", "author": "matriv", "createdAt": "2020-03-04T16:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNjU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNzQwMg==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387717402", "bodyText": "Why is it null here?", "author": "matriv", "createdAt": "2020-03-04T14:53:36Z", "path": "x-pack/plugin/sql/sql-action/src/test/java/org/elasticsearch/xpack/sql/action/SqlRequestParsersTests.java", "diffHunk": "@@ -66,10 +68,11 @@ public void testClearCursorRequestParser() throws IOException {\n         assertNull(request.clientId());\n         assertEquals(Mode.PLAIN, request.mode());\n         assertEquals(\"whatever\", request.getCursor());\n-        \n-        request = generateRequest(\"{\\\"cursor\\\" : \\\"whatever\\\", \\\"client_id\\\" : \\\"CLI\\\"}\",\n+\n+        request = generateRequest(\"{\\\"cursor\\\" : \\\"whatever\\\", \\\"client_id\\\" : \\\"CLI\\\", \\\"client_version\\\": \\\"1.2.3\\\"}\",\n                 SqlClearCursorRequest::fromXContent);\n         assertNull(request.clientId());\n+        assertNull(request.version());", "originalCommit": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTk1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387791959", "bodyText": "b/c the parser for SqlClearCursorRequest doesn't set these fields.", "author": "bpintea", "createdAt": "2020-03-04T16:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNzQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDAxNA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387720014", "bodyText": "nit: please keep one or two empy lines.", "author": "matriv", "createdAt": "2020-03-04T14:57:30Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/Version.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.proto;\n+\n+import java.security.InvalidParameterException;\n+\n+public class Version implements Comparable<Version>{\n+\n+    public final int id;\n+    public final String version; // originally provided String representation\n+    public final byte major;\n+    public final byte minor;\n+    public final byte revision;\n+\n+    public static final int REVISION_MULTIPLIER = 100;\n+    public static final int MINOR_MULTIPLIER = REVISION_MULTIPLIER * REVISION_MULTIPLIER;\n+    public static final int MAJOR_MULTIPLIER = REVISION_MULTIPLIER * MINOR_MULTIPLIER;\n+\n+", "originalCommit": "1058b72cad5ac4f50bb54bed64d8157a58c3674a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387791543", "bodyText": "sure. (i'm trying not to commit whitespace editor \"fixes\" - as everybody, prolly - and this one slipped through.)", "author": "bpintea", "createdAt": "2020-03-04T16:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDAxNA=="}], "type": "inlineReview"}, {"oid": "c5e108014285b912bab3359c797168bb369113a3", "url": "https://github.com/elastic/elasticsearch/commit/c5e108014285b912bab3359c797168bb369113a3", "message": "address review notes\n\n- add exception message testing;\n- remove superfluous empty lines;\n- fix redefinition of mode string;", "committedDate": "2020-03-04T16:39:01Z", "type": "commit"}, {"oid": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "url": "https://github.com/elastic/elasticsearch/commit/e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "message": "Merge branch 'master' into feat/add_version_request_field", "committedDate": "2020-03-04T16:51:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MTM3OA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387881378", "bodyText": "It's worth adding an utility (or two) to handle the query wrapping:\n\none to add mode() and version at the end as parameters\nanother to wrap the given string in a query with the {\\\"query\\\", escaped quotes and everything else.", "author": "costin", "createdAt": "2020-03-04T19:22:21Z", "path": "x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java", "diffHunk": "@@ -110,7 +111,7 @@ private void assertCount(RestClient client, int count) throws IOException {\n         expected.put(\"rows\", singletonList(singletonList(count)));\n \n         Request request = new Request(\"POST\", SQL_QUERY_REST_ENDPOINT);\n-        request.setJsonEntity(\"{\\\"query\\\": \\\"SELECT COUNT(*) FROM test\\\"\" + mode(mode) + \"}\");\n+        request.setJsonEntity(\"{\\\"query\\\": \\\"SELECT COUNT(*) FROM test\\\"\" + mode(mode) + version(mode) + \"}\");", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901010", "bodyText": "That's true. And the fact that the queries are \"manually\" build can lead to more work whenever the fields list is updated. I've had a stab at mimicking SqlQueryRequestBuilder's interface at building requests and apply the change through the tests here, but the change is a bit larger, and it might be worth having a separate PR?", "author": "bpintea", "createdAt": "2020-03-06T13:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MTM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MTYyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387881625", "bodyText": "Same comment as above, it applies in other places but I won't repeat it.", "author": "costin", "createdAt": "2020-03-04T19:22:46Z", "path": "x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java", "diffHunk": "@@ -70,10 +71,10 @@ public void expectMatchesAdmin(String adminSql, String user, String userSql) thr\n         public void expectScrollMatchesAdmin(String adminSql, String user, String userSql) throws Exception {\n             String mode = randomMode();\n             Map<String, Object> adminResponse = runSql(null,\n-                    new StringEntity(\"{\\\"query\\\": \\\"\" + adminSql + \"\\\", \\\"fetch_size\\\": 1\" + mode(mode) + \"}\",\n+                    new StringEntity(\"{\\\"query\\\": \\\"\" + adminSql + \"\\\", \\\"fetch_size\\\": 1\" + mode(mode) + version(mode) + \"}\",", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387882574", "bodyText": "Mode.isCli doesn't add much value and since Mode.isDriver() || Mode.isCli is a common pattern, it's worth wrapping that into its own method: Mode.isInternalClient or Mode.isDedicatedClient or Mode.isSqlClient to differentiate between our \"own\" clients and everything else.", "author": "costin", "createdAt": "2020-03-04T19:24:28Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java", "diffHunk": "@@ -252,14 +253,13 @@ private void assertQuery(String sql, String columnName, String columnType, Objec\n \n         // randomize binary response enforcement for drivers (ODBC/JDBC) and CLI\n         boolean binaryCommunication = randomBoolean();\n-        Mode m = Mode.fromString(mode);\n         if (randomBoolean()) {\n             // set it explicitly or leave the default (null) as is\n             requestContent = new StringBuilder(requestContent)\n                     .insert(requestContent.length() - 1, \",\\\"binary_format\\\":\" + binaryCommunication).toString();\n-            binaryCommunication = ((Mode.isDriver(m) || m == Mode.CLI) && binaryCommunication);\n+            binaryCommunication = ((Mode.isDriver(mode) || Mode.isCli(mode)) && binaryCommunication);", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901091", "bodyText": "Agreed, fixed it.", "author": "bpintea", "createdAt": "2020-03-06T13:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4Mjg5MA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387882890", "bodyText": "\ud83d\udc4d", "author": "costin", "createdAt": "2020-03-04T19:25:02Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlUsageTestCase.java", "diffHunk": "@@ -255,18 +256,18 @@ private void runTranslate(String sql) throws IOException {\n     }\n     \n     private void runSql(String sql) throws IOException {\n-        String mode = Mode.PLAIN.toString();\n+        Mode mode = Mode.PLAIN;\n         if (clientType.equals(ClientType.JDBC.toString())) {\n-            mode = Mode.JDBC.toString();\n+            mode = Mode.JDBC;\n         } else if (clientType.startsWith(ClientType.ODBC.toString())) {\n-            mode = Mode.ODBC.toString();\n+            mode = Mode.ODBC;\n         } else if (clientType.equals(ClientType.CLI.toString())) {\n-            mode = Mode.CLI.toString();\n+            mode = Mode.CLI;\n         }\n \n-        runSql(mode, clientType, sql);\n+        runSql(mode.toString(), clientType, sql);", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4Mzk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387883974", "bodyText": "I would just say version since all parameters are client specific. client_id has is as such since just id would have been too cryptic.\nThere's no client_mode, or client_params so why client_verision.\nIn fact, if anything we could change client_id to drop the prefix by using a different word: something like fingerprint or info (too loose).", "author": "costin", "createdAt": "2020-03-04T19:27:02Z", "path": "x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlQueryRequest.java", "diffHunk": "@@ -57,6 +63,7 @@\n     static final ParseField FILTER = new ParseField(\"filter\");\n     static final ParseField MODE = new ParseField(\"mode\");\n     static final ParseField CLIENT_ID = new ParseField(\"client_id\");\n+    static final ParseField CLIENT_VERSION = new ParseField(\"client_version\");", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901159", "bodyText": "Makes sense, fixed it.", "author": "bpintea", "createdAt": "2020-03-06T13:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4Mzk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387887126", "bodyText": "It seems this constructor is used everywhere using Version.CURRENT - maybe it makes sense to automatically initialize version when Mode is passed instead of setting it as null.\nAs it stands the constructor initializes Version twice.", "author": "costin", "createdAt": "2020-03-04T19:32:30Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/RequestInfo.java", "diffHunk": "@@ -35,14 +35,25 @@\n     \n     private Mode mode;\n     private String clientId;\n-    \n+    private Version version;\n+\n     public RequestInfo(Mode mode) {\n-        this(mode, null);\n+        this(mode, null, null);\n     }\n     \n     public RequestInfo(Mode mode, String clientId) {\n+        this(mode, clientId, null);\n+    }\n+\n+    public RequestInfo(Mode mode, String clientId, String version) {\n         mode(mode);\n         clientId(clientId);\n+        version(version);\n+    }\n+\n+    public RequestInfo(Mode mode, Version version) {", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTIwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901201", "bodyText": "As it stands the constructor initializes Version twice.\n\nAddressed this.\nBut auto-initialising along with Mode is not possible, since the CURRENT Version value is only available in client, but not in proto.", "author": "bpintea", "createdAt": "2020-03-06T13:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387887448", "bodyText": "Some constants for these strings would be nice.", "author": "costin", "createdAt": "2020-03-04T19:33:03Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/SqlQueryRequest.java", "diffHunk": "@@ -180,6 +180,9 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (clientId() != null) {\n             builder.field(\"client_id\", clientId());\n         }\n+        if (version() != null) {\n+            builder.field(\"client_version\", version().toString());", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901573", "bodyText": "Very much agreed. I would address this in a follow-up PR, thought, since these hardcoded strings are used extensively in tests?", "author": "bpintea", "createdAt": "2020-03-06T13:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODI2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387898267", "bodyText": "Functionally, this class is not another Version but a consumer of Version.\nIt has only isServerCompatible and jdbcMajor/Minor (which were added to this class since it was the only one but could be moved somewhere else).\nTry refactoring it to something else either a consumer:\nClientVersion(Version) { .. }\nor if there's no state, utility methods - ClientVersion/VersionUtils.isServerCompatible(version)`", "author": "costin", "createdAt": "2020-03-04T19:52:35Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/Version.java", "diffHunk": "@@ -16,37 +16,20 @@\n import java.util.jar.JarInputStream;\n import java.util.jar.Manifest;\n \n-public class Version {\n+public class Version extends org.elasticsearch.xpack.sql.proto.Version {", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTkzNw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388901937", "bodyText": "Sure. I've turned that class into a ClientVersion utility class.", "author": "bpintea", "createdAt": "2020-03-06T13:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMDM0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387900348", "bodyText": "The V_7_7_0 constant is leaking - encapsulate that into Version (which already has the constant) to something like Version.hasVersionCompatibility/isCompatible or something along those lines so the lines becomes:\nreturn server.isCompatible()", "author": "costin", "createdAt": "2020-03-04T19:56:33Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/Version.java", "diffHunk": "@@ -117,11 +100,21 @@ static Version extractVersion(URL url) {\n         return new Version(ver, hash, maj, min, rev);\n     }\n \n-    @Override\n-    public String toString() {\n+    public String versionString() {\n         return \"v\" + version + \" [\" + hash + \"]\";\n     }\n \n+    // This function helps ensure that a client won't attempt to communicate to a server with less features than its own. Since this check\n+    // is part of the client's start-up check that might not involve an actual SQL API request, the client has to do a bare version check\n+    // as well.\n+    public static boolean isServerCompatible(Version server) {\n+        // Starting with this version, the compatibility logic moved from the client to the server. Only relevant for 7.x releases.\n+        return server.compareTo(Version.V_7_7_0) >= 0", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMjk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r388902965", "bodyText": "took on your .hasVersionCompatibility() suggestion.", "author": "bpintea", "createdAt": "2020-03-06T13:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMDM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMDQzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r387900439", "bodyText": "See my comment on RequestInfo constructor.", "author": "costin", "createdAt": "2020-03-04T19:56:44Z", "path": "x-pack/plugin/sql/sql-client/src/test/java/org/elasticsearch/xpack/sql/client/HttpClientRequestTests.java", "diffHunk": "@@ -158,7 +158,7 @@ private void assertBinaryRequestForDrivers(boolean isBinary, XContentType xConte\n                 null,\n                 randomBoolean(),\n                 randomAlphaOfLength(128),\n-                new RequestInfo(mode),\n+                new RequestInfo(mode, Version.CURRENT),", "originalCommit": "e9567b9b7df5de78e6e33e9e8dc6b921b789f5d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "284faec7569070586d727183ee5eb243a3b944cb", "url": "https://github.com/elastic/elasticsearch/commit/284faec7569070586d727183ee5eb243a3b944cb", "message": "address review comments\n\n- change client.Version to a utility client.ClientVersion class;\n- rename proto.Version to proto.SqlVersion;\n- remove double initialization of 'version' in RequestInfo;\n- make V_7_7_0 version private and expose methods to compare versions\n  against that;\n- add a Mode.isDedicatedClient(), remove Mode.isCli();\n- renamed \"client_version\" field to just \"version\".", "committedDate": "2020-03-06T11:45:21Z", "type": "commit"}, {"oid": "a14065657358820caee62c016d7d5e0d0fd2c66d", "url": "https://github.com/elastic/elasticsearch/commit/a14065657358820caee62c016d7d5e0d0fd2c66d", "message": "erge branch 'feat/add_version_request_field' of github.com:bpintea/elasticsearch into feat/add_version_request_field", "committedDate": "2020-03-06T12:06:23Z", "type": "commit"}, {"oid": "a7d1226bf36d816aedc46795d3565e04508b29b1", "url": "https://github.com/elastic/elasticsearch/commit/a7d1226bf36d816aedc46795d3565e04508b29b1", "message": "add change skipped in last commit\n\n- VersionTests also updated with new ClientVersion class.", "committedDate": "2020-03-06T13:19:52Z", "type": "commit"}, {"oid": "d31abeb0557a79d8feee941833602a78fe31025f", "url": "https://github.com/elastic/elasticsearch/commit/d31abeb0557a79d8feee941833602a78fe31025f", "message": "adapt u-test to relaxed client-side version checks\n\nThe client now only makes sure that server's version is above a certain\nlimit (and not that that version is lower than own).", "committedDate": "2020-03-06T14:19:13Z", "type": "commit"}, {"oid": "6bcf6721722e61282ba627ea670846a51aa93a67", "url": "https://github.com/elastic/elasticsearch/commit/6bcf6721722e61282ba627ea670846a51aa93a67", "message": "Merge remote-tracking branch 'origin/master' into feat/add_version_request_field", "committedDate": "2020-03-06T14:53:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMDQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389210476", "bodyText": "Why wasn't this called here before? The code we had was a bug?", "author": "astefan", "createdAt": "2020-03-07T01:06:05Z", "path": "x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryRequest.java", "diffHunk": "@@ -72,7 +72,7 @@ public SqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuild\n \n     @Override\n     public ActionRequestValidationException validate() {\n-        ActionRequestValidationException validationException = null;\n+        ActionRequestValidationException validationException = super.validate();", "originalCommit": "6bcf6721722e61282ba627ea670846a51aa93a67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Njc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389246746", "bodyText": "The overridden function (in action/AbstractSqlQueryRequest.java) wasn't implemented before (and now it checks client's version).", "author": "bpintea", "createdAt": "2020-03-07T11:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMDQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389212362", "bodyText": "Why not using the same condition as above? Mode.isDedicatedClient(randomMode)", "author": "astefan", "createdAt": "2020-03-07T01:19:47Z", "path": "x-pack/plugin/sql/sql-action/src/test/java/org/elasticsearch/xpack/sql/action/SqlRequestParsersTests.java", "diffHunk": "@@ -119,12 +127,16 @@ public void testQueryRequestParser() throws IOException {\n         \n         SqlQueryRequest request = generateRequest(\"{\\\"cursor\\\" : \\\"whatever\\\", \\\"mode\\\" : \\\"\"\n                 + randomMode.toString() + \"\\\", \\\"client_id\\\" : \\\"bla\\\",\"\n+                + clientVersion\n                 + \"\\\"query\\\":\\\"select\\\",\"\n                 + \"\\\"params\\\":[\" + params + \"],\"\n                 + \" \\\"time_zone\\\":\\\"UTC\\\",\"\n                 + \"\\\"request_timeout\\\":\\\"5s\\\",\\\"page_timeout\\\":\\\"10s\\\"}\", SqlQueryRequest::fromXContent);\n         assertNull(request.clientId());\n         assertEquals(randomMode, request.mode());\n+        if (clientVersion.isEmpty() == false) {", "originalCommit": "6bcf6721722e61282ba627ea670846a51aa93a67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjczNw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389246737", "bodyText": "good point.", "author": "bpintea", "createdAt": "2020-03-07T11:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMzkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389213913", "bodyText": "Too many round brackets?", "author": "astefan", "createdAt": "2020-03-07T01:32:32Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -60,7 +60,7 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          */\n         String accept = null;\n \n-        if ((Mode.isDriver(sqlRequest.requestInfo().mode()) || sqlRequest.requestInfo().mode() == Mode.CLI)\n+        if ((Mode.isDedicatedClient(sqlRequest.requestInfo().mode()))", "originalCommit": "6bcf6721722e61282ba627ea670846a51aa93a67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Njc0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389246741", "bodyText": "thanks, fixed.", "author": "bpintea", "createdAt": "2020-03-07T11:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMzkxMw=="}], "type": "inlineReview"}, {"oid": "a471c541d31be8bdf6caf5b778bc217bf7c1b162", "url": "https://github.com/elastic/elasticsearch/commit/a471c541d31be8bdf6caf5b778bc217bf7c1b162", "message": "address review comments\n\n- remove extra brackets\n- replace condition from string checking to client type checking", "committedDate": "2020-03-07T11:03:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNjY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389406645", "bodyText": "Worth adding a javadoc to clarify the difference between ClientVersion, SqlVersion and Version.", "author": "costin", "createdAt": "2020-03-08T21:24:38Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -16,45 +18,17 @@\n import java.util.jar.JarInputStream;\n import java.util.jar.Manifest;\n \n-public class Version {\n-\n-    public static final Version CURRENT;\n-    public final String version;\n-    public final String hash;\n-    public final byte major;\n-    public final byte minor;\n-    public final byte revision;\n-\n-    private Version(String version, String hash, byte... parts) {\n-        this.version = version;\n-        this.hash = hash;\n-        this.major = parts[0];\n-        this.minor = parts[1];\n-        this.revision = parts[2];\n-    }\n-\n-    public static Version fromString(String version) {\n-        return new Version(version, \"Unknown\", from(version));\n-    }\n+public class ClientVersion {", "originalCommit": "a471c541d31be8bdf6caf5b778bc217bf7c1b162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNzg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389407870", "bodyText": "+1", "author": "matriv", "createdAt": "2020-03-08T21:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNjY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1MjgyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389552829", "bodyText": "I've added a short description for SqlVersion and ClientVersion. Hope it's enough, but could elaborate if felt as necessary.", "author": "bpintea", "createdAt": "2020-03-09T09:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNjY0NQ=="}], "type": "inlineReview"}, {"oid": "5926437983936bed8f99aced825652fef752d363", "url": "https://github.com/elastic/elasticsearch/commit/5926437983936bed8f99aced825652fef752d363", "message": "add javadoc on the *Version classes\n\nAdd short description of the SqlVersion and ClientVersion classes.", "committedDate": "2020-03-09T09:40:29Z", "type": "commit"}, {"oid": "ee904b3d8fdf513387f4ab734837001c906d5dbf", "url": "https://github.com/elastic/elasticsearch/commit/ee904b3d8fdf513387f4ab734837001c906d5dbf", "message": "fix javadoc reference\n\nfix ref to unavailable org.elasticsearch.Version class", "committedDate": "2020-03-09T10:07:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwOTUwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389709501", "bodyText": "That's a good way of wrapping two checks in the same one, but throughout the code in SQL (where there are many such checks) we do them separately: expectThrows and then another assertEquals on the exception message.\nI'm not saying you should change it, but the way it is now, it is inconsistent throughout sql code.", "author": "astefan", "createdAt": "2020-03-09T14:08:46Z", "path": "x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java", "diffHunk": "@@ -26,40 +27,58 @@\n \n     public void testProperConnection() throws Exception {\n         HttpClient httpClient = mock(HttpClient.class);\n-        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(),\n+        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), ClientVersion.CURRENT.toString(),\n                 ClusterName.DEFAULT.value(), UUIDs.randomBase64UUID()));\n         CliSession cliSession = new CliSession(httpClient);\n         cliSession.checkConnection();\n         verify(httpClient, times(1)).serverInfo();\n         verifyNoMoreInteractions(httpClient);\n     }\n \n+    public static <T extends Throwable> void expectThrows(Class<T> expectedType, ThrowingRunnable runnable, String exceptionMessage) {\n+        T throwable = expectThrows(expectedType, runnable);\n+        assertEquals(exceptionMessage, throwable.getMessage());\n+    }\n+\n     public void testConnection() throws Exception {\n         HttpClient httpClient = mock(HttpClient.class);\n         when(httpClient.serverInfo()).thenThrow(new SQLException(\"Cannot connect\"));\n         CliSession cliSession = new CliSession(httpClient);\n-        expectThrows(ClientException.class, cliSession::checkConnection);\n+        expectThrows(ClientException.class, cliSession::checkConnection, \"java.sql.SQLException: Cannot connect\");", "originalCommit": "ee904b3d8fdf513387f4ab734837001c906d5dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NjU2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389846567", "bodyText": "adjusted to keep consistency.", "author": "bpintea", "createdAt": "2020-03-09T17:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwOTUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTMxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389711311", "bodyText": "they're or they are in the sentence identifying the release their are part of.", "author": "astefan", "createdAt": "2020-03-09T14:10:23Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -16,45 +18,25 @@\n import java.util.jar.JarInputStream;\n import java.util.jar.Manifest;\n \n-public class Version {\n-\n-    public static final Version CURRENT;\n-    public final String version;\n-    public final String hash;\n-    public final byte major;\n-    public final byte minor;\n-    public final byte revision;\n-\n-    private Version(String version, String hash, byte... parts) {\n-        this.version = version;\n-        this.hash = hash;\n-        this.major = parts[0];\n-        this.minor = parts[1];\n-        this.revision = parts[2];\n-    }\n-\n-    public static Version fromString(String version) {\n-        return new Version(version, \"Unknown\", from(version));\n-    }\n+/**\n+ * Clients-specific version utility class.\n+ * <p>\n+ *     The class provides the SQL clients the version identifying the release their are part of. The version is read from the encompassing", "originalCommit": "ee904b3d8fdf513387f4ab734837001c906d5dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NjQxMw==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389846413", "bodyText": "thanks, fixed.", "author": "bpintea", "createdAt": "2020-03-09T17:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMzQxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53082#discussion_r389713415", "bodyText": "return isDriver(mode) || mode == CLI", "author": "astefan", "createdAt": "2020-03-09T14:12:12Z", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/Mode.java", "diffHunk": "@@ -33,4 +33,8 @@ public String toString() {\n     public static boolean isDriver(Mode mode) {\n         return mode == JDBC || mode == ODBC;\n     }\n+\n+    public static boolean isDedicatedClient(Mode mode) {\n+        return mode == JDBC || mode == ODBC || mode == CLI;", "originalCommit": "ee904b3d8fdf513387f4ab734837001c906d5dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "993113a1811e0e90b557a0df9ecc09e08b375d9d", "url": "https://github.com/elastic/elasticsearch/commit/993113a1811e0e90b557a0df9ecc09e08b375d9d", "message": "adress review comments\n\n- fix spelling\n- remove two-liner function", "committedDate": "2020-03-09T17:29:03Z", "type": "commit"}]}