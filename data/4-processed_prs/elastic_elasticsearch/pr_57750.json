{"pr_number": 57750, "pr_title": "DataStream creation validation allows for prefixed indices", "pr_createdAt": "2020-06-05T17:00:08Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57750", "timeline": [{"oid": "708ed5d79f30ed93395668bff47963a7bc32e468", "url": "https://github.com/elastic/elasticsearch/commit/708ed5d79f30ed93395668bff47963a7bc32e468", "message": "DataStream creation validation allows for prefixed indices\n\nWe want to validate the DataStreams on creation to make sure the future backing\nindices would not clash with existing indices in the system (so we can\nalways rollover the data stream).\nThis changes the validation logic to allow for a DataStream to be created\nwith a backing index that has a prefix (eg. `shrink-foo-000001`) even if the\nformer backing index (`foo-000001`) exists in the system.\nThe new validation logic will look for potential index conflicts with indices\nin the system that have the counter in the name greater than the data stream's\ngeneration.\n\nThis ensures that the `DataStream`'s future rollovers are safe because for a\n`DataStream` `foo` of generation 4, we will look for standalone indices in the\nform of `foo-%06d` with the counter greater than 4 (ie. validation will fail if\n`foo-000006` exists in the system), but will also allow replacing a\nbacking index with an index named by prefixing the backing index it replaces.", "committedDate": "2020-06-05T16:57:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwODA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436508058", "bodyText": "maybe only catch IllegalArgumentException here? Since these are the cases with specific failure logic, otherwise we would mask any other potential problem.", "author": "martijnvg", "createdAt": "2020-06-08T07:39:05Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1452,27 +1452,41 @@ public Metadata build() {\n             return indicesLookup;\n         }\n \n-        private void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup) {\n-            DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n+        /**\n+         * Validates there isn't any index with a name that would clash with the future backing indices of the existing data streams.\n+         *\n+         * For eg. if data stream `foo` has backing indices [`foo-000001`, `foo-000002`] and the indices lookup contains indices\n+         * `foo-000001`, `foo-000002` and `foo-000006` this will throw an IllegalStateException (as attempting to rollover the `foo` data\n+         * stream from generation 5 to 6 will not be possible)\n+         *\n+         * @param indicesLookup the indices in the system (this includes the data streams backing indices)\n+         * @param dsMetadata    the data streams in the system\n+         */\n+        static void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup, @Nullable DataStreamMetadata dsMetadata) {\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    SortedMap<String, IndexAbstraction> potentialConflicts =\n-                        indicesLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\"); // '.' is the char after '-'\n-                    if (potentialConflicts.size() != 0) {\n-                        List<String> indexNames = ds.getIndices().stream().map(Index::getName).collect(Collectors.toList());\n-                        List<String> conflicts = new ArrayList<>();\n-                        for (Map.Entry<String, IndexAbstraction> entry : potentialConflicts.entrySet()) {\n-                            if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX ||\n-                                indexNames.contains(entry.getKey()) == false) {\n-                                conflicts.add(entry.getKey());\n-                            }\n-                        }\n-\n-                        if (conflicts.size() > 0) {\n-                            throw new IllegalStateException(\"data stream [\" + ds.getName() +\n-                                \"] could create backing indices that conflict with \" + conflicts.size() + \" existing index(s) or alias(s)\" +\n-                                \" including '\" + conflicts.get(0) + \"'\");\n-                        }\n+                    Map<String, IndexAbstraction> conflicts =\n+                        indicesLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\") // '.' is the char after '-'\n+                            .entrySet().stream()\n+                            .filter(entry -> {\n+                                if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n+                                    return true;\n+                                } else {\n+                                    int indexNameCounter;\n+                                    try {\n+                                        indexNameCounter = IndexMetadata.parseIndexNameCounter(entry.getKey());\n+                                    } catch (Exception e) {", "originalCommit": "708ed5d79f30ed93395668bff47963a7bc32e468", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwODQwOA==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436508408", "bodyText": "maybe also add an assertThat that tests with shrink- prefix?", "author": "martijnvg", "createdAt": "2020-06-08T07:39:51Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexMetadataTests.java", "diffHunk": "@@ -331,4 +332,30 @@ public void testNumberOfReplicasIsNonNegative() {\n                 \"Failed to parse value [\" + numberOfReplicas + \"] for setting [index.number_of_replicas] must be >= 0\"));\n     }\n \n+    public void testParseIndexNameReturnsCounter() {\n+        assertThat(parseIndexNameCounter(\"logs-000003\"), is(3));", "originalCommit": "708ed5d79f30ed93395668bff47963a7bc32e468", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzI5OA==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436513298", "bodyText": "Perhaps just add a comment on why no failure is expected and let the exception bubble up?", "author": "martijnvg", "createdAt": "2020-06-08T07:50:05Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "diffHunk": "@@ -1078,6 +1080,148 @@ public void testSerialization() throws IOException {\n         assertTrue(Metadata.isGlobalStateEquals(orig, fromStreamMeta));\n     }\n \n+    public void testValidateDataStreamsNoConflicts() {\n+        Metadata metadata = createIndices(5, 10, \"foo-datastream\").metadata;\n+        try {\n+            validateDataStreams(metadata.getIndicesLookup(), (DataStreamMetadata) metadata.customs().get(DataStreamMetadata.TYPE));", "originalCommit": "708ed5d79f30ed93395668bff47963a7bc32e468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NjM5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436546391", "bodyText": "Is the aim of this change a better runtime experience in case the test fails? Or test readability?\nI think the fail message is providing the runtime context, and it will print it in case of failure (which should make debugging this straightforward).", "author": "andreidan", "createdAt": "2020-06-08T08:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0OTU1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436549559", "bodyText": "Currently when the test fails with any error then there is no stacktrace to the original failure, which I think makes pinpointing the culprit easier?\nThat being said, this is just preference, so feel free to ignore :)", "author": "martijnvg", "createdAt": "2020-06-08T08:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2MjI0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57750#discussion_r436562246", "bodyText": "TIL didn't realise it hides the cause of the failure. Made the change, thanks!", "author": "andreidan", "createdAt": "2020-06-08T09:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzI5OA=="}], "type": "inlineReview"}, {"oid": "52e0f80c55117d6d859f0c8b4353211091eb9130", "url": "https://github.com/elastic/elasticsearch/commit/52e0f80c55117d6d859f0c8b4353211091eb9130", "message": "Catch IllegalArgumentException and extra test.", "committedDate": "2020-06-08T08:53:04Z", "type": "commit"}, {"oid": "0bf030b923b5bb26dfc7f2efce8d4b6dbd575cb8", "url": "https://github.com/elastic/elasticsearch/commit/0bf030b923b5bb26dfc7f2efce8d4b6dbd575cb8", "message": "Drop usage of fail() in tests", "committedDate": "2020-06-08T09:18:24Z", "type": "commit"}, {"oid": "a8570ce105efac4f1a9ff586ca887c22d093eb63", "url": "https://github.com/elastic/elasticsearch/commit/a8570ce105efac4f1a9ff586ca887c22d093eb63", "message": "Merge branch 'master' into data-stream-create-validation", "committedDate": "2020-06-08T09:19:36Z", "type": "commit"}]}