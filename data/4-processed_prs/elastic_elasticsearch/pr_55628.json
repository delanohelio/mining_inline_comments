{"pr_number": 55628, "pr_title": "Validate hashing algorithm in users tool", "pr_createdAt": "2020-04-22T20:17:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55628", "timeline": [{"oid": "8600bcd3ea0f3fc231ecacdd05d505bc48545894", "url": "https://github.com/elastic/elasticsearch/commit/8600bcd3ea0f3fc231ecacdd05d505bc48545894", "message": "Validate hashing algorithm in users tool\n\nThis change adds validation when running the users tool so that\nif Elasticsearch is expected to run in a JVM that is configured to\nbe in FIPS 140 mode and the password hashing algorithm is not\ncompliant, we would throw an error.\nUsers tool uses the configuration from the node and this validation\nwould also happen upon node startup but users might be added in the\nfile realm before the node is started and we would have the\nopportunity to notify the user of this misconfiguration.\nThe changes in #55544 make this much less probable to happen in 8\nsince the default algorithm will be compliant but this change can\nact as a fallback in anycase and makes for a better user experience.", "committedDate": "2020-04-22T20:14:50Z", "type": "commit"}, {"oid": "068b667a68e7d1113e3f03152aafb82a964805fd", "url": "https://github.com/elastic/elasticsearch/commit/068b667a68e7d1113e3f03152aafb82a964805fd", "message": "Merge remote-tracking branch 'origin/master' into usertool-algo-fips", "committedDate": "2020-04-22T20:15:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55628#discussion_r413462802", "bodyText": "#55544 makes sure our default is sane for FIPS mode. But user can still explicit set the password hashing algorithm to something that is not FIPS compliant.\nSince PASSWORD_HASHING_ALGORITHM.get(...) is used in a few other places, rather than checking it at caller side, would it better to have this validation done in its own validator?", "author": "ywangd", "createdAt": "2020-04-23T02:28:31Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/file/tool/UsersTool.java", "diffHunk": "@@ -439,6 +439,10 @@ static String parseUsername(List<String> args, Settings settings) throws UserExc\n \n     private static char[] getPasswordHash(Terminal terminal, Environment env, String cliPasswordValue) throws UserException {\n         final Hasher hasher = Hasher.resolve(XPackSettings.PASSWORD_HASHING_ALGORITHM.get(env.settings()));\n+        if (XPackSettings.FIPS_MODE_ENABLED.get(env.settings()) && hasher.name().toLowerCase(Locale.ROOT).startsWith(\"pbkdf2\") == false) {", "originalCommit": "068b667a68e7d1113e3f03152aafb82a964805fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NTI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55628#discussion_r413895270", "bodyText": "yes, good point! I though about this too when raising the PR and decided against this based on the following:\n\nIt felt like we would be doing too much in the validator. My idea about the Validator interface for Setting is that it is used for simple validation checks.\nBut mostly that this is the only place where we call get() on it before the node is started ( where or.elasticsearch.xpack.Security#validateForFips would kick in. If we add this in the validator of the setting, then we could as well remove this validation from validateForFips and if we do that , we could as well move other validations from that method to the respective settings Validator. While this is not something I am very strongly opiniated about, I like that we have the checks together in validateForFips and feel like this change is adding a non crucial validation that helps with the user experience", "author": "jkakavas", "createdAt": "2020-04-23T15:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDI5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55628#discussion_r414300297", "bodyText": "I see your point. Having FIPS validation in one place is preferable. All good. Thanks", "author": "ywangd", "createdAt": "2020-04-24T05:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgwMg=="}], "type": "inlineReview"}]}