{"pr_number": 65545, "pr_title": "EQL: Add ? support (match single char) to wildcard functionality in  `:` operator", "pr_createdAt": "2020-11-26T11:48:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65545", "timeline": [{"oid": "d81c0ed36fca701a5a6524d9399b787121e299d4", "url": "https://github.com/elastic/elasticsearch/commit/d81c0ed36fca701a5a6524d9399b787121e299d4", "message": "EQL: Add ? character to : operator\n\nIntroduce support for ? character to wildcard pattern to : operator and\nby transition, to wildcard function.\n\nFix #65536", "committedDate": "2020-11-26T11:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNDE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531004160", "bodyText": "Why not defining a list when it's actually needed? Or add one more query. It's a bit too much to use a list for just one query imo. I remember there is one more test like this for * (using a list for one query only).", "author": "astefan", "createdAt": "2020-11-26T12:43:55Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -152,6 +152,27 @@ public void testEqualsWildcardOnRight() {\n         }\n     }\n \n+    public void testEqualsWildcardQuestionmarkOnRight() {\n+        List<String> tests = Arrays.asList(", "originalCommit": "d81c0ed36fca701a5a6524d9399b787121e299d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f24b7cc064ca38e25e757e06d5ae2829ce01aeff", "url": "https://github.com/elastic/elasticsearch/commit/f24b7cc064ca38e25e757e06d5ae2829ce01aeff", "message": "Merge remote-tracking branch 'remotes/upstream/master' into fix/65536", "committedDate": "2020-11-26T12:59:45Z", "type": "commit"}, {"oid": "b5a8870a6083b02c1a96726de7662a3b5c8d1dd8", "url": "https://github.com/elastic/elasticsearch/commit/b5a8870a6083b02c1a96726de7662a3b5c8d1dd8", "message": "Polish", "committedDate": "2020-11-26T13:05:13Z", "type": "commit"}, {"oid": "b5a8870a6083b02c1a96726de7662a3b5c8d1dd8", "url": "https://github.com/elastic/elasticsearch/commit/b5a8870a6083b02c1a96726de7662a3b5c8d1dd8", "message": "Polish", "committedDate": "2020-11-26T13:05:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNzEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531017101", "bodyText": "This should be wildcard func instead, no?", "author": "matriv", "createdAt": "2020-11-26T13:07:32Z", "path": "x-pack/plugin/eql/qa/common/src/main/resources/additional_test_queries.toml", "diffHunk": "@@ -300,3 +305,24 @@ query = '''\n file where file_name : (\"winini*.exe\", \"lsass.*\") and opcode == 2\n '''\n expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"seqMultipleArgsWildcardPatternQuestionMark\"\n+query = '''\n+file where file_name : (\"winini?.exe\", \"lsass.e?e\") and opcode == 2\n+'''\n+expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"wildcardFunctionWildcardPattern\"\n+query = '''\n+file where wildcard(file_name, \"winini*.exe\", \"lsass.*\") and opcode == 2\n+'''\n+expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"wildcardFunctionQuestionMarkPattern\"\n+query = '''\n+file where file_name : (\"winini?.exe\", \"lsass.e?e\") and opcode == 2", "originalCommit": "b5a8870a6083b02c1a96726de7662a3b5c8d1dd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dab0951494f59875bb825ced62ac941fd04197b3", "url": "https://github.com/elastic/elasticsearch/commit/dab0951494f59875bb825ced62ac941fd04197b3", "message": "Fix incorrect test", "committedDate": "2020-11-26T14:14:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4OTY3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531089671", "bodyText": "Not strictly related to the change, but was wondering the value choice for the escape character (in StringUtils#toLikePattern()). Would \\0 have collided with anything?", "author": "bpintea", "createdAt": "2020-11-26T15:07:49Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.LikePattern;\n+\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static org.elasticsearch.xpack.eql.util.StringUtils.toLikePattern;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testLikePatternNoPattern() throws Exception {\n+        String string = \"abc123\";\n+        assertEquals(string, toLikePattern(string).asString());\n+    }\n+\n+    public void testLikePatternLikeChars() throws Exception {\n+        String string = \"a%bc%%12_3__\";\n+        String escape = Character.toString(1);", "originalCommit": "dab0951494f59875bb825ced62ac941fd04197b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5NDEzNw==", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531094137", "bodyText": "0 ignores escaping, that is no character acts as an escape.", "author": "costin", "createdAt": "2020-11-26T15:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4OTY3MQ=="}], "type": "inlineReview"}]}