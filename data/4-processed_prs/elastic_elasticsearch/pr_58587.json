{"pr_number": 58587, "pr_title": "SparseFileTracker.Gap should keep a reference to the corresponding Range", "pr_createdAt": "2020-06-26T10:41:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58587", "timeline": [{"oid": "f92cbccdc1ae89f1f6b103968992888fb18cc247", "url": "https://github.com/elastic/elasticsearch/commit/f92cbccdc1ae89f1f6b103968992888fb18cc247", "message": "Use a range reference in Gap", "committedDate": "2020-06-26T10:37:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MzgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/58587#discussion_r446883812", "bodyText": "Can we assert existingRange == range? I think it should always be the very same object here.", "author": "DaveCTurner", "createdAt": "2020-06-29T10:11:52Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -255,18 +255,21 @@ private long computeLengthOfRanges() {\n         }\n     }\n \n-    private void onGapSuccess(final long start, final long end) {\n+    private boolean assertPendingRangeExists(Range range) {\n+        assert Thread.holdsLock(mutex);\n+        final SortedSet<Range> existingRanges = ranges.tailSet(range);\n+        assert existingRanges.isEmpty() == false;\n+        final Range existingRange = existingRanges.first();\n+        assert existingRange.start == range.start && existingRange.end == range.end && existingRange.isPending();", "originalCommit": "f92cbccdc1ae89f1f6b103968992888fb18cc247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MjY0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58587#discussion_r446892643", "bodyText": "I think we can, yes", "author": "tlrx", "createdAt": "2020-06-29T11:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MzgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Mzg0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58587#discussion_r446883849", "bodyText": "Naming suggestion (here and elsewhere):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void onGapSuccess(final Range existingRange) {\n          \n          \n            \n                private void onGapSuccess(final Range gapRange) {", "author": "DaveCTurner", "createdAt": "2020-06-29T10:11:55Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -255,18 +255,21 @@ private long computeLengthOfRanges() {\n         }\n     }\n \n-    private void onGapSuccess(final long start, final long end) {\n+    private boolean assertPendingRangeExists(Range range) {\n+        assert Thread.holdsLock(mutex);\n+        final SortedSet<Range> existingRanges = ranges.tailSet(range);\n+        assert existingRanges.isEmpty() == false;\n+        final Range existingRange = existingRanges.first();\n+        assert existingRange.start == range.start && existingRange.end == range.end && existingRange.isPending();\n+        return true;\n+    }\n+\n+    private void onGapSuccess(final Range existingRange) {", "originalCommit": "f92cbccdc1ae89f1f6b103968992888fb18cc247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MzIwOA==", "url": "https://github.com/elastic/elasticsearch/pull/58587#discussion_r446893208", "bodyText": "That's better, thanks", "author": "tlrx", "createdAt": "2020-06-29T11:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Mzg0OQ=="}], "type": "inlineReview"}, {"oid": "6ab21b754b9cf5d78e602cb8af117b2b1aefaa9f", "url": "https://github.com/elastic/elasticsearch/commit/6ab21b754b9cf5d78e602cb8af117b2b1aefaa9f", "message": "assert existingRange == range", "committedDate": "2020-06-29T11:18:10Z", "type": "commit"}, {"oid": "53fadceae75d7635d334ef14c5954b1ec0b74b1d", "url": "https://github.com/elastic/elasticsearch/commit/53fadceae75d7635d334ef14c5954b1ec0b74b1d", "message": "gapRange", "committedDate": "2020-06-29T11:19:40Z", "type": "commit"}]}