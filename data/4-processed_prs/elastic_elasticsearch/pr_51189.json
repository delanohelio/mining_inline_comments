{"pr_number": 51189, "pr_title": "Use Lucene index in peer recovery and resync", "pr_createdAt": "2020-01-18T20:48:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51189", "timeline": [{"oid": "106b0d7789e150bda8077105e751033453c54b16", "url": "https://github.com/elastic/elasticsearch/commit/106b0d7789e150bda8077105e751033453c54b16", "message": "Use Lucene index in peer recovery and resync", "committedDate": "2020-01-18T20:46:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/51189#discussion_r368405303", "bodyText": "readHistoryOperations used Math.max(0, startingSeqNo) as from. I wonder if we need to guard against SequenceNumbers.UNASSIGNED_SEQ_NO similarly here.", "author": "ywelsch", "createdAt": "2020-01-20T07:51:06Z", "path": "server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java", "diffHunk": "@@ -91,9 +90,7 @@ public void resync(final IndexShard indexShard, final ActionListener<ResyncTask>\n             // Wrap translog snapshot to make it synchronized as it is accessed by different threads through SnapshotSender.\n             // Even though those calls are not concurrent, snapshot.next() uses non-synchronized state and is not multi-thread-compatible\n             // Also fail the resync early if the shard is shutting down\n-            snapshot = indexShard.getHistoryOperations(\"resync\",\n-                indexShard.indexSettings.isSoftDeleteEnabled() ? Engine.HistorySource.INDEX : Engine.HistorySource.TRANSLOG,\n-                startingSeqNo);\n+            snapshot = indexShard.newChangesSnapshot(\"resync\", startingSeqNo, Long.MAX_VALUE, false);", "originalCommit": "106b0d7789e150bda8077105e751033453c54b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzUwNg==", "url": "https://github.com/elastic/elasticsearch/pull/51189#discussion_r368613506", "bodyText": "I could not find the reason why we used Math.max(0, startingSeqNo). We should always have a valid global checkpoint here, then startingSeqNo should be non-negative. I added an assertion in ea8da99.", "author": "dnhatn", "createdAt": "2020-01-20T15:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNjYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51189#discussion_r368406639", "bodyText": "can startingSeqNo be `UNASSIGNED_SEQ_NO here?", "author": "ywelsch", "createdAt": "2020-01-20T07:55:35Z", "path": "server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java", "diffHunk": "@@ -296,9 +286,8 @@ public void recoverToTarget(ActionListener<RecoveryResponse> listener) {\n                     shardId + \" initiating tracking of \" + request.targetAllocationId(), shard, cancellableThreads, logger);\n \n                 final long endingSeqNo = shard.seqNoStats().getMaxSeqNo();\n-                logger.trace(\"snapshot translog for recovery; current size is [{}]\",\n-                    shard.estimateNumberOfHistoryOperations(\"peer-recovery\", historySource, startingSeqNo));\n-                final Translog.Snapshot phase2Snapshot = shard.getHistoryOperations(\"peer-recovery\", historySource, startingSeqNo);\n+                logger.trace(\"snapshot for recovery; current size is [{}]\", estimateNumberOfHistoryOperations(startingSeqNo));\n+                final Translog.Snapshot phase2Snapshot = shard.newChangesSnapshot(\"peer-recovery\", startingSeqNo, Long.MAX_VALUE, false);", "originalCommit": "106b0d7789e150bda8077105e751033453c54b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzk4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51189#discussion_r368613989", "bodyText": "It should be non-negative. We assert it here: \n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java\n    \n    \n         Line 269\n      in\n      106b0d7\n    \n    \n    \n    \n\n        \n          \n           assert startingSeqNo >= 0 : \"startingSeqNo must be non negative. got: \" + startingSeqNo; \n        \n    \n  \n\n.", "author": "dnhatn", "createdAt": "2020-01-20T15:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNjYzOQ=="}], "type": "inlineReview"}, {"oid": "ea8da99f2577a470471f6c2dfc94cb9ccb46b72d", "url": "https://github.com/elastic/elasticsearch/commit/ea8da99f2577a470471f6c2dfc94cb9ccb46b72d", "message": "assert startingSeqNo", "committedDate": "2020-01-20T15:43:45Z", "type": "commit"}, {"oid": "0a3766ba47c67a4f73086e894ea1cc4de9576578", "url": "https://github.com/elastic/elasticsearch/commit/0a3766ba47c67a4f73086e894ea1cc4de9576578", "message": "Merge branch 'master' into use-soft-deletes-recovery", "committedDate": "2020-01-20T15:43:50Z", "type": "commit"}, {"oid": "7bf3de261d1ee63840de01d40446435ccafb2e9e", "url": "https://github.com/elastic/elasticsearch/commit/7bf3de261d1ee63840de01d40446435ccafb2e9e", "message": "Merge branch 'master' into use-soft-deletes-recovery", "committedDate": "2020-01-20T15:55:51Z", "type": "commit"}, {"oid": "dba2d64604e35617d4d54b8ce574c27470b1d7fc", "url": "https://github.com/elastic/elasticsearch/commit/dba2d64604e35617d4d54b8ce574c27470b1d7fc", "message": "remove unsed imports", "committedDate": "2020-01-20T16:13:47Z", "type": "commit"}, {"oid": "6d50cf59af597acaab44716890d0c095aba86f07", "url": "https://github.com/elastic/elasticsearch/commit/6d50cf59af597acaab44716890d0c095aba86f07", "message": "Remove outdated test\n\nEvery operation in Lucene must have seqId", "committedDate": "2020-01-20T20:51:54Z", "type": "commit"}]}