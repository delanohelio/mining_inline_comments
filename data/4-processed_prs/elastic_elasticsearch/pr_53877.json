{"pr_number": 53877, "pr_title": "Cluster state and CRUD operations for data streams", "pr_createdAt": "2020-03-20T15:06:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53877", "timeline": [{"oid": "6aa44d2987bd60cbe3bad5996bf975600bd9dcc8", "url": "https://github.com/elastic/elasticsearch/commit/6aa44d2987bd60cbe3bad5996bf975600bd9dcc8", "message": "Cluster state and CRUD ops for data streams", "committedDate": "2020-03-20T15:00:47Z", "type": "commit"}, {"oid": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "url": "https://github.com/elastic/elasticsearch/commit/9a44505edcb0034593eed94ab9d42fc83adb91cf", "message": "include new files", "committedDate": "2020-03-20T15:01:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNzQyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395707429", "bodyText": "What's the correct version to put here?", "author": "danhermann", "createdAt": "2020-03-20T15:18:42Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStreamMetadata.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.cluster.DiffableUtils;\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Custom {@link MetaData} implementation for storing a map of {@link DataStream}s and their names.\n+ */\n+public class DataStreamMetadata implements MetaData.Custom {\n+\n+    public static final String TYPE = \"data_stream\";\n+    private static final ParseField DATA_STREAM = new ParseField(\"data_stream\");\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<DataStreamMetadata, Void> PARSER = new ConstructingObjectParser<>(TYPE, false,\n+        a -> new DataStreamMetadata((Map<String, DataStream>) a[0]));\n+\n+    static {\n+        PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> {\n+            Map<String, DataStream> dataStreams = new HashMap<>();\n+            while (p.nextToken() != XContentParser.Token.END_OBJECT) {\n+                String name = p.currentName();\n+                dataStreams.put(name, DataStream.fromXContent(p));\n+            }\n+            return dataStreams;\n+        }, DATA_STREAM);\n+    }\n+\n+    private final Map<String, DataStream> dataStreams;\n+\n+    public DataStreamMetadata(Map<String, DataStream> dataStreams) {\n+        this.dataStreams = dataStreams;\n+    }\n+\n+    public DataStreamMetadata(StreamInput in) throws IOException {\n+        this.dataStreams = in.readMap(StreamInput::readString, DataStream::new);\n+    }\n+\n+    public Map<String, DataStream> dataStreams() {\n+        return this.dataStreams;\n+    }\n+\n+    @Override\n+    public Diff<MetaData.Custom> diff(MetaData.Custom before) {\n+        return new DataStreamMetadata.DataStreamMetadataDiff((DataStreamMetadata) before, this);\n+    }\n+\n+    public static NamedDiff<MetaData.Custom> readDiffFrom(StreamInput in) throws IOException {\n+        return new DataStreamMetadata.DataStreamMetadataDiff(in);\n+    }\n+\n+    @Override\n+    public EnumSet<MetaData.XContentContext> context() {\n+        return MetaData.ALL_CONTEXTS;\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return TYPE;\n+    }\n+\n+    @Override\n+    public Version getMinimalSupportedVersion() {\n+        return Version.V_7_7_0;", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMDgwOA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395720808", "bodyText": "When it is back ported this is the correct version, until then V_8_0_0 should be used.", "author": "martijnvg", "createdAt": "2020-03-20T15:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNzQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNjkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395726908", "bodyText": "Maybe use ResourceNotFoundException instead of introducing a new exception class?", "author": "martijnvg", "createdAt": "2020-03-20T15:48:19Z", "path": "server/src/main/java/org/elasticsearch/indices/DataStreamMissingException.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.rest.RestStatus;\n+\n+import java.io.IOException;\n+\n+public class DataStreamMissingException  extends ElasticsearchException {", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNzIyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395727226", "bodyText": "\ud83d\udc4d", "author": "martijnvg", "createdAt": "2020-03-20T15:48:46Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -674,6 +674,12 @@ public IndexMetaData getIndexSafe(Index index) {\n             .orElse(Collections.emptyMap());\n     }\n \n+    public Map<String, DataStream> dataStreams() {", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNzI4MA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395727280", "bodyText": "\ud83d\udc4d", "author": "martijnvg", "createdAt": "2020-03-20T15:48:52Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1121,6 +1127,32 @@ public Builder removeIndexTemplate(String name) {\n             return this;\n         }\n \n+        public Builder dataStreams(Map<String, DataStream> dataStreams) {", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODE1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395728152", "bodyText": "Perhaps extract the body of the execute method in a static method, so that is easy to write unit tests?\n(and maybe the same for the other transport actions?)", "author": "martijnvg", "createdAt": "2020-03-20T15:50:12Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -116,7 +135,37 @@ protected AcknowledgedResponse read(StreamInput in) throws IOException {\n         @Override\n         protected void masterOperation(Task task, Request request, ClusterState state,\n                                        ActionListener<AcknowledgedResponse> listener) throws Exception {\n-            listener.onResponse(new AcknowledgedResponse(true));\n+            clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n+                new ClusterStateUpdateTask(Priority.HIGH) {\n+\n+                    @Override\n+                    public TimeValue timeout() {\n+                        return request.masterNodeTimeout();\n+                    }\n+\n+                    @Override\n+                    public void onFailure(String source, Exception e) {\n+                        listener.onFailure(e);\n+                    }\n+\n+                    @Override\n+                    public ClusterState execute(ClusterState currentState) throws Exception {\n+                        if (currentState.metaData().dataStreams().containsKey(request.name)) {", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395728815", "bodyText": "maybe also change the name of this yaml test?", "author": "martijnvg", "createdAt": "2020-03-20T15:51:12Z", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.data_stream/10_basic.yml", "diffHunk": "@@ -13,12 +13,9 @@\n \n   - do:\n       indices.get_data_streams: {}\n-  - match: { 0.name: my_data_stream1 }\n+  - match: { 0.name: data-stream2 }", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDU0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r395730547", "bodyText": "Maybe additional to this test, also adjust the MetaDataTests and ToAndFromJsonMetaDataTests test cases to test MetaData instances with data streams?", "author": "martijnvg", "createdAt": "2020-03-20T15:53:47Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/DataStreamMetadataTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.test.AbstractNamedWriteableTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DataStreamMetadataTests extends AbstractNamedWriteableTestCase<DataStreamMetadata> {", "originalCommit": "9a44505edcb0034593eed94ab9d42fc83adb91cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "url": "https://github.com/elastic/elasticsearch/commit/a2ff5925b609102cd8fe147bc6e04331a8a161de", "message": "review comments", "committedDate": "2020-03-20T20:41:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwNjY2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396306663", "bodyText": "maybe also add a unit test for this method?\n(this can be added to CreateDataStreamRequestTests class)", "author": "martijnvg", "createdAt": "2020-03-23T09:18:30Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -64,7 +76,14 @@ public void setTimestampFieldName(String timestampFieldName) {\n \n         @Override\n         public ActionRequestValidationException validate() {\n-            return null;\n+            ActionRequestValidationException validationException = null;", "originalCommit": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwNzE1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396307151", "bodyText": "maybe also modify MetaDataTests to test with DataStreamMetadata?", "author": "martijnvg", "createdAt": "2020-03-23T09:19:20Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java", "diffHunk": "@@ -323,6 +325,16 @@ public void testSimpleJsonFromAndTo() throws IOException {\n             equalTo(new Template(Settings.builder().put(\"setting\", \"value\").build(),\n                 new CompressedXContent(\"{\\\"baz\\\":\\\"eggplant\\\"}\"),\n                 Collections.singletonMap(\"alias\", AliasMetaData.builder(\"alias\").build()))));\n+\n+        // data streams\n+        assertNotNull(parsedMetaData.dataStreams().get(\"data-stream1\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream1\").getName(), is(\"data-stream1\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream1\").getTimeStampField(), is(\"@timestamp\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream1\").getIndices(), is(Collections.emptyList()));\n+        assertNotNull(parsedMetaData.dataStreams().get(\"data-stream2\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream2\").getName(), is(\"data-stream2\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream2\").getTimeStampField(), is(\"@timestamp2\"));\n+        assertThat(parsedMetaData.dataStreams().get(\"data-stream2\").getIndices(), is(Collections.emptyList()));", "originalCommit": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwODg2MA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396308860", "bodyText": "maybe also add a unit test for this method?", "author": "martijnvg", "createdAt": "2020-03-23T09:22:25Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -116,7 +135,41 @@ protected AcknowledgedResponse read(StreamInput in) throws IOException {\n         @Override\n         protected void masterOperation(Task task, Request request, ClusterState state,\n                                        ActionListener<AcknowledgedResponse> listener) throws Exception {\n-            listener.onResponse(new AcknowledgedResponse(true));\n+            clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n+                new ClusterStateUpdateTask(Priority.HIGH) {\n+\n+                    @Override\n+                    public TimeValue timeout() {\n+                        return request.masterNodeTimeout();\n+                    }\n+\n+                    @Override\n+                    public void onFailure(String source, Exception e) {\n+                        listener.onFailure(e);\n+                    }\n+\n+                    @Override\n+                    public ClusterState execute(ClusterState currentState) throws Exception {\n+                        return createDataStream(currentState, request);\n+                    }\n+\n+                    @Override\n+                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                        listener.onResponse(new AcknowledgedResponse(true));\n+                    }\n+                });\n+        }\n+\n+        static ClusterState createDataStream(ClusterState currentState, Request request) {", "originalCommit": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwODk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396308955", "bodyText": "unit test?", "author": "martijnvg", "createdAt": "2020-03-23T09:22:34Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamAction.java", "diffHunk": "@@ -108,7 +120,51 @@ protected AcknowledgedResponse read(StreamInput in) throws IOException {\n         @Override\n         protected void masterOperation(Task task, Request request, ClusterState state,\n                                        ActionListener<AcknowledgedResponse> listener) throws Exception {\n-            listener.onResponse(new AcknowledgedResponse(true));\n+            clusterService.submitStateUpdateTask(\"remove-data-stream [\" + request.name + \"]\", new ClusterStateUpdateTask(Priority.HIGH) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return request.masterNodeTimeout();\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return removeDataStream(currentState, request);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+        }\n+\n+        static ClusterState removeDataStream(ClusterState currentState, Request request) {\n+            Set<String> dataStreams = new HashSet<>();", "originalCommit": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTU5MA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396309590", "bodyText": "unit test?\nAlso I think this should throw a resource not found exception if a specific data stream doesn't exist?", "author": "martijnvg", "createdAt": "2020-03-23T09:23:35Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -154,11 +157,30 @@ protected Response read(StreamInput in) throws IOException {\n         @Override\n         protected void masterOperation(Task task, Request request, ClusterState state,\n                                        ActionListener<Response> listener) throws Exception {\n-            List<DataStream> dataStreams = List.of(\n-                new DataStream(\"my_data_stream1\", \"@timestamp\", List.of(\"my_data_stream1-000000\")),\n-                new DataStream(\"my_data_stream2\", \"@timestamp\", List.of())\n-            );\n-            listener.onResponse(new Response(dataStreams));\n+            listener.onResponse(new Response(getDataStreams(state, request)));\n+        }\n+\n+        static List<DataStream> getDataStreams(ClusterState clusterState, Request request) {\n+            Map<String, DataStream> dataStreams = clusterState.metaData().dataStreams();", "originalCommit": "a2ff5925b609102cd8fe147bc6e04331a8a161de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3OTIwMA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396479200", "bodyText": "It seems there are different existing behaviors when attempting to retrieve a specific resource that does not exist. E.g., aliases and indices return a 404 and index templates and ingest pipelines return an empty list. I don't if those are intentional behavioral differences, but I can certainly return a 404 if that's appropriate for data streams.", "author": "danhermann", "createdAt": "2020-03-23T14:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NjIwMA==", "url": "https://github.com/elastic/elasticsearch/pull/53877#discussion_r396586200", "bodyText": "I think that returning a 404 in case of requesting a specific data stream is appropriate.", "author": "martijnvg", "createdAt": "2020-03-23T16:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTU5MA=="}], "type": "inlineReview"}, {"oid": "fcacbbf2579b09697bde770f39794c962878101d", "url": "https://github.com/elastic/elasticsearch/commit/fcacbbf2579b09697bde770f39794c962878101d", "message": "include data streams in MetadataTests", "committedDate": "2020-03-23T14:24:42Z", "type": "commit"}, {"oid": "169efc4c74f0abc7560b943f1c1afa01490b47db", "url": "https://github.com/elastic/elasticsearch/commit/169efc4c74f0abc7560b943f1c1afa01490b47db", "message": "unit test for transport actions", "committedDate": "2020-03-23T17:02:04Z", "type": "commit"}, {"oid": "bef471dc9dd89ba85f5a493158930798a136e213", "url": "https://github.com/elastic/elasticsearch/commit/bef471dc9dd89ba85f5a493158930798a136e213", "message": "checkstyle", "committedDate": "2020-03-23T18:16:54Z", "type": "commit"}, {"oid": "4a9c39d2d3d55e1746a0cf6f48d5873d999eeb98", "url": "https://github.com/elastic/elasticsearch/commit/4a9c39d2d3d55e1746a0cf6f48d5873d999eeb98", "message": "Merge branch 'master' into data_streams_crud", "committedDate": "2020-03-23T19:32:29Z", "type": "commit"}, {"oid": "bfa64f1a6bb6503da645ca29d44271dc693bca67", "url": "https://github.com/elastic/elasticsearch/commit/bfa64f1a6bb6503da645ca29d44271dc693bca67", "message": "temporarily mute YML test", "committedDate": "2020-03-23T20:46:51Z", "type": "commit"}, {"oid": "f2ae126e55df4a590b8c4036d09d13c84175507a", "url": "https://github.com/elastic/elasticsearch/commit/f2ae126e55df4a590b8c4036d09d13c84175507a", "message": "Merge branch 'master' into data_streams_crud", "committedDate": "2020-03-24T08:23:50Z", "type": "commit"}]}