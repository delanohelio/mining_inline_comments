{"pr_number": 62410, "pr_title": "Change netty pool chunk size to 1MB", "pr_createdAt": "2020-09-15T18:37:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62410", "timeline": [{"oid": "facb637a2043462a07e9b22056e3f4e996c1fcdc", "url": "https://github.com/elastic/elasticsearch/commit/facb637a2043462a07e9b22056e3f4e996c1fcdc", "message": "Change netty pool chunk size to 1MB\n\nCurrently the netty pool chunk size defaults to 16MB. The number does\nnot play well with the G1GC which causes this to consume entire regions.\nAdditionally, we normally allocated arrays of size 64KB or less. This\nmeans that Elasticsearch could handle a smaller pool chunk size to play\nnicer with the G1GC.", "committedDate": "2020-09-15T18:34:30Z", "type": "commit"}, {"oid": "f1c458f012e1e96edf91f885dc498db7d4f5135b", "url": "https://github.com/elastic/elasticsearch/commit/f1c458f012e1e96edf91f885dc498db7d4f5135b", "message": "Merge remote-tracking branch 'upstream/master' into change_netty_default_chunk", "committedDate": "2020-09-17T23:00:55Z", "type": "commit"}, {"oid": "ba667b4367cf0196d651731942d2758a5e78de71", "url": "https://github.com/elastic/elasticsearch/commit/ba667b4367cf0196d651731942d2758a5e78de71", "message": "Logging", "committedDate": "2020-09-18T00:05:17Z", "type": "commit"}, {"oid": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "url": "https://github.com/elastic/elasticsearch/commit/cfedacfb419c4c700c24ed285dbd983e4fb4300e", "message": "Remove dumb test code", "committedDate": "2020-09-18T04:34:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNDA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r490714085", "bodyText": "nit: unused if the system property is set, so could go inside the else block.", "author": "henningandersen", "createdAt": "2020-09-18T05:41:06Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -28,32 +28,59 @@\n import io.netty.channel.ServerChannel;\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n import org.elasticsearch.monitor.jvm.JvmInfo;\n \n public class NettyAllocator {\n \n     private static final ByteBufAllocator ALLOCATOR;\n+    private static final String DESCRIPTION;\n \n     private static final String USE_UNPOOLED = \"es.use_unpooled_allocator\";\n     private static final String USE_NETTY_DEFAULT = \"es.unsafe.use_netty_default_allocator\";\n+    private static final String USE_NETTY_DEFAULT_CHUNK = \"es.unsafe.use_netty_default_chunk_and_page_size\";\n \n     static {\n+        long g1gcRegionSizeInBytes = JvmInfo.jvmInfo().getG1RegionSize();\n+        long heapSizeInBytes = JvmInfo.jvmInfo().getMem().getHeapMax().getBytes();\n+        ByteSizeValue g1gcRegionSize = new ByteSizeValue(g1gcRegionSizeInBytes);\n+        ByteSizeValue heapSize = new ByteSizeValue(heapSizeInBytes);", "originalCommit": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNjg1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r490716852", "bodyText": "Maybe add a comment that this corresponds to 1MB.", "author": "henningandersen", "createdAt": "2020-09-18T05:50:57Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -28,32 +28,59 @@\n import io.netty.channel.ServerChannel;\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n import org.elasticsearch.monitor.jvm.JvmInfo;\n \n public class NettyAllocator {\n \n     private static final ByteBufAllocator ALLOCATOR;\n+    private static final String DESCRIPTION;\n \n     private static final String USE_UNPOOLED = \"es.use_unpooled_allocator\";\n     private static final String USE_NETTY_DEFAULT = \"es.unsafe.use_netty_default_allocator\";\n+    private static final String USE_NETTY_DEFAULT_CHUNK = \"es.unsafe.use_netty_default_chunk_and_page_size\";\n \n     static {\n+        long g1gcRegionSizeInBytes = JvmInfo.jvmInfo().getG1RegionSize();\n+        long heapSizeInBytes = JvmInfo.jvmInfo().getMem().getHeapMax().getBytes();\n+        ByteSizeValue g1gcRegionSize = new ByteSizeValue(g1gcRegionSizeInBytes);\n+        ByteSizeValue heapSize = new ByteSizeValue(heapSizeInBytes);\n         if (Booleans.parseBoolean(System.getProperty(USE_NETTY_DEFAULT), false)) {\n             ALLOCATOR = ByteBufAllocator.DEFAULT;\n+            DESCRIPTION = \"[name=netty_default, factors={es.unsafe.use_netty_default_allocator=true}]\";\n         } else {\n             ByteBufAllocator delegate;\n-            if (useUnpooled()) {\n+            if (useUnpooled(heapSizeInBytes, g1gcRegionSizeInBytes)) {\n                 delegate = UnpooledByteBufAllocator.DEFAULT;\n+                DESCRIPTION = \"[name=unpooled, factors={es.unsafe.use_unpooled_allocator=\" + userForcedUnpooled()\n+                    + \", g1gc_region_size=\" + g1gcRegionSize + \", heap_size=\" + heapSize + \"}]\";\n             } else {\n                 int nHeapArena = PooledByteBufAllocator.defaultNumHeapArena();\n-                int pageSize = PooledByteBufAllocator.defaultPageSize();\n-                int maxOrder = PooledByteBufAllocator.defaultMaxOrder();\n+                int pageSize;\n+                if (useDefaultChunkAndPageSize()) {\n+                    pageSize = PooledByteBufAllocator.defaultPageSize();\n+                } else {\n+                    pageSize = 8192;\n+                }\n+                int maxOrder;\n+                if (useDefaultChunkAndPageSize()) {\n+                    maxOrder = PooledByteBufAllocator.defaultMaxOrder();\n+                } else if (g1gcRegionSizeInBytes >= (4 * 1024 * 1024)) {\n+                    maxOrder = 7;", "originalCommit": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r490720309", "bodyText": "region size cannot be smaller than 1MB, so hopefully this never triggers. I suppose a future JDK could lower the minimum region size so OK to keep the check, but I think we should add a comment about this. It is hard to assert anything meaningful about in a test without spinning up a small separate JVM.\nYou could also change the maxOrder calculation to be something like log2(g1RegionSize / pageSize) and trigger unpooled when smaller than 5. Not necessary though, current code is fine too with a comment.", "author": "henningandersen", "createdAt": "2020-09-18T06:02:38Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -79,12 +110,30 @@ public static ByteBufAllocator getAllocator() {\n         }\n     }\n \n-    private static boolean useUnpooled() {\n+    private static boolean useUnpooled(long heapSizeInBytes, long g1RegionSize) {\n+        if (userForcedUnpooled()) {\n+            return true;\n+        } else {\n+            boolean heapIsOneGBOrLess = heapSizeInBytes <= 1 << 30;\n+            boolean g1gcRegionIsLessThan1MB = g1RegionSize < 1 << 20;", "originalCommit": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r490720597", "bodyText": "I think this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return heapIsOneGBOrLess || (g1gcRegionIsLessThan1MB && unknownRegionSize);\n          \n          \n            \n                        return heapIsOneGBOrLess || (g1gcRegionIsLessThan1MB && unknownRegionSize == false);", "author": "henningandersen", "createdAt": "2020-09-18T06:03:37Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -79,12 +110,30 @@ public static ByteBufAllocator getAllocator() {\n         }\n     }\n \n-    private static boolean useUnpooled() {\n+    private static boolean useUnpooled(long heapSizeInBytes, long g1RegionSize) {\n+        if (userForcedUnpooled()) {\n+            return true;\n+        } else {\n+            boolean heapIsOneGBOrLess = heapSizeInBytes <= 1 << 30;\n+            boolean g1gcRegionIsLessThan1MB = g1RegionSize < 1 << 20;\n+            boolean unknownRegionSize = g1RegionSize != -1;\n+            return heapIsOneGBOrLess || (g1gcRegionIsLessThan1MB && unknownRegionSize);", "originalCommit": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMjA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r490722048", "bodyText": "I think this should check that we use g1 and if not, use region size -1. The variable in JvmInfo reflects the underlying G1RegionsSize as is and this seems to be 0 if using parallel GC. Safest to assume it \"undefined\" unless we use G1.", "author": "henningandersen", "createdAt": "2020-09-18T06:08:21Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -28,32 +28,59 @@\n import io.netty.channel.ServerChannel;\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n import org.elasticsearch.monitor.jvm.JvmInfo;\n \n public class NettyAllocator {\n \n     private static final ByteBufAllocator ALLOCATOR;\n+    private static final String DESCRIPTION;\n \n     private static final String USE_UNPOOLED = \"es.use_unpooled_allocator\";\n     private static final String USE_NETTY_DEFAULT = \"es.unsafe.use_netty_default_allocator\";\n+    private static final String USE_NETTY_DEFAULT_CHUNK = \"es.unsafe.use_netty_default_chunk_and_page_size\";\n \n     static {\n+        long g1gcRegionSizeInBytes = JvmInfo.jvmInfo().getG1RegionSize();", "originalCommit": "cfedacfb419c4c700c24ed285dbd983e4fb4300e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d81bd88d05afeef182a8cb5c4b7611b482191f24", "url": "https://github.com/elastic/elasticsearch/commit/d81bd88d05afeef182a8cb5c4b7611b482191f24", "message": "Merge remote-tracking branch 'upstream/master' into change_netty_default_chunk", "committedDate": "2020-09-21T17:26:09Z", "type": "commit"}, {"oid": "1e0f2e3b1f592135a1a9b3ac3852339d51763e78", "url": "https://github.com/elastic/elasticsearch/commit/1e0f2e3b1f592135a1a9b3ac3852339d51763e78", "message": "Changes", "committedDate": "2020-09-21T18:15:11Z", "type": "commit"}, {"oid": "9fccd59fc72addbfa6b0e756085e01687db92b86", "url": "https://github.com/elastic/elasticsearch/commit/9fccd59fc72addbfa6b0e756085e01687db92b86", "message": "Fix", "committedDate": "2020-09-21T18:19:59Z", "type": "commit"}, {"oid": "69cb192dd8420cd700742560036b85065c5e24f2", "url": "https://github.com/elastic/elasticsearch/commit/69cb192dd8420cd700742560036b85065c5e24f2", "message": "Cleanup", "committedDate": "2020-09-21T18:25:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MzY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62410#discussion_r492273696", "bodyText": "nit: I would prefer to have these in a single if with || to avoid the repetition.", "author": "henningandersen", "createdAt": "2020-09-21T18:48:10Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/NettyAllocator.java", "diffHunk": "@@ -28,32 +28,74 @@\n import io.netty.channel.ServerChannel;\n import io.netty.channel.socket.nio.NioServerSocketChannel;\n import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n import org.elasticsearch.monitor.jvm.JvmInfo;\n \n public class NettyAllocator {\n \n     private static final ByteBufAllocator ALLOCATOR;\n+    private static final String DESCRIPTION;\n \n     private static final String USE_UNPOOLED = \"es.use_unpooled_allocator\";\n     private static final String USE_NETTY_DEFAULT = \"es.unsafe.use_netty_default_allocator\";\n+    private static final String USE_NETTY_DEFAULT_CHUNK = \"es.unsafe.use_netty_default_chunk_and_page_size\";\n \n     static {\n         if (Booleans.parseBoolean(System.getProperty(USE_NETTY_DEFAULT), false)) {\n             ALLOCATOR = ByteBufAllocator.DEFAULT;\n+            DESCRIPTION = \"[name=netty_default, factors={es.unsafe.use_netty_default_allocator=true}]\";\n         } else {\n+            final long heapSizeInBytes = JvmInfo.jvmInfo().getMem().getHeapMax().getBytes();\n+            final boolean g1gcEnabled = Boolean.parseBoolean(JvmInfo.jvmInfo().useG1GC());\n+            final long g1gcRegionSizeInBytes = JvmInfo.jvmInfo().getG1RegionSize();\n+            final boolean g1gcRegionSizeIsKnown = g1gcRegionSizeInBytes != -1;\n+            ByteSizeValue heapSize = new ByteSizeValue(heapSizeInBytes);\n+            ByteSizeValue g1gcRegionSize = new ByteSizeValue(g1gcRegionSizeInBytes);\n+\n             ByteBufAllocator delegate;\n-            if (useUnpooled()) {\n+            if (useUnpooled(heapSizeInBytes, g1gcEnabled, g1gcRegionSizeIsKnown, g1gcRegionSizeInBytes)) {\n                 delegate = UnpooledByteBufAllocator.DEFAULT;\n+                DESCRIPTION = \"[name=unpooled, factors={es.unsafe.use_unpooled_allocator=\" + userForcedUnpooled()\n+                    + \", g1gc_enabled=\" + g1gcEnabled\n+                    + \", g1gc_region_size=\" + g1gcRegionSize\n+                    + \", heap_size=\" + heapSize + \"}]\";\n             } else {\n                 int nHeapArena = PooledByteBufAllocator.defaultNumHeapArena();\n-                int pageSize = PooledByteBufAllocator.defaultPageSize();\n-                int maxOrder = PooledByteBufAllocator.defaultMaxOrder();\n+                int pageSize;\n+                int maxOrder;\n+                if (useDefaultChunkAndPageSize()) {\n+                    pageSize = PooledByteBufAllocator.defaultPageSize();\n+                    maxOrder = PooledByteBufAllocator.defaultMaxOrder();\n+                } else {\n+                    pageSize = 8192;\n+                    if (g1gcEnabled == false) {\n+                        // This combined with a 8192 page size = 1 MB chunk sizes\n+                        maxOrder = 7;\n+                    } else if (g1gcRegionSizeIsKnown == false) {\n+                        // This combined with a 8192 page size = 1 MB chunk sizes\n+                        maxOrder = 7;\n+                    } else if (g1gcRegionSizeInBytes >= (4 * 1024 * 1024)) {\n+                        // This combined with a 8192 page size = 1 MB chunk sizes\n+                        maxOrder = 7;", "originalCommit": "69cb192dd8420cd700742560036b85065c5e24f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c82301b6dbcc2bbf9fe355b9162c9d4238261dad", "url": "https://github.com/elastic/elasticsearch/commit/c82301b6dbcc2bbf9fe355b9162c9d4238261dad", "message": "Change", "committedDate": "2020-09-21T19:01:13Z", "type": "commit"}]}