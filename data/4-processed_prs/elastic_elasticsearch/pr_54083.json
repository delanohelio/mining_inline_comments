{"pr_number": 54083, "pr_title": "Validation for data stream creation", "pr_createdAt": "2020-03-24T13:04:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54083", "timeline": [{"oid": "43c52a7a64229116a74979dfffe37ec478a9db24", "url": "https://github.com/elastic/elasticsearch/commit/43c52a7a64229116a74979dfffe37ec478a9db24", "message": "data stream names must not conflict with existing indices or aliases", "committedDate": "2020-03-24T13:02:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMTE1NA==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r397931154", "bodyText": "I think MetaDataCreateIndexService.validateIndexName() or MetaDataCreateIndexService.validateIndexOrAliasName() could be reused?", "author": "martijnvg", "createdAt": "2020-03-25T15:10:05Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -161,15 +165,63 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         }\n \n         static ClusterState createDataStream(ClusterState currentState, Request request) {\n+            List<String> validationErrors = new ArrayList<>();\n             if (currentState.metaData().dataStreams().containsKey(request.name)) {\n-                throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n+                validationErrors.add(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n-            MetaData.Builder builder = MetaData.builder(currentState.metaData()).put(\n-                new DataStream(request.name, request.timestampFieldName, Collections.emptyList()));\n+            validationErrors.addAll(validateDataStreamName(request.name));\n \n-            logger.info(\"adding data stream [{}]\", request.name);\n-            return ClusterState.builder(currentState).metaData(builder).build();\n+            if (currentState.metaData().hasIndex(request.name)) {\n+                validationErrors.add(\"data_stream [\" + request.name + \"] conflicts with existing index\");\n+            }\n+\n+            if (currentState.metaData().hasAlias(request.name)) {\n+                validationErrors.add(\"data_stream [\" + request.name + \"] conflicts with existing alias\");\n+            }\n+\n+            final String backingIndexPrefix = (request.name.startsWith(\".\") ? \"\" : \".\") + request.name + \"-\";\n+            for (String indexName : currentState.metaData().getConcreteAllIndices()) {\n+                if (indexName.startsWith(backingIndexPrefix)) {\n+                    validationErrors.add(\n+                        \"data_stream [\" + request.name + \"] could create backing indices that conflict with existing indices\");\n+                    break;\n+                }\n+            }\n+\n+            if (validationErrors.isEmpty()) {\n+                MetaData.Builder builder = MetaData.builder(currentState.metaData()).put(\n+                    new DataStream(request.name, request.timestampFieldName, Collections.emptyList()));\n+                logger.info(\"adding data stream [{}]\", request.name);\n+                return ClusterState.builder(currentState).metaData(builder).build();\n+            } else {\n+                ValidationException ex = new ValidationException();\n+                ex.addValidationErrors(validationErrors);\n+                throw new IllegalArgumentException(ex);\n+            }\n+        }\n+\n+        private static List<String> validateDataStreamName(String name) {", "originalCommit": "43c52a7a64229116a74979dfffe37ec478a9db24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2e4483604386c43d7b19a5b768d65917bec9d19", "url": "https://github.com/elastic/elasticsearch/commit/b2e4483604386c43d7b19a5b768d65917bec9d19", "message": "move validation to MetaData.Builder", "committedDate": "2020-03-25T17:29:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398039874", "bodyText": "I'm not thrilled with this nested loop that will run in a cluster state update thread, but I think we need to validate against potential backing index conflicts.", "author": "danhermann", "createdAt": "2020-03-25T17:31:02Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1315,20 +1315,36 @@ public MetaData build() {\n                 // iterate again and constructs a helpful message\n                 ArrayList<String> duplicates = new ArrayList<>();\n                 for (ObjectCursor<IndexMetaData> cursor : indices.values()) {\n-                    for (String alias: duplicateAliasesIndices) {\n+                    for (String alias : duplicateAliasesIndices) {\n                         if (cursor.value.getAliases().containsKey(alias)) {\n                             duplicates.add(alias + \" (alias of \" + cursor.value.getIndex() + \")\");\n                         }\n                     }\n                 }\n                 assert duplicates.size() > 0;\n                 throw new IllegalStateException(\"index and alias names need to be unique, but the following duplicates were found [\"\n-                    + Strings.collectionToCommaDelimitedString(duplicates)+ \"]\");\n+                    + Strings.collectionToCommaDelimitedString(duplicates) + \"]\");\n \n             }\n \n             SortedMap<String, AliasOrIndex> aliasAndIndexLookup = Collections.unmodifiableSortedMap(buildAliasAndIndexLookup());\n \n+            DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n+            if (dsMetadata != null) {\n+                for (DataStream ds : dsMetadata.dataStreams().values()) {\n+                    if (aliasAndIndexLookup.containsKey(ds.getName())) {\n+                        throw new IllegalStateException(\"data stream [\" + ds.getName() + \"] conflicts with existing index or alias\");\n+                    }\n+\n+                    final String backingIndexPrefix = (ds.getName().startsWith(\".\") ? \"\" : \".\") + ds.getName() + \"-\";\n+                    for (String indexName : allIndices) {", "originalCommit": "b2e4483604386c43d7b19a5b768d65917bec9d19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODY4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398118681", "bodyText": "I think we don't have to iterate over all indices and can reuse aliasAndIndexLookup sorted map.\nIf we use: aliasAndIndexLookup.subMap(...) then this returns all aliases / indices that share the\nsame prefix are returned and we can check if it is empty and if not throw an error.\nThis method is also used in the WildcardExpressionResolver#suffixWildcard(...) method.", "author": "martijnvg", "createdAt": "2020-03-25T19:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNTIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398125209", "bodyText": "maybe also move this logic into a private method?", "author": "martijnvg", "createdAt": "2020-03-25T19:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTg3NA=="}], "type": "inlineReview"}, {"oid": "920708a37d7b74f1479dccf3e6280cdf74712d0b", "url": "https://github.com/elastic/elasticsearch/commit/920708a37d7b74f1479dccf3e6280cdf74712d0b", "message": "Merge branch 'master' into data_streams_validation", "committedDate": "2020-03-25T17:48:18Z", "type": "commit"}, {"oid": "b67088e0a4aafb983045c0a2f1e3048561e712a4", "url": "https://github.com/elastic/elasticsearch/commit/b67088e0a4aafb983045c0a2f1e3048561e712a4", "message": "review comments", "committedDate": "2020-03-25T21:03:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3NjU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398176574", "bodyText": "nit: a backing index could also conflict with an alias (or data stream in the future)", "author": "martijnvg", "createdAt": "2020-03-25T21:19:40Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1371,6 +1372,25 @@ public MetaData build() {\n             return aliasAndIndexLookup;\n         }\n \n+        private void validateDataStreams(SortedMap<String, AliasOrIndex> aliasAndIndexLookup) {\n+            DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n+            if (dsMetadata != null) {\n+                for (DataStream ds : dsMetadata.dataStreams().values()) {\n+                    if (aliasAndIndexLookup.containsKey(ds.getName())) {\n+                        throw new IllegalStateException(\"data stream [\" + ds.getName() + \"] conflicts with existing index or alias\");\n+                    }\n+\n+                    final String backingIndexPrefixFrom = (ds.getName().startsWith(\".\") ? \"\" : \".\") + ds.getName() + \"-\";\n+                    final String backingIndexPrefixTo = (ds.getName().startsWith(\".\") ? \"\" : \".\") + ds.getName() + \".\";\n+                    SortedMap<?, ?> map = aliasAndIndexLookup.subMap(backingIndexPrefixFrom, backingIndexPrefixTo);\n+                    if (map.size() != 0) {\n+                        throw new IllegalStateException(\n+                            \"data stream [\" + ds.getName() + \"] could create backing indices that conflict with existing indices\");", "originalCommit": "b67088e0a4aafb983045c0a2f1e3048561e712a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b56ebf39343226d2083bd08afe357b8e300f6e4", "url": "https://github.com/elastic/elasticsearch/commit/3b56ebf39343226d2083bd08afe357b8e300f6e4", "message": "remove dot logic", "committedDate": "2020-03-25T21:21:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MzY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398493652", "bodyText": "Should we include the list of conflicting names in the message or at least the first few?", "author": "henningandersen", "createdAt": "2020-03-26T11:17:04Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1371,6 +1372,23 @@ public MetaData build() {\n             return aliasAndIndexLookup;\n         }\n \n+        private void validateDataStreams(SortedMap<String, AliasOrIndex> aliasAndIndexLookup) {\n+            DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n+            if (dsMetadata != null) {\n+                for (DataStream ds : dsMetadata.dataStreams().values()) {\n+                    if (aliasAndIndexLookup.containsKey(ds.getName())) {\n+                        throw new IllegalStateException(\"data stream [\" + ds.getName() + \"] conflicts with existing index or alias\");\n+                    }\n+\n+                    SortedMap<?, ?> map = aliasAndIndexLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\"); // '.' is the char after '-'\n+                    if (map.size() != 0) {\n+                        throw new IllegalStateException(\"data stream [\" + ds.getName() +\n+                            \"] could create backing indices that conflict with existing indices or aliases\");", "originalCommit": "3b56ebf39343226d2083bd08afe357b8e300f6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NDk0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398494945", "bodyText": "Should we rename the method to either \"validateIndexSpaceName\" or \"validateAbstractIndexName\"? Can be done in a follow-up when the naming discussion is clarified.", "author": "henningandersen", "createdAt": "2020-03-26T11:19:25Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -165,9 +166,11 @@ static ClusterState createDataStream(ClusterState currentState, Request request)\n                 throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n+            MetaDataCreateIndexService.validateIndexOrAliasName(request.name,", "originalCommit": "3b56ebf39343226d2083bd08afe357b8e300f6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5OTA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398499068", "bodyText": "The other usages of validateIndexOrAliasName throw a dedicated exception. I am not entirely sure if IllegalArgumentException results in the same RestStatus and message handling. Could we add this to the rest test suite?", "author": "henningandersen", "createdAt": "2020-03-26T11:26:36Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -165,9 +166,11 @@ static ClusterState createDataStream(ClusterState currentState, Request request)\n                 throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n+            MetaDataCreateIndexService.validateIndexOrAliasName(request.name,\n+                (s1, s2) -> new IllegalArgumentException(\"data_stream [\" + s1 + \"] \" + s2));", "originalCommit": "3b56ebf39343226d2083bd08afe357b8e300f6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3MzMxMw==", "url": "https://github.com/elastic/elasticsearch/pull/54083#discussion_r398873313", "bodyText": "Added a REST test to enforce that the same HTTP 400 response code is returned.", "author": "danhermann", "createdAt": "2020-03-26T20:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5OTA2OA=="}], "type": "inlineReview"}, {"oid": "4846c983feaa48cd6a41339030904437be39000d", "url": "https://github.com/elastic/elasticsearch/commit/4846c983feaa48cd6a41339030904437be39000d", "message": "review comments", "committedDate": "2020-03-26T20:31:33Z", "type": "commit"}, {"oid": "31e9fd8684123f1d2b177bfc00d81d3f9aff4bb1", "url": "https://github.com/elastic/elasticsearch/commit/31e9fd8684123f1d2b177bfc00d81d3f9aff4bb1", "message": "Merge branch 'master' into data_streams_validation", "committedDate": "2020-03-26T21:11:58Z", "type": "commit"}, {"oid": "7a6953101fbee2ced4d813ad54ac30a08c2a1b2d", "url": "https://github.com/elastic/elasticsearch/commit/7a6953101fbee2ced4d813ad54ac30a08c2a1b2d", "message": "will add new test in separate PR", "committedDate": "2020-03-26T21:37:45Z", "type": "commit"}, {"oid": "24d603c0e4559aee8ad6ba5527ec98ce7fed3c68", "url": "https://github.com/elastic/elasticsearch/commit/24d603c0e4559aee8ad6ba5527ec98ce7fed3c68", "message": "Merge branch 'master' into data_streams_validation", "committedDate": "2020-03-26T22:27:19Z", "type": "commit"}]}