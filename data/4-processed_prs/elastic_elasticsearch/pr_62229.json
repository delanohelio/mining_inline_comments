{"pr_number": 62229, "pr_title": "Share more query execution code for runtime fields", "pr_createdAt": "2020-09-10T13:55:09Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62229", "timeline": [{"oid": "b5757ba9742b42f98d7b609f242ec18d27fe6490", "url": "https://github.com/elastic/elasticsearch/commit/b5757ba9742b42f98d7b609f242ec18d27fe6490", "message": "LeafFactory#newInstance does not throw IOException", "committedDate": "2020-09-10T12:50:37Z", "type": "commit"}, {"oid": "05db6492f42ce8c6726c59bb2c80eb77ac4162ea", "url": "https://github.com/elastic/elasticsearch/commit/05db6492f42ce8c6726c59bb2c80eb77ac4162ea", "message": "centralize runtime fields query execution", "committedDate": "2020-09-10T13:50:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjU3MA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486366570", "bodyText": "is scriptContext a good name here? I wish that we rename also the different BooleanScriptFieldScript in a followup. That is effectively the script context for boolean runtime fields?", "author": "javanna", "createdAt": "2020-09-10T13:59:29Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractBooleanScriptFieldQuery.java", "diffHunk": "@@ -6,32 +6,24 @@\n \n package org.elasticsearch.xpack.runtimefields.query;\n \n-import org.apache.lucene.index.LeafReaderContext;\n-import org.apache.lucene.search.ConstantScoreScorer;\n-import org.apache.lucene.search.ConstantScoreWeight;\n-import org.apache.lucene.search.DocIdSetIterator;\n-import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.QueryVisitor;\n-import org.apache.lucene.search.ScoreMode;\n-import org.apache.lucene.search.Scorer;\n-import org.apache.lucene.search.TwoPhaseIterator;\n-import org.apache.lucene.search.Weight;\n import org.elasticsearch.script.Script;\n import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n import org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript;\n \n-import java.io.IOException;\n-import java.util.Objects;\n-\n /**\n  * Abstract base class for building queries based on {@link DoubleScriptFieldScript}.\n  */\n-abstract class AbstractBooleanScriptFieldQuery extends AbstractScriptFieldQuery {\n-    private final BooleanScriptFieldScript.LeafFactory leafFactory;\n+abstract class AbstractBooleanScriptFieldQuery extends AbstractScriptFieldQuery<BooleanScriptFieldScript> {\n \n     AbstractBooleanScriptFieldQuery(Script script, BooleanScriptFieldScript.LeafFactory leafFactory, String fieldName) {\n-        super(script, fieldName);\n-        this.leafFactory = Objects.requireNonNull(leafFactory);\n+        super(script, fieldName, leafFactory::newInstance);\n+    }\n+\n+    @Override\n+    protected boolean matches(BooleanScriptFieldScript scriptContext, int docId) {\n+        scriptContext.runForDoc(docId);", "originalCommit": "05db6492f42ce8c6726c59bb2c80eb77ac4162ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NzM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486367384", "bodyText": "It's really a script more than a scriptContext. The context is all of the information we need to compile a script.", "author": "nik9000", "createdAt": "2020-09-10T14:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MTIwMA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486371200", "bodyText": "this is what I struggle with: we have the Script class, and this, which is more of a compiled script leaf abstraction. naming is hard", "author": "javanna", "createdAt": "2020-09-10T14:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MzQxMA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486373410", "bodyText": "Yeah. That Script class is more of a ScriptConfiguration or a ScriptRequest or something like that. These are the \"real\" scripts. I think, at least. Because they instances of these object \"run\".", "author": "nik9000", "createdAt": "2020-09-10T14:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM4MTg5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486381899", "bodyText": "ok I will followup with a proposal to rename these and the corresponding lucene queries", "author": "javanna", "createdAt": "2020-09-10T14:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2OTEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486369108", "bodyText": "Maybe leafFactor should be a function everywhere like it is for long, because the function is all we need after all.", "author": "javanna", "createdAt": "2020-09-10T14:02:41Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractStringScriptFieldQuery.java", "diffHunk": "@@ -6,63 +6,27 @@\n \n package org.elasticsearch.xpack.runtimefields.query;\n \n-import org.apache.lucene.index.LeafReaderContext;\n-import org.apache.lucene.search.ConstantScoreScorer;\n-import org.apache.lucene.search.ConstantScoreWeight;\n-import org.apache.lucene.search.DocIdSetIterator;\n-import org.apache.lucene.search.IndexSearcher;\n-import org.apache.lucene.search.ScoreMode;\n-import org.apache.lucene.search.Scorer;\n-import org.apache.lucene.search.TwoPhaseIterator;\n-import org.apache.lucene.search.Weight;\n import org.elasticsearch.script.Script;\n import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n \n-import java.io.IOException;\n import java.util.List;\n-import java.util.Objects;\n \n /**\n  * Abstract base class for building queries based on {@link StringScriptFieldScript}.\n  */\n-abstract class AbstractStringScriptFieldQuery extends AbstractScriptFieldQuery {\n-    private final StringScriptFieldScript.LeafFactory leafFactory;\n+abstract class AbstractStringScriptFieldQuery extends AbstractScriptFieldQuery<StringScriptFieldScript> {\n \n     AbstractStringScriptFieldQuery(Script script, StringScriptFieldScript.LeafFactory leafFactory, String fieldName) {", "originalCommit": "05db6492f42ce8c6726c59bb2c80eb77ac4162ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MDU0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486370541", "bodyText": "I think they'll end up being a Function<LeafReaderContext, StringRuntimeValues> or something like that when we go to use them in grok or source only fields. But I'm not really sure to be honest. I figured we'd make the change when we got to one of those.", "author": "nik9000", "createdAt": "2020-09-10T14:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2OTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MDQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486370465", "bodyText": "I was also wondering if the visit methods are consistent, i see that most of the impl share the same code, but there are subtleties as not all impls override it. I was about to move the standard impl to the base class but I refrained.", "author": "javanna", "createdAt": "2020-09-10T14:04:29Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractBooleanScriptFieldQuery.java", "diffHunk": "@@ -41,35 +33,6 @@\n      */\n     protected abstract boolean matches(int trues, int falses);\n \n-    @Override\n-    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n-        return new ConstantScoreWeight(this, boost) {\n-            @Override\n-            public boolean isCacheable(LeafReaderContext ctx) {\n-                return false; // scripts aren't really cacheable at this point\n-            }\n-\n-            @Override\n-            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n-                BooleanScriptFieldScript script = leafFactory.newInstance(ctx);\n-                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n-                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n-                    @Override\n-                    public boolean matches() throws IOException {\n-                        script.runForDoc(approximation().docID());\n-                        return AbstractBooleanScriptFieldQuery.this.matches(script.trues(), script.falses());\n-                    }\n-\n-                    @Override\n-                    public float matchCost() {\n-                        return MATCH_COST;\n-                    }\n-                };\n-                return new ConstantScoreScorer(this, score(), scoreMode, twoPhase);\n-            }\n-        };\n-    }\n-\n     @Override\n     public final void visit(QueryVisitor visitor) {\n         // No subclasses contain any Terms because those have to be strings.", "originalCommit": "05db6492f42ce8c6726c59bb2c80eb77ac4162ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MTQzOA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486371438", "bodyText": "The ones that are not for strings aren't going to emit any terms so they all get the standard impl. The String ones have much more interesting visit methods.", "author": "nik9000", "createdAt": "2020-09-10T14:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MDQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MjA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486372064", "bodyText": "We could end up with a AbstractNonStringRuntimeFieldQuery or something like that which had the base class. I didn't go for that because I didn't think it was worth the extra layer just for that one class. But if there are more things to share it'd make sense.", "author": "nik9000", "createdAt": "2020-09-10T14:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MDQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MjQwNA==", "url": "https://github.com/elastic/elasticsearch/pull/62229#discussion_r486372404", "bodyText": "ok I will have another look later.", "author": "javanna", "createdAt": "2020-09-10T14:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MDQ2NQ=="}], "type": "inlineReview"}, {"oid": "168e2258bf501a1b36ca3ea506fae193755d7b56", "url": "https://github.com/elastic/elasticsearch/commit/168e2258bf501a1b36ca3ea506fae193755d7b56", "message": "Merge branch 'master' into enhancement/runtime_fields_share_query", "committedDate": "2020-09-10T14:12:29Z", "type": "commit"}]}