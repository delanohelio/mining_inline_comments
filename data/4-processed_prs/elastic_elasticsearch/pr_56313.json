{"pr_number": 56313, "pr_title": "[DOCS] Extract the cron docs from Watcher docs and add to the API conventions.", "pr_createdAt": "2020-05-06T23:26:50Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56313", "timeline": [{"oid": "66021b63bcc7067a471ad1158c906732349ce3e4", "url": "https://github.com/elastic/elasticsearch/commit/66021b63bcc7067a471ad1158c906732349ce3e4", "message": "[DOCS] Promote cron expressions info from Watcher to a separate topic.", "committedDate": "2020-05-06T23:46:42Z", "type": "forcePushed"}, {"oid": "37117bf35a6c4b87430865c0d48466b462e945cd", "url": "https://github.com/elastic/elasticsearch/commit/37117bf35a6c4b87430865c0d48466b462e945cd", "message": "Test fix", "committedDate": "2020-05-08T22:20:12Z", "type": "forcePushed"}, {"oid": "c912834eee33d3d0f0512e9e22f5b06b57fdff2c", "url": "https://github.com/elastic/elasticsearch/commit/c912834eee33d3d0f0512e9e22f5b06b57fdff2c", "message": "[DOCS] Promote cron expressions info from Watcher to a separate topic.", "committedDate": "2020-05-08T22:39:38Z", "type": "commit"}, {"oid": "c912834eee33d3d0f0512e9e22f5b06b57fdff2c", "url": "https://github.com/elastic/elasticsearch/commit/c912834eee33d3d0f0512e9e22f5b06b57fdff2c", "message": "[DOCS] Promote cron expressions info from Watcher to a separate topic.", "committedDate": "2020-05-08T22:39:38Z", "type": "forcePushed"}, {"oid": "700e1200ef2245849e58081b6a4ae43aa0cf2baf", "url": "https://github.com/elastic/elasticsearch/commit/700e1200ef2245849e58081b6a4ae43aa0cf2baf", "message": "Fix table error", "committedDate": "2020-05-08T22:52:38Z", "type": "commit"}, {"oid": "16e13194361361e5cfba9101f257d49b9f3c5eda", "url": "https://github.com/elastic/elasticsearch/commit/16e13194361361e5cfba9101f257d49b9f3c5eda", "message": "Fixed xref", "committedDate": "2020-05-08T23:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyMzY0MA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423723640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            cron expressions are valid for use with the\n          \n          \n            \n            cron expressions are valid for use with", "author": "jrodewig", "createdAt": "2020-05-12T13:16:27Z", "path": "docs/reference/commands/croneval.asciidoc", "diffHunk": "@@ -19,12 +19,11 @@ bin/elasticsearch-croneval <expression>\n === Description\n \n This command enables you to verify that your\n-https://en.wikipedia.org/wiki/Cron[cron] expressions are valid for use with the\n-{es} {alert-features} and produce the expected results.\n+cron expressions are valid for use with the", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNDEwMA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423724100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All schedule times are in UTC, other timezones are not supported.\n          \n          \n            \n            All schedule times are in coordinated universal time (UTC); other timezones are\n          \n          \n            \n            not supported.", "author": "jrodewig", "createdAt": "2020-05-12T13:17:09Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNDYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423724601", "bodyText": "This seems like a better fit at the very top of the page. No big deal either way though.", "author": "jrodewig", "createdAt": "2020-05-12T13:17:50Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTAyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 0-59 and the special characters `,` `-` `*` `/`\n          \n          \n            \n            Valid values: `0`-`59` and the special characters `,` `-` `*` `/`", "author": "jrodewig", "createdAt": "2020-05-12T13:18:29Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTE2OA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 0-59 and the special characters `,` `-` `*` `/`\n          \n          \n            \n            Valid values: `0`-`59` and the special characters `,` `-` `*` `/`", "author": "jrodewig", "createdAt": "2020-05-12T13:18:41Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTI3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            seconds::\n          \n          \n            \n            `<seconds>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:18:51Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            minutes:: \n          \n          \n            \n            `<minutes>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:19:00Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hours:: \n          \n          \n            \n            `<hours>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:19:11Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 0-23 and the special characters `,` `-` `*` `/`\n          \n          \n            \n            Valid values: `0`-`23` and the special characters `,` `-` `*` `/`", "author": "jrodewig", "createdAt": "2020-05-12T13:19:19Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTc0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725747", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            day_of_month:: \n          \n          \n            \n            `<day_of_month>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:19:28Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n          \n          \n            \n            Valid values: `1`-`31` and the special characters `,` `-` `*` `/` `?` `L` `W`", "author": "jrodewig", "createdAt": "2020-05-12T13:19:36Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNTk2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423725962", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            month::  \n          \n          \n            \n            `<month>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:19:47Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNjQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423726441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n          \n          \n            \n            Valid values: `1`-`12`, `JAN`-`DEC`, `jan`-`dec`, and the special characters `,` `-` `*` `/`", "author": "jrodewig", "createdAt": "2020-05-12T13:20:24Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNjU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423726563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            day_of_week:: \n          \n          \n            \n            `<day_of_week>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:20:35Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNjc3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423726772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n          \n          \n            \n            Valid values: `1`-`7`, `SUN`-`SAT`, `sun`-`sat`,  and the special characters `,` `-` `*` `/` `?` `L` `#`", "author": "jrodewig", "createdAt": "2020-05-12T13:20:52Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNjkxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423726911", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            year:: \n          \n          \n            \n            `<year>`::", "author": "jrodewig", "createdAt": "2020-05-12T13:21:01Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNzA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423727042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n          \n          \n            \n            Valid values: `1970`-`2099` and the special characters `,` `-` `*` `/`", "author": "jrodewig", "createdAt": "2020-05-12T13:21:11Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNzM4OA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423727388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *::\n          \n          \n            \n            `*`::", "author": "jrodewig", "createdAt": "2020-05-12T13:21:42Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNzUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423727539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ?::                \n          \n          \n            \n            `?`::", "author": "jrodewig", "createdAt": "2020-05-12T13:21:55Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNzg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423727875", "bodyText": "Not sure if both statements are needed. I think it's less confusing without the first.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All values. Selects every possible value for a field. For\n          \n          \n            \n            Selects every possible value for a field. For", "author": "jrodewig", "createdAt": "2020-05-12T13:22:24Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyODYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423728623", "bodyText": "Ha!\n\nUse when you don't care what the value is.", "author": "jrodewig", "createdAt": "2020-05-12T13:23:25Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyODkwMw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423728903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            could specify  `9-17` in the `hours` field.\n          \n          \n            \n            could specify `9-17` in the `hours` field.", "author": "jrodewig", "createdAt": "2020-05-12T13:23:48Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -::                 \n          \n          \n            \n            `-`::", "author": "jrodewig", "createdAt": "2020-05-12T13:24:17Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 ", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTQxNg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ,::\n          \n          \n            \n            `,`::", "author": "jrodewig", "createdAt": "2020-05-12T13:24:31Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTUwNw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729507", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /::\n          \n          \n            \n            `/`::", "author": "jrodewig", "createdAt": "2020-05-12T13:24:40Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTY3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            L::\n          \n          \n            \n            `L`::", "author": "jrodewig", "createdAt": "2020-05-12T13:24:54Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729902", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            W::\n          \n          \n            \n            `W`::", "author": "jrodewig", "createdAt": "2020-05-12T13:25:12Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTk2NA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423729964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #::\n          \n          \n            \n            `#`::", "author": "jrodewig", "createdAt": "2020-05-12T13:25:18Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMDM1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423730357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \\", "author": "jrodewig", "createdAt": "2020-05-12T13:25:45Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMTE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423731160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Instead of waiting for our policy to run, let's tell SLM to take a snapshot\n          \n          \n            \n            Instead of waiting for our policy to run, let's tell {slm-init} to take a snapshot", "author": "jrodewig", "createdAt": "2020-05-12T13:26:54Z", "path": "docs/reference/slm/getting-started-slm.asciidoc", "diffHunk": "@@ -112,7 +112,9 @@ This is useful for taking snapshots before making a configuration change,\n upgrading, or to test a new policy. \n Manually executing a policy does not affect its configured schedule. \n \n-For example, the following request manually triggers the `nightly-snapshots` policy:\n+Instead of waiting for our policy to run, let's tell SLM to take a snapshot", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the last weekday of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the last weekday of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:28:36Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.\n+\n+`0 5 9 15W * ?`::\n+Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.\n+\n+`0 5 9 ? * 6#1`::\n+Trigger at 9:05 AM UTC on the first Friday of every month.\n+\n+[[cron-example-last]]\n+===== Setting triggers using last\n+\n+`0 5 9 L * ?`::\n+Trigger at 9:05 AM UTC on the last day of every month.\n+\n+`0 5 9 ? * 2L`::\n+Trigger at 9:05 AM UTC on the last Monday of every month.\n+\n+`0 5 9 LW * ?`::\n+Trigger at 9:05 AM UTC on the last weekday of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjU1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the last Monday of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the last Monday of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:28:43Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.\n+\n+`0 5 9 15W * ?`::\n+Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.\n+\n+`0 5 9 ? * 6#1`::\n+Trigger at 9:05 AM UTC on the first Friday of every month.\n+\n+[[cron-example-last]]\n+===== Setting triggers using last\n+\n+`0 5 9 L * ?`::\n+Trigger at 9:05 AM UTC on the last day of every month.\n+\n+`0 5 9 ? * 2L`::\n+Trigger at 9:05 AM UTC on the last Monday of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjY0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the last day of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the last day of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:28:50Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.\n+\n+`0 5 9 15W * ?`::\n+Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.\n+\n+`0 5 9 ? * 6#1`::\n+Trigger at 9:05 AM UTC on the first Friday of every month.\n+\n+[[cron-example-last]]\n+===== Setting triggers using last\n+\n+`0 5 9 L * ?`::\n+Trigger at 9:05 AM UTC on the last day of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjcyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the first Friday of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the first Friday of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:28:57Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.\n+\n+`0 5 9 15W * ?`::\n+Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.\n+\n+`0 5 9 ? * 6#1`::\n+Trigger at 9:05 AM UTC on the first Friday of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjgwNA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the nearest weekday to the 15th of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:04Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.\n+\n+`0 5 9 15W * ?`::\n+Trigger at 9:05 AM UTC on the nearest weekday to the 15th of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMjg4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423732881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC on the 15th day of every month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC on the 15th day of every month.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:10Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n+\n+`0 5 9 15 * ?`::\n+Trigger at 9:05 AM UTC on the 15th day of every month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzAyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.\n          \n          \n            \n            Trigger at 9:00 a.m. UTC and at 9:30 a.m. UTC every Wednesday in the month of April.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:21Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.\n+\\\n+`0 0,30 9 ? 4 WED`::\n+Trigger at 9:00 AM UTC and at 9:30 AM UTC every Wednesday in the month of April.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzE5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger every April 1st at 4:01 AM UTC.\n          \n          \n            \n            Trigger every April 1st at 4:01 a.m. UTC.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:37Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n+\n+[[cron-example-day]]\n+===== Setting schedules that trigger on a particular day\n+\n+`0 1 4 1 4 ?`::\n+Trigger every April 1st at 4:01 AM UTC.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzI5OA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC every 3 days every month, starting on the first day of the month.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:45Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n+`0 5 9 1/3 * ?`::\n+Trigger at 9:05 AM UTC every 3 days every month, starting on the first day of the month.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.\n          \n          \n            \n            Trigger every 15 minutes starting at 9:00 a.m. UTC and ending at 9:45 a.m. UTC every day.", "author": "jrodewig", "createdAt": "2020-05-12T13:29:57Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n+\n+[[cron-example-interval]]\n+===== Setting interval triggers\n+\n+`0 0/15 9 * * ?`::\n+Trigger every 15 minutes starting at 9:00 AM UTC and ending at 9:45 AM UTC every day.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzU5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733593", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=\n          \n          \n            \n            Trigger every minute starting at 9:00 a.m. UTC and ending at 9:05 a.m. UTC every day.", "author": "jrodewig", "createdAt": "2020-05-12T13:30:09Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.\n+\n+`0 0-5 9 * * ?`::\n+Trigger every minute starting at 9:00 AM UTC and ending at 9:05 AM UTC every day.=", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzcyNA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC every day during the year 2020.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC every day during the year 2020.", "author": "jrodewig", "createdAt": "2020-05-12T13:30:16Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMzgwMw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423733803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC every day.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC every day.", "author": "jrodewig", "createdAt": "2020-05-12T13:30:23Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNTg3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423735871", "bodyText": "Probably want to rewrap line length here.", "author": "jrodewig", "createdAt": "2020-05-12T13:33:12Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNjUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423736509", "bodyText": "I believe the Elastic style is a.m. and p.m..\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to trigger every hour between 9:00 AM and 5:00 PM, you\n          \n          \n            \n            to trigger every hour between 9:00 a.m. and 5:00 p.m., you", "author": "jrodewig", "createdAt": "2020-05-12T13:34:05Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNjYyNA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423736624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1:30AM.\n          \n          \n            \n            1:30 a.m..", "author": "jrodewig", "createdAt": "2020-05-12T13:34:15Z", "path": "docs/reference/slm/getting-started-slm.asciidoc", "diffHunk": "@@ -112,7 +112,9 @@ This is useful for taking snapshots before making a configuration change,\n upgrading, or to test a new policy. \n Manually executing a policy does not affect its configured schedule. \n \n-For example, the following request manually triggers the `nightly-snapshots` policy:\n+Instead of waiting for our policy to run, let's tell SLM to take a snapshot\n+as using the configuration from our policy right now instead of waiting for\n+1:30AM.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNzA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423737063", "bodyText": "It's sometimes helpful to place callouts in the same column so they're more visible.\nNot a big deal though.", "author": "jrodewig", "createdAt": "2020-05-12T13:34:49Z", "path": "docs/reference/slm/getting-started-slm.asciidoc", "diffHunk": "@@ -159,19 +161,26 @@ repository is lost while copying files.\n         \"max_count\": 50\n       }\n     },\n-    \"last_success\": { \n-      \"snapshot_name\": \"nightly-snap-2019.04.24-tmtnyjtrsxkhbrrdcgg18a\", <1>\n-      \"time_string\": \"2019-04-24T16:43:49.316Z\", <2>\n+    \"last_success\": { <1>", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNzM2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423737369", "bodyText": "Should these be capitalized?", "author": "jrodewig", "createdAt": "2020-05-12T13:35:16Z", "path": "docs/reference/slm/getting-started-slm.asciidoc", "diffHunk": "@@ -159,19 +161,26 @@ repository is lost while copying files.\n         \"max_count\": 50\n       }\n     },\n-    \"last_success\": { \n-      \"snapshot_name\": \"nightly-snap-2019.04.24-tmtnyjtrsxkhbrrdcgg18a\", <1>\n-      \"time_string\": \"2019-04-24T16:43:49.316Z\", <2>\n+    \"last_success\": { <1>\n+      \"snapshot_name\": \"nightly-snap-2019.04.24-tmtnyjtrsxkhbrrdcgg18a\", <2>\n+      \"time_string\": \"2019-04-24T16:43:49.316Z\",\n       \"time\": 1556124229316\n     } ,\n-    \"next_execution\": \"2019-04-24T01:30:00.000Z\", <3>\n-    \"next_execution_millis\": 1556048160000 \n+    \"last_failure\": { <3>\n+      \"snapshot_name\": \"nightly-snap-2019.04.02-lohisb5ith2n8hxacaq3mw\",\n+      \"time_string\": \"2019-04-02T01:30:00.000Z\",\n+      \"time\": 1556042030000,\n+      \"details\": \"{\\\"type\\\":\\\"index_not_found_exception\\\",\\\"reason\\\":\\\"no such index [important]\\\",\\\"resource.type\\\":\\\"index_or_alias\\\",\\\"resource.id\\\":\\\"important\\\",\\\"index_uuid\\\":\\\"_na_\\\",\\\"index\\\":\\\"important\\\",\\\"stack_trace\\\":\\\"[important] IndexNotFoundException[no such index [important]]\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.indexNotFoundException(IndexNameExpressionResolver.java:762)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.innerResolve(IndexNameExpressionResolver.java:714)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.resolve(IndexNameExpressionResolver.java:670)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:163)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndexNames(IndexNameExpressionResolver.java:142)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndexNames(IndexNameExpressionResolver.java:102)\\\\n\\\\tat org.elasticsearch.snapshots.SnapshotsService$1.execute(SnapshotsService.java:280)\\\\n\\\\tat org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:47)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.executeTasks(MasterService.java:687)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.calculateTaskOutputs(MasterService.java:310)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.runTasks(MasterService.java:210)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService$Batcher.run(MasterService.java:142)\\\\n\\\\tat org.elasticsearch.cluster.service.TaskBatcher.runIfNotProcessed(TaskBatcher.java:150)\\\\n\\\\tat org.elasticsearch.cluster.service.TaskBatcher$BatchedTask.run(TaskBatcher.java:188)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:688)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:252)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:215)\\\\n\\\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\\\\n\\\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\\\\n\\\\tat java.base/java.lang.Thread.run(Thread.java:834)\\\\n\\\"}\"\n+    } ,\n+    \"next_execution\": \"2019-04-24T01:30:00.000Z\", <4>\n+    \"next_execution_millis\": 1556048160000\n   }\n }\n --------------------------------------------------\n // TESTRESPONSE[skip:the presence of last_failure and last_success is asynchronous and will be present for users, but is untestable]\n \n-<1> The name of the last snapshot that was succesfully initiated by the policy\n-<2> When the snapshot was initiated\n-<3> When the policy will initiate the next snapshot\n+<1> information about the last time the policy successfully initated a snapshot\n+<2> the name of the snapshot that was successfully initiated\n+<3> information about the last time the policy failed to initiate a snapshot\n+<4> the next time the policy will execute", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDEzMg==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423740132", "bodyText": "Don't think we need \"super.\" I'd also reorder.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            WARNING:  While cron` triggers are super powerful, we recommend using one of\n          \n          \n            \n            the other schedule types if you can, as they are much more\n          \n          \n            \n            straightforward to configure.\n          \n          \n            \n            WARNING:  While cron` triggers are powerful, other schedule types are more\n          \n          \n            \n            straightforward to configure. We recommend using another schedule types if\n          \n          \n            \n            possible.", "author": "jrodewig", "createdAt": "2020-05-12T13:39:01Z", "path": "x-pack/docs/en/watcher/trigger/schedule/cron.asciidoc", "diffHunk": "@@ -1,174 +1,15 @@\n-[role=\"xpack\"]\n [[schedule-cron]]\n-==== `cron` schedule\n+==== Cron schedule\n \n-A <<trigger-schedule,`schedule`>> trigger that enables you to use a\n-https://en.wikipedia.org/wiki/Cron[cron] style expression to specify when you\n-want the scheduler to start the watch execution. {watcher} uses the cron parser\n-from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n-information about writing Quartz cron expressions, see the\n-http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+A <<trigger-schedule, `schedule`>> trigger that enables you to use a\n+<<cron-expressions, cron expression>> to specify when you\n+want the scheduler to start the watch execution.\n \n-WARNING:  While `cron` triggers are super powerful, we recommend using one of\n-          the other schedule types if you can, as they are much more\n-          straightforward to configure. If you use `cron`, construct your `cron`\n-          expressions with care to be sure you are actually setting the schedule\n-          you want. You can use the <<croneval,`elasticsearch-croneval`>> tool to validate\n-          your cron expressions and see what the resulting trigger times will be.\n+WARNING:  While cron` triggers are super powerful, we recommend using one of\n+the other schedule types if you can, as they are much more\n+straightforward to configure.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423740781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To validate a cron expression, pass it in as a parameter to\t`elasticsearch-croneval`:\t\n          \n          \n            \n            To validate a cron expression, pass it in as a parameter to `elasticsearch-croneval`:", "author": "jrodewig", "createdAt": "2020-05-12T13:39:48Z", "path": "x-pack/docs/en/watcher/trigger/schedule/cron.asciidoc", "diffHunk": "@@ -214,21 +55,15 @@ minute during the weekend:\n // NOTCONSOLE\n \n [[croneval]]\n-===== Verifying cron expressions\n+===== Use croneval to validate cron expressions\n \n-The {es} {alert-features} provide a\n-<<elasticsearch-croneval,`elasticsearch-croneval`>> command line tool\n-that you can use to verify that your cron expressions are valid and produce the\n-expected results. This tool is provided in the `$ES_HOME/bin` directory.\n+{es} provides a <<elasticsearch-croneval, `elasticsearch-croneval`>> command line tool \n+in the `$ES_HOME/bin` directory that you can use to check that your cron expressions \n+are valid and produce the expected results.\n \n-To verify a cron expression, simply pass it in as a parameter to\n-`elasticsearch-croneval`:\n+To validate a cron expression, pass it in as a parameter to\t`elasticsearch-croneval`:\t", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDk1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423740959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [source,bash]\t\n          \n          \n            \n            --------------------------------------------------\t\n          \n          \n            \n            [source,bash]\n          \n          \n            \n            --------------------------------------------------", "author": "jrodewig", "createdAt": "2020-05-12T13:40:01Z", "path": "x-pack/docs/en/watcher/trigger/schedule/cron.asciidoc", "diffHunk": "@@ -214,21 +55,15 @@ minute during the weekend:\n // NOTCONSOLE\n \n [[croneval]]\n-===== Verifying cron expressions\n+===== Use croneval to validate cron expressions\n \n-The {es} {alert-features} provide a\n-<<elasticsearch-croneval,`elasticsearch-croneval`>> command line tool\n-that you can use to verify that your cron expressions are valid and produce the\n-expected results. This tool is provided in the `$ES_HOME/bin` directory.\n+{es} provides a <<elasticsearch-croneval, `elasticsearch-croneval`>> command line tool \n+in the `$ES_HOME/bin` directory that you can use to check that your cron expressions \n+are valid and produce the expected results.\n \n-To verify a cron expression, simply pass it in as a parameter to\n-`elasticsearch-croneval`:\n+To validate a cron expression, pass it in as a parameter to\t`elasticsearch-croneval`:\t\n \n-[source,bash]\n---------------------------------------------------\n+[source,bash]\t\n+--------------------------------------------------\t", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MTMzNA==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423741334", "bodyText": "This isn't a complete sentence. Sounds more like a def.\nMaybe reword? I know we do this is some other place though.", "author": "jrodewig", "createdAt": "2020-05-12T13:40:26Z", "path": "x-pack/docs/en/watcher/trigger/schedule/cron.asciidoc", "diffHunk": "@@ -1,174 +1,15 @@\n-[role=\"xpack\"]\n [[schedule-cron]]\n-==== `cron` schedule\n+==== Cron schedule\n \n-A <<trigger-schedule,`schedule`>> trigger that enables you to use a\n-https://en.wikipedia.org/wiki/Cron[cron] style expression to specify when you\n-want the scheduler to start the watch execution. {watcher} uses the cron parser\n-from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n-information about writing Quartz cron expressions, see the\n-http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+A <<trigger-schedule, `schedule`>> trigger that enables you to use a\n+<<cron-expressions, cron expression>> to specify when you\n+want the scheduler to start the watch execution.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MzIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/56313#discussion_r423743215", "bodyText": "Overlooked this one.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Trigger at 9:05 AM UTC Monday through Friday.\n          \n          \n            \n            Trigger at 9:05 a.m. UTC Monday through Friday.", "author": "jrodewig", "createdAt": "2020-05-12T13:42:51Z", "path": "docs/reference/rest-api/cron-expressions.asciidoc", "diffHunk": "@@ -0,0 +1,182 @@\n+[[cron-expressions]]\n+=== Cron expressions\n+\n+{es} uses the cron parser from the http://www.quartz-scheduler.org[Quartz Job Scheduler]. For more\n+information about writing Quartz cron expressions, see the\n+http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html[Quartz CronTrigger Tutorial].\n+\n+All schedule times are in UTC, other timezones are not supported.\n+\n+A cron expression is a string of the following form:\n+\n+[source,txt]\n+------------------------------\n+    <seconds> <minutes> <hours> <day_of_month> <month> <day_of_week> [year]\n+------------------------------\n+\n+TIP: You can use the <<elasticsearch-croneval>> command line tool to validate your cron expressions.\n+\n+\n+[[cron-elements]]\n+==== Cron expression elements\n+\n+All elements are required except for `year`. \n+See <<cron-special-characters>> for information about the allowed special characters.\n+\n+seconds::\n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+minutes:: \n+(Required)\n+Valid values: 0-59 and the special characters `,` `-` `*` `/`\n+\n+hours:: \n+(Required)\n+Valid values: 0-23 and the special characters `,` `-` `*` `/`\n+\n+day_of_month:: \n+(Required)\n+Valid values: 1-31 and the special characters `,` `-` `*` `/` `?` `L` `W`\n+\n+month::  \n+(Required)\n+Valid values: 1-12, JAN-DEC, jan-dec, and the special characters `,` `-` `*` `/`\n+\n+day_of_week:: \n+(Required)\n+Valid values: 1-7, SUN-SAT, sun-sat,  and the special characters `,` `-` `*` `/` `?` `L` `#`\n+\n+year:: \n+(Optional)\n+Valid values: 1970-2099 and the special characters `,` `-` `*` `/`\n+\n+[[cron-special-characters]]\n+==== Cron special characters\n+\n+*::\n+All values. Selects every possible value for a field. For\n+example, `*` in the `hours` field means \"every hour\".\n+\n+?::                \n+No specific value. Use when you don't care what the value\n+is. For example, if you want the schedule to trigger on a\n+particular day of the month, but don't care what day of\n+the week that happens to be, you can specify `?` in the\n+`day_of_week` field.\n+\n+-::                 \n+A range of values (inclusive). Use to separate a minimum\n+and maximum value. For example, if you want the schedule\n+to trigger every hour between 9:00 AM and 5:00 PM, you\n+could specify  `9-17` in the `hours` field.\n+\n+,::\n+Multiple values. Use to separate multiple values for a\n+field. For example, if you want the schedule to trigger\n+every Tuesday and Thursday, you could specify `TUE,THU`\n+in the `day_of_week` field.\n+\n+/::\n+Increment. Use to separate values when specifying a time\n+increment. The first value represents the starting point,\n+and the second value represents the interval. For example,\n+if you want the schedule to trigger every 20 minutes\n+starting at the top of the hour, you could specify `0/20`\n+in the `minutes` field. Similarly, specifying `1/5` in\n+`day_of_month` field will trigger every 5 days starting on\n+the first day of the month.\n+\n+L::\n+Last. Use in the `day_of_month` field to mean the last day\n+of the month--day 31 for January, day 28 for February in\n+non-leap years, day 30 for April, and so on. Use alone in\n+the `day_of_week` field in place of `7` or `SAT`, or after\n+a particular day of the week to select the last day of that\n+type in the month. For example `6L` means the last Friday\n+of the month. You can specify `LW` in the `day_of_month`\n+field to specify the last weekday of the month. Avoid using\n+the `L` option when specifying lists or ranges of values,\n+as the results likely won't be what you expect.\n+\n+W::\n+Weekday. Use to specify the weekday (Monday-Friday) nearest\n+the given day. As an example, if you specify `15W` in the\n+`day_of_month` field and the 15th is a Saturday, the\n+schedule will trigger on the 14th. If the 15th is a Sunday,\n+the schedule will trigger on Monday the 16th. If the 15th\n+is a Tuesday, the schedule will trigger on Tuesday the 15th.\n+However if you specify `1W` as the value for `day_of_month`,\n+and the 1st is a Saturday, the schedule will trigger on\n+Monday the 3rd--it won't jump over the month boundary. You\n+can specify `LW` in the `day_of_month` field to specify the\n+last weekday of the month. You can only use the `W` option\n+when the `day_of_month` is a single day--it is not valid\n+when specifying a range or list of days.\n+\n+#::\n+Nth XXX day in a month. Use in the `day_of_week` field to\n+specify the nth XXX day of the month. For example, if you\n+specify `6#1`, the schedule will trigger on the first\n+Friday of the month. Note that if you specify `3#5` and\n+there are not 5 Tuesdays in a particular month, the\n+schedule won't trigger that month.\n+\n+[[cron-expression-examples]]\n+==== Examples\n+\n+[[cron-example-daily]]\n+===== Setting daily triggers\n+\n+`0 5 9 * * ?`::\n+Trigger at 9:05 AM UTC every day.\n+\n+`0 5 9 * * ? 2020`::\n+Trigger at 9:05 AM UTC every day during the year 2020.\n+\n+[[cron-example-range]]\n+===== Restricting triggers to a range of days or times\n+\n+`0 5 9 ? * MON-FRI`::\n+Trigger at 9:05 AM UTC Monday through Friday.", "originalCommit": "16e13194361361e5cfba9101f257d49b9f3c5eda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a86a250d5eab5c05d61b59866531b34f831363f4", "url": "https://github.com/elastic/elasticsearch/commit/a86a250d5eab5c05d61b59866531b34f831363f4", "message": "Apply suggestions from code review\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-05-12T21:07:58Z", "type": "commit"}, {"oid": "18d73f375a0b185c1870f01dfb8a944ea5c37ec7", "url": "https://github.com/elastic/elasticsearch/commit/18d73f375a0b185c1870f01dfb8a944ea5c37ec7", "message": "Incorporated review feedback", "committedDate": "2020-05-12T21:28:06Z", "type": "commit"}]}