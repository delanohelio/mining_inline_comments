{"pr_number": 53130, "pr_title": "Add Integration tests for the new IDP handlers", "pr_createdAt": "2020-03-04T18:26:08Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53130", "timeline": [{"oid": "57b89d98fe48dbb50879f26009228705ed13b061", "url": "https://github.com/elastic/elasticsearch/commit/57b89d98fe48dbb50879f26009228705ed13b061", "message": "Add Integration tests for the new IDP handlers\n\nAdds a base class for IDP related EsIntegTests (IdpIntegTestCase)\nand tests for the merged APIs", "committedDate": "2020-03-04T18:24:25Z", "type": "commit"}, {"oid": "e80d0253c1f209dd6ff5d8bd8c9811f7537fd8a9", "url": "https://github.com/elastic/elasticsearch/commit/e80d0253c1f209dd6ff5d8bd8c9811f7537fd8a9", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into integ-tests", "committedDate": "2020-03-09T09:54:37Z", "type": "commit"}, {"oid": "e222b8df5c9eb2eff186fce9cb437ee7f6b2f2e8", "url": "https://github.com/elastic/elasticsearch/commit/e222b8df5c9eb2eff186fce9cb437ee7f6b2f2e8", "message": "Merge branch 'feature-internal-idp' into integ-tests", "committedDate": "2020-03-09T14:37:22Z", "type": "commit"}, {"oid": "e0ca036615cafcc9aeae734ede605eca9f788efb", "url": "https://github.com/elastic/elasticsearch/commit/e0ca036615cafcc9aeae734ede605eca9f788efb", "message": "add tests", "committedDate": "2020-03-11T10:00:10Z", "type": "commit"}, {"oid": "87f62e707cd4dfb55444926d17cd4ba25de04ce8", "url": "https://github.com/elastic/elasticsearch/commit/87f62e707cd4dfb55444926d17cd4ba25de04ce8", "message": "cleanup debuggin", "committedDate": "2020-03-11T10:02:21Z", "type": "commit"}, {"oid": "fd0b58ac73eeb2acb6b2a62ce68bd3eca0d5bfc6", "url": "https://github.com/elastic/elasticsearch/commit/fd0b58ac73eeb2acb6b2a62ce68bd3eca0d5bfc6", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into integ-tests", "committedDate": "2020-03-11T10:17:52Z", "type": "commit"}, {"oid": "12d3d5ee0e8609719db891cd99d56c49855392dd", "url": "https://github.com/elastic/elasticsearch/commit/12d3d5ee0e8609719db891cd99d56c49855392dd", "message": "Merge branch 'feature-internal-idp' into integ-tests", "committedDate": "2020-03-11T10:47:14Z", "type": "commit"}, {"oid": "3a54f504274da2ac169f4d0b1da197ba6ffb4dc7", "url": "https://github.com/elastic/elasticsearch/commit/3a54f504274da2ac169f4d0b1da197ba6ffb4dc7", "message": "Merge branch 'feature-internal-idp' into integ-tests", "committedDate": "2020-03-12T14:32:44Z", "type": "commit"}, {"oid": "6228be6e3c922190da9ac1041768a7ce53bcb8a3", "url": "https://github.com/elastic/elasticsearch/commit/6228be6e3c922190da9ac1041768a7ce53bcb8a3", "message": "changes", "committedDate": "2020-03-12T15:37:09Z", "type": "commit"}, {"oid": "f9238c008c2729667aa48d178e956c4d9f45d87a", "url": "https://github.com/elastic/elasticsearch/commit/f9238c008c2729667aa48d178e956c4d9f45d87a", "message": "Merge branch 'integ-tests' of github.com:jkakavas/elasticsearch into integ-tests", "committedDate": "2020-03-18T08:43:23Z", "type": "commit"}, {"oid": "77c6847554b499b247c67721fb19ca1b18620a4d", "url": "https://github.com/elastic/elasticsearch/commit/77c6847554b499b247c67721fb19ca1b18620a4d", "message": "Merge branch 'feature-internal-idp' into integ-tests", "committedDate": "2020-03-18T08:44:55Z", "type": "commit"}, {"oid": "ad303e9d23c28f4f5269d231d548a951d5d08781", "url": "https://github.com/elastic/elasticsearch/commit/ad303e9d23c28f4f5269d231d548a951d5d08781", "message": "Necessary adjustments now that other PRs are merged", "committedDate": "2020-03-18T14:56:24Z", "type": "commit"}, {"oid": "55a7d1e09825bb239cfa08f6655ea964dd11cb8d", "url": "https://github.com/elastic/elasticsearch/commit/55a7d1e09825bb239cfa08f6655ea964dd11cb8d", "message": "spotless", "committedDate": "2020-03-18T15:21:51Z", "type": "commit"}, {"oid": "d804aac2bf39fe73d743c9b08d1114f2ae7cc621", "url": "https://github.com/elastic/elasticsearch/commit/d804aac2bf39fe73d743c9b08d1114f2ae7cc621", "message": "checkstyle", "committedDate": "2020-03-18T15:55:32Z", "type": "commit"}, {"oid": "1de69669ac8967fb498a21b3d87a90a9876a5781", "url": "https://github.com/elastic/elasticsearch/commit/1de69669ac8967fb498a21b3d87a90a9876a5781", "message": "Fix bug and refactorings", "committedDate": "2020-03-19T14:29:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2ODg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r395068874", "bodyText": "Bug was here", "author": "jkakavas", "createdAt": "2020-03-19T14:30:12Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -88,7 +88,7 @@ protected void doExecute(Task task, SamlInitiateSingleSignOnRequest request,\n                         final SuccessfulAuthenticationResponseMessageBuilder builder =\n                             new SuccessfulAuthenticationResponseMessageBuilder(samlFactory, Clock.systemUTC(), identityProvider);\n                         try {\n-                            final Response response = builder.build(user, null);\n+                            final Response response = builder.build(user, authenticationState);", "originalCommit": "1de69669ac8967fb498a21b3d87a90a9876a5781", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4dc5225ce9cf0507d7453256af5da063f67bccef", "url": "https://github.com/elastic/elasticsearch/commit/4dc5225ce9cf0507d7453256af5da063f67bccef", "message": "revert unnecessary changes", "committedDate": "2020-03-19T14:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5ODQ1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r395998455", "bodyText": "Another bug was here", "author": "jkakavas", "createdAt": "2020-03-21T14:45:37Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/privileges/UserPrivilegeResolver.java", "diffHunk": "@@ -81,8 +81,8 @@ public void resolve(ServiceProviderPrivileges service, ActionListener<UserPrivil\n         final String username = securityContext.requireUser().principal();\n         request.username(username);\n         request.applicationPrivileges(buildResourcePrivilege(service));\n-        request.applicationPrivileges(buildResourcePrivilege(service));\n         request.clusterPrivileges(Strings.EMPTY_ARRAY);\n+        request.indexPrivileges(new RoleDescriptor.IndicesPrivileges[0]);", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMzAxNA==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396203014", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LocalStateIdentityProvider extends LocalStateCompositeXPackPlugin {\n          \n          \n            \n            public class LocalStateIdentityProviderPlugin extends LocalStateCompositeXPackPlugin {", "author": "tvernum", "createdAt": "2020-03-23T04:01:25Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/LocalStateIdentityProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.ssl.SSLService;\n+import org.elasticsearch.xpack.security.Security;\n+\n+import java.nio.file.Path;\n+\n+public class LocalStateIdentityProvider extends LocalStateCompositeXPackPlugin {", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjYxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396222619", "bodyText": "It's not clear from the names of the constants (or even the values) what these users/roles represent.\nAre they\n\nthe cloud system user?\nusers of cloud console?\n\nI believe they're the latter, so maybe CONSOLE_USER etc ? Or SAMPLE_USER ?\nIt's tough to name, but at the very least a comment would help.", "author": "tvernum", "createdAt": "2020-03-23T05:40:26Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdentityProviderIntegTestCase.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.test;\n+\n+import io.netty.util.ThreadDeathWatcher;\n+import io.netty.util.concurrent.GlobalEventExecutor;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.security.SecurityField;\n+import org.elasticsearch.xpack.core.security.authc.esnative.NativeRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.file.FileRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.support.Hasher;\n+import org.elasticsearch.xpack.idp.LocalStateIdentityProvider;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.AtomicMoveNotSupportedException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_EMAIL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_GIVEN_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_SURNAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_DISPLAY_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_URL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_SSO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.APPLICATION_NAME_SETTING;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.NAMEID_FORMAT_SETTING;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+\n+public abstract class IdentityProviderIntegTestCase extends ESIntegTestCase {\n+\n+    public static final String TEST_USER_NAME = \"idp_user\";\n+    public static final String TEST_PASSWORD = \"idp_user_password\";\n+    public static final String TEST_PASSWORD_HASHED =\n+        new String(Hasher.resolve(\"bcrypt9\").hash(new SecureString(TEST_PASSWORD.toCharArray())));\n+    public static final String TEST_ROLE = \"idp_user_role\";\n+    public static final String TEST_SUPERUSER = \"test_superuser\";", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396429784", "bodyText": "You're right it was a mess. I added specific users with specific roles granting them only what they need to do and added some comments too.", "author": "jkakavas", "createdAt": "2020-03-23T12:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396222834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"       privileges: [ role:superuser ]\\n\";\n          \n          \n            \n                        \"       privileges: [ sso:superuser ]\\n\";\n          \n      \n    \n    \n  \n\nWe're proposing to name these \"sso:\" so it's clear within the security cluster that they have a \"magic\" SSO purpose and aren't just \"cloud RBAC\".", "author": "tvernum", "createdAt": "2020-03-23T05:41:21Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdentityProviderIntegTestCase.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.test;\n+\n+import io.netty.util.ThreadDeathWatcher;\n+import io.netty.util.concurrent.GlobalEventExecutor;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.security.SecurityField;\n+import org.elasticsearch.xpack.core.security.authc.esnative.NativeRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.file.FileRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.support.Hasher;\n+import org.elasticsearch.xpack.idp.LocalStateIdentityProvider;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.AtomicMoveNotSupportedException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_EMAIL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_GIVEN_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_SURNAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_DISPLAY_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_URL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_SSO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.APPLICATION_NAME_SETTING;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.NAMEID_FORMAT_SETTING;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+\n+public abstract class IdentityProviderIntegTestCase extends ESIntegTestCase {\n+\n+    public static final String TEST_USER_NAME = \"idp_user\";\n+    public static final String TEST_PASSWORD = \"idp_user_password\";\n+    public static final String TEST_PASSWORD_HASHED =\n+        new String(Hasher.resolve(\"bcrypt9\").hash(new SecureString(TEST_PASSWORD.toCharArray())));\n+    public static final String TEST_ROLE = \"idp_user_role\";\n+    public static final String TEST_SUPERUSER = \"test_superuser\";\n+    public static final String SP_ENTITY_ID = \"ec:abcdef:123456\";\n+    public static final RequestOptions IDP_REQUEST_OPTIONS = RequestOptions.DEFAULT.toBuilder()\n+        .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+            new SecureString(TEST_PASSWORD.toCharArray())))\n+        .build();\n+    private static Path PARENT_DIR;\n+\n+    @BeforeClass\n+    public static void setup(){\n+        PARENT_DIR = createTempDir();\n+    }\n+\n+    /**\n+     * A JUnit class level rule that runs after the AfterClass method in {@link ESIntegTestCase},\n+     * which stops the cluster. After the cluster is stopped, there are a few netty threads that\n+     * can linger, so we wait for them to finish otherwise these lingering threads can intermittently\n+     * trigger the thread leak detector\n+     */\n+    @ClassRule\n+    public static final ExternalResource STOP_NETTY_RESOURCE = new ExternalResource() {\n+        @Override\n+        protected void after() {\n+            try {\n+                GlobalEventExecutor.INSTANCE.awaitInactivity(5, TimeUnit.SECONDS);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+            } catch (IllegalStateException e) {\n+                if (e.getMessage().equals(\"thread was not started\") == false) {\n+                    throw e;\n+                }\n+                // ignore since the thread was never started\n+            }\n+\n+            try {\n+                ThreadDeathWatcher.awaitInactivity(5, TimeUnit.SECONDS);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+            }\n+        }\n+    };\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        final Path home = nodePath(PARENT_DIR, nodeOrdinal);\n+        final Path xpackConf = home.resolve(\"config\");\n+        try {\n+            Files.createDirectories(xpackConf);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        writeFile(xpackConf, \"roles.yml\", configRoles());\n+        writeFile(xpackConf, \"users\", configUsers());\n+        writeFile(xpackConf, \"users_roles\", configUsersRoles());\n+        Settings.Builder builder = Settings.builder()\n+            .put(super.nodeSettings(nodeOrdinal))\n+            .put(XPackSettings.SECURITY_ENABLED.getKey(), true)\n+            .put(NetworkModule.TRANSPORT_TYPE_KEY, randomBoolean() ? SecurityField.NAME4 : SecurityField.NIO)\n+            .put(NetworkModule.HTTP_TYPE_KEY, randomBoolean() ? SecurityField.NAME4 : SecurityField.NIO)\n+            .put(\"xpack.idp.enabled\", true)\n+            .put(IDP_ENTITY_ID.getKey(), \"urn:elastic:cloud:idp\")\n+            .put(IDP_SSO_REDIRECT_ENDPOINT.getKey(), \"https://idp.org/sso/redirect\")\n+            .put(IDP_ORGANIZATION_NAME.getKey(), \"Identity Provider\")\n+            .put(IDP_ORGANIZATION_DISPLAY_NAME.getKey(), \"Identity Provider\")\n+            .put(IDP_ORGANIZATION_URL.getKey(), \"https://idp.org\")\n+            .put(IDP_CONTACT_GIVEN_NAME.getKey(), \"Tony\")\n+            .put(IDP_CONTACT_SURNAME.getKey(), \"Stark\")\n+            .put(IDP_CONTACT_EMAIL.getKey(), \"tony@starkindustries.com\")\n+            .put(APPLICATION_NAME_SETTING.getKey(), \"elastic-cloud\")\n+            .put(NAMEID_FORMAT_SETTING.getKey(), TRANSIENT)\n+            .put(\"xpack.idp.signing.key\", resolveResourcePath(\"/keypair/keypair_RSA_2048.key\"))\n+            .put(\"xpack.idp.signing.certificate\", resolveResourcePath(\"/keypair/keypair_RSA_2048.crt\"))\n+            .put(\"xpack.security.authc.realms.\" + FileRealmSettings.TYPE + \".file.order\", 0)\n+            .put(\"xpack.security.authc.realms.\" + NativeRealmSettings.TYPE + \".index.order\", \"1\")\n+            .put(XPackSettings.API_KEY_SERVICE_ENABLED_SETTING.getKey(), true)\n+            .put(\"xpack.license.self_generated.type\", \"trial\");\n+        return builder.build();\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return List.of(LocalStateIdentityProvider.class, Netty4Plugin.class, CommonAnalysisPlugin.class);\n+    }\n+\n+    @Override\n+    protected boolean addMockTransportService() {\n+        return false; // security has its own transport service\n+    }\n+\n+    @Override\n+    protected boolean addMockHttpTransport() {\n+        return false; // enable http\n+    }\n+\n+    @Override\n+    protected Function<Client, Client> getClientWrapper() {\n+        Map<String, String> headers = Collections.singletonMap(\"Authorization\",\n+            basicAuthHeaderValue(TEST_USER_NAME, new SecureString(TEST_PASSWORD.toCharArray())));\n+        // we need to wrap node clients because we do not specify a user for nodes and all requests will use the system\n+        // user. This is ok for internal n2n stuff but the test framework does other things like wiping indices, repositories, etc\n+        // that the system user cannot do. so we wrap the node client with a user that can do these things since the client() calls\n+        // return a node client\n+        return client -> (client instanceof NodeClient) ? client.filterWithHeader(headers) : client;\n+    }\n+\n+    @Override\n+    protected Path nodeConfigPath(int nodeOrdinal) {\n+        return nodePath(PARENT_DIR, nodeOrdinal).resolve(\"config\");\n+    }\n+\n+    private String configRoles() {\n+        // test role allows for everything\n+        return TEST_ROLE + \":\\n\" +\n+            \"  cluster: [ ALL ]\\n\" +\n+            \"  indices:\\n\" +\n+            \"    - names: '*'\\n\" +\n+            \"      allow_restricted_indices: true\\n\" +\n+            \"      privileges: [ ALL ]\\n\" +\n+            \"  applications:\\n \" +\n+            \"    - application: elastic-cloud\\n\" +\n+            \"       resources: [ '\" + SP_ENTITY_ID + \"' ]\\n\" +\n+            \"       privileges: [ role:superuser ]\\n\";", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDAyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396224021", "bodyText": "I don't think we should really run the cloud system user as superuser.\nIt would be better to create a cloud_system role that has the access we think is reasonable, and test with that.\nWe don't want the APIs to require as superuser, but if that's all we test with, we run the risk of doing something that requires it (the first release of API keys did exactly that).", "author": "tvernum", "createdAt": "2020-03-23T05:46:26Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdentityProviderIntegTestCase.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.test;\n+\n+import io.netty.util.ThreadDeathWatcher;\n+import io.netty.util.concurrent.GlobalEventExecutor;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.security.SecurityField;\n+import org.elasticsearch.xpack.core.security.authc.esnative.NativeRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.file.FileRealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.support.Hasher;\n+import org.elasticsearch.xpack.idp.LocalStateIdentityProvider;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.AtomicMoveNotSupportedException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_EMAIL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_GIVEN_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_CONTACT_SURNAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_DISPLAY_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_NAME;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_ORGANIZATION_URL;\n+import static org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProviderBuilder.IDP_SSO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.APPLICATION_NAME_SETTING;\n+import static org.elasticsearch.xpack.idp.saml.sp.ServiceProviderDefaults.NAMEID_FORMAT_SETTING;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+\n+public abstract class IdentityProviderIntegTestCase extends ESIntegTestCase {\n+\n+    public static final String TEST_USER_NAME = \"idp_user\";\n+    public static final String TEST_PASSWORD = \"idp_user_password\";\n+    public static final String TEST_PASSWORD_HASHED =\n+        new String(Hasher.resolve(\"bcrypt9\").hash(new SecureString(TEST_PASSWORD.toCharArray())));\n+    public static final String TEST_ROLE = \"idp_user_role\";\n+    public static final String TEST_SUPERUSER = \"test_superuser\";\n+    public static final String SP_ENTITY_ID = \"ec:abcdef:123456\";\n+    public static final RequestOptions IDP_REQUEST_OPTIONS = RequestOptions.DEFAULT.toBuilder()\n+        .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+            new SecureString(TEST_PASSWORD.toCharArray())))\n+        .build();", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396429836", "bodyText": "++ I fixed this above", "author": "jkakavas", "createdAt": "2020-03-23T12:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDcyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396224726", "bodyText": "This isn't really an assert - it's more of\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertServiceProviderIsRegistered(String entityId, String acsUrl) throws Exception {\n          \n          \n            \n                private void registerServiceProvider(String entityId, String acsUrl) throws Exception {", "author": "tvernum", "createdAt": "2020-03-23T05:49:25Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/action/SamlIdentityProviderTests.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.rest.yaml.ObjectPath;\n+import org.elasticsearch.xpack.core.security.action.CreateApiKeyRequestBuilder;\n+import org.elasticsearch.xpack.core.security.action.CreateApiKeyResponse;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderDocument;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.elasticsearch.xpack.idp.saml.test.IdentityProviderIntegTestCase;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameIDPolicy;\n+import org.opensaml.security.SecurityException;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.crypto.XMLSigningUtil;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.Deflater;\n+import java.util.zip.DeflaterOutputStream;\n+\n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.joda.time.DateTime.now;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE, numClientNodes = 0, numDataNodes = 0)\n+public class SamlIdentityProviderTests extends IdentityProviderIntegTestCase {\n+\n+    private final SamlFactory samlFactory = new SamlFactory();\n+\n+    public void testIdpInitiatedSso() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+\n+        // User login a.k.a exchange the user credentials for an API Key\n+        final String apiKeyCredentials = getApiKeyFromCredentials(TEST_USER_NAME, new SecureString(TEST_PASSWORD.toCharArray()));\n+        // Make a request to init an SSO flow with the API Key as secondary authentication\n+        Request request = new Request(\"POST\", \"/_idp/saml/init\");\n+        request.setOptions(RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+                new SecureString(TEST_PASSWORD.toCharArray())))\n+            .addHeader(\"es-secondary-authorization\", \"ApiKey \" + apiKeyCredentials)\n+            .build());\n+        request.setJsonEntity(\"{ \\\"entity_id\\\": \\\"\" + entityId + \"\\\"}\");\n+        Response initResponse = getRestClient().performRequest(request);\n+        ObjectPath objectPath = ObjectPath.createFromResponse(initResponse);\n+        assertThat(objectPath.evaluate(\"post_url\").toString(), equalTo(acsUrl));\n+        final String body = objectPath.evaluate(\"saml_response\").toString();\n+        assertThat(body, containsString(\"Destination=\\\"\" + acsUrl + \"\\\"\"));\n+        assertThat(body, containsString(\"<saml2:Audience>\" + entityId + \"</saml2:Audience>\"));\n+        assertThat(body, containsString(\"<saml2:NameID Format=\\\"\" + TRANSIENT + \"\\\">\"));\n+        Map<String, String> serviceProvider = objectPath.evaluate(\"service_provider\");\n+        assertThat(serviceProvider, hasKey(\"entity_id\"));\n+        assertThat(serviceProvider.get(\"entity_id\"), equalTo(entityId));\n+        assertContainsAttributeWithValue(body, \"principal\", TEST_USER_NAME);\n+    }\n+\n+    public void testIdPInitiatedSsoFailsForUnknownSP() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        // User login a.k.a exchange the user credentials for an API Key\n+        final String apiKeyCredentials = getApiKeyFromCredentials(TEST_USER_NAME, new SecureString(TEST_PASSWORD.toCharArray()));\n+        // Make a request to init an SSO flow with the API Key as secondary authentication\n+        Request request = new Request(\"POST\", \"/_idp/saml/init\");\n+        request.setOptions(RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+                new SecureString(TEST_PASSWORD.toCharArray())))\n+            .addHeader(\"es-secondary-authorization\", \"ApiKey \" + apiKeyCredentials)\n+            .build());\n+        request.setJsonEntity(\"{ \\\"entity_id\\\": \\\"\" + entityId + randomAlphaOfLength(3) + \"\\\"}\");\n+        ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request));\n+        assertThat(e.getMessage(), containsString(\"is not registered with this Identity Provider\"));\n+        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.BAD_REQUEST.getStatus()));\n+    }\n+\n+    public void testIdPInitiatedSsoFailsWithoutSecondaryAuthentication() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        // Make a request to init an SSO flow with the API Key as secondary authentication\n+        Request request = new Request(\"POST\", \"/_idp/saml/init\");\n+        request.setOptions(RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+                new SecureString(TEST_PASSWORD.toCharArray())))\n+            .build());\n+        request.setJsonEntity(\"{ \\\"entity_id\\\": \\\"\" + entityId + \"\\\"}\");\n+        ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request));\n+        assertThat(e.getMessage(), containsString(\"Request is missing secondary authentication\"));\n+    }\n+\n+    public void testSpInitiatedSso() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        // Validate incoming authentication request\n+        Request validateRequest = new Request(\"POST\", \"/_idp/saml/validate\");\n+        validateRequest.setOptions(IDP_REQUEST_OPTIONS);\n+        final String nameIdFormat = TRANSIENT;\n+        final String relayString = randomBoolean() ? randomAlphaOfLength(8) : null;\n+        final boolean forceAuthn = true;\n+        final AuthnRequest authnRequest = buildAuthnRequest(entityId, new URL(acsUrl),\n+            new URL(\"https://idp.org/sso/redirect\"), nameIdFormat, forceAuthn);\n+        final String query = getQueryString(authnRequest, relayString, false, null);\n+        validateRequest.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + query + \"\\\"}\");\n+        Response validateResponse = getRestClient().performRequest(validateRequest);\n+        ObjectPath validateResponseObject = ObjectPath.createFromResponse(validateResponse);\n+        Map<String, String> serviceProvider = validateResponseObject.evaluate(\"service_provider\");\n+        assertThat(serviceProvider, hasKey(\"entity_id\"));\n+        assertThat(serviceProvider.get(\"entity_id\"), equalTo(entityId));\n+        assertThat(validateResponseObject.evaluate(\"force_authn\"), equalTo(forceAuthn));\n+        Map<String, String> authnState = validateResponseObject.evaluate(\"authn_state\");\n+        assertThat(authnState, hasKey(\"nameid_format\"));\n+        assertThat(authnState.get(\"nameid_format\"), equalTo(nameIdFormat));\n+        assertThat(authnState, hasKey(\"entity_id\"));\n+        assertThat(authnState.get(\"entity_id\"), equalTo(entityId));\n+        assertThat(authnState, hasKey(\"acs_url\"));\n+        assertThat(authnState.get(\"acs_url\"), equalTo(acsUrl));\n+        assertThat(authnState, hasKey(\"authn_request_id\"));\n+        final String expectedInResponeTo = authnState.get(\"authn_request_id\");\n+\n+        // User login a.k.a exchange the user credentials for an API Key\n+        final String apiKeyCredentials = getApiKeyFromCredentials(TEST_USER_NAME, new SecureString(TEST_PASSWORD.toCharArray()));\n+        // Make a request to init an SSO flow with the API Key as secondary authentication\n+        Request initRequest = new Request(\"POST\", \"/_idp/saml/init\");\n+        initRequest.setOptions(RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(\"Authorization\", basicAuthHeaderValue(TEST_SUPERUSER,\n+                new SecureString(TEST_PASSWORD.toCharArray())))\n+            .addHeader(\"es-secondary-authorization\", \"ApiKey \" + apiKeyCredentials)\n+            .build());\n+        XContentBuilder authnStateBuilder = jsonBuilder();\n+        authnStateBuilder.map(authnState);\n+        initRequest.setJsonEntity(\"{ \\\"entity_id\\\":\\\"\" + entityId + \"\\\", \\\"authn_state\\\":\" + Strings.toString(authnStateBuilder) + \"}\");\n+        Response initResponse = getRestClient().performRequest(initRequest);\n+        ObjectPath initResponseObject = ObjectPath.createFromResponse(initResponse);\n+        assertThat(initResponseObject.evaluate(\"post_url\").toString(), equalTo(acsUrl));\n+        final String body = initResponseObject.evaluate(\"saml_response\").toString();\n+        assertThat(body, containsString(\"<saml2p:StatusCode Value=\\\"urn:oasis:names:tc:SAML:2.0:status:Success\\\"/>\"));\n+        assertThat(body, containsString(\"Destination=\\\"\" + acsUrl + \"\\\"\"));\n+        assertThat(body, containsString(\"<saml2:Audience>\" + entityId + \"</saml2:Audience>\"));\n+        assertThat(body, containsString(\"<saml2:NameID Format=\\\"\" + nameIdFormat + \"\\\">\"));\n+        assertThat(body, containsString(\"InResponseTo=\\\"\" + expectedInResponeTo + \"\\\"\"));\n+        Map<String, String> sp = initResponseObject.evaluate(\"service_provider\");\n+        assertThat(sp, hasKey(\"entity_id\"));\n+        assertThat(sp.get(\"entity_id\"), equalTo(entityId));\n+        assertContainsAttributeWithValue(body, \"principal\", TEST_USER_NAME);\n+    }\n+\n+    public void testSpInitiatedSsoFailsForUnknownSp() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        // Validate incoming authentication request\n+        Request validateRequest = new Request(\"POST\", \"/_idp/saml/validate\");\n+        validateRequest.setOptions(IDP_REQUEST_OPTIONS);\n+        final String nameIdFormat = TRANSIENT;\n+        final String relayString = null;\n+        final boolean forceAuthn = randomBoolean();\n+        final AuthnRequest authnRequest = buildAuthnRequest(entityId + randomAlphaOfLength(4), new URL(acsUrl),\n+            new URL(\"https://idp.org/sso/redirect\"), nameIdFormat, forceAuthn);\n+        final String query = getQueryString(authnRequest, relayString, false, null);\n+        validateRequest.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + query + \"\\\"}\");\n+        ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(validateRequest));\n+        assertThat(e.getMessage(), containsString(\"is not registered with this Identity Provider\"));\n+        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.BAD_REQUEST.getStatus()));\n+    }\n+\n+    public void testSpInitiatedSsoFailsForMalformedRequest() throws Exception {\n+        String acsUrl = \"https://\" + randomAlphaOfLength(12) + \".elastic-cloud.com/saml/acs\";\n+        String entityId = SP_ENTITY_ID;\n+        assertServiceProviderIsRegistered(entityId, acsUrl);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        // Validate incoming authentication request\n+        Request validateRequest = new Request(\"POST\", \"/_idp/saml/validate\");\n+        validateRequest.setOptions(IDP_REQUEST_OPTIONS);\n+        final String nameIdFormat = TRANSIENT;\n+        final String relayString = null;\n+        final boolean forceAuthn = randomBoolean();\n+        final AuthnRequest authnRequest = buildAuthnRequest(entityId + randomAlphaOfLength(4), new URL(acsUrl),\n+            new URL(\"https://idp.org/sso/redirect\"), nameIdFormat, forceAuthn);\n+        final String query = getQueryString(authnRequest, relayString, false, null);\n+        // Skip http parameter name\n+        final String queryWithoutParam = query.substring(12);\n+        validateRequest.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + queryWithoutParam + \"\\\"}\");\n+        ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(validateRequest));\n+        assertThat(e.getMessage(), containsString(\"does not contain a SAMLRequest parameter\"));\n+        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.BAD_REQUEST.getStatus()));\n+        // arbitrarily trim the request\n+        final String malformedRequestQuery = query.substring(0, query.length() - randomIntBetween(10, 15));\n+        validateRequest.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + malformedRequestQuery + \"\\\"}\");\n+        ResponseException e1 = expectThrows(ResponseException.class, () -> getRestClient().performRequest(validateRequest));\n+        assertThat(e1.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.BAD_REQUEST.getStatus()));\n+    }\n+\n+    private void assertServiceProviderIsRegistered(String entityId, String acsUrl) throws Exception {", "originalCommit": "4dc5225ce9cf0507d7453256af5da063f67bccef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMDUwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396430501", "bodyText": "Well it does assert that the service provider is registered after it registers it, but I see your point", "author": "jkakavas", "createdAt": "2020-03-23T12:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMjQ1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396432455", "bodyText": "Ahem! I'm supposed to be the pedant on the team. I take a couple of days off, and what happens?", "author": "tvernum", "createdAt": "2020-03-23T13:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzNzU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396437563", "bodyText": "pedant-stepping in, like a boss :D", "author": "jkakavas", "createdAt": "2020-03-23T13:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDcyNg=="}], "type": "inlineReview"}, {"oid": "54bc55792baffff461bb1c6b29d740cdddbbcada", "url": "https://github.com/elastic/elasticsearch/commit/54bc55792baffff461bb1c6b29d740cdddbbcada", "message": "address feedback", "committedDate": "2020-03-23T13:12:34Z", "type": "commit"}]}