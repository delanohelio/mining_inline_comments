{"pr_number": 58156, "pr_title": "Improve role cache efficiency for API key roles", "pr_createdAt": "2020-06-16T08:39:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58156", "timeline": [{"oid": "390c499b929191563a4736d75bffb4e478654961", "url": "https://github.com/elastic/elasticsearch/commit/390c499b929191563a4736d75bffb4e478654961", "message": "Only partially deserialise api key doc during authentication", "committedDate": "2020-06-16T04:05:06Z", "type": "commit"}, {"oid": "c353aefa88360ba3855f2f730a1df207c275dc52", "url": "https://github.com/elastic/elasticsearch/commit/c353aefa88360ba3855f2f730a1df207c275dc52", "message": "Improve role cache efficiency and add bwc for API key auth metadata", "committedDate": "2020-06-16T06:23:30Z", "type": "commit"}, {"oid": "46cf4fd63be2c05372ef3d9c11e3288ec0c16657", "url": "https://github.com/elastic/elasticsearch/commit/46cf4fd63be2c05372ef3d9c11e3288ec0c16657", "message": "Fix tests", "committedDate": "2020-06-16T07:49:18Z", "type": "commit"}, {"oid": "1319909f688780aebd6ef9d22a21fcb93394dcf4", "url": "https://github.com/elastic/elasticsearch/commit/1319909f688780aebd6ef9d22a21fcb93394dcf4", "message": "Update bwc version", "committedDate": "2020-06-16T08:36:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NTExNQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r440685115", "bodyText": "I think BWC code is required here so that: if target node is an old version, rewrite the roleDescriptor and limitedRoleDescriptors to be Map<String, Object>.", "author": "ywangd", "createdAt": "2020-06-16T08:41:40Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -145,6 +145,7 @@ public void executeAsUser(User user, Consumer<StoredContext> consumer, Version v\n      * The original context is provided to the consumer. When this method returns, the original context is restored.\n      */\n     public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {\n+        // TODO: bwc here for API key metadata changes? i.e. deserialize the raw bytes into Map for older node.", "originalCommit": "1319909f688780aebd6ef9d22a21fcb93394dcf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1688f97ef7da46c9191b4eb8d586ebae088baa5", "url": "https://github.com/elastic/elasticsearch/commit/b1688f97ef7da46c9191b4eb8d586ebae088baa5", "message": "checkstyle", "committedDate": "2020-06-16T08:48:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzU4NA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r440693584", "bodyText": "Is it possible that some fields, e.g. version or name, are completely missing from the source document? This parser requires all fields to present (null value is ok but it must present). In current code, all fields do present. I wonder whether this is true for older versions.", "author": "ywangd", "createdAt": "2020-06-16T08:54:45Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -929,4 +969,66 @@ private boolean verify(SecureString password) {\n             return hash != null && cacheHasher.verify(password, hash);\n         }\n     }\n+\n+    public static final class ApiKeyDoc {\n+\n+        static final InstantiatingObjectParser<ApiKeyDoc, Void> PARSER;\n+        static {\n+            InstantiatingObjectParser.Builder<ApiKeyDoc, Void> builder =\n+                InstantiatingObjectParser.builder(\"api_key_doc\", true, ApiKeyDoc.class);\n+            builder.declareString(constructorArg(), new ParseField(\"doc_type\"));\n+            builder.declareLong(constructorArg(), new ParseField(\"creation_time\"));\n+            builder.declareLongOrNull(constructorArg(), -1, new ParseField(\"expiration_time\"));\n+            builder.declareBoolean(constructorArg(), new ParseField(\"api_key_invalidated\"));\n+            builder.declareString(optionalConstructorArg(), new ParseField(\"api_key_hash\"));\n+            builder.declareString(constructorArg(), new ParseField(\"name\"));\n+            builder.declareInt(constructorArg(), new ParseField(\"version\"));\n+            ObjectParserHelper<ApiKeyDoc, Void> parserHelper = new ObjectParserHelper<>();\n+            parserHelper.declareRawObject(builder, optionalConstructorArg(), new ParseField(\"role_descriptors\"));\n+            parserHelper.declareRawObject(builder, constructorArg(), new ParseField(\"limited_by_role_descriptors\"));\n+            parserHelper.declareRawObject(builder, constructorArg(), new ParseField(\"creator\"));\n+            PARSER = builder.build();", "originalCommit": "b1688f97ef7da46c9191b4eb8d586ebae088baa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMDgxNw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r448130817", "bodyText": "I suspect it's not true for all versions, or at least it might not be.\nWe'd probably want to generate an API key from v6.7 and check, but it might be safer to change the parser to be more accommodating of missing fields.", "author": "tvernum", "createdAt": "2020-07-01T05:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r449958179", "bodyText": "I checked v6.7 and it looks fine, i.e. it has the same fields as in the master branch. But it might still be safer to have more leniency for missing fields? I'll see how it can be done.", "author": "ywangd", "createdAt": "2020-07-06T02:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NDE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r449974159", "bodyText": "It's actually fairly easily to make fields optional by using\nbuilder.declareString(ApiKeyDoc::setName, new ParseField(\"name\"))\ninstead of\nbuilder.declareString(constructorArg(), new ParseField(\"name\")).\nBut I ended up didn't make any of the fields optional because:\n\nAll of them exist from 6.7. So not sure which one I should pick for optional. (The only thing missing in 6.7 is creator.realm_type. But it is still wrapped inside a Map<String, Object> in the new implementation so it is not an issue).\nOnce a field made optional, it cannot be final and becomes an anomaly in current implementation. It's not a strong argument, just a personal preference.\n\nPlease let me know if you have concerns.", "author": "ywangd", "createdAt": "2020-07-06T04:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzU4NA=="}], "type": "inlineReview"}, {"oid": "0f9532bd422d0c95412f63d24a81006276bc276d", "url": "https://github.com/elastic/elasticsearch/commit/0f9532bd422d0c95412f63d24a81006276bc276d", "message": "Fix more tests", "committedDate": "2020-06-16T09:55:43Z", "type": "commit"}, {"oid": "f1e128519f38165edf8115a7016670c3db8fd5d8", "url": "https://github.com/elastic/elasticsearch/commit/f1e128519f38165edf8115a7016670c3db8fd5d8", "message": "Add bwc for outgoing requests", "committedDate": "2020-06-16T12:21:30Z", "type": "commit"}, {"oid": "9832f50dd31a059555b88efaa859ddb3993d8d6f", "url": "https://github.com/elastic/elasticsearch/commit/9832f50dd31a059555b88efaa859ddb3993d8d6f", "message": "Add more tests for bwc and role cache reuse", "committedDate": "2020-06-17T01:07:16Z", "type": "commit"}, {"oid": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "url": "https://github.com/elastic/elasticsearch/commit/d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "message": "Add mixed cluster bwc test", "committedDate": "2020-06-17T02:06:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MjEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r444672121", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, Object> rewriteMetadataIfNecessary(Version version, Authentication authentication) {\n          \n          \n            \n                private Map<String, Object> rewriteMetadataIfNecessary(Version streamVersion, Authentication authentication) {\n          \n      \n    \n    \n  \n\nOther names are fine too (serializeVersion, bwcVersion), but I found the if below to be hard to read when it used such a generic name.", "author": "tvernum", "createdAt": "2020-06-24T06:28:46Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -149,8 +156,25 @@ public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer\n         final Authentication authentication = getAuthentication();\n         try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {\n             setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),\n-                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(), authentication.getMetadata()));\n+                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(),\n+                rewriteMetadataIfNecessary(version, authentication)));\n             consumer.accept(original);\n         }\n     }\n+\n+    private Map<String, Object> rewriteMetadataIfNecessary(Version version, Authentication authentication) {", "originalCommit": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMzk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r445323961", "bodyText": "I think it's best if the cache explicitly states that it is an API Key.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RoleKey roleKey = new RoleKey(Set.of(roleDescriptorsHash), limitedBy ? \"limited_role_desc\" : \"role_desc\");\n          \n          \n            \n                    final RoleKey roleKey = new RoleKey(Set.of(\"apikey:\" + roleDescriptorsHash), limitedBy ? \"apikey_limited_role\" : \"apikey_role\");", "author": "tvernum", "createdAt": "2020-06-25T05:59:45Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -295,6 +318,21 @@ private void buildThenMaybeCacheRole(RoleKey roleKey, Collection<RoleDescriptor>\n         }, listener::onFailure));\n     }\n \n+    private void getOrBuildRoleForApiKey(Authentication authentication, boolean limitedBy, ActionListener<Role> roleActionListener) {\n+        final BytesReference roleDescriptorsBytes = apiKeyService.getRoleDescriptorsBytesForApiKey(authentication, limitedBy);\n+        final String roleDescriptorsHash = new String(Hasher.SHA256.hash(new SecureString(roleDescriptorsBytes.toString().toCharArray())));\n+        final RoleKey roleKey = new RoleKey(Set.of(roleDescriptorsHash), limitedBy ? \"limited_role_desc\" : \"role_desc\");", "originalCommit": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNDc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r445324780", "bodyText": "BytesReference.toString() is not guaranteed to be what you want here.\nYou want either utf8ToString or just use the bytes directly.\nI'm not sure whether we really even need to hash these - we can, but it might not be necessary.\nI think the options are either:\n\nDon't bother hashing, but that will mean using a separate cache for API key roles (because the cache key is different)\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String roleDescriptorsHash = new String(Hasher.SHA256.hash(new SecureString(roleDescriptorsBytes.toString().toCharArray())));\n          \n          \n            \n                    final BytesKey cacheKey = new BytesKey(BytesReference.toBytes(roleDescriptorsBytes));\n          \n      \n    \n    \n  \n\n\nHash using MessageDigest\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String roleDescriptorsHash = new String(Hasher.SHA256.hash(new SecureString(roleDescriptorsBytes.toString().toCharArray())));\n          \n          \n            \n                    MessageDigest digest = MessageDigests.sha256();\n          \n          \n            \n                    digest.update(BytesReference.toBytes(roleDescriptorsBytes));\n          \n          \n            \n                    final String roleDescriptorsHash = MessageDigests.toHexString(digest.digest());", "author": "tvernum", "createdAt": "2020-06-25T06:02:09Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -295,6 +318,21 @@ private void buildThenMaybeCacheRole(RoleKey roleKey, Collection<RoleDescriptor>\n         }, listener::onFailure));\n     }\n \n+    private void getOrBuildRoleForApiKey(Authentication authentication, boolean limitedBy, ActionListener<Role> roleActionListener) {\n+        final BytesReference roleDescriptorsBytes = apiKeyService.getRoleDescriptorsBytesForApiKey(authentication, limitedBy);\n+        final String roleDescriptorsHash = new String(Hasher.SHA256.hash(new SecureString(roleDescriptorsBytes.toString().toCharArray())));", "originalCommit": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1OTQwMw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r449959403", "bodyText": "I really like BytesKey, unfortunately it is not compatible with the current cache and I don't want to add another cache and associated overhead just because of this incompatibility. So I'll prefer to your second suggestion, i.e. MessageDigest.sha256 where raw bytes are used.\nAlternatively, we could potential change RoleKey to have either Set<byte[]> names and byte[] source, so it can accomodate both regular roles and API key roles. But I am not sure whether it really gives us much unless we have a real concern for sha256 collision.", "author": "ywangd", "createdAt": "2020-07-06T02:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNDc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTk4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450071985", "bodyText": "I'm happy with the sha256 option. I also like BytesKey - it's simple and sensible, but I don't think it's the right fit here unless we change the cache to have aSet<?> as the key, or follow your idea of converting a Set<String> into a BytesKey", "author": "tvernum", "createdAt": "2020-07-06T08:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNDc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2ODY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450268652", "bodyText": "Cool let's keep the sha256 option then. It works and is simpler.", "author": "ywangd", "createdAt": "2020-07-06T14:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNzk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r445327955", "bodyText": "We should use the version of convertToMap that takes an explicit XContentType.JSON", "author": "tvernum", "createdAt": "2020-06-25T06:12:13Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -149,8 +156,25 @@ public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer\n         final Authentication authentication = getAuthentication();\n         try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {\n             setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),\n-                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(), authentication.getMetadata()));\n+                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(),\n+                rewriteMetadataIfNecessary(version, authentication)));\n             consumer.accept(original);\n         }\n     }\n+\n+    private Map<String, Object> rewriteMetadataIfNecessary(Version version, Authentication authentication) {\n+        Map<String, Object> metadata = authentication.getMetadata();\n+        if (authentication.getAuthenticationType() == AuthenticationType.API_KEY\n+            && authentication.getVersion().onOrAfter(Version.V_7_9_0)\n+            && version.before(Version.V_7_9_0)) {\n+            metadata = new HashMap<>(metadata);\n+            metadata.put(\n+                API_KEY_ROLE_DESCRIPTORS_KEY,\n+                XContentHelper.convertToMap((BytesReference) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY), false).v2());", "originalCommit": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r449957965", "bodyText": "Updated this and a few other places of similar deprecated usage.", "author": "ywangd", "createdAt": "2020-07-06T02:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNzk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMDg2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r445330861", "bodyText": "I think having getRoleForApiKey, getRoleDescriptorsBytesForApiKey and getRoleDescriptorsForApiKey is confusing and likely to get us into trouble in the future.\nIs it necessary for the caller to have to know which method to use depending on the version of the Authentication object it has?\nI worry about the fragility of code that calls getRoleDescriptorsForApiKey and works on 7.9+ but then fails in a mixed cluster.\nWould it be possible to merge getRoleDescriptorsForApiKey and getRoleForApiKey into a single method, or at least make it save to call getRoleDescriptorsForApiKey on an old style Authentication object?", "author": "tvernum", "createdAt": "2020-06-25T06:20:43Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -366,6 +375,20 @@ public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKe\n         }\n     }\n \n+    public BytesReference getRoleDescriptorsBytesForApiKey(Authentication authentication, boolean limitedBy) {\n+        if (authentication.getAuthenticationType() != AuthenticationType.API_KEY) {\n+            throw new IllegalStateException(\"authentication type must be api key but is \" + authentication.getAuthenticationType());\n+        }\n+        final Map<String, Object> metadata = authentication.getMetadata();\n+        return (BytesReference) metadata.get(limitedBy ? API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY : API_KEY_ROLE_DESCRIPTORS_KEY);\n+    }\n+\n+    public List<RoleDescriptor> getRoleDescriptorsForApiKey(Authentication authentication, boolean limitedBy) {", "originalCommit": "d2560d8acc141648c6ecb2211ff48dab1a94bf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NTQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r449945481", "bodyText": "Short version: I removed getRoleDescriptorsForApiKey and renamed getRoleDescriptorsBytesForApiKey to getApiKeyIdAndBytes.\nLonger version: I agree the names are rather confusing. Initially, I completely removed getRoleForApiKey and List<RoleDescriptor> parseRoleDescriptors(String, Map<String, Object>) because they are used only for old style Authentication. But I had to add them back when I realised there were BWC issues. Anyway, we can and should remove them in 9.0.\nUnfortunately, it is not feasible to merge getRoleForApiKey and getRoleDescriptorsForApiKey even though they both return something related to role descriptors. The old getRoleForApiKey returns a ApiKeyRoleDescriptors object, which internally has two List<RoleDescriptors>, one for from-role and the other for limited-by. But this would be non-ideal for the new getRoleDescriptorsForApiKey which returns either from-role-descriptors or limited-by-role-descriptors. By returning them separately, we can cache and lookup them separately. That is, if multiple keys are created by the same user, their limited-by roles are only computed once and cached for all other keys. The reverse is also true (though maybe less likely), if multiple keys happen to have the from-role-descriptors even when they are created by different users, we only need compute the from-roles once.\nSo there is no shared code path between getRoleForApiKey and getRoleDescriptorsForApiKey they work like the follows:\n\nOld Authentication -> getRoleForApiKey -> parseRoleDescriptors(String, Map<String, Object>)\nNew Authentication -> getRoleDescriptorsBytesForApiKey -> if not cached -> getRoleDescriptorsForApiKey -> parseRoleDescriptors(String, ByteReference)\n\nI intentionally kept them separate so the old code path can be easily removed when the time comes.\nWith above being said, I do agree that the names are confusing. So I renamed getRoleDescriptorsBytesForApiKey to getApiKeyIdAndBytes and removed getRoleDescriptorsForApiKey by a direct call to parseRoleDescriptors(String, ByteReference) in the caller.", "author": "ywangd", "createdAt": "2020-07-06T01:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MTI1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450081251", "bodyText": "If I understand correctly, getRoleForApiKey will only do the right thing for old style authentication.\nIf so, can we:\n\nAdd that to the javadoc\nAdd an assert authentication.getVersion().before(Version.V7_9_0) : \"This method only applies to authentication objects created before v7.9.0\";", "author": "tvernum", "createdAt": "2020-07-06T08:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2NTg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450165891", "bodyText": "These are both good ideas. Will update accordingly. Thanks!", "author": "ywangd", "createdAt": "2020-07-06T11:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMDg2MQ=="}], "type": "inlineReview"}, {"oid": "ca698d767cb34c9404b6f398d9b1946971da8f25", "url": "https://github.com/elastic/elasticsearch/commit/ca698d767cb34c9404b6f398d9b1946971da8f25", "message": "Apply suggestions from code review\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2020-07-01T07:14:25Z", "type": "commit"}, {"oid": "cf785c9776c3ff4b802d21e0717f363836b55c1b", "url": "https://github.com/elastic/elasticsearch/commit/cf785c9776c3ff4b802d21e0717f363836b55c1b", "message": "fix variable name", "committedDate": "2020-07-01T07:27:06Z", "type": "commit"}, {"oid": "abcd485df7b46c3f4887f2993f91c0f77b293fa3", "url": "https://github.com/elastic/elasticsearch/commit/abcd485df7b46c3f4887f2993f91c0f77b293fa3", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-01T08:40:03Z", "type": "commit"}, {"oid": "d62d8a24f1b6ced4d23ada9141371a12ca76e8ee", "url": "https://github.com/elastic/elasticsearch/commit/d62d8a24f1b6ced4d23ada9141371a12ca76e8ee", "message": "Avoid using deprecated API", "committedDate": "2020-07-02T01:50:53Z", "type": "commit"}, {"oid": "8148050c09e5936900df41921d6c8c02fb1cf565", "url": "https://github.com/elastic/elasticsearch/commit/8148050c09e5936900df41921d6c8c02fb1cf565", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2020-07-06T03:33:43Z", "type": "commit"}, {"oid": "1440bfefba566f02d5808472d1625cd61a23b967", "url": "https://github.com/elastic/elasticsearch/commit/1440bfefba566f02d5808472d1625cd61a23b967", "message": "Address feedback", "committedDate": "2020-07-06T03:36:07Z", "type": "commit"}, {"oid": "cfca9cc02be10a2623dd4505e13a36bca14ce7a5", "url": "https://github.com/elastic/elasticsearch/commit/cfca9cc02be10a2623dd4505e13a36bca14ce7a5", "message": "Fix tests", "committedDate": "2020-07-06T04:21:10Z", "type": "commit"}, {"oid": "50f170675220e8ee2ca6d9f6a61941b7ed12bd42", "url": "https://github.com/elastic/elasticsearch/commit/50f170675220e8ee2ca6d9f6a61941b7ed12bd42", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-06T04:21:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODEwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450078105", "bodyText": "I don't think this is true even in 9.0 - we don't have anything in place that would automatically rewrite saved authentication objects from 7.x watcher jobs.", "author": "tvernum", "createdAt": "2020-07-06T08:53:35Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -239,7 +239,7 @@ public void getRoles(User user, Authentication authentication, ActionListener<Ro\n                     },\n                     roleActionListener::onFailure\n                 ));\n-            } else {\n+            } else {  // TODO: the else branch is for bwc and can be deleted in 9.0", "originalCommit": "50f170675220e8ee2ca6d9f6a61941b7ed12bd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2Nzk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450167957", "bodyText": "You are right. I realised it a while ago, then I just forgot about it again. Thanks for reminding me.", "author": "ywangd", "createdAt": "2020-07-06T11:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTA5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r450079095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Tuple<String, BytesReference> getApiKeyIdAndBytes(Authentication authentication, boolean limitedBy) {\n          \n          \n            \n                public Tuple<String, BytesReference> getApiKeyIdAndRoleBytes(Authentication authentication, boolean limitedBy) {\n          \n      \n    \n    \n  \n\n(or role descriptor, or ...)\nBut Bytes to me implies the whole API key JSON or something like that.", "author": "tvernum", "createdAt": "2020-07-06T08:55:10Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -375,18 +377,14 @@ public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKe\n         }\n     }\n \n-    public BytesReference getRoleDescriptorsBytesForApiKey(Authentication authentication, boolean limitedBy) {\n+    public Tuple<String, BytesReference> getApiKeyIdAndBytes(Authentication authentication, boolean limitedBy) {", "originalCommit": "50f170675220e8ee2ca6d9f6a61941b7ed12bd42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8fb443e1dbdfb3a277d542be1a5659bad3353f4b", "url": "https://github.com/elastic/elasticsearch/commit/8fb443e1dbdfb3a277d542be1a5659bad3353f4b", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2020-07-06T11:52:50Z", "type": "commit"}, {"oid": "797c54b5f923c7c3e90dc203aa3463a5e8ac9f95", "url": "https://github.com/elastic/elasticsearch/commit/797c54b5f923c7c3e90dc203aa3463a5e8ac9f95", "message": "Update method name change", "committedDate": "2020-07-06T13:35:50Z", "type": "commit"}, {"oid": "552e7b37cd900f83c8fe82dd8dd83a0c7df6d5aa", "url": "https://github.com/elastic/elasticsearch/commit/552e7b37cd900f83c8fe82dd8dd83a0c7df6d5aa", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-06T13:38:18Z", "type": "commit"}, {"oid": "3cf31f3884ec92067c5a64b5da8c541553acf457", "url": "https://github.com/elastic/elasticsearch/commit/3cf31f3884ec92067c5a64b5da8c541553acf457", "message": "Address feedback", "committedDate": "2020-07-06T14:31:38Z", "type": "commit"}, {"oid": "1300c4d51beeff5a1805db70dd7ba134c7cf1713", "url": "https://github.com/elastic/elasticsearch/commit/1300c4d51beeff5a1805db70dd7ba134c7cf1713", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-06T14:31:49Z", "type": "commit"}, {"oid": "3531a52b67e4e41b03e09b8ca45dfa38579b71be", "url": "https://github.com/elastic/elasticsearch/commit/3531a52b67e4e41b03e09b8ca45dfa38579b71be", "message": "Fix tests", "committedDate": "2020-07-07T00:34:19Z", "type": "commit"}, {"oid": "9e7996d2cc896158bbc87d6cb7abb7b6dcc17ef5", "url": "https://github.com/elastic/elasticsearch/commit/9e7996d2cc896158bbc87d6cb7abb7b6dcc17ef5", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-07T00:37:51Z", "type": "commit"}, {"oid": "27be381cf6874febd066a12b9ff22be281947d99", "url": "https://github.com/elastic/elasticsearch/commit/27be381cf6874febd066a12b9ff22be281947d99", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-07T13:21:07Z", "type": "commit"}, {"oid": "a0323259b37e88deaec8047fb7a247ea729d56e3", "url": "https://github.com/elastic/elasticsearch/commit/a0323259b37e88deaec8047fb7a247ea729d56e3", "message": "A challenging merge", "committedDate": "2020-07-07T14:06:23Z", "type": "commit"}, {"oid": "9395a8376ba8bf86b2d79b28718eee98b7e0bed9", "url": "https://github.com/elastic/elasticsearch/commit/9395a8376ba8bf86b2d79b28718eee98b7e0bed9", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-08T07:58:06Z", "type": "commit"}, {"oid": "0f08a3cebbbdeb23ea44d5027cc6e9124ca8f105", "url": "https://github.com/elastic/elasticsearch/commit/0f08a3cebbbdeb23ea44d5027cc6e9124ca8f105", "message": "Address feedback", "committedDate": "2020-07-08T07:58:52Z", "type": "commit"}, {"oid": "5b75e1dc754dc15c83ba91483f3079a3d64cb049", "url": "https://github.com/elastic/elasticsearch/commit/5b75e1dc754dc15c83ba91483f3079a3d64cb049", "message": "Simplify creator parsing of ApiKeyDoc", "committedDate": "2020-07-12T12:08:26Z", "type": "commit"}, {"oid": "bedb46f39dbcfc6634c52061388bea27db788b87", "url": "https://github.com/elastic/elasticsearch/commit/bedb46f39dbcfc6634c52061388bea27db788b87", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-12T12:08:40Z", "type": "commit"}, {"oid": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "url": "https://github.com/elastic/elasticsearch/commit/52698f4156d772dcdcb1d0253dfd85cda87026f9", "message": "Fix merge", "committedDate": "2020-07-12T12:19:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzOTUzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453339531", "bodyText": "The name rewriteMetadataIfNecessary is not very inspired; I have to read the code to know what this rewriting is about.\nMy suggestion: rewriteApiKeyAuthenticationRoleMetadata (drop \"if necessary\")\nI would also slightly prefer to move this to the Authentication class, and maybe have a static method there that takes an authentication and a version as parameters and returns a new authentication with that version, and any rewritings done. I would also define a new static constant on Version.V_7_9_0 inside Authentication as VERSION_API_KEY_ROLES_AS_STRING (see TokenService for examples).", "author": "albertzaharovits", "createdAt": "2020-07-12T16:57:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -149,8 +157,27 @@ public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer\n         final Authentication authentication = getAuthentication();\n         try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {\n             setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),\n-                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(), authentication.getMetadata()));\n+                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(),\n+                rewriteMetadataIfNecessary(version, authentication)));\n             consumer.accept(original);\n         }\n     }\n+\n+    private Map<String, Object> rewriteMetadataIfNecessary(Version streamVersion, Authentication authentication) {\n+        Map<String, Object> metadata = authentication.getMetadata();\n+        if (authentication.getAuthenticationType() == AuthenticationType.API_KEY\n+            && authentication.getVersion().onOrAfter(Version.V_7_9_0)\n+            && streamVersion.before(Version.V_7_9_0)) {", "originalCommit": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzNDEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453434121", "bodyText": "These are all good suggestions. Will address accordingly.", "author": "ywangd", "createdAt": "2020-07-13T04:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzOTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2MTc5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453461792", "bodyText": "I renamed the method to rewriteMetadataForApiKeyRoleDescriptors. But after some thoughts, I decided to keep this method inside SecurityContext. Because I need to make it public if moved to Authentication and that feels a bit uneasy to me since SecurityContext is the only consumer and will probably keep it that way in future. So I feel it is better to stay within it and closer to the actual context. It is an unnecessary detail to put inside Authentication if people is not concerned of BWC. Similarly I added the new version constant to SecurityContext as well. Sorry for the back and forth.", "author": "ywangd", "createdAt": "2020-07-13T06:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzOTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxNjAyOA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453516028", "bodyText": "Okay, but the constant can sit inside Authentication to be referenced in the CompositeRolesStore too.", "author": "albertzaharovits", "createdAt": "2020-07-13T09:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzOTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzNTIyNw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453535227", "bodyText": "Moved the new version constant to Authentication as suggested.", "author": "ywangd", "createdAt": "2020-07-13T09:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzOTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NDQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453344461", "bodyText": "Why have you introduced this new class in this PR? Is it required for something?\nI'd obviously vote to get rid of the Map<String, Object> source any time of day, but this doesn't look like a great improvement, and it makes this PR harder to follow than necessary.", "author": "albertzaharovits", "createdAt": "2020-07-12T17:48:43Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -974,4 +1018,66 @@ private boolean verify(SecureString password) {\n             return hash != null && cacheHasher.verify(password, hash);\n         }\n     }\n+\n+    public static final class ApiKeyDoc {", "originalCommit": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0NTE0OA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453445148", "bodyText": "Yes, it is intentionally introduced and is more or less a centre piece of this PR, which is about improve the role cache efficiency for API keys, i.e. same role descriptors should only be cached once even when they are from different API keys. The current cache is basically keyed by ApiKey ID, which is unfit for the goal. The obvious choice is to use role descriptors themselves as the key, but it has a few downsides and also not compatible the existing cache. So alternatively, we could use the string representation of role descriptors as the key. To further reduce the memory cost, we actually use sha256 of the string representation as the key. More details can be found here\nSo this new class has roleDescriptors and limitedByRoeDescriptors as ByteReference to faciliate the calculation. By storing them as bytes instead of Map, it also helps avoid quite a few unncessary serialisation and deserialisation. So instead of four de/serialisation, it now only deserialises once. When security index is local to a node, all these de/serialisation operations are a noticable part of the total authentication time (> 20%).", "author": "ywangd", "createdAt": "2020-07-13T05:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NjM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453466397", "bodyText": "Okay, thank you for the explanation!\nI would've thought that you can get the BytesReference for a source field but haven't checked before asking and it turns out you can't, you must use a parser.", "author": "albertzaharovits", "createdAt": "2020-07-13T06:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NDQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NzI4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453357281", "bodyText": "When can this be true?", "author": "albertzaharovits", "createdAt": "2020-07-12T20:01:21Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -221,20 +224,40 @@ public void getRoles(User user, Authentication authentication, ActionListener<Ro\n \n         final Authentication.AuthenticationType authType = authentication.getAuthenticationType();\n         if (authType == Authentication.AuthenticationType.API_KEY) {\n-            apiKeyService.getRoleForApiKey(authentication, ActionListener.wrap(apiKeyRoleDescriptors -> {\n-                final List<RoleDescriptor> descriptors = apiKeyRoleDescriptors.getRoleDescriptors();\n-                if (descriptors == null) {\n-                    roleActionListener.onFailure(new IllegalStateException(\"missing role descriptors\"));\n-                } else if (apiKeyRoleDescriptors.getLimitedByRoleDescriptors() == null) {\n-                    buildAndCacheRoleFromDescriptors(descriptors, apiKeyRoleDescriptors.getApiKeyId() + \"_role_desc\", roleActionListener);\n-                } else {\n-                    buildAndCacheRoleFromDescriptors(descriptors, apiKeyRoleDescriptors.getApiKeyId() + \"_role_desc\",\n-                        ActionListener.wrap(role -> buildAndCacheRoleFromDescriptors(apiKeyRoleDescriptors.getLimitedByRoleDescriptors(),\n-                            apiKeyRoleDescriptors.getApiKeyId() + \"_limited_role_desc\", ActionListener.wrap(\n-                                limitedBy -> roleActionListener.onResponse(LimitedRole.createLimitedRole(role, limitedBy)),\n-                                roleActionListener::onFailure)), roleActionListener::onFailure));\n-                }\n-            }, roleActionListener::onFailure));\n+            if (authentication.getVersion().onOrAfter(Version.V_7_9_0)) {\n+                getOrBuildRoleForApiKey(authentication, false, ActionListener.wrap(\n+                    role -> {\n+                        if (role == Role.EMPTY) {", "originalCommit": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzOTMxMw==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453439313", "bodyText": "When a list of role descriptor is empty, the role building method buildRoleFromDescriptors returns Role.EMPTY.\nAlso when an API key does not have its own role descriptors, its document will have {} for the role_descriptors field, which in turn will be converted to an empty list of RoleDescriptor.\nWhen the two work together, you can get Role.EMPTY.", "author": "ywangd", "createdAt": "2020-07-13T05:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NzI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwODg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453508854", "bodyText": "Got it! I have to check the code every single time to tell if the role_descriptors field or the limited_by_role_descriptors can be empty, the meanings are reversed in ApiKeyService#getRoleForApiKey.\nSince limitedByRole can never be null I would be building that first, for a minor branching simplification:\n         final Authentication.AuthenticationType authType = authentication.getAuthenticationType();\n         if (authType == Authentication.AuthenticationType.API_KEY) {\n             if (authentication.getVersion().onOrAfter(Version.V_7_9_0)) {\n-                buildAndCacheRoleForApiKey(authentication, false, ActionListener.wrap(\n-                    role -> {\n-                        if (role == Role.EMPTY) {\n-                            buildAndCacheRoleForApiKey(authentication, true, roleActionListener);\n-                        } else {\n-                            buildAndCacheRoleForApiKey(authentication, true, ActionListener.wrap(\n-                                limitedByRole -> roleActionListener.onResponse(\n-                                    limitedByRole == Role.EMPTY ? role : LimitedRole.createLimitedRole(role, limitedByRole)),\n-                                roleActionListener::onFailure\n+                buildAndCacheRoleForApiKey(authentication, true, ActionListener.wrap(\n+                        limitedByRole -> {\n+                            buildAndCacheRoleForApiKey(authentication, false, ActionListener.wrap(\n+                                    role -> roleActionListener.onResponse(\n+                                            role == Role.EMPTY ? limitedByRole : LimitedRole.createLimitedRole(role, limitedByRole)),\n+                                    roleActionListener::onFailure\n                             ));\n-                        }\n-                    },\n-                    roleActionListener::onFailure\n+                        },\n+                        roleActionListener::onFailure\n                 ));\n             } else {\n                 apiKeyService.getRoleForApiKey(authentication, ActionListener.wrap(apiKeyRoleDescriptors -> {\n\nFeel free to follow this suggestion or not.", "author": "albertzaharovits", "createdAt": "2020-07-13T09:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NzI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzMzQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453533422", "bodyText": "You may be right. But I am not entirely sure when it comes to derived API keys. A derived keys will have limited by role descriptors from parent API key's roles. Since we now zero out API key's roles during authentication, we may end up having an empty limited by role descriptors as well. I have not tested, but I feel it is probably safer to keep the code as is for now.", "author": "ywangd", "createdAt": "2020-07-13T09:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NzI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1Nzk2MA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453357960", "bodyText": "Nit: you can can compute the digest in one line.", "author": "albertzaharovits", "createdAt": "2020-07-12T20:08:00Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -295,6 +318,23 @@ private void buildThenMaybeCacheRole(RoleKey roleKey, Collection<RoleDescriptor>\n         }, listener::onFailure));\n     }\n \n+    private void getOrBuildRoleForApiKey(Authentication authentication, boolean limitedBy, ActionListener<Role> roleActionListener) {\n+        final Tuple<String, BytesReference> apiKeyIdAndBytes = apiKeyService.getApiKeyIdAndRoleBytes(authentication, limitedBy);\n+        final MessageDigest digest = MessageDigests.sha256();\n+        digest.update(BytesReference.toBytes(apiKeyIdAndBytes.v2()));\n+        final String roleDescriptorsHash = MessageDigests.toHexString(digest.digest());", "originalCommit": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwOTY4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453509682", "bodyText": "Even more succinct:\nfinal String roleDescriptorsHash = MessageDigests.toHexString(MessageDigests.sha256().digest(BytesReference.toBytes(apiKeyIdAndBytes.v2())));\n\nMessageDigests.sha256() is thread local and it's also reset before every use, so my objection was actually about minimising the scope of the digest instance.", "author": "albertzaharovits", "createdAt": "2020-07-13T09:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1Nzk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzMDA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453530041", "bodyText": "Updated as suggested. Thanks!", "author": "ywangd", "createdAt": "2020-07-13T09:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1Nzk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MDMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453360304", "bodyText": "Methods here don't have a clear interface, it could just as well not be methods at all; the limitedBy flag is really ruining every structure.\nI would move the full logic that obtains the Role for an API Keys from the CompositeRolesStore class to the ApiKeyService class.\nBut I realise I'm late to the party, we can do this in a follow-up.\n@tvernum would you agree merging this PR, and following up with a refactoring?", "author": "albertzaharovits", "createdAt": "2020-07-12T20:32:32Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -295,6 +318,23 @@ private void buildThenMaybeCacheRole(RoleKey roleKey, Collection<RoleDescriptor>\n         }, listener::onFailure));\n     }\n \n+    private void getOrBuildRoleForApiKey(Authentication authentication, boolean limitedBy, ActionListener<Role> roleActionListener) {\n+        final Tuple<String, BytesReference> apiKeyIdAndBytes = apiKeyService.getApiKeyIdAndRoleBytes(authentication, limitedBy);", "originalCommit": "52698f4156d772dcdcb1d0253dfd85cda87026f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzNjg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453436874", "bodyText": "Role building has always been done inside CompositeRolesStore and I think it fits here since role building and caching are the main purposes of CompositeRolesStore. It only delegates retrieval of role descriptors to different roles providers, including ApiKeyService, which is the case for this method as well. Overall, I think the method name could use some help (maybe buildAndCacheRoleForApiKey to mirror the existing buildAndCacheRoleFromDescriptors?), but its content looks fine to me.", "author": "ywangd", "createdAt": "2020-07-13T05:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MDMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxNTIxOA==", "url": "https://github.com/elastic/elasticsearch/pull/58156#discussion_r453515218", "bodyText": "Good point! Yes, Role should stay inside the CompositeRolesStore.\nThen I think we can make ApiKeyRoleDescriptors lazily parse RoleDescriptor. Not sure what to do about the cache key. Let's leave this for the future us.", "author": "albertzaharovits", "createdAt": "2020-07-13T09:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MDMwNA=="}], "type": "inlineReview"}, {"oid": "8543c187c66522ca4726c88e844978cb34cf7bc7", "url": "https://github.com/elastic/elasticsearch/commit/8543c187c66522ca4726c88e844978cb34cf7bc7", "message": "Address feedback", "committedDate": "2020-07-13T05:42:05Z", "type": "commit"}, {"oid": "c1fba5a368a7095745043bcdcf7e587adb943019", "url": "https://github.com/elastic/elasticsearch/commit/c1fba5a368a7095745043bcdcf7e587adb943019", "message": "Address more feedback", "committedDate": "2020-07-13T06:55:12Z", "type": "commit"}, {"oid": "0c991a6b13acbd0a31152c2f911ecb4cdd73d0d5", "url": "https://github.com/elastic/elasticsearch/commit/0c991a6b13acbd0a31152c2f911ecb4cdd73d0d5", "message": "Merge remote-tracking branch 'origin/master' into es-53939-api-key-roles-cache", "committedDate": "2020-07-13T06:55:24Z", "type": "commit"}, {"oid": "0ac2a84f43c2ebba5b325a9e3c9f481387d8e4fa", "url": "https://github.com/elastic/elasticsearch/commit/0ac2a84f43c2ebba5b325a9e3c9f481387d8e4fa", "message": "Address feedback", "committedDate": "2020-07-13T09:57:57Z", "type": "commit"}, {"oid": "70307e78066afeb1f7d8ec424527d3d88def8344", "url": "https://github.com/elastic/elasticsearch/commit/70307e78066afeb1f7d8ec424527d3d88def8344", "message": "checkstyle", "committedDate": "2020-07-13T10:04:12Z", "type": "commit"}, {"oid": "8b1153cc9d2fcf4b2fcfd07f032d8d431ed0edf0", "url": "https://github.com/elastic/elasticsearch/commit/8b1153cc9d2fcf4b2fcfd07f032d8d431ed0edf0", "message": "Use new version constants where it is applicable", "committedDate": "2020-07-13T10:09:39Z", "type": "commit"}, {"oid": "121134be1b2d1cb8ce630d87adfb1334d5b0578d", "url": "https://github.com/elastic/elasticsearch/commit/121134be1b2d1cb8ce630d87adfb1334d5b0578d", "message": "more checkstyle", "committedDate": "2020-07-13T10:16:04Z", "type": "commit"}, {"oid": "2b20b4891fc0167e66dcb14188b0dc2ddf66db36", "url": "https://github.com/elastic/elasticsearch/commit/2b20b4891fc0167e66dcb14188b0dc2ddf66db36", "message": "Add one test for ApiKeyDoc.fromXContent", "committedDate": "2020-07-13T10:31:43Z", "type": "commit"}]}