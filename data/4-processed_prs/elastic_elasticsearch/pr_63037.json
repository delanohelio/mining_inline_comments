{"pr_number": 63037, "pr_title": "Add Clone Snapshot Request Handling Scaffolding", "pr_createdAt": "2020-09-29T19:50:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63037", "timeline": [{"oid": "7fbe2e3f78ec63e784f2f939df164515149026bd", "url": "https://github.com/elastic/elasticsearch/commit/7fbe2e3f78ec63e784f2f939df164515149026bd", "message": "Add Clone Snapshot Request Handling Scaffolding\n\nAdds all the scaffolding for snapshot clone request handling\nand index-to-clone resolution to reduce the diff in #61839 to\nthe bare essentials of the state machine changes for snapshot\ncloning and relevant tests and give us the opportunity to\nreview the API in isolation.", "committedDate": "2020-09-29T19:46:45Z", "type": "commit"}, {"oid": "ebb9dcc44880763cdaaeee802cb215cf0474a859", "url": "https://github.com/elastic/elasticsearch/commit/ebb9dcc44880763cdaaeee802cb215cf0474a859", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-api-2", "committedDate": "2020-09-30T05:10:32Z", "type": "commit"}, {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "url": "https://github.com/elastic/elasticsearch/commit/756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "message": "fix var name", "committedDate": "2020-09-30T05:15:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzMzI3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497333275", "bodyText": "Since hidden indices are included in snapshot by default (#57325) I think we should also allow them to be cloned and support IndicesOptions.", "author": "tlrx", "createdAt": "2020-09-30T08:28:57Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?", "originalCommit": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTAzNw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339037", "bodyText": "Can we add some Javadoc please? It's not obvious that source/target are concerning snapshots and indices may be in fact the names of indices to retain when cloning the source snapshot.", "author": "tlrx", "createdAt": "2020-09-30T08:38:01Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?\n+    private String[] indices;\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {", "originalCommit": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339209", "bodyText": "Can we document this method?", "author": "tlrx", "createdAt": "2020-09-30T08:38:18Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?\n+    private String[] indices;\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {\n+        this.repository = repository;\n+        this.source = source;\n+        this.target = target;\n+        this.indices = indices;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(repository);\n+        out.writeString(source);\n+        out.writeString(target);\n+        out.writeStringArray(indices);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (source == null) {\n+            validationException = addValidationError(\"source snapshot name is missing\", null);\n+        }\n+        if (target == null) {\n+            validationException = addValidationError(\"target snapshot name is missing\", null);\n+        }\n+        if (repository == null) {\n+            validationException = addValidationError(\"repository is missing\", validationException);\n+        }\n+        if (indices == null) {\n+            validationException = addValidationError(\"indices is null\", validationException);\n+        } else if (indices.length == 0) {\n+            validationException = addValidationError(\"indices patterns are empty\", validationException);\n+        } else {\n+            for (String index : indices) {\n+                if (index == null) {\n+                    validationException = addValidationError(\"index is null\", validationException);\n+                    break;\n+                }\n+            }\n+        }\n+        return validationException;\n+    }\n+\n+    public String[] indices() {\n+        return this.indices;\n+    }\n+\n+    public CloneSnapshotRequest indices(String... indices) {", "originalCommit": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTM3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339378", "bodyText": "Can we document this method?", "author": "tlrx", "createdAt": "2020-09-30T08:38:35Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequestBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;\n+import org.elasticsearch.client.ElasticsearchClient;\n+import org.elasticsearch.common.Strings;\n+\n+public class CloneSnapshotRequestBuilder extends MasterNodeOperationRequestBuilder<CloneSnapshotRequest, AcknowledgedResponse,\n+                                                                                   CloneSnapshotRequestBuilder> {\n+\n+    protected CloneSnapshotRequestBuilder(ElasticsearchClient client, ActionType<AcknowledgedResponse> action,\n+                                          CloneSnapshotRequest request) {\n+        super(client, action, request);\n+    }\n+\n+    public CloneSnapshotRequestBuilder(ElasticsearchClient client, ActionType<AcknowledgedResponse> action,\n+                                       String repository, String source, String target) {\n+        this(client, action, new CloneSnapshotRequest(repository, source, target, Strings.EMPTY_ARRAY));\n+    }\n+\n+    public CloneSnapshotRequestBuilder setIndices(String... indices) {", "originalCommit": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0Mjk3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497342977", "bodyText": "Can't we just reuse or adapt filterIndices() so that restore and clone indices parameter work the same?", "author": "tlrx", "createdAt": "2020-09-30T08:44:20Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotUtils.java", "diffHunk": "@@ -118,4 +125,44 @@\n         }\n         return List.copyOf(result);\n     }\n+\n+    /**\n+     * Finds the {@link IndexId}s in the given source snapshot that match the given index patterns for a snapshot clone operation.\n+     *\n+     * @param sourceSnapshotId source snapshot id\n+     * @param targetSnapshot   target snapshot that the clone operation would create\n+     * @param repositoryData   repository data of the repository that the clone\n+     * @param indexPatterns    index patterns to clone from source- to target snapshot\n+     * @return list of index ids to clone\n+     * @throws SnapshotException on failure to find concrete request index ids or any index ids\n+     */\n+    static List<IndexId> findIndexIdsToClone(SnapshotId sourceSnapshotId, Snapshot targetSnapshot, RepositoryData repositoryData,", "originalCommit": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1Mjc5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497352793", "bodyText": "\ud83e\udd26 yea let's do that and use IndicesOptions on the request, that makes it all fall into place much more nicely :) Thanks!", "author": "original-brownbear", "createdAt": "2020-09-30T08:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0Mjk3Nw=="}], "type": "inlineReview"}, {"oid": "3026cb663360ed6f602bcc40726960b56f2bce64", "url": "https://github.com/elastic/elasticsearch/commit/3026cb663360ed6f602bcc40726960b56f2bce64", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-api-2", "committedDate": "2020-09-30T09:09:48Z", "type": "commit"}, {"oid": "77aca29c31c3d8b031ee4f19d9230811a4eadf91", "url": "https://github.com/elastic/elasticsearch/commit/77aca29c31c3d8b031ee4f19d9230811a4eadf91", "message": "CR comments", "committedDate": "2020-09-30T09:37:56Z", "type": "commit"}, {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9", "url": "https://github.com/elastic/elasticsearch/commit/59de423dfcb725fd30abc360f62d097fa33169f9", "message": "fix up rest request", "committedDate": "2020-09-30T09:46:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497389085", "bodyText": "Can we comment this for now and only uncomment it once REST integration tests and the whole feature are done?", "author": "tlrx", "createdAt": "2020-09-30T09:58:48Z", "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -659,6 +663,7 @@ public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n         registerHandler.accept(new RestCleanupRepositoryAction());\n         registerHandler.accept(new RestGetSnapshotsAction());\n         registerHandler.accept(new RestCreateSnapshotAction());\n+        registerHandler.accept(new RestCloneSnapshotAction());", "originalCommit": "59de423dfcb725fd30abc360f62d097fa33169f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5Nzk3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497397973", "bodyText": "Mainly made this active here to make sure our RestController can handle the shared path with the create-snapshot action. Turned it only accepts this if the parameter names are the same across both actions so I left it in place to make sure we don't break anything.\nI'm only going to merge this to master before final completion anyway, so maybe we can just leave it?", "author": "original-brownbear", "createdAt": "2020-09-30T10:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwMjA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497402085", "bodyText": "Turned it only accepts this if the parameter names are the same across both actions so I left it in place to make sure we don't break anything.\n\nOk, I did not think about this. Let's keep it as it is and wait for the full feature to be done and merged before backporting it.", "author": "tlrx", "createdAt": "2020-09-30T10:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497389733", "bodyText": "Hidden indices are snapshotted by default so I think they should be cloned by default too? WDYT?", "author": "tlrx", "createdAt": "2020-09-30T09:59:53Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();", "originalCommit": "59de423dfcb725fd30abc360f62d097fa33169f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MzE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497393160", "bodyText": "I went with the defaults for restore here. I figured it's probably less likely that one would clone a hidden index so those seemed more natural?", "author": "original-brownbear", "createdAt": "2020-09-30T10:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5OTY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497399657", "bodyText": "Actually I'm more concerned about the following use case:\ncreate a snapshot of all indices (it includes hidden ones) -> clone this snapshot and remove some large index I don't care anymore (it also removes hidden indices right?) -> delete the previous snapshot as I now have a lighter snapshot (but the hidden indices are gone silently)\nor maybe I'm missing something?", "author": "tlrx", "createdAt": "2020-09-30T10:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwMjg3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497402877", "bodyText": "Sold :), that's a conceivable use case for sure!", "author": "original-brownbear", "createdAt": "2020-09-30T10:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MDM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497390397", "bodyText": "Also serialize indices options", "author": "tlrx", "createdAt": "2020-09-30T10:01:04Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    /**\n+     * Creates a clone snapshot request for cloning the given source snapshot's indices into the given target snapshot on the given\n+     * repository.\n+     *\n+     * @param repository repository that source snapshot belongs to and that the target snapshot will be created in\n+     * @param source     source snapshot name\n+     * @param target     target snapshot name\n+     * @param indices    indices to clone from source to target\n+     */\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {\n+        this.repository = repository;\n+        this.source = source;\n+        this.target = target;\n+        this.indices = indices;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(repository);\n+        out.writeString(source);\n+        out.writeString(target);\n+        out.writeStringArray(indices);", "originalCommit": "59de423dfcb725fd30abc360f62d097fa33169f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2e910482495bcb9f6e70773137b3fc0d8dc3912c", "url": "https://github.com/elastic/elasticsearch/commit/2e910482495bcb9f6e70773137b3fc0d8dc3912c", "message": "indices options", "committedDate": "2020-09-30T10:12:27Z", "type": "commit"}, {"oid": "771463496bc71ef1b5c994808b0e4ac8f59123c1", "url": "https://github.com/elastic/elasticsearch/commit/771463496bc71ef1b5c994808b0e4ac8f59123c1", "message": "fix default indices resolve", "committedDate": "2020-09-30T10:24:09Z", "type": "commit"}]}