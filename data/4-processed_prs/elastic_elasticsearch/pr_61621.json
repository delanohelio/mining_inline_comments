{"pr_number": 61621, "pr_title": "Ensure authz operation overrides transient authz headers", "pr_createdAt": "2020-08-27T09:27:04Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61621", "timeline": [{"oid": "5e627f7a57f5ad0c5342e52787e333c9a7819e32", "url": "https://github.com/elastic/elasticsearch/commit/5e627f7a57f5ad0c5342e52787e333c9a7819e32", "message": "Done", "committedDate": "2020-08-27T09:25:21Z", "type": "commit"}, {"oid": "1939750f41bd6aefe6a4872b72f3c56223358d1c", "url": "https://github.com/elastic/elasticsearch/commit/1939750f41bd6aefe6a4872b72f3c56223358d1c", "message": "Unused import", "committedDate": "2020-08-27T09:36:56Z", "type": "commit"}, {"oid": "ba47ac01e5e1ba759cc561146ab4fcefdc350e10", "url": "https://github.com/elastic/elasticsearch/commit/ba47ac01e5e1ba759cc561146ab4fcefdc350e10", "message": "Remove indices permissions inn transport filter as well", "committedDate": "2020-08-27T10:32:02Z", "type": "commit"}, {"oid": "523699833d46d3d98c43397c34388006b268f641", "url": "https://github.com/elastic/elasticsearch/commit/523699833d46d3d98c43397c34388006b268f641", "message": "Tests fix", "committedDate": "2020-08-27T14:42:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUxOTUxNA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480519514", "bodyText": "For completeness, I'd personally add assertNull for INDICES_PERMISSIONS_KEY as well.", "author": "ywangd", "createdAt": "2020-09-01T00:57:43Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilterTests.java", "diffHunk": "@@ -173,23 +188,23 @@ public void testApplyAsSystemUser() throws Exception {\n             callback.onResponse(threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));\n             return Void.TYPE;\n         }).when(authcService).authenticate(eq(action), eq(request), eq(SystemUser.INSTANCE), any(ActionListener.class));\n-        doAnswer((i) -> {\n-            ActionListener<Void> callback = (ActionListener<Void>) i.getArguments()[3];\n-            callback.onResponse(null);\n-            return Void.TYPE;\n-        }).when(authzService)\n-            .authorize(any(Authentication.class), any(String.class), any(TransportRequest.class), any(ActionListener.class));\n+        IndicesAccessControl authzAccessControl = mock(IndicesAccessControl.class);\n+        mockAuthorize(authzAccessControl);\n \n         filter.apply(task, action, request, listener, chain);\n \n         if (hasExistingAuthentication) {\n             assertEquals(authentication, threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));\n+            if (hasExistingAccessControl) {\n+                assertThat(threadContext.getTransient(INDICES_PERMISSIONS_KEY), sameInstance(IndicesAccessControl.ALLOW_NO_INDICES));\n+            }\n         } else {\n             assertNull(threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));", "originalCommit": "523699833d46d3d98c43397c34388006b268f641", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU4MDE5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480580196", "bodyText": "My understanding is that there should no transient header at all in this place, since ServerTrasnportFilter is only invoked when the request is cross-nodes. If this is true, would it be better in terms of intention to have an assert here instead of removeTransient?\nBut if we do need removeTransient here, would it then be better to move the remove into AuthorizationService#authorize so it is better encapsulated?", "author": "ywangd", "createdAt": "2020-09-01T01:54:20Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java", "diffHunk": "@@ -105,9 +107,11 @@ requests from all the nodes are attached with a user (either a serialize\n                     SystemUser.is(authentication.getUser()) == false) {\n                     securityContext.executeAsUser(SystemUser.INSTANCE, (ctx) -> {\n                         final Authentication replaced = securityContext.getAuthentication();\n+                        threadContext.removeTransient(INDICES_PERMISSIONS_KEY);", "originalCommit": "523699833d46d3d98c43397c34388006b268f641", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU4MDUxMg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480580512", "bodyText": "Same as above.", "author": "ywangd", "createdAt": "2020-09-01T01:54:35Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java", "diffHunk": "@@ -105,9 +107,11 @@ requests from all the nodes are attached with a user (either a serialize\n                     SystemUser.is(authentication.getUser()) == false) {\n                     securityContext.executeAsUser(SystemUser.INSTANCE, (ctx) -> {\n                         final Authentication replaced = securityContext.getAuthentication();\n+                        threadContext.removeTransient(INDICES_PERMISSIONS_KEY);\n                         authzService.authorize(replaced, securityAction, request, listener);\n                     }, version);\n                 } else {\n+                    threadContext.removeTransient(INDICES_PERMISSIONS_KEY);", "originalCommit": "523699833d46d3d98c43397c34388006b268f641", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cdb7ced73f60be5e10e5fdf28b88047a4e0456e0", "url": "https://github.com/elastic/elasticsearch/commit/cdb7ced73f60be5e10e5fdf28b88047a4e0456e0", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-02T16:19:20Z", "type": "commit"}, {"oid": "a92e34917a64ed74c1727df9f07c0fa1d98bbd18", "url": "https://github.com/elastic/elasticsearch/commit/a92e34917a64ed74c1727df9f07c0fa1d98bbd18", "message": "Maybe", "committedDate": "2020-09-02T20:23:16Z", "type": "commit"}, {"oid": "ddefebb4e158ee620add98807e13798cb613f38b", "url": "https://github.com/elastic/elasticsearch/commit/ddefebb4e158ee620add98807e13798cb613f38b", "message": "Test midway", "committedDate": "2020-09-02T22:00:27Z", "type": "commit"}, {"oid": "6a1fdcb118f2571661463bc2d3e8c3cae3e3fc56", "url": "https://github.com/elastic/elasticsearch/commit/6a1fdcb118f2571661463bc2d3e8c3cae3e3fc56", "message": "Tests done", "committedDate": "2020-09-02T22:26:31Z", "type": "commit"}, {"oid": "6eb08ee87448c32717fd2e24eaec191eebe55b02", "url": "https://github.com/elastic/elasticsearch/commit/6eb08ee87448c32717fd2e24eaec191eebe55b02", "message": "Checkstyle", "committedDate": "2020-09-02T22:33:41Z", "type": "commit"}, {"oid": "3afb0ac651484f7cfc641e65c3a598c3bf17c97d", "url": "https://github.com/elastic/elasticsearch/commit/3afb0ac651484f7cfc641e65c3a598c3bf17c97d", "message": "Checkstyle", "committedDate": "2020-09-03T07:14:03Z", "type": "commit"}, {"oid": "0777da659ac30f1a7dca475b5427ba9d18e315fd", "url": "https://github.com/elastic/elasticsearch/commit/0777da659ac30f1a7dca475b5427ba9d18e315fd", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-04T07:10:43Z", "type": "commit"}, {"oid": "64d0404628d3026ea77d1807df8a19d7e71bed21", "url": "https://github.com/elastic/elasticsearch/commit/64d0404628d3026ea77d1807df8a19d7e71bed21", "message": "Jay's review but with cruft", "committedDate": "2020-09-04T13:30:59Z", "type": "commit"}, {"oid": "f6692ff373a24ac2f4ec9f18c08514612325b089", "url": "https://github.com/elastic/elasticsearch/commit/f6692ff373a24ac2f4ec9f18c08514612325b089", "message": "Revert putTransient", "committedDate": "2020-09-04T13:47:27Z", "type": "commit"}, {"oid": "023f6a2a4560282ba1b1943cc4389a99600e2681", "url": "https://github.com/elastic/elasticsearch/commit/023f6a2a4560282ba1b1943cc4389a99600e2681", "message": "Nit", "committedDate": "2020-09-04T13:53:08Z", "type": "commit"}, {"oid": "9f8adf3b3bcdb42a8be6349b14e10fa20576a1c9", "url": "https://github.com/elastic/elasticsearch/commit/9f8adf3b3bcdb42a8be6349b14e10fa20576a1c9", "message": "Javadoc", "committedDate": "2020-09-04T14:35:45Z", "type": "commit"}, {"oid": "12f366376841cd8b818f07554e39549e115930d2", "url": "https://github.com/elastic/elasticsearch/commit/12f366376841cd8b818f07554e39549e115930d2", "message": "za test", "committedDate": "2020-09-04T15:31:34Z", "type": "commit"}, {"oid": "bc52f392b81fd5844c7d8b11e936014b592ae801", "url": "https://github.com/elastic/elasticsearch/commit/bc52f392b81fd5844c7d8b11e936014b592ae801", "message": "ThreadContext test", "committedDate": "2020-09-04T16:32:32Z", "type": "commit"}, {"oid": "b151eda454ddcc17bbaf63598c90ce73385446c3", "url": "https://github.com/elastic/elasticsearch/commit/b151eda454ddcc17bbaf63598c90ce73385446c3", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-04T16:44:31Z", "type": "commit"}, {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "url": "https://github.com/elastic/elasticsearch/commit/6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "message": "RestSqlSecurityIT", "committedDate": "2020-09-04T21:05:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NDk1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r483844952", "bodyText": "This is not actually an access denied for SQL_ACTION_NAME , it is for a scroll search, i.e. :\n.expect(\"access_denied\", SearchTransportService.QUERY_FETCH_SCROLL_ACTION_NAME, \"full_access\", \"default_native\", empty(), \"InternalScrollSearchRequest\")\n\nuntil now we've erroneously carried over the ACTION_ORIGIN header to the child action, which is audited.\n(and this IT doesn't look at non-SQL audits)", "author": "albertzaharovits", "createdAt": "2020-09-04T21:09:36Z", "path": "x-pack/plugin/sql/qa/server/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java", "diffHunk": "@@ -271,8 +271,6 @@ public void testHijackScrollFails() throws Exception {\n \n         createAuditLogAsserter().expectSqlCompositeActionFieldCaps(\"test_admin\", \"test\")\n             .expect(true, SQL_ACTION_NAME, \"full_access\", empty())\n-            // one scroll access denied per shard\n-            .expect(\"access_denied\", SQL_ACTION_NAME, \"full_access\", \"default_native\", empty(), \"InternalScrollSearchRequest\")", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjU4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484152581", "bodyText": "I found this doc confusing, and needed to read the implementation in order to understand what it was trying to say.\nHere's my attempt (though others may consider it too long)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Removes the specified transient headers from the current context. The removed transient headers can be\n          \n          \n            \n                 * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n          \n          \n            \n                 * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n          \n          \n            \n                 * and the values for the transient headers, as they existed before invoking this method).\n          \n          \n            \n                 * Removes the specified transient headers from the current context. When the returned\n          \n          \n            \n                 * {@link StoredContext} is closed, it will restore these transient headers to their original\n          \n          \n            \n                 * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n          \n          \n            \n                 * Closing the {@code StoredContext} has no affect on any other header - any headers \n          \n          \n            \n                 * (other than those names specified in {@code transientHeadersToStash} that were\n          \n          \n            \n                 * added to the {@code ThreadContext} will be retained.\n          \n          \n            \n                 *\n          \n          \n            \n                 * For example, at the end of the following code, the ThreadContext will have transient\n          \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n          \n          \n            \n                 * <pre>\n          \n          \n            \n                 * threadContext.putTransient(\"a\", 1);  \n          \n          \n            \n                 * threadContext.putTransient(\"b\", 1);   \n          \n          \n            \n                 * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n          \n          \n            \n                 *   threadContext.putTransient(\"b\", 2);   \n          \n          \n            \n                 *   threadContext.putTransient(\"c\", 2);   \n          \n          \n            \n                 *   threadContext.putTransient(\"d\", 2); \n          \n          \n            \n                 * }\n          \n          \n            \n                 * </pre>", "author": "tvernum", "createdAt": "2020-09-07T02:21:57Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyNTM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484325377", "bodyText": "Thank you for the clear suggestion, Tim!", "author": "albertzaharovits", "createdAt": "2020-09-07T09:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3OTA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484179080", "bodyText": "Could we add Objects.requireNonNull(...) in the existing ThreadContext#putTransient method to stop the possibility of null value ever being added as a transient header?\nPlease note I am not suggesting to remove the null check here. In fact, I think it is good since I don't think we would ever need null transient headers. But the fact that null can be put into the headers and the subtle difference between null value and non-existence makes it a bit distracting to think through the behaviour. I had to spend some time to convince myself that the behaviour is correct even if a null value does slip into the headers. Therefore, if a non-null check can be added to putTransient method, it would help making this thought process easier and also benefit future readers.", "author": "ywangd", "createdAt": "2020-09-07T04:40:07Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).\n+     */\n+    public StoredContext stashTransientContext(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };\n+        }\n+        final ThreadContextStruct beforeContext = threadLocal.get();\n+        final Map<String, Object> stashedTransientHeaders = new HashMap<>();\n+        Map<String, Object> newBeforeTransientHeaders = new HashMap<>(beforeContext.transientHeaders);\n+        for (String transientHeaderToStash : transientHeadersToStash) {\n+            Object stashed = newBeforeTransientHeaders.remove(transientHeaderToStash);\n+            if (stashed != null) {\n+                stashedTransientHeaders.put(transientHeaderToStash, stashed);\n+            }", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4OTk3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484389975", "bodyText": "Could we add Objects.requireNonNull(...) in the existing ThreadContext#putTransient method to stop the possibility of null value ever being added as a transient header?\n\nWe could. But it feels to me that it diverges from the scope of this PR, so I believe a separate PR is more suitable.\nEven so, I'm not sure that the discussions it could spur are worth it.\nI have changed the code slightly:\n        for (String transientHeaderToStash : transientHeadersToStash) {\n            if (newBeforeTransientHeaders.containsKey(transientHeaderToStash)) {\n                Object stashed = newBeforeTransientHeaders.remove(transientHeaderToStash);\n                stashedTransientHeaders.put(transientHeaderToStash, stashed);\n            }\n        }\n\nIn order to assuage your original concern that the stashTransientHeaders method has slightly different behaviours for null or missing headers.", "author": "albertzaharovits", "createdAt": "2020-09-07T12:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3OTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5NTEzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484395135", "bodyText": "This change is better. Thanks!", "author": "ywangd", "createdAt": "2020-09-07T12:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3OTA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5MjE1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484192155", "bodyText": "Naming is hard. I'd personally suggest this method to be just called stashTransientHeaders. The difference is to drop the Context bit, which is the confusing bit for me, because the existing stashContext behaves differently in a subtle but important way:\n\nFor the child actions, stashContext assigns it to a default context, while this method assigns it the \"current\" context minus the transients. This is more similar to the behaviour of newStoredContext, which assigns the current context unchanged.\nWhen restoring, stashContext restores the original context, while this method only restore selected trainstent headers. The important difference here is that this method does not restore anything else.", "author": "ywangd", "createdAt": "2020-09-07T05:38:12Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).\n+     */\n+    public StoredContext stashTransientContext(Collection<String> transientHeadersToStash) {", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3NjIzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484376236", "bodyText": "I went with stashTransientHeaders , thanks for suggesting.", "author": "albertzaharovits", "createdAt": "2020-09-07T11:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5MjE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDcwNA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484194704", "bodyText": "I am not sure whether it is necessary to package this into SecurityContext class. I'd prefer to have it as a method of AuthorizationService, since it is the only consumer. Therefore it will be close to the context if it is defined in AuthorizationService. Based on the method name, it is also unlikley to be used anywhere else in future.\nWrapping it here leads to many boilerplate code like securityContext.getThreadContext()..., which does not help reading and maybe obsecure the actual importance being only \"transient header stashing\" for future readers.", "author": "ywangd", "createdAt": "2020-09-07T05:48:16Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -150,6 +151,16 @@ public void executeAsUser(User user, Consumer<StoredContext> consumer, Version v\n         }\n     }\n \n+    /**\n+     * Compared to {@code ThreadContext#stashContext} this only clears the specific transient headers that are used to convey the\n+     * authorization outcome, leaving the other headers in place, just like {@code ThreadContext#newStoredContext(true)}. When\n+     * the returned {@code StoredContext} is closed, the original authorization transient headers are restored (if any did\n+     * not originally exist, it will also not exist after the restore).\n+     */\n+    public StoredContext stashAuthorizationContext() {\n+        return threadContext.stashTransientContext(AuthorizationServiceField.ALL_AUTHORIZATION_KEYS);\n+    }", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NTQ2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484385462", "bodyText": "I still maintain that it sits better in the SecurityContext even if the AuthorizationService is the single caller, but the topic is not significant enough to argue about, so I went with your suggestion.", "author": "albertzaharovits", "createdAt": "2020-09-07T11:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NTAyNA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484195024", "bodyText": "It feels important to me to state clearly that other than the specified transient headers, nothing else gets restored. Any other new headers generated by the child actions will be kept.", "author": "ywangd", "createdAt": "2020-09-07T05:49:24Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -150,6 +151,16 @@ public void executeAsUser(User user, Consumer<StoredContext> consumer, Version v\n         }\n     }\n \n+    /**\n+     * Compared to {@code ThreadContext#stashContext} this only clears the specific transient headers that are used to convey the\n+     * authorization outcome, leaving the other headers in place, just like {@code ThreadContext#newStoredContext(true)}. When\n+     * the returned {@code StoredContext} is closed, the original authorization transient headers are restored (if any did\n+     * not originally exist, it will also not exist after the restore).\n+     */", "originalCommit": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4MzczOA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484383738", "bodyText": "I went with Tim's suggestion from #61621 (comment), which I believe satisfies your requirement.", "author": "albertzaharovits", "createdAt": "2020-09-07T11:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NTAyNA=="}], "type": "inlineReview"}, {"oid": "90e141ef35b10801db9665fbd0a5d7df86ed183f", "url": "https://github.com/elastic/elasticsearch/commit/90e141ef35b10801db9665fbd0a5d7df86ed183f", "message": "Update server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java\n\nCo-authored-by: Tim Vernum <tim@adjective.org>", "committedDate": "2020-09-07T09:50:33Z", "type": "commit"}, {"oid": "c279279284b5352ab14acff605832ff4ac28653e", "url": "https://github.com/elastic/elasticsearch/commit/c279279284b5352ab14acff605832ff4ac28653e", "message": "Move stash authorization arouund", "committedDate": "2020-09-07T11:48:47Z", "type": "commit"}, {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "url": "https://github.com/elastic/elasticsearch/commit/d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-07T12:24:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484976543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n          \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"=2} will not be set.", "author": "jaymode", "createdAt": "2020-09-08T14:43:50Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.", "originalCommit": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MjkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r485052923", "bodyText": "c not being set is the correct thing.\nIt is included in the list of headers to be stashed, but it is not part of the context before the stash. Therefore the behaviour after restore is to also not be present.", "author": "albertzaharovits", "createdAt": "2020-09-08T16:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDU2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484984566", "bodyText": "I think this should actually make a copy of the struct and restore it, otherwise any additional headers will be leaked back after closing the StoredContext.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // no-op\n          \n          \n            \n                        return () -> {\n          \n          \n            \n                        };\n          \n          \n            \n                        final ThreadContextStruct context = threadLocal.get();\n          \n          \n            \n                        return () -> threadLocal.set(context);\n          \n      \n    \n    \n  \n\nCan you also add a test to ensure this? Scenario I am thinking will fail as the code is written:\nassertNull(threadContext.getTransient(\"a\");\ntry (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of())) {\n    threadContext.putTransient(\"a\", \"1\");\n}\nassertNull(threadContext.getTransient(\"a\");", "author": "jaymode", "createdAt": "2020-09-08T14:54:26Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n+     * <pre>\n+     * threadContext.putTransient(\"a\", 1);\n+     * threadContext.putTransient(\"b\", 1);\n+     * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n+     *   threadContext.putTransient(\"b\", 2);\n+     *   threadContext.putTransient(\"c\", 2);\n+     *   threadContext.putTransient(\"d\", 2);\n+     * }\n+     * </pre>\n+     */\n+    public StoredContext stashTransientHeaders(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };", "originalCommit": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NTMzMw==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r485055333", "bodyText": "The leaking is by design. Only the specified headers are restored; for the others, if they're changed inside the stash, they are preserved after restore (think response headers). The renaming from stashTransientContext to stashTransientHeaders ought to help clarifying this oddity.", "author": "albertzaharovits", "createdAt": "2020-09-08T16:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484987774", "bodyText": "Why can't we just restore the beforeContext?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final ThreadContextStruct afterContext = threadLocal.get();\n          \n          \n            \n                        Map<String, Object> newAfterTransientHeaders = new HashMap<>(afterContext.transientHeaders);\n          \n          \n            \n                        // remove the transients that might have been set in the mean time\n          \n          \n            \n                        for (String transientHeaderToStash : transientHeadersToStash) {\n          \n          \n            \n                            newAfterTransientHeaders.remove(transientHeaderToStash);\n          \n          \n            \n                        }\n          \n          \n            \n                        // fill in the values that existed before stashing\n          \n          \n            \n                        newAfterTransientHeaders.putAll(stashedTransientHeaders);\n          \n          \n            \n                        ThreadContextStruct threadContextStruct = new ThreadContextStruct(afterContext.requestHeaders, afterContext.responseHeaders,\n          \n          \n            \n                                newAfterTransientHeaders, afterContext.isSystemContext);\n          \n          \n            \n                        threadLocal.set(threadContextStruct);\n          \n          \n            \n                        return () -> threadLocal.set(beforeContext);", "author": "jaymode", "createdAt": "2020-09-08T14:57:34Z", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n+     * <pre>\n+     * threadContext.putTransient(\"a\", 1);\n+     * threadContext.putTransient(\"b\", 1);\n+     * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n+     *   threadContext.putTransient(\"b\", 2);\n+     *   threadContext.putTransient(\"c\", 2);\n+     *   threadContext.putTransient(\"d\", 2);\n+     * }\n+     * </pre>\n+     */\n+    public StoredContext stashTransientHeaders(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };\n+        }\n+        final ThreadContextStruct beforeContext = threadLocal.get();\n+        final Map<String, Object> stashedTransientHeaders = new HashMap<>();\n+        Map<String, Object> newBeforeTransientHeaders = new HashMap<>(beforeContext.transientHeaders);\n+        for (String transientHeaderToStash : transientHeadersToStash) {\n+            if (newBeforeTransientHeaders.containsKey(transientHeaderToStash)) {\n+                Object stashed = newBeforeTransientHeaders.remove(transientHeaderToStash);\n+                stashedTransientHeaders.put(transientHeaderToStash, stashed);\n+            }\n+        }\n+        if (false == stashedTransientHeaders.isEmpty()) {\n+            ThreadContextStruct threadContextStruct = new ThreadContextStruct(beforeContext.requestHeaders, beforeContext.responseHeaders,\n+                    newBeforeTransientHeaders, beforeContext.isSystemContext);\n+            threadLocal.set(threadContextStruct);\n+        }\n+        return () -> {\n+            final ThreadContextStruct afterContext = threadLocal.get();\n+            Map<String, Object> newAfterTransientHeaders = new HashMap<>(afterContext.transientHeaders);\n+            // remove the transients that might have been set in the mean time\n+            for (String transientHeaderToStash : transientHeadersToStash) {\n+                newAfterTransientHeaders.remove(transientHeaderToStash);\n+            }\n+            // fill in the values that existed before stashing\n+            newAfterTransientHeaders.putAll(stashedTransientHeaders);\n+            ThreadContextStruct threadContextStruct = new ThreadContextStruct(afterContext.requestHeaders, afterContext.responseHeaders,\n+                    newAfterTransientHeaders, afterContext.isSystemContext);\n+            threadLocal.set(threadContextStruct);", "originalCommit": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NjQwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r485056406", "bodyText": "We have to maintain all the other headers (transient, request, response) as they might have been modified inside the stash, and revert only the ones in the arg list.", "author": "albertzaharovits", "createdAt": "2020-09-08T16:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc3NA=="}], "type": "inlineReview"}, {"oid": "81b71752bb4adf5e65121b90de6e402a9bf8511c", "url": "https://github.com/elastic/elasticsearch/commit/81b71752bb4adf5e65121b90de6e402a9bf8511c", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-08T17:03:32Z", "type": "commit"}, {"oid": "e739686e8fb8c7adb61aa53313e64c7f77eb929b", "url": "https://github.com/elastic/elasticsearch/commit/e739686e8fb8c7adb61aa53313e64c7f77eb929b", "message": "don't leak", "committedDate": "2020-09-08T21:48:38Z", "type": "commit"}, {"oid": "6acb76ddc09ef9ced61853d026f85970d4f8ec01", "url": "https://github.com/elastic/elasticsearch/commit/6acb76ddc09ef9ced61853d026f85970d4f8ec01", "message": "Checkstyle", "committedDate": "2020-09-08T21:57:08Z", "type": "commit"}, {"oid": "9dc43fd5d32fb81a67a15d2aaea4f231182bbd4a", "url": "https://github.com/elastic/elasticsearch/commit/9dc43fd5d32fb81a67a15d2aaea4f231182bbd4a", "message": "Merge response headers", "committedDate": "2020-09-09T12:36:29Z", "type": "commit"}, {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f", "url": "https://github.com/elastic/elasticsearch/commit/cdc45aabf2013edfde7b89c8a4d160dcf003350f", "message": "Checkstyle", "committedDate": "2020-09-09T12:44:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxMjEzMg==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486012132", "bodyText": "This is a duplicate of Line 70-72.", "author": "ywangd", "createdAt": "2020-09-10T01:39:50Z", "path": "server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java", "diffHunk": "@@ -56,6 +57,82 @@ public void testStashContext() {\n         assertEquals(\"1\", threadContext.getHeader(\"default\"));\n     }\n \n+    public void testNewContextWithClearedTransients() {\n+        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n+        threadContext.putTransient(\"foo\", \"bar\");\n+        threadContext.putTransient(\"bar\", \"baz\");\n+        threadContext.putHeader(\"foo\", \"bar\");\n+        threadContext.putHeader(\"baz\", \"bar\");\n+        threadContext.addResponseHeader(\"foo\", \"bar\");\n+        threadContext.addResponseHeader(\"bar\", \"qux\");\n+\n+        // this is missing or null\n+        if (randomBoolean()) {\n+            threadContext.putTransient(\"acme\", null);\n+        }\n+\n+        // foo is the only existing transient header that is cleared\n+        try (ThreadContext.StoredContext stashed = threadContext.newStoredContext(false, randomFrom(List.of(\"foo\", \"foo\"),\n+                List.of(\"foo\"), List.of(\"foo\", \"acme\")))) {\n+            // only the requested transient header is cleared\n+            assertNull(threadContext.getTransient(\"foo\"));\n+            // missing header is still missing\n+            assertNull(threadContext.getTransient(\"acme\"));\n+            // other headers are preserved\n+            assertEquals(\"baz\", threadContext.getTransient(\"bar\"));\n+            assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n+            assertEquals(\"bar\", threadContext.getHeader(\"baz\"));\n+            assertEquals(\"bar\", threadContext.getResponseHeaders().get(\"foo\").get(0));\n+            assertEquals(\"qux\", threadContext.getResponseHeaders().get(\"bar\").get(0));\n+\n+            // try override stashed header\n+            threadContext.putTransient(\"foo\", \"acme\");\n+            assertEquals(\"acme\", threadContext.getTransient(\"foo\"));\n+            // add new headers\n+            threadContext.putTransient(\"baz\", \"bar\");\n+            threadContext.putHeader(\"bar\", \"baz\");\n+            threadContext.addResponseHeader(\"baz\", \"bar\");\n+            threadContext.addResponseHeader(\"foo\", \"baz\");\n+        }\n+\n+        // original is restored (it is not overridden)\n+        assertEquals(\"bar\", threadContext.getTransient(\"foo\"));\n+        // headers added inside the stash are NOT preserved\n+        assertNull(threadContext.getTransient(\"baz\"));\n+        assertNull(threadContext.getHeader(\"bar\"));\n+        assertNull(threadContext.getResponseHeaders().get(\"baz\"));\n+        // original headers are restored\n+        assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n+        assertEquals(\"bar\", threadContext.getHeader(\"baz\"));\n+        assertEquals(\"bar\", threadContext.getResponseHeaders().get(\"foo\").get(0));\n+        assertEquals(1, threadContext.getResponseHeaders().get(\"foo\").size());\n+        assertEquals(\"qux\", threadContext.getResponseHeaders().get(\"bar\").get(0));\n+\n+        if (randomBoolean()) {\n+            threadContext.putTransient(\"acme\", null);\n+        }", "originalCommit": "cdc45aabf2013edfde7b89c8a4d160dcf003350f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NzI1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486287253", "bodyText": "On purpose, but I can remove it.", "author": "albertzaharovits", "createdAt": "2020-09-10T12:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxMjEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486052339", "bodyText": "Is this the right semantic? I understand this is the reason why RestSqlSecurityIT needs to be updated. Technical details aside, if a parent action invokes a child action, should the \"originating action\" still be the parent action? The change here makes it to be the child action. If it's always the child action, why does it need to be called \"originating\" action?", "author": "ywangd", "createdAt": "2020-09-10T04:15:21Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -168,39 +168,46 @@ private AuthorizationInfo getAuthorizationInfoFromContext() {\n      */\n     public void authorize(final Authentication authentication, final String action, final TransportRequest originalRequest,\n                           final ActionListener<Void> listener) throws ElasticsearchSecurityException {\n-        // prior to doing any authorization lets set the originating action in the context only\n-        putTransientIfNonExisting(ORIGINATING_ACTION_KEY, action);\n-\n-        String auditId = AuditUtil.extractRequestId(threadContext);\n-        if (auditId == null) {\n-            // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n-            // true because the request-id is generated during authentication\n-            if (isInternalUser(authentication.getUser()) != false) {\n-                auditId = AuditUtil.getOrGenerateRequestId(threadContext);\n-            } else {\n-                auditTrailService.get().tamperedRequest(null, authentication, action, originalRequest);\n-                final String message = \"Attempt to authorize action [\" + action + \"] for [\" + authentication.getUser().principal()\n-                    + \"] without an existing request-id\";\n-                assert false : message;\n-                listener.onFailure(new ElasticsearchSecurityException(message));\n+        /* authorization fills in certain transient headers (that must be observed in the listener as well), therefore we\n+         * begin by clearing the existing ones up (as they might be already set by the authorization of a previous parent\n+         * action (which ran under the same context (on the same node))).\n+         * When the returned {@code StoredContext} is closed, ALL the original headers are restored.\n+         */\n+        try (ThreadContext.StoredContext ignore = threadContext.newStoredContext(false, AuthorizationServiceField.ALL_AUTHORIZATION_KEYS)) {\n+            // prior to doing any authorization lets set the originating action in the context only\n+            threadContext.putTransient(AuthorizationServiceField.ORIGINATING_ACTION_KEY, action);", "originalCommit": "cdc45aabf2013edfde7b89c8a4d160dcf003350f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NzE1NA==", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486287154", "bodyText": "It's just a naming thing. On the obverse, wouldn't it be odd to only just store the parent action name, no matter the child nesting level, but only if the request doesn't cross thee node boundary?", "author": "albertzaharovits", "createdAt": "2020-09-10T12:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjMzOQ=="}], "type": "inlineReview"}, {"oid": "9d0599944051c22459c8cbccf680564541a815f8", "url": "https://github.com/elastic/elasticsearch/commit/9d0599944051c22459c8cbccf680564541a815f8", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-10T10:39:13Z", "type": "commit"}, {"oid": "3bb28efe6fbedf88bd12d84fbb84de1cf2b01197", "url": "https://github.com/elastic/elasticsearch/commit/3bb28efe6fbedf88bd12d84fbb84de1cf2b01197", "message": "Nit", "committedDate": "2020-09-10T12:14:29Z", "type": "commit"}, {"oid": "be4c2f82b49547214ed0a064559fa946ecec0a2a", "url": "https://github.com/elastic/elasticsearch/commit/be4c2f82b49547214ed0a064559fa946ecec0a2a", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-14T15:15:35Z", "type": "commit"}, {"oid": "06ba2e8d3c5ae80541fba8b47006d8f57ce89e0f", "url": "https://github.com/elastic/elasticsearch/commit/06ba2e8d3c5ae80541fba8b47006d8f57ce89e0f", "message": "Do not override ORIGINATING_ACTION", "committedDate": "2020-09-14T18:07:07Z", "type": "commit"}, {"oid": "169f68021c75d257b593b22b49997b1e8ae5fc4f", "url": "https://github.com/elastic/elasticsearch/commit/169f68021c75d257b593b22b49997b1e8ae5fc4f", "message": "Merge branch 'master' into authz_action_overrides_privs", "committedDate": "2020-09-14T18:07:57Z", "type": "commit"}]}