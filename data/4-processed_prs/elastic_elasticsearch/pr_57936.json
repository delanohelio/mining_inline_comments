{"pr_number": 57936, "pr_title": "System index reads in separate threadpool", "pr_createdAt": "2020-06-10T15:33:31Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57936", "timeline": [{"oid": "c9c092be3e6cf2f00a85c261aaa69283688d2e83", "url": "https://github.com/elastic/elasticsearch/commit/c9c092be3e6cf2f00a85c261aaa69283688d2e83", "message": "System index reads in separate threadpool\n\nThis commit moves all system index reads into their own threadpool.", "committedDate": "2020-06-10T15:31:34Z", "type": "commit"}, {"oid": "7db9ec28d0094d9aa2d644b4feb6da8cfc5c1bf5", "url": "https://github.com/elastic/elasticsearch/commit/7db9ec28d0094d9aa2d644b4feb6da8cfc5c1bf5", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-06-11T15:29:44Z", "type": "commit"}, {"oid": "e45e37a9603950b201c41e6ff32d8558c8a5754f", "url": "https://github.com/elastic/elasticsearch/commit/e45e37a9603950b201c41e6ff32d8558c8a5754f", "message": "leave get requests alone for now", "committedDate": "2020-06-11T19:38:31Z", "type": "commit"}, {"oid": "4640cf2a0f18d09f835976f51e002099116d3828", "url": "https://github.com/elastic/elasticsearch/commit/4640cf2a0f18d09f835976f51e002099116d3828", "message": "minimal automaton", "committedDate": "2020-06-12T14:17:12Z", "type": "commit"}, {"oid": "72f3a6ae88a2a0227ee2ba6c8c9834751df0b7eb", "url": "https://github.com/elastic/elasticsearch/commit/72f3a6ae88a2a0227ee2ba6c8c9834751df0b7eb", "message": "refactor", "committedDate": "2020-06-12T16:26:25Z", "type": "commit"}, {"oid": "37568d8bb811f8971ca80eb2618b8aa8ff7438ef", "url": "https://github.com/elastic/elasticsearch/commit/37568d8bb811f8971ca80eb2618b8aa8ff7438ef", "message": "Revert \"leave get requests alone for now\"\n\nThis reverts commit e45e37a9", "committedDate": "2020-06-15T17:13:11Z", "type": "commit"}, {"oid": "1f48a709a4ec583c11df4e0b208b8b971d491e07", "url": "https://github.com/elastic/elasticsearch/commit/1f48a709a4ec583c11df4e0b208b8b971d491e07", "message": "threadpool shaping", "committedDate": "2020-06-18T20:01:55Z", "type": "commit"}, {"oid": "cbb50bb5b881a14184f0f7b44ae366a525fedaa1", "url": "https://github.com/elastic/elasticsearch/commit/cbb50bb5b881a14184f0f7b44ae366a525fedaa1", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-07-13T16:22:02Z", "type": "commit"}, {"oid": "42e4b8cbba204c44df0fcb2d1ae40b3ab5202cd4", "url": "https://github.com/elastic/elasticsearch/commit/42e4b8cbba204c44df0fcb2d1ae40b3ab5202cd4", "message": "fixes", "committedDate": "2020-07-13T18:53:01Z", "type": "commit"}, {"oid": "45bd609a3bb6d334eee102e4d030ed20e3e942d2", "url": "https://github.com/elastic/elasticsearch/commit/45bd609a3bb6d334eee102e4d030ed20e3e942d2", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-07-13T19:49:38Z", "type": "commit"}, {"oid": "538d95707a12a196ad28221c8b717ac229c3eb3b", "url": "https://github.com/elastic/elasticsearch/commit/538d95707a12a196ad28221c8b717ac229c3eb3b", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-07-27T19:32:39Z", "type": "commit"}, {"oid": "64ebd20d685f466fe1ea776d78f90809591ae31d", "url": "https://github.com/elastic/elasticsearch/commit/64ebd20d685f466fe1ea776d78f90809591ae31d", "message": "upgrade existing indices to have system metadata", "committedDate": "2020-07-29T17:29:38Z", "type": "commit"}, {"oid": "c1cfdf5d0d519da240223a51284116eec160a799", "url": "https://github.com/elastic/elasticsearch/commit/c1cfdf5d0d519da240223a51284116eec160a799", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-07-29T17:38:34Z", "type": "commit"}, {"oid": "e14bb7e097abed042cb4732cffaaccb66db67922", "url": "https://github.com/elastic/elasticsearch/commit/e14bb7e097abed042cb4732cffaaccb66db67922", "message": "checkstyle", "committedDate": "2020-07-29T18:20:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NTE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r462585179", "bodyText": "Isn't it possible to check the metadata to retrieve this information through the already provided IndexSettings ?", "author": "jimczi", "createdAt": "2020-07-29T20:59:26Z", "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShard.java", "diffHunk": "@@ -296,7 +297,8 @@ public IndexShard(\n             final List<IndexingOperationListener> listeners,\n             final Runnable globalCheckpointSyncer,\n             final RetentionLeaseSyncer retentionLeaseSyncer,\n-            final CircuitBreakerService circuitBreakerService) throws IOException {\n+            final CircuitBreakerService circuitBreakerService,\n+            final boolean isSystem) throws IOException {", "originalCommit": "e14bb7e097abed042cb4732cffaaccb66db67922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463193573", "bodyText": "Yes it is; I missed that metadata was available. Addressed in cffb69d", "author": "jaymode", "createdAt": "2020-07-30T18:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r462586461", "bodyText": "Since search should be fast on these indices I wonder if a queue size of 1000 is not enough ?", "author": "jimczi", "createdAt": "2020-07-29T21:01:49Z", "path": "server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java", "diffHunk": "@@ -180,6 +182,7 @@ public ThreadPool(final Settings settings, final ExecutorBuilder<?>... customBui\n         builders.put(Names.FORCE_MERGE, new FixedExecutorBuilder(settings, Names.FORCE_MERGE, 1, -1, false));\n         builders.put(Names.FETCH_SHARD_STORE,\n                 new ScalingExecutorBuilder(Names.FETCH_SHARD_STORE, 1, 2 * allocatedProcessors, TimeValue.timeValueMinutes(5)));\n+        builders.put(Names.SYSTEM_READ, new FixedExecutorBuilder(settings, Names.SYSTEM_READ, halfProcMaxAt5, 2000, false));", "originalCommit": "e14bb7e097abed042cb4732cffaaccb66db67922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NzQ4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463187483", "bodyText": "I combined the queue size for get and search here since we share the threadpool for both types of operations", "author": "jaymode", "createdAt": "2020-07-30T18:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MTc1NA==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463191754", "bodyText": "ok thanks for explaining. The query and get request are lightweight so 2000 should be ok.", "author": "jimczi", "createdAt": "2020-07-30T18:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4ODI2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r462588266", "bodyText": "nit: I like SEARCH_SYSTEM better but that's just a preference...", "author": "jimczi", "createdAt": "2020-07-29T21:05:08Z", "path": "server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java", "diffHunk": "@@ -82,6 +82,7 @@\n         public static final String FORCE_MERGE = \"force_merge\";\n         public static final String FETCH_SHARD_STARTED = \"fetch_shard_started\";\n         public static final String FETCH_SHARD_STORE = \"fetch_shard_store\";\n+        public static final String SYSTEM_READ = \"system_read\";", "originalCommit": "e14bb7e097abed042cb4732cffaaccb66db67922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NzgyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463187829", "bodyText": "Do you still like that since this also affects both search and get operations?", "author": "jaymode", "createdAt": "2020-07-30T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4ODI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MTk2NA==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463191964", "bodyText": "Right, SYSTEM_READ sounds good then, thanks", "author": "jimczi", "createdAt": "2020-07-30T18:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4ODI2Ng=="}], "type": "inlineReview"}, {"oid": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "url": "https://github.com/elastic/elasticsearch/commit/cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "message": "use indexsettings", "committedDate": "2020-07-30T18:31:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NzU0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r462577547", "bodyText": "This variable is currently unused, possibly left over from a previous revision?", "author": "gwbrown", "createdAt": "2020-07-29T20:45:17Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -231,8 +231,8 @@\n     private final EsThreadPoolExecutor danglingIndicesThreadPoolExecutor;\n     private final Set<Index> danglingIndicesToWrite = Sets.newConcurrentHashSet();\n     private final boolean nodeWriteDanglingIndicesInfo;\n-    private ValuesSourceRegistry valuesSourceRegistry;\n-\n+    private final ValuesSourceRegistry valuesSourceRegistry;\n+    private final SystemIndices systemIndices;", "originalCommit": "e14bb7e097abed042cb4732cffaaccb66db67922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463299376", "bodyText": "I've found that using a constant (e.g. SYSTEM_INDEX_FLAG_ADDED=V_8_0_0) makes serialization logic easier to follow when reading, and also easier to change on a backport. Especially so when that version is used in several streaming methods, as is the case here.", "author": "gwbrown", "createdAt": "2020-07-30T22:09:38Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java", "diffHunk": "@@ -761,6 +770,11 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n                 DiffableUtils.StringSetValueSerializer.getInstance());\n             rolloverInfos = DiffableUtils.readImmutableOpenMapDiff(in, DiffableUtils.getStringKeySerializer(), RolloverInfo::new,\n                 RolloverInfo::readDiffFrom);\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwMDk0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463300946", "bodyText": "Nit: Could we make this a constant, like the other field keys here?", "author": "gwbrown", "createdAt": "2020-07-30T22:13:53Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java", "diffHunk": "@@ -1337,6 +1378,7 @@ public static void toXContent(IndexMetadata indexMetadata, XContentBuilder build\n                 cursor.value.toXContent(builder, params);\n             }\n             builder.endObject();\n+            builder.field(\"system\", indexMetadata.isSystem);", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwMjg0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463302849", "bodyText": "It looks like this version of this method is just used in a single test, so I think we should delete this version of this method and just add the extra false to the call in testBuildIndexMetadata()", "author": "gwbrown", "createdAt": "2020-07-30T22:18:52Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -773,7 +777,14 @@ static ClusterState clusterStateCreateIndex(ClusterState currentState, Set<Clust\n     static IndexMetadata buildIndexMetadata(String indexName, List<AliasMetadata> aliases,\n                                             Supplier<DocumentMapper> documentMapperSupplier, Settings indexSettings, int routingNumShards,\n                                             @Nullable IndexMetadata sourceMetadata) {\n+        return buildIndexMetadata(indexName, aliases, documentMapperSupplier, indexSettings, routingNumShards, sourceMetadata, false);\n+    }\n+", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNTUwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463305505", "bodyText": "Could we add some Javadoc here? I like to have at least a summary on new classes. Something like:\nThis class contains the {@link SystemIndexDescriptor}s from loaded {@link SystemIndexPlugin}s, and is responsible for determining which descriptors match a given index name.", "author": "gwbrown", "createdAt": "2020-07-30T22:25:45Z", "path": "server/src/main/java/org/elasticsearch/indices/SystemIndices.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.toUnmodifiableList;\n+\n+public class SystemIndices {", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNTgwNw==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463305807", "bodyText": "Javadoc:\nDetermines whether a given index is a system index by comparing its name to the collection of loaded SystemIndexDescriptors.\n\nI think this one is good to call out, as most other places this is determined do it by inspecting a property of the index.", "author": "gwbrown", "createdAt": "2020-07-30T22:26:44Z", "path": "server/src/main/java/org/elasticsearch/indices/SystemIndices.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.toUnmodifiableList;\n+\n+public class SystemIndices {\n+\n+    private final CharacterRunAutomaton runAutomaton;\n+    private final Collection<SystemIndexDescriptor> systemIndexDescriptors;\n+\n+    public SystemIndices(Map<String, Collection<SystemIndexDescriptor>> systemIndexDescriptorMap) {\n+        this.systemIndexDescriptors = systemIndexDescriptorMap.values()\n+            .stream()\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toUnmodifiableList());\n+        this.runAutomaton = buildCharacterRunAutomaton(systemIndexDescriptors);\n+    }\n+\n+    public boolean isSystemIndex(Index index) {", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNjg1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463306851", "bodyText": "Do you think it might be worth moving the logic (currently in MetadataCreateIndexService) that verifies 0-1 matching descriptors here?", "author": "gwbrown", "createdAt": "2020-07-30T22:29:31Z", "path": "server/src/main/java/org/elasticsearch/indices/SystemIndices.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.toUnmodifiableList;\n+\n+public class SystemIndices {\n+\n+    private final CharacterRunAutomaton runAutomaton;\n+    private final Collection<SystemIndexDescriptor> systemIndexDescriptors;\n+\n+    public SystemIndices(Map<String, Collection<SystemIndexDescriptor>> systemIndexDescriptorMap) {\n+        this.systemIndexDescriptors = systemIndexDescriptorMap.values()\n+            .stream()\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toUnmodifiableList());\n+        this.runAutomaton = buildCharacterRunAutomaton(systemIndexDescriptors);\n+    }\n+\n+    public boolean isSystemIndex(Index index) {\n+        return runAutomaton.run(index.getName());\n+    }\n+\n+    public Collection<SystemIndexDescriptor> findMatchingDescriptors(String name) {\n+        return systemIndexDescriptors.stream()\n+            .filter(descriptor -> descriptor.matchesIndexPattern(name))\n+            .collect(toUnmodifiableList());\n+    }", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODY1MA==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r463308650", "bodyText": "This call to checkForOverlappingPatterns got dropped in the change - did you mean to move it into the SystemIndices constructor?", "author": "gwbrown", "createdAt": "2020-07-30T22:32:47Z", "path": "server/src/main/java/org/elasticsearch/node/Node.java", "diffHunk": "@@ -467,18 +468,13 @@ protected Node(final Environment initialEnvironment,\n                 .collect(Collectors.toUnmodifiableMap(\n                     plugin -> plugin.getClass().getSimpleName(),\n                     plugin -> plugin.getSystemIndexDescriptors(settings)));\n-            SystemIndexDescriptor.checkForOverlappingPatterns(systemIndexDescriptorMap);", "originalCommit": "cffb69de2b255e28d4ce3953765fb28a8c2b7edd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e90f60040efaac8595153be586b8e190d28fd894", "url": "https://github.com/elastic/elasticsearch/commit/e90f60040efaac8595153be586b8e190d28fd894", "message": "remove system indices from indices service", "committedDate": "2020-08-03T14:59:13Z", "type": "commit"}, {"oid": "df944c46727ec5a4126206ae6dd8b10ebd12d91f", "url": "https://github.com/elastic/elasticsearch/commit/df944c46727ec5a4126206ae6dd8b10ebd12d91f", "message": "index metadata version added", "committedDate": "2020-08-03T15:13:17Z", "type": "commit"}, {"oid": "ffb9026099e757898396eb6eed49ba40bb211860", "url": "https://github.com/elastic/elasticsearch/commit/ffb9026099e757898396eb6eed49ba40bb211860", "message": "add KEY_SYSTEM", "committedDate": "2020-08-03T15:16:22Z", "type": "commit"}, {"oid": "0152c127613de972b4f7de3707fbbf51f90d982f", "url": "https://github.com/elastic/elasticsearch/commit/0152c127613de972b4f7de3707fbbf51f90d982f", "message": "remove method only used in test", "committedDate": "2020-08-03T15:18:42Z", "type": "commit"}, {"oid": "36c67a797428b5c62e11a0a8157dfcf3dd142e78", "url": "https://github.com/elastic/elasticsearch/commit/36c67a797428b5c62e11a0a8157dfcf3dd142e78", "message": "SystemIndices updates", "committedDate": "2020-08-03T15:42:51Z", "type": "commit"}, {"oid": "c493d52a086aa34897ac9a930466bf45d73d79aa", "url": "https://github.com/elastic/elasticsearch/commit/c493d52a086aa34897ac9a930466bf45d73d79aa", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-03T15:43:23Z", "type": "commit"}, {"oid": "79617573c7d6690366c9da732eab506036ba0af8", "url": "https://github.com/elastic/elasticsearch/commit/79617573c7d6690366c9da732eab506036ba0af8", "message": "threadpool docs", "committedDate": "2020-08-03T15:51:40Z", "type": "commit"}, {"oid": "d882e45a29b1471e32556ac5121e4f3638e660dc", "url": "https://github.com/elastic/elasticsearch/commit/d882e45a29b1471e32556ac5121e4f3638e660dc", "message": "cleanup transportsearchaction", "committedDate": "2020-08-03T15:58:24Z", "type": "commit"}, {"oid": "25bf51a542cefddfba20ba1a7c3a59373aca7ffd", "url": "https://github.com/elastic/elasticsearch/commit/25bf51a542cefddfba20ba1a7c3a59373aca7ffd", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-03T21:18:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NTkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r464695905", "bodyText": "This if/else, as currently written, will cause hidden indices to be marked as system indices. When a hidden index is created, matchingDescriptor is null and isHidden is true, which does not match the if clause, and so falls triggers the else, which marks the index as a system index.\nChanging this to the following fixes the issue:\n        if (index.charAt(0) == '.') {\n            SystemIndexDescriptor matchingDescriptor = systemIndices.findMatchingDescriptor(index);\n            if (matchingDescriptor != null) {\n                logger.trace(\"index [{}] is a system index because it matches index pattern [{}] with description [{}]\",\n                    index, matchingDescriptor.getIndexPattern(), matchingDescriptor.getDescription());\n                isSystem = true;\n            } else if (isHidden) {\n                logger.trace(\"index [{}] is a hidden index\", index);\n            } else {\n                deprecationLogger.deprecate(\"index_name_starts_with_dot\",\n                    \"index name [{}] starts with a dot '.', in the next major version, index names \" +\n                        \"starting with a dot are reserved for hidden indices and system indices\", index);\n            }\n        }\nAdding asserts to check the boolean returned by this method in testValidateDotIndex catches the issue as well.\nIt might be a good idea to throw an exception or at least emit a warning if (isHidden && isSystem) as well.", "author": "gwbrown", "createdAt": "2020-08-03T22:31:02Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -180,32 +180,21 @@ public void validateIndexName(String index, ClusterState state) {\n     /**\n      * Validates (if this index has a dot-prefixed name) whether it follows the rules for dot-prefixed indices.\n      * @param index The name of the index in question\n-     * @param state The current cluster state\n      * @param isHidden Whether or not this is a hidden index\n      */\n-    public void validateDotIndex(String index, ClusterState state, @Nullable Boolean isHidden) {\n+    public boolean validateDotIndex(String index, @Nullable Boolean isHidden) {\n+        boolean isSystem = false;\n         if (index.charAt(0) == '.') {\n-            List<SystemIndexDescriptor> matchingDescriptors = systemIndexDescriptors.stream()\n-                .filter(descriptor -> descriptor.matchesIndexPattern(index))\n-                .collect(toList());\n-            if (matchingDescriptors.isEmpty() && (isHidden == null || isHidden == Boolean.FALSE)) {\n+            SystemIndexDescriptor matchingDescriptor = systemIndices.findMatchingDescriptor(index);\n+            if (matchingDescriptor == null && (isHidden == null || isHidden == Boolean.FALSE)) {\n                 deprecationLogger.deprecate(\"index_name_starts_with_dot\",\n                     \"index name [{}] starts with a dot '.', in the next major version, index names \" +\n                     \"starting with a dot are reserved for hidden indices and system indices\", index);\n-            } else if (matchingDescriptors.size() > 1) {\n-                // This should be prevented by erroring on overlapping patterns at startup time, but is here just in case.\n-                StringBuilder errorMessage = new StringBuilder()\n-                    .append(\"index name [\")\n-                    .append(index)\n-                    .append(\"] is claimed as a system index by multiple system index patterns: [\")\n-                    .append(matchingDescriptors.stream()\n-                        .map(descriptor -> \"pattern: [\" + descriptor.getIndexPattern() +\n-                            \"], description: [\" + descriptor.getDescription() + \"]\").collect(Collectors.joining(\"; \")));\n-                // Throw AssertionError if assertions are enabled, or a regular exception otherwise:\n-                assert false : errorMessage.toString();\n-                throw new IllegalStateException(errorMessage.toString());\n+            } else {\n+                isSystem = true;\n             }\n         }", "originalCommit": "d882e45a29b1471e32556ac5121e4f3638e660dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5ODEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57936#discussion_r464698131", "bodyText": "Here is a commit with the fix + test adjustments if you want to cherry-pick that.", "author": "gwbrown", "createdAt": "2020-08-03T22:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NTkwNQ=="}], "type": "inlineReview"}, {"oid": "9e43dcbaf9bc693b332c9b86274640fdc5983d53", "url": "https://github.com/elastic/elasticsearch/commit/9e43dcbaf9bc693b332c9b86274640fdc5983d53", "message": "test and fixes for existing system indices", "committedDate": "2020-08-04T19:07:24Z", "type": "commit"}, {"oid": "3924e8857c436177156854ec4790e0f3e0915b51", "url": "https://github.com/elastic/elasticsearch/commit/3924e8857c436177156854ec4790e0f3e0915b51", "message": "add full cluster restart test", "committedDate": "2020-08-04T19:28:32Z", "type": "commit"}, {"oid": "50593560a773b9d0d0173145b2d8486867c01632", "url": "https://github.com/elastic/elasticsearch/commit/50593560a773b9d0d0173145b2d8486867c01632", "message": "Fix validateDotIndex issue", "committedDate": "2020-08-04T19:28:48Z", "type": "commit"}, {"oid": "7306f79fa998d9bc951b03f9ccc06e6ccd37fc9d", "url": "https://github.com/elastic/elasticsearch/commit/7306f79fa998d9bc951b03f9ccc06e6ccd37fc9d", "message": "Merge remote-tracking branch 'origin/master' into system_index_threadpool", "committedDate": "2020-08-04T19:29:23Z", "type": "commit"}, {"oid": "82edb620c9777880082f7e260484d17a94af7ccd", "url": "https://github.com/elastic/elasticsearch/commit/82edb620c9777880082f7e260484d17a94af7ccd", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-05T14:26:30Z", "type": "commit"}, {"oid": "8e02d7ec62e38d34f58b50796054bf48de4a5dfc", "url": "https://github.com/elastic/elasticsearch/commit/8e02d7ec62e38d34f58b50796054bf48de4a5dfc", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-05T15:31:00Z", "type": "commit"}, {"oid": "8d7db452cf2cf0e7c0cd45efb82100ed73b6757f", "url": "https://github.com/elastic/elasticsearch/commit/8d7db452cf2cf0e7c0cd45efb82100ed73b6757f", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-05T18:09:28Z", "type": "commit"}, {"oid": "d8bac675467c557a1d9809eb11191e1f796e24b8", "url": "https://github.com/elastic/elasticsearch/commit/d8bac675467c557a1d9809eb11191e1f796e24b8", "message": "Merge branch 'master' into system_index_threadpool", "committedDate": "2020-08-10T15:16:12Z", "type": "commit"}, {"oid": "7ef470f2efc6e14263e9ca61d48506446c3e3927", "url": "https://github.com/elastic/elasticsearch/commit/7ef470f2efc6e14263e9ca61d48506446c3e3927", "message": "disable bwc tests", "committedDate": "2020-08-10T17:21:19Z", "type": "commit"}]}