{"pr_number": 58521, "pr_title": "Merge mappings for composable index templates", "pr_createdAt": "2020-06-25T00:04:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58521", "timeline": [{"oid": "5fa0b7d09a6d91db7677103bbe843b350f0b1fb6", "url": "https://github.com/elastic/elasticsearch/commit/5fa0b7d09a6d91db7677103bbe843b350f0b1fb6", "message": "Pass merge reason to Mapping#merge.", "committedDate": "2020-06-24T21:07:14Z", "type": "commit"}, {"oid": "6f5e142d8838c7d9b461f78b7a51e58e101922ec", "url": "https://github.com/elastic/elasticsearch/commit/6f5e142d8838c7d9b461f78b7a51e58e101922ec", "message": "Use new merge strategy for composable templates.", "committedDate": "2020-06-25T01:19:44Z", "type": "forcePushed"}, {"oid": "2e7db9124fb2bc60f30bebffd3b355d68b84d831", "url": "https://github.com/elastic/elasticsearch/commit/2e7db9124fb2bc60f30bebffd3b355d68b84d831", "message": "Add an 'index template' merge reason.", "committedDate": "2020-06-25T01:37:00Z", "type": "commit"}, {"oid": "35a6856bd53fea198d0adb99e61f70923a0efaa7", "url": "https://github.com/elastic/elasticsearch/commit/35a6856bd53fea198d0adb99e61f70923a0efaa7", "message": "Add template merging logic for root-level mapper.\n\nThe differences from standard mapping merge:\n* For metadata fields like _source, the whole field definition is replaced\n  instead of merged.\n* Dynamic templates are appended to the end of the existing list. Any duplicate\n  definitions overwrite existing ones.\n* The _meta object is deep-merged, so any existing keys are replaced.", "committedDate": "2020-06-25T01:37:04Z", "type": "commit"}, {"oid": "f44a5f948fbbd1030ae2aab1a7365c0674dc68ab", "url": "https://github.com/elastic/elasticsearch/commit/f44a5f948fbbd1030ae2aab1a7365c0674dc68ab", "message": "Replace leaf fields when merging objects.", "committedDate": "2020-06-25T02:47:44Z", "type": "commit"}, {"oid": "25ed9aa59956fe2065fbde3e3ca66c1410901540", "url": "https://github.com/elastic/elasticsearch/commit/25ed9aa59956fe2065fbde3e3ca66c1410901540", "message": "Overwrite enabled, include_in_parent, include_in_root.", "committedDate": "2020-06-25T02:48:07Z", "type": "commit"}, {"oid": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "url": "https://github.com/elastic/elasticsearch/commit/5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "message": "Use new merge strategy for composable templates.", "committedDate": "2020-06-25T03:05:17Z", "type": "commit"}, {"oid": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "url": "https://github.com/elastic/elasticsearch/commit/5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "message": "Use new merge strategy for composable templates.", "committedDate": "2020-06-25T03:05:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNzkwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445737901", "bodyText": "The fact that we fix redundant includes makes merging these options more tricky. Previously, mapping merges couldn't make any changes to the include_in_root or include_in_parent values. Now they can overwrite existing values, so we could have the following situation:\n\nA new mapper changes include_in_root and include_in_parent to true for some nested object.\nAfter merging it into the existing one, say the merged mapper now has redundant includes.\nWe never detect and fix the redundancy because we only call fixRedundantIncludes when building a mapper, not after merging mappers.\n\nI'm wondering if there's a lightweight way to fix this, or some way we can simplify?", "author": "jtibshirani", "createdAt": "2020-06-25T17:57:17Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -107,15 +109,15 @@ private static void fixRedundantIncludes(ObjectMapper.Builder omb, boolean paren\n                     boolean includeInRootViaParent = parentIncluded && isNested && nested.isIncludeInParent();\n                     boolean includedInRoot = isNested && nested.isIncludeInRoot();\n                     if (includeInRootViaParent && includedInRoot) {\n-                        child.nested = Nested.newNested(true, false);\n+                        child.nested = Nested.newNested(new Explicit<>(true, true), new Explicit<>(false, true));", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MzYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r446143639", "bodyText": "Slightly related but we were reluctant to deprecate/remove these options because Kibana doesn't support nested fields. This is something that was stalled for some time but I think we should revisit #12461 now that nested fields are supported in Kibana. I'll comment on the issue but I wanted to mention here since it changes the perspective a bit.\n\nI'm wondering if there's a lightweight way to fix this, or some way we can simplify?\n\nIs there a reason not to call fixRedundantIncludes after merging mappers ? That seems like the easiest solution ?", "author": "jimczi", "createdAt": "2020-06-26T12:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0OTg1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r446349857", "bodyText": "So fixRedundantIncludes currently works on mapper builders, not mappers themselves. I'll see if I can change this and maybe only call the method once post-mapping merge.", "author": "jtibshirani", "createdAt": "2020-06-26T18:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445806160", "bodyText": "I think this docstring is incorrect now", "author": "dakrone", "createdAt": "2020-06-25T20:02:15Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -247,12 +246,8 @@ public TimestampField(StreamInput in) throws IOException {\n          * Force fully inserts the timestamp field mapping into the provided mapping.\n          * Existing mapping definitions for the timestamp field will be completely overwritten.\n          * Takes into account if the name of the timestamp field is nested.", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445806301", "bodyText": "It's a bit strange to call this \"changes\" since we're retrieving the mapping for a single field in this method?", "author": "dakrone", "createdAt": "2020-06-25T20:02:34Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -265,7 +260,7 @@ public void insertTimestampFieldMapping(Map<String, Object> mappings) {\n                 current = map;\n             }\n             current.put(leafFieldName, fieldMapping);\n-            XContentHelper.update(mappings, changes, false);\n+            return changes;", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwODcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445808702", "bodyText": "I think I'd rather keep this guard than throw a null pointer exception a couple of lines down, is there a reason you removed it?", "author": "dakrone", "createdAt": "2020-06-25T20:07:28Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -871,15 +871,12 @@ public static String findV2Template(Metadata metadata, String indexName, boolean\n     }\n \n     /**\n-     * Resolve the given v2 template into an ordered list of mappings\n+     * Collect the given v2 template into an ordered list of mappings.\n      */\n-    public static List<CompressedXContent> resolveMappings(final ClusterState state, final String templateName) {\n+    public static List<CompressedXContent> collectMappings(final ClusterState state, final String templateName) {\n         final ComposableIndexTemplate template = state.metadata().templatesV2().get(templateName);\n         assert template != null : \"attempted to resolve mappings for a template [\" + templateName +\n             \"] that did not exist in the cluster state\";\n-        if (template == null) {\n-            return List.of();\n-        }", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwOTM2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445809369", "bodyText": "or at the least, convert this to a real exception rather than an NPE if you want to get rid of it", "author": "dakrone", "createdAt": "2020-06-25T20:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwODcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyODYxNA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445828614", "bodyText": "We assert right above that template != null, so I thought it'd be safe to simplify this.", "author": "jtibshirani", "createdAt": "2020-06-25T20:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwODcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMjc0MA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445832740", "bodyText": "I think even with the assertion I'd rather have a helpful message for production clusters than a NullPointerException (since assertions are off by default except in tests)", "author": "dakrone", "createdAt": "2020-06-25T20:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwODcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzOTk0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445839945", "bodyText": "I'll just revert this, I don't feel strongly about it!", "author": "jtibshirani", "createdAt": "2020-06-25T21:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwODcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445810504", "bodyText": "I think this block can be folded into the same check a few lines above rather than having two blocks using the same if statement", "author": "dakrone", "createdAt": "2020-06-25T20:11:02Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -372,24 +376,22 @@ private synchronized DocumentMapper internalMerge(DocumentMapper mapper, MergeRe\n \n         ContextMapping.validateContextPaths(indexSettings.getIndexVersionCreated(), fieldMappers, newFieldTypes::get);\n \n-        if (reason == MergeReason.MAPPING_UPDATE || reason == MergeReason.MAPPING_UPDATE_PREFLIGHT) {\n-            // this check will only be performed on the master node when there is\n-            // a call to the update mapping API. For all other cases like\n-            // the master node restoring mappings from disk or data nodes\n-            // deserializing cluster state that was sent by the master node,\n-            // this check will be skipped.\n+        if (reason != MergeReason.MAPPING_RECOVERY) {\n+            // this check will only be performed on the master node when an index is created, or\n+            // there is a call to the update mapping API. For all other cases like the master node\n+            // restoring mappings from disk or data nodes deserializing cluster state that was sent\n+            // by the master node, this check will be skipped.\n             // Also, don't take metadata mappers into account for the field limit check\n             checkTotalFieldsLimit(objectMappers.size() + fieldMappers.size() - metadataMappers.length\n                 + fieldAliasMappers.size() );\n             checkFieldNameSoftLimit(objectMappers, fieldMappers, fieldAliasMappers);\n         }\n \n-        if (reason == MergeReason.MAPPING_UPDATE || reason == MergeReason.MAPPING_UPDATE_PREFLIGHT) {\n-            // this check will only be performed on the master node when there is\n-            // a call to the update mapping API. For all other cases like\n-            // the master node restoring mappings from disk or data nodes\n-            // deserializing cluster state that was sent by the master node,\n-            // this check will be skipped.\n+        if (reason != MergeReason.MAPPING_RECOVERY) {", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMTIyNg==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445811226", "bodyText": "Super minor nit, but most of our error messages are all lowercase and without ending punctuation and I think that's the precedent we want to stick with (applies to the errors below also)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalArgumentException(\"Cannot change object mapping from nested to non-nested.\");\n          \n          \n            \n                                throw new IllegalArgumentException(\"cannot change object mapping from nested to non-nested\");", "author": "dakrone", "createdAt": "2020-06-25T20:12:32Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -62,41 +64,71 @@\n \n     public static class Nested {\n \n-        public static final Nested NO = new Nested(false, false, false);\n+        public static final Nested NO = new Nested(false, new Explicit<>(false, false), new Explicit<>(false, false));\n \n-        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {\n+        public static Nested newNested() {\n+            return new Nested(true, new Explicit<>(false, false), new Explicit<>(false, false));\n+        }\n+\n+        public static Nested newNested(Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             return new Nested(true, includeInParent, includeInRoot);\n         }\n \n         private final boolean nested;\n+        private Explicit<Boolean> includeInParent;\n+        private Explicit<Boolean> includeInRoot;\n \n-        private final boolean includeInParent;\n-\n-        private final boolean includeInRoot;\n-\n-        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {\n+        private Nested(boolean nested, Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             this.nested = nested;\n             this.includeInParent = includeInParent;\n             this.includeInRoot = includeInRoot;\n         }\n \n+        public void merge(Nested mergeWith, MergeReason reason) {\n+            if (isNested()) {\n+                if (!mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from nested to non-nested.\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTc0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445829741", "bodyText": "Oops, I have been adding inconsistent error messages for quite some time now!", "author": "jtibshirani", "createdAt": "2020-06-25T20:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMTIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMTgyNw==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445811827", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalArgumentException(\"Cannot change object mapping from non-nested to nested.\");\n          \n          \n            \n                                throw new IllegalArgumentException(\"cannot change object mapping from non-nested to nested\");", "author": "dakrone", "createdAt": "2020-06-25T20:13:45Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -62,41 +64,71 @@\n \n     public static class Nested {\n \n-        public static final Nested NO = new Nested(false, false, false);\n+        public static final Nested NO = new Nested(false, new Explicit<>(false, false), new Explicit<>(false, false));\n \n-        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {\n+        public static Nested newNested() {\n+            return new Nested(true, new Explicit<>(false, false), new Explicit<>(false, false));\n+        }\n+\n+        public static Nested newNested(Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             return new Nested(true, includeInParent, includeInRoot);\n         }\n \n         private final boolean nested;\n+        private Explicit<Boolean> includeInParent;\n+        private Explicit<Boolean> includeInRoot;\n \n-        private final boolean includeInParent;\n-\n-        private final boolean includeInRoot;\n-\n-        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {\n+        private Nested(boolean nested, Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             this.nested = nested;\n             this.includeInParent = includeInParent;\n             this.includeInRoot = includeInRoot;\n         }\n \n+        public void merge(Nested mergeWith, MergeReason reason) {\n+            if (isNested()) {\n+                if (!mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from nested to non-nested.\");\n+                }\n+            } else {\n+                if (mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from non-nested to nested.\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMTk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445811956", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new MapperException(\"The [include_in_parent] parameter can't be updated on a nested object mapping.\");\n          \n          \n            \n                                throw new MapperException(\"the [include_in_parent] parameter can't be updated on a nested object mapping\");", "author": "dakrone", "createdAt": "2020-06-25T20:14:00Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -62,41 +64,71 @@\n \n     public static class Nested {\n \n-        public static final Nested NO = new Nested(false, false, false);\n+        public static final Nested NO = new Nested(false, new Explicit<>(false, false), new Explicit<>(false, false));\n \n-        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {\n+        public static Nested newNested() {\n+            return new Nested(true, new Explicit<>(false, false), new Explicit<>(false, false));\n+        }\n+\n+        public static Nested newNested(Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             return new Nested(true, includeInParent, includeInRoot);\n         }\n \n         private final boolean nested;\n+        private Explicit<Boolean> includeInParent;\n+        private Explicit<Boolean> includeInRoot;\n \n-        private final boolean includeInParent;\n-\n-        private final boolean includeInRoot;\n-\n-        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {\n+        private Nested(boolean nested, Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             this.nested = nested;\n             this.includeInParent = includeInParent;\n             this.includeInRoot = includeInRoot;\n         }\n \n+        public void merge(Nested mergeWith, MergeReason reason) {\n+            if (isNested()) {\n+                if (!mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from nested to non-nested.\");\n+                }\n+            } else {\n+                if (mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from non-nested to nested.\");\n+                }\n+            }\n+\n+            if (reason == MergeReason.INDEX_TEMPLATE) {\n+                if (mergeWith.includeInParent.explicit()) {\n+                    includeInParent = mergeWith.includeInParent;\n+                }\n+                if (mergeWith.includeInRoot.explicit()) {\n+                    includeInRoot = mergeWith.includeInRoot;\n+                }\n+            } else {\n+                if (includeInParent.value() != mergeWith.includeInParent.value()) {\n+                    throw new MapperException(\"The [include_in_parent] parameter can't be updated on a nested object mapping.\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMjA1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445812059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new MapperException(\"The [include_in_root] parameter can't be updated on a nested object mapping.\");\n          \n          \n            \n                                throw new MapperException(\"the [include_in_root] parameter can't be updated on a nested object mapping\");", "author": "dakrone", "createdAt": "2020-06-25T20:14:13Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -62,41 +64,71 @@\n \n     public static class Nested {\n \n-        public static final Nested NO = new Nested(false, false, false);\n+        public static final Nested NO = new Nested(false, new Explicit<>(false, false), new Explicit<>(false, false));\n \n-        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {\n+        public static Nested newNested() {\n+            return new Nested(true, new Explicit<>(false, false), new Explicit<>(false, false));\n+        }\n+\n+        public static Nested newNested(Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             return new Nested(true, includeInParent, includeInRoot);\n         }\n \n         private final boolean nested;\n+        private Explicit<Boolean> includeInParent;\n+        private Explicit<Boolean> includeInRoot;\n \n-        private final boolean includeInParent;\n-\n-        private final boolean includeInRoot;\n-\n-        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {\n+        private Nested(boolean nested, Explicit<Boolean> includeInParent, Explicit<Boolean> includeInRoot) {\n             this.nested = nested;\n             this.includeInParent = includeInParent;\n             this.includeInRoot = includeInRoot;\n         }\n \n+        public void merge(Nested mergeWith, MergeReason reason) {\n+            if (isNested()) {\n+                if (!mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from nested to non-nested.\");\n+                }\n+            } else {\n+                if (mergeWith.isNested()) {\n+                    throw new IllegalArgumentException(\"Cannot change object mapping from non-nested to nested.\");\n+                }\n+            }\n+\n+            if (reason == MergeReason.INDEX_TEMPLATE) {\n+                if (mergeWith.includeInParent.explicit()) {\n+                    includeInParent = mergeWith.includeInParent;\n+                }\n+                if (mergeWith.includeInRoot.explicit()) {\n+                    includeInRoot = mergeWith.includeInRoot;\n+                }\n+            } else {\n+                if (includeInParent.value() != mergeWith.includeInParent.value()) {\n+                    throw new MapperException(\"The [include_in_parent] parameter can't be updated on a nested object mapping.\");\n+                }\n+                if (includeInRoot.value() != mergeWith.includeInRoot.value()) {\n+                    throw new MapperException(\"The [include_in_root] parameter can't be updated on a nested object mapping.\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMjgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445812820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");", "author": "dakrone", "createdAt": "2020-06-25T20:15:45Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -440,64 +474,62 @@ public boolean parentObjectMapperAreNested(MapperService mapperService) {\n \n     @Override\n     public ObjectMapper merge(Mapper mergeWith) {\n+        return merge(mergeWith, MergeReason.MAPPING_UPDATE);\n+    }\n+\n+    public ObjectMapper merge(Mapper mergeWith, MergeReason reason) {\n         if (!(mergeWith instanceof ObjectMapper)) {\n-            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name()\n-                + \"] with an object mapping [\" + name() + \"]\");\n+            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMjkzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445812935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new MapperException(\"The [enabled] parameter can't be updated for the object mapping [\" + name() + \"].\");\n          \n          \n            \n                        throw new MapperException(\"the [enabled] parameter can't be updated for the object mapping [\" + name() + \"]\");", "author": "dakrone", "createdAt": "2020-06-25T20:16:03Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -440,64 +474,62 @@ public boolean parentObjectMapperAreNested(MapperService mapperService) {\n \n     @Override\n     public ObjectMapper merge(Mapper mergeWith) {\n+        return merge(mergeWith, MergeReason.MAPPING_UPDATE);\n+    }\n+\n+    public ObjectMapper merge(Mapper mergeWith, MergeReason reason) {\n         if (!(mergeWith instanceof ObjectMapper)) {\n-            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name()\n-                + \"] with an object mapping [\" + name() + \"]\");\n+            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");\n         }\n         ObjectMapper mergeWithObject = (ObjectMapper) mergeWith;\n         ObjectMapper merged = clone();\n-        merged.doMerge(mergeWithObject);\n+        merged.doMerge(mergeWithObject, reason);\n         return merged;\n     }\n \n-    protected void doMerge(final ObjectMapper mergeWith) {\n-        if (nested().isNested()) {\n-            if (!mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from nested to non-nested\");\n-            }\n-        } else {\n-            if (mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from non-nested to nested\");\n-            }\n-        }\n+    protected void doMerge(final ObjectMapper mergeWith, MergeReason reason) {\n+        nested().merge(mergeWith.nested(), reason);\n \n         if (mergeWith.dynamic != null) {\n             this.dynamic = mergeWith.dynamic;\n         }\n \n-        checkObjectMapperParameters(mergeWith);\n+        if (reason == MergeReason.INDEX_TEMPLATE) {\n+            if (mergeWith.enabled.explicit()) {\n+                this.enabled = mergeWith.enabled;\n+            }\n+        } else if (isEnabled() != mergeWith.isEnabled()) {\n+            throw new MapperException(\"The [enabled] parameter can't be updated for the object mapping [\" + name() + \"].\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMzEwMA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445813100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalArgumentException(\"Can't merge a non object mapping [\" +\n          \n          \n            \n                                    mergeWithMapper.name() + \"] with an object mapping\");\n          \n          \n            \n                                throw new IllegalArgumentException(\"can't merge a non object mapping [\" +\n          \n          \n            \n                                    mergeWithMapper.name() + \"] with an object mapping\");", "author": "dakrone", "createdAt": "2020-06-25T20:16:23Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -440,64 +474,62 @@ public boolean parentObjectMapperAreNested(MapperService mapperService) {\n \n     @Override\n     public ObjectMapper merge(Mapper mergeWith) {\n+        return merge(mergeWith, MergeReason.MAPPING_UPDATE);\n+    }\n+\n+    public ObjectMapper merge(Mapper mergeWith, MergeReason reason) {\n         if (!(mergeWith instanceof ObjectMapper)) {\n-            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name()\n-                + \"] with an object mapping [\" + name() + \"]\");\n+            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");\n         }\n         ObjectMapper mergeWithObject = (ObjectMapper) mergeWith;\n         ObjectMapper merged = clone();\n-        merged.doMerge(mergeWithObject);\n+        merged.doMerge(mergeWithObject, reason);\n         return merged;\n     }\n \n-    protected void doMerge(final ObjectMapper mergeWith) {\n-        if (nested().isNested()) {\n-            if (!mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from nested to non-nested\");\n-            }\n-        } else {\n-            if (mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from non-nested to nested\");\n-            }\n-        }\n+    protected void doMerge(final ObjectMapper mergeWith, MergeReason reason) {\n+        nested().merge(mergeWith.nested(), reason);\n \n         if (mergeWith.dynamic != null) {\n             this.dynamic = mergeWith.dynamic;\n         }\n \n-        checkObjectMapperParameters(mergeWith);\n+        if (reason == MergeReason.INDEX_TEMPLATE) {\n+            if (mergeWith.enabled.explicit()) {\n+                this.enabled = mergeWith.enabled;\n+            }\n+        } else if (isEnabled() != mergeWith.isEnabled()) {\n+            throw new MapperException(\"The [enabled] parameter can't be updated for the object mapping [\" + name() + \"].\");\n+        }\n \n         for (Mapper mergeWithMapper : mergeWith) {\n             Mapper mergeIntoMapper = mappers.get(mergeWithMapper.simpleName());\n \n             Mapper merged;\n             if (mergeIntoMapper == null) {\n-                // no mapping, simply add it\n                 merged = mergeWithMapper;\n+            } else if (mergeIntoMapper instanceof ObjectMapper) {\n+                ObjectMapper objectMapper = (ObjectMapper) mergeIntoMapper;\n+                merged = objectMapper.merge(mergeWithMapper, reason);\n             } else {\n-                // root mappers can only exist here for backcompat, and are merged in Mapping\n-                merged = mergeIntoMapper.merge(mergeWithMapper);\n+                assert mergeIntoMapper instanceof FieldMapper || mergeIntoMapper instanceof FieldAliasMapper;\n+                if (mergeWithMapper instanceof ObjectMapper) {\n+                    throw new IllegalArgumentException(\"Can't merge a non object mapping [\" +\n+                        mergeWithMapper.name() + \"] with an object mapping\");", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445815339", "bodyText": "Yikes that we are doing regex matches on exception messages here :( it feels like there should be a better way, but totally out of scope for this PR", "author": "dakrone", "createdAt": "2020-06-25T20:20:45Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java", "diffHunk": "@@ -275,8 +275,8 @@ public void onResponse(Boolean mappingsUpdated) {\n             public void onFailure(Exception e) {\n                 if (ExceptionsHelper.unwrapCause(e) instanceof IllegalArgumentException) {\n                     // the underlying error differs depending on which way around the clashing fields are seen\n-                    Matcher matcher = Pattern.compile(\"(?:mapper|Can't merge a non object mapping) \\\\[(.*)\\\\] (?:cannot be changed \" +\n-                            \"from type \\\\[.*\\\\] to|with an object mapping) \\\\[.*\\\\]\").matcher(e.getMessage());\n+                    Matcher matcher = Pattern.compile(\"Can't merge a non object mapping \\\\[(.*)\\\\] with an object mapping\")\n+                        .matcher(e.getMessage());", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDAwMA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r445830000", "bodyText": "+1, this was painful to track down and fix.", "author": "jtibshirani", "createdAt": "2020-06-25T20:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r446240524", "bodyText": "After chatting with the core-features team, I now realize that we should apply request.mappings() after this datastream mapping. I'll fix this.", "author": "jtibshirani", "createdAt": "2020-06-26T15:05:15Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -491,12 +488,12 @@ private ClusterState applyCreateIndexRequestWithV2Template(final ClusterState cu\n                                                                                     throws Exception {\n         logger.debug(\"applying create index request using composable template [{}]\", templateName);\n \n-        final Map<String, Object> mappings = resolveV2Mappings(request.mappings(), currentState, templateName, xContentRegistry);\n+        final List<Map<String, Object>> mappings = collectV2Mappings(request.mappings(), currentState, templateName, xContentRegistry);\n \n         if (request.dataStreamName() != null) {\n             DataStream dataStream = currentState.metadata().dataStreams().get(request.dataStreamName());\n             if (dataStream != null) {\n-                dataStream.getTimeStampField().insertTimestampFieldMapping(mappings);\n+                mappings.add(dataStream.getTimeStampField().getTimestampFieldMapping());", "originalCommit": "5a379032f7451a2b9fb389c2d8bc43c645ecbc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTQ0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r446335449", "bodyText": "Actually @dakrone is that right? If we applied request.mappings() after the datastream timestamp mapping, it could result in an index with an inconsistent timestamp mapping. So perhaps we always need to apply the datastream timestamp mapping last.", "author": "jtibshirani", "createdAt": "2020-06-26T18:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyNjkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r446426936", "bodyText": "I think the request.mappings() part last, but we need to validate that the composite mappings are valid for a data stream, that way a user could override part of the mappings (say for instance a custom format for the date), but couldn't do anything bad (like change it to a keyword for instance)", "author": "dakrone", "createdAt": "2020-06-26T21:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNzk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447217994", "bodyText": "I'm going to keep it as-is for this PR, since it just tries to replicate the existing behavior. We can discuss in a follow-up if we want to change the order.", "author": "jtibshirani", "createdAt": "2020-06-29T19:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUyNA=="}], "type": "inlineReview"}, {"oid": "2af0fb3dbe3a02d707bd082fe000de774962a479", "url": "https://github.com/elastic/elasticsearch/commit/2af0fb3dbe3a02d707bd082fe000de774962a479", "message": "Small fixes to DataStream#getTimestampFieldMapping.", "committedDate": "2020-06-26T18:24:07Z", "type": "commit"}, {"oid": "f1422bd35d11ce966583f4566c5a87eab01bb5a4", "url": "https://github.com/elastic/elasticsearch/commit/f1422bd35d11ce966583f4566c5a87eab01bb5a4", "message": "Lowercase error messages and remove punctuation.", "committedDate": "2020-06-26T18:39:28Z", "type": "commit"}, {"oid": "ae6c79db5c33cd2fda6e234446ab70cc47d2e7cf", "url": "https://github.com/elastic/elasticsearch/commit/ae6c79db5c33cd2fda6e234446ab70cc47d2e7cf", "message": "Move check for redundant nested includes to MapperService#merge.", "committedDate": "2020-06-26T20:04:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMTg0NA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447021844", "bodyText": "Maybe add a small comment explaining the logic for meta and metadata fields ?", "author": "jimczi", "createdAt": "2020-06-29T14:38:22Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/Mapping.java", "diffHunk": "@@ -86,21 +88,32 @@ public Mapping mappingUpdate(Mapper rootObjectMapper) {\n         return (T) metadataMappersMap.get(clazz);\n     }\n \n-    /** @see DocumentMapper#merge(Mapping) */\n-    public Mapping merge(Mapping mergeWith) {\n-        RootObjectMapper mergedRoot = root.merge(mergeWith.root);\n+    /** @see DocumentMapper#merge(Mapping, MergeReason) */\n+    public Mapping merge(Mapping mergeWith, MergeReason reason) {\n+        RootObjectMapper mergedRoot = root.merge(mergeWith.root, reason);\n+", "originalCommit": "ae6c79db5c33cd2fda6e234446ab70cc47d2e7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzY5MA==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447033690", "bodyText": "I wonder if we should nullify the underlying mappers if enabled is false ? It's not related to this pr specifically but we don't need to keep children when the parent is disabled ?", "author": "jimczi", "createdAt": "2020-06-29T14:54:09Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java", "diffHunk": "@@ -440,64 +481,62 @@ public boolean parentObjectMapperAreNested(MapperService mapperService) {\n \n     @Override\n     public ObjectMapper merge(Mapper mergeWith) {\n+        return merge(mergeWith, MergeReason.MAPPING_UPDATE);\n+    }\n+\n+    public ObjectMapper merge(Mapper mergeWith, MergeReason reason) {\n         if (!(mergeWith instanceof ObjectMapper)) {\n-            throw new IllegalArgumentException(\"Can't merge a non object mapping [\" + mergeWith.name()\n-                + \"] with an object mapping [\" + name() + \"]\");\n+            throw new IllegalArgumentException(\"can't merge a non object mapping [\" + mergeWith.name() + \"] with an object mapping\");\n         }\n         ObjectMapper mergeWithObject = (ObjectMapper) mergeWith;\n         ObjectMapper merged = clone();\n-        merged.doMerge(mergeWithObject);\n+        merged.doMerge(mergeWithObject, reason);\n         return merged;\n     }\n \n-    protected void doMerge(final ObjectMapper mergeWith) {\n-        if (nested().isNested()) {\n-            if (!mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from nested to non-nested\");\n-            }\n-        } else {\n-            if (mergeWith.nested().isNested()) {\n-                throw new IllegalArgumentException(\"object mapping [\" + name() + \"] can't be changed from non-nested to nested\");\n-            }\n-        }\n+    protected void doMerge(final ObjectMapper mergeWith, MergeReason reason) {\n+        nested().merge(mergeWith.nested(), reason);\n \n         if (mergeWith.dynamic != null) {\n             this.dynamic = mergeWith.dynamic;\n         }\n \n-        checkObjectMapperParameters(mergeWith);\n+        if (reason == MergeReason.INDEX_TEMPLATE) {\n+            if (mergeWith.enabled.explicit()) {\n+                this.enabled = mergeWith.enabled;\n+            }\n+        } else if (isEnabled() != mergeWith.isEnabled()) {\n+            throw new MapperException(\"the [enabled] parameter can't be updated for the object mapping [\" + name() + \"]\");\n+        }\n ", "originalCommit": "ae6c79db5c33cd2fda6e234446ab70cc47d2e7cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNTEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447225121", "bodyText": "As you mentioned, I think this is general question. Even without this PR you can define an object mapper like this:\n\"object\": {\n  \"type\": \"object\",\n  \"enabled\": false,\n  \"properties\": {\n    \"field\": {\n      \"type\": \"keyword\"\n    }\n  }\n}\n\nFor this PR I plan to stick with the existing behavior, but we could have a separate discussion on whether we want to remove this flexibility.", "author": "jtibshirani", "createdAt": "2020-06-29T20:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1MjcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447252703", "bodyText": "Agreed, I opened #58702 to discuss this specifically.", "author": "jimczi", "createdAt": "2020-06-29T21:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MjIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/58521#discussion_r447262206", "bodyText": "Great thanks!", "author": "jtibshirani", "createdAt": "2020-06-29T21:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzY5MA=="}], "type": "inlineReview"}, {"oid": "ff6833c92cfaed7da73eef50f0f64815192fad02", "url": "https://github.com/elastic/elasticsearch/commit/ff6833c92cfaed7da73eef50f0f64815192fad02", "message": "Add comments explaining how _meta and metadata fields are merged.", "committedDate": "2020-06-29T20:23:10Z", "type": "commit"}, {"oid": "1899c289039fbfbba0dc4d754398484c07e14061", "url": "https://github.com/elastic/elasticsearch/commit/1899c289039fbfbba0dc4d754398484c07e14061", "message": "Merge remote-tracking branch 'upstream/master' into merge-template-mapping", "committedDate": "2020-06-29T21:00:31Z", "type": "commit"}]}