{"pr_number": 56170, "pr_title": "Validate V2 templates more strictly", "pr_createdAt": "2020-05-04T23:10:21Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56170", "timeline": [{"oid": "6e9da227a273144c0c829dd8be99a8348d26b618", "url": "https://github.com/elastic/elasticsearch/commit/6e9da227a273144c0c829dd8be99a8348d26b618", "message": "Validate V2 templates more strictly\n\nThis commit changes the validation for V2 index and component templates to re-use the same\nvalidation that V1 templates used. This includes things like invalid template names, index patterns,\netc.\n\nThis also adds validation that template names do not contain `*`.\n\nSupercedes #53970\nRelates to #53101", "committedDate": "2020-05-04T23:08:07Z", "type": "commit"}, {"oid": "25ee3ced9469205c234a0c900900963b324d01f2", "url": "https://github.com/elastic/elasticsearch/commit/25ee3ced9469205c234a0c900900963b324d01f2", "message": "Disallow ':' in index patterns also", "committedDate": "2020-05-04T23:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3OTI5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r419979292", "bodyText": "Would it make sense to extract this in a separate method and use it in both validate CT/TemplateV2 methods?", "author": "andreidan", "createdAt": "2020-05-05T09:31:43Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -922,70 +924,129 @@ private static void validateTemplate(Settings validateSettings, String mappings,\n         }\n     }\n \n-    private void validate(PutRequest request) {\n+    private void validate(String name, ComponentTemplate template) {\n+        validate(name,\n+            template.template().settings(),\n+            Collections.emptyList(),\n+            Optional.ofNullable(template.template().aliases())\n+                .map(aliases -> aliases.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());\n+                        if (aliasMeta.filter() != null) {\n+                            a.filter(aliasMeta.filter().string());\n+                        }\n+                        a.searchRouting(aliasMeta.searchRouting());\n+                        a.indexRouting(aliasMeta.indexRouting());\n+                        a.isHidden(aliasMeta.isHidden());\n+                        a.writeIndex(aliasMeta.writeIndex());\n+                        return a;\n+                    })\n+                    .collect(Collectors.toList()))\n+                .orElse(Collections.emptyList()));\n+    }\n+\n+    private void validate(String name, IndexTemplateV2 template) {\n+        Optional<Template> maybeTemplate = Optional.ofNullable(template.template());\n+        validate(name,\n+            maybeTemplate.map(Template::settings).orElse(Settings.EMPTY),\n+            template.indexPatterns(),\n+            maybeTemplate\n+                .map(Template::aliases)\n+                .map(aliasMap -> aliasMap.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());\n+                        if (aliasMeta.filter() != null) {\n+                            a.filter(aliasMeta.filter().string());\n+                        }\n+                        a.searchRouting(aliasMeta.searchRouting());\n+                        a.indexRouting(aliasMeta.indexRouting());\n+                        a.isHidden(aliasMeta.isHidden());\n+                        a.writeIndex(aliasMeta.writeIndex());\n+                        return a;\n+                    })", "originalCommit": "25ee3ced9469205c234a0c900900963b324d01f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MTY0NA==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r419981644", "bodyText": "These two methods are nearly identical so they can be refactored to avoid duplication\nprivate void validate(String name, ComponentTemplate template) {\n    validate(name, template.template(), Collections.emptyList());\n}\n\nprivate void validate(String name, IndexTemplateV2 template) {\n    validate(name, template.template(), template.indexPatterns());\n}\n\nprivate void validate(String name, Template template1, List<String> indexPatterns) {\n    Optional<Template> maybeTemplate = Optional.ofNullable(template1);\n    validate(name,\n        maybeTemplate.map(Template::settings).orElse(Settings.EMPTY),\n        indexPatterns,\n        maybeTemplate.map(Template::aliases)\n            .orElse(Collections.emptyMap())\n            .values().stream()\n            .map(this::toAlias)\n            .collect(Collectors.toList()));\n}\n\nprivate Alias toAlias(AliasMetadata aliasMeta) {\n    Alias a = new Alias(aliasMeta.alias());\n    if (aliasMeta.filter() != null) {\n        a.filter(aliasMeta.filter().string());\n    }\n    a.searchRouting(aliasMeta.searchRouting());\n    a.indexRouting(aliasMeta.indexRouting());\n    a.isHidden(aliasMeta.isHidden());\n    a.writeIndex(aliasMeta.writeIndex());\n    return a;\n}", "author": "probakowski", "createdAt": "2020-05-05T09:35:45Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -922,70 +924,129 @@ private static void validateTemplate(Settings validateSettings, String mappings,\n         }\n     }\n \n-    private void validate(PutRequest request) {\n+    private void validate(String name, ComponentTemplate template) {", "originalCommit": "25ee3ced9469205c234a0c900900963b324d01f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0MzgzMA==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r420143830", "bodyText": "Good call, did this, thanks!", "author": "dakrone", "createdAt": "2020-05-05T14:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MTY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MTgzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r419981831", "bodyText": "This block should be refactored to its own method", "author": "probakowski", "createdAt": "2020-05-05T09:36:07Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -922,70 +924,129 @@ private static void validateTemplate(Settings validateSettings, String mappings,\n         }\n     }\n \n-    private void validate(PutRequest request) {\n+    private void validate(String name, ComponentTemplate template) {\n+        validate(name,\n+            template.template().settings(),\n+            Collections.emptyList(),\n+            Optional.ofNullable(template.template().aliases())\n+                .map(aliases -> aliases.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());", "originalCommit": "25ee3ced9469205c234a0c900900963b324d01f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5MDExNA==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r419990114", "bodyText": "This code can be made less nested if we get out of Optional early\n.map(Template::aliases)\n.orElse(Collections.emptyMap())", "author": "probakowski", "createdAt": "2020-05-05T09:51:06Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -922,70 +924,129 @@ private static void validateTemplate(Settings validateSettings, String mappings,\n         }\n     }\n \n-    private void validate(PutRequest request) {\n+    private void validate(String name, ComponentTemplate template) {\n+        validate(name,\n+            template.template().settings(),\n+            Collections.emptyList(),\n+            Optional.ofNullable(template.template().aliases())\n+                .map(aliases -> aliases.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());\n+                        if (aliasMeta.filter() != null) {\n+                            a.filter(aliasMeta.filter().string());\n+                        }\n+                        a.searchRouting(aliasMeta.searchRouting());\n+                        a.indexRouting(aliasMeta.indexRouting());\n+                        a.isHidden(aliasMeta.isHidden());\n+                        a.writeIndex(aliasMeta.writeIndex());\n+                        return a;\n+                    })\n+                    .collect(Collectors.toList()))\n+                .orElse(Collections.emptyList()));\n+    }\n+\n+    private void validate(String name, IndexTemplateV2 template) {\n+        Optional<Template> maybeTemplate = Optional.ofNullable(template.template());\n+        validate(name,\n+            maybeTemplate.map(Template::settings).orElse(Settings.EMPTY),\n+            template.indexPatterns(),\n+            maybeTemplate\n+                .map(Template::aliases)\n+                .map(aliasMap -> aliasMap.values().stream()\n+                    .map(aliasMeta -> {", "originalCommit": "25ee3ced9469205c234a0c900900963b324d01f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MTUxMw==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r420041513", "bodyText": "Sorry for drive-by commenting, but this might touch another small issue I recently read (#55606) which points out that we allow asterisks in index patterns, the error message contaisn the character though (\"template must not contain the following characters [ , \", *, , <, |, ,, >, /, ?];]\") because we use Strings.INVALID_FILENAME_CHARS without removing the asterisk here. Might be worth fixing as well, just wanted to point it out.", "author": "cbuescher", "createdAt": "2020-05-05T11:34:08Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -922,70 +924,129 @@ private static void validateTemplate(Settings validateSettings, String mappings,\n         }\n     }\n \n-    private void validate(PutRequest request) {\n+    private void validate(String name, ComponentTemplate template) {\n+        validate(name,\n+            template.template().settings(),\n+            Collections.emptyList(),\n+            Optional.ofNullable(template.template().aliases())\n+                .map(aliases -> aliases.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());\n+                        if (aliasMeta.filter() != null) {\n+                            a.filter(aliasMeta.filter().string());\n+                        }\n+                        a.searchRouting(aliasMeta.searchRouting());\n+                        a.indexRouting(aliasMeta.indexRouting());\n+                        a.isHidden(aliasMeta.isHidden());\n+                        a.writeIndex(aliasMeta.writeIndex());\n+                        return a;\n+                    })\n+                    .collect(Collectors.toList()))\n+                .orElse(Collections.emptyList()));\n+    }\n+\n+    private void validate(String name, IndexTemplateV2 template) {\n+        Optional<Template> maybeTemplate = Optional.ofNullable(template.template());\n+        validate(name,\n+            maybeTemplate.map(Template::settings).orElse(Settings.EMPTY),\n+            template.indexPatterns(),\n+            maybeTemplate\n+                .map(Template::aliases)\n+                .map(aliasMap -> aliasMap.values().stream()\n+                    .map(aliasMeta -> {\n+                        Alias a = new Alias(aliasMeta.alias());\n+                        if (aliasMeta.filter() != null) {\n+                            a.filter(aliasMeta.filter().string());\n+                        }\n+                        a.searchRouting(aliasMeta.searchRouting());\n+                        a.indexRouting(aliasMeta.indexRouting());\n+                        a.isHidden(aliasMeta.isHidden());\n+                        a.writeIndex(aliasMeta.writeIndex());\n+                        return a;\n+                    })\n+                    .collect(Collectors.toList()))\n+                .orElse(Collections.emptyList()));\n+    }\n+\n+    private void validate(PutRequest putRequest) {\n+        validate(putRequest.name, putRequest.settings, putRequest.indexPatterns, putRequest.aliases);\n+    }\n+\n+    private void validate(String name, @Nullable Settings settings, List<String> indexPatterns, List<Alias> aliases) {\n         List<String> validationErrors = new ArrayList<>();\n-        if (request.name.contains(\" \")) {\n+        if (name.contains(\" \")) {\n             validationErrors.add(\"name must not contain a space\");\n         }\n-        if (request.name.contains(\",\")) {\n+        if (name.contains(\",\")) {\n             validationErrors.add(\"name must not contain a ','\");\n         }\n-        if (request.name.contains(\"#\")) {\n+        if (name.contains(\"#\")) {\n             validationErrors.add(\"name must not contain a '#'\");\n         }\n-        if (request.name.startsWith(\"_\")) {\n+        if (name.contains(\"*\")) {\n+            validationErrors.add(\"name must not contain a '*'\");\n+        }\n+        if (name.startsWith(\"_\")) {\n             validationErrors.add(\"name must not start with '_'\");\n         }\n-        if (!request.name.toLowerCase(Locale.ROOT).equals(request.name)) {\n+        if (name.toLowerCase(Locale.ROOT).equals(name) == false) {\n             validationErrors.add(\"name must be lower cased\");\n         }\n-        for(String indexPattern : request.indexPatterns) {\n+        for(String indexPattern : indexPatterns) {\n             if (indexPattern.contains(\" \")) {\n-                validationErrors.add(\"template must not contain a space\");\n+                validationErrors.add(\"index_patterns [\" + indexPattern + \"] must not contain a space\");\n             }\n             if (indexPattern.contains(\",\")) {\n-                validationErrors.add(\"template must not contain a ','\");\n+                validationErrors.add(\"index_pattern [\" + indexPattern + \"] must not contain a ','\");\n             }\n             if (indexPattern.contains(\"#\")) {\n-                validationErrors.add(\"template must not contain a '#'\");\n+                validationErrors.add(\"index_pattern [\" + indexPattern + \"] must not contain a '#'\");\n+            }\n+            if (indexPattern.contains(\":\")) {\n+                validationErrors.add(\"index_pattern [\" + indexPattern + \"] must not contain a ':'\");\n             }\n             if (indexPattern.startsWith(\"_\")) {\n-                validationErrors.add(\"template must not start with '_'\");\n+                validationErrors.add(\"index_pattern [\" + indexPattern + \"] must not start with '_'\");\n             }\n-            if (!Strings.validFileNameExcludingAstrix(indexPattern)) {\n-                validationErrors.add(\"template must not contain the following characters \" + Strings.INVALID_FILENAME_CHARS);\n+            if (Strings.validFileNameExcludingAstrix(indexPattern) == false) {", "originalCommit": "25ee3ced9469205c234a0c900900963b324d01f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjIwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56170#discussion_r420042201", "bodyText": "@dakrone sorry, just see you are already aware of that issue. Nevermind.", "author": "cbuescher", "createdAt": "2020-05-05T11:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MTUxMw=="}], "type": "inlineReview"}, {"oid": "2ce90bb6c8d2d70eff498fe58f01a5bc97a75d22", "url": "https://github.com/elastic/elasticsearch/commit/2ce90bb6c8d2d70eff498fe58f01a5bc97a75d22", "message": "Refactor validation methods to DRY them up", "committedDate": "2020-05-05T14:15:35Z", "type": "commit"}, {"oid": "3521d310e325ee6cee524de11859cb8263aa2f23", "url": "https://github.com/elastic/elasticsearch/commit/3521d310e325ee6cee524de11859cb8263aa2f23", "message": "Merge branch 'master' into itv2-enhance-template-validation", "committedDate": "2020-05-05T14:37:45Z", "type": "commit"}]}