{"pr_number": 55328, "pr_title": "Add geo_bounds aggregation support for geo_shape", "pr_createdAt": "2020-04-16T16:42:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55328", "timeline": [{"oid": "f953e1a67414000d967606d1c8b35f5bf06826b1", "url": "https://github.com/elastic/elasticsearch/commit/f953e1a67414000d967606d1c8b35f5bf06826b1", "message": "add geo_bounds for shapes", "committedDate": "2020-04-16T16:30:49Z", "type": "commit"}, {"oid": "1ef925cd78cf4cb4cba69b59527fe102d3282cc7", "url": "https://github.com/elastic/elasticsearch/commit/1ef925cd78cf4cb4cba69b59527fe102d3282cc7", "message": "add yaml tests", "committedDate": "2020-04-17T00:49:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r409934189", "bodyText": "@iverase I really dislike this hack, but I am also weary of editing GeoBoundsAggregator to be more generic just for this extension. I might take another pass at this tomorrow", "author": "talevy", "createdAt": "2020-04-17T01:04:55Z", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/aggregations/metrics/GeoShapeBoundsAggregator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.spatial.aggregations.metrics;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.GeoBoundsAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.xpack.spatial.index.mapper.GeoShapeValuesSource;\n+import org.elasticsearch.xpack.spatial.index.mapper.MultiGeoShapeValues;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public final class GeoShapeBoundsAggregator extends GeoBoundsAggregator {\n+    private final GeoShapeValuesSource valuesSource;\n+\n+    public GeoShapeBoundsAggregator(String name, SearchContext aggregationContext, Aggregator parent,\n+                             GeoShapeValuesSource valuesSource, boolean wrapLongitude, Map<String, Object> metadata) throws IOException {\n+        // the valuesSource as GeoPoint passed to GeoBoundsAggregator is not used\n+        super(name, aggregationContext, parent, ValuesSource.GeoPoint.EMPTY, wrapLongitude, metadata);", "originalCommit": "1ef925cd78cf4cb4cba69b59527fe102d3282cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5Mjk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r410092984", "bodyText": "Yes, it seems that GeoBoundsAggregator should be an abstract class and then having two implementations one for points and one for shapes?\nAnother thing I notice is that there is special logic when valueSource == null, cannot we have an empty bounds aggregation that is returned in that case when calling the register?", "author": "iverase", "createdAt": "2020-04-17T09:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4NDYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411084603", "bodyText": "I believe what will need to happen is that I make ValuesSource.GEOPOINT abstract as was done in  the previous branch. but it is not needed for the GeoBounds aggregator. may happen for the GeoGrid. to help resolve the CellIdSource work. For now, I prefer to have duplicate code and inherit from MetricsAggregator instead of GeoShapeAggregator and undo this hack", "author": "talevy", "createdAt": "2020-04-20T04:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MzIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411553220", "bodyText": "For now, I prefer to have duplicate code and inherit from MetricsAggregator\n\nHaving duplicate code seems to increase the likelihood these diverge, which would mean inconsistent behavior across oss and default distributions right? IMO in order to keep the behavior consistent, modeling all the default distribution overrides as pure subclasses of oss will minimize the possibility the implementations diverge.", "author": "rjernst", "createdAt": "2020-04-20T17:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411560984", "bodyText": "hmmm. OK. I have been a little resistant to introducing abstractions in server that only have one implementation in server. I'll overcome this and re-introduce the generic valuessource type. This should re-enable more proper inheritance here.", "author": "talevy", "createdAt": "2020-04-20T17:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNjc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411716763", "bodyText": "after speaking with Ryan on videochat, we realized that we were misunderstanding one another. We are not duplicating the whole aggregation, but instead just the aggregator logic. We decided that this is acceptable and I'll continue with this approach. There will be some boilerplate that can be shared between, but that does not warrant any hackery", "author": "talevy", "createdAt": "2020-04-20T21:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDQ5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r409934491", "bodyText": "@iverase I also am investigating errors with this file. I am experiencing inconsistent behavior and investigating why, but I think most of what is tested here is good. would love to know what you think!", "author": "talevy", "createdAt": "2020-04-17T01:06:07Z", "path": "x-pack/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/upgraded_cluster/100_geo_shape_doc_values.yml", "diffHunk": "@@ -0,0 +1,76 @@\n+---", "originalCommit": "1ef925cd78cf4cb4cba69b59527fe102d3282cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDExMw==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r410094113", "bodyText": "I think the issue here is that we are force merging on the case of mixed cluster?", "author": "iverase", "createdAt": "2020-04-17T09:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMTY0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411101649", "bodyText": "I found out what the problem is.\nI was writing these tests assuming they were only run on 7.8 upgrading to 8.0, but we also have these tests run with 8.0 doing a rolling-restart to 8.0. I've updated the tests with skips, but will need to sync with core-infra to see what they recommend. I am a bit surprised", "author": "talevy", "createdAt": "2020-04-20T05:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNDQ5MQ=="}], "type": "inlineReview"}, {"oid": "9e723014e3ba15e503fdc8db89cb11b9feb256e2", "url": "https://github.com/elastic/elasticsearch/commit/9e723014e3ba15e503fdc8db89cb11b9feb256e2", "message": "fix", "committedDate": "2020-04-17T01:13:32Z", "type": "commit"}, {"oid": "0491b5f6b4b896405980f3e1f366b987e3f5edd5", "url": "https://github.com/elastic/elasticsearch/commit/0491b5f6b4b896405980f3e1f366b987e3f5edd5", "message": "Merge remote-tracking branch 'elastic/master' into geo_bounds2", "committedDate": "2020-04-17T22:37:24Z", "type": "commit"}, {"oid": "20ec976b71ead310369f1cf3dcb56c18d8bacb79", "url": "https://github.com/elastic/elasticsearch/commit/20ec976b71ead310369f1cf3dcb56c18d8bacb79", "message": "inherit from MetricsAggregator and fix tests", "committedDate": "2020-04-20T05:25:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411102560", "bodyText": "Hey @rjernst. I do not like what I'm doing here, but I did it to express my intention to\nhelp reach a better solution. I was a bit surprised that the rolling-upgrade tests were run on 8.0 -> 8.0\nand I do not want my tests to be run in this scenario. To achieve this I used skip: and this here.\nDo you think that my tests do not belong in qa/rolling-upgrade or do you think we need a clearer way to have tests that only run on true upgrade scenarios?", "author": "talevy", "createdAt": "2020-04-20T05:29:10Z", "path": "x-pack/qa/rolling-upgrade/build.gradle", "diffHunk": "@@ -142,6 +142,11 @@ for (Version bwcVersion : bwcVersions.wireCompatible) {\n     nonInputProperties.systemProperty('tests.rest.cluster', \"${-> testClusters.\"${baseName}\".allHttpSocketURI.join(\",\")}\")\n     nonInputProperties.systemProperty('tests.clustername', \"${-> testClusters.\"${baseName}\".getName()}\")\n     systemProperty 'tests.rest.suite', 'upgraded_cluster'\n+    if (bwcVersion.onOrAfter(\"8.0.0\")) {\n+      systemProperty 'tests.rest.blacklist', [\n+        'upgraded_cluster/100_geo_shape_doc_values/Test upgraded 8.x cluster with 8.x and 7.x geo_shape fields'", "originalCommit": "20ec976b71ead310369f1cf3dcb56c18d8bacb79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1NTkyNA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411555924", "bodyText": "The purpose of 8.0 -> 8.0 is to test rolling restart. While I agree this should be split out into it's own dedicated test (and so does core/infra in general; we've discussed it a few times), can you further explain the reason this can't work? The test is modeled this way currently not only because it was convenient, but also because rolling restart and upgrade are in most cases exactly the same, just differing in which old version they are talking to, but still expecting consistent behavior during the mixed/upgraded state from the features being tested.", "author": "rjernst", "createdAt": "2020-04-20T17:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MzQzMw==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411563433", "bodyText": "The idea is to verify the behavior of users indexing into an existing index that does not have geo-shape fields with doc-value support.\nI can achieve this the same in 8.0 by explicitly setting doc_values: false, but this is not something I can do in 7.x at the moment. Testing a mix of old indices and new indices is not possible in an 8.0 -> 8.0 setup. So, if that is the case, does that mean this is not something we should be explicitly testing? and just assume a known behavior?", "author": "talevy", "createdAt": "2020-04-20T17:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411607863", "bodyText": "Can this not be done with 7.x \"at the moment\" because this change needs to be backported? If so, can you build the test here, and test against a local 7.x with this backported? Since this will be backported and there is backcompat logic, wouldn't the bwc tests need to be disabled anyways in this PR?", "author": "rjernst", "createdAt": "2020-04-20T18:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTg2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411609862", "bodyText": "that is true, but then the same will be the case with 7.8 -> 7.8.\nThis test will likely be backported and removed from master, but kept in 7.x", "author": "talevy", "createdAt": "2020-04-20T18:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNjE4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411616182", "bodyText": "In either case, couldn't you use the version skipping feature already present in yaml tests?", "author": "rjernst", "createdAt": "2020-04-20T18:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODMzMA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411618330", "bodyText": "no, because the upgraded_cluster test will always be run on the latest version, no way knowing whether it came from the same version or a previous version. I used skips for the old_cluster and the mixed_cluster tests.", "author": "talevy", "createdAt": "2020-04-20T19:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyNTQ1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r411725452", "bodyText": "I've changed the upgraded_cluster tests to fit into the framework of the tests. thanks Ryan", "author": "talevy", "createdAt": "2020-04-20T22:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMjU2MA=="}], "type": "inlineReview"}, {"oid": "2548f967d151ddcc1acb73baf290ae496fd8d113", "url": "https://github.com/elastic/elasticsearch/commit/2548f967d151ddcc1acb73baf290ae496fd8d113", "message": "revert the upgraded cluster skipping tests", "committedDate": "2020-04-20T22:08:58Z", "type": "commit"}, {"oid": "968a0846cbf2f5bb8c15d484aa6f62362d4ed23f", "url": "https://github.com/elastic/elasticsearch/commit/968a0846cbf2f5bb8c15d484aa6f62362d4ed23f", "message": "Merge remote-tracking branch 'elastic/master' into geo_bounds2", "committedDate": "2020-04-20T23:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NjQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r412766420", "bodyText": "Does it need to be public?", "author": "iverase", "createdAt": "2020-04-22T08:09:47Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregator.java", "diffHunk": "@@ -36,20 +36,20 @@\n import java.io.IOException;\n import java.util.Map;\n \n-final class GeoBoundsAggregator extends MetricsAggregator {\n+public class GeoBoundsAggregator extends MetricsAggregator {", "originalCommit": "968a0846cbf2f5bb8c15d484aa6f62362d4ed23f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMDczMA==", "url": "https://github.com/elastic/elasticsearch/pull/55328#discussion_r413000730", "bodyText": "no. this was left from when I tried to inherit from GeoBoundsAggregator.\nI've reverted this file to how it was in master, and fixed some other protected instance variables to be private. good catch. thanks!", "author": "talevy", "createdAt": "2020-04-22T13:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NjQyMA=="}], "type": "inlineReview"}, {"oid": "e4b30d44529596cb4212d45c957d1209ac5248f0", "url": "https://github.com/elastic/elasticsearch/commit/e4b30d44529596cb4212d45c957d1209ac5248f0", "message": "remove bwc tests to be merged in 7.x. fix scoping", "committedDate": "2020-04-22T13:49:21Z", "type": "commit"}, {"oid": "a77692c52d6393dcac55dfe3079cb252351d2705", "url": "https://github.com/elastic/elasticsearch/commit/a77692c52d6393dcac55dfe3079cb252351d2705", "message": "Merge remote-tracking branch 'elastic/master' into geo_bounds2", "committedDate": "2020-04-22T13:49:27Z", "type": "commit"}]}