{"pr_number": 57144, "pr_title": "Introduce Annotation.event field", "pr_createdAt": "2020-05-26T12:32:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57144", "timeline": [{"oid": "016dcac7bb954ad8b56ca1c85a4d6332c2107b7f", "url": "https://github.com/elastic/elasticsearch/commit/016dcac7bb954ad8b56ca1c85a4d6332c2107b7f", "message": "Introduce Annotation.event field", "committedDate": "2020-05-28T07:18:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTY0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431635643", "bodyText": "I think you should also add COMMENT here, to keep the UI and backend in sync - the UI defines it here https://github.com/elastic/kibana/blob/995c2cb725a5588fc843b35895d48408036ed8ca/x-pack/plugins/ml/common/types/annotations.ts#L75", "author": "droberts195", "createdAt": "2020-05-28T07:30:04Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/Annotation.java", "diffHunk": "@@ -14,15 +14,44 @@\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.ToXContentObject;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.xpack.core.common.time.TimeUtils;\n import org.elasticsearch.xpack.core.ml.job.config.Job;\n \n import java.io.IOException;\n import java.util.Date;\n+import java.util.Locale;\n import java.util.Objects;\n \n public class Annotation implements ToXContentObject, Writeable {\n \n+    public enum Type {\n+        ANNOTATION;", "originalCommit": "b76f79500ecb087102069c6359e509172a8210c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0MTUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431641535", "bodyText": "Done.\nI have a question about it though:\nDo we ever parse the annotations in the backend? I couldn't find it in the code. IIUC backend code only generates new annotations and the ones (whether of type ANNOTATION or COMMENT) generated by the UI never go through backend parsing code...", "author": "przemekwitek", "createdAt": "2020-05-28T07:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431636642", "bodyText": "We need to think about what the UI will put in this field for user-added annotations.  user?  manual?  Or leave it null.  Please can you talk to the UI team about this.", "author": "droberts195", "createdAt": "2020-05-28T07:32:03Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/Annotation.java", "diffHunk": "@@ -14,15 +14,44 @@\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.ToXContentObject;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.xpack.core.common.time.TimeUtils;\n import org.elasticsearch.xpack.core.ml.job.config.Job;\n \n import java.io.IOException;\n import java.util.Date;\n+import java.util.Locale;\n import java.util.Objects;\n \n public class Annotation implements ToXContentObject, Writeable {\n \n+    public enum Type {\n+        ANNOTATION;\n+\n+        public static Type fromString(String value) {\n+            return valueOf(value.toUpperCase(Locale.ROOT));\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n+    }\n+\n+    public enum Event {\n+        DELAYED_DATA,\n+        MODEL_SNAPSHOT_STORED;", "originalCommit": "b76f79500ecb087102069c6359e509172a8210c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0Mjg5OA==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431642898", "bodyText": "Please can you talk to the UI team about this.\n\nSure, I'll do that. I'd rather have some designated value (like user) rather than null so that we can easily tell if the annotation was created before 7.9.", "author": "przemekwitek", "createdAt": "2020-05-28T07:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2MDYwOA==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431760608", "bodyText": "FYI: The UI team settled on user. I've added USER enum value.", "author": "przemekwitek", "createdAt": "2020-05-28T11:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzODUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431638539", "bodyText": "Since this is generally a lenient parser (ignoreUnknownFields = true), I wonder if it should catch a fromString exception here and set event to null.  Otherwise the parser is not lenient in tolerating new events we may add in the future, and it is very likely we will add new events.", "author": "droberts195", "createdAt": "2020-05-28T07:35:55Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/Annotation.java", "diffHunk": "@@ -54,7 +88,18 @@\n         PARSER.declareField(Builder::setModifiedTime,\n             p -> TimeUtils.parseTimeField(p, MODIFIED_TIME.getPreferredName()), MODIFIED_TIME, ObjectParser.ValueType.VALUE);\n         PARSER.declareString(Builder::setModifiedUsername, MODIFIED_USERNAME);\n-        PARSER.declareString(Builder::setType, TYPE);\n+        PARSER.declareField(Builder::setType, p -> {\n+            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                return Type.fromString(p.text());\n+            }\n+            throw new IllegalArgumentException(\"Unsupported token [\" + p.currentToken() + \"]\");\n+        }, TYPE, ObjectParser.ValueType.STRING);\n+        PARSER.declareField(Builder::setEvent, p -> {\n+            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                return Event.fromString(p.text());", "originalCommit": "b76f79500ecb087102069c6359e509172a8210c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0NDAyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r431644029", "bodyText": "Done, i.e.:\n\nunknown type is translated into Type.ANNOTATION\nunknown event is translated into null\n\nBut this raises another question:\nMost of results that come through C++ channel have two parsers: lenient and strict. Strict is used when parsing from C++. Should I make Annotation have two parsers too? If not, why?", "author": "przemekwitek", "createdAt": "2020-05-28T07:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzODUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MzczNw==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r433163737", "bodyText": "Should I make Annotation have two parsers too?\n\nYes, good point.  Annotation should have a strict parser for parsing C++ output so we don't accidentally do a release where documents the C++ is writing aren't understood by the Java.\nThe general policy is: strict parsers for user supplied documents and C++ output, lenient parsers for loading documents that might have originated in a different version.", "author": "droberts195", "createdAt": "2020-06-01T10:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzODUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMDgzOA==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r433300838", "bodyText": "I've made the parser strict by:\n\nsetting ignoreUnknownFields to false\nreverting leniency in enum value parsing\n\nThe parser does not seem to be used outside of tests. Once I start using it while reading C++ results, I'll only need strict parser so no need to have both.", "author": "przemekwitek", "createdAt": "2020-06-01T15:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzODUzOQ=="}], "type": "inlineReview"}, {"oid": "fd488e166d201fd8ffda0ed037cef7e6b3a54f78", "url": "https://github.com/elastic/elasticsearch/commit/fd488e166d201fd8ffda0ed037cef7e6b3a54f78", "message": "Add Event.USER enum value for user-generated annotations", "committedDate": "2020-05-29T12:44:58Z", "type": "forcePushed"}, {"oid": "c4512c0a5f272d3bc8356ff184d6679e5796afc6", "url": "https://github.com/elastic/elasticsearch/commit/c4512c0a5f272d3bc8356ff184d6679e5796afc6", "message": "Introduce Annotation.event field", "committedDate": "2020-06-01T08:16:37Z", "type": "commit"}, {"oid": "c220db1626c2f39ef827677ac64b6ac3e2df6e2e", "url": "https://github.com/elastic/elasticsearch/commit/c220db1626c2f39ef827677ac64b6ac3e2df6e2e", "message": "Use Annotation parser rather than Annotation.Builder throughout the code", "committedDate": "2020-06-01T08:16:37Z", "type": "commit"}, {"oid": "606b44315870b75237248afbdf668b5727c41b2d", "url": "https://github.com/elastic/elasticsearch/commit/606b44315870b75237248afbdf668b5727c41b2d", "message": "Apply review comments", "committedDate": "2020-06-01T08:16:37Z", "type": "commit"}, {"oid": "b0e372eea565bab05413cf9b3806fd1ee5cf0616", "url": "https://github.com/elastic/elasticsearch/commit/b0e372eea565bab05413cf9b3806fd1ee5cf0616", "message": "Add Event.USER enum value for user-generated annotations", "committedDate": "2020-06-01T08:16:37Z", "type": "commit"}, {"oid": "b0e372eea565bab05413cf9b3806fd1ee5cf0616", "url": "https://github.com/elastic/elasticsearch/commit/b0e372eea565bab05413cf9b3806fd1ee5cf0616", "message": "Add Event.USER enum value for user-generated annotations", "committedDate": "2020-06-01T08:16:37Z", "type": "forcePushed"}, {"oid": "c13a5ce3c07f28dbd2779e2b3aba4341b75b823f", "url": "https://github.com/elastic/elasticsearch/commit/c13a5ce3c07f28dbd2779e2b3aba4341b75b823f", "message": "Make Annotation parser strict", "committedDate": "2020-06-01T15:29:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODg4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r433338885", "bodyText": "I think it would be worth naming the variable STRICT_PARSER.  It someone ever does need to parse these documents out of an index then a lenient parser will be needed, but at that time it would be easy to assume that a variable named simply PARSER can be used.  The person doing that future work won't read the discussion in this PR - they'll just go by what they can easily navigate to in the IDE.", "author": "droberts195", "createdAt": "2020-06-01T16:12:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/Annotation.java", "diffHunk": "@@ -80,11 +71,17 @@ public String toString() {\n     public static final ParseField BY_FIELD_NAME = new ParseField(\"by_field_name\");\n     public static final ParseField BY_FIELD_VALUE = new ParseField(\"by_field_value\");\n \n+    /**\n+     * Parses {@link Annotation} using a strict parser.\n+     */\n     public static Annotation fromXContent(XContentParser parser, Void context) {\n         return PARSER.apply(parser, context).build();\n     }\n \n-    private static final ObjectParser<Builder, Void> PARSER = new ObjectParser<>(ANNOTATION.getPreferredName(), true, Builder::new);\n+    /**\n+     * Strict parser for cases when {@link Annotation} is returned from C++ as an ML result.\n+     */\n+    private static final ObjectParser<Builder, Void> PARSER = new ObjectParser<>(ANNOTATION.getPreferredName(), false, Builder::new);", "originalCommit": "c13a5ce3c07f28dbd2779e2b3aba4341b75b823f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0Mzg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57144#discussion_r433343863", "bodyText": "Good point.\nDone.", "author": "przemekwitek", "createdAt": "2020-06-01T16:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODg4NQ=="}], "type": "inlineReview"}, {"oid": "0624aa0c1c717fa1fe0005060600b23449d6a15a", "url": "https://github.com/elastic/elasticsearch/commit/0624aa0c1c717fa1fe0005060600b23449d6a15a", "message": "Rename PARSER to STRICT_PARSER", "committedDate": "2020-06-01T16:19:30Z", "type": "commit"}]}