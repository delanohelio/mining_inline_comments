{"pr_number": 53241, "pr_title": "QL: constant_keyword support", "pr_createdAt": "2020-03-06T19:39:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53241", "timeline": [{"oid": "7540f06bd7e08b5420b03fe511c21607a4fdf6db", "url": "https://github.com/elastic/elasticsearch/commit/7540f06bd7e08b5420b03fe511c21607a4fdf6db", "message": "Support for constant_keyword data type", "committedDate": "2020-03-06T19:29:19Z", "type": "commit"}, {"oid": "2f92a65ca83aea22fd392a60cf733841ffc59462", "url": "https://github.com/elastic/elasticsearch/commit/2f92a65ca83aea22fd392a60cf733841ffc59462", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53016_feature", "committedDate": "2020-03-06T19:34:29Z", "type": "commit"}, {"oid": "23a1a7df44507bd8ed8bad9f59894812f43db275", "url": "https://github.com/elastic/elasticsearch/commit/23a1a7df44507bd8ed8bad9f59894812f43db275", "message": "Update", "committedDate": "2020-03-06T19:36:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389164758", "bodyText": "Leftover comment?", "author": "matriv", "createdAt": "2020-03-06T21:59:38Z", "path": "x-pack/plugin/sql/qa/src/main/resources/constant-keyword.csv-spec", "diffHunk": "@@ -0,0 +1,131 @@\n+// To mute tests follow example in file: example.csv-spec\n+\n+//\n+// Tests testing field alias (introduced in ES 6.4)", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389166524", "bodyText": "Could you explain please, I don't get it.", "author": "matriv", "createdAt": "2020-03-06T22:04:44Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/execution/search/extractor/AbstractFieldHitExtractor.java", "diffHunk": "@@ -213,6 +214,7 @@ protected Object unwrapMultiValue(Object values) {\n     protected boolean isFromDocValuesOnly(DataType dataType) {\n         return dataType == KEYWORD // because of ignore_above.\n                     || dataType == DATETIME\n+                    || dataType == CONSTANT_KEYWORD // because a non-existent value is considered the constant value itself", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNDY5OA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389214698", "bodyText": "We cannot extract the value of a constant_keyword from _source because if there is no source for the field, Elasticsearch will still consider the field as having the constant value.\nTake a look at the example in our docs. No value at indexing time means level is debug. So, for the second document in the sample, there is no _source for level, but the value is still debug in case there is a query filtering on that field.", "author": "astefan", "createdAt": "2020-03-07T01:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NzczMg==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389167732", "bodyText": "Personally I would prefer it to be in tha employees.csv file and have a different value from gender like Male and Female.", "author": "matriv", "createdAt": "2020-03-06T22:08:11Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/DataLoader.java", "diffHunk": "@@ -198,6 +195,9 @@ private static void loadEmpDatasetIntoEs(RestClient client, String index, String\n                     }\n                     hadLastItem = true;\n                     bulk.append('\"').append(titles.get(f)).append(\"\\\":\\\"\").append(fields.get(f)).append('\"');\n+                    if (titles.get(f).equals(\"gender\") && extraFields) {\n+                        bulk.append(\",\\\"extra_gender\\\":\\\"M\\\"\");", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNDg0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389214846", "bodyText": "Imo, it's a too impactful change to do it like this.", "author": "astefan", "createdAt": "2020-03-07T01:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NzczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTk5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389251999", "bodyText": "Apologies, I mixed up the feature with an enum keyword that can take a set of predefined values in the mapping. It's ok as is, but maybe check if null is also acceptable.", "author": "matriv", "createdAt": "2020-03-07T12:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NzczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MjExNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389252115", "bodyText": "But maybe having is a Male instead of M can help avoid confusion in the future regarding tests?", "author": "matriv", "createdAt": "2020-03-07T12:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NzczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODQ4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389168483", "bodyText": "constant_keyword cannot be null, correct?", "author": "matriv", "createdAt": "2020-03-06T22:09:58Z", "path": "x-pack/plugin/sql/qa/src/main/resources/constant-keyword.csv-spec", "diffHunk": "@@ -0,0 +1,131 @@\n+// To mute tests follow example in file: example.csv-spec\n+\n+//\n+// Tests testing field alias (introduced in ES 6.4)\n+//\n+\n+// filtering\n+\n+filterEquals\n+SELECT extra_gender g FROM \"test_emp_copy\" WHERE g = 'M' LIMIT 5;\n+\n+    g     \n+---------------\n+M              \n+M              \n+M              \n+M              \n+M   \n+\n+;\n+\n+filterNotEquals\n+SELECT COUNT(*) AS c FROM \"test_emp_copy\" WHERE extra_gender <> 'M';\n+\n+    c:l     \n+---------------\n+0\n+;\n+\n+aggWithNullFilter\n+SELECT COUNT(*) count FROM test_emp_copy WHERE extra_gender IS NOT NULL;", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389215063", "bodyText": "Theoretically, I think it can be null... haven't tested this.", "author": "astefan", "createdAt": "2020-03-07T01:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTY5NA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389835694", "bodyText": "I guess any type can be null (missing field in the doc)?", "author": "bpintea", "createdAt": "2020-03-09T17:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4Njk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r392186961", "bodyText": "For null case, all the documents in the index, for that field, shouldn't have a value. As soon as one document is indexed with something in it for that field, all other documents will \"inherit\" that value.", "author": "astefan", "createdAt": "2020-03-13T12:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MjUxNw==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r392242517", "bodyText": "#53545", "author": "astefan", "createdAt": "2020-03-13T13:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389168645", "bodyText": "If we have 2 values Male/Female that should be changed.", "author": "matriv", "createdAt": "2020-03-06T22:10:32Z", "path": "x-pack/plugin/sql/qa/src/main/resources/constant-keyword.csv-spec", "diffHunk": "@@ -0,0 +1,131 @@\n+// To mute tests follow example in file: example.csv-spec\n+\n+//\n+// Tests testing field alias (introduced in ES 6.4)\n+//\n+\n+// filtering\n+\n+filterEquals\n+SELECT extra_gender g FROM \"test_emp_copy\" WHERE g = 'M' LIMIT 5;\n+\n+    g     \n+---------------\n+M              \n+M              \n+M              \n+M              \n+M   \n+\n+;\n+\n+filterNotEquals\n+SELECT COUNT(*) AS c FROM \"test_emp_copy\" WHERE extra_gender <> 'M';\n+\n+    c:l     \n+---------------\n+0\n+;\n+\n+aggWithNullFilter\n+SELECT COUNT(*) count FROM test_emp_copy WHERE extra_gender IS NOT NULL;\n+\n+     count:l     \n+---------------\n+100\n+;\n+\n+functionOverAlias\n+SELECT BIT_LENGTH(extra_gender) bit FROM test_emp_copy ORDER BY extra_gender LIMIT 1;", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTA5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389215092", "bodyText": "A constant_keyword field has only one value.", "author": "astefan", "createdAt": "2020-03-07T01:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2ODY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2OTc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389169752", "bodyText": "Numeric and constant_keyword not tasted in DataTypeConverterTests of QL.", "author": "matriv", "createdAt": "2020-03-06T22:13:30Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java", "diffHunk": "@@ -631,6 +632,7 @@ public void testCommonType() {\n         assertEquals(BOOLEAN, commonType(BOOLEAN, BOOLEAN));\n         assertEquals(NULL, commonType(NULL, NULL));\n         assertEquals(INTEGER, commonType(INTEGER, KEYWORD));\n+        assertEquals(DOUBLE, commonType(DOUBLE, CONSTANT_KEYWORD));", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNTk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389405981", "bodyText": "Removing the type all together might remove useful information.\nFor example if a field a is mapped as keyword in index X and constant_keyword in index Y, the piece above will find the collision and remove the field from Y resulting in a mapping only in X.\nOn one hand it does indicate that there's only field a however each field has index information underneath so in this case it would be just for index X. I'm not sure though whether we take that into account or not.\nWhat happens is there's no removal?", "author": "costin", "createdAt": "2020-03-08T21:15:19Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -344,6 +351,11 @@ public static IndexResolution mergedMappings(DataTypeRegistry typeRegistry, Stri\n                 }\n             }\n \n+            // if there are both a keyword and a constant_keyword type for this field, only keep the keyword as a common compatible type\n+            if (hasCompatibleKeywords) {\n+                types.remove(CONSTANT_KEYWORD.esType());", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwMDExOA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389500118", "bodyText": "This scenario is the one where two indices have the same named field with both keyword and constant_keyword types and their mappings need to be merged. For other scenarios (where the same name is used for two fields with different types) we tell the user that the field cannot be shown (because of the different mapping types), but in this very specific case and since these two field types are so similar I chose to display the field with the \"common\" data type as keyword.\nThe controversy for what to do in this specific case came from the scenario described here and is specifically tested here.", "author": "astefan", "createdAt": "2020-03-09T07:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNTk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzAyMA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r389833020", "bodyText": "I guess the remaining is a combination of KEYWORD and CONSTANT_KEYWORD. If we want to prioritise a selection, wouldn't a || right == KEYWORD make sense here? If not, couldn't we just return right; right away?", "author": "bpintea", "createdAt": "2020-03-09T17:09:16Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DataTypeConverter.java", "diffHunk": "@@ -59,9 +60,12 @@ public static DataType commonType(DataType left, DataType right) {\n             return left;\n         }\n         if (isString(left) && isString(right)) {\n-            if (left == TEXT) {\n+            if (left == TEXT || right == TEXT) {\n                 return TEXT;\n             }\n+            if (left == KEYWORD) {", "originalCommit": "23a1a7df44507bd8ed8bad9f59894812f43db275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDE1OA==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r392104158", "bodyText": "@bpintea if left is KEYWORD then return KEYWORD. If it's not, the code moves forward and returns right. And, at this point in the code, right can only be KEYWORD or CONSTANT_KEYWORD. Adding || right == KEYWORD I think is equivalent and unnecessary? Makes sense or I'm missing something?", "author": "astefan", "createdAt": "2020-03-13T09:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2OTM3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53241#discussion_r392169372", "bodyText": "\ud83d\udc4d", "author": "bpintea", "createdAt": "2020-03-13T11:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzAyMA=="}], "type": "inlineReview"}, {"oid": "c5376c99c562f60d1b9b8c7e1defb2a8254d2f7d", "url": "https://github.com/elastic/elasticsearch/commit/c5376c99c562f60d1b9b8c7e1defb2a8254d2f7d", "message": "Address reviews", "committedDate": "2020-03-13T09:54:08Z", "type": "commit"}, {"oid": "abad76cf18868487d1b94ba004efd5db54195596", "url": "https://github.com/elastic/elasticsearch/commit/abad76cf18868487d1b94ba004efd5db54195596", "message": "Address review comments", "committedDate": "2020-03-13T14:34:36Z", "type": "commit"}, {"oid": "1740adbcb60f10b6219b5ecd1bf4aca97e8ad39e", "url": "https://github.com/elastic/elasticsearch/commit/1740adbcb60f10b6219b5ecd1bf4aca97e8ad39e", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53016_feature", "committedDate": "2020-03-13T14:35:07Z", "type": "commit"}]}