{"pr_number": 54421, "pr_title": "[ML] add new inference_config field to trained model config", "pr_createdAt": "2020-03-30T13:33:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54421", "timeline": [{"oid": "a5a675b7dc0654243cb656390e9dbbd03ed2139e", "url": "https://github.com/elastic/elasticsearch/commit/a5a675b7dc0654243cb656390e9dbbd03ed2139e", "message": "[ML] add inference config object to model config", "committedDate": "2020-03-30T13:30:18Z", "type": "commit"}, {"oid": "e28be9d92ee82b61549fc2c3e0792be165002b8e", "url": "https://github.com/elastic/elasticsearch/commit/e28be9d92ee82b61549fc2c3e0792be165002b8e", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-03-30T13:51:48Z", "type": "commit"}, {"oid": "2cb91b978efccd8872ef8a250a4a1588e8ad5edc", "url": "https://github.com/elastic/elasticsearch/commit/2cb91b978efccd8872ef8a250a4a1588e8ad5edc", "message": "fixing line length", "committedDate": "2020-03-30T13:59:51Z", "type": "commit"}, {"oid": "5e033c4e8925eb9e35f472261ab0e4802bde1671", "url": "https://github.com/elastic/elasticsearch/commit/5e033c4e8925eb9e35f472261ab0e4802bde1671", "message": "Merge branch 'feature/ml-inference-add-infer-config-to-model-config' of github.com:benwtrent/elasticsearch into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-03-30T13:59:57Z", "type": "commit"}, {"oid": "87aacf71b3f25b1b7c033bd0c008ba149f3597ff", "url": "https://github.com/elastic/elasticsearch/commit/87aacf71b3f25b1b7c033bd0c008ba149f3597ff", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-03-31T18:26:29Z", "type": "commit"}, {"oid": "11dfb2a6442d6df584b8d797307540f71c75aa0b", "url": "https://github.com/elastic/elasticsearch/commit/11dfb2a6442d6df584b8d797307540f71c75aa0b", "message": "fixing yaml ttests", "committedDate": "2020-03-31T19:11:59Z", "type": "commit"}, {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "url": "https://github.com/elastic/elasticsearch/commit/29b337a6a2c5286ae79d7c79932f3925cfc131f1", "message": "fixing test", "committedDate": "2020-03-31T19:54:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Mzg4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401183887", "bodyText": "I think the new object needs to be added in the definitions section too (e.g. https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference.html#ml-put-inference-trained-model)", "author": "lcawl", "createdAt": "2020-03-31T20:10:08Z", "path": "docs/java-rest/high-level/ml/put-trained-model.asciidoc", "diffHunk": "@@ -39,6 +39,8 @@ include-tagged::{doc-tests-file}[{api}-config]\n <5> Optionally, a human-readable description\n <6> Optionally, an object map contain metadata about the model\n <7> Optionally, an array of tags to organize the model\n+<8> The default inference config to use with the model. Must match the underlying", "originalCommit": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMzY3MA==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401623670", "bodyText": "Is -1 valid for numTopClasses", "author": "davidkyle", "createdAt": "2020-04-01T13:41:15Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/ml/inference/trainedmodel/ClassificationConfigTests.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.test.AbstractXContentTestCase;\n+\n+import java.io.IOException;\n+\n+public class ClassificationConfigTests extends AbstractXContentTestCase<ClassificationConfig> {\n+\n+    public static ClassificationConfig randomClassificationConfig() {\n+        return new ClassificationConfig(randomBoolean() ? null : randomIntBetween(-1, 10),", "originalCommit": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MDkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401780900", "bodyText": "Yes, indicates \"_all\"", "author": "benwtrent", "createdAt": "2020-04-01T17:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMzY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5OTMyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401699329", "bodyText": "Flip the test around so you call equals on the one you've proved to be non-null.\nresultsField == null || resultsField.equals(originalConfig.getResultsField())\nI know getResultsField() can't return null as it has a default value but it seems sensible to reverse it anyway. Also topClassesResultsField below", "author": "davidkyle", "createdAt": "2020-04-01T15:21:13Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/ClassificationConfigUpdate.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.NUM_TOP_CLASSES;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.NUM_TOP_FEATURE_IMPORTANCE_VALUES;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.RESULTS_FIELD;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.TOP_CLASSES_RESULTS_FIELD;\n+\n+public class ClassificationConfigUpdate implements InferenceConfigUpdate<ClassificationConfig> {\n+\n+    public static final ParseField NAME = new ParseField(\"classification\");\n+\n+    public static ClassificationConfigUpdate EMPTY_PARAMS =\n+        new ClassificationConfigUpdate(null, null, null, null);\n+\n+    private final Integer numTopClasses;\n+    private final String topClassesResultsField;\n+    private final String resultsField;\n+    private final Integer numTopFeatureImportanceValues;\n+\n+    public static ClassificationConfigUpdate fromMap(Map<String, Object> map) {\n+        Map<String, Object> options = new HashMap<>(map);\n+        Integer numTopClasses = (Integer)options.remove(NUM_TOP_CLASSES.getPreferredName());\n+        String topClassesResultsField = (String)options.remove(TOP_CLASSES_RESULTS_FIELD.getPreferredName());\n+        String resultsField = (String)options.remove(RESULTS_FIELD.getPreferredName());\n+        Integer featureImportance = (Integer)options.remove(NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName());\n+\n+        if (options.isEmpty() == false) {\n+            throw ExceptionsHelper.badRequestException(\"Unrecognized fields {}.\", options.keySet());\n+        }\n+        return new ClassificationConfigUpdate(numTopClasses, resultsField, topClassesResultsField, featureImportance);\n+    }\n+\n+    public static ClassificationConfigUpdate fromConfig(ClassificationConfig config) {\n+        return new ClassificationConfigUpdate(config.getNumTopClasses(),\n+            config.getResultsField(),\n+            config.getTopClassesResultsField(),\n+            config.getNumTopFeatureImportanceValues());\n+    }\n+\n+    private static final ObjectParser<ClassificationConfigUpdate.Builder, Void> STRICT_PARSER = createParser(false);\n+\n+    private static ObjectParser<ClassificationConfigUpdate.Builder, Void> createParser(boolean lenient) {\n+        ObjectParser<ClassificationConfigUpdate.Builder, Void> parser = new ObjectParser<>(\n+            NAME.getPreferredName(),\n+            lenient,\n+            ClassificationConfigUpdate.Builder::new);\n+        parser.declareInt(ClassificationConfigUpdate.Builder::setNumTopClasses, NUM_TOP_CLASSES);\n+        parser.declareString(ClassificationConfigUpdate.Builder::setResultsField, RESULTS_FIELD);\n+        parser.declareString(ClassificationConfigUpdate.Builder::setTopClassesResultsField, TOP_CLASSES_RESULTS_FIELD);\n+        parser.declareInt(ClassificationConfigUpdate.Builder::setNumTopFeatureImportanceValues, NUM_TOP_FEATURE_IMPORTANCE_VALUES);\n+        return parser;\n+    }\n+\n+    public static ClassificationConfigUpdate fromXContentStrict(XContentParser parser) {\n+        return STRICT_PARSER.apply(parser, null).build();\n+    }\n+\n+    public ClassificationConfigUpdate(Integer numTopClasses,\n+                                      String resultsField,\n+                                      String topClassesResultsField,\n+                                      Integer featureImportance) {\n+        this.numTopClasses = numTopClasses;\n+        this.topClassesResultsField = topClassesResultsField;\n+        this.resultsField = resultsField;\n+        if (featureImportance != null && featureImportance < 0) {\n+            throw new IllegalArgumentException(\"[\" + NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName() +\n+                \"] must be greater than or equal to 0\");\n+        }\n+        this.numTopFeatureImportanceValues = featureImportance;\n+    }\n+\n+    public ClassificationConfigUpdate(StreamInput in) throws IOException {\n+        this.numTopClasses = in.readOptionalInt();\n+        this.topClassesResultsField = in.readOptionalString();\n+        this.resultsField = in.readOptionalString();\n+        this.numTopFeatureImportanceValues = in.readOptionalVInt();\n+    }\n+\n+    public Integer getNumTopClasses() {\n+        return numTopClasses;\n+    }\n+\n+    public String getTopClassesResultsField() {\n+        return topClassesResultsField;\n+    }\n+\n+    public String getResultsField() {\n+        return resultsField;\n+    }\n+\n+    public Integer getNumTopFeatureImportanceValues() {\n+        return numTopFeatureImportanceValues;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeOptionalInt(numTopClasses);\n+        out.writeOptionalString(topClassesResultsField);\n+        out.writeOptionalString(resultsField);\n+        out.writeOptionalVInt(numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClassificationConfigUpdate that = (ClassificationConfigUpdate) o;\n+        return Objects.equals(numTopClasses, that.numTopClasses)\n+            && Objects.equals(topClassesResultsField, that.topClassesResultsField)\n+            && Objects.equals(resultsField, that.resultsField)\n+            && Objects.equals(numTopFeatureImportanceValues, that.numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(numTopClasses, topClassesResultsField, resultsField, numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        if (numTopClasses != null) {\n+            builder.field(NUM_TOP_CLASSES.getPreferredName(), numTopClasses);\n+        }\n+        if (topClassesResultsField != null) {\n+            builder.field(TOP_CLASSES_RESULTS_FIELD.getPreferredName(), topClassesResultsField);\n+        }\n+        if (resultsField != null) {\n+            builder.field(RESULTS_FIELD.getPreferredName(), resultsField);\n+        }\n+        if (numTopFeatureImportanceValues != null) {\n+            builder.field(NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName(), numTopFeatureImportanceValues);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    @Override\n+    public ClassificationConfig apply(ClassificationConfig originalConfig) {\n+        if (isNoop(originalConfig)) {\n+            return originalConfig;\n+        }\n+        ClassificationConfig.Builder builder = new ClassificationConfig.Builder(originalConfig);\n+        if (resultsField != null) {\n+            builder.setResultsField(resultsField);\n+        }\n+        if (numTopFeatureImportanceValues != null) {\n+            builder.setNumTopFeatureImportanceValues(numTopFeatureImportanceValues);\n+        }\n+        if (topClassesResultsField != null) {\n+            builder.setTopClassesResultsField(topClassesResultsField);\n+        }\n+        if (numTopClasses != null) {\n+            builder.setNumTopClasses(numTopClasses);\n+        }\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public InferenceConfig toConfig() {\n+        return apply(ClassificationConfig.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public boolean isSupported(InferenceConfig inferenceConfig) {\n+        return inferenceConfig instanceof ClassificationConfig;\n+    }\n+\n+    boolean isNoop(ClassificationConfig originalConfig) {\n+        return (resultsField == null || originalConfig.getResultsField().equals(resultsField))", "originalCommit": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTAxNg==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401781016", "bodyText": "roger", "author": "benwtrent", "createdAt": "2020-04-01T17:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5OTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMDk3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401730971", "bodyText": "Let RegressionConfig pick the default value (it does this in the constructor anyway)\nRegressionConfig(RegressionConfig.DEFAULT_RESULTS_FIELD,\n                    regression.getBoostedTreeParams().getNumTopFeatureImportanceValues())", "author": "davidkyle", "createdAt": "2020-04-01T16:04:06Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java", "diffHunk": "@@ -231,9 +235,37 @@ private TrainedModelConfig createTrainedModelConfig(TrainedModelDefinition.Build\n             .setInput(new TrainedModelInput(fieldNamesWithoutDependentVariable))\n             .setLicenseLevel(License.OperationMode.PLATINUM.description())\n             .setDefaultFieldMap(defaultFieldMapping)\n+            .setInferenceConfig(buildInferenceConfig(definition.getTrainedModel().targetType()))\n             .build();\n     }\n \n+    private InferenceConfig buildInferenceConfig(TargetType targetType) {\n+        switch (targetType) {\n+            case CLASSIFICATION:\n+                assert analytics.getAnalysis() instanceof Classification;\n+                Classification classification = ((Classification)analytics.getAnalysis());\n+                return new ClassificationConfig(classification.getNumTopClasses(),\n+                    ClassificationConfig.DEFAULT_RESULTS_FIELD,\n+                    ClassificationConfig.DEFAULT_TOP_CLASSES_RESULTS_FIELD,\n+                    classification.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :\n+                        classification.getBoostedTreeParams().getNumTopFeatureImportanceValues());\n+            case REGRESSION:\n+                assert analytics.getAnalysis() instanceof Regression;\n+                Regression regression = ((Regression)analytics.getAnalysis());\n+                return new RegressionConfig(RegressionConfig.DEFAULT_RESULTS_FIELD,\n+                    regression.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :", "originalCommit": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMTY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401731642", "bodyText": "Same with ClassificationConfig", "author": "davidkyle", "createdAt": "2020-04-01T16:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMDk3MQ=="}], "type": "inlineReview"}, {"oid": "8d5df0c768e1fd4ea14e4cb5ff8eda4f91a7dda7", "url": "https://github.com/elastic/elasticsearch/commit/8d5df0c768e1fd4ea14e4cb5ff8eda4f91a7dda7", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-04-01T18:42:42Z", "type": "commit"}, {"oid": "5a648217c086bac3abe6549d6c021f491c780817", "url": "https://github.com/elastic/elasticsearch/commit/5a648217c086bac3abe6549d6c021f491c780817", "message": "addressing PR comments", "committedDate": "2020-04-01T19:06:12Z", "type": "commit"}, {"oid": "a28ceaa03509b6dcc64d4017bcfcd5c6313dada4", "url": "https://github.com/elastic/elasticsearch/commit/a28ceaa03509b6dcc64d4017bcfcd5c6313dada4", "message": "fixing potential npe in inference config builder", "committedDate": "2020-04-01T20:14:31Z", "type": "commit"}, {"oid": "0bd9d71c3fb6496376184b2cfcd0b40683375363", "url": "https://github.com/elastic/elasticsearch/commit/0bd9d71c3fb6496376184b2cfcd0b40683375363", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-04-01T20:47:08Z", "type": "commit"}, {"oid": "446cbaeb1eff348da7d4562256ad16df55c52512", "url": "https://github.com/elastic/elasticsearch/commit/446cbaeb1eff348da7d4562256ad16df55c52512", "message": "[DOCS] Revamps shared inference_config sections", "committedDate": "2020-04-01T23:06:48Z", "type": "commit"}, {"oid": "1e872853f3782d4325cc783108981bc0c9532474", "url": "https://github.com/elastic/elasticsearch/commit/1e872853f3782d4325cc783108981bc0c9532474", "message": "[DOCS] Collapse sections in put trained model API", "committedDate": "2020-04-01T23:19:41Z", "type": "commit"}, {"oid": "fd7d6b1d1fdf469be81b096e756a60ba1e9befc1", "url": "https://github.com/elastic/elasticsearch/commit/fd7d6b1d1fdf469be81b096e756a60ba1e9befc1", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-04-01T23:23:36Z", "type": "commit"}, {"oid": "f949b5a13fc0fea8dc02febe0fc271810b6dd17e", "url": "https://github.com/elastic/elasticsearch/commit/f949b5a13fc0fea8dc02febe0fc271810b6dd17e", "message": "fixing docs", "committedDate": "2020-04-02T13:26:36Z", "type": "commit"}, {"oid": "6d3a011d28057d105f3f56f985d535e56c86f00a", "url": "https://github.com/elastic/elasticsearch/commit/6d3a011d28057d105f3f56f985d535e56c86f00a", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config", "committedDate": "2020-04-02T13:48:24Z", "type": "commit"}]}