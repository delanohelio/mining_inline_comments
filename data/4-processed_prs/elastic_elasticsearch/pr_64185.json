{"pr_number": 64185, "pr_title": "[DOCS] Add top-level Data management section.", "pr_createdAt": "2020-10-26T22:21:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64185", "timeline": [{"oid": "f90533e562a9b9a0523cc7f023e4c30fdf219bfa", "url": "https://github.com/elastic/elasticsearch/commit/f90533e562a9b9a0523cc7f023e4c30fdf219bfa", "message": "[DOCS] Add top-level Data management section.", "committedDate": "2020-10-26T22:15:19Z", "type": "commit"}, {"oid": "19de78796381a2b4fb27101e55224a62d4165e00", "url": "https://github.com/elastic/elasticsearch/commit/19de78796381a2b4fb27101e55224a62d4165e00", "message": "Edits", "committedDate": "2020-10-26T22:43:42Z", "type": "commit"}, {"oid": "5571b871f20598d888adb18fa9cdad37e401b2ca", "url": "https://github.com/elastic/elasticsearch/commit/5571b871f20598d888adb18fa9cdad37e401b2ca", "message": "Edits", "committedDate": "2020-10-26T23:52:22Z", "type": "commit"}, {"oid": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "url": "https://github.com/elastic/elasticsearch/commit/dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "message": "Fixed xrefs", "committedDate": "2020-10-26T23:53:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NTc2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512465769", "bodyText": "I believe the collection term is already established/taken in the industry when it comes to content/storing documents. collection of content sounds a bit odd to me as content, when it comes to storing data, already includes/implies multiple documents.\nI think we should just call it content. What do you think?", "author": "andreidan", "createdAt": "2020-10-27T07:29:46Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3OTg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512879874", "bodyText": "Yeah, \"collection of content\" sounds a little weird, perhaps:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A collection of content you want to search such as a catalog of products\n          \n          \n            \n            * A collection of items you want to search, such as a catalog of products", "author": "dakrone", "createdAt": "2020-10-27T17:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NTc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2Njk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512466994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Content collections might be frequently updated, \n          \n          \n            \n            The content type of data might be frequently updated,", "author": "andreidan", "createdAt": "2020-10-27T07:32:32Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2Nzg5MA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512467890", "bodyText": "as mentioned above, I believe we shouldn't use collection of content", "author": "andreidan", "createdAt": "2020-10-27T07:34:38Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2ODIyNw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512468227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to automatically transition your time series  data through the hot, warm, and cold tiers \n          \n          \n            \n            to automatically transition your time series data through the hot, warm, and cold tiers", "author": "andreidan", "createdAt": "2020-10-27T07:35:21Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MTQzNw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512471437", "bodyText": "Should this be split into multiple sentences? (ie. to avoid the need for \"--\")", "author": "andreidan", "createdAt": "2020-10-27T07:42:11Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.\n+Unlike time series data, the value of the content remains relatively constant over time,\n+so it doesn't make sense to move it to a tier with different performance characteristics as it ages. \n+Content data typically has long data retention requirements, and you want to be able to retrieve \n+items quickly regardless of how old they are. \n+\n+Content tier nodes are usually optimized for query performance--they prioritize processing power over IO throughput\n+so they can process complex searches and aggregations and return results quickly.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NzcwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512997701", "bodyText": "I like it as a single sentence since the em dash signifies a relation between the two statements, almost like a colon. It's probably personal preference though :)", "author": "dakrone", "createdAt": "2020-10-27T20:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MTQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzgwMA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512473800", "bodyText": "I think \"collection of things\" is very vague (eg. my mind went to internet of things generated data stored in mongodb). I believe \"user-created content\" describes the content data type more accurately.", "author": "andreidan", "createdAt": "2020-10-27T07:47:05Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5Njc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512996761", "bodyText": "I agree that things is too generic, I think \"items\" (or even \"documents\") would fit better.", "author": "dakrone", "createdAt": "2020-10-27T20:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3OTg4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512479889", "bodyText": "I believe we should still mention the hot/warm/cold architecture and how data tiers tie into it/drive the implementation further.", "author": "andreidan", "createdAt": "2020-10-27T07:59:11Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MDU2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512880564", "bodyText": "I think we could disambiguate \"time series data\" here to either link to a definition, or expand that we mean \"data with a timestamp attached\"", "author": "dakrone", "createdAt": "2020-10-27T17:20:32Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MzUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512993522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Time series data just keeps accumulating over time, so you need strategies for \n          \n          \n            \n            Time series data keeps accumulating over time, so we need strategies for", "author": "dakrone", "createdAt": "2020-10-27T20:00:26Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MzY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512993647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            so you can move it to less expensive, less performant hardware. \n          \n          \n            \n            so we can move it to less expensive, less performant hardware.", "author": "dakrone", "createdAt": "2020-10-27T20:00:41Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for \n+balancing the value of the data against the cost of storing it. \n+As it ages, it tends to become less important and less-frequently accessed, \n+so you can move it to less expensive, less performant hardware. ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MzY2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513083664", "bodyText": "We generally avoid \"we\" in favor of \"you\" unless it's in the context of a recommendation.", "author": "debadair", "createdAt": "2020-10-27T23:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MzY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5Mzc2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512993765", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            all that really matters is that you can access it. \n          \n          \n            \n            all that really matters is that we can access the data.", "author": "dakrone", "createdAt": "2020-10-27T20:00:54Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for \n+balancing the value of the data against the cost of storing it. \n+As it ages, it tends to become less important and less-frequently accessed, \n+so you can move it to less expensive, less performant hardware. \n+For your oldest data, it doesn\u2019t really matter how long queries take, \n+all that really matters is that you can access it. ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NDM5OA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512994398", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To help you manage your data, {es} enables you to:\n          \n          \n            \n            To help you manage your data, {es} enables us to:", "author": "dakrone", "createdAt": "2020-10-27T20:02:04Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for \n+balancing the value of the data against the cost of storing it. \n+As it ages, it tends to become less important and less-frequently accessed, \n+so you can move it to less expensive, less performant hardware. \n+For your oldest data, it doesn\u2019t really matter how long queries take, \n+all that really matters is that you can access it. \n+\n+To help you manage your data, {es} enables you to:", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NTEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512995102", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n          \n          \n            \n            We can assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`.", "author": "dakrone", "createdAt": "2020-10-27T20:03:24Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NTIwNw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512995207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, you might assign your highest-performance nodes to both the hot and content tiers:\n          \n          \n            \n            For example, we might assign your highest-performance nodes to both the hot and content tiers:", "author": "dakrone", "createdAt": "2020-10-27T20:03:36Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMjA3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513612073", "bodyText": "I still believe this one should be changed to \"we\" since it is in the context of \"talking about doing something\"", "author": "dakrone", "createdAt": "2020-10-28T17:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NjI0MA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512996240", "bodyText": "In general, we stick to single-line arrays in our example elasticsearch.yml (also less of a chance of indentation causing an invalid config problem), so I think I'd prefer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            node.roles:\n          \n          \n            \n               - data_hot\n          \n          \n            \n               - data_content\n          \n          \n            \n            node.roles: [\"data_hot\", \"data_content\"]", "author": "dakrone", "createdAt": "2020-10-27T20:05:28Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NzA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512997085", "bodyText": ":)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Content tier nodes are usually optimized for query performance--they prioritize processing power over IO throughput\n          \n          \n            \n            Content tier nodes are usually optimized for query performance\u2014they prioritize processing power over IO throughput", "author": "dakrone", "createdAt": "2020-10-27T20:07:00Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.\n+Unlike time series data, the value of the content remains relatively constant over time,\n+so it doesn't make sense to move it to a tier with different performance characteristics as it ages. \n+Content data typically has long data retention requirements, and you want to be able to retrieve \n+items quickly regardless of how old they are. \n+\n+Content tier nodes are usually optimized for query performance--they prioritize processing power over IO throughput", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzM2OA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513093368", "bodyText": "This renders the same, so I generally don't worry about it. :-)", "author": "debadair", "createdAt": "2020-10-27T23:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NzA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5ODU3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r512998579", "bodyText": "We don't specifically make updates non-supported on the cold tier\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The cold tier is still a responsive query tier, but does not support updates.\n          \n          \n            \n            The cold tier is still a responsive query tier, and data is usually never updated.", "author": "dakrone", "createdAt": "2020-10-27T20:09:48Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.\n+Unlike time series data, the value of the content remains relatively constant over time,\n+so it doesn't make sense to move it to a tier with different performance characteristics as it ages. \n+Content data typically has long data retention requirements, and you want to be able to retrieve \n+items quickly regardless of how old they are. \n+\n+Content tier nodes are usually optimized for query performance--they prioritize processing power over IO throughput\n+so they can process complex searches and aggregations and return results quickly.\n+While they are also responsible for indexing, content data is generally not ingested at as high a rate\n+as time series data such as logs and metrics. From a resiliency perspective the indices in this\n tier should be configured to use one or more replicas.\n \n-NOTE: new indices that are part of a <<data-streams, data stream>> will be automatically allocated to the\n-<<hot-tier>>\n+New indices are automatically allocated to the <<content-tier>> unless they are part of a data stream.\n+\n+[discrete]\n+[[hot-tier]]\n+=== Hot tier\n \n+The hot tier is the {es} entry point for time series data and holds your most-recent, \n+most-frequently-searched time series data. \n+Nodes in the hot tier need to be fast for both reads and writes, \n+which requires more hardware resources and faster storage (SSDs). \n+For resiliency, indices in the hot tier should be configured to use one or more replicas.\n+\n+New indices that are part of a <<data-streams, data stream>> are automatically allocated to the\n+hot tier.\n+\n+[discrete]\n [[warm-tier]]\n-==== Warm tier\n+=== Warm tier\n \n-The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n-This tier is where data goes once it is not queried as frequently as in the <<hot-tier, hot tier>>.\n-It is a medium-fast tier that still allows data updates. The warm tier is usually\n-hosting the data from recent weeks. From a resiliency perspective the indices in this\n-tier should be configured to use one or more replicas.\n+Time series data can move to the warm tier once it is being queried less frequently \n+than the recently-indexed data in the hot tier. \n+The warm tier typically holds data from recent weeks. \n+Updates are still allowed, but likely infrequent.\n+Nodes in the warm tier generally don't need to be as fast as those in the hot tier. \n+For resiliency, indices in the warm tier should be configured to use one or more replicas.\n \n+[discrete]\n [[cold-tier]]\n-==== Cold tier\n+=== Cold tier\n \n-The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n-Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n-cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n-tier it can be compressed, shrunken, or configured to have zero replicas and be backed by\n-a <<ilm-searchable-snapshot, snapshot>>. The cold tier is usually hosting the data from recent\n-months or years.\n+Once data in the warm tier is no longer being updated, it can move to the cold tier. \n+The cold tier typically holds the data from recent months or years.\n+The cold tier is still a responsive query tier, but does not support updates.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MTA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513081041", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A collection of content you want to search such as a catalog of products\n          \n          \n            \n            * Content: a collection of items you want to search, such as a catalog of products", "author": "debadair", "createdAt": "2020-10-27T22:57:15Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MTIxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513081219", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A stream of continuously-generated time series data such as log entries\n          \n          \n            \n            * Time series data: a stream of continuously-generated timestamped data, such as log entries", "author": "debadair", "createdAt": "2020-10-27T22:57:48Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MjEyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513082125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Content collections might be frequently updated, \n          \n          \n            \n            Content might be frequently updated,", "author": "debadair", "createdAt": "2020-10-27T23:00:11Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MjQ1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513082454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Time series data just keeps accumulating over time, so you need strategies for \n          \n          \n            \n            Time series data keeps accumulating over time, so you need strategies for", "author": "debadair", "createdAt": "2020-10-27T23:01:03Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDY4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513090681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For your oldest data, it doesn\u2019t really matter how long queries take, \n          \n          \n            \n            all that really matters is that you can access it. \n          \n          \n            \n            For your oldest data, what matters is that you have access to the data. \n          \n          \n            \n            It's ok if queries take longer to complete.", "author": "debadair", "createdAt": "2020-10-27T23:25:42Z", "path": "docs/reference/data-management.asciidoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[role=\"xpack\"]\n+[[data-management]]\n+= Data management\n+\n+[partintro]\n+--\n+The data you store in {es} generally falls into one of two categories:\n+\n+* A collection of content you want to search such as a catalog of products\n+* A stream of continuously-generated time series data such as log entries\n+\n+Content collections might be frequently updated, \n+but the value of the content remains relatively constant over time. \n+You want to be able to retrieve items quickly regardless of how old they are. \n+\n+Time series data just keeps accumulating over time, so you need strategies for \n+balancing the value of the data against the cost of storing it. \n+As it ages, it tends to become less important and less-frequently accessed, \n+so you can move it to less expensive, less performant hardware. \n+For your oldest data, it doesn\u2019t really matter how long queries take, \n+all that really matters is that you can access it. ", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDkxNA==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513090914", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n          \n          \n            \n            of content such as a product catalog.\n          \n          \n            \n            * <<content-tier, Content tier>> nodes handle the indexing and query load for content such as a product catalog.", "author": "debadair", "createdAt": "2020-10-27T23:26:27Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MTI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513091287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Data stored in the content tier is generally a collection of things such as a product catalog or article archive.\n          \n          \n            \n            Data stored in the content tier is generally a collection of items such as a product catalog or article archive.", "author": "debadair", "createdAt": "2020-10-27T23:27:39Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Mjk2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513092969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The cold tier is still a responsive query tier, but does not support updates.\n          \n          \n            \n            The cold tier is still a responsive query tier, but data in the cold tier is not normally updated.", "author": "debadair", "createdAt": "2020-10-27T23:33:14Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,115 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for a collection \n+of content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series  data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:\n \n-The hot tier is made of one or more nodes that have the <<data-hot-node, data_hot>> role.\n-It is the {es} entry point for timeseries data. This tier needs to be fast both for reads\n-and writes, requiring more hardware resources such as SSD drives. The hot tier is usually\n-hosting the data from recent days. From a resiliency perspective the indices in this\n+[source,yaml]\n+--------------------------------------------------\n+node.roles:\n+   - data_hot\n+   - data_content\n+--------------------------------------------------\n+\n+[discrete]\n+[[content-tier]]\n+=== Content tier\n+\n+Data stored in the content tier is generally a collection of things such as a product catalog or article archive.\n+Unlike time series data, the value of the content remains relatively constant over time,\n+so it doesn't make sense to move it to a tier with different performance characteristics as it ages. \n+Content data typically has long data retention requirements, and you want to be able to retrieve \n+items quickly regardless of how old they are. \n+\n+Content tier nodes are usually optimized for query performance--they prioritize processing power over IO throughput\n+so they can process complex searches and aggregations and return results quickly.\n+While they are also responsible for indexing, content data is generally not ingested at as high a rate\n+as time series data such as logs and metrics. From a resiliency perspective the indices in this\n tier should be configured to use one or more replicas.\n \n-NOTE: new indices that are part of a <<data-streams, data stream>> will be automatically allocated to the\n-<<hot-tier>>\n+New indices are automatically allocated to the <<content-tier>> unless they are part of a data stream.\n+\n+[discrete]\n+[[hot-tier]]\n+=== Hot tier\n \n+The hot tier is the {es} entry point for time series data and holds your most-recent, \n+most-frequently-searched time series data. \n+Nodes in the hot tier need to be fast for both reads and writes, \n+which requires more hardware resources and faster storage (SSDs). \n+For resiliency, indices in the hot tier should be configured to use one or more replicas.\n+\n+New indices that are part of a <<data-streams, data stream>> are automatically allocated to the\n+hot tier.\n+\n+[discrete]\n [[warm-tier]]\n-==== Warm tier\n+=== Warm tier\n \n-The warm tier is made of one or more nodes that have the <<data-warm-node, data_warm>> role.\n-This tier is where data goes once it is not queried as frequently as in the <<hot-tier, hot tier>>.\n-It is a medium-fast tier that still allows data updates. The warm tier is usually\n-hosting the data from recent weeks. From a resiliency perspective the indices in this\n-tier should be configured to use one or more replicas.\n+Time series data can move to the warm tier once it is being queried less frequently \n+than the recently-indexed data in the hot tier. \n+The warm tier typically holds data from recent weeks. \n+Updates are still allowed, but likely infrequent.\n+Nodes in the warm tier generally don't need to be as fast as those in the hot tier. \n+For resiliency, indices in the warm tier should be configured to use one or more replicas.\n \n+[discrete]\n [[cold-tier]]\n-==== Cold tier\n+=== Cold tier\n \n-The cold tier is made of one or more nodes that have the <<data-cold-node, data_cold>> role.\n-Once the data in the <<warm-tier, warm tier>> is not updated anymore it can transition to the\n-cold tier. The cold tier is still a responsive query tier but as the data transitions into this\n-tier it can be compressed, shrunken, or configured to have zero replicas and be backed by\n-a <<ilm-searchable-snapshot, snapshot>>. The cold tier is usually hosting the data from recent\n-months or years.\n+Once data in the warm tier is no longer being updated, it can move to the cold tier. \n+The cold tier typically holds the data from recent months or years.\n+The cold tier is still a responsive query tier, but does not support updates.", "originalCommit": "dbaa43ed719f801a8a2bda3109d2d1f88b50698e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e8aa3d7ebeb54b6ece927918713add286d12dfe", "url": "https://github.com/elastic/elasticsearch/commit/6e8aa3d7ebeb54b6ece927918713add286d12dfe", "message": "Apply suggestions from code review\n\nCo-authored-by: Andrei Dan <andrei.dan@elastic.co>\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-10-27T23:40:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5MjY5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513792691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n          \n          \n            \n            For example, you might assign your highest-performance nodes to both the hot and content tiers:\n          \n          \n            \n            A node's <<data-node, data role>> is configured in `elasticsearch.yml`. \n          \n          \n            \n            For example, the highest-performance nodes in a cluster might be assigned to both the hot and content tiers:", "author": "debadair", "createdAt": "2020-10-28T22:11:38Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,112 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n \n-NOTE: new indices that are not part of <<data-streams, data streams>> will be automatically allocated to the\n-<<content-tier>>\n+When you index documents directly to a specific index, they remain on content tier nodes indefinitely. \n \n-[[hot-tier]]\n-==== Hot tier\n+When you index documents to a data stream, they initially reside on hot tier nodes. \n+You can configure <<index-lifecycle-management, {ilm}>> ({ilm-init}) policies\n+to automatically transition your time series data through the hot, warm, and cold tiers \n+according to your performance, resiliency and data retention requirements. \n+\n+You assign a node to one or more data tiers by setting its <<data-node, data role>> in `elasticsearch.yml`. \n+For example, you might assign your highest-performance nodes to both the hot and content tiers:", "originalCommit": "6e8aa3d7ebeb54b6ece927918713add286d12dfe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bddd3bba326f5e70b75f291d959d059c0a3e1973", "url": "https://github.com/elastic/elasticsearch/commit/bddd3bba326f5e70b75f291d959d059c0a3e1973", "message": "Update docs/reference/datatiers.asciidoc", "committedDate": "2020-10-28T22:11:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NzQ5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64185#discussion_r513797495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.\n          \n          \n            \n            * <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and not normally updated.", "author": "debadair", "createdAt": "2020-10-28T22:23:20Z", "path": "docs/reference/datatiers.asciidoc", "diffHunk": "@@ -1,100 +1,112 @@\n [role=\"xpack\"]\n [[data-tiers]]\n-=== Data tiers\n-\n-Common data lifecycle management patterns revolve around transitioning indices\n-through multiple collections of nodes with different hardware characteristics in order\n-to fulfil evolving CRUD, search, and aggregation needs as indices age. The concept\n-of a tiered hardware architecture is not new in {es}.\n-<<index-lifecycle-management, Index Lifecycle Management>> is instrumental in\n-implementing tiered architectures by automating the managemnt of indices according to\n-performance, resiliency and data retention requirements.\n-<<overview-index-lifecycle-management, Hot/warm/cold>> architectures are common\n-for timeseries data such as logging and metrics.\n-\n-A data tier is a collection of nodes with the same role. Data tiers are an integrated\n-solution offering better support for optimising cost and improving performance.\n-Formalized data tiers in ES allow configuration of the lifecycle and location of data\n-in a hot/warm/cold topology without requiring the use of custom node attributes.\n-Each tier formalises specific characteristics and data behaviours.\n-\n-The node roles that can currently define data tiers are:\n-\n-* <<data-content-node, data_content>>\n-* <<data-hot-node, data_hot>>\n-* <<data-warm-node, data_warm>>\n-* <<data-cold-node, data_cold>>\n-\n-The more generic <<data-node, data role>> is not a data tier role, but\n-it is the default node role if no roles are configured. If a node has the\n-<<data-node, data>> role we treat the node as if it has all of the tier\n-roles assigned.\n+== Data tiers\n \n-[[content-tier]]\n-==== Content tier\n+A _data tier_ is a collection of nodes with the same data role that \n+typically share the same hardware profile: \n \n-The content tier is made of one or more nodes that have the <<data-content-node, data_content>>\n-role. A content tier is designed to store and search user created content. Non-timeseries data\n-doesn't necessarily follow the hot-warm-cold path. The hardware profiles are quite different to\n-the <<hot-tier, hot tier>>. User created content prioritises high CPU to support complex\n-queries and aggregations in a timely manner, as opposed to the <<hot-tier, hot tier>> which\n-prioritises high IO.\n-The content data has very long data retention characteristics and from a resiliency perspective\n-the indices in this tier should be configured to use one or more replicas.\n+* <<content-tier, Content tier>> nodes handle the indexing and query load for content such as a product catalog.\n+* <<hot-tier, Hot tier>> nodes handle the indexing load for time series data such as logs or metrics\n+and hold your most recent, most-frequently-accessed data. \n+* <<warm-tier, Warm tier>> nodes hold time series data that is accessed less-frequently \n+and rarely needs to be updated.\n+* <<cold-tier, Cold tier>> nodes hold time series data that is accessed occasionally and never updated.", "originalCommit": "bddd3bba326f5e70b75f291d959d059c0a3e1973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7740c70875c636019bfc8aba49a63ffceb00749b", "url": "https://github.com/elastic/elasticsearch/commit/7740c70875c636019bfc8aba49a63ffceb00749b", "message": "Update docs/reference/datatiers.asciidoc", "committedDate": "2020-10-28T22:23:27Z", "type": "commit"}]}