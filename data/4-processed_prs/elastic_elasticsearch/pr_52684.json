{"pr_number": 52684, "pr_title": "Simplify ml license checking with XpackLicenseState internals", "pr_createdAt": "2020-02-23T23:56:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52684", "timeline": [{"oid": "5cc94e66ede6437f04518d1f6db8a2c674272d98", "url": "https://github.com/elastic/elasticsearch/commit/5cc94e66ede6437f04518d1f6db8a2c674272d98", "message": "Simplify license checking with XpackLicenseState internals", "committedDate": "2020-02-23T23:35:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383151332", "bodyText": "isAllowedByLicense(OperationMode) calls isAllowedByLicense(minimumMode, true, true) which is different to the previous code.", "author": "davidkyle", "createdAt": "2020-02-24T09:23:40Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -237,18 +237,7 @@ public long getEstimatedOperations() {\n     }\n \n     public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n-        // Basic is always true\n-        if (licenseLevel.equals(License.OperationMode.BASIC)) {\n-            return true;\n-        }\n-\n-        // The model license does not matter, Platinum license gets the same functions as the highest license\n-        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)) {\n-            return true;\n-        }\n-\n-        // catch the rest, if the license is active and is at least the required model license\n-        return licenseState.isAllowedByLicense(licenseLevel, true, false);\n+        return licenseState.isAllowedByLicense(licenseLevel);", "originalCommit": "5cc94e66ede6437f04518d1f6db8a2c674272d98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5NzQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383197480", "bodyText": "Thanks David. You are right that this call is different from the previous code. The difference is that the previous one does not allow trial license while the current one does. But their behaviours are actually not different when examined in the context of preceding code.\nIn the previous version, above this line, there is another check:\nif (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)) {\n    return true;\n}\nIf the license is trial mode, it will be allowed already by the above check and will never reach the second check, i.e. it makes no difference whether the 2nd isAllowedByLicense is called with true or false for trial license, since the 1st check short-curcuits the logic for trial license.\nWith above being said, there is indeed a behaviour difference: previously platinum license is considered as highest and is guaranteed to be allowed. With this change, only Enterprise is guaranteed to be allowed. While writing this, I think we can achieve the same behaviour by change the code to:\nreturn License.OperationMode.PLATINUM.compareTo(licenseState.getOperationMode()) <= 0 \n    || licenseState.isAllowedByLicense(licenseLevel);", "author": "ywangd", "createdAt": "2020-02-24T10:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMDM2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383210367", "bodyText": "Above suggest code snippet has a racing issue as the licenseState could change between two calls. To remove potential racing issue was a motivation for this PR. Sorry yet I suggested another one. A better one should be as the follows:\nfinal License.OperationMode minimumMode =\n    License.OperationMode.PLATINUM.compareTo(licenseLevel) < 0 \n        ? License.OperationMode.PLATINUM : licenseLevel;\nreturn licenseState.isAllowedByLicense(minimumMode);", "author": "ywangd", "createdAt": "2020-02-24T11:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMzkxMg==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383213912", "bodyText": "Thanks for the explanation it makes sense, there is no need for the additional platinum level check what you have written is better for future proofing. Will you backport this to 7.7?\n@grabowskit do you know why we did not deem a trial licence sufficient for model inference?", "author": "davidkyle", "createdAt": "2020-02-24T11:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxNzgzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383217831", "bodyText": "Just noticed the v7.7.0 label is not applied. But yes I plan to backport this to 7.7.", "author": "ywangd", "createdAt": "2020-02-24T11:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMDc3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383220777", "bodyText": "\ud83d\udc4d\nThere is an argument to backport the trail licence change to 7.6.1 as it would be considered a bug if that is not what we intended. Thanks for finding this", "author": "davidkyle", "createdAt": "2020-02-24T11:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNDAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383224039", "bodyText": "If the intention is \"trial license should always allow access\", this bug does not really manifest itself in 7.6 since the the buggy code is never really triggered. If this is the case, I'd prefer to not backport this to 7.6.1 as it requires a number of other PRs.\nBut if the intention is to \"block trial license for access\", we do need fix it then. In this case, I'd prefer to have a separate PR to fix 7.6.1 specifically to avoid cascading backports.\n@tvernum Do you wanna comment on this? Thanks", "author": "ywangd", "createdAt": "2020-02-24T11:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzE1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383227151", "bodyText": "If the intention is \"trial license should always allow access\"\n\nA trial license should allow all platinum features to be used (see for example https://www.elastic.co/trialextension and https://www.elastic.co/guide/en/elasticsearch/reference/current/start-trial.html#_description_15).  It's a mistake if this wasn't the case before.", "author": "droberts195", "createdAt": "2020-02-24T12:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMDIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383230220", "bodyText": "Thanks @droberts195 That's my understanding as well. In this case, the bug will never be triggered as it is short-circuited by its preceding check.", "author": "ywangd", "createdAt": "2020-02-24T12:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383152293", "bodyText": "The licensing for inference models is not straightforward as different models can be licensed at different levels can we keep these assertions please so we know exactly what the behaviour is. The test that this code calls another piece of code is not sufficient. And for the gold tests below please", "author": "davidkyle", "createdAt": "2020-02-24T09:25:47Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java", "diffHunk": "@@ -307,65 +306,12 @@ public void testSerializationWithCompressedLazyDefinition() throws IOException {\n             .test();\n     }\n \n-    public void testIsAvailableWithLicense() {\n+    public void testIsAvailableWithLicenseWillDelegate() {\n         TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n         XPackLicenseState licenseState = mock(XPackLicenseState.class);\n-\n-        // Reject everything\n-        when(licenseState.isAllowedByLicense(any(License.OperationMode.class), anyBoolean(), anyBoolean())).thenAnswer(\n-            invocationOnMock -> {\n-                final Object[] arguments = invocationOnMock.getArguments();\n-                assertTrue((boolean) arguments[1]); // ensure the call is made to require active license\n-                return false;\n-            }\n-        );\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n-        // Basic license always works not matter what\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n-    }\n-\n-    public void testActivePlatinumLicenseAlwaysWorks() {\n-        TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n-        XPackLicenseState licenseState = mock(XPackLicenseState.class);\n-\n-        when(licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)).thenReturn(true);\n-\n-        // Active Platinum license functions the same as Enterprise license (highest) and should always work\n-        when(licenseState.isAllowedByLicense(any(License.OperationMode.class), anyBoolean(), anyBoolean())).thenAnswer(\n-            invocationOnMock -> {\n-                final Object[] arguments = invocationOnMock.getArguments();\n-                assertEquals(License.OperationMode.PLATINUM, arguments[0]);\n-                assertTrue((boolean) arguments[1]); // ensure the call is made to require active license\n-                assertTrue((boolean) arguments[2]);\n-                return true;\n-            }\n-        );\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));", "originalCommit": "5cc94e66ede6437f04518d1f6db8a2c674272d98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIwMzkwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383203909", "bodyText": "These assertions were removed because the method to be tested was reduced to just a single line which simply makes a call to XPackLicenseState#isAllowedByLicense(licenseLevel).  Since tests use mock object, there really was no other logic to be tested for this method.\nBut if we add some of the original logic back, e.g. the platinum license check as discussed above, the relevant tests are then become necessary again and need to be added back as well.", "author": "ywangd", "createdAt": "2020-02-24T11:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxNjQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383216465", "bodyText": "I know it's a one liner and the mocking makes the test awkward but it may not always be a one-liner if someone refactors the function and I'd prefer to have the safety net of asserting  the expected behaviour.\nThat said, the best kind of code is deleted code so why not remove the method completely and call XPackLicenseState#isAllowedByLicense() directly then the tests can go.", "author": "davidkyle", "createdAt": "2020-02-24T11:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMDI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52684#discussion_r383220286", "bodyText": "This is a great suggestion. I updated the code accordingly.", "author": "ywangd", "createdAt": "2020-02-24T11:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjI5Mw=="}], "type": "inlineReview"}, {"oid": "169c50ca0ea5badd9c6770e1b6a81a4050de283e", "url": "https://github.com/elastic/elasticsearch/commit/169c50ca0ea5badd9c6770e1b6a81a4050de283e", "message": "Address feedback", "committedDate": "2020-02-24T11:46:34Z", "type": "commit"}]}