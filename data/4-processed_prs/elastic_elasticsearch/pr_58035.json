{"pr_number": 58035, "pr_title": "[DOCS] Make ILM documentation data stream aware", "pr_createdAt": "2020-06-12T11:09:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58035", "timeline": [{"oid": "2e4676198f7dcef249d0b69ba19203c9fd81d05b", "url": "https://github.com/elastic/elasticsearch/commit/2e4676198f7dcef249d0b69ba19203c9fd81d05b", "message": "[DOCS] Make ILM documentation data stream aware", "committedDate": "2020-06-11T16:33:55Z", "type": "commit"}, {"oid": "fa37a176b0fc9b4198b4dd5700102326b5c4917d", "url": "https://github.com/elastic/elasticsearch/commit/fa37a176b0fc9b4198b4dd5700102326b5c4917d", "message": "[DOCS] ILM: Add managing indices using alias to tutorial", "committedDate": "2020-06-12T11:07:21Z", "type": "commit"}, {"oid": "4ec540e870ab5e45c0e78e39ed7d3e19847bce7c", "url": "https://github.com/elastic/elasticsearch/commit/4ec540e870ab5e45c0e78e39ed7d3e19847bce7c", "message": "Merge branch 'master' into docs-ilm-data-stream", "committedDate": "2020-06-12T11:10:24Z", "type": "commit"}, {"oid": "ecd3773c6f127b6e4e88284dd03698b4fd07ffb3", "url": "https://github.com/elastic/elasticsearch/commit/ecd3773c6f127b6e4e88284dd03698b4fd07ffb3", "message": "Use delete composable template api", "committedDate": "2020-06-12T11:41:16Z", "type": "commit"}, {"oid": "ab1e2a70a8c579f2d982fb90ab28eac55f1d10df", "url": "https://github.com/elastic/elasticsearch/commit/ab1e2a70a8c579f2d982fb90ab28eac55f1d10df", "message": "Fix tests", "committedDate": "2020-06-12T13:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzMyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439497321", "bodyText": "This is breaking the docs CI test. I'll go ahead and merge this change in.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[ilm-gs-create-policy]]\n          \n          \n            \n            [[manage-time-series-data-without-data-streams]]", "author": "jrodewig", "createdAt": "2020-06-12T15:44:32Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.\n+\n+// [[36818c6d9f434d387819c30bd9addb14]]\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"indices\": {\n+    \".ds-timeseries-000001\": {\n+      \"index\": \".ds-timeseries-000001\",\n+      \"managed\": true,\n+      \"policy\": \"timeseries_policy\",             <1>\n+      \"lifecycle_date_millis\": 1538475653281,\n+      \"age\": \"30s\",                              <2>\n+      \"phase\": \"hot\",\n+      \"phase_time_millis\": 1538475653317,\n+      \"action\": \"rollover\",\n+      \"action_time_millis\": 1538475653317,\n+      \"step\": \"attempt-rollover\",                <3>\n+      \"step_time_millis\": 1538475653317,\n+      \"phase_execution\": {\n+        \"policy\": \"timeseries_policy\",\n+        \"phase_definition\": {                    <4>\n+          \"min_age\": \"0ms\",\n+          \"actions\": {\n+            \"rollover\": {\n+              \"max_size\": \"50gb\",\n+              \"max_age\": \"30d\"\n+            }\n+          }\n+        },\n+        \"version\": 1,\n+        \"modified_date_in_millis\": 1539609701576\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[skip:no way to know if we will get this response immediately]\n+\n+<1> The policy used to manage the index\n+<2> The age of the index\n+<3> The step {ilm-init} is performing on the index\n+<4> The definition of the current phase (the `hot` phase)\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_data_stream/timeseries\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_index_template/timeseries_template\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+[discrete]\n+[[ilm-gs-create-policy]]", "originalCommit": "ab1e2a70a8c579f2d982fb90ab28eac55f1d10df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxOTY0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440019643", "bodyText": "Thanks for fixing this James. It wasn't obvious what the offending piece was from the test failure log output", "author": "andreidan", "createdAt": "2020-06-15T08:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzMyMQ=="}], "type": "inlineReview"}, {"oid": "28b84909eacd98f8be2738dc0058068143dbc47b", "url": "https://github.com/elastic/elasticsearch/commit/28b84909eacd98f8be2738dc0058068143dbc47b", "message": "Update docs/reference/ilm/ilm-tutorial.asciidoc", "committedDate": "2020-06-12T15:44:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMzM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439503360", "bodyText": "Nit: Removes either.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A rollover target can be either a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.\n          \n          \n            \n            A rollover target can be a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.", "author": "jrodewig", "createdAt": "2020-06-12T15:55:41Z", "path": "docs/reference/ilm/actions/ilm-rollover.asciidoc", "diffHunk": "@@ -4,15 +4,21 @@\n \n Phases allowed: hot.\n \n-Rolls an alias over to a new index when the existing index meets one of the rollover conditions.\n+Rolls over a target to a new index when the existing index meets one of the rollover conditions.\n \n-IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>, \n+IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>,\n policy execution waits until the leader index rolls over (or is\n-<<skipping-rollover, otherwise marked complete>>), \n-then converts the follower index into a regular index with the \n+<<skipping-rollover, otherwise marked complete>>),\n+then converts the follower index into a regular index with the\n <<ilm-unfollow-action, Unfollow action>>.\n \n-For a managed index to be rolled over: \n+A rollover target can be either a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwNDI1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439504259", "bodyText": "I don't think we need a link after the first mention. However, I would link to write index\nas this is its first mention on this page.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When targeting a <<data-streams, data stream>>, the new index becomes the data stream's write index\n          \n          \n            \n            When targeting a data stream, the new index becomes the data stream's\n          \n          \n            \n            <<data-stream-write-index,write index>>", "author": "jrodewig", "createdAt": "2020-06-12T15:57:20Z", "path": "docs/reference/ilm/actions/ilm-rollover.asciidoc", "diffHunk": "@@ -4,15 +4,21 @@\n \n Phases allowed: hot.\n \n-Rolls an alias over to a new index when the existing index meets one of the rollover conditions.\n+Rolls over a target to a new index when the existing index meets one of the rollover conditions.\n \n-IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>, \n+IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>,\n policy execution waits until the leader index rolls over (or is\n-<<skipping-rollover, otherwise marked complete>>), \n-then converts the follower index into a regular index with the \n+<<skipping-rollover, otherwise marked complete>>),\n+then converts the follower index into a regular index with the\n <<ilm-unfollow-action, Unfollow action>>.\n \n-For a managed index to be rolled over: \n+A rollover target can be either a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.\n+When targeting a <<data-streams, data stream>>, the new index becomes the data stream's write index", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439511816", "bodyText": "I got a little confused with this sentence:\n\nThe data stream out of the box makes sure the backing index has the correct name pattern, and the write index (ie. latest generation backing index) will be the target index to be rolled over.\n\nAre we trying to say one of the following?\nA. The new write index uses the data stream's naming convention?\nB. Rollover assumes the write index is the backing index with the latest generation?\nC. The rollover validates that the data stream's write index follows the naming convention and is\nthe backing index with the latest generation?\nIf it's any of those cases, I'd consider removing as it feels like an implementation detail. If you decide to keep it, I'd reword and remove the data stream xref.\nIf C, I'd maybe add some context on why this validation is needed (i.e. how a data stream could get into a state that fails the validation).", "author": "jrodewig", "createdAt": "2020-06-12T16:11:13Z", "path": "docs/reference/ilm/actions/ilm-rollover.asciidoc", "diffHunk": "@@ -4,15 +4,21 @@\n \n Phases allowed: hot.\n \n-Rolls an alias over to a new index when the existing index meets one of the rollover conditions.\n+Rolls over a target to a new index when the existing index meets one of the rollover conditions.\n \n-IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>, \n+IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>,\n policy execution waits until the leader index rolls over (or is\n-<<skipping-rollover, otherwise marked complete>>), \n-then converts the follower index into a regular index with the \n+<<skipping-rollover, otherwise marked complete>>),\n+then converts the follower index into a regular index with the\n <<ilm-unfollow-action, Unfollow action>>.\n \n-For a managed index to be rolled over: \n+A rollover target can be either a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.\n+When targeting a <<data-streams, data stream>>, the new index becomes the data stream's write index\n+and its generation is incremented. The <<data-streams, data stream>> out of the box makes sure\n+the backing index has the correct name pattern, and the write index (ie. latest generation\n+backing index) will be the target index to be rolled over.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5NDM2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439594366", "bodyText": "If we do keep it, I think removing the \"out of the box\" phrase might make it a little clearer.", "author": "dakrone", "createdAt": "2020-06-12T19:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNzcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440037702", "bodyText": "Ah I see how confusing it is now. It ties into the previous sentence that states that a new index becomes the data stream's write index. The reason I added this was C @jrodewig (which is one of the data stream's value proposition). I'll drop it all together as it doesn't add much value.", "author": "andreidan", "createdAt": "2020-06-15T09:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMjU1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439512553", "bodyText": "Nit: reword for clarity.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order for an <<indices-aliases, index alias>> target to be rolled over:\n          \n          \n            \n            To roll over an <<indices-aliases, index alias>>, the alias and its write index\n          \n          \n            \n            must meet the following conditions:", "author": "jrodewig", "createdAt": "2020-06-12T16:12:10Z", "path": "docs/reference/ilm/actions/ilm-rollover.asciidoc", "diffHunk": "@@ -4,15 +4,21 @@\n \n Phases allowed: hot.\n \n-Rolls an alias over to a new index when the existing index meets one of the rollover conditions.\n+Rolls over a target to a new index when the existing index meets one of the rollover conditions.\n \n-IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>, \n+IMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>,\n policy execution waits until the leader index rolls over (or is\n-<<skipping-rollover, otherwise marked complete>>), \n-then converts the follower index into a regular index with the \n+<<skipping-rollover, otherwise marked complete>>),\n+then converts the follower index into a regular index with the\n <<ilm-unfollow-action, Unfollow action>>.\n \n-For a managed index to be rolled over: \n+A rollover target can be either a <<data-streams, data stream>> or an <<indices-aliases, index alias>>.\n+When targeting a <<data-streams, data stream>>, the new index becomes the data stream's write index\n+and its generation is incremented. The <<data-streams, data stream>> out of the box makes sure\n+the backing index has the correct name pattern, and the write index (ie. latest generation\n+backing index) will be the target index to be rolled over.\n+\n+In order for an <<indices-aliases, index alias>> target to be rolled over:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMzYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439513630", "bodyText": "Nit: Avoid future tense when able.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the mounted index will replace the original index in the data stream.\n          \n          \n            \n            the mounted index replaces the original index in the data stream.", "author": "jrodewig", "createdAt": "2020-06-12T16:13:28Z", "path": "docs/reference/ilm/actions/ilm-searchable-snapshot.asciidoc", "diffHunk": "@@ -6,6 +6,14 @@ Phases allowed: cold.\n \n Takes a snapshot of the managed index in the configured repository\n and mounts it as a searchable snapshot.\n+If the managed index is part of a <<data-streams, data stream>>,\n+the mounted index will replace the original index in the data stream.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNjc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439516774", "bodyText": "Nits: I reworded to make this a bit more direct.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [NOTE]\n          \n          \n            \n            This action will fail if the managed index is a <<data-streams, data stream's>>\n          \n          \n            \n            write index. Manually rolling over the data stream will change the <<data-streams, data stream's>>\n          \n          \n            \n            write index and the action will be able to continue converting the managed\n          \n          \n            \n            index to a searchable snapshot.\n          \n          \n            \n            [NOTE]\n          \n          \n            \n            This action cannot be performed on a data stream's write index. Attempts to do\n          \n          \n            \n            so will fail. To convert the index to a searchable snapshot, first\n          \n          \n            \n            <<manually-roll-over-a-data-stream,manually roll over>> the data stream. This\n          \n          \n            \n            creates a new write index. Because the index is no longer the stream's write\n          \n          \n            \n            index, the action can then convert it to a searchable snapshot.", "author": "jrodewig", "createdAt": "2020-06-12T16:17:29Z", "path": "docs/reference/ilm/actions/ilm-searchable-snapshot.asciidoc", "diffHunk": "@@ -6,6 +6,14 @@ Phases allowed: cold.\n \n Takes a snapshot of the managed index in the configured repository\n and mounts it as a searchable snapshot.\n+If the managed index is part of a <<data-streams, data stream>>,\n+the mounted index will replace the original index in the data stream.\n+\n+[NOTE]\n+This action will fail if the managed index is a <<data-streams, data stream's>>\n+write index. Manually rolling over the data stream will change the <<data-streams, data stream's>>\n+write index and the action will be able to continue converting the managed\n+index to a searchable snapshot.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440039992", "bodyText": "Thanks, this sounds much better", "author": "andreidan", "createdAt": "2020-06-15T09:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNjc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439525384", "bodyText": "Nit: Reword to match the snapshot action note.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This action will fail if the source index is a <<data-streams, data stream's>>\n          \n          \n            \n            write index. Manually rolling over the data stream will change the\n          \n          \n            \n            <<data-streams, data stream's>> write index and the action will be able to resume\n          \n          \n            \n            shrinking the source index.\n          \n          \n            \n            This action cannot be performed on a data stream's write index. Attempts to do\n          \n          \n            \n            so will fail. To shrink the index, first\n          \n          \n            \n            <<manually-roll-over-a-data-stream,manually roll over>> the data stream. This\n          \n          \n            \n            creates a new write index. Because the index is no longer the stream's write\n          \n          \n            \n            index, the action can resume shrinking it.", "author": "jrodewig", "createdAt": "2020-06-12T16:34:19Z", "path": "docs/reference/ilm/actions/ilm-shrink.asciidoc", "diffHunk": "@@ -21,6 +21,15 @@ policy execution waits until the leader index rolls over (or is\n then converts the follower index into a regular index with the \n <<ilm-unfollow-action,the Unfollow action>> before performing the shrink operation.\n \n+If the managed index is part of a <<data-streams, data stream>>,\n+the shrunken index will replace the original index in the data stream.\n+\n+[NOTE]\n+This action will fail if the source index is a <<data-streams, data stream's>>\n+write index. Manually rolling over the data stream will change the\n+<<data-streams, data stream's>> write index and the action will be able to resume\n+shrinking the source index.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5NTcwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439595709", "bodyText": "I think both of these (both the original and James' suggestion) need to mention that the user could also specify a rollover in their ILM policy, I'm concerned that users will think that in order to use shrink at all (even with an existing rollover in their policy) they will have to manually roll over their index.", "author": "dakrone", "createdAt": "2020-06-12T19:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDUxNg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440044516", "bodyText": "Added a line on this. Good shout Lee", "author": "andreidan", "createdAt": "2020-06-15T09:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTYwNA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439525604", "bodyText": "Nit: avoids future tense.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the shrunken index will replace the original index in the data stream.\n          \n          \n            \n            the shrunken index replaces the original index in the data stream.", "author": "jrodewig", "createdAt": "2020-06-12T16:34:47Z", "path": "docs/reference/ilm/actions/ilm-shrink.asciidoc", "diffHunk": "@@ -21,6 +21,15 @@ policy execution waits until the leader index rolls over (or is\n then converts the follower index into a regular index with the \n <<ilm-unfollow-action,the Unfollow action>> before performing the shrink operation.\n \n+If the managed index is part of a <<data-streams, data stream>>,\n+the shrunken index will replace the original index in the data stream.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyOTQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439529499", "bodyText": "I would add an admon here so index alias users can skip to the appropriate section.\nI choose to focus on non-append-only use cases, but feel free to add others.\nI also tweaked the sentence to say data stream in place of time-series indices.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            To automate rollover and management of time-series indices with {ilm-init}, you:\n          \n          \n            \n            \n          \n          \n            \n            TIP: Data streams are best suited for\n          \n          \n            \n            <<data-streams-append-only,append-only>> use cases. If you need to frequently\n          \n          \n            \n            update or delete existing documents across multiple indices, we recommend\n          \n          \n            \n            using an index alias and index template instead. You can still use ILM to\n          \n          \n            \n            manage and rollover the alias's indices. Skip to\n          \n          \n            \n            <<manage-time-series-data-without-data-streams>>.\n          \n          \n            \n            \n          \n          \n            \n            To automate rollover and management of a data stream with {ilm-init}, you:", "author": "jrodewig", "createdAt": "2020-06-12T16:43:05Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -11,26 +11,28 @@ This tutorial demonstrates how to use {ilm}\n ({ilm-init}) to manage indices that contain time-series data.\n \n When you continuously index timestamped documents into {es},\n-you typically use an index alias so you can periodically roll over to a new index.\n+you typically use a <<data-streams, data stream>> so you can periodically roll over to a\n+new index.\n This enables you to implement a hot-warm-cold architecture to meet your performance\n requirements for your newest data, control costs over time, enforce retention policies,\n and still get the most out of your data.\n \n To automate rollover and management of time-series indices with {ilm-init}, you:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjUzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439532531", "bodyText": "Fixes a typo.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, you might create a `timeseries_template` that is will bootstrap a data stream\n          \n          \n            \n            For example, you might create a `timeseries_template` to use for a future data stream", "author": "jrodewig", "createdAt": "2020-06-12T16:49:12Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODIzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439538231", "bodyText": "Nit: Avoid \"we\" and future tense where possible.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To create a data stream we'll create a composable template with a `data_stream` definition\n          \n          \n            \n            that will specify the lifecycle policy.\n          \n          \n            \n            To set up a data stream, first create a composable template to specify the lifecycle policy. Because\n          \n          \n            \n            the template is for a data stream, it must also include a `data_stream` definition.\n          \n      \n    \n    \n  \n\nI wonder if we should mention other requirements here, specifically a timestamp mapping.", "author": "jrodewig", "createdAt": "2020-06-12T17:00:27Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5NjgzNw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439596837", "bodyText": "Starting the sentence with \"Because\" sounds awkward to me :D my suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To create a data stream we'll create a composable template with a `data_stream` definition\n          \n          \n            \n            that will specify the lifecycle policy.\n          \n          \n            \n            To set up a data stream, first create a composable template to specify the lifecycle policy. A composable template for used a data stream must include a `data_stream` definition.", "author": "dakrone", "createdAt": "2020-06-12T19:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMDIzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439700239", "bodyText": "I'm good with Lee's suggestion. Will leave mine up for context.", "author": "jrodewig", "createdAt": "2020-06-13T02:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440050229", "bodyText": "A composable template for used a data stream must include a `data_stream` definition.\nThis doesn't make sense to me. Is it meant to be ?\nFor a composable template to be used with a data stream it must include a `data_stream` definition", "author": "andreidan", "createdAt": "2020-06-15T09:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODQ4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439538487", "bodyText": "Replaces ILM with attribute.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n          \n          \n            \n            To enable the {ilm-init} to manage the data stream, the template configures one {ilm-init} setting:", "author": "jrodewig", "createdAt": "2020-06-12T17:01:01Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODg1OA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439538858", "bodyText": "Nit: I'd align the callout numbers.", "author": "jrodewig", "createdAt": "2020-06-12T17:01:50Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzOTA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439539077", "bodyText": "Nit: Breaks this into two sentences for readability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> Identifies the timestamp field for the data source, a field that must be present\n          \n          \n            \n            <2> Identifies the timestamp field for the data source. This field must be present", "author": "jrodewig", "createdAt": "2020-06-12T17:02:18Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzOTM5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439539395", "bodyText": "I think a date or date_nanos mapping for the timestamp field is now required. I'd included that here.", "author": "jrodewig", "createdAt": "2020-06-12T17:02:56Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzOTU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439539571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> The name of the ILM policy used to manage the data stream.\n          \n          \n            \n            <3> The name of the {ilm-init} policy used to manage the data stream.", "author": "jrodewig", "createdAt": "2020-06-12T17:03:19Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDI5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439540291", "bodyText": "I'd say \"create\" rather than \"bootstrap\" here. Data streams kinda solve the original bootstrap problem so it'd be good to not use the same terminology.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[ilm-gs-bootstrap]]\n          \n          \n            \n            === Bootstrap the data stream\n          \n          \n            \n            [[ilm-gs-create-the-data-stream]]\n          \n          \n            \n            === Create the data stream", "author": "jrodewig", "createdAt": "2020-06-12T17:04:46Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDYyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439540621", "bodyText": "Nit: Use direct imperative.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To get things started, you simply index a document into the name or wildcard pattern defined\n          \n          \n            \n            To get things started, index a document into the name or wildcard pattern defined", "author": "jrodewig", "createdAt": "2020-06-12T17:05:26Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTM0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439541347", "bodyText": "Adds some text to note that the target cannot already exist (e.g., I can't create the logs data stream if a logs index already exists).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the `index_patterns` of the <<indices-templates,composable index template>> that will\n          \n          \n            \n            create the data stream.\n          \n          \n            \n            in the `index_patterns` of the <<indices-templates,composable index template>>. As long\n          \n          \n            \n            as an existing data stream, index, or index alias does not already use the name, the index\n          \n          \n            \n            request automatically creates a corresponding data stream with a single backing index.", "author": "jrodewig", "createdAt": "2020-06-12T17:06:54Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjE2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439542162", "bodyText": "Nit: Avoid future tense.\nAlso notes that this new index is also the write index.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {es} will automatically create the corresponding data stream and will index the document into\n          \n          \n            \n            the first backing index.\n          \n          \n            \n            {es} automatically indexes the request's documents into this backing index, which also\n          \n          \n            \n            acts as the stream's <<data-stream-write-index,write index>>.", "author": "jrodewig", "createdAt": "2020-06-12T17:08:43Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjQ5OA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439542498", "bodyText": "I think the conditions use an \"OR\" logic. This could be read as \"rollover happens when condition A and B is met\" not \"when A or B is met\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the rollover conditions are met, the `rollover` action:\n          \n          \n            \n            When a rollover condition in the data stream's lifecycle policy is met, the `rollover` action:", "author": "jrodewig", "createdAt": "2020-06-12T17:09:30Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5ODQ5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439598493", "bodyText": "I don't like @jrodewig's suggestion, the lifecycle policy does not belong to a data stream (that is a confusing notion). I prefer:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the rollover conditions are met, the `rollover` action:\n          \n          \n            \n            When a rollover condition in the lifecycle policy is met, the `rollover` action:", "author": "dakrone", "createdAt": "2020-06-12T19:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMDMxNg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439700316", "bodyText": "Good point. I'll leave mine up for context, but I recommend using Lee's suggestion.", "author": "jrodewig", "createdAt": "2020-06-13T02:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1Mjc0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r440052747", "bodyText": "Good point, thanks", "author": "andreidan", "createdAt": "2020-06-15T09:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NDUyMw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439544523", "bodyText": "Breaks this into two sentences for readability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Write operations are routed to the current write index, whilst read operations will be handled by all\n          \n          \n            \n            backing indices.\n          \n          \n            \n            Write operations are routed to the current write index. Read operations will be handled by all\n          \n          \n            \n            backing indices.", "author": "jrodewig", "createdAt": "2020-06-12T17:13:44Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTAxMw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439545013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, the following request gets information about the `timeseries` indices:\n          \n          \n            \n            For example, the following request gets information about the `timeseries` data stream's\n          \n          \n            \n            backing indices:", "author": "jrodewig", "createdAt": "2020-06-12T17:14:47Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTI1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439545252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The response below shows that the data stream's first generation backing index is waiting in the `hot`\n          \n          \n            \n            The following response shows the data stream's first generation backing index is waiting for the `hot`", "author": "jrodewig", "createdAt": "2020-06-12T17:15:16Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTk4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439545985", "bodyText": "Fix for OR logic\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This process repeats each time rollover conditions are met.\n          \n          \n            \n            This process repeats each time a rollover condition is met.", "author": "jrodewig", "createdAt": "2020-06-12T17:16:48Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439546527", "bodyText": "OR logic.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n          \n          \n            \n            are met.\n          \n          \n            \n            It remains in this state and {ilm-init} continues to call `attempt-rollover` until a rollover condition\n          \n          \n            \n            is met.", "author": "jrodewig", "createdAt": "2020-06-12T17:17:52Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NzUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439547524", "bodyText": "This could be misread to state that you can't delete a data stream. Reword for clarity.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<data-streams, data streams>> APIs don't support the delete and update APIs directly,\n          \n          \n            \n            data streams don't support delete and update requests directly,", "author": "jrodewig", "createdAt": "2020-06-12T17:20:04Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.\n+\n+// [[36818c6d9f434d387819c30bd9addb14]]\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"indices\": {\n+    \".ds-timeseries-000001\": {\n+      \"index\": \".ds-timeseries-000001\",\n+      \"managed\": true,\n+      \"policy\": \"timeseries_policy\",             <1>\n+      \"lifecycle_date_millis\": 1538475653281,\n+      \"age\": \"30s\",                              <2>\n+      \"phase\": \"hot\",\n+      \"phase_time_millis\": 1538475653317,\n+      \"action\": \"rollover\",\n+      \"action_time_millis\": 1538475653317,\n+      \"step\": \"attempt-rollover\",                <3>\n+      \"step_time_millis\": 1538475653317,\n+      \"phase_execution\": {\n+        \"policy\": \"timeseries_policy\",\n+        \"phase_definition\": {                    <4>\n+          \"min_age\": \"0ms\",\n+          \"actions\": {\n+            \"rollover\": {\n+              \"max_size\": \"50gb\",\n+              \"max_age\": \"30d\"\n+            }\n+          }\n+        },\n+        \"version\": 1,\n+        \"modified_date_in_millis\": 1539609701576\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[skip:no way to know if we will get this response immediately]\n+\n+<1> The policy used to manage the index\n+<2> The age of the index\n+<3> The step {ilm-init} is performing on the index\n+<4> The definition of the current phase (the `hot` phase)\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_data_stream/timeseries\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_index_template/timeseries_template\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+[discrete]\n+[[manage-time-series-data-without-data-streams]]\n+=== Manage time-series data without data streams\n+\n+Even though <<data-streams, data streams>> are a convenient way to scale\n+and manage time-series data, they are designed to be append-only. We recognise there\n+might be use-cases where data needs to be updated or deleted in place and the\n+<<data-streams, data streams>> APIs don't support the delete and update APIs directly,", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0Nzk5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439547991", "bodyText": "Nit: Reword for clarity.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Another option to manage the time-series data in these cases is to use an index alias\n          \n          \n            \n            so you can periodically roll over to a new index.\n          \n          \n            \n            In these cases, you can use an index alias to manage indices containing the time-series data\n          \n          \n            \n            and periodically roll over to a new index.", "author": "jrodewig", "createdAt": "2020-06-12T17:21:04Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.\n+\n+// [[36818c6d9f434d387819c30bd9addb14]]\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"indices\": {\n+    \".ds-timeseries-000001\": {\n+      \"index\": \".ds-timeseries-000001\",\n+      \"managed\": true,\n+      \"policy\": \"timeseries_policy\",             <1>\n+      \"lifecycle_date_millis\": 1538475653281,\n+      \"age\": \"30s\",                              <2>\n+      \"phase\": \"hot\",\n+      \"phase_time_millis\": 1538475653317,\n+      \"action\": \"rollover\",\n+      \"action_time_millis\": 1538475653317,\n+      \"step\": \"attempt-rollover\",                <3>\n+      \"step_time_millis\": 1538475653317,\n+      \"phase_execution\": {\n+        \"policy\": \"timeseries_policy\",\n+        \"phase_definition\": {                    <4>\n+          \"min_age\": \"0ms\",\n+          \"actions\": {\n+            \"rollover\": {\n+              \"max_size\": \"50gb\",\n+              \"max_age\": \"30d\"\n+            }\n+          }\n+        },\n+        \"version\": 1,\n+        \"modified_date_in_millis\": 1539609701576\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[skip:no way to know if we will get this response immediately]\n+\n+<1> The policy used to manage the index\n+<2> The age of the index\n+<3> The step {ilm-init} is performing on the index\n+<4> The definition of the current phase (the `hot` phase)\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_data_stream/timeseries\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_index_template/timeseries_template\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+[discrete]\n+[[manage-time-series-data-without-data-streams]]\n+=== Manage time-series data without data streams\n+\n+Even though <<data-streams, data streams>> are a convenient way to scale\n+and manage time-series data, they are designed to be append-only. We recognise there\n+might be use-cases where data needs to be updated or deleted in place and the\n+<<data-streams, data streams>> APIs don't support the delete and update APIs directly,\n+so the index APIs would need to be used directly on the data stream's backing indices.\n+\n+Another option to manage the time-series data in these cases is to use an index alias\n+so you can periodically roll over to a new index.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0ODA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439548068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To automate rollover and management of time-series indices with {ilm-init} over an index\n          \n          \n            \n            To automate rollover and management of time-series indices with {ilm-init} using an index", "author": "jrodewig", "createdAt": "2020-06-12T17:21:17Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.\n+\n+// [[36818c6d9f434d387819c30bd9addb14]]\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"indices\": {\n+    \".ds-timeseries-000001\": {\n+      \"index\": \".ds-timeseries-000001\",\n+      \"managed\": true,\n+      \"policy\": \"timeseries_policy\",             <1>\n+      \"lifecycle_date_millis\": 1538475653281,\n+      \"age\": \"30s\",                              <2>\n+      \"phase\": \"hot\",\n+      \"phase_time_millis\": 1538475653317,\n+      \"action\": \"rollover\",\n+      \"action_time_millis\": 1538475653317,\n+      \"step\": \"attempt-rollover\",                <3>\n+      \"step_time_millis\": 1538475653317,\n+      \"phase_execution\": {\n+        \"policy\": \"timeseries_policy\",\n+        \"phase_definition\": {                    <4>\n+          \"min_age\": \"0ms\",\n+          \"actions\": {\n+            \"rollover\": {\n+              \"max_size\": \"50gb\",\n+              \"max_age\": \"30d\"\n+            }\n+          }\n+        },\n+        \"version\": 1,\n+        \"modified_date_in_millis\": 1539609701576\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[skip:no way to know if we will get this response immediately]\n+\n+<1> The policy used to manage the index\n+<2> The age of the index\n+<3> The step {ilm-init} is performing on the index\n+<4> The definition of the current phase (the `hot` phase)\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_data_stream/timeseries\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+\n+//////////////////////////\n+\n+[source,console]\n+--------------------------------------------------\n+DELETE /_index_template/timeseries_template\n+--------------------------------------------------\n+// TEST[continued]\n+\n+//////////////////////////\n+\n+[discrete]\n+[[manage-time-series-data-without-data-streams]]\n+=== Manage time-series data without data streams\n+\n+Even though <<data-streams, data streams>> are a convenient way to scale\n+and manage time-series data, they are designed to be append-only. We recognise there\n+might be use-cases where data needs to be updated or deleted in place and the\n+<<data-streams, data streams>> APIs don't support the delete and update APIs directly,\n+so the index APIs would need to be used directly on the data stream's backing indices.\n+\n+Another option to manage the time-series data in these cases is to use an index alias\n+so you can periodically roll over to a new index.\n+\n+To automate rollover and management of time-series indices with {ilm-init} over an index", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0ODk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439548956", "bodyText": "Nit: Breaks this into two sentences for readability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<indices-create-data-stream, Data streams>> are the recommended abstraction for managing time-series\n          \n          \n            \n            data as they automatically track the write index whilst also keeping the amount of configuration to a\n          \n          \n            \n            minimum.\n          \n          \n            \n            We recommend using <<indices-create-data-stream, data streams>> to manage time-series\n          \n          \n            \n            data. Data streams automatically track the write index while keeping configuration to a minimum.", "author": "jrodewig", "createdAt": "2020-06-12T17:23:10Z", "path": "docs/reference/ilm/index-rollover.asciidoc", "diffHunk": "@@ -12,7 +12,20 @@ Using rolling indices enables you to:\n * Shift older, less frequently accessed data to less expensive _cold_ nodes,\n * Delete data according to your retention policies by removing entire indices.\n \n-Rollover relies on three things:\n+<<indices-create-data-stream, Data streams>> are the recommended abstraction for managing time-series\n+data as they automatically track the write index whilst also keeping the amount of configuration to a\n+minimum.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439550558", "bodyText": "I think these requirements are incomplete as a mapping is now required for the timestamp field.\nEither way, I think a bulleted list makes it more readable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Rolling over using <<indices-create-data-stream, data streams>> only requires creating a\n          \n          \n            \n            <<indices-templates,composable index template>> containing a name or a wildcard pattern for the data stream\n          \n          \n            \n            in the `index_patterns` and a `data_stream` definiton that contains the `timestamp_field` property which\n          \n          \n            \n            will be present in the time-series documents that will be ingested.\n          \n          \n            \n            Each data stream requires a <<indices-templates,composable index template>> that contains:\n          \n          \n            \n            \n          \n          \n            \n            * A name or wildcard (`*`) pattern for the data stream.\n          \n          \n            \n            \n          \n          \n            \n            * The data stream's timestamp field. This field must be mapped as a\n          \n          \n            \n              <<date,`date`>> or <<date_nanos,`date_nanos`>> field datatype and must be\n          \n          \n            \n              included in every document indexed to the data stream.\n          \n          \n            \n              \n          \n          \n            \n              * The mappings and settings applied to each backing index when it's created.", "author": "jrodewig", "createdAt": "2020-06-12T17:26:14Z", "path": "docs/reference/ilm/index-rollover.asciidoc", "diffHunk": "@@ -12,7 +12,20 @@ Using rolling indices enables you to:\n * Shift older, less frequently accessed data to less expensive _cold_ nodes,\n * Delete data according to your retention policies by removing entire indices.\n \n-Rollover relies on three things:\n+<<indices-create-data-stream, Data streams>> are the recommended abstraction for managing time-series\n+data as they automatically track the write index whilst also keeping the amount of configuration to a\n+minimum.\n+\n+Rolling over using <<indices-create-data-stream, data streams>> only requires creating a\n+<<indices-templates,composable index template>> containing a name or a wildcard pattern for the data stream\n+in the `index_patterns` and a `data_stream` definiton that contains the `timestamp_field` property which\n+will be present in the time-series documents that will be ingested.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTYxMA==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439551610", "bodyText": "Nit: Breaks this into two sentences.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For other use cases, where data needs to be updated in place, the management of time-series data can be\n          \n          \n            \n            done using <<indices-aliases, indices aliases>>, however there are a few more configuration steps and\n          \n          \n            \n            concepts:\n          \n          \n            \n            If your use case requires data to be updated in place, you can instead manage your time-series data using <<indices-aliases, indices aliases>>. However, there are a few more configuration steps and\n          \n          \n            \n            concepts:", "author": "jrodewig", "createdAt": "2020-06-12T17:28:16Z", "path": "docs/reference/ilm/index-rollover.asciidoc", "diffHunk": "@@ -12,7 +12,20 @@ Using rolling indices enables you to:\n * Shift older, less frequently accessed data to less expensive _cold_ nodes,\n * Delete data according to your retention policies by removing entire indices.\n \n-Rollover relies on three things:\n+<<indices-create-data-stream, Data streams>> are the recommended abstraction for managing time-series\n+data as they automatically track the write index whilst also keeping the amount of configuration to a\n+minimum.\n+\n+Rolling over using <<indices-create-data-stream, data streams>> only requires creating a\n+<<indices-templates,composable index template>> containing a name or a wildcard pattern for the data stream\n+in the `index_patterns` and a `data_stream` definiton that contains the `timestamp_field` property which\n+will be present in the time-series documents that will be ingested.\n+\n+<<indices-create-data-stream, Data streams>> are designed for append-only data, where the data stream name\n+can be used as the operations (read, write, rollover, shrink etc.) target.\n+For other use cases, where data needs to be updated in place, the management of time-series data can be\n+done using <<indices-aliases, indices aliases>>, however there are a few more configuration steps and\n+concepts:", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjA3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439556071", "bodyText": "Typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Creates the second generation backing index, name `.ds-timeseries-000002`.\n          \n          \n            \n            * Creates the second generation backing index, named `.ds-timeseries-000002`.", "author": "jrodewig", "createdAt": "2020-06-12T17:37:31Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjgxNw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439556817", "bodyText": "Nit: Reword for clarity\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n          \n          \n            \n            the template configuration will be applied to the new index.\n          \n          \n            \n            Because it is a backing index of the `timeseries` data stream, the configuration from the `timeseries_template` composable template is applied to the new index.", "author": "jrodewig", "createdAt": "2020-06-12T17:39:10Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODM1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439558357", "bodyText": "Remove redundant link.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<indices-create-data-stream, Data streams>> are designed for append-only data, where the data stream name\n          \n          \n            \n            Data streams are designed for append-only data, where the data stream name", "author": "jrodewig", "createdAt": "2020-06-12T17:42:34Z", "path": "docs/reference/ilm/index-rollover.asciidoc", "diffHunk": "@@ -12,7 +12,20 @@ Using rolling indices enables you to:\n * Shift older, less frequently accessed data to less expensive _cold_ nodes,\n * Delete data according to your retention policies by removing entire indices.\n \n-Rollover relies on three things:\n+<<indices-create-data-stream, Data streams>> are the recommended abstraction for managing time-series\n+data as they automatically track the write index whilst also keeping the amount of configuration to a\n+minimum.\n+\n+Rolling over using <<indices-create-data-stream, data streams>> only requires creating a\n+<<indices-templates,composable index template>> containing a name or a wildcard pattern for the data stream\n+in the `index_patterns` and a `data_stream` definiton that contains the `timestamp_field` property which\n+will be present in the time-series documents that will be ingested.\n+\n+<<indices-create-data-stream, Data streams>> are designed for append-only data, where the data stream name", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5OTUzNg==", "url": "https://github.com/elastic/elasticsearch/pull/58035#discussion_r439599536", "bodyText": "Super minor, but more likely to be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"step\": \"attempt-rollover\",                <3>\n          \n          \n            \n                  \"step\": \"check-rollover-ready\",                <3>", "author": "dakrone", "createdAt": "2020-06-12T19:14:38Z", "path": "docs/reference/ilm/ilm-tutorial.asciidoc", "diffHunk": "@@ -89,13 +91,207 @@ For the complete list of actions that {ilm} can perform, see <<ilm-actions>>.\n \n [discrete]\n [[ilm-gs-apply-policy]]\n-=== Create an index template to apply the lifecycle policy\n+=== Create a composable template to create the data stream and apply the lifecycle policy\n+\n+To create a data stream we'll create a composable template with a `data_stream` definition\n+that will specify the lifecycle policy.\n+\n+For example, you might create a `timeseries_template` that is will bootstrap a data stream\n+named `timeseries`.\n+\n+To enable the ILM to manage the data stream, the template configures one {ilm-init} setting:\n+\n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to the data stream.\n+\n+You can use the {kib} Create template wizard to add the template.\n+This wizard invokes the put _index_template API to create the <<indices-templates,composable index template>>\n+with the options you specify.\n+\n+The underlying request looks like this:\n+\n+[source,console]\n+-----------------------\n+PUT _index_template/timeseries_template\n+{\n+  \"index_patterns\": [\"timeseries\"],                 <1>\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"                  <2>\n+  },\n+  \"template\": {\n+    \"settings\": {\n+      \"number_of_shards\": 1,\n+      \"number_of_replicas\": 1,\n+      \"index.lifecycle.name\": \"timeseries_policy\"     <3>\n+    }\n+  }\n+}\n+-----------------------\n+// TEST[continued]\n+\n+<1> Apply the template when a document is indexed into the `timeseries` target.\n+<2> Identifies the timestamp field for the data source, a field that must be present\n+in all documents indexed into the `timeseries` data stream.\n+<3> The name of the ILM policy used to manage the data stream.\n+\n+You can also invoke this API directly to add templates.\n+\n+[discrete]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the data stream\n+\n+To get things started, you simply index a document into the name or wildcard pattern defined\n+in the `index_patterns` of the <<indices-templates,composable index template>> that will\n+create the data stream.\n+{es} will automatically create the corresponding data stream and will index the document into\n+the first backing index.\n+\n+For example, the following request creates the `timeseries` data stream and the first generation\n+backing index called `.ds-timeseries-000001`.\n+\n+[source,console]\n+-----------------------\n+POST timeseries/_doc\n+{\n+  \"message\": \"logged the request\",\n+  \"@timestamp\": \"1591890611\"\n+}\n+\n+-----------------------\n+// TEST[continued]\n+\n+When the rollover conditions are met, the `rollover` action:\n+\n+* Creates the second generation backing index, name `.ds-timeseries-000002`.\n+As it is the backing index of the `timeseries` data stream which was created using the `timeseries_template`\n+the template configuration will be applied to the new index.\n+* As it is the latest generation index of the `timeseries` data stream, the newly created\n+backing index `.ds-timeseries-000002` becomes the data stream's write index.\n+\n+This process repeats each time rollover conditions are met.\n+You can search across all of the data stream's backing indices, managed by the `timeseries_policy`,\n+with the `timeseries` data stream name.\n+Write operations are routed to the current write index, whilst read operations will be handled by all\n+backing indices.\n+\n+[discrete]\n+[[ilm-gs-check-progress]]\n+=== Check lifecycle progress\n+\n+To get status information for managed indices, you use the {ilm-init} explain API.\n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n+\n+For example, the following request gets information about the `timeseries` indices:\n+\n+[source,console]\n+--------------------------------------------------\n+GET .ds-timeseries-*/_ilm/explain\n+--------------------------------------------------\n+// TEST[continued]\n+\n+The response below shows that the data stream's first generation backing index is waiting in the `hot`\n+phase's `rollover` action.\n+It remains in this state and {ilm-init} continues to call `attempt-rollover` until the rollover conditions\n+are met.\n+\n+// [[36818c6d9f434d387819c30bd9addb14]]\n+[source,console-result]\n+--------------------------------------------------\n+{\n+  \"indices\": {\n+    \".ds-timeseries-000001\": {\n+      \"index\": \".ds-timeseries-000001\",\n+      \"managed\": true,\n+      \"policy\": \"timeseries_policy\",             <1>\n+      \"lifecycle_date_millis\": 1538475653281,\n+      \"age\": \"30s\",                              <2>\n+      \"phase\": \"hot\",\n+      \"phase_time_millis\": 1538475653317,\n+      \"action\": \"rollover\",\n+      \"action_time_millis\": 1538475653317,\n+      \"step\": \"attempt-rollover\",                <3>", "originalCommit": "28b84909eacd98f8be2738dc0058068143dbc47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51c465f9cb9926e1c2a534fa21cd56efdd121c69", "url": "https://github.com/elastic/elasticsearch/commit/51c465f9cb9926e1c2a534fa21cd56efdd121c69", "message": "Update docs/reference/ilm/actions/ilm-rollover.asciidoc\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:05:07Z", "type": "commit"}, {"oid": "e5059351ca5f404ff965f30d72d7d8f2fb7f09c1", "url": "https://github.com/elastic/elasticsearch/commit/e5059351ca5f404ff965f30d72d7d8f2fb7f09c1", "message": "Link to write index\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:05:29Z", "type": "commit"}, {"oid": "2fdf37834fa8fff77e3934cd06f830e80a89764c", "url": "https://github.com/elastic/elasticsearch/commit/2fdf37834fa8fff77e3934cd06f830e80a89764c", "message": "Drop write index naming sentence", "committedDate": "2020-06-15T09:14:15Z", "type": "commit"}, {"oid": "c6316f949e4e427737b93c8f6c243b331bc91418", "url": "https://github.com/elastic/elasticsearch/commit/c6316f949e4e427737b93c8f6c243b331bc91418", "message": "Reword\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:15:31Z", "type": "commit"}, {"oid": "e2f6aa45cb6f74083b4e166e5ada25fe0c77b105", "url": "https://github.com/elastic/elasticsearch/commit/e2f6aa45cb6f74083b4e166e5ada25fe0c77b105", "message": "Avoid future tense\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:15:46Z", "type": "commit"}, {"oid": "1d9f0a46b25af6abfe126948405418e9cde9388e", "url": "https://github.com/elastic/elasticsearch/commit/1d9f0a46b25af6abfe126948405418e9cde9388e", "message": "Reword note\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:17:00Z", "type": "commit"}, {"oid": "52c93af74cae9f03dbde2f616442091594e629a2", "url": "https://github.com/elastic/elasticsearch/commit/52c93af74cae9f03dbde2f616442091594e629a2", "message": "Update shrink action note", "committedDate": "2020-06-15T09:23:52Z", "type": "commit"}, {"oid": "8fc070ff3bc1f24b295621a44060133aca651cf7", "url": "https://github.com/elastic/elasticsearch/commit/8fc070ff3bc1f24b295621a44060133aca651cf7", "message": "Avoid future\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:25:39Z", "type": "commit"}, {"oid": "78430c6f45a1649ded1f1a5a4f5bd63a5661ee2a", "url": "https://github.com/elastic/elasticsearch/commit/78430c6f45a1649ded1f1a5a4f5bd63a5661ee2a", "message": "Update shrink note\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:27:24Z", "type": "commit"}, {"oid": "ef9f02f760b58888fee3187b89f99ed41cdc0836", "url": "https://github.com/elastic/elasticsearch/commit/ef9f02f760b58888fee3187b89f99ed41cdc0836", "message": "Update searchable snapshot note", "committedDate": "2020-06-15T09:28:29Z", "type": "commit"}, {"oid": "b2afc9e4a798a1377018f5c3ef5b91233888b3d8", "url": "https://github.com/elastic/elasticsearch/commit/b2afc9e4a798a1377018f5c3ef5b91233888b3d8", "message": "Enhance navigation\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:30:22Z", "type": "commit"}, {"oid": "6d12d8a8e3e08d24ec1d15834285e6112f200510", "url": "https://github.com/elastic/elasticsearch/commit/6d12d8a8e3e08d24ec1d15834285e6112f200510", "message": "Fix typo\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:30:42Z", "type": "commit"}, {"oid": "47f4ca64cdb0bc45189cf0fa49fac052f542a18e", "url": "https://github.com/elastic/elasticsearch/commit/47f4ca64cdb0bc45189cf0fa49fac052f542a18e", "message": "Use attribute\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:34:29Z", "type": "commit"}, {"oid": "d654b92b7d4753bacd0fd00fe51dd6610754b1b7", "url": "https://github.com/elastic/elasticsearch/commit/d654b92b7d4753bacd0fd00fe51dd6610754b1b7", "message": "Break sentence\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:35:06Z", "type": "commit"}, {"oid": "3ccbc757171c3c6c8eedd29f2a96353286223e6f", "url": "https://github.com/elastic/elasticsearch/commit/3ccbc757171c3c6c8eedd29f2a96353286223e6f", "message": "Use attribute\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:35:35Z", "type": "commit"}, {"oid": "2ab786fbcdd4b61bcfc0e1f4e828b2d9991782a0", "url": "https://github.com/elastic/elasticsearch/commit/2ab786fbcdd4b61bcfc0e1f4e828b2d9991782a0", "message": "Use create instead of bootstrap\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:36:07Z", "type": "commit"}, {"oid": "cf537a45f526e6f86473309c1d8761255ae1e451", "url": "https://github.com/elastic/elasticsearch/commit/cf537a45f526e6f86473309c1d8761255ae1e451", "message": "Use imperative\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:36:30Z", "type": "commit"}, {"oid": "8fbd48e726a16237faf5134ac096b38fc7574889", "url": "https://github.com/elastic/elasticsearch/commit/8fbd48e726a16237faf5134ac096b38fc7574889", "message": "Target name cannot already exist note\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:37:13Z", "type": "commit"}, {"oid": "f8de6119f71271a87e525bc7cc61a6120876c47e", "url": "https://github.com/elastic/elasticsearch/commit/f8de6119f71271a87e525bc7cc61a6120876c47e", "message": "Avoid future tense\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:37:35Z", "type": "commit"}, {"oid": "f976051800bbac4cde3e3f24b569a4329c1ea7e0", "url": "https://github.com/elastic/elasticsearch/commit/f976051800bbac4cde3e3f24b569a4329c1ea7e0", "message": "Update wording on rollover conditions\n\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-06-15T09:38:16Z", "type": "commit"}, {"oid": "779e8dfc8a16a41581573944e2b9042c354be4df", "url": "https://github.com/elastic/elasticsearch/commit/779e8dfc8a16a41581573944e2b9042c354be4df", "message": "Break sentence\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T09:38:50Z", "type": "commit"}, {"oid": "5fbdc6e5f04ebe17f9075c7bf1f5f93c70299273", "url": "https://github.com/elastic/elasticsearch/commit/5fbdc6e5f04ebe17f9075c7bf1f5f93c70299273", "message": "Fix typo\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:38:03Z", "type": "commit"}, {"oid": "d10be072d1092ab2c4b872bee5910e30dfbc92f5", "url": "https://github.com/elastic/elasticsearch/commit/d10be072d1092ab2c4b872bee5910e30dfbc92f5", "message": "Better wording\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:40:59Z", "type": "commit"}, {"oid": "03fcdb4ed628d9884e98978733231e4e751666a0", "url": "https://github.com/elastic/elasticsearch/commit/03fcdb4ed628d9884e98978733231e4e751666a0", "message": "Better wording\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:41:47Z", "type": "commit"}, {"oid": "d1751bd094047e3026f346af21017e5650cef772", "url": "https://github.com/elastic/elasticsearch/commit/d1751bd094047e3026f346af21017e5650cef772", "message": "Better wording\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:42:14Z", "type": "commit"}, {"oid": "13675d23b02e9120e0c3446bd3aad821247802e5", "url": "https://github.com/elastic/elasticsearch/commit/13675d23b02e9120e0c3446bd3aad821247802e5", "message": "Better wording\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:42:37Z", "type": "commit"}, {"oid": "6466fe9f350f0e8c0873da11a962d40f4fc54075", "url": "https://github.com/elastic/elasticsearch/commit/6466fe9f350f0e8c0873da11a962d40f4fc54075", "message": "Use check-rollover-ready step\n\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>", "committedDate": "2020-06-15T12:43:53Z", "type": "commit"}, {"oid": "c52d9330d6ab061d4926a329e7b771d4209cf11a", "url": "https://github.com/elastic/elasticsearch/commit/c52d9330d6ab061d4926a329e7b771d4209cf11a", "message": "Reference the check-rollover-ready step", "committedDate": "2020-06-15T12:45:37Z", "type": "commit"}, {"oid": "20ef74fd4c4c636f858998fa44a435d9f102f8f2", "url": "https://github.com/elastic/elasticsearch/commit/20ef74fd4c4c636f858998fa44a435d9f102f8f2", "message": "Apply suggestions from code review\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>", "committedDate": "2020-06-15T12:50:25Z", "type": "commit"}, {"oid": "d15d32a5b7bb435a17df76fa72d5d8c1bd47ed37", "url": "https://github.com/elastic/elasticsearch/commit/d15d32a5b7bb435a17df76fa72d5d8c1bd47ed37", "message": "OR logic and callout numbers arrangement", "committedDate": "2020-06-15T12:51:54Z", "type": "commit"}, {"oid": "c43ff2c0316605713fe34c89e2313ecf6ce16676", "url": "https://github.com/elastic/elasticsearch/commit/c43ff2c0316605713fe34c89e2313ecf6ce16676", "message": "Arrange callout numbers", "committedDate": "2020-06-15T12:52:42Z", "type": "commit"}, {"oid": "ae7b65eb1d79de27153c81dcb60504c977e2a3c0", "url": "https://github.com/elastic/elasticsearch/commit/ae7b65eb1d79de27153c81dcb60504c977e2a3c0", "message": "Merge branch 'master' into docs-ilm-data-stream", "committedDate": "2020-06-15T12:53:12Z", "type": "commit"}, {"oid": "431164cdbf137c235169ecbfb5b2787914a60c1a", "url": "https://github.com/elastic/elasticsearch/commit/431164cdbf137c235169ecbfb5b2787914a60c1a", "message": "Add the timestamp mapping to the composable template", "committedDate": "2020-06-15T12:58:13Z", "type": "commit"}]}