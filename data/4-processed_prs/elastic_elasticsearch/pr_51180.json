{"pr_number": 51180, "pr_title": "[ML] Make datafeeds work with nanosecond time fields", "pr_createdAt": "2020-01-17T18:49:21Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51180", "timeline": [{"oid": "c7f4dc84dd36a72b00ada87a9bb12a2aa5490538", "url": "https://github.com/elastic/elasticsearch/commit/c7f4dc84dd36a72b00ada87a9bb12a2aa5490538", "message": "[ML] Make datafeeds work with nanosecond time fields\n\nAllows ML datafeeds to work with time fields that have\nthe \"date_nanos\" type.  (Previously datafeeds only\nworked with time fields that had the \"date\" type.)", "committedDate": "2020-01-17T18:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ2NjAxMg==", "url": "https://github.com/elastic/elasticsearch/pull/51180#discussion_r368466012", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Instant time = Instant.ofEpochSecond(millis / 1000, (millis % 1000) * 1000000 + extraNanos);\n          \n          \n            \n                    Instant time = Instant.ofEpochMilli(millis).plusNanos(extraNanos);", "author": "davidkyle", "createdAt": "2020-01-20T10:14:02Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/extractor/TimeFieldTests.java", "diffHunk": "@@ -5,20 +5,48 @@\n  */\n package org.elasticsearch.xpack.ml.extractor;\n \n+import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.test.ESTestCase;\n import org.elasticsearch.xpack.ml.test.SearchHitBuilder;\n \n+import java.time.Instant;\n+\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n \n public class TimeFieldTests extends ESTestCase {\n \n-    public void testDocValueWithStringValue() {\n-        long millis = randomLong();\n-        SearchHit hit = new SearchHitBuilder(randomInt()).addField(\"time\", Long.toString(millis)).build();\n+    public void testDocValueWithWholeMillisecondStringValue() {\n+        long millis = randomNonNegativeLong();\n+        Instant time = Instant.ofEpochMilli(millis);\n+        DateFormatter formatter = DateFormatter.forPattern(\"epoch_millis\");\n+        String timeAsString = formatter.format(time);\n+        SearchHit hit = new SearchHitBuilder(randomInt()).addField(\"time\", timeAsString).build();\n+\n+        ExtractedField timeField = new TimeField(\"time\", ExtractedField.Method.DOC_VALUE);\n+\n+        assertThat(timeField.value(hit), equalTo(new Object[] { millis }));\n+        assertThat(timeField.getName(), equalTo(\"time\"));\n+        assertThat(timeField.getSearchField(), equalTo(\"time\"));\n+        assertThat(timeField.getTypes(), contains(\"date\"));\n+        assertThat(timeField.getMethod(), equalTo(ExtractedField.Method.DOC_VALUE));\n+        assertThat(timeField.getDocValueFormat(), equalTo(\"epoch_millis\"));\n+        assertThat(timeField.supportsFromSource(), is(false));\n+        expectThrows(UnsupportedOperationException.class, timeField::newFromSource);\n+        assertThat(timeField.isMultiField(), is(false));\n+        expectThrows(UnsupportedOperationException.class, timeField::getParentField);\n+    }\n+\n+    public void testDocValueWithFractionalMillisecondStringValue() {\n+        long millis = randomNonNegativeLong();\n+        int extraNanos = randomIntBetween(0, 999999);\n+        Instant time = Instant.ofEpochSecond(millis / 1000, (millis % 1000) * 1000000 + extraNanos);", "originalCommit": "c7f4dc84dd36a72b00ada87a9bb12a2aa5490538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e378658d94373a6848c1b80d869c6ce042717d5", "url": "https://github.com/elastic/elasticsearch/commit/9e378658d94373a6848c1b80d869c6ce042717d5", "message": "Address review comment\n\nCo-Authored-By: David Kyle <david.kyle@elastic.co>", "committedDate": "2020-01-20T11:29:07Z", "type": "commit"}, {"oid": "cc526d18df3da347341c666b47d6036472e63500", "url": "https://github.com/elastic/elasticsearch/commit/cc526d18df3da347341c666b47d6036472e63500", "message": "Merge branch 'master' into make_datafeed_work_with_nanosecond_time", "committedDate": "2020-01-20T12:28:34Z", "type": "commit"}, {"oid": "4e1a53bf2d13a017146dd96283cb5c7f45d2b60d", "url": "https://github.com/elastic/elasticsearch/commit/4e1a53bf2d13a017146dd96283cb5c7f45d2b60d", "message": "Detect \"date_nanos\" time fields through more code paths\n\nThe extractor for the primary time field of an anomaly\ndetection job is automatically created as a TimeField\nwithout checking its field caps response, so earlier\nchanges in this PR did enough to make that scenario\nwork for \"date_nanos\" fields.  However, the main field\ntype detection code was still only accepting \"date\"\nto create a TimeField.  This change makes it accept\neither or both of \"date\" and \"date_nanos\".", "committedDate": "2020-01-20T13:51:57Z", "type": "commit"}, {"oid": "dbf9480b38d37930c1b6c2790a2c043fbaf3467a", "url": "https://github.com/elastic/elasticsearch/commit/dbf9480b38d37930c1b6c2790a2c043fbaf3467a", "message": "Merge branch 'make_datafeed_work_with_nanosecond_time' of github.com:droberts195/elasticsearch into make_datafeed_work_with_nanosecond_time", "committedDate": "2020-01-20T13:56:10Z", "type": "commit"}, {"oid": "809cf1d09af771e3eda38a0cdb4cb4d19b034410", "url": "https://github.com/elastic/elasticsearch/commit/809cf1d09af771e3eda38a0cdb4cb4d19b034410", "message": "Use low level functions rather than regex to remove fraction\n\nProfiling showed the low level version is 3 times faster\nand we do time parsing for every single document fed to\na job.", "committedDate": "2020-01-20T16:56:34Z", "type": "commit"}]}