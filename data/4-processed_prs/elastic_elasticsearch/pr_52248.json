{"pr_number": 52248, "pr_title": "EQL: Add integration tests harness to test EQL feature parity with original implementation", "pr_createdAt": "2020-02-12T02:55:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52248", "timeline": [{"oid": "032b6996df3bb1a1267ebf6a1811e9799094ef90", "url": "https://github.com/elastic/elasticsearch/commit/032b6996df3bb1a1267ebf6a1811e9799094ef90", "message": "EQL: Add integration tests harness to test EQL feature parity with original implementation\n\nThe tests use the original test queries from\nhttps://github.com/endgameinc/eql/blob/master/eql/etc/test_queries.toml\nfor EQL implementation correctness validation.\nThe file test_queries_unsupported.toml serves as a \"blacklist\" for the\nqueries that we do not support. Currently all of the queries are\nblacklisted. Over the time the expectation is to eventually have an\nempty \"blacklist\" when all of the queries are fully supported.\n\nThe tests use the original test vector from\nhttps://raw.githubusercontent.com/endgameinc/eql/master/eql/etc/test_data.json\nthat was translated to ECS format that matches the latest mapping being\nused for Endgame platform event streaming and is loaded from endgame.dat\nfile. The endgame.json file contains the matching index\nmappings/setting.\n\nOnly one EQL and the response is stubbed for now to match the expected\noutput from that query. This part would need some tweaking after EQL is\nfully wired.\n\nThe input .toml file is parsed by hand for now, which is sufficient for\nour purposes and avoids introducing another dependency just for this\nparticular test case.\n\nRelated to https://github.com/elastic/elasticsearch/issues/49581", "committedDate": "2020-02-12T14:44:05Z", "type": "forcePushed"}, {"oid": "47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "url": "https://github.com/elastic/elasticsearch/commit/47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "message": "EQL: Add integration tests harness to test EQL feature parity with original implementation\n\nThe tests use the original test queries from\nhttps://github.com/endgameinc/eql/blob/master/eql/etc/test_queries.toml\nfor EQL implementation correctness validation.\nThe file test_queries_unsupported.toml serves as a \"blacklist\" for the\nqueries that we do not support. Currently all of the queries are\nblacklisted. Over the time the expectation is to eventually have an\nempty \"blacklist\" when all of the queries are fully supported.\n\nThe tests use the original test vector from\nhttps://raw.githubusercontent.com/endgameinc/eql/master/eql/etc/test_data.json\nthat was translated to ECS format that matches the latest mapping being\nused for Endgame platform event streaming and is loaded from endgame.dat\nfile. The endgame.json file contains the matching index\nmappings/setting.\n\nOnly one EQL and the response is stubbed for now to match the expected\noutput from that query. This part would need some tweaking after EQL is\nfully wired.\n\nThe input .toml file is parsed by hand for now, which is sufficient for\nour purposes and avoids introducing another dependency just for this\nparticular test case.\n\nRelated to https://github.com/elastic/elasticsearch/issues/49581", "committedDate": "2020-02-12T15:08:13Z", "type": "commit"}, {"oid": "47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "url": "https://github.com/elastic/elasticsearch/commit/47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "message": "EQL: Add integration tests harness to test EQL feature parity with original implementation\n\nThe tests use the original test queries from\nhttps://github.com/endgameinc/eql/blob/master/eql/etc/test_queries.toml\nfor EQL implementation correctness validation.\nThe file test_queries_unsupported.toml serves as a \"blacklist\" for the\nqueries that we do not support. Currently all of the queries are\nblacklisted. Over the time the expectation is to eventually have an\nempty \"blacklist\" when all of the queries are fully supported.\n\nThe tests use the original test vector from\nhttps://raw.githubusercontent.com/endgameinc/eql/master/eql/etc/test_data.json\nthat was translated to ECS format that matches the latest mapping being\nused for Endgame platform event streaming and is loaded from endgame.dat\nfile. The endgame.json file contains the matching index\nmappings/setting.\n\nOnly one EQL and the response is stubbed for now to match the expected\noutput from that query. This part would need some tweaking after EQL is\nfully wired.\n\nThe input .toml file is parsed by hand for now, which is sufficient for\nour purposes and avoids introducing another dependency just for this\nparticular test case.\n\nRelated to https://github.com/elastic/elasticsearch/issues/49581", "committedDate": "2020-02-12T15:08:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378329757", "bodyText": "two q's\n\nwhy the .dat extension?\nI don't think this needs to be in ECS, other than the event.category field. Otherwise all of the queries need to be rewritten", "author": "rw-access", "createdAt": "2020-02-12T15:36:33Z", "path": "x-pack/plugin/eql/src/test/resources/endgame.dat", "diffHunk": "@@ -0,0 +1,102 @@\n+{\"user\":{\"group\":{}},\"host\":{\"os\":{\"platform\":\"windows\",\"name\":\"Windows\"},\"ip\":\"127.0.0.1\",\"hostname\":\"localhost\",\"name\":\"localhost\"},\"event\":{\"module\":\"endgame\",\"dataset\":\"esensor\",\"action\":\"already_running\",\"category\":\"process\",\"kind\":\"event\"},\"labels\":{\"account_id\":\"f6c123dc-b6d9-4849-937b-08c444ce7d96\",\"endpoint_id\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\"},\"agent\":{\"type\":\"endgame\",\"id\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\",\"version\":\"3.54.0\"},\"ecs\":{\"version\":\"1.1.0\"},\"@timestamp\":0,\"process\":{\"thread\":{},\"parent\":{},\"hash\":{},\"name\":\"System Idle Process\"},\"endgame\":{\"name\":\"localhost\",\"eid\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\",\"MID\":\"\",\"ip\":\"127.0.0.1\",\"sver\":\"3.54.0\",\"os_type\":\"windows\",\"serial_event_id\":1,\"opcode\":3,\"event_type_full\":\"process_event\",\"event_subtype_full\":\"already_running\",\"timestamp\":116444736000000000,\"process_name\":\"System Idle Process\",\"unique_pid\":1,\"xml_message\":\"\",\"provider_name\":\"\",\"provider_guid\":\"\",\"channel_name\":\"\",\"subject_user_sid\":\"\",\"subject_user_name\":\"\",\"subject_domain_name\":\"\",\"subject_logon_id\":\"\",\"target_domain_name\":\"\",\"target_user_name\":\"\",\"target_logon_id\":\"\",\"ip_address\":\"\",\"computer_name\":\"\",\"privilege_list\":\"\",\"logon_type\":null,\"system_thread_id\":null,\"system_pid\":null,\"system_process_name\":\"\",\"query_name\":\"\",\"query_type\":null,\"query_results\":null,\"metadata\":{\"collection_time\":0}}}", "originalCommit": "47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzOTk0OA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378339948", "bodyText": "it's not quite a valid json, it's a collection of jsons. open for suggestions on the file extension.\nwanted to use the exact same ECS data format that is currently established for events streaming from SMP, so we could potentially flesh out the details applicable to our data format first.", "author": "aleksmaus", "createdAt": "2020-02-12T15:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1Nzk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379157961", "bodyText": "We typically use *.json for that, even though *.ndjson is probably a better choice.", "author": "imotov", "createdAt": "2020-02-13T22:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNDgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380724815", "bodyText": "Updated to .ndjson", "author": "aleksmaus", "createdAt": "2020-02-18T14:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMTY3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378331675", "bodyText": "this one is supported", "author": "rw-access", "createdAt": "2020-02-12T15:39:29Z", "path": "x-pack/plugin/eql/src/test/resources/test_queries_unsupported.toml", "diffHunk": "@@ -0,0 +1,1300 @@\n+# This file is populated with currently unsupported queries.\n+# Serves as a blacklist, until our implementation starts supporting a specific query\n+# This file is expected to become empty once the feature parity is reached with the\n+# official EQL implementation\n+\n+[[queries]]\n+query = 'process where serial_event_id < 4'", "originalCommit": "47aaef7ee16f7244d8ceaaad0ba74c5bdcdb3889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzNzM4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378337389", "bodyText": "yeah, but not hooked up to the query engine yet. Once it is, we can validate the results and update the .toml files.", "author": "aleksmaus", "createdAt": "2020-02-12T15:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzNTAzNg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378635036", "bodyText": "expecting the test_queries_unsupported.toml file to become empty and eventually dropped when we reach the feature parity", "author": "aleksmaus", "createdAt": "2020-02-13T03:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMjQxMw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381402413", "bodyText": "oh, I didn't realize that. in that case, this file is missing the first query from test_queries.toml. i just looked at the top and saw the discrepancy and reached the wrong conclusion\n[[queries]]\nquery = 'process where serial_event_id = 1'\nexpected_event_ids  = [1]", "author": "rw-access", "createdAt": "2020-02-19T16:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NTk2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r382055967", "bodyText": "Added the comment into the file per @rw-access recommendation.", "author": "aleksmaus", "createdAt": "2020-02-20T15:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMTY3NQ=="}], "type": "inlineReview"}, {"oid": "86313844217e1b9c3c79b1b9208140e2c2478a07", "url": "https://github.com/elastic/elasticsearch/commit/86313844217e1b9c3c79b1b9208140e2c2478a07", "message": "Rollback this PR change that caused the failure in telemetry checks", "committedDate": "2020-02-12T15:53:54Z", "type": "commit"}, {"oid": "cd4a55d83e3227018bde92c92f71a481352392aa", "url": "https://github.com/elastic/elasticsearch/commit/cd4a55d83e3227018bde92c92f71a481352392aa", "message": "Fix code formatting", "committedDate": "2020-02-13T03:08:54Z", "type": "commit"}, {"oid": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "url": "https://github.com/elastic/elasticsearch/commit/7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "message": "Test the Andrei's suggested change to still support telemetry and put the plugin actions behind the feature flag", "committedDate": "2020-02-13T14:50:57Z", "type": "commit"}, {"oid": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "url": "https://github.com/elastic/elasticsearch/commit/7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "message": "Test the Andrei's suggested change to still support telemetry and put the plugin actions behind the feature flag", "committedDate": "2020-02-13T14:50:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2ODA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379168077", "bodyText": "I don't think we need this anymore.", "author": "imotov", "createdAt": "2020-02-13T23:03:08Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlActionIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.Build;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+import org.junit.BeforeClass;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlActionIT extends AbstractEqlIntegTestCase {\n+\n+    @BeforeClass\n+    public static void checkForSnapshot() {\n+        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MTU5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379471591", "bodyText": "Why format the above?\nIn general, PRs should touch only lines that were modified not format the entire file. Both IntelliJ and Eclipse have this option.", "author": "costin", "createdAt": "2020-02-14T14:52:19Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -69,31 +72,27 @@\n         Setting.Property.NodeScope\n     );\n \n+    public EqlPlugin(final Settings settings) {\n+        this.enabled = EQL_ENABLED_SETTING.get(settings);\n+    }\n+\n     @Override\n-    public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n-            ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry,\n-            Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {\n+    public Collection<Object> createComponents(Client client, ClusterService clusterService,", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MzQzMw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379493433", "bodyText": "Just making it easier to read, also because it just was just brought to my attention that some of the code that I had some formatting issues.", "author": "aleksmaus", "createdAt": "2020-02-14T15:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Mzg0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379473847", "bodyText": "I'm confused about why the method was moved...", "author": "costin", "createdAt": "2020-02-14T14:56:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -103,9 +102,24 @@\n     public List<Setting<?>> getSettings() {\n         if (isSnapshot() || EQL_FEATURE_FLAG_REGISTERED) {\n             return List.of(EQL_ENABLED_SETTING);\n-        } else {\n-            return List.of();\n         }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MzcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379493703", "bodyText": "consistent with other plugins. can undo", "author": "aleksmaus", "createdAt": "2020-02-14T15:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Mzg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NTg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379475840", "bodyText": "If EQL is disabled, why register an action for it?\nAlso if these two actions are returned always, I would put them in a list and only add the extra 2 if enabled:\nList<> actions = Arrays.asList(1,2)\nif (enabled) {\n   actions.add(3);\n   actions.add(4);\n}\nreturn list\n\nIf you really want it immutable, it can be wrapped inside another collection but considering its for internal consumption it's no need imo.", "author": "costin", "createdAt": "2020-02-14T14:59:41Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -103,9 +102,24 @@\n     public List<Setting<?>> getSettings() {\n         if (isSnapshot() || EQL_FEATURE_FLAG_REGISTERED) {\n             return List.of(EQL_ENABLED_SETTING);\n-        } else {\n-            return List.of();\n         }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {\n+        if (enabled) {\n+            return List.of(\n+                new ActionHandler<>(EqlSearchAction.INSTANCE, TransportEqlSearchAction.class),\n+                new ActionHandler<>(EqlStatsAction.INSTANCE, TransportEqlStatsAction.class),\n+                new ActionHandler<>(XPackUsageFeatureAction.EQL, EqlUsageTransportAction.class),\n+                new ActionHandler<>(XPackInfoFeatureAction.EQL, EqlInfoTransportAction.class)\n+            );\n+        }\n+        return List.of(\n+            new ActionHandler<>(XPackUsageFeatureAction.EQL, EqlUsageTransportAction.class),", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5Nzk2NA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379497964", "bodyText": "@costin see #52328 for why those two action have to be registered. At least, for the moment.", "author": "astefan", "createdAt": "2020-02-14T15:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NzAwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379957005", "bodyText": "I would not sweat about this particular code, it will be cleaner once we remove the feature flag.", "author": "aleksmaus", "createdAt": "2020-02-17T01:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NTg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Nzc4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379477783", "bodyText": "Either we use enabled or this method. On one hand enabled checks the property presence statically but this method tries to do it dynamic when a class is instantiated.\nThere's there are multiple pieces of isSnapshot in this class that need simplification.", "author": "costin", "createdAt": "2020-02-14T15:03:12Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -103,9 +102,24 @@\n     public List<Setting<?>> getSettings() {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDY1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379494653", "bodyText": "tried to follow the autoscaling plugin pattern, that I was told should be an example of handling the feature flag.", "author": "aleksmaus", "createdAt": "2020-02-14T15:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Nzc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3ODI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379478243", "bodyText": "Same as above, formatting on non-modified lines is noise.", "author": "costin", "createdAt": "2020-02-14T15:04:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/TransportEqlSearchAction.java", "diffHunk": "@@ -41,7 +40,7 @@\n \n     @Inject\n     public TransportEqlSearchAction(Settings settings, ClusterService clusterService, TransportService transportService,\n-            ThreadPool threadPool, ActionFilters actionFilters, PlanExecutor planExecutor) {\n+                                    ThreadPool threadPool, ActionFilters actionFilters, PlanExecutor planExecutor) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NTI3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379495276", "bodyText": "this is the formatting misalignment that I missed in my previous PR, now trying to fix it", "author": "aleksmaus", "createdAt": "2020-02-14T15:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3ODI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3OTcyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379479722", "bodyText": "nit: the preference in general is not to negate but instead use == false for clarity.", "author": "costin", "createdAt": "2020-02-14T15:06:44Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();\n+        }\n+        return arr;\n+    }\n+\n+    private static String readValueLine(String line) throws Exception {\n+        int idx = line.indexOf(\"=\");\n+        if (idx == -1) {\n+            throw new IllegalArgumentException(\"Invalid string value: \" + line);\n+        }\n+        return line.substring(idx + 1).trim();\n+    }\n+\n+    private static String[] readArray(String line) throws Exception {\n+        line = readValueLine(line);\n+        if (!line.startsWith(\"[\") && !line.endsWith(\"]\")) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NTczMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379495731", "bodyText": "will update", "author": "aleksmaus", "createdAt": "2020-02-14T15:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3OTcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Nzg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380867855", "bodyText": "this is no longer relevant, replacing with toml library", "author": "aleksmaus", "createdAt": "2020-02-18T18:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3OTcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379480723", "bodyText": "Why?", "author": "costin", "createdAt": "2020-02-14T15:08:35Z", "path": "x-pack/plugin/sql/build.gradle", "diffHunk": "@@ -26,6 +26,10 @@ configurations {\n \n archivesBaseName = 'x-pack-sql'\n \n+test {\n+  testLogging.showStandardStreams = true", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NTgwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379495809", "bodyText": "will remove", "author": "aleksmaus", "createdAt": "2020-02-14T15:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNDEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379524102", "bodyText": "I think this test should use @ParametersFactory so each example becomes a test that we can address individually.", "author": "nik9000", "createdAt": "2020-02-14T16:26:32Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlActionIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.Build;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+import org.junit.BeforeClass;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlActionIT extends AbstractEqlIntegTestCase {\n+\n+    @BeforeClass\n+    public static void checkForSnapshot() {\n+        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());\n+    }\n+\n+    public void testEqlSearchAction() throws Exception {\n+        final String indexPrefix = \"endgame\";\n+        final String testIndexName = indexPrefix + \"-1.4.0\";\n+        final String testIndexPattern = indexPrefix + \"-*\";\n+\n+        String endgame = copyToStringFromClasspath(\"/endgame.json\");\n+        endgame = endgame.replace(\"[index_pattern_placeholder]\", testIndexPattern);\n+\n+        assertAcked(client().admin().indices().preparePutTemplate(testIndexName)\n+            .setSource(endgame.getBytes(StandardCharsets.UTF_8), XContentType.JSON).get());\n+\n+        // Insert test data\n+        InputStream is = EqlActionIT.class.getResourceAsStream(\"/endgame.dat\");\n+        BulkRequestBuilder bulkBuilder = client().prepareBulk();\n+        try (BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(is, StandardCharsets.UTF_8))) {\n+\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                bulkBuilder.add(new IndexRequest(testIndexName).source(line.trim(), XContentType.JSON));\n+            }\n+            BulkResponse response = bulkBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get();\n+            assertThat(response.hasFailures() ? response.buildFailureMessage() : \"\", response.hasFailures(), equalTo(false));\n+        }\n+\n+        ensureYellow(testIndexName);\n+\n+        // Load EQL validation specs\n+        List<EqlSpec> specs = EqlSpecLoader.load(\"/test_queries.toml\", true);\n+        List<EqlSpec> unsupportedSpecs = EqlSpecLoader.load(\"/test_queries_unsupported.toml\", false);\n+\n+        // Validate only currently supported specs\n+        for (EqlSpec spec : specs) {\n+            boolean supported = true;\n+            // Check if spec is supported, simple iteration, cause the list is short.\n+            for (EqlSpec unSpec : unsupportedSpecs) {\n+                if (spec.query.equals(unSpec.query)) {\n+                    supported = false;\n+                    break;\n+                }\n+            }\n+\n+            if (supported) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3NzE0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r378977145", "bodyText": "Is this method used anywhere?", "author": "astefan", "createdAt": "2020-02-13T16:35:41Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/EqlTestUtils.java", "diffHunk": "@@ -16,19 +18,33 @@\n \n public final class EqlTestUtils {\n \n-    private EqlTestUtils() {}\n+    private EqlTestUtils() {\n+    }\n \n-    public static final Configuration TEST_CFG = new Configuration(new String[] { \"none\" }, org.elasticsearch.xpack.ql.util.DateUtils.UTC,\n-            \"nobody\", \"cluster\", null, TimeValue.timeValueSeconds(30), false, \"\");\n+    public static final Configuration TEST_CFG = new Configuration(new String[]{\"none\"}, org.elasticsearch.xpack.ql.util.DateUtils.UTC,\n+        \"nobody\", \"cluster\", null, TimeValue.timeValueSeconds(30), false, \"\");\n \n     public static Configuration randomConfiguration() {\n-        return new Configuration(new String[] {randomAlphaOfLength(16)},\n-                randomZone(),\n-                randomAlphaOfLength(16),\n-                randomAlphaOfLength(16),\n-                null,\n-                new TimeValue(randomNonNegativeLong()),\n-                randomBoolean(),\n-                randomAlphaOfLength(16));\n+        return new Configuration(new String[]{randomAlphaOfLength(16)},\n+            randomZone(),\n+            randomAlphaOfLength(16),\n+            randomAlphaOfLength(16),\n+            null,\n+            new TimeValue(randomNonNegativeLong()),\n+            randomBoolean(),\n+            randomAlphaOfLength(16));\n+    }\n+\n+    public static Tuple<String, String> pathAndName(String string) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2OTE3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380869172", "bodyText": "No longer used indeed, will remove", "author": "aleksmaus", "createdAt": "2020-02-18T18:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3NzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NjAyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379476029", "bodyText": "At one point we'll have to test EQL in a security enabled context as well, right?", "author": "astefan", "createdAt": "2020-02-14T15:00:04Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/AbstractEqlIntegTestCase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.license.LicenseService;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.eql.plugin.EqlPlugin;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;\n+\n+@ESIntegTestCase.ClusterScope(scope = SUITE, numDataNodes = 0, numClientNodes = 0, maxNumDataNodes = 0)\n+public abstract class AbstractEqlIntegTestCase extends ESIntegTestCase {\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        Settings.Builder settings = Settings.builder().put(super.nodeSettings(nodeOrdinal));\n+        settings.put(XPackSettings.SECURITY_ENABLED.getKey(), false);", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MDU0OA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380870548", "bodyText": "Probably. Was following AbstractSqlIntegTestCase as example in this case.", "author": "aleksmaus", "createdAt": "2020-02-18T18:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NjAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5OTc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379499752", "bodyText": "Doesn't this line fit on the try ( one?", "author": "astefan", "createdAt": "2020-02-14T15:42:05Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlActionIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.Build;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+import org.junit.BeforeClass;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlActionIT extends AbstractEqlIntegTestCase {\n+\n+    @BeforeClass\n+    public static void checkForSnapshot() {\n+        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());\n+    }\n+\n+    public void testEqlSearchAction() throws Exception {\n+        final String indexPrefix = \"endgame\";\n+        final String testIndexName = indexPrefix + \"-1.4.0\";\n+        final String testIndexPattern = indexPrefix + \"-*\";\n+\n+        String endgame = copyToStringFromClasspath(\"/endgame.json\");\n+        endgame = endgame.replace(\"[index_pattern_placeholder]\", testIndexPattern);\n+\n+        assertAcked(client().admin().indices().preparePutTemplate(testIndexName)\n+            .setSource(endgame.getBytes(StandardCharsets.UTF_8), XContentType.JSON).get());\n+\n+        // Insert test data\n+        InputStream is = EqlActionIT.class.getResourceAsStream(\"/endgame.dat\");\n+        BulkRequestBuilder bulkBuilder = client().prepareBulk();\n+        try (BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(is, StandardCharsets.UTF_8))) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MTA5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380871092", "bodyText": "No longer relevant, replaced with the toml parser library", "author": "aleksmaus", "createdAt": "2020-02-18T18:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5OTc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxMjUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379512539", "bodyText": "Import static for IMMEDIATE?", "author": "astefan", "createdAt": "2020-02-14T16:04:33Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlActionIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.Build;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+import org.junit.BeforeClass;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlActionIT extends AbstractEqlIntegTestCase {\n+\n+    @BeforeClass\n+    public static void checkForSnapshot() {\n+        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());\n+    }\n+\n+    public void testEqlSearchAction() throws Exception {\n+        final String indexPrefix = \"endgame\";\n+        final String testIndexName = indexPrefix + \"-1.4.0\";\n+        final String testIndexPattern = indexPrefix + \"-*\";\n+\n+        String endgame = copyToStringFromClasspath(\"/endgame.json\");\n+        endgame = endgame.replace(\"[index_pattern_placeholder]\", testIndexPattern);\n+\n+        assertAcked(client().admin().indices().preparePutTemplate(testIndexName)\n+            .setSource(endgame.getBytes(StandardCharsets.UTF_8), XContentType.JSON).get());\n+\n+        // Insert test data\n+        InputStream is = EqlActionIT.class.getResourceAsStream(\"/endgame.dat\");\n+        BulkRequestBuilder bulkBuilder = client().prepareBulk();\n+        try (BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(is, StandardCharsets.UTF_8))) {\n+\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                bulkBuilder.add(new IndexRequest(testIndexName).source(line.trim(), XContentType.JSON));\n+            }\n+            BulkResponse response = bulkBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get();", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MjQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380872475", "bodyText": "Seems like this is consistent with 100+ other places", "author": "aleksmaus", "createdAt": "2020-02-18T19:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxMjUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxMzUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379513524", "bodyText": "Any reason why not making query private inside EqlSpec and provide a query() accessor method?", "author": "astefan", "createdAt": "2020-02-14T16:06:23Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlActionIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import org.elasticsearch.Build;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+import org.junit.BeforeClass;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlActionIT extends AbstractEqlIntegTestCase {\n+\n+    @BeforeClass\n+    public static void checkForSnapshot() {\n+        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());\n+    }\n+\n+    public void testEqlSearchAction() throws Exception {\n+        final String indexPrefix = \"endgame\";\n+        final String testIndexName = indexPrefix + \"-1.4.0\";\n+        final String testIndexPattern = indexPrefix + \"-*\";\n+\n+        String endgame = copyToStringFromClasspath(\"/endgame.json\");\n+        endgame = endgame.replace(\"[index_pattern_placeholder]\", testIndexPattern);\n+\n+        assertAcked(client().admin().indices().preparePutTemplate(testIndexName)\n+            .setSource(endgame.getBytes(StandardCharsets.UTF_8), XContentType.JSON).get());\n+\n+        // Insert test data\n+        InputStream is = EqlActionIT.class.getResourceAsStream(\"/endgame.dat\");\n+        BulkRequestBuilder bulkBuilder = client().prepareBulk();\n+        try (BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(is, StandardCharsets.UTF_8))) {\n+\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                bulkBuilder.add(new IndexRequest(testIndexName).source(line.trim(), XContentType.JSON));\n+            }\n+            BulkResponse response = bulkBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get();\n+            assertThat(response.hasFailures() ? response.buildFailureMessage() : \"\", response.hasFailures(), equalTo(false));\n+        }\n+\n+        ensureYellow(testIndexName);\n+\n+        // Load EQL validation specs\n+        List<EqlSpec> specs = EqlSpecLoader.load(\"/test_queries.toml\", true);\n+        List<EqlSpec> unsupportedSpecs = EqlSpecLoader.load(\"/test_queries_unsupported.toml\", false);\n+\n+        // Validate only currently supported specs\n+        for (EqlSpec spec : specs) {\n+            boolean supported = true;\n+            // Check if spec is supported, simple iteration, cause the list is short.\n+            for (EqlSpec unSpec : unsupportedSpecs) {\n+                if (spec.query.equals(unSpec.query)) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3Mzg3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380873879", "bodyText": "Less typing for the test code. Will convert to accessors.", "author": "aleksmaus", "createdAt": "2020-02-18T19:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxMzUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzI3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379517272", "bodyText": "Will this method be used in the future? (atm it isn't)", "author": "astefan", "createdAt": "2020-02-14T16:13:40Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NzM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379957343", "bodyText": "EqlSpecLoader.load is used here\nhttps://github.com/elastic/elasticsearch/pull/52248/files#diff-663165787e62c937a0aa8ac3d8511d6dR63", "author": "aleksmaus", "createdAt": "2020-02-17T01:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxODE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379518193", "bodyText": "Imo, it would help to see a method comment containing sample line(s) these read* methods are expected to handle.", "author": "astefan", "createdAt": "2020-02-14T16:15:26Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380878131", "bodyText": "No longer relevant, replaced with toml parser", "author": "aleksmaus", "createdAt": "2020-02-18T19:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxODE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMTE0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379521141", "bodyText": "Why are all these read* methods trimming the values they are reading? For example, readTags gets its values from readArray which is already trimming the values returned as array...\nAre all these trim() calls really needed or they are added just \"to be safe\"?", "author": "astefan", "createdAt": "2020-02-14T16:20:51Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NzY5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379957693", "bodyText": "in this particular case the trimming is done for the case where the value in the brackets prefixed/suffixed with spaces, for example: \" foo bar \"", "author": "aleksmaus", "createdAt": "2020-02-17T01:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMTE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMTc5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379521795", "bodyText": "I don't think this initialization is necessary. A simple String delim; should be enough.", "author": "astefan", "createdAt": "2020-02-14T16:22:08Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();\n+        }\n+        return arr;\n+    }\n+\n+    private static String readValueLine(String line) throws Exception {\n+        int idx = line.indexOf(\"=\");\n+        if (idx == -1) {\n+            throw new IllegalArgumentException(\"Invalid string value: \" + line);\n+        }\n+        return line.substring(idx + 1).trim();\n+    }\n+\n+    private static String[] readArray(String line) throws Exception {\n+        line = readValueLine(line);\n+        if (!line.startsWith(\"[\") && !line.endsWith(\"]\")) {\n+            throw new IllegalArgumentException(\"Invalid array string value: \" + line);\n+        }\n+        String arr[] = line.substring(1, line.length() - 1).split(\",\");\n+\n+        ArrayList<String> res = new ArrayList<>();\n+        for (String s : arr) {\n+            s = s.trim();\n+            if (!s.isEmpty()) {\n+                res.add(s);\n+            }\n+        }\n+\n+        return res.toArray(new String[res.size()]);\n+    }\n+\n+    private static String readString(String line, BufferedReader reader) throws Exception {\n+        line = readValueLine(line);\n+        String delim = \"\";", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NzgwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379957802", "bodyText": "IDE was complaining on unitialized var delim otherwise", "author": "aleksmaus", "createdAt": "2020-02-17T01:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMjUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379522522", "bodyText": "Single try() line.", "author": "astefan", "createdAt": "2020-02-14T16:23:29Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();\n+        }\n+        return arr;\n+    }\n+\n+    private static String readValueLine(String line) throws Exception {\n+        int idx = line.indexOf(\"=\");\n+        if (idx == -1) {\n+            throw new IllegalArgumentException(\"Invalid string value: \" + line);\n+        }\n+        return line.substring(idx + 1).trim();\n+    }\n+\n+    private static String[] readArray(String line) throws Exception {\n+        line = readValueLine(line);\n+        if (!line.startsWith(\"[\") && !line.endsWith(\"]\")) {\n+            throw new IllegalArgumentException(\"Invalid array string value: \" + line);\n+        }\n+        String arr[] = line.substring(1, line.length() - 1).split(\",\");\n+\n+        ArrayList<String> res = new ArrayList<>();\n+        for (String s : arr) {\n+            s = s.trim();\n+            if (!s.isEmpty()) {\n+                res.add(s);\n+            }\n+        }\n+\n+        return res.toArray(new String[res.size()]);\n+    }\n+\n+    private static String readString(String line, BufferedReader reader) throws Exception {\n+        line = readValueLine(line);\n+        String delim = \"\";\n+        if (line.startsWith(\"\\\"\") || line.startsWith(\"'\")) {\n+            delim = line.substring(0, 1);\n+            if (line.startsWith(\"\\\"\\\"\\\"\") || line.startsWith(\"'''\")) {\n+                delim = line.substring(0, 3);\n+            }\n+        }\n+\n+        if (StringUtil.isNullOrEmpty(delim)) {\n+            throw new IllegalArgumentException(\"Invalid string format, should start with ' or \\\" at least: \" + line);\n+        }\n+\n+        // Trim start delimiter\n+        if (line.startsWith(delim)) {\n+            line = line.substring(delim.length());\n+        }\n+\n+        // Read multiline string\n+        if (!line.endsWith(delim)) {\n+            String s;\n+            while ((s = reader.readLine()) != null) {\n+                line += \" \" + s.trim();\n+                if (line.endsWith(delim)) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Trim end delimiter\n+        if (line.endsWith(delim)) {\n+            line = line.substring(0, line.length() - delim.length());\n+        }\n+\n+        return line.trim();\n+    }\n+\n+    private static void validateAndAddSpec(List<EqlSpec> specs, EqlSpec spec, boolean supported) throws Exception {\n+        if (StringUtil.isNullOrEmpty(spec.query)) {\n+            throw new IllegalArgumentException(\"Read a test without a query value\");\n+        }\n+\n+        if (supported && spec.expectedEventIds == null) {\n+            throw new IllegalArgumentException(\"Read a test without a expected_event_ids value\");\n+        }\n+\n+        specs.add(spec);\n+    }\n+\n+    // Simple .toml spec parsing of the original EQL spec\n+    // to avoid adding dependency on any actual toml library for now.\n+    private static List<EqlSpec> readFromStream(InputStream is, boolean supported) throws Exception {\n+        Map<String, Integer> testNames = new LinkedHashMap<>();\n+        List<EqlSpec> testSpecs = new ArrayList<>();\n+\n+        EqlSpec spec = null;\n+        try (BufferedReader reader = new BufferedReader(", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3OTUwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380879502", "bodyText": "No longer relevant, replaced with toml parser.", "author": "aleksmaus", "createdAt": "2020-02-18T19:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNDgwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379524801", "bodyText": "There is a class org.elasticsearch.common.Strings that has the same method and I think we prefer that one.", "author": "astefan", "createdAt": "2020-02-14T16:27:49Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();\n+        }\n+        return arr;\n+    }\n+\n+    private static String readValueLine(String line) throws Exception {\n+        int idx = line.indexOf(\"=\");\n+        if (idx == -1) {\n+            throw new IllegalArgumentException(\"Invalid string value: \" + line);\n+        }\n+        return line.substring(idx + 1).trim();\n+    }\n+\n+    private static String[] readArray(String line) throws Exception {\n+        line = readValueLine(line);\n+        if (!line.startsWith(\"[\") && !line.endsWith(\"]\")) {\n+            throw new IllegalArgumentException(\"Invalid array string value: \" + line);\n+        }\n+        String arr[] = line.substring(1, line.length() - 1).split(\",\");\n+\n+        ArrayList<String> res = new ArrayList<>();\n+        for (String s : arr) {\n+            s = s.trim();\n+            if (!s.isEmpty()) {\n+                res.add(s);\n+            }\n+        }\n+\n+        return res.toArray(new String[res.size()]);\n+    }\n+\n+    private static String readString(String line, BufferedReader reader) throws Exception {\n+        line = readValueLine(line);\n+        String delim = \"\";\n+        if (line.startsWith(\"\\\"\") || line.startsWith(\"'\")) {\n+            delim = line.substring(0, 1);\n+            if (line.startsWith(\"\\\"\\\"\\\"\") || line.startsWith(\"'''\")) {\n+                delim = line.substring(0, 3);\n+            }\n+        }\n+\n+        if (StringUtil.isNullOrEmpty(delim)) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3OTIyNA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380879224", "bodyText": "No longer relevant, replaced with toml parser.", "author": "aleksmaus", "createdAt": "2020-02-18T19:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNDgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379525063", "bodyText": "Same here about Strings class.", "author": "astefan", "createdAt": "2020-02-14T16:28:17Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSpecLoader.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.action;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EqlSpecLoader {\n+    public static List<EqlSpec> load(String path, boolean supported) throws Exception {\n+        try (InputStream is = EqlSpecLoader.class.getResourceAsStream(path)) {\n+            return readFromStream(is, supported);\n+        }\n+    }\n+\n+    private static int[] readExpectedEventIds(String line, BufferedReader reader) throws Exception {\n+        String arr[] = readArray(line);\n+        int ids[] = new int[arr.length];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            ids[i] = Integer.parseInt(arr[i]);\n+        }\n+        return ids;\n+    }\n+\n+    private static String[] readTags(String line) throws Exception {\n+        String arr[] = readArray(line);\n+        for (int i = 0; i < arr.length; i++) {\n+            String s = arr[i];\n+            if (s.startsWith(\"\\\"\") || s.startsWith(\"'\")) {\n+                s = s.substring(1);\n+            }\n+            if (s.endsWith(\"\\\"\") || s.endsWith(\"'\")) {\n+                s = s.substring(0, s.length() - 1);\n+            }\n+            arr[i] = s.trim();\n+        }\n+        return arr;\n+    }\n+\n+    private static String readValueLine(String line) throws Exception {\n+        int idx = line.indexOf(\"=\");\n+        if (idx == -1) {\n+            throw new IllegalArgumentException(\"Invalid string value: \" + line);\n+        }\n+        return line.substring(idx + 1).trim();\n+    }\n+\n+    private static String[] readArray(String line) throws Exception {\n+        line = readValueLine(line);\n+        if (!line.startsWith(\"[\") && !line.endsWith(\"]\")) {\n+            throw new IllegalArgumentException(\"Invalid array string value: \" + line);\n+        }\n+        String arr[] = line.substring(1, line.length() - 1).split(\",\");\n+\n+        ArrayList<String> res = new ArrayList<>();\n+        for (String s : arr) {\n+            s = s.trim();\n+            if (!s.isEmpty()) {\n+                res.add(s);\n+            }\n+        }\n+\n+        return res.toArray(new String[res.size()]);\n+    }\n+\n+    private static String readString(String line, BufferedReader reader) throws Exception {\n+        line = readValueLine(line);\n+        String delim = \"\";\n+        if (line.startsWith(\"\\\"\") || line.startsWith(\"'\")) {\n+            delim = line.substring(0, 1);\n+            if (line.startsWith(\"\\\"\\\"\\\"\") || line.startsWith(\"'''\")) {\n+                delim = line.substring(0, 3);\n+            }\n+        }\n+\n+        if (StringUtil.isNullOrEmpty(delim)) {\n+            throw new IllegalArgumentException(\"Invalid string format, should start with ' or \\\" at least: \" + line);\n+        }\n+\n+        // Trim start delimiter\n+        if (line.startsWith(delim)) {\n+            line = line.substring(delim.length());\n+        }\n+\n+        // Read multiline string\n+        if (!line.endsWith(delim)) {\n+            String s;\n+            while ((s = reader.readLine()) != null) {\n+                line += \" \" + s.trim();\n+                if (line.endsWith(delim)) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Trim end delimiter\n+        if (line.endsWith(delim)) {\n+            line = line.substring(0, line.length() - delim.length());\n+        }\n+\n+        return line.trim();\n+    }\n+\n+    private static void validateAndAddSpec(List<EqlSpec> specs, EqlSpec spec, boolean supported) throws Exception {\n+        if (StringUtil.isNullOrEmpty(spec.query)) {", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3OTg5MA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380879890", "bodyText": "Updated", "author": "aleksmaus", "createdAt": "2020-02-18T19:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNTA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzMA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r379526430", "bodyText": "Can you remove this, please?", "author": "astefan", "createdAt": "2020-02-14T16:30:52Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java", "diffHunk": "@@ -71,6 +70,7 @@\n  *         EqlSearchResponse.Hits hits = new EqlSearchResponse.Hits(null, null, counts, totals);\n  *         EqlSearchResponse response = new EqlSearchResponse(hits, 5, false);\n  */\n+", "originalCommit": "7edf6c7c793ca1ca5625ba53c0c524f18b10dc4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MDYxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r380880611", "bodyText": "Sure. It was initially useful to have while we were iterating on the response shape.", "author": "aleksmaus", "createdAt": "2020-02-18T19:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzMA=="}], "type": "inlineReview"}, {"oid": "b6b7f53e14a2caa887adf3f956811b64138fbce4", "url": "https://github.com/elastic/elasticsearch/commit/b6b7f53e14a2caa887adf3f956811b64138fbce4", "message": "Addressed code review. Replaced manual toml parser with Apache licensed toml parser library", "committedDate": "2020-02-18T19:44:30Z", "type": "commit"}, {"oid": "595f316a1511292efe8d415d9b269a900b4d96b6", "url": "https://github.com/elastic/elasticsearch/commit/595f316a1511292efe8d415d9b269a900b4d96b6", "message": "Merge branch 'master' into feature/eql_validation_tests", "committedDate": "2020-02-19T02:15:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5OTQxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381399419", "bodyText": "nit: a more descriptive filename. i.e. endgame_mappings.json", "author": "rw-access", "createdAt": "2020-02-19T16:43:01Z", "path": "x-pack/plugin/eql/src/test/resources/endgame.json", "diffHunk": "@@ -0,0 +1,2531 @@\n+{", "originalCommit": "595f316a1511292efe8d415d9b269a900b4d96b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMTAyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381401025", "bodyText": "the mappings are consistent with the data, but the queries are not. EQL is independent of ECS, so I think it's okay to leave the data in the same schema that it was in", "author": "rw-access", "createdAt": "2020-02-19T16:45:19Z", "path": "x-pack/plugin/eql/src/test/resources/endgame.ndjson", "diffHunk": "@@ -0,0 +1,102 @@\n+{\"user\":{\"group\":{}},\"host\":{\"os\":{\"platform\":\"windows\",\"name\":\"Windows\"},\"ip\":\"127.0.0.1\",\"hostname\":\"localhost\",\"name\":\"localhost\"},\"event\":{\"module\":\"endgame\",\"dataset\":\"esensor\",\"action\":\"already_running\",\"category\":\"process\",\"kind\":\"event\"},\"labels\":{\"account_id\":\"f6c123dc-b6d9-4849-937b-08c444ce7d96\",\"endpoint_id\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\"},\"agent\":{\"type\":\"endgame\",\"id\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\",\"version\":\"3.54.0\"},\"ecs\":{\"version\":\"1.1.0\"},\"@timestamp\":0,\"process\":{\"thread\":{},\"parent\":{},\"hash\":{},\"name\":\"System Idle Process\"},\"endgame\":{\"name\":\"localhost\",\"eid\":\"6a19472c-f0ab-4f3a-b83d-dc3698a5ff66\",\"MID\":\"\",\"ip\":\"127.0.0.1\",\"sver\":\"3.54.0\",\"os_type\":\"windows\",\"serial_event_id\":1,\"opcode\":3,\"event_type_full\":\"process_event\",\"event_subtype_full\":\"already_running\",\"timestamp\":116444736000000000,\"process_name\":\"System Idle Process\",\"unique_pid\":1,\"xml_message\":\"\",\"provider_name\":\"\",\"provider_guid\":\"\",\"channel_name\":\"\",\"subject_user_sid\":\"\",\"subject_user_name\":\"\",\"subject_domain_name\":\"\",\"subject_logon_id\":\"\",\"target_domain_name\":\"\",\"target_user_name\":\"\",\"target_logon_id\":\"\",\"ip_address\":\"\",\"computer_name\":\"\",\"privilege_list\":\"\",\"logon_type\":null,\"system_thread_id\":null,\"system_pid\":null,\"system_process_name\":\"\",\"query_name\":\"\",\"query_type\":null,\"query_results\":null,\"metadata\":{\"collection_time\":0}}}", "originalCommit": "595f316a1511292efe8d415d9b269a900b4d96b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMjYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381402628", "bodyText": "using this format mostly in order to validate and work through any possible issues with covering our particular use case", "author": "aleksmaus", "createdAt": "2020-02-19T16:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDQzNg==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381404436", "bodyText": "that means we have to manually rewrite all of the queries though, which is likely more error prone.", "author": "rw-access", "createdAt": "2020-02-19T16:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxNjA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/52248#discussion_r381416080", "bodyText": "Discussed with @rw-access on Slack.\nOriginally I was under impression that we will keep the queries/rules the same and use some internal mapping to adopt them for ECS.  It looks like in the first iteration this will not be the case and the queries/rules will be rewritten for ECS.\nI will update this PR to use the same flat json data from the original EQL tests and remove the ECS mapping template creation for now.", "author": "aleksmaus", "createdAt": "2020-02-19T17:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMTAyNQ=="}], "type": "inlineReview"}, {"oid": "9f3da81ff2595a0b0753ad986cfa3d99966c8488", "url": "https://github.com/elastic/elasticsearch/commit/9f3da81ff2595a0b0753ad986cfa3d99966c8488", "message": "Replace the ECS test data with the flat json test data from origin EQL implementation", "committedDate": "2020-02-19T19:21:54Z", "type": "commit"}, {"oid": "09260e685f970ea46a7f4cc2702c45acb54e485b", "url": "https://github.com/elastic/elasticsearch/commit/09260e685f970ea46a7f4cc2702c45acb54e485b", "message": "Convert EqlActionIT to parameterized test", "committedDate": "2020-02-19T20:16:41Z", "type": "commit"}, {"oid": "2d6111fe5a2f770ccfbc2d5379c25279d0348090", "url": "https://github.com/elastic/elasticsearch/commit/2d6111fe5a2f770ccfbc2d5379c25279d0348090", "message": "Merge branch 'master' into feature/eql_validation_tests", "committedDate": "2020-02-20T02:34:50Z", "type": "commit"}, {"oid": "6db4617e64cb95d3616d0c98b6f3ae8eab4ccd3b", "url": "https://github.com/elastic/elasticsearch/commit/6db4617e64cb95d3616d0c98b6f3ae8eab4ccd3b", "message": "Adjust the HL client test for a change in emulated EQL search response.\n\nThe fake response change was done in order to test the EQL validation harness imlementation.\nThis code will be replaced once we have the actualy EQL implementation wired.", "committedDate": "2020-02-20T03:11:52Z", "type": "commit"}, {"oid": "384cfd8cd74817088c36c6f34d3d17f3d8d47843", "url": "https://github.com/elastic/elasticsearch/commit/384cfd8cd74817088c36c6f34d3d17f3d8d47843", "message": "Addressed Ross' remaining code review comment", "committedDate": "2020-02-20T15:04:26Z", "type": "commit"}, {"oid": "384cfd8cd74817088c36c6f34d3d17f3d8d47843", "url": "https://github.com/elastic/elasticsearch/commit/384cfd8cd74817088c36c6f34d3d17f3d8d47843", "message": "Addressed Ross' remaining code review comment", "committedDate": "2020-02-20T15:04:26Z", "type": "forcePushed"}, {"oid": "54035b19e19854e9d13b95d074f83eec31eae495", "url": "https://github.com/elastic/elasticsearch/commit/54035b19e19854e9d13b95d074f83eec31eae495", "message": "Merge branch 'master' into feature/eql_validation_tests", "committedDate": "2020-02-21T22:20:19Z", "type": "commit"}]}