{"pr_number": 52523, "pr_title": "[DOCS] Correct multi search API docs", "pr_createdAt": "2020-02-19T16:46:31Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52523", "timeline": [{"oid": "cf5d46e935b91257ce340f3692ff279044d0e403", "url": "https://github.com/elastic/elasticsearch/commit/cf5d46e935b91257ce340f3692ff279044d0e403", "message": "[DOCS] Correct multi search API docs\n\n* Adds an example request to the top of the page.\n* Relocates several parameters erroneously listed under \"Request body\"\nto the appropriate \"Query parameters\" section.\n* Updates the \"Request body\" section to better document the NDJSON\n  structure of msearch requests.", "committedDate": "2020-02-19T16:46:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNDQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/52523#discussion_r383134484", "bodyText": "Can this reuse the common-parms include as done for the request parameter above?", "author": "romseygeek", "createdAt": "2020-02-24T08:43:48Z", "path": "docs/reference/search/multi-search.asciidoc", "diffHunk": "@@ -27,53 +37,219 @@ body\\n\n --------------------------------------------------\n // NOTCONSOLE\n \n-*NOTE*: the final line of data must end with a newline character `\\n`. Each newline character\n-may be preceded by a carriage return `\\r`. When sending requests to this endpoint the\n-`Content-Type` header should be set to `application/x-ndjson`.\n+This structure is specifically optimized to reduce parsing if a specific search\n+ends up redirected to another node.\n+\n+[IMPORTANT]\n+====\n+The final line of data must end with a newline character `\\n`. Each newline\n+character may be preceded by a carriage return `\\r`. When sending requests to\n+this endpoint the `Content-Type` header should be set to `application/x-ndjson`.\n+====\n \n [[search-multi-search-api-path-params]]\n ==== {api-path-parms-title}\n \n include::{docdir}/rest-api/common-parms.asciidoc[tag=index]\n++\n+To search all indices, use `_all` or omit this parameter.\n \n+[[search-multi-search-api-query-params]]\n+==== {api-query-parms-title}\n \n-[[search-multi-search-api-request-body]]\n-==== {api-request-body-title}\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\n+`ccs_minimize_roundtrips`::\n+(Optional, boolean)\n+If `true`, network roundtrips between the coordinating node and remote clusters\n+are minimized for {ccs} requests. Defaults to `true`. See\n+<<ccs-network-delays>>.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n++\n+Defaults to `open`.\n+\n+`ignore_throttled`::\n+(Optional, boolean)\n+If `true`, concrete, expanded or aliased indices are ignored when throttled.\n+Defaults to `false`.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n \n-`aggregations`::\n-  (Optional, object) Specifies aggregations.\n-  \n-include::{docdir}/rest-api/common-parms.asciidoc[tag=from]\n-  \n `max_concurrent_searches`::\n-  (Optional, integer) Specifies the maximum number of concurrent searches the \n-  multi search API will execute. This default is based on the number of data \n-  nodes and the default search thread pool size.\n-  \n+(Optional, integer)\n+Maximum number of concurrent searches the multi search API can execute.\n+\n `max_concurrent_shard_requests`::\n-  (Optional, integer) Specifies the maximum number of concurrent shard requests \n-  that each sub search request will execute per node. This parameter should be \n-  used to protect a single request from overloading a cluster (for example a \n-  default request will hit all indices in a cluster which could cause shard \n-  request rejections if the number of shards per node is high). Defaults to `5`. \n-  In certain scenarios parallelism isn't achieved through concurrent request \n-  such that this protection will result in poor performance. For instance in an \n-  environment where only a very low number of concurrent search requests are \n-  expected it might help to increase this value to a higher number.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=preference]\n++\n+--\n+(Optional, integer)\n+Maximum number of concurrent shard requests that each sub-search request\n+executes per node.  Defaults to `5`. \n+\n+You can use this parameter to prevent a request from overloading a cluster. For\n+example, a default request hits all indices in a cluster. This could cause shard\n+request rejections if the number of shards per node is high.\n+\n+In certain scenarios, parallelism isn't achieved through concurrent requests. In\n+those cases, a low value in this  parameter could result in poor performance.\n+For example, in an environment where a very low number of concurrent search\n+requests are expected, a higher value in this parameter may improve performance.\n+--\n+\n+`pre_filter_shard_size`::\n+(Optional, integer)\n+Defines a threshold that enforces a pre-filter roundtrip to prefilter search\n+shards based on query rewriting if the number of shards the search request\n+expands to exceeds the threshold. This filter roundtrip can limit the number of\n+shards significantly if for instance a shard can not match any documents based\n+on it's rewrite method i.e., if date filters are mandatory to match but the\n+shard bounds and the query are disjoint. Defaults to `128`.\n+\n+`rest_total_hits_as_int`::\n+(Optional, boolean)\n+If `true`, `hits.total` are returned as an integer in the\n+response. Defaults to `false`, which returns an object.\n+\n+`routing`::\n+(Optional, string)\n+Custom <<mapping-routing-field,routing value>> used to route search operations\n+to a specific shard.\n+\n+`search_type`::\n++\n+--\n+(Optional, string)\n+Indicates whether global term and document frequencies should be used when\n+scoring returned documents. \n+\n+Options are:\n+\n+`query_then_fetch`::\n+(default)\n+Documents are scored using local term and document frequencies for the shard.\n+This is usually faster but less accurate.\n+\n+`dfs_query_then_fetch`::\n+Documents are scored using global term and document frequencies across all\n+shards. This is usually slower but more accurate.\n+--\n   \n-`query`::\n-  (Optional, <<query-dsl,query object>>) Defines the search definition using the \n-  <<query-dsl,Query DSL>>.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=routing]\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=search_type]\n+`typed_keys`::\n+(Optional, boolean)\n+Specifies whether aggregation and suggester names should be prefixed by their\n+respective types in the response.\n \n-`size`:: \n-  (Optional, integer) The number of hits to return. Defaults to `10`.\n+[[search-multi-search-api-request-body]]\n+==== {api-request-body-title}\n \n+The request body contains a newline-delimited list of search `<header>` and\n+search `<body>` objects.\n+\n+`<header>`::\n++\n+--\n+(Required, object)\n+Contains parameters used to limit or change the subsequent search body request.\n+\n+This object is required for each search body but can be empty (`{}`) or a blank\n+line.\n+--\n+\n+`allow_no_indices`:::\n+(Optional, boolean)\n+If `true`, the request does *not* return an error if a wildcard expression or\n+`_all` value retrieves only missing or closed indices.\n++\n+This parameter also applies to <<indices-aliases,index aliases>> that point to a\n+missing or closed index.\n+\n+`expand_wildcards`:::", "originalCommit": "cf5d46e935b91257ce340f3692ff279044d0e403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNDg0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52523#discussion_r383134842", "bodyText": "Can we specify the default value here?", "author": "romseygeek", "createdAt": "2020-02-24T08:44:46Z", "path": "docs/reference/search/multi-search.asciidoc", "diffHunk": "@@ -27,53 +37,219 @@ body\\n\n --------------------------------------------------\n // NOTCONSOLE\n \n-*NOTE*: the final line of data must end with a newline character `\\n`. Each newline character\n-may be preceded by a carriage return `\\r`. When sending requests to this endpoint the\n-`Content-Type` header should be set to `application/x-ndjson`.\n+This structure is specifically optimized to reduce parsing if a specific search\n+ends up redirected to another node.\n+\n+[IMPORTANT]\n+====\n+The final line of data must end with a newline character `\\n`. Each newline\n+character may be preceded by a carriage return `\\r`. When sending requests to\n+this endpoint the `Content-Type` header should be set to `application/x-ndjson`.\n+====\n \n [[search-multi-search-api-path-params]]\n ==== {api-path-parms-title}\n \n include::{docdir}/rest-api/common-parms.asciidoc[tag=index]\n++\n+To search all indices, use `_all` or omit this parameter.\n \n+[[search-multi-search-api-query-params]]\n+==== {api-query-parms-title}\n \n-[[search-multi-search-api-request-body]]\n-==== {api-request-body-title}\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\n+`ccs_minimize_roundtrips`::\n+(Optional, boolean)\n+If `true`, network roundtrips between the coordinating node and remote clusters\n+are minimized for {ccs} requests. Defaults to `true`. See\n+<<ccs-network-delays>>.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n++\n+Defaults to `open`.\n+\n+`ignore_throttled`::\n+(Optional, boolean)\n+If `true`, concrete, expanded or aliased indices are ignored when throttled.\n+Defaults to `false`.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n \n-`aggregations`::\n-  (Optional, object) Specifies aggregations.\n-  \n-include::{docdir}/rest-api/common-parms.asciidoc[tag=from]\n-  \n `max_concurrent_searches`::\n-  (Optional, integer) Specifies the maximum number of concurrent searches the \n-  multi search API will execute. This default is based on the number of data \n-  nodes and the default search thread pool size.\n-  \n+(Optional, integer)\n+Maximum number of concurrent searches the multi search API can execute.\n+\n `max_concurrent_shard_requests`::\n-  (Optional, integer) Specifies the maximum number of concurrent shard requests \n-  that each sub search request will execute per node. This parameter should be \n-  used to protect a single request from overloading a cluster (for example a \n-  default request will hit all indices in a cluster which could cause shard \n-  request rejections if the number of shards per node is high). Defaults to `5`. \n-  In certain scenarios parallelism isn't achieved through concurrent request \n-  such that this protection will result in poor performance. For instance in an \n-  environment where only a very low number of concurrent search requests are \n-  expected it might help to increase this value to a higher number.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=preference]\n++\n+--\n+(Optional, integer)\n+Maximum number of concurrent shard requests that each sub-search request\n+executes per node.  Defaults to `5`. \n+\n+You can use this parameter to prevent a request from overloading a cluster. For\n+example, a default request hits all indices in a cluster. This could cause shard\n+request rejections if the number of shards per node is high.\n+\n+In certain scenarios, parallelism isn't achieved through concurrent requests. In\n+those cases, a low value in this  parameter could result in poor performance.\n+For example, in an environment where a very low number of concurrent search\n+requests are expected, a higher value in this parameter may improve performance.\n+--\n+\n+`pre_filter_shard_size`::\n+(Optional, integer)\n+Defines a threshold that enforces a pre-filter roundtrip to prefilter search\n+shards based on query rewriting if the number of shards the search request\n+expands to exceeds the threshold. This filter roundtrip can limit the number of\n+shards significantly if for instance a shard can not match any documents based\n+on it's rewrite method i.e., if date filters are mandatory to match but the\n+shard bounds and the query are disjoint. Defaults to `128`.\n+\n+`rest_total_hits_as_int`::\n+(Optional, boolean)\n+If `true`, `hits.total` are returned as an integer in the\n+response. Defaults to `false`, which returns an object.\n+\n+`routing`::\n+(Optional, string)\n+Custom <<mapping-routing-field,routing value>> used to route search operations\n+to a specific shard.\n+\n+`search_type`::\n++\n+--\n+(Optional, string)\n+Indicates whether global term and document frequencies should be used when\n+scoring returned documents. \n+\n+Options are:\n+\n+`query_then_fetch`::\n+(default)\n+Documents are scored using local term and document frequencies for the shard.\n+This is usually faster but less accurate.\n+\n+`dfs_query_then_fetch`::\n+Documents are scored using global term and document frequencies across all\n+shards. This is usually slower but more accurate.\n+--\n   \n-`query`::\n-  (Optional, <<query-dsl,query object>>) Defines the search definition using the \n-  <<query-dsl,Query DSL>>.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=routing]\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=search_type]\n+`typed_keys`::\n+(Optional, boolean)\n+Specifies whether aggregation and suggester names should be prefixed by their\n+respective types in the response.\n \n-`size`:: \n-  (Optional, integer) The number of hits to return. Defaults to `10`.\n+[[search-multi-search-api-request-body]]\n+==== {api-request-body-title}\n \n+The request body contains a newline-delimited list of search `<header>` and\n+search `<body>` objects.\n+\n+`<header>`::\n++\n+--\n+(Required, object)\n+Contains parameters used to limit or change the subsequent search body request.\n+\n+This object is required for each search body but can be empty (`{}`) or a blank\n+line.\n+--\n+\n+`allow_no_indices`:::\n+(Optional, boolean)\n+If `true`, the request does *not* return an error if a wildcard expression or\n+`_all` value retrieves only missing or closed indices.\n++\n+This parameter also applies to <<indices-aliases,index aliases>> that point to a\n+missing or closed index.\n+\n+`expand_wildcards`:::\n++\n+--\n+(Optional, string)\n+Controls what kind of indices that wildcard\n+expressions can expand to. Valid values are:\n+\n+`all`::\n+Expand to open and closed indices.\n+\n+`open`::\n+Expand only to open indices.\n+\n+`closed`::\n+Expand only to closed indices.\n+\n+`hidden`::\n+Expansion of wildcards will include hidden indices.\n+\n+`none`::\n+Wildcard expressions are not accepted.\n+\n+Defaults to `open`.\n+--\n+\n+`ignore_unavailable`:::\n+(Optional, boolean) If `true`, documents from missing or closed indices are not\n+included in the response. Defaults to `false`.\n+\n+`index`:::\n+(Optional, string or array of strings)\n+Index name or <<indices-aliases,alias>> used to limit the request. Wildcard\n+expressions are supported. You can specify multiple indices as an array.\n+\n+`preference`:::\n+(Optional, string)\n+Node or shard used to perform the search.", "originalCommit": "cf5d46e935b91257ce340f3692ff279044d0e403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNDkyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52523#discussion_r383134922", "bodyText": "Default value?", "author": "romseygeek", "createdAt": "2020-02-24T08:44:57Z", "path": "docs/reference/search/multi-search.asciidoc", "diffHunk": "@@ -27,53 +37,219 @@ body\\n\n --------------------------------------------------\n // NOTCONSOLE\n \n-*NOTE*: the final line of data must end with a newline character `\\n`. Each newline character\n-may be preceded by a carriage return `\\r`. When sending requests to this endpoint the\n-`Content-Type` header should be set to `application/x-ndjson`.\n+This structure is specifically optimized to reduce parsing if a specific search\n+ends up redirected to another node.\n+\n+[IMPORTANT]\n+====\n+The final line of data must end with a newline character `\\n`. Each newline\n+character may be preceded by a carriage return `\\r`. When sending requests to\n+this endpoint the `Content-Type` header should be set to `application/x-ndjson`.\n+====\n \n [[search-multi-search-api-path-params]]\n ==== {api-path-parms-title}\n \n include::{docdir}/rest-api/common-parms.asciidoc[tag=index]\n++\n+To search all indices, use `_all` or omit this parameter.\n \n+[[search-multi-search-api-query-params]]\n+==== {api-query-parms-title}\n \n-[[search-multi-search-api-request-body]]\n-==== {api-request-body-title}\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\n+`ccs_minimize_roundtrips`::\n+(Optional, boolean)\n+If `true`, network roundtrips between the coordinating node and remote clusters\n+are minimized for {ccs} requests. Defaults to `true`. See\n+<<ccs-network-delays>>.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n++\n+Defaults to `open`.\n+\n+`ignore_throttled`::\n+(Optional, boolean)\n+If `true`, concrete, expanded or aliased indices are ignored when throttled.\n+Defaults to `false`.\n+\n+include::{docdir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n \n-`aggregations`::\n-  (Optional, object) Specifies aggregations.\n-  \n-include::{docdir}/rest-api/common-parms.asciidoc[tag=from]\n-  \n `max_concurrent_searches`::\n-  (Optional, integer) Specifies the maximum number of concurrent searches the \n-  multi search API will execute. This default is based on the number of data \n-  nodes and the default search thread pool size.\n-  \n+(Optional, integer)\n+Maximum number of concurrent searches the multi search API can execute.\n+\n `max_concurrent_shard_requests`::\n-  (Optional, integer) Specifies the maximum number of concurrent shard requests \n-  that each sub search request will execute per node. This parameter should be \n-  used to protect a single request from overloading a cluster (for example a \n-  default request will hit all indices in a cluster which could cause shard \n-  request rejections if the number of shards per node is high). Defaults to `5`. \n-  In certain scenarios parallelism isn't achieved through concurrent request \n-  such that this protection will result in poor performance. For instance in an \n-  environment where only a very low number of concurrent search requests are \n-  expected it might help to increase this value to a higher number.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=preference]\n++\n+--\n+(Optional, integer)\n+Maximum number of concurrent shard requests that each sub-search request\n+executes per node.  Defaults to `5`. \n+\n+You can use this parameter to prevent a request from overloading a cluster. For\n+example, a default request hits all indices in a cluster. This could cause shard\n+request rejections if the number of shards per node is high.\n+\n+In certain scenarios, parallelism isn't achieved through concurrent requests. In\n+those cases, a low value in this  parameter could result in poor performance.\n+For example, in an environment where a very low number of concurrent search\n+requests are expected, a higher value in this parameter may improve performance.\n+--\n+\n+`pre_filter_shard_size`::\n+(Optional, integer)\n+Defines a threshold that enforces a pre-filter roundtrip to prefilter search\n+shards based on query rewriting if the number of shards the search request\n+expands to exceeds the threshold. This filter roundtrip can limit the number of\n+shards significantly if for instance a shard can not match any documents based\n+on it's rewrite method i.e., if date filters are mandatory to match but the\n+shard bounds and the query are disjoint. Defaults to `128`.\n+\n+`rest_total_hits_as_int`::\n+(Optional, boolean)\n+If `true`, `hits.total` are returned as an integer in the\n+response. Defaults to `false`, which returns an object.\n+\n+`routing`::\n+(Optional, string)\n+Custom <<mapping-routing-field,routing value>> used to route search operations\n+to a specific shard.\n+\n+`search_type`::\n++\n+--\n+(Optional, string)\n+Indicates whether global term and document frequencies should be used when\n+scoring returned documents. \n+\n+Options are:\n+\n+`query_then_fetch`::\n+(default)\n+Documents are scored using local term and document frequencies for the shard.\n+This is usually faster but less accurate.\n+\n+`dfs_query_then_fetch`::\n+Documents are scored using global term and document frequencies across all\n+shards. This is usually slower but more accurate.\n+--\n   \n-`query`::\n-  (Optional, <<query-dsl,query object>>) Defines the search definition using the \n-  <<query-dsl,Query DSL>>.\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=routing]\n-\n-include::{docdir}/rest-api/common-parms.asciidoc[tag=search_type]\n+`typed_keys`::\n+(Optional, boolean)\n+Specifies whether aggregation and suggester names should be prefixed by their\n+respective types in the response.\n \n-`size`:: \n-  (Optional, integer) The number of hits to return. Defaults to `10`.\n+[[search-multi-search-api-request-body]]\n+==== {api-request-body-title}\n \n+The request body contains a newline-delimited list of search `<header>` and\n+search `<body>` objects.\n+\n+`<header>`::\n++\n+--\n+(Required, object)\n+Contains parameters used to limit or change the subsequent search body request.\n+\n+This object is required for each search body but can be empty (`{}`) or a blank\n+line.\n+--\n+\n+`allow_no_indices`:::\n+(Optional, boolean)\n+If `true`, the request does *not* return an error if a wildcard expression or\n+`_all` value retrieves only missing or closed indices.\n++\n+This parameter also applies to <<indices-aliases,index aliases>> that point to a\n+missing or closed index.\n+\n+`expand_wildcards`:::\n++\n+--\n+(Optional, string)\n+Controls what kind of indices that wildcard\n+expressions can expand to. Valid values are:\n+\n+`all`::\n+Expand to open and closed indices.\n+\n+`open`::\n+Expand only to open indices.\n+\n+`closed`::\n+Expand only to closed indices.\n+\n+`hidden`::\n+Expansion of wildcards will include hidden indices.\n+\n+`none`::\n+Wildcard expressions are not accepted.\n+\n+Defaults to `open`.\n+--\n+\n+`ignore_unavailable`:::\n+(Optional, boolean) If `true`, documents from missing or closed indices are not\n+included in the response. Defaults to `false`.\n+\n+`index`:::\n+(Optional, string or array of strings)\n+Index name or <<indices-aliases,alias>> used to limit the request. Wildcard\n+expressions are supported. You can specify multiple indices as an array.\n+\n+`preference`:::\n+(Optional, string)\n+Node or shard used to perform the search.\n+\n+`request_cache`:::\n+(Optional, boolean)\n+If `true`, the request cache can be used for this search.\n+See <<shard-request-cache>>.", "originalCommit": "cf5d46e935b91257ce340f3692ff279044d0e403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ccc44d11d95bf15eb58b7f43800ab7084869e756", "url": "https://github.com/elastic/elasticsearch/commit/ccc44d11d95bf15eb58b7f43800ab7084869e756", "message": "address review feedback", "committedDate": "2020-02-24T09:14:51Z", "type": "commit"}]}