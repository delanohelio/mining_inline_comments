{"pr_number": 61805, "pr_title": "EQL: Introduce filter pipe", "pr_createdAt": "2020-09-01T16:18:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61805", "timeline": [{"oid": "a8114d66cb1e6d75f93503ca335875735e6a3654", "url": "https://github.com/elastic/elasticsearch/commit/a8114d66cb1e6d75f93503ca335875735e6a3654", "message": "EQL: Introduce filter pipe\n\nAllow filtering through a pipe, across events and sequences. Filter\npipes are pushed down to base queries.\nFor now filtering after limit (head/tail) is forbidden as in that case\nthe filter semantics are still up for debate.\n\nFix #59763", "committedDate": "2020-09-01T21:05:01Z", "type": "commit"}, {"oid": "a8114d66cb1e6d75f93503ca335875735e6a3654", "url": "https://github.com/elastic/elasticsearch/commit/a8114d66cb1e6d75f93503ca335875735e6a3654", "message": "EQL: Introduce filter pipe\n\nAllow filtering through a pipe, across events and sequences. Filter\npipes are pushed down to base queries.\nFor now filtering after limit (head/tail) is forbidden as in that case\nthe filter semantics are still up for debate.\n\nFix #59763", "committedDate": "2020-09-01T21:05:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjI5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481796297", "bodyText": "I am not sure why was this test removed?", "author": "astefan", "createdAt": "2020-09-02T06:45:29Z", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries.toml", "diffHunk": "@@ -248,16 +248,6 @@ case_insensitive = true\n query = 'process where process_name >= \"SYSTE\" and process_name <= \"systex\"'\n expected_event_ids  = [1, 2]\n \n-", "originalCommit": "a8114d66cb1e6d75f93503ca335875735e6a3654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2NjQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481966441", "bodyText": "Because for some reason it keeps running instead of being excluded and it fails due to case comparisons.\nI've raised another issue to simply the current approach - copying the queries content across different files is error prone and leads to confusion on what queries get executed when...\n#61841", "author": "costin", "createdAt": "2020-09-02T10:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MDQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481860426", "bodyText": "Why 0 now?", "author": "astefan", "createdAt": "2020-09-02T08:03:10Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "diffHunk": "@@ -121,7 +121,7 @@ public void test() {\n         PhysicalPlan p = plan(query);\n         assertEquals(EsQueryExec.class, p.getClass());\n         EsQueryExec eqe = (EsQueryExec) p;\n-        assertEquals(1, eqe.output().size());\n+        assertEquals(0, eqe.output().size());", "originalCommit": "a8114d66cb1e6d75f93503ca335875735e6a3654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0ODYzNA==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481948634", "bodyText": "Because no field is needed for event queries. The projection made the assumption the timestamp is needed, which is not the case.", "author": "costin", "createdAt": "2020-09-02T09:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MDQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNTI4NA==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481915284", "bodyText": "Can we have a test for this case? (even though it might change in the future)", "author": "matriv", "createdAt": "2020-09-02T09:03:36Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -223,4 +240,12 @@ public Verifier(Metrics metrics) {\n \n         return failures;\n     }\n+\n+    private void checkNoPipesAfterLimit(LogicalPlan p, Set<Failure> localFailures) {\n+        if ((p instanceof LimitWithOffset) == false) {\n+            if (p.anyMatch(LimitWithOffset.class::isInstance)) {\n+                localFailures.add(fail(p, \"Pipe [{}] not allowed (yet) after head/tail\", p.nodeName()));", "originalCommit": "a8114d66cb1e6d75f93503ca335875735e6a3654", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxODExOA==", "url": "https://github.com/elastic/elasticsearch/pull/61805#discussion_r481918118", "bodyText": "nit: empty line could be removed.", "author": "matriv", "createdAt": "2020-09-02T09:06:54Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -299,9 +295,63 @@ private void assertOrder(UnaryPlan plan, OrderDirection direction) {\n     }\n \n     private LogicalPlan defaultPipes(LogicalPlan plan) {\n+        assertTrue(plan instanceof Project);\n+        plan = ((Project) plan).child();\n         assertTrue(plan instanceof LimitWithOffset);\n         plan = ((LimitWithOffset) plan).child();\n         assertTrue(plan instanceof OrderBy);\n         return ((OrderBy) plan).child();\n     }\n+\n+\n+    public void testFilterPipePushdownEventQuery() {\n+        Filter filter = new Filter(EMPTY, rel(), new IsNull(EMPTY, Literal.TRUE));\n+        Filter pipe = new Filter(EMPTY, filter, new Equals(EMPTY, timestamp(), Literal.TRUE));\n+\n+        LogicalPlan optimized = new Optimizer.PushDownFilterPipe().rule(pipe);\n+        assertEquals(Filter.class, optimized.getClass());\n+        Filter f = (Filter) optimized;\n+        Expression exp = f.condition();\n+        assertEquals(And.class, exp.getClass());\n+\n+        And and = (And) exp;\n+        assertEquals(filter.condition(), and.left());\n+        assertEquals(pipe.condition(), and.right());\n+    }\n+\n+    public void testFilterPipePushdownSequence() {\n+        Filter filter = new Filter(EMPTY, rel(), new IsNull(EMPTY, Literal.TRUE));\n+        KeyedFilter rule1 = keyedFilter(filter);\n+        KeyedFilter rule2 = keyedFilter(filter);\n+        KeyedFilter until = keyedFilter(filter);\n+        Sequence s = new Sequence(EMPTY, asList(rule1, rule2), until, TimeValue.MINUS_ONE, timestamp(), tiebreaker(), OrderDirection.ASC);\n+        Filter pipe = new Filter(EMPTY, s, new Equals(EMPTY, timestamp(), Literal.TRUE));\n+\n+        // apply it once to push down the filter\n+        LogicalPlan optimized = new Optimizer.PushDownFilterPipe().apply(pipe);\n+        // second to combine the filters\n+        optimized = new Optimizer.PushDownFilterPipe().apply(optimized);\n+        assertEquals(Sequence.class, optimized.getClass());\n+\n+        Sequence seq = (Sequence) optimized;\n+        assertEquals(filter.condition(), condition(seq.until()));\n+\n+        Expression rule1Condition = condition(seq.children().get(0));\n+        And and = (And) rule1Condition;\n+        assertEquals(filter.condition(), and.left());\n+        assertEquals(pipe.condition(), and.right());\n+\n+        Expression rule2Condition = condition(seq.children().get(1));\n+", "originalCommit": "a8114d66cb1e6d75f93503ca335875735e6a3654", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92b2df9eed5f5874f6fcef2ef3c99f1d553375d0", "url": "https://github.com/elastic/elasticsearch/commit/92b2df9eed5f5874f6fcef2ef3c99f1d553375d0", "message": "Address feedback", "committedDate": "2020-09-02T10:26:24Z", "type": "commit"}]}