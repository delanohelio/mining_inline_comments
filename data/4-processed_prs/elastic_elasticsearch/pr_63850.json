{"pr_number": 63850, "pr_title": "DocumentMapperParser to no longer depend directly on MapperService", "pr_createdAt": "2020-10-16T20:16:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63850", "timeline": [{"oid": "b31a5a003a1692e98cc66d438628a511ef732ac0", "url": "https://github.com/elastic/elasticsearch/commit/b31a5a003a1692e98cc66d438628a511ef732ac0", "message": "DocumentMapperParser to no longer depend directly on MapperService\n\nThis change was mainly triggered by the need for `MapperService` to pass `this` during its constructor when creating `DocumentMapperParser`. Also, `MapperService` is carried around in some places where only a subset of it is needed.\n\nWith this change we rather carry around the components that are strictly needed, in a couple of cases functions that `MapperService` provides, which helps clarifying the dependency between `DocumentMapperParser`, `DocumentMapper` and `MapperService`, as well as removing the need for MapperService to pass `this` to `DocumentMapperParser`", "committedDate": "2020-10-16T20:01:28Z", "type": "commit"}, {"oid": "fda4652d2affe40275096400454ae5854a3ce39f", "url": "https://github.com/elastic/elasticsearch/commit/fda4652d2affe40275096400454ae5854a3ce39f", "message": "iter", "committedDate": "2020-10-16T20:12:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r506701927", "bodyText": "This is not perfect, but it gets the job done. The need for these two suppliers and a function here is a bad signal I think, but it's the best I could come up with for now.", "author": "javanna", "createdAt": "2020-10-16T20:19:13Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java", "diffHunk": "@@ -22,57 +22,42 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.compress.CompressedXContent;\n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.xcontent.XContentHelper;\n import org.elasticsearch.common.xcontent.XContentType;\n import org.elasticsearch.index.IndexSettings;\n-import org.elasticsearch.index.query.QueryShardContext;\n-import org.elasticsearch.index.similarity.SimilarityService;\n-import org.elasticsearch.indices.mapper.MapperRegistry;\n-import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.index.analysis.IndexAnalyzers;\n \n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n public class DocumentMapperParser {\n-\n-    final MapperService mapperService;\n-    private final SimilarityService similarityService;\n-    private final Supplier<QueryShardContext> queryShardContextSupplier;\n+    private final IndexSettings indexSettings;\n+    private final IndexAnalyzers indexAnalyzers;\n+    private final Function<String, String> documentTypeResolver;\n+    private final DocumentParser documentParser;\n+    private final Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier;\n+    private final Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier;\n     private final RootObjectMapper.TypeParser rootObjectTypeParser = new RootObjectMapper.TypeParser();\n-    private final Version indexVersionCreated;\n-    private final Map<String, Mapper.TypeParser> typeParsers;\n     private final Map<String, MetadataFieldMapper.TypeParser> rootTypeParsers;\n-    private final ScriptService scriptService;\n-\n-    public DocumentMapperParser(IndexSettings indexSettings,\n-                                MapperService mapperService,\n-                                SimilarityService similarityService,\n-                                MapperRegistry mapperRegistry,\n-                                Supplier<QueryShardContext> queryShardContextSupplier,\n-                                ScriptService scriptService) {\n-        this.mapperService = mapperService;\n-        this.similarityService = similarityService;\n-        this.queryShardContextSupplier = queryShardContextSupplier;\n-        this.scriptService = scriptService;\n-        this.typeParsers = mapperRegistry.getMapperParsers();\n-        this.indexVersionCreated = indexSettings.getIndexVersionCreated();\n-        this.rootTypeParsers = mapperRegistry.getMetadataMapperParsers(indexVersionCreated);\n-    }\n-\n-    public Mapper.TypeParser.ParserContext parserContext() {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, null, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n-    }\n \n-    public Mapper.TypeParser.ParserContext parserContext(DateFormatter dateFormatter) {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, dateFormatter, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n+    DocumentMapperParser(IndexSettings indexSettings,\n+                         IndexAnalyzers indexAnalyzers,\n+                         Function<String, String> documentTypeResolver,\n+                         DocumentParser documentParser,\n+                         Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier,\n+                         Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier,", "originalCommit": "fda4652d2affe40275096400454ae5854a3ce39f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MzA2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507853062", "bodyText": "Does the metadata mappers map need to be a Supplier?", "author": "romseygeek", "createdAt": "2020-10-19T15:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MzA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507873087", "bodyText": "this annoys me too. I believe it has to, because the doc mapper can change in MapperService?", "author": "javanna", "createdAt": "2020-10-19T16:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r506709559", "bodyText": "it is not fantastic that this is now moved to MapperService. On the other hand this code block required DocumentMapper as well as DocumentMapperParser (which is also one of the callers) and a bunch of other components that are easily available in MapperService and need to be carried around otherwise through DocumentMapperParser. So this is an ok compromise I thought. We may want to think about further cleanups around how we share the most common objects.", "author": "javanna", "createdAt": "2020-10-16T20:37:31Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -37,57 +37,44 @@\n import org.elasticsearch.index.IndexSettings;\n import org.elasticsearch.index.analysis.IndexAnalyzers;\n import org.elasticsearch.index.mapper.MapperService.MergeReason;\n-import org.elasticsearch.index.mapper.MetadataFieldMapper.TypeParser;\n import org.elasticsearch.search.internal.SearchContext;\n \n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.stream.Stream;\n \n \n-public class DocumentMapper implements ToXContentFragment {\n+public final class DocumentMapper implements ToXContentFragment {\n \n-    public static class Builder {\n-\n-        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();\n+    public static final class Builder {\n+        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers;\n         private final RootObjectMapper rootObjectMapper;\n         private final Mapper.BuilderContext builderContext;\n         private final IndexSettings indexSettings;\n         private final IndexAnalyzers indexAnalyzers;\n-        private final DocumentMapperParser documentMapperParser;\n         private final DocumentParser documentParser;\n \n         private Map<String, Object> meta;\n \n         public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {\n-            this.indexSettings = mapperService.getIndexSettings();\n-            this.indexAnalyzers = mapperService.getIndexAnalyzers();\n-            this.documentMapperParser = mapperService.documentMapperParser();\n-            this.documentParser = mapperService.documentParser();\n+            this(builder, mapperService.getIndexSettings(), mapperService.getIndexAnalyzers(), mapperService.documentParser(),\n+                mapperService.getMetadataMappers());\n+        }\n+\n+        Builder(RootObjectMapper.Builder builder,\n+                IndexSettings indexSettings,\n+                IndexAnalyzers indexAnalyzers,\n+                DocumentParser documentParser,\n+                Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers) {\n+            this.indexSettings = indexSettings;\n+            this.indexAnalyzers = indexAnalyzers;\n+            this.documentParser = documentParser;\n             this.builderContext = new Mapper.BuilderContext(indexSettings.getSettings(), new ContentPath(1));\n             this.rootObjectMapper = builder.build(builderContext);\n-\n-            final DocumentMapper existingMapper = mapperService.documentMapper();\n-            final Map<String, TypeParser> metadataMapperParsers =\n-                mapperService.mapperRegistry.getMetadataMapperParsers(indexSettings.getIndexVersionCreated());\n-            for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : metadataMapperParsers.entrySet()) {\n-                final String name = entry.getKey();\n-                final MetadataFieldMapper existingMetadataMapper = existingMapper == null\n-                        ? null\n-                        : (MetadataFieldMapper) existingMapper.mappers().getMapper(name);\n-                final MetadataFieldMapper metadataMapper;\n-                if (existingMetadataMapper == null) {\n-                    final TypeParser parser = entry.getValue();\n-                    metadataMapper = parser.getDefault(mapperService.documentMapperParser().parserContext());\n-                } else {\n-                    metadataMapper = existingMetadataMapper;\n-                }\n-                metadataMappers.put(metadataMapper.getClass(), metadataMapper);\n-            }", "originalCommit": "fda4652d2affe40275096400454ae5854a3ce39f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDg4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507624881", "bodyText": "I wonder if we can make this neater by changing the signature of MetadataFieldMapper.getDefault()? Looking at the various implementations, we only need indexVersionCreated() and isIdFieldDataEnabled(), which we can abstract into a MetadataParseContext interface - that removes the reliance on DocumentMapperParser at least.", "author": "romseygeek", "createdAt": "2020-10-19T10:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3ODgzMw==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507778833", "bodyText": "I tried this. Given the current state of things, I could replace the call to DocumentMapperParser with a Supplier. And even switching to a smaller context, the supplier would still be needed because idFieldDataEnabled is not carried anywhere. Moving back this code where it used to be, I would have to carry around the following:\n\nMap<String, MetadataFieldMapper.TypeParser> metadataMapperParsers\nSupplier<Mapper.TypeParser.ParserContext> parserContextSupplier\nFunction<String, Mapper> mapperLookup\n\nespecially the last one is odd, but the best I came up to not do this is what I did in this PR, expose a method from mapper service. What do you think?", "author": "javanna", "createdAt": "2020-10-19T14:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NjQ1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507856451", "bodyText": "This is definitely better.  I'm not completely happy with the metadata field builder abstractions, but maybe that will become clearer as we go on.", "author": "romseygeek", "createdAt": "2020-10-19T15:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4OTk2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507889962", "bodyText": "with the latest update, the third argument to lookup mappers would no longer be needed. Do you want to me to try and put this method back where it was, or are you ok with it being in MapperService?", "author": "javanna", "createdAt": "2020-10-19T16:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDkyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507894929", "bodyText": "Let's leave it in MapperService for now, we can always move it later if it gets too annoying.", "author": "romseygeek", "createdAt": "2020-10-19T16:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}], "type": "inlineReview"}, {"oid": "2cbffef662a747c5e7d89a82ae484f063af3141e", "url": "https://github.com/elastic/elasticsearch/commit/2cbffef662a747c5e7d89a82ae484f063af3141e", "message": "iter", "committedDate": "2020-10-16T20:39:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNzI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507627288", "bodyText": "Can we merge these two by just calling the function with null if there's no date formatter?", "author": "romseygeek", "createdAt": "2020-10-19T10:07:14Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -119,12 +121,20 @@ public MapperService(IndexSettings indexSettings, IndexAnalyzers indexAnalyzers,\n         super(indexSettings);\n         this.indexVersionCreated = indexSettings.getIndexVersionCreated();\n         this.indexAnalyzers = indexAnalyzers;\n-        this.documentParser = new DocumentParser(xContentRegistry);\n-        this.documentMapperParser = new DocumentMapperParser(indexSettings, this, similarityService, mapperRegistry,\n-                queryShardContextSupplier, scriptService);\n         this.indexAnalyzer = new MapperAnalyzerWrapper(indexAnalyzers.getDefaultIndexAnalyzer(), MappedFieldType::indexAnalyzer);\n         this.mapperRegistry = mapperRegistry;\n-        this.idFieldDataEnabled = idFieldDataEnabled;\n+        Function<DateFormatter, Mapper.TypeParser.ParserContext> parserContextFunction =\n+            dateFormatter -> new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, mapperRegistry.getMapperParsers()::get,\n+                indexVersionCreated, queryShardContextSupplier, dateFormatter, scriptService, indexAnalyzers, indexSettings,\n+                idFieldDataEnabled);\n+        this.documentParser = new DocumentParser(xContentRegistry, parserContextFunction);\n+        this.parserContextSupplier = () -> new Mapper.TypeParser.ParserContext(similarityService::getSimilarity,\n+            mapperRegistry.getMapperParsers()::get, indexVersionCreated,\n+            queryShardContextSupplier, null, scriptService, indexAnalyzers, indexSettings, idFieldDataEnabled);", "originalCommit": "2cbffef662a747c5e7d89a82ae484f063af3141e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbed2af11d8030dfc180bdaf049beb8346b9ac45", "url": "https://github.com/elastic/elasticsearch/commit/dbed2af11d8030dfc180bdaf049beb8346b9ac45", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this", "committedDate": "2020-10-19T12:28:49Z", "type": "commit"}, {"oid": "a6771df808fc170b2c393895dc22d2292d5ace02", "url": "https://github.com/elastic/elasticsearch/commit/a6771df808fc170b2c393895dc22d2292d5ace02", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this", "committedDate": "2020-10-19T12:29:15Z", "type": "commit"}, {"oid": "08f40331dd96da3a44c9d57f9bf0d68f027145df", "url": "https://github.com/elastic/elasticsearch/commit/08f40331dd96da3a44c9d57f9bf0d68f027145df", "message": "iter", "committedDate": "2020-10-19T13:06:20Z", "type": "commit"}, {"oid": "9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6", "url": "https://github.com/elastic/elasticsearch/commit/9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6", "message": "boolean supplier", "committedDate": "2020-10-19T14:15:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NDg4NA==", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507854884", "bodyText": "I think this can be simplified as follows:\n\nif the existing mapper is null, iterate through mapperRegistry.getMetadataMapperParsers and call getDefault on each one.\nif not, just return the metadata mappers from the existing mapper\n\nThe mixing and matching is unnecessary, because the index created version is fixed between the new mapper and the previous mapper, and so the set of metadata mappers for the two will be the same.", "author": "romseygeek", "createdAt": "2020-10-19T15:40:48Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -139,14 +147,41 @@ public NamedAnalyzer getNamedAnalyzer(String analyzerName) {\n         return this.indexAnalyzers.get(analyzerName);\n     }\n \n+    //TODO This is only used in tests, we may want to look into replacing those usages?\n     public DocumentMapperParser documentMapperParser() {\n         return this.documentMapperParser;\n     }\n \n+    public Mapper.TypeParser.ParserContext parserContext() {\n+        return parserContextSupplier.get();\n+    }\n+\n     DocumentParser documentParser() {\n         return this.documentParser;\n     }\n \n+    Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> getMetadataMappers() {\n+        Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();", "originalCommit": "9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30271a4730ddf5eaa072eb9623b10867de08a30e", "url": "https://github.com/elastic/elasticsearch/commit/30271a4730ddf5eaa072eb9623b10867de08a30e", "message": "iter", "committedDate": "2020-10-19T16:27:31Z", "type": "commit"}, {"oid": "162a768c3f39e4eb38828cf3890fef47d47062f2", "url": "https://github.com/elastic/elasticsearch/commit/162a768c3f39e4eb38828cf3890fef47d47062f2", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this", "committedDate": "2020-10-20T07:18:19Z", "type": "commit"}, {"oid": "98f80478b28c93a4d2c84a5762148c8b70642415", "url": "https://github.com/elastic/elasticsearch/commit/98f80478b28c93a4d2c84a5762148c8b70642415", "message": "iter", "committedDate": "2020-10-20T07:23:42Z", "type": "commit"}]}