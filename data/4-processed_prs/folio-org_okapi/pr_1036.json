{"pr_number": 1036, "pr_title": "Upgrade okapi module for tenants OKAPI-930", "pr_createdAt": "2020-11-06T13:34:15Z", "pr_url": "https://github.com/folio-org/okapi/pull/1036", "timeline": [{"oid": "08976dc1e7c40088dbcb567fd866cd4c40fd8a1e", "url": "https://github.com/folio-org/okapi/commit/08976dc1e7c40088dbcb567fd866cd4c40fd8a1e", "message": "A lot of clean up in MainDeployTest", "committedDate": "2020-11-06T13:19:17Z", "type": "commit"}, {"oid": "ff2d13b8290bbddcb22082d88cf829e6b296afee", "url": "https://github.com/folio-org/okapi/commit/ff2d13b8290bbddcb22082d88cf829e6b296afee", "message": "Upgrade Okapi for all tenants OKAPI-930", "committedDate": "2020-11-06T13:32:02Z", "type": "commit"}, {"oid": "0a6e151b3d5e946ce2d96495ccfc7a1387e37b8c", "url": "https://github.com/folio-org/okapi/commit/0a6e151b3d5e946ce2d96495ccfc7a1387e37b8c", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-06T14:26:55Z", "type": "commit"}, {"oid": "ffb4cdf7a02d323720fc46e326f3c7ee338d88c8", "url": "https://github.com/folio-org/okapi/commit/ffb4cdf7a02d323720fc46e326f3c7ee338d88c8", "message": "Fix deployment mode that uses local maps", "committedDate": "2020-11-06T15:48:32Z", "type": "commit"}, {"oid": "0d5d537114254a5e6a8061bf9f189b46ed89d021", "url": "https://github.com/folio-org/okapi/commit/0d5d537114254a5e6a8061bf9f189b46ed89d021", "message": "Unused logger", "committedDate": "2020-11-06T15:57:21Z", "type": "commit"}, {"oid": "3a8f8b0833a54f880a672ccab50181859dc21e2f", "url": "https://github.com/folio-org/okapi/commit/3a8f8b0833a54f880a672ccab50181859dc21e2f", "message": "Unused function", "committedDate": "2020-11-06T16:09:29Z", "type": "commit"}, {"oid": "7a7fb348807e16c54eed0164cee93ea070e56674", "url": "https://github.com/folio-org/okapi/commit/7a7fb348807e16c54eed0164cee93ea070e56674", "message": "Unused import", "committedDate": "2020-11-06T16:09:36Z", "type": "commit"}, {"oid": "a9fec55c44d5180c84605c5faba345721456fad1", "url": "https://github.com/folio-org/okapi/commit/a9fec55c44d5180c84605c5faba345721456fad1", "message": "Further checks", "committedDate": "2020-11-06T16:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1OTk5MQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r521459991", "bodyText": "This indentation allows to remove @SuppressWarnings(\"indentation\"):\nreturn moduleManager.get(okapiModule).compose(\n    gres -> {\n      // we already have one, go on\n      logger.debug(\"checkInternalModules: Already have {} \"\n          + \" with interface version {}\", okapiModule, interfaceVersion);\n      // See Okapi-359 about version checks across the cluster\n      return Future.succeededFuture();\n    },\n    cause -> {\n      if (OkapiError.getType(cause) != ErrorType.NOT_FOUND) {\n        return Future.failedFuture(cause); // something went badly wrong\n      }\n      logger.debug(\"Creating the internal Okapi module {} with interface version {}\",\n          okapiModule, interfaceVersion);\n      return moduleManager.create(md, true, true, true);\n    })\n    .compose(x -> checkSuperTenant(okapiModule));", "author": "julianladisch", "createdAt": "2020-11-11T15:59:44Z", "path": "okapi-core/src/main/java/org/folio/okapi/MainVerticle.java", "diffHunk": "@@ -244,93 +243,45 @@ public void start(Promise<Void> promise) {\n     return tenantManager.init(vertx);\n   }\n \n+  @SuppressWarnings(\"indentation\")\n   private Future<Void> checkInternalModules() {\n     logger.info(\"checkInternalModules\");\n-    Promise<Void> promise = Promise.promise();\n     final ModuleDescriptor md = InternalModule.moduleDescriptor(okapiVersion);\n     final String okapiModule = md.getId();\n     final String interfaceVersion = md.getProvides()[0].getVersion();\n-    moduleManager.get(okapiModule).onSuccess(gres -> {\n+    return moduleManager.get(okapiModule).compose(gres -> {\n       // we already have one, go on\n       logger.debug(\"checkInternalModules: Already have {} \"\n           + \" with interface version {}\", okapiModule, interfaceVersion);\n       // See Okapi-359 about version checks across the cluster\n-      checkSuperTenant(okapiModule, promise);\n-    }).onFailure(cause -> {\n+      return Future.succeededFuture();\n+    }, cause -> {\n       if (OkapiError.getType(cause) != ErrorType.NOT_FOUND) {\n-        promise.fail(cause); // something went badly wrong\n-        return;\n+        return Future.failedFuture(cause); // something went badly wrong\n       }\n       logger.debug(\"Creating the internal Okapi module {} with interface version {}\",\n           okapiModule, interfaceVersion);\n-      moduleManager.create(md, true, true, true).onFailure(cause1 ->\n-          promise.fail(cause1) // something went badly wrong\n-      ).onSuccess(ires -> {\n-        checkSuperTenant(okapiModule, promise);\n-      });\n-    });\n-    return promise.future();\n+      return moduleManager.create(md, true, true, true);\n+    }).compose(x -> checkSuperTenant(okapiModule));", "originalCommit": "a9fec55c44d5180c84605c5faba345721456fad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4ODg1OQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r521588859", "bodyText": "Nice. Thx", "author": "adamdickmeiss", "createdAt": "2020-11-11T19:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1OTk5MQ=="}], "type": "inlineReview"}, {"oid": "7ca8ff9743f5cbdb535a080f9c7a267bdb148a3c", "url": "https://github.com/folio-org/okapi/commit/7ca8ff9743f5cbdb535a080f9c7a267bdb148a3c", "message": "Merge branch 'master' into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-11T19:27:21Z", "type": "commit"}, {"oid": "db7aafeb6518e3fc22dab9b7104c9959759f1dca", "url": "https://github.com/folio-org/okapi/commit/db7aafeb6518e3fc22dab9b7104c9959759f1dca", "message": "ModuleTest refactor (Future, async)", "committedDate": "2020-11-12T09:08:25Z", "type": "commit"}, {"oid": "00933a9f0f7d3ecd46f58181fa53a96126f1c30d", "url": "https://github.com/folio-org/okapi/commit/00933a9f0f7d3ecd46f58181fa53a96126f1c30d", "message": "redeploy with async wait", "committedDate": "2020-11-12T09:34:51Z", "type": "commit"}, {"oid": "5c1e8d5bb2a4741fd6791cafb1abe3840c771328", "url": "https://github.com/folio-org/okapi/commit/5c1e8d5bb2a4741fd6791cafb1abe3840c771328", "message": "Only use db_init for setup", "committedDate": "2020-11-12T09:45:50Z", "type": "commit"}, {"oid": "5e399363c5f560dd97ced60fc8d174dab39969fb", "url": "https://github.com/folio-org/okapi/commit/5e399363c5f560dd97ced60fc8d174dab39969fb", "message": "Fix waiting for tests to stop in MainDeployTest", "committedDate": "2020-11-12T12:42:08Z", "type": "commit"}, {"oid": "6784a0874b34b8fc85ae8c9e32fbe71f05e76aef", "url": "https://github.com/folio-org/okapi/commit/6784a0874b34b8fc85ae8c9e32fbe71f05e76aef", "message": "Check permissions for Okapi module upgrade", "committedDate": "2020-11-12T13:32:17Z", "type": "commit"}, {"oid": "b49a65c43bff9b1d710c1432c1948e81454dc3db", "url": "https://github.com/folio-org/okapi/commit/b49a65c43bff9b1d710c1432c1948e81454dc3db", "message": "Fix tests (tenant not preserved in inmemory mode)", "committedDate": "2020-11-12T13:45:20Z", "type": "commit"}, {"oid": "ab8db6793775fbf4a4f42d139cf778f8937916c5", "url": "https://github.com/folio-org/okapi/commit/ab8db6793775fbf4a4f42d139cf778f8937916c5", "message": "Mongo does not restore header-1", "committedDate": "2020-11-12T14:02:15Z", "type": "commit"}, {"oid": "ab6f648c9bb6308f3379c7a79fa3b3f02e439173", "url": "https://github.com/folio-org/okapi/commit/ab6f648c9bb6308f3379c7a79fa3b3f02e439173", "message": "Header module saves permissions per tenant", "committedDate": "2020-11-12T15:55:54Z", "type": "commit"}, {"oid": "12dfbf80049af14dcbde28e43832c3740485a586", "url": "https://github.com/folio-org/okapi/commit/12dfbf80049af14dcbde28e43832c3740485a586", "message": "Import sort order", "committedDate": "2020-11-12T16:03:21Z", "type": "commit"}, {"oid": "b6dc1b63383d9350ddffc4bda180540a913a80c0", "url": "https://github.com/folio-org/okapi/commit/b6dc1b63383d9350ddffc4bda180540a913a80c0", "message": "Fix Mongo Json decode\n\nIn particular, header-1, which is an unsual module ID was\nnot decoded properly from Mongo storage.", "committedDate": "2020-11-12T17:38:11Z", "type": "commit"}, {"oid": "5716177ac49b1d731b782492f2b91303cc940802", "url": "https://github.com/folio-org/okapi/commit/5716177ac49b1d731b782492f2b91303cc940802", "message": "Changing log messages a bit for Okapi upgrade", "committedDate": "2020-11-13T21:03:12Z", "type": "commit"}, {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb", "url": "https://github.com/folio-org/okapi/commit/666b739d11ec7033a4224cb22c027a156a95a0bb", "message": "Merge branch 'master' into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-13T21:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTExMA==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524459110", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get a module descriptor from ID and return Error if not found.\n          \n          \n            \n               * Get a module descriptor from ID, if not found the Future will fail with\n          \n          \n            \n               * an {@link OkapiError} with {@link ErrorType#NOT_FOUND}.", "author": "julianladisch", "createdAt": "2020-11-16T17:48:55Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ModuleManager.java", "diffHunk": "@@ -193,15 +185,12 @@ private void invalidateCacheEntry(String id) {\n   }\n \n   /**\n-   * Get a module descriptor from ID.\n+   * Get a module descriptor from ID and return Error if not found.", "originalCommit": "666b739d11ec7033a4224cb22c027a156a95a0bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTAwNg==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524481006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Future<ModuleDescriptor> future1 = moduleTo != null\n          \n          \n            \n                    ?  moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n          \n          \n            \n                return future1.compose(mdTo -> {\n          \n          \n            \n                  Future<ModuleDescriptor> future2 = moduleFrom != null\n          \n          \n            \n                      ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n          \n          \n            \n                  return future2.compose(mdFrom -> {\n          \n          \n            \n                    Future<Void> future3 = options.getDepCheck()\n          \n          \n            \n                        ? enableAndDisableCheck(tenant, mdFrom, mdTo) : Future.succeededFuture();\n          \n          \n            \n                    return future3\n          \n          \n            \n                        .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n          \n          \n            \n                  });\n          \n          \n            \n                });\n          \n          \n            \n                Future<ModuleDescriptor> mdFrom = moduleFrom != null\n          \n          \n            \n                    ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n          \n          \n            \n                Future<ModuleDescriptor> mdTo = moduleTo != null\n          \n          \n            \n                    ? moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n          \n          \n            \n                return mdFrom\n          \n          \n            \n                    .compose(x -> mdTo)\n          \n          \n            \n                    .compose(x -> options.getDepCheck()\n          \n          \n            \n                          ? enableAndDisableCheck(tenant, mdFrom.result(), mdTo.result())\n          \n          \n            \n                          : Future.succeededFuture())\n          \n          \n            \n                    .compose(x -> enableAndDisableModule(tenant, options, mdFrom.result(), mdTo.result(), pc));", "author": "julianladisch", "createdAt": "2020-11-16T18:24:30Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -268,30 +247,30 @@ public void setProxyService(ProxyService px) {\n     });\n   }\n \n-\n   Future<String> enableAndDisableModule(\n       String tenantId, TenantInstallOptions options, String moduleFrom,\n       TenantModuleDescriptor td, ProxyContext pc) {\n \n-    return tenants.getNotFound(tenantId)\n-        .compose(tenant -> Future.succeededFuture()\n-            .compose(res -> {\n-              if (td == null) {\n-                return Future.succeededFuture(null);\n-              }\n-              return moduleManager.getLatest(td.getId());\n-            }).compose(mdTo ->\n-                moduleManager.get(moduleFrom).compose(mdFrom -> {\n-                  Future<Void> future = Future.succeededFuture();\n-                  if (options.getDepCheck()) {\n-                    future = future\n-                        .compose(x -> enableAndDisableCheck(tenant, mdFrom, mdTo));\n-                  }\n-                  return future\n-                      .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n-                })\n-            )\n-        );\n+    return tenants.getNotFound(tenantId).compose(tenant ->\n+        enableAndDisableModule(tenant, options, moduleFrom, td != null ? td.getId() : null, pc));\n+  }\n+\n+  private Future<String> enableAndDisableModule(\n+      Tenant tenant, TenantInstallOptions options, String moduleFrom,\n+      String moduleTo, ProxyContext pc) {\n+\n+    Future<ModuleDescriptor> future1 = moduleTo != null\n+        ?  moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n+    return future1.compose(mdTo -> {\n+      Future<ModuleDescriptor> future2 = moduleFrom != null\n+          ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n+      return future2.compose(mdFrom -> {\n+        Future<Void> future3 = options.getDepCheck()\n+            ? enableAndDisableCheck(tenant, mdFrom, mdTo) : Future.succeededFuture();\n+        return future3\n+            .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n+      });\n+    });", "originalCommit": "666b739d11ec7033a4224cb22c027a156a95a0bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjY3Ng==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524922676", "bodyText": "ok", "author": "adamdickmeiss", "createdAt": "2020-11-17T07:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODAzMg==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524518032", "bodyText": "The comment should be removed.", "author": "julianladisch", "createdAt": "2020-11-16T19:26:42Z", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;", "originalCommit": "666b739d11ec7033a4224cb22c027a156a95a0bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzU3MQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525093571", "bodyText": "yes", "author": "adamdickmeiss", "createdAt": "2020-11-17T11:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMDgyMw==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524520823", "bodyText": "@After can be changed to @AfterClass, setProperty can be changed to clearProperty.", "author": "julianladisch", "createdAt": "2020-11-16T19:31:37Z", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;\n+  private static RamlDefinition api;\n \n-  @Before\n-  public void setUp(TestContext context) {\n+  @BeforeClass\n+  public static void setupBeforeClass(TestContext context) {\n     System.setProperty(\"vertx.logger-delegate-factory-class-name\",\n         \"io.vertx.core.logging.Log4jLogDelegateFactory\");\n     // can't set Verticle options so we set a property instead\n     System.setProperty(\"port\", Integer.toString(port));\n-    async = context.async();\n     api = RamlLoaders.fromFile(\"src/main/raml\").load(\"okapi.raml\");\n     RestAssured.port = port;\n-    async.complete();\n+  }\n+\n+  @Before\n+  public void setup(TestContext context) {\n+    System.setProperty(\"port\", Integer.toString(port));\n   }\n \n   @After\n   public void tearDown(TestContext context) {\n     System.setProperty(\"port\", \"\"); // disable port by emptying it\n-    if (vertx != null) {\n-      vertx.close(context.asyncAssertSuccess());\n-      vertx = null;\n-    }", "originalCommit": "666b739d11ec7033a4224cb22c027a156a95a0bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNDIwNA==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524924204", "bodyText": "yep. And @before can be removed entirely.", "author": "adamdickmeiss", "createdAt": "2020-11-17T07:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMDgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDk4NQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524524985", "bodyText": "countDown() should be replaced by complete()", "author": "julianladisch", "createdAt": "2020-11-16T19:39:10Z", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -236,87 +189,53 @@ public void testClusterMode(TestContext context) {\n         .then().statusCode(200).log().ifValidationFails().extract().response();\n       Assert.assertTrue(\"raml: \" + c.getLastReport().toString(),\n         c.getLastReport().isEmpty());\n-      async.complete();\n-    });\n+      vertx.close(context.asyncAssertSuccess(x -> async.complete()));\n+    }));\n+    async.await();\n   }\n \n   @Test\n   public void testClusterModeFail1(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-cluster-host\", \"foobar\", \"-cluster-port\", \"5701\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail2(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-file\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail3(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-cp\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail4(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-url\", \"foobar\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testOkapiSamePort(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"dev\"};\n \n+    Async async = context.async();\n     MainDeploy d1 = new MainDeploy();\n-    d1.init(args, res1 -> {\n-      vertx = res1.succeeded() ? res1.result() : null;\n-      Assert.assertTrue(\"d1 \" + res1.cause(), res1.succeeded());\n-\n+    d1.init(args, context.asyncAssertSuccess(vertx -> {\n       MainDeploy d2 = new MainDeploy();\n-      d2.init(args, res2 -> {\n-        Assert.assertTrue(\"d2 \" + res2.cause(), res2.failed());\n-        async.complete();\n-      });\n-    });\n+      d2.init(args, context.asyncAssertFailure(\n+          x -> vertx.close(context.asyncAssertSuccess(y -> async.countDown()))));", "originalCommit": "666b739d11ec7033a4224cb22c027a156a95a0bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNDM2MA==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524924360", "bodyText": "Jesus!. Yes.", "author": "adamdickmeiss", "createdAt": "2020-11-17T07:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDk4NQ=="}], "type": "inlineReview"}, {"oid": "a49bfabe54f6a496912af9ddae57e4397451ffde", "url": "https://github.com/folio-org/okapi/commit/a49bfabe54f6a496912af9ddae57e4397451ffde", "message": "Update okapi-core/src/main/java/org/folio/okapi/managers/ModuleManager.java\n\nCo-authored-by: julianladisch <julianladisch@users.noreply.github.com>", "committedDate": "2020-11-17T06:58:36Z", "type": "commit"}, {"oid": "f1aa3937c3e4e12a176d31e88426aa909c805012", "url": "https://github.com/folio-org/okapi/commit/f1aa3937c3e4e12a176d31e88426aa909c805012", "message": "Better JavaDoc", "committedDate": "2020-11-17T07:06:43Z", "type": "commit"}, {"oid": "fa9d09948dce22ee35e4360d99d1974d3ff32b87", "url": "https://github.com/folio-org/okapi/commit/fa9d09948dce22ee35e4360d99d1974d3ff32b87", "message": "Simplify construct", "committedDate": "2020-11-17T07:06:52Z", "type": "commit"}, {"oid": "3bd5cbc3a72ece1609318ef14eb360af46a7e67d", "url": "https://github.com/folio-org/okapi/commit/3bd5cbc3a72ece1609318ef14eb360af46a7e67d", "message": "Port property only needs setting once", "committedDate": "2020-11-17T07:07:12Z", "type": "commit"}, {"oid": "f1335aea227398273986a81c32cf35ff48919c16", "url": "https://github.com/folio-org/okapi/commit/f1335aea227398273986a81c32cf35ff48919c16", "message": "Unused import", "committedDate": "2020-11-17T07:07:56Z", "type": "commit"}, {"oid": "3e2218793d4a6bc25c1ad4759042cbaa4de6fb69", "url": "https://github.com/folio-org/okapi/commit/3e2218793d4a6bc25c1ad4759042cbaa4de6fb69", "message": "Async complete", "committedDate": "2020-11-17T07:08:05Z", "type": "commit"}, {"oid": "dbdeec047ac9cd2dcbb4808b58a90d3e00c9a4be", "url": "https://github.com/folio-org/okapi/commit/dbdeec047ac9cd2dcbb4808b58a90d3e00c9a4be", "message": "Merge branch 'OKAPI-930-upgrade-okapi-module-for-tenants' of github.com:folio-org/okapi into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-17T07:08:30Z", "type": "commit"}, {"oid": "806752cf0c9b840f98fe5011039cf46abe339558", "url": "https://github.com/folio-org/okapi/commit/806752cf0c9b840f98fe5011039cf46abe339558", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-17T07:08:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA3OTk5NA==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525079994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Future<String> redeploy(TestContext context) {\n          \n          \n            \n                Async async = context.async();\n          \n          \n            \n                Promise<String> promise = Promise.promise();\n          \n          \n            \n                redeploy().onComplete(res -> {\n          \n          \n            \n                  promise.handle(res);\n          \n          \n            \n                  async.complete();\n          \n          \n            \n                });\n          \n          \n            \n                async.await();\n          \n          \n            \n                return promise.future();\n          \n          \n            \n              private Future<String> redeploy(TestContext context) {\n          \n          \n            \n                Async async = context.async();\n          \n          \n            \n                Future<String> future = redeploy().onComplete(res -> async.complete());\n          \n          \n            \n                async.await();\n          \n          \n            \n                return future;", "author": "julianladisch", "createdAt": "2020-11-17T11:23:24Z", "path": "okapi-core/src/test/java/org/folio/okapi/ModuleTest.java", "diffHunk": "@@ -2551,122 +2501,234 @@ public void testSemVer(TestContext context) {\n         .log().ifValidationFails()\n         .extract().response();\n     assertEmptyReport(c);\n-\n-    async.complete();\n   }\n \n-  @Test\n-  public void testManyModules(TestContext context) {\n-    async = context.async();\n-\n-    RestAssuredClient c;\n-    Response r;\n-\n-    int i;\n-    for (i = 0; i < 10; i++) {\n-      String docSampleModule = \"{\" + LS\n-        + \"  \\\"id\\\" : \\\"sample-1.2.\" + Integer.toString(i) + \"\\\",\" + LS\n-        + \"  \\\"name\\\" : \\\"sample module \" + Integer.toString(i) + \"\\\",\" + LS\n-        + \"  \\\"requires\\\" : [ ]\" + LS\n-        + \"}\";\n-      c = api.createRestAssured3();\n-      c.given()\n-        .header(\"Content-Type\", \"application/json\")\n-        .body(docSampleModule)\n-        .post(\"/_/proxy/modules\")\n-        .then()\n-        .statusCode(201)\n-        .log().ifValidationFails();\n-      assertEmptyReport(c);\n-    }\n-    c = api.createRestAssured3();\n-    r = c.given()\n-      .get(\"/_/proxy/modules\")\n-      .then()\n-      .statusCode(200).log().ifValidationFails().extract().response();\n-    assertEmptyReport(c);\n-\n-    async.complete();\n-  }\n-\n-  private void undeployFirst(Handler<AsyncResult<Void>> fut) {\n+  private Future<Void> undeployAll() {\n     Set<String> ids = vertx.deploymentIDs();\n     Iterator<String> it = ids.iterator();\n-    if (it.hasNext()) {\n-      vertx.undeploy(it.next(), fut);\n-    } else {\n-      fut.handle(Future.succeededFuture());\n+    Future<Void> future = Future.succeededFuture();\n+    while (it.hasNext()) {\n+      future = future.compose(x -> vertx.undeploy(it.next()));\n     }\n+    return future;\n   }\n \n-  private void undeployFirstAndDeploy(TestContext context, Handler<AsyncResult<String>> fut) {\n-    async = context.async();\n+  private Future<String> redeploy() {\n     httpClient = null;\n-    undeployFirst(context.asyncAssertSuccess(handler -> {\n+    return undeployAll().compose(x -> {\n       DeploymentOptions opt = new DeploymentOptions().setConfig(conf);\n-      vertx.deployVerticle(MainVerticle.class.getName(), opt, res -> {\n-        fut.handle(res);\n-        async.complete();\n-      });\n-    }));\n+      return vertx.deployVerticle(MainVerticle.class.getName(), opt);\n+    });\n+  }\n+\n+  private Future<String> redeploy(TestContext context) {\n+    Async async = context.async();\n+    Promise<String> promise = Promise.promise();\n+    redeploy().onComplete(res -> {\n+      promise.handle(res);\n+      async.complete();\n+    });\n+    async.await();\n+    return promise.future();", "originalCommit": "806752cf0c9b840f98fe5011039cf46abe339558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7261c4cb2caa750f1aff441438194954b50bca33", "url": "https://github.com/folio-org/okapi/commit/7261c4cb2caa750f1aff441438194954b50bca33", "message": "Update okapi-core/src/test/java/org/folio/okapi/ModuleTest.java\n\nCo-authored-by: julianladisch <julianladisch@users.noreply.github.com>", "committedDate": "2020-11-17T11:26:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc4Mw==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525092783", "bodyText": "This is from a POST request, MainVerticle.java should write \"POST test-header-module ...\" into the header.", "author": "julianladisch", "createdAt": "2020-11-17T11:46:02Z", "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",", "originalCommit": "7261c4cb2caa750f1aff441438194954b50bca33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NTQ0OQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525095449", "bodyText": "myPermissionHandle hardcodes GET.. I'll fix that.", "author": "adamdickmeiss", "createdAt": "2020-11-17T11:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NDAzNQ==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525094035", "bodyText": "Splitting this big method into smaller ones and using rest-assured could improve readability. It's up to you if you want to change it or merge as is.", "author": "julianladisch", "createdAt": "2020-11-17T11:48:15Z", "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n+              cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n           async.complete();\n         });\n       });\n-    });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertEquals(perm, new JsonArray(res.result()).getJsonObject(0));\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      headers.replace(XOkapiHeaders.TENANT, \"other\");\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertNull(res.result());\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }", "originalCommit": "7261c4cb2caa750f1aff441438194954b50bca33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NzI3OA==", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525097278", "bodyText": "ok. I'll do it. Not pretty.", "author": "adamdickmeiss", "createdAt": "2020-11-17T11:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NDAzNQ=="}], "type": "inlineReview"}, {"oid": "5eed951ea9116cbc619461549ae26f5547482ef7", "url": "https://github.com/folio-org/okapi/commit/5eed951ea9116cbc619461549ae26f5547482ef7", "message": "Make method match in test", "committedDate": "2020-11-17T11:53:48Z", "type": "commit"}, {"oid": "8b4d82d4ceb417faed9dbd9af9c8aad63a1e4ebf", "url": "https://github.com/folio-org/okapi/commit/8b4d82d4ceb417faed9dbd9af9c8aad63a1e4ebf", "message": "Split tests", "committedDate": "2020-11-17T12:05:41Z", "type": "commit"}, {"oid": "24190ceade3ea3a7a3f8a762a06e790c7005f4f1", "url": "https://github.com/folio-org/okapi/commit/24190ceade3ea3a7a3f8a762a06e790c7005f4f1", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-930-upgrade-okapi-module-for-tenants", "committedDate": "2020-11-17T12:06:05Z", "type": "commit"}]}