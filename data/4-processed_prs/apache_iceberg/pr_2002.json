{"pr_number": 2002, "pr_title": "AWS: add client factory for assume role use case", "pr_createdAt": "2020-12-29T02:45:37Z", "pr_url": "https://github.com/apache/iceberg/pull/2002", "timeline": [{"oid": "6da2b8ef293f0f50601790368301cd24d29561f9", "url": "https://github.com/apache/iceberg/commit/6da2b8ef293f0f50601790368301cd24d29561f9", "message": "AWS: add client factory for assume role use case", "committedDate": "2020-12-29T02:47:46Z", "type": "commit"}, {"oid": "6da2b8ef293f0f50601790368301cd24d29561f9", "url": "https://github.com/apache/iceberg/commit/6da2b8ef293f0f50601790368301cd24d29561f9", "message": "AWS: add client factory for assume role use case", "committedDate": "2020-12-29T02:47:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4NDAyMA==", "url": "https://github.com/apache/iceberg/pull/2002#discussion_r549784020", "bodyText": "I am not able to reproduce the case that a region must be provided for STS client, please let me know if there is a way to reproduce the scenario.", "author": "jackye1995", "createdAt": "2020-12-29T17:18:42Z", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private String region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    region = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(region, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    AssumeRoleRequest request = AssumeRoleRequest.builder()\n+        .roleArn(roleArn)\n+        .roleSessionName(genSessionName())\n+        .durationSeconds(timeout)\n+        .externalId(externalId)\n+        .build();\n+\n+    clientBuilder.credentialsProvider(\n+        StsAssumeRoleCredentialsProvider.builder()\n+            .stsClient(StsClient.builder().httpClient(HTTP_CLIENT_DEFAULT).build())", "originalCommit": "6da2b8ef293f0f50601790368301cd24d29561f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzNjcyOQ==", "url": "https://github.com/apache/iceberg/pull/2002#discussion_r552236729", "bodyText": "I wouldn't worry about it then.  We have a rather complicated account setup and I'm not sure I know well enough what is producing the issue internally for us.", "author": "danielcweeks", "createdAt": "2021-01-05T22:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4NDAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0NDE0MQ==", "url": "https://github.com/apache/iceberg/pull/2002#discussion_r549844141", "bodyText": "you should add a finally to retry to drop the namespace.", "author": "giovannifumarola", "createdAt": "2020-12-29T20:56:05Z", "path": "aws/src/integration/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.aws.glue.GlueCatalog;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.model.AccessDeniedException;\n+import software.amazon.awssdk.services.glue.model.GlueException;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.CreateRoleResponse;\n+import software.amazon.awssdk.services.iam.model.DeleteRolePolicyRequest;\n+import software.amazon.awssdk.services.iam.model.DeleteRoleRequest;\n+import software.amazon.awssdk.services.iam.model.PutRolePolicyRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public class AssumeRoleAwsClientFactoryTest {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AssumeRoleAwsClientFactoryTest.class);\n+\n+  private IamClient iam;\n+  private String roleName;\n+  private Map<String, String> assumeRoleProperties;\n+  private String policyName;\n+\n+  @Before\n+  public void before() {\n+    roleName = UUID.randomUUID().toString();\n+    iam = IamClient.builder()\n+        .region(Region.AWS_GLOBAL)\n+        .httpClient(UrlConnectionHttpClient.create())\n+        .build();\n+    CreateRoleResponse response = iam.createRole(CreateRoleRequest.builder()\n+        .roleName(roleName)\n+        .assumeRolePolicyDocument(\"{\" +\n+            \"\\\"Version\\\":\\\"2012-10-17\\\",\" +\n+            \"\\\"Statement\\\":[{\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Principal\\\":{\" +\n+            \"\\\"AWS\\\":\\\"arn:aws:iam::\" + AwsIntegTestUtil.testAccountId() + \":root\\\"},\" +\n+            \"\\\"Action\\\": \\\"sts:AssumeRole\\\"}]}\")\n+        .maxSessionDuration(3600)\n+        .build());\n+    assumeRoleProperties = Maps.newHashMap();\n+    assumeRoleProperties.put(AwsProperties.CLIENT_FACTORY, AssumeRoleAwsClientFactory.class.getName());\n+    assumeRoleProperties.put(AwsProperties.CLIENT_ASSUME_ROLE_REGION, \"us-east-1\");\n+    assumeRoleProperties.put(AwsProperties.CLIENT_ASSUME_ROLE_ARN, response.role().arn());\n+    policyName = UUID.randomUUID().toString();\n+  }\n+\n+  @After\n+  public void after() {\n+    iam.deleteRolePolicy(DeleteRolePolicyRequest.builder().roleName(roleName).policyName(policyName).build());\n+    iam.deleteRole(DeleteRoleRequest.builder().roleName(roleName).build());\n+  }\n+\n+  @Test\n+  public void testAssumeRole_glueCatalog() throws Exception {\n+    String glueArnPrefix = \"arn:aws:glue:*:\" + AwsIntegTestUtil.testAccountId();\n+    iam.putRolePolicy(PutRolePolicyRequest.builder()\n+        .roleName(roleName)\n+        .policyName(policyName)\n+        .policyDocument(\"{\" +\n+            \"\\\"Version\\\":\\\"2012-10-17\\\",\" +\n+            \"\\\"Statement\\\":[{\" +\n+            \"\\\"Sid\\\":\\\"policy1\\\",\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Action\\\":[\\\"glue:CreateDatabase\\\",\\\"glue:DeleteDatabase\\\",\\\"glue:GetDatabase\\\",\\\"glue:GetTables\\\"],\" +\n+            \"\\\"Resource\\\":[\\\"\" + glueArnPrefix + \":catalog\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":database/allowed_*\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":table/allowed_*/*\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":userDefinedFunction/allowed_*/*\\\"]}]}\")\n+        .build());\n+    waitForIamConsistency();\n+\n+    GlueCatalog glueCatalog = new GlueCatalog();\n+    assumeRoleProperties.put(\"warehouse\", \"s3://path\");\n+    glueCatalog.initialize(\"test\", assumeRoleProperties);\n+    try {\n+      glueCatalog.createNamespace(Namespace.of(\"denied_\" + UUID.randomUUID().toString().replace(\"-\", \"\")));\n+      Assert.fail(\"Access to Glue should be denied\");\n+    } catch (GlueException e) {\n+      Assert.assertEquals(AccessDeniedException.class, e.getClass());\n+    }\n+\n+    try {\n+      Namespace namespace = Namespace.of(\"allowed_\" + UUID.randomUUID().toString().replace(\"-\", \"\"));\n+      glueCatalog.createNamespace(namespace);\n+      glueCatalog.dropNamespace(namespace);\n+    } catch (GlueException e) {\n+      LOG.error(\"fail to create or delete Glue database\", e);\n+      Assert.fail(\"create and delete namespace should succeed\");\n+    }", "originalCommit": "6da2b8ef293f0f50601790368301cd24d29561f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0NDI4NA==", "url": "https://github.com/apache/iceberg/pull/2002#discussion_r549844284", "bodyText": "do you delete this file?", "author": "giovannifumarola", "createdAt": "2020-12-29T20:56:39Z", "path": "aws/src/integration/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.aws.glue.GlueCatalog;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.model.AccessDeniedException;\n+import software.amazon.awssdk.services.glue.model.GlueException;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.CreateRoleResponse;\n+import software.amazon.awssdk.services.iam.model.DeleteRolePolicyRequest;\n+import software.amazon.awssdk.services.iam.model.DeleteRoleRequest;\n+import software.amazon.awssdk.services.iam.model.PutRolePolicyRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public class AssumeRoleAwsClientFactoryTest {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AssumeRoleAwsClientFactoryTest.class);\n+\n+  private IamClient iam;\n+  private String roleName;\n+  private Map<String, String> assumeRoleProperties;\n+  private String policyName;\n+\n+  @Before\n+  public void before() {\n+    roleName = UUID.randomUUID().toString();\n+    iam = IamClient.builder()\n+        .region(Region.AWS_GLOBAL)\n+        .httpClient(UrlConnectionHttpClient.create())\n+        .build();\n+    CreateRoleResponse response = iam.createRole(CreateRoleRequest.builder()\n+        .roleName(roleName)\n+        .assumeRolePolicyDocument(\"{\" +\n+            \"\\\"Version\\\":\\\"2012-10-17\\\",\" +\n+            \"\\\"Statement\\\":[{\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Principal\\\":{\" +\n+            \"\\\"AWS\\\":\\\"arn:aws:iam::\" + AwsIntegTestUtil.testAccountId() + \":root\\\"},\" +\n+            \"\\\"Action\\\": \\\"sts:AssumeRole\\\"}]}\")\n+        .maxSessionDuration(3600)\n+        .build());\n+    assumeRoleProperties = Maps.newHashMap();\n+    assumeRoleProperties.put(AwsProperties.CLIENT_FACTORY, AssumeRoleAwsClientFactory.class.getName());\n+    assumeRoleProperties.put(AwsProperties.CLIENT_ASSUME_ROLE_REGION, \"us-east-1\");\n+    assumeRoleProperties.put(AwsProperties.CLIENT_ASSUME_ROLE_ARN, response.role().arn());\n+    policyName = UUID.randomUUID().toString();\n+  }\n+\n+  @After\n+  public void after() {\n+    iam.deleteRolePolicy(DeleteRolePolicyRequest.builder().roleName(roleName).policyName(policyName).build());\n+    iam.deleteRole(DeleteRoleRequest.builder().roleName(roleName).build());\n+  }\n+\n+  @Test\n+  public void testAssumeRole_glueCatalog() throws Exception {\n+    String glueArnPrefix = \"arn:aws:glue:*:\" + AwsIntegTestUtil.testAccountId();\n+    iam.putRolePolicy(PutRolePolicyRequest.builder()\n+        .roleName(roleName)\n+        .policyName(policyName)\n+        .policyDocument(\"{\" +\n+            \"\\\"Version\\\":\\\"2012-10-17\\\",\" +\n+            \"\\\"Statement\\\":[{\" +\n+            \"\\\"Sid\\\":\\\"policy1\\\",\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Action\\\":[\\\"glue:CreateDatabase\\\",\\\"glue:DeleteDatabase\\\",\\\"glue:GetDatabase\\\",\\\"glue:GetTables\\\"],\" +\n+            \"\\\"Resource\\\":[\\\"\" + glueArnPrefix + \":catalog\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":database/allowed_*\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":table/allowed_*/*\\\",\" +\n+            \"\\\"\" + glueArnPrefix + \":userDefinedFunction/allowed_*/*\\\"]}]}\")\n+        .build());\n+    waitForIamConsistency();\n+\n+    GlueCatalog glueCatalog = new GlueCatalog();\n+    assumeRoleProperties.put(\"warehouse\", \"s3://path\");\n+    glueCatalog.initialize(\"test\", assumeRoleProperties);\n+    try {\n+      glueCatalog.createNamespace(Namespace.of(\"denied_\" + UUID.randomUUID().toString().replace(\"-\", \"\")));\n+      Assert.fail(\"Access to Glue should be denied\");\n+    } catch (GlueException e) {\n+      Assert.assertEquals(AccessDeniedException.class, e.getClass());\n+    }\n+\n+    try {\n+      Namespace namespace = Namespace.of(\"allowed_\" + UUID.randomUUID().toString().replace(\"-\", \"\"));\n+      glueCatalog.createNamespace(namespace);\n+      glueCatalog.dropNamespace(namespace);\n+    } catch (GlueException e) {\n+      LOG.error(\"fail to create or delete Glue database\", e);\n+      Assert.fail(\"create and delete namespace should succeed\");\n+    }\n+  }\n+\n+  @Test\n+  public void testAssumeRole_s3FileIO() throws Exception {\n+    String bucketArn = \"arn:aws:s3:::\" + AwsIntegTestUtil.testBucketName();\n+    iam.putRolePolicy(PutRolePolicyRequest.builder()\n+        .roleName(roleName)\n+        .policyName(policyName)\n+        .policyDocument(\"{\" +\n+            \"\\\"Version\\\":\\\"2012-10-17\\\",\" +\n+            \"\\\"Statement\\\":[{\" +\n+            \"\\\"Sid\\\":\\\"policy1\\\",\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Action\\\":\\\"s3:ListBucket\\\",\" +\n+            \"\\\"Resource\\\":[\\\"\" + bucketArn + \"\\\"],\" +\n+            \"\\\"Condition\\\":{\\\"StringLike\\\":{\\\"s3:prefix\\\":[\\\"allowed/*\\\"]}}} ,{\" +\n+            \"\\\"Sid\\\":\\\"policy2\\\",\" +\n+            \"\\\"Effect\\\":\\\"Allow\\\",\" +\n+            \"\\\"Action\\\":\\\"s3:GetObject\\\",\" +\n+            \"\\\"Resource\\\":[\\\"\" + bucketArn + \"/allowed/*\\\"]}]}\")\n+        .build());\n+    waitForIamConsistency();\n+\n+    S3FileIO s3FileIO = new S3FileIO();\n+    s3FileIO.initialize(assumeRoleProperties);\n+    InputFile inputFile = s3FileIO.newInputFile(\"s3://\" + AwsIntegTestUtil.testBucketName() + \"/denied/file\");\n+    try {\n+      inputFile.exists();\n+      Assert.fail(\"Access to s3 should be denied\");\n+    } catch (S3Exception e) {\n+      Assert.assertEquals(\"Should see 403 error code\", 403, e.statusCode());\n+    }\n+\n+    inputFile = s3FileIO.newInputFile(\"s3://\" + AwsIntegTestUtil.testBucketName() + \"/allowed/file\");", "originalCommit": "6da2b8ef293f0f50601790368301cd24d29561f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyODU4Ng==", "url": "https://github.com/apache/iceberg/pull/2002#discussion_r549928586", "bodyText": "This file does not exist, I call inputFile.exsits() just to check it has access permission.", "author": "jackye1995", "createdAt": "2020-12-30T04:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0NDI4NA=="}], "type": "inlineReview"}, {"oid": "b197c1a89ebd0d601924480c61b39e7141eab400", "url": "https://github.com/apache/iceberg/commit/b197c1a89ebd0d601924480c61b39e7141eab400", "message": "fix tests", "committedDate": "2020-12-30T04:13:08Z", "type": "commit"}]}