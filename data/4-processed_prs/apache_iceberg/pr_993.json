{"pr_number": 993, "pr_title": "Removing dependency on moz_sql_parser", "pr_createdAt": "2020-05-01T00:16:33Z", "pr_url": "https://github.com/apache/iceberg/pull/993", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjQxMw==", "url": "https://github.com/apache/iceberg/pull/993#discussion_r418362413", "bodyText": "Is this derived from another parser or example? If so, we should make sure we note it so we can update the license documentation.", "author": "rdblue", "createdAt": "2020-05-01T00:30:31Z", "path": "python/iceberg/api/expressions/expression_parser.py", "diffHunk": "@@ -0,0 +1,157 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import logging\n+\n+from pyparsing import (\n+    alphanums,\n+    alphas,\n+    CaselessKeyword,\n+    delimitedList,\n+    Group,\n+    infixNotation,\n+    oneOf,\n+    opAssoc,\n+    pyparsing_common as ppc,\n+    quotedString,\n+    Word\n+)\n+\n+\n+_logger = logging.getLogger(__name__)\n+\n+AND, OR, IN, IS, NOT, NULL, BETWEEN = map(\n+    CaselessKeyword, \"and or in is not null between\".split()\n+)\n+NOT_NULL = NOT + NULL\n+\n+ident = Word(alphas, alphanums + \"_$\").setName(\"identifier\")\n+columnName = delimitedList(ident, \".\", combine=True).setName(\"column name\")\n+\n+binop = oneOf(\"= == != < > >= <= eq ne lt le gt ge <>\", caseless=False)\n+realNum = ppc.real()\n+intNum = ppc.signed_integer()\n+\n+columnRval = (realNum\n+              | intNum\n+              | quotedString\n+              | columnName)  # need to add support for alg expressions\n+whereCondition = Group(\n+    (columnName + binop + columnRval)\n+    | (columnName + IN + Group(\"(\" + delimitedList(columnRval) + \")\"))\n+    | (columnName + IS + (NULL | NOT_NULL))\n+    | (columnName + BETWEEN + columnRval + AND + columnRval)\n+\n+)\n+\n+whereExpression = infixNotation(\n+    Group(whereCondition\n+          | NOT + whereCondition\n+          | NOT + Group('(' + whereCondition + ')')\n+          | NOT + columnName),\n+    [(NOT, 1, opAssoc.LEFT), (AND, 2, opAssoc.LEFT), (OR, 2, opAssoc.LEFT), (IS, 2, opAssoc.LEFT)],\n+)\n+\n+op_map = {\"=\": \"eq\",\n+          \"==\": \"eq\",\n+          \"eq\": \"eq\",\n+          \">\": \"gt\",\n+          \"gt\": \"gt\",\n+          \">=\": \"gte\",\n+          \"gte\": \"gte\",\n+          \"<\": \"lt\",\n+          \"lt\": \"lt\",\n+          \"<=\": \"lte\",\n+          \"lte\": \"lte\",\n+          \"!\": \"not\",\n+          \"not\": \"not\",\n+          \"!=\": \"neq\",\n+          \"<>\": \"neq\",\n+          \"neq\": \"neq\",\n+          \"||\": \"or\",\n+          \"or\": \"or\",\n+          \"&&\": \"and\",\n+          \"and\": \"and\",\n+          \"in\": \"in\",\n+          \"between\": \"between\",\n+          \"is\": \"is\"}", "originalCommit": "a1ac6c9cdce0041c17bf5dd10a38afe9f9bd80d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NTgwNg==", "url": "https://github.com/apache/iceberg/pull/993#discussion_r418665806", "bodyText": "Updated with some sourcing for the basic parsing grammar", "author": "TGooch44", "createdAt": "2020-05-01T18:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjQxMw=="}], "type": "inlineReview"}, {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba", "url": "https://github.com/apache/iceberg/commit/2ae4cb354a09eaa416582deb876cb7d274cd83ba", "message": "Removing dependency on moz_sql_parser", "committedDate": "2020-05-01T18:08:53Z", "type": "commit"}, {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba", "url": "https://github.com/apache/iceberg/commit/2ae4cb354a09eaa416582deb876cb7d274cd83ba", "message": "Removing dependency on moz_sql_parser", "committedDate": "2020-05-01T18:08:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODk1Nw==", "url": "https://github.com/apache/iceberg/pull/993#discussion_r420988957", "bodyText": "Isn't it normal for OR to be lower precedence than AND? I think the original case was correct.\nI tested this in Spark and Presto:\nselect * from rblue.test where id = 1 or id = 2 and data = 'b'\nPresto:\nfilterPredicate = ((\"id\" IN (BIGINT '1', BIGINT '2')) AND ((\"id\" = BIGINT '1') OR (\"data\" = CAST('b' AS varchar))))\n\nSpark:\nfilters=(id = 1 OR (id = 2 AND data = 'b'))\n\nIn both of them, AND has higher precedence than OR.", "author": "rdblue", "createdAt": "2020-05-06T18:05:12Z", "path": "python/tests/api/expressions/test_str_to_expr.py", "diffHunk": "@@ -117,14 +117,32 @@ def test_ternary_condition():\n \n \n def test_precedence():\n-    expected_expr = Expressions.and_(Expressions.or_(Expressions.equal(\"col_a\", 1),\n-                                                     Expressions.equal(\"col_b\", 2)),\n-                                     Expressions.equal(\"col_c\", 3))\n+    expected_expr = Expressions.or_(Expressions.equal(\"col_a\", 1),\n+                                    Expressions.and_(Expressions.equal(\"col_b\", 2),\n+                                                     Expressions.equal(\"col_c\", 3)))", "originalCommit": "2ae4cb354a09eaa416582deb876cb7d274cd83ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNzA2NA==", "url": "https://github.com/apache/iceberg/pull/993#discussion_r421007064", "bodyText": "precedence in SQL is generally (), AND, OR.  Doesn't that mean the AND should be evaluated then the OR, which it looks like the newer case is doing?", "author": "TGooch44", "createdAt": "2020-05-06T18:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTc0Mg==", "url": "https://github.com/apache/iceberg/pull/993#discussion_r421009742", "bodyText": "You're right! I got it backward and this is actually fixing the problem.", "author": "rdblue", "createdAt": "2020-05-06T18:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODk1Nw=="}], "type": "inlineReview"}]}