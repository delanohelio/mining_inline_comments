{"pr_number": 1432, "pr_title": "Core: CachingCatalog - create metadata table instance based on cached table operation for origin table", "pr_createdAt": "2020-09-08T05:34:20Z", "pr_url": "https://github.com/apache/iceberg/pull/1432", "timeline": [{"oid": "f6d04031d75777fed2601e680fa5438be479e782", "url": "https://github.com/apache/iceberg/commit/f6d04031d75777fed2601e680fa5438be479e782", "message": "Core. Invalidate metadata tables in cache when the base table is modified", "committedDate": "2020-09-08T05:34:52Z", "type": "commit"}, {"oid": "f6d04031d75777fed2601e680fa5438be479e782", "url": "https://github.com/apache/iceberg/commit/f6d04031d75777fed2601e680fa5438be479e782", "message": "Core. Invalidate metadata tables in cache when the base table is modified", "committedDate": "2020-09-08T05:34:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2MzU2Ng==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r484663566", "bodyText": "I only added the test to verify the new change. If we want to have another functional tests, we can have them in separate PR.", "author": "HeartSaVioR", "createdAt": "2020-09-08T05:46:54Z", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CachingCatalog;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCachingCatalog extends HadoopTableTestBase {\n+\n+  @Test\n+  public void testInvalidateMetadataTablesIfBaseTableIsModified() throws Exception {", "originalCommit": "f6d04031d75777fed2601e680fa5438be479e782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "url": "https://github.com/apache/iceberg/commit/3e2b25992331c34f7a210139fdf8c7c5089491ca", "message": "Change the approach to create metadata table instance based on cached table operation for origin table", "committedDate": "2020-09-09T05:19:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NTQ4Mw==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485345483", "bodyText": "Calling BaseMetastoreCatalog.fullTableName here is a bit odd, but I'm not sure we would want to extract the method to somewhere else.", "author": "HeartSaVioR", "createdAt": "2020-09-09T05:24:03Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+\n+public final class MetadataTableUtils {\n+  private MetadataTableUtils() {}\n+\n+  public static boolean isValidMetadataIdentifier(TableIdentifier identifier) {\n+    return MetadataTableType.from(identifier.name()) != null &&\n+        isValidIdentifier(TableIdentifier.of(identifier.namespace().levels()));\n+  }\n+\n+  private static boolean isValidIdentifier(TableIdentifier tableIdentifier) {\n+    // by default allow all identifiers\n+    return true;\n+  }\n+\n+  public static Table createMetadataTableInstance(TableOperations originTableOps,\n+                                                  String fullTableName,\n+                                                  MetadataTableType type) {\n+    Table baseTableForMetadata = new BaseTable(originTableOps, fullTableName);\n+    switch (type) {\n+      case ENTRIES:\n+        return new ManifestEntriesTable(originTableOps, baseTableForMetadata);\n+      case FILES:\n+        return new DataFilesTable(originTableOps, baseTableForMetadata);\n+      case HISTORY:\n+        return new HistoryTable(originTableOps, baseTableForMetadata);\n+      case SNAPSHOTS:\n+        return new SnapshotsTable(originTableOps, baseTableForMetadata);\n+      case MANIFESTS:\n+        return new ManifestsTable(originTableOps, baseTableForMetadata);\n+      case PARTITIONS:\n+        return new PartitionsTable(originTableOps, baseTableForMetadata);\n+      case ALL_DATA_FILES:\n+        return new AllDataFilesTable(originTableOps, baseTableForMetadata);\n+      case ALL_MANIFESTS:\n+        return new AllManifestsTable(originTableOps, baseTableForMetadata);\n+      case ALL_ENTRIES:\n+        return new AllEntriesTable(originTableOps, baseTableForMetadata);\n+      default:\n+        throw new NoSuchTableException(\"Unknown metadata table type: %s for %s\", type, fullTableName);\n+    }\n+  }\n+\n+  public static Table createMetadataTableInstance(TableOperations originTableOps,\n+                                                  TableIdentifier originTableIdentifier,\n+                                                  MetadataTableType type) {\n+    return createMetadataTableInstance(originTableOps,\n+        BaseMetastoreCatalog.fullTableName(type.name(), originTableIdentifier),", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDE1OQ==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485980159", "bodyText": "I think this is okay, but I agree it is a little strange. We can move it to a util class later if we want.", "author": "rdblue", "createdAt": "2020-09-09T23:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NTQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODg5NQ==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485978895", "bodyText": "I don't think that this needs to be a final class. That limits what we can do to evolve it later.", "author": "rdblue", "createdAt": "2020-09-09T23:37:39Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+\n+public final class MetadataTableUtils {", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODk3Ng==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485978976", "bodyText": "I don't think that {} is allowed by our style checker. I think you have to add a newline.", "author": "rdblue", "createdAt": "2020-09-09T23:37:58Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+\n+public final class MetadataTableUtils {\n+  private MetadataTableUtils() {}", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTMwNQ==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485979305", "bodyText": "I don't see much value in delegating to this method, since it assumes that the identifier is valid. Instead, I think we should just check that the identifier might reference a metadata table in isValidMetadataIdentifier and assume the remaining part is valid. After all, we'll have to load it anyway.", "author": "rdblue", "createdAt": "2020-09-09T23:39:02Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+\n+public final class MetadataTableUtils {\n+  private MetadataTableUtils() {}\n+\n+  public static boolean isValidMetadataIdentifier(TableIdentifier identifier) {\n+    return MetadataTableType.from(identifier.name()) != null &&\n+        isValidIdentifier(TableIdentifier.of(identifier.namespace().levels()));\n+  }\n+\n+  private static boolean isValidIdentifier(TableIdentifier tableIdentifier) {", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDMwMA==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485980300", "bodyText": "We avoid static method imports. Can you call MetadataTableUtils.createMetadataTableInstance instead?", "author": "rdblue", "createdAt": "2020-09-09T23:42:25Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -50,6 +50,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.iceberg.MetadataTableUtils.createMetadataTableInstance;", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMTAwMA==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r486001000", "bodyText": "Ah OK good to know. I'll fix the other places in the PR as well.", "author": "HeartSaVioR", "createdAt": "2020-09-10T00:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDQzNw==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485980437", "bodyText": "This implementation looks good to me.", "author": "rdblue", "createdAt": "2020-09-09T23:42:54Z", "path": "core/src/main/java/org/apache/iceberg/CachingCatalog.java", "diffHunk": "@@ -63,7 +67,29 @@ private TableIdentifier canonicalizeIdentifier(TableIdentifier tableIdentifier)\n \n   @Override\n   public Table loadTable(TableIdentifier ident) {\n-    return tableCache.get(canonicalizeIdentifier(ident), catalog::loadTable);\n+    TableIdentifier canonicalized = canonicalizeIdentifier(ident);\n+    Table cached = tableCache.getIfPresent(canonicalized);\n+    if (cached != null) {\n+      return cached;\n+    }\n+\n+    if (isValidMetadataIdentifier(canonicalized)) {\n+      TableIdentifier originTableIdentifier = TableIdentifier.of(canonicalized.namespace().levels());\n+      Table originTable = tableCache.get(originTableIdentifier, catalog::loadTable);\n+\n+      // share TableOperations instance of origin table for all metadata tables, so that metadata table instances are\n+      // also refreshed as well when origin table instance is refreshed.\n+      if (originTable instanceof HasTableOperations) {\n+        TableOperations ops = ((HasTableOperations) originTable).operations();\n+        MetadataTableType type = MetadataTableType.from(canonicalized.name());\n+\n+        Table metadataTable = createMetadataTableInstance(ops, originTableIdentifier, type);\n+        tableCache.put(canonicalized, metadataTable);\n+        return metadataTable;\n+      }\n+    }\n+\n+    return tableCache.get(canonicalized, catalog::loadTable);", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDYxMA==", "url": "https://github.com/apache/iceberg/pull/1432#discussion_r485980610", "bodyText": "How about renaming this to hasMetadataTableName since we assume the rest is a valid identifier?", "author": "rdblue", "createdAt": "2020-09-09T23:43:30Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+\n+public final class MetadataTableUtils {\n+  private MetadataTableUtils() {}\n+\n+  public static boolean isValidMetadataIdentifier(TableIdentifier identifier) {", "originalCommit": "3e2b25992331c34f7a210139fdf8c7c5089491ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4876d7e0d4cde7bca0e374b8e783bc33b5fc64cf", "url": "https://github.com/apache/iceberg/commit/4876d7e0d4cde7bca0e374b8e783bc33b5fc64cf", "message": "Reflect review comments", "committedDate": "2020-09-10T00:58:12Z", "type": "commit"}, {"oid": "9df69ef537e267f32865940f918412e1e9acd69e", "url": "https://github.com/apache/iceberg/commit/9df69ef537e267f32865940f918412e1e9acd69e", "message": "Style fix", "committedDate": "2020-09-10T03:49:49Z", "type": "commit"}]}