{"pr_number": 745, "pr_title": "schema evolution support", "pr_createdAt": "2020-01-21T21:00:14Z", "pr_url": "https://github.com/apache/iceberg/pull/745", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMTg5OA==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r370431898", "bodyText": "This test is still valid when checkOrdering is true. Can you restore it?", "author": "rdblue", "createdAt": "2020-01-24T00:59:50Z", "path": "api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java", "diffHunk": "@@ -331,26 +331,6 @@ public void testIncompatibleListAndPrimitive() {\n         errors.get(0).contains(\"list cannot be read as a string\"));\n   }\n \n-  @Test\n-  public void testStructWriteReordering() {", "originalCommit": "2b24c6f07f84716978ccca679d2ee274cee62ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMjE4NA==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r370432184", "bodyText": "I think this should still pass checkOrdering correctly. To fix the problem this is trying to address, I think this should add a write option to that gets passed into this.", "author": "rdblue", "createdAt": "2020-01-24T01:01:11Z", "path": "api/src/main/java/org/apache/iceberg/types/CheckCompatibility.java", "diffHunk": "@@ -78,7 +78,7 @@\n \n   private CheckCompatibility(Schema schema, boolean checkOrdering, boolean checkNullability) {\n     this.schema = schema;\n-    this.checkOrdering = checkOrdering;\n+    this.checkOrdering = false;", "originalCommit": "2b24c6f07f84716978ccca679d2ee274cee62ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMjMzNg==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r370432336", "bodyText": "Can you add back these newlines? We try to avoid non-functional changes like this because they can cause commit conflicts.", "author": "rdblue", "createdAt": "2020-01-24T01:01:49Z", "path": "spark/src/main/java/org/apache/iceberg/spark/source/PartitionKey.java", "diffHunk": "@@ -48,17 +48,16 @@\n   private final Accessor<InternalRow>[] accessors;\n \n   @SuppressWarnings(\"unchecked\")\n-  PartitionKey(PartitionSpec spec) {\n+  PartitionKey(PartitionSpec spec, Schema inputSchema) {\n     this.spec = spec;\n-", "originalCommit": "2b24c6f07f84716978ccca679d2ee274cee62ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMjQ2NQ==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r370432465", "bodyText": "Can we call this writeSchema or some name that indicates it is the schema of the incoming data, not necessarily the table schema?", "author": "rdblue", "createdAt": "2020-01-24T01:02:30Z", "path": "spark/src/main/java/org/apache/iceberg/spark/source/Writer.java", "diffHunk": "@@ -491,10 +491,10 @@ public void write(InternalRow row) throws IOException {\n         AppenderFactory<InternalRow> appenderFactory,\n         WriterFactory.OutputFileFactory fileFactory,\n         FileIO fileIo,\n-        long targetFileSize) {\n+        long targetFileSize,\n+        Schema schema) {", "originalCommit": "2b24c6f07f84716978ccca679d2ee274cee62ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMjU0MQ==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r370432541", "bodyText": "We should be able to remove this TODO.", "author": "rdblue", "createdAt": "2020-01-24T01:02:52Z", "path": "spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java", "diffHunk": "@@ -132,7 +132,7 @@ public void testNullPartitionValue() throws Exception {\n \n     try {\n       // TODO: incoming columns must be ordered according to the table's schema", "originalCommit": "2b24c6f07f84716978ccca679d2ee274cee62ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c00975ca35b4611f24ccd1e0a04da079128dfa6e", "url": "https://github.com/apache/iceberg/commit/c00975ca35b4611f24ccd1e0a04da079128dfa6e", "message": "schema evolution support\n\n1. make check ordering configurable\n2. use input schema to build accessors", "committedDate": "2020-01-27T07:21:58Z", "type": "forcePushed"}, {"oid": "e949af13ba41c635aa581bbbc395a87e307465e1", "url": "https://github.com/apache/iceberg/commit/e949af13ba41c635aa581bbbc395a87e307465e1", "message": "schema evolution support\n\n1. make check ordering configurable\n2. use input schema to build accessors", "committedDate": "2020-01-28T15:59:41Z", "type": "forcePushed"}, {"oid": "5ad1135002bf9e39cfba9305becddb71ac206dc5", "url": "https://github.com/apache/iceberg/commit/5ad1135002bf9e39cfba9305becddb71ac206dc5", "message": "schema evolution support\n\n1. skip check ordering\n2. use input schema to build accessors", "committedDate": "2020-01-29T06:47:54Z", "type": "forcePushed"}, {"oid": "9a25c9b7351e9954c280aadbcfdad31e385954a1", "url": "https://github.com/apache/iceberg/commit/9a25c9b7351e9954c280aadbcfdad31e385954a1", "message": "schema evolution support\n\n1. skip check ordering\n2. use input schema to build accessors", "committedDate": "2020-01-29T06:51:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyODY4OA==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r372228688", "bodyText": "@ravichinoy checkOrdering needs to be passed here as well. You should be able to turn off both the nullability and ordering checks.", "author": "davrmac", "createdAt": "2020-01-29T07:42:07Z", "path": "spark/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -189,10 +189,11 @@ private static void mergeIcebergHadoopConfs(\n         .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n   }\n \n-  private void validateWriteSchema(Schema tableSchema, Schema dsSchema, Boolean checkNullability) {\n+  private void validateWriteSchema(\n+          Schema tableSchema, Schema dsSchema, Boolean checkNullability, Boolean checkOrdering) {\n     List<String> errors;\n     if (checkNullability) {\n-      errors = CheckCompatibility.writeCompatibilityErrors(tableSchema, dsSchema);\n+      errors = CheckCompatibility.writeCompatibilityErrors(tableSchema, dsSchema, checkOrdering);\n     } else {\n       errors = CheckCompatibility.typeCompatibilityErrors(tableSchema, dsSchema);", "originalCommit": "9a25c9b7351e9954c280aadbcfdad31e385954a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28c529715f6a841c784fe98e4f8db33c5b0e1c34", "url": "https://github.com/apache/iceberg/commit/28c529715f6a841c784fe98e4f8db33c5b0e1c34", "message": "schema evolution support\n\nmake check ordering configurable\nuse input schema to build accessors", "committedDate": "2020-01-30T05:08:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NTAxMA==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r377985010", "bodyText": "Why is this a boxed boolean?", "author": "rdblue", "createdAt": "2020-02-12T00:47:04Z", "path": "api/src/main/java/org/apache/iceberg/types/CheckCompatibility.java", "diffHunk": "@@ -39,7 +39,36 @@\n    * @return a list of error details, or an empty list if there are no compatibility problems\n    */\n   public static List<String> writeCompatibilityErrors(Schema readSchema, Schema writeSchema) {\n-    return TypeUtil.visit(readSchema, new CheckCompatibility(writeSchema, true, true));\n+    return writeCompatibilityErrors(readSchema, writeSchema, true);\n+  }\n+\n+  /**\n+   * Returns a list of compatibility errors for writing with the given write schema.\n+   * This includes nullability: writing optional (nullable) values to a required field is an error\n+   * Optionally this method allows case where input schema has different ordering than table schema.\n+   * @param readSchema a read schema\n+   * @param writeSchema a write schema\n+   * @param checkOrdering If false, allow input schema to have different ordering than table schema\n+   * @return a list of error details, or an empty list if there are no compatibility problems\n+   */\n+  public static List<String> writeCompatibilityErrors(Schema readSchema, Schema writeSchema, Boolean checkOrdering) {", "originalCommit": "28c529715f6a841c784fe98e4f8db33c5b0e1c34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjU3Mw==", "url": "https://github.com/apache/iceberg/pull/745#discussion_r377986573", "bodyText": "It looks like this is getting too complicated. We now have 2 boolean options, one of which is used to select the compatibility checking method (which have similar names) and the other is passed as an arg (which isn't readable). I think it is a good idea to convert compatibility checking to a builder-like pattern:\nCheckCompatibility\n    .writeSchema(dsSchema)\n    .readSchema(tableSchema)\n    .checkOrdering(true)\n    .checkNullability(false)\n    .throwOnValidationError();", "author": "rdblue", "createdAt": "2020-02-12T00:52:56Z", "path": "spark/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -189,12 +189,13 @@ private static void mergeIcebergHadoopConfs(\n         .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n   }\n \n-  private void validateWriteSchema(Schema tableSchema, Schema dsSchema, Boolean checkNullability) {\n+  private void validateWriteSchema(\n+          Schema tableSchema, Schema dsSchema, Boolean checkNullability, Boolean checkOrdering) {", "originalCommit": "28c529715f6a841c784fe98e4f8db33c5b0e1c34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3978431bffc6a5145619b491088d45f33226e784", "url": "https://github.com/apache/iceberg/commit/3978431bffc6a5145619b491088d45f33226e784", "message": "schema evolution support\n\nmake check ordering configurable\nuse input schema to build accessors", "committedDate": "2020-02-13T19:58:49Z", "type": "commit"}, {"oid": "3978431bffc6a5145619b491088d45f33226e784", "url": "https://github.com/apache/iceberg/commit/3978431bffc6a5145619b491088d45f33226e784", "message": "schema evolution support\n\nmake check ordering configurable\nuse input schema to build accessors", "committedDate": "2020-02-13T19:58:49Z", "type": "forcePushed"}]}