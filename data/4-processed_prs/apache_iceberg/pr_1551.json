{"pr_number": 1551, "pr_title": "Add TableMetadata.updateSortOrder", "pr_createdAt": "2020-10-06T00:16:23Z", "pr_url": "https://github.com/apache/iceberg/pull/1551", "timeline": [{"oid": "65b971cd7255335d9df70ab56dfd7b3ea0495719", "url": "https://github.com/apache/iceberg/commit/65b971cd7255335d9df70ab56dfd7b3ea0495719", "message": "Add TableMetadata.updateSortOrder.", "committedDate": "2020-10-06T00:09:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1ODY1OA==", "url": "https://github.com/apache/iceberg/pull/1551#discussion_r500658658", "bodyText": "Could this cause a problem if I have a table that goes unsorted -> sorted 1,2,3 -> unsorted -> sorted 4,5,6?  Wouldn't the ids then go 0 -> 1 -> 0 -> 1, where we have two separate sort orders with the id 1?", "author": "danielcweeks", "createdAt": "2020-10-06T23:51:07Z", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -491,6 +491,43 @@ public TableMetadata updatePartitionSpec(PartitionSpec newPartitionSpec) {\n         currentSnapshotId, snapshots, snapshotLog, addPreviousFile(file, lastUpdatedMillis));\n   }\n \n+  public TableMetadata updateSortOrder(SortOrder newOrder) {\n+    SortOrder.checkCompatibility(newOrder, schema);\n+\n+    // determine the next order id\n+    int newOrderId = INITIAL_SORT_ORDER_ID;\n+    for (SortOrder order : sortOrders) {\n+      if (order.sameOrder(newOrder)) {\n+        newOrderId = order.orderId();\n+        break;\n+      } else if (newOrderId <= order.orderId()) {\n+        newOrderId = order.orderId() + 1;", "originalCommit": "65b971cd7255335d9df70ab56dfd7b3ea0495719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MDE1OA==", "url": "https://github.com/apache/iceberg/pull/1551#discussion_r500660158", "bodyText": "I guess if they're only added incrementally with ascending orderIds the last will always be the largest value (e.g. max(orderIds).", "author": "danielcweeks", "createdAt": "2020-10-06T23:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1ODY1OA=="}], "type": "inlineReview"}]}