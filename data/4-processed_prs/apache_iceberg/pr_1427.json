{"pr_number": 1427, "pr_title": "Fix warnings", "pr_createdAt": "2020-09-04T20:46:13Z", "pr_url": "https://github.com/apache/iceberg/pull/1427", "timeline": [{"oid": "6e4929efe64d7bb1ef4d3b75afed2c32e0aa70c9", "url": "https://github.com/apache/iceberg/commit/6e4929efe64d7bb1ef4d3b75afed2c32e0aa70c9", "message": "Fix Short Circut Boolean", "committedDate": "2020-09-04T20:46:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483837850", "bodyText": "Required for the FormatString Annotation", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:48:08Z", "path": "build.gradle", "diffHunk": "@@ -174,6 +174,7 @@ project(':iceberg-bundled-guava') {\n project(':iceberg-api') {\n   dependencies {\n     compile project(path: ':iceberg-bundled-guava', configuration: 'shadow')\n+    compileOnly \"com.google.errorprone:error_prone_annotations:2.3.3\"", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxOTU4NQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483919585", "bodyText": "Was there any discussion to turn on errorprone or spotbug in gradle?\nYour effort here will make it easier to turn it on.", "author": "jzhuge", "createdAt": "2020-09-05T06:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyOTU1NQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483929555", "bodyText": "I think there's still a number of warnings to turn it on. Errorprone is current enforced for certain situations (line length being one notable case), but not all. Though I agree, we should discuss whether or not we want stricter enforcement in place.\nAs an example, I went in and added a number of @override annotations a while back but more have snuck in since then that are missing.", "author": "kbendick", "createdAt": "2020-09-05T08:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1MjA5MQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483952091", "bodyText": "I'm not sure what you mean, the palanrir baseline plugin is turning in both spotbugs and errorprone in Gradle. It just doesn't include the libraries as compile time dependencies for modules since they aren't needed unless you use annotations.\nI do think once we hit 0 warnings we should switch it to test warnings as errors", "author": "RussellSpitzer", "createdAt": "2020-09-05T13:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjUyOA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483982528", "bodyText": "I am not familiar with baseline. I can't find it in tasks. How do you run baseline errorprone or spotbugs?", "author": "jzhuge", "createdAt": "2020-09-05T19:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxNzQzNQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r484017435", "bodyText": "They are applied to all the compileJava tasks in the project. So running any compileJava task will cause error-prone to also be run. So as long as the class file is compiled on your run of \"build\" or classes or any command, it will log warnings and such. There is no separate task to only run error-prone. We have to set another config option if we want to treat warnings as errors.\nFor example if you run the clean testClasses now you will see things like\n/Users/russellspitzer/repos/iceberg/spark/src/main/java/org/apache/iceberg/spark/source/RowDataRewriter.java:92: warning: [ThrowSpecificity] Prefer to declare more specific throws types than Exception and Throwable. When methods are updated to throw new checked exceptions they expect callers to handle failure types explicitly. Throwing broad types defeats the type system. By throwing the most specific types possible we leverage existing compiler functionality to detect unreachable code.\n  private List<DataFile> rewriteDataForTask(CombinedScanTask task) throws Exception {\n\nWhich is an error-prone based warning.\nI was wrong about spot bugs, it is not in the baseline plugin. I misread spotless, which is the formatting tool included in the baseline plugin.", "author": "RussellSpitzer", "createdAt": "2020-09-06T03:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NzIyMA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r484587220", "bodyText": "I'm not sure what you mean, the palanrir baseline plugin is turning in both spotbugs and errorprone in Gradle. It just doesn't include the libraries as compile time dependencies for modules since they aren't needed unless you use annotations.\nI do think once we hit 0 warnings we should switch it to test warnings as errors\n\nYes, it's already turned on. What I was referring to and I assumed (potentially incorrectly) that @jzhuge was referring to when saying turning it \"on\" was to enforce more classes of warnings as errors.\nThanks again for picking up this linting!", "author": "kbendick", "createdAt": "2020-09-07T23:42:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzk1Nw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483837957", "bodyText": "Previous Usage was Broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:48:29Z", "path": "core/src/main/java/org/apache/iceberg/DeleteFileIndex.java", "diffHunk": "@@ -361,7 +361,7 @@ DeleteFileIndex build() {\n                 deleteEntries.add(entry.copy());\n               }\n             } catch (IOException e) {\n-              throw new RuntimeIOException(\"Failed to close\", e);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNzk4NA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483837984", "bodyText": "Previous Usage was Broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:48:36Z", "path": "core/src/main/java/org/apache/iceberg/ManifestFilterManager.java", "diffHunk": "@@ -300,7 +300,7 @@ private ManifestFile filterManifest(StrictMetricsEvaluator metricsEvaluator, Man\n       return filterManifestWithDeletedFiles(metricsEvaluator, manifest, reader);\n \n     } catch (IOException e) {\n-      throw new RuntimeIOException(\"Failed to close manifest: \" + manifest, e);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzODI4Mg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483838282", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:49:28Z", "path": "core/src/main/java/org/apache/iceberg/ManifestFilterManager.java", "diffHunk": "@@ -422,7 +422,7 @@ private ManifestFile filterManifestWithDeletedFiles(\n       return filtered;\n \n     } catch (IOException e) {\n-      throw new RuntimeIOException(\"Failed to close manifest writer\", e);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzODM4Mw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483838383", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:49:46Z", "path": "core/src/main/java/org/apache/iceberg/ManifestMergeManager.java", "diffHunk": "@@ -172,7 +172,7 @@ private ManifestFile createManifest(int specId, List<ManifestFile> bin) {\n             }\n           }\n         } catch (IOException e) {\n-          throw new RuntimeIOException(\"Failed to close manifest reader\", e);\n+          throw new RuntimeIOException(e, \"Failed to close manifest reader\");", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzODQ2NQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483838465", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:49:58Z", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -327,7 +327,7 @@ private ManifestFile newFilesAsManifest() {\n         this.cachedNewManifest = writer.toManifestFile();\n         this.hasNewFiles = false;\n       } catch (IOException e) {\n-        throw new RuntimeIOException(\"Failed to close manifest writer\", e);\n+        throw new RuntimeIOException(e, \"Failed to close manifest writer\");", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzODU5Nw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483838597", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:50:20Z", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -360,7 +360,7 @@ private ManifestFile newDeleteFilesAsManifest() {\n         this.cachedNewDeleteManifest = writer.toManifestFile();\n         this.hasNewDeleteFiles = false;\n       } catch (IOException e) {\n-        throw new RuntimeIOException(\"Failed to close manifest writer\", e);\n+        throw new RuntimeIOException(e, \"Failed to close manifest writer\");", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTY5OQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483839699", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:53:39Z", "path": "core/src/main/java/org/apache/iceberg/util/Exceptions.java", "diffHunk": "@@ -32,7 +32,7 @@ public static void close(Closeable closeable, boolean suppressExceptions) {\n       closeable.close();\n     } catch (IOException e) {\n       if (!suppressExceptions) {\n-        throw new RuntimeIOException(\"Failed calling close\", e);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTc1OA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483839758", "bodyText": "Previous usage was broken", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:53:51Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -277,7 +277,7 @@ public boolean dropNamespace(Namespace namespace) {\n       return true;\n \n     } catch (InvalidOperationException e) {\n-      throw new NamespaceNotEmptyException(\"Namespace \" + namespace + \" is not empty. One or more tables exist.\", e);\n+      throw new NamespaceNotEmptyException(e, \"Namespace %s is not empty. One or more tables exist.\", namespace);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDg1Mg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485164852", "bodyText": "Maybe we should use a factory method that checks whether the last argument is an exception and calls the constructor appropriately. Then we wouldn't have to remember to do this.", "author": "rdblue", "createdAt": "2020-09-08T20:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MjMxNg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485172316", "bodyText": "The new checks will throw a build error if you do it wrong :)", "author": "RussellSpitzer", "createdAt": "2020-09-08T20:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3ODc1Nw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485178757", "bodyText": "Great!", "author": "rdblue", "createdAt": "2020-09-08T20:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MzcwMg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r487463702", "bodyText": "Hooray for compile time safety! My inner scala developer is pleased. \ud83d\ude00", "author": "kbendick", "createdAt": "2020-09-13T00:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDQ0Mw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483840443", "bodyText": "FormatMethod needs all variables to be effectively final. We do a lot of casting here which maybe screws up error-prone's analysis because we don't actually change anything here but ErrorProne still complains. Declaring everything final fixes it.", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:55:54Z", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkExceptionUtil.java", "diffHunk": "@@ -39,7 +40,9 @@ private SparkExceptionUtil() {\n    * @param args format specifiers\n    * @return unchecked exception.\n    */\n-  public static RuntimeException toUncheckedException(Throwable cause, String message, Object... args) {\n+  @FormatMethod\n+  public static RuntimeException toUncheckedException(final Throwable cause, final String message,", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyOTI3NQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483929275", "bodyText": "You'll find no complaints from me for marking arguments as final.", "author": "kbendick", "createdAt": "2020-09-05T08:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMjI3Mg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r493022272", "bodyText": "Can we format it like this?\npublic static RuntimeException toUncheckedException(final Throwable cause, final String message,\n                                                    final Object... args)\n\nor\npublic static RuntimeException toUncheckedException(\n    final Throwable cause, final String message, final Object... args)\n\nCan we also add a comment clarifying why we need final args? We don't usually do that in the rest of the code.", "author": "aokolnychyi", "createdAt": "2020-09-22T20:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDg4Mw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483840883", "bodyText": "Format Method allows for a compile time check that the format strings being used in String.Format are actually valid given the number of arguments passed to the method. This helps eliminate ignored variables or under-defined strings at compile time.", "author": "RussellSpitzer", "createdAt": "2020-09-04T20:57:10Z", "path": "api/src/main/java/org/apache/iceberg/exceptions/AlreadyExistsException.java", "diffHunk": "@@ -19,14 +19,18 @@\n \n package org.apache.iceberg.exceptions;\n \n+import com.google.errorprone.annotations.FormatMethod;", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MjkzMA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r487462930", "bodyText": "Question: is this something that we should shade (possibly in a follow up PR)? I know that normally we shade thing like guava etc that the user might have on their classpath. Is it reasonable to expect that behavior here?\nI don't think this needs to be addressed in this PR, but something that crossed my mind as I'm re-reviewing this.", "author": "kbendick", "createdAt": "2020-09-13T00:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MzQ3Nw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r487463477", "bodyText": "Oh. Actually upon further inspection I can see that this function bindLiterralOperation is only called once in this class (and in the entire code base currently) and there's a null check prior to calling it. So shouldn't be a concern at the moment \ud83d\udc4d", "author": "kbendick", "createdAt": "2020-09-13T00:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODgzNw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483918837", "bodyText": "Why is this better?", "author": "jzhuge", "createdAt": "2020-09-05T06:41:01Z", "path": "api/src/main/java/org/apache/iceberg/Files.java", "diffHunk": "@@ -76,7 +75,7 @@ public PositionOutputStream create() {\n     public PositionOutputStream createOrOverwrite() {\n       if (file.exists()) {\n         if (!file.delete()) {\n-          throw new RuntimeIOException(\"Failed to delete: \" + file);\n+          throw new RuntimeIOException(\"Failed to delete: %s\", file);", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyODgwNw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483928807", "bodyText": "I believe that this is technically more performant as it does not generate as many additional intermediary strings like the previous version, which generated \"Failed to delete: \", the string for file and then another string for the final result (without using StringBuilder).\nThis case should generate one less string at runtime: the file string and then the templated Failed to delete: $file. The format string would be a compile time template if I'm not mistaken. Additionally, I believe the use of the format string is lazily evaluated (so the string won't be created if the exception is not thrown), but I might be mistaken on that part.\nProbably the best answer / tldr is that it's better because the linting automation enforces it currently and it brings standardization to the code base.", "author": "kbendick", "createdAt": "2020-09-05T08:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1MjQ3Mg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483952472", "bodyText": "Yeah the main reason here is like Kyle said,\nt\nThe linter can't check a non effectively final format string. This is because the linter can't check at compile time whether or not the string is valid.\nThis is a case where we were basically calling format on the result of another format method with the exact same args. So the solution that makes the most sense is just eliminating the unneeded format call.", "author": "RussellSpitzer", "createdAt": "2020-09-05T13:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MzM0MA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483983340", "bodyText": "Thanks for the clarification!\n\nProbably the best answer / tldr is that it's better because the linting automation enforces it currently and it brings standardization to the code base.\n\nMake sense.\nFor rarely travelled code paths, I hope developers do not have to invest too much time tuning performance. Often compiler and GC already do a good enough job.", "author": "jzhuge", "createdAt": "2020-09-05T20:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxNjk4NQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r484016985", "bodyText": "Yeah I mostly made these changes because they register as a compiler error with the FormatString Specification. It doesn't let you do anything that could sneak by an invalid format.", "author": "RussellSpitzer", "createdAt": "2020-09-06T03:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxOTQwOA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483919408", "bodyText": "Since RuntimeIOException is deprecated and you are touching this code, why not replace it?", "author": "jzhuge", "createdAt": "2020-09-05T06:48:57Z", "path": "api/src/main/java/org/apache/iceberg/Files.java", "diffHunk": "@@ -60,9 +60,8 @@ public PositionOutputStream create() {\n \n       if (!file.getParentFile().isDirectory() && !file.getParentFile().mkdirs()) {\n         throw new RuntimeIOException(\n-            String.format(\n                 \"Failed to create the file's directory at %s.\",\n-                file.getParentFile().getAbsolutePath()));\n+                file.getParentFile().getAbsolutePath());", "originalCommit": "2e7d38543ae3b30ad6293aaae3301cb34dce3483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMjU3MA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483932570", "bodyText": "I personally feel that replacing deprecated exceptions is out of scope for this PR. I think it would be cleaner / easier if the deprecated exception was replaced in another PR in one go or just left as is for now. As it stands, the PR is already 71 files changed.", "author": "kbendick", "createdAt": "2020-09-05T09:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxOTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjcxNg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483982716", "bodyText": "Separate PR is good.", "author": "jzhuge", "createdAt": "2020-09-05T19:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxOTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NTc3NA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485165774", "bodyText": "We're also keeping it for a release so that people have a chance to update any code that catches it.", "author": "rdblue", "createdAt": "2020-09-08T20:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxOTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMTAwNw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483931007", "bodyText": "Forgive me if this is a silly question, as I am more of a scala developer traditionally and it's been a long day.\nDoes this change the semantics? Previously it was calling the dataManifests method of each value in the iterable. And I notice later on there's a call to this::isNamespace (so it seems possible to use a method reference to identify a particular instance, though that might be a special case for this). Is the method reference usage here expected to be called in a static fashion (the interface doesn't declare the method as static) or will it be called on each instance of the iterable? I only ask because BaseSnapshot#dataManifests is a potentially side-effecting function.\nBut again, I might just be working too late with too much Scala in the brain, so forgive me if I've just not brushed up on my Java lately. My brain is really trying to insert flatMap and several _ for args here so I could very well just need to brush up on my Java. \ud83d\ude05", "author": "kbendick", "createdAt": "2020-09-05T09:13:41Z", "path": "core/src/main/java/org/apache/iceberg/IncrementalDataTableScan.java", "diffHunk": "@@ -74,7 +74,7 @@ public TableScan appendsAfter(long newFromSnapshotId) {\n     Set<Long> snapshotIds = Sets.newHashSet(Iterables.transform(snapshots, Snapshot::snapshotId));\n     Set<ManifestFile> manifests = FluentIterable\n         .from(snapshots)\n-        .transformAndConcat(s -> s.dataManifests())\n+        .transformAndConcat(Snapshot::dataManifests)", "originalCommit": "6e4929efe64d7bb1ef4d3b75afed2c32e0aa70c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Mzg4Ng==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483953886", "bodyText": "This is confusing. The this::reference is a call to the method within the instance of the host class, not the instance within the stream.\nFor example\nclass Actions {\n void bark( Dog dog) {}\n void barks ( List<Dog> dogs){\n  Dogs.stream.foreach(this::bark); // x -> this.bark(x)\n}\nVs using the class name which applies the method of the stream's instance to itself.\nclass Actions{\n  class Dog {\n    void bark() {}\n  }\n void barks ( List<Dog> dogs){\n   Dogs.stream.foreach(Dog::bark); // Dog x -> x.bark()\n}\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html", "author": "RussellSpitzer", "createdAt": "2020-09-05T14:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4ODUwNA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r484588504", "bodyText": "Thanks @RussellSpitzer! I probably overly convoluted my question by bringing this into it, but your answer succinctly helped me understand / relearn some of the more java-y parts that I might not have used in a bit. As always, greatly appreciate you taking the time to help me (re)learn!", "author": "kbendick", "createdAt": "2020-09-07T23:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMTAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMTMyMw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483931323", "bodyText": "Brilliant. If we're going to consider enabling any more required rules, can something be done to better lint usages of boolean && vs the bit operation? I imagine there's a rule for disallow implicit integer type conversions to boolean or better yet to disallow bitwise operator in an if statement or the like? That could be handled in a separate PR / issue (I'd be happy to look into it if you don't know off the top of your head).", "author": "kbendick", "createdAt": "2020-09-05T09:17:43Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -102,7 +102,7 @@ public Table load(String location) {\n    */\n   private Pair<String, MetadataTableType> parseMetadataType(String location) {\n     int hashIndex = location.lastIndexOf('#');\n-    if (hashIndex != -1 & !location.endsWith(\"#\")) {\n+    if (hashIndex != -1 && !location.endsWith(\"#\")) {", "originalCommit": "6e4929efe64d7bb1ef4d3b75afed2c32e0aa70c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1MjcxNQ==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r483952715", "bodyText": "These are just some of the rules that were included by default when we upgraded the errorprone version when we upgraded the palanrir baseline plugin. I haven't looked at the full list but check baseline.gradlendor ones we have turned off explicitly", "author": "RussellSpitzer", "createdAt": "2020-09-05T13:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTE0Mw==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485761143", "bodyText": "Was this meant to be id or ID?", "author": "fbocse", "createdAt": "2020-09-09T16:39:50Z", "path": "api/src/main/java/org/apache/iceberg/HistoryEntry.java", "diffHunk": "@@ -29,12 +29,12 @@\n  */\n public interface HistoryEntry extends Serializable {\n   /**\n-   * @return the timestamp in milliseconds of the change\n+   * Returns the timestamp in milliseconds of the change.\n    */\n   long timestampMillis();\n \n   /**\n-   * @return ID of the new current snapshot\n+   * Returns iD of the new current snapshot.", "originalCommit": "6e4929efe64d7bb1ef4d3b75afed2c32e0aa70c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NjQ3MA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r485766470", "bodyText": "Ah sorry, I used auto fix for most of this so it probably imagined it was fixing the style. I'll fix that", "author": "RussellSpitzer", "createdAt": "2020-09-09T16:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MzMxNg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r487463316", "bodyText": "So looking at the definition of the literal() function in this class, it seems it's possible for it to return null.\nI guess it's not a concern as we would get NPE on the above call at line 136 when trying to call .to if literal() returned null before even getting to this part that calls literal().value(), but something I thought I'd bring up. Perhaps something we might follow up on in another issue or possibly I just missed the workflow that makes literal()'s result non-null by the time this bindLiteralOperration is called.", "author": "kbendick", "createdAt": "2020-09-13T00:26:58Z", "path": "api/src/main/java/org/apache/iceberg/expressions/UnboundPredicate.java", "diffHunk": "@@ -136,9 +136,8 @@ private Expression bindLiteralOperation(BoundTerm<T> boundTerm) {\n     Literal<T> lit = literal().to(boundTerm.type());\n \n     if (lit == null) {\n-      throw new ValidationException(String.format(\n-          \"Invalid value for conversion to type %s: %s (%s)\",\n-          boundTerm.type(), literal().value(), literal().value().getClass().getName()));\n+      throw new ValidationException(\"Invalid value for conversion to type %s: %s (%s)\",\n+          boundTerm.type(), literal().value(), literal().value().getClass().getName());", "originalCommit": "3383f997148a06d7783d3fe79bb77f48199b40b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "315de0d0efa561cecb7d5eefdd6ea8098096ee91", "url": "https://github.com/apache/iceberg/commit/315de0d0efa561cecb7d5eefdd6ea8098096ee91", "message": "Fix more Javadoc Issues added after rebase", "committedDate": "2020-09-16T16:56:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzIzNg==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r493013236", "bodyText": "nit: . at the end?", "author": "aokolnychyi", "createdAt": "2020-09-22T20:28:03Z", "path": "api/src/main/java/org/apache/iceberg/PartitionSpec.java", "diffHunk": "@@ -101,6 +101,8 @@ int lastAssignedFieldId() {\n   }\n \n   /**\n+   * Returns the {@link PartitionField field} that partitions the given source field", "originalCommit": "315de0d0efa561cecb7d5eefdd6ea8098096ee91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzYxMA==", "url": "https://github.com/apache/iceberg/pull/1427#discussion_r493013610", "bodyText": "Actually, there are quite a few of them. Never mind.", "author": "aokolnychyi", "createdAt": "2020-09-22T20:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzIzNg=="}], "type": "inlineReview"}, {"oid": "28797cf7a516e16aa1ff526a6be7051c5427ae42", "url": "https://github.com/apache/iceberg/commit/28797cf7a516e16aa1ff526a6be7051c5427ae42", "message": "Fix all of the Javadoc Summary Missing Warnings", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "420bb13ac6ab82ec9d15d858174c036bc43cab15", "url": "https://github.com/apache/iceberg/commit/420bb13ac6ab82ec9d15d858174c036bc43cab15", "message": "Remove check for FinalClass\n\nThis warns on all classes that have only private constructors but\ndo not declare themselves final. This doesn't provide a lot of\nbenefit to iceberg so the check is disabled.", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "3cde46048a62323ba0c301a0df1d523f28f17888", "url": "https://github.com/apache/iceberg/commit/3cde46048a62323ba0c301a0df1d523f28f17888", "message": "Fix misnamed variable in javadoc", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "4cb41cd2784cc8671190b349b21a2035e76c909f", "url": "https://github.com/apache/iceberg/commit/4cb41cd2784cc8671190b349b21a2035e76c909f", "message": "Fixes Various String Formatting Issues\n\nImplements Error-prones FormatMethod compile time exception checking. This\ndiscovered several errors in our usage of String.Format and methods which\nmimic it's behavior.", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "611b90640d3f6de7b760c8fa74aaed56043ead95", "url": "https://github.com/apache/iceberg/commit/611b90640d3f6de7b760c8fa74aaed56043ead95", "message": "Replace Uncessary Lambdas", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "bfa070756a02fecb1f0e647e13d8d041e06dc9b9", "url": "https://github.com/apache/iceberg/commit/bfa070756a02fecb1f0e647e13d8d041e06dc9b9", "message": "Use Collection.forEach instead of Collection.stream.foreach", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "a1b1ca98651f610573cdfa57f4f01455a2c6d3cf", "url": "https://github.com/apache/iceberg/commit/a1b1ca98651f610573cdfa57f4f01455a2c6d3cf", "message": "Fix Short Circut Boolean", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "7b7c10ace232f772506ec6b978c63eb437fbfab7", "url": "https://github.com/apache/iceberg/commit/7b7c10ace232f772506ec6b978c63eb437fbfab7", "message": "Fix Capitilization of iD in HistoryEntry", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "d4f8f63bb9106474b4d29171ebc4df4c38d9c555", "url": "https://github.com/apache/iceberg/commit/d4f8f63bb9106474b4d29171ebc4df4c38d9c555", "message": "Fix After Rebase", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "d18a63a7a7f2a29e17f21938bd1fe5f0393e744e", "url": "https://github.com/apache/iceberg/commit/d18a63a7a7f2a29e17f21938bd1fe5f0393e744e", "message": "Ignore RawTypes", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "aeceddf5aac9db797a5c842d6131741fe19c4817", "url": "https://github.com/apache/iceberg/commit/aeceddf5aac9db797a5c842d6131741fe19c4817", "message": "Fix more Javadoc Issues added after rebase", "committedDate": "2020-09-22T20:53:53Z", "type": "commit"}, {"oid": "b095cb7785e8ee1ee05a6673205a80f328ca282c", "url": "https://github.com/apache/iceberg/commit/b095cb7785e8ee1ee05a6673205a80f328ca282c", "message": "Rebase and fix a few additional JavaDoc Errors", "committedDate": "2020-09-22T21:25:58Z", "type": "commit"}, {"oid": "b095cb7785e8ee1ee05a6673205a80f328ca282c", "url": "https://github.com/apache/iceberg/commit/b095cb7785e8ee1ee05a6673205a80f328ca282c", "message": "Rebase and fix a few additional JavaDoc Errors", "committedDate": "2020-09-22T21:25:58Z", "type": "forcePushed"}]}