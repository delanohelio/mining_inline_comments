{"pr_number": 1909, "pr_title": "Add ExceptionUtil.runSafely", "pr_createdAt": "2020-12-11T02:04:02Z", "pr_url": "https://github.com/apache/iceberg/pull/1909", "timeline": [{"oid": "5737b974015c7aa9882aadbb0a8e4e552e156064", "url": "https://github.com/apache/iceberg/commit/5737b974015c7aa9882aadbb0a8e4e552e156064", "message": "Add ExceptionUtil.runSafely.", "committedDate": "2020-12-11T02:04:24Z", "type": "commit"}, {"oid": "5737b974015c7aa9882aadbb0a8e4e552e156064", "url": "https://github.com/apache/iceberg/commit/5737b974015c7aa9882aadbb0a8e4e552e156064", "message": "Add ExceptionUtil.runSafely.", "committedDate": "2020-12-11T02:04:24Z", "type": "forcePushed"}, {"oid": "76d6a5f657eeb098dd39b6d97a22f90f40b9b4f9", "url": "https://github.com/apache/iceberg/commit/76d6a5f657eeb098dd39b6d97a22f90f40b9b4f9", "message": "Catch Exception rather than Throwable.", "committedDate": "2020-12-11T02:08:31Z", "type": "commit"}, {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9", "url": "https://github.com/apache/iceberg/commit/972b24600c9ee6dbbba4acf5330b1800110caeb9", "message": "Fix checkstyle.", "committedDate": "2020-12-11T17:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2OTYxOQ==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r544769619", "bodyText": "Other than the copy-paste error in this assert failure message and L62, change LGTM!", "author": "yyanyy", "createdAt": "2020-12-17T02:42:56Z", "path": "core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestExceptionUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestExceptionUtil.class);\n+\n+  private static class CustomCheckedException extends Exception {\n+    private CustomCheckedException(String message) {\n+      super(message);\n+    }\n+  }\n+\n+  @Test\n+  public void testRunSafely() {\n+    CustomCheckedException exc = new CustomCheckedException(\"test\");\n+    try {\n+      ExceptionUtil.runSafely(() -> {\n+            throw exc;\n+          }, e -> {\n+            throw new Exception(\"test catch suppression\");\n+          }, () -> {\n+            throw new RuntimeException(\"test finally suppression\");\n+          }, CustomCheckedException.class\n+      );\n+\n+      Assert.fail(\"Should have thrown CustomCheckedException\");\n+\n+    } catch (CustomCheckedException e) {\n+      LOG.info(\"Final exception\", e);\n+      Assert.assertEquals(\"Should throw correct exception instance\", exc, e);\n+      Assert.assertEquals(\"Should not alter exception message\", \"test\", e.getMessage());\n+      Assert.assertEquals(\"Should have 2 suppressed exceptions\", 2, e.getSuppressed().length);\n+\n+      Throwable throwSuppressed = e.getSuppressed()[0];\n+      Assert.assertTrue(\"Should be a CustomCheckedException\", throwSuppressed instanceof Exception);", "originalCommit": "972b24600c9ee6dbbba4acf5330b1800110caeb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMTIxNw==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545301217", "bodyText": "Fixed", "author": "rdblue", "createdAt": "2020-12-17T18:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2OTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyNDU3MQ==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545124571", "bodyText": "How do we get here? Is this just for safety? From what I can tell we only allow the block to have called exceptions for e1 -> e3, and all that's left should be RuntimeExceptions right?", "author": "RussellSpitzer", "createdAt": "2020-12-17T14:19:13Z", "path": "core/src/main/java/org/apache/iceberg/util/ExceptionUtil.java", "diffHunk": "@@ -36,4 +40,96 @@ private ExceptionUtil() {\n     }\n     throw new RuntimeException(exception);\n   }\n+\n+  interface Block<R, E1 extends Exception, E2 extends Exception, E3 extends Exception> {\n+    R run() throws E1, E2, E3;\n+  }\n+\n+  interface CatchBlock {\n+    void run(Throwable failure) throws Exception;\n+  }\n+\n+  interface FinallyBlock {\n+    void run() throws Exception;\n+  }\n+\n+  public static <R> R runSafely(\n+      Block<R, RuntimeException, RuntimeException, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock) {\n+    return runSafely(block, catchBlock, finallyBlock,\n+        RuntimeException.class, RuntimeException.class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception> R runSafely(\n+      Block<R, E1, RuntimeException, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class) throws E1 {\n+    return runSafely(block, catchBlock, finallyBlock, e1Class, RuntimeException.class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception, E2 extends Exception> R runSafely(\n+      Block<R, E1, E2, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class,\n+      Class<? extends E2> e2Class) throws E1, E2 {\n+    return runSafely(block, catchBlock, finallyBlock, e1Class, e2Class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception, E2 extends Exception, E3 extends Exception> R runSafely(\n+      Block<R, E1, E2, E3> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class,\n+      Class<? extends E2> e2Class,\n+      Class<? extends E3> e3Class) throws E1, E2, E3 {\n+    Exception failure = null;\n+    try {\n+      return block.run();\n+\n+    } catch (Exception t) {\n+      failure = t;\n+\n+      if (catchBlock != null) {\n+        try {\n+          catchBlock.run(failure);\n+        } catch (Exception e) {\n+          LOG.warn(\"Suppressing failure in catch block\", e);\n+          failure.addSuppressed(e);\n+        }\n+      }\n+\n+      tryThrowAs(failure, e1Class);\n+      tryThrowAs(failure, e2Class);\n+      tryThrowAs(failure, e3Class);\n+      tryThrowAs(failure, RuntimeException.class);\n+      throw new RuntimeException(\"Unknown throwable\", failure);", "originalCommit": "972b24600c9ee6dbbba4acf5330b1800110caeb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjM5Mw==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545312393", "bodyText": "Originally, this block caught Throwable, but I changed it to Exception thinking that we should not catch Error and run the catch block. In that case, this line was just for safety.\nBut I've changed it back to Throwable after looking at this comment. I thought more about it and this block does need to run if Error is thrown instead of Exception. If Error is thrown but not caught here, then the finally block will run without the failure set and would throw any exception from that block instead of suppressing it.\nI think if we want to do no work when Error is thrown, then this should specifically check for Error, but I think that it is correct to run everything on Error because that's the superclass of things like AssertionError. If an assert fails, we still want to run everything like normal.", "author": "rdblue", "createdAt": "2020-12-17T18:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyNDU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzMTg3NA==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545131874", "bodyText": "I may be a bit paranoid, but I'd like to have a test which uses three exception types. Also a case for just testing runtime exceptions in each block.\nOther than that I think this is a good utility! Thanks for working on it", "author": "RussellSpitzer", "createdAt": "2020-12-17T14:28:48Z", "path": "core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestExceptionUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestExceptionUtil.class);\n+\n+  private static class CustomCheckedException extends Exception {\n+    private CustomCheckedException(String message) {\n+      super(message);\n+    }\n+  }\n+\n+  @Test\n+  public void testRunSafely() {", "originalCommit": "972b24600c9ee6dbbba4acf5330b1800110caeb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTQyNw==", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545309427", "bodyText": "Done", "author": "rdblue", "createdAt": "2020-12-17T18:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzMTg3NA=="}], "type": "inlineReview"}, {"oid": "2696cdfb32e9ae36dbbb341bc196eabfeeccf07f", "url": "https://github.com/apache/iceberg/commit/2696cdfb32e9ae36dbbb341bc196eabfeeccf07f", "message": "Add more test cases.", "committedDate": "2020-12-17T18:28:46Z", "type": "commit"}, {"oid": "fe6fd4ae148a880385f7751ef7ee6e95c6c7b6a9", "url": "https://github.com/apache/iceberg/commit/fe6fd4ae148a880385f7751ef7ee6e95c6c7b6a9", "message": "Fix lambdas for Java 11.", "committedDate": "2020-12-17T19:01:49Z", "type": "commit"}]}