{"pr_number": 1232, "pr_title": "Flink: Using RowData to avro reader and writer", "pr_createdAt": "2020-07-23T04:00:05Z", "pr_url": "https://github.com/apache/iceberg/pull/1232", "timeline": [{"oid": "bf08cf2fb4b5f590eda8210c15767b1cda28f5cc", "url": "https://github.com/apache/iceberg/commit/bf08cf2fb4b5f590eda8210c15767b1cda28f5cc", "message": "Rebase", "committedDate": "2020-07-28T07:18:14Z", "type": "forcePushed"}, {"oid": "50d3b8881f3330775510e1131830071480e9a710", "url": "https://github.com/apache/iceberg/commit/50d3b8881f3330775510e1131830071480e9a710", "message": "Flink: Using RowData to avro reader and writer", "committedDate": "2020-07-28T08:11:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3Nzg2Nw==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r461977867", "bodyText": "I think this PR needs to be rebased now that #1235 is in, right?", "author": "rdblue", "createdAt": "2020-07-29T01:02:18Z", "path": "core/src/main/java/org/apache/iceberg/avro/AvroWithPartnerByStructureVisitor.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.avro;\n+\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.avro.Schema;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+\n+/**\n+ * A abstract avro schema visitor with partner type. The visitor rely on the structure matching exactly and are\n+ * guaranteed that because both schemas are derived from the same Iceberg schema.\n+ *\n+ * @param <P> Partner type.\n+ * @param <T> Return T.\n+ */\n+public abstract class AvroWithPartnerByStructureVisitor<P, T> {", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3ODk3MA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r461978970", "bodyText": "Nit: indentation is off.", "author": "rdblue", "createdAt": "2020-07-29T01:06:39Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueReaders.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.avro.ValueReader;\n+import org.apache.iceberg.avro.ValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+\n+public class FlinkValueReaders {\n+\n+  private FlinkValueReaders() {}\n+\n+  static ValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static ValueReader<StringData> enums(List<String> symbols) {\n+    return new EnumReader(symbols);\n+  }\n+\n+  static ValueReader<byte[]> uuids() {\n+    return ValueReaders.fixed(16);\n+  }\n+\n+  static ValueReader<Integer> timeMicros() {\n+    return TimeMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMills() {\n+    return TimestampMillsReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMicros() {\n+    return TimestampMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<DecimalData> decimal(ValueReader<byte[]> unscaledReader, int precision, int scale) {\n+    return new DecimalReader(unscaledReader, precision, scale);\n+  }\n+\n+  static ValueReader<ArrayData> array(ValueReader<?> elementReader) {\n+    return new ArrayReader(elementReader);\n+  }\n+\n+  static ValueReader<MapData> arrayMap(ValueReader<?> keyReader,\n+                                                 ValueReader<?> valueReader) {", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDExNQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r461980115", "bodyText": "Time zones are left to the processing engine. It is up to the engine to convert times to concrete values for storage and from concrete values for display. Iceberg's responsibility is to return the value without modification.", "author": "rdblue", "createdAt": "2020-07-29T01:11:01Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueReaders.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.avro.ValueReader;\n+import org.apache.iceberg.avro.ValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+\n+public class FlinkValueReaders {\n+\n+  private FlinkValueReaders() {}\n+\n+  static ValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static ValueReader<StringData> enums(List<String> symbols) {\n+    return new EnumReader(symbols);\n+  }\n+\n+  static ValueReader<byte[]> uuids() {\n+    return ValueReaders.fixed(16);\n+  }\n+\n+  static ValueReader<Integer> timeMicros() {\n+    return TimeMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMills() {\n+    return TimestampMillsReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMicros() {\n+    return TimestampMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<DecimalData> decimal(ValueReader<byte[]> unscaledReader, int precision, int scale) {\n+    return new DecimalReader(unscaledReader, precision, scale);\n+  }\n+\n+  static ValueReader<ArrayData> array(ValueReader<?> elementReader) {\n+    return new ArrayReader(elementReader);\n+  }\n+\n+  static ValueReader<MapData> arrayMap(ValueReader<?> keyReader,\n+                                                 ValueReader<?> valueReader) {\n+    return new ArrayMapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<MapData> map(ValueReader<?> keyReader, ValueReader<?> valueReader) {\n+    return new MapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<RowData> struct(List<ValueReader<?>> readers, Types.StructType struct,\n+                                         Map<Integer, ?> idToConstant) {\n+    return new StructReader(readers, struct, idToConstant);\n+  }\n+\n+  private static class StringReader implements ValueReader<StringData> {\n+    private static final StringReader INSTANCE = new StringReader();\n+\n+    private StringReader() {\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object reuse) throws IOException {\n+      // use the decoder's readString(Utf8) method because it may be a resolving decoder\n+      Utf8 utf8 = null;\n+      if (reuse instanceof StringData) {\n+        utf8 = new Utf8(((StringData) reuse).toBytes());\n+      }\n+\n+      Utf8 string = decoder.readString(utf8);\n+      return StringData.fromBytes(string.getBytes(), 0, string.getByteLength());\n+    }\n+  }\n+\n+  private static class EnumReader implements ValueReader<StringData> {\n+    private final StringData[] symbols;\n+\n+    private EnumReader(List<String> symbols) {\n+      this.symbols = new StringData[symbols.size()];\n+      for (int i = 0; i < this.symbols.length; i += 1) {\n+        this.symbols[i] = StringData.fromBytes(symbols.get(i).getBytes(StandardCharsets.UTF_8));\n+      }\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object ignore) throws IOException {\n+      int index = decoder.readEnum();\n+      return symbols[index];\n+    }\n+  }\n+\n+  private static class DecimalReader implements ValueReader<DecimalData> {\n+    private final ValueReader<byte[]> bytesReader;\n+    private final int precision;\n+    private final int scale;\n+\n+    private DecimalReader(ValueReader<byte[]> bytesReader, int precision, int scale) {\n+      this.bytesReader = bytesReader;\n+      this.precision = precision;\n+      this.scale = scale;\n+    }\n+\n+    @Override\n+    public DecimalData read(Decoder decoder, Object reuse) throws IOException {\n+      byte[] bytes = bytesReader.read(decoder, null);\n+      return DecimalData.fromBigDecimal(new BigDecimal(new BigInteger(bytes), scale), precision, scale);\n+    }\n+  }\n+\n+  private static class TimeMicrosReader implements ValueReader<Integer> {\n+    private static final TimeMicrosReader INSTANCE = new TimeMicrosReader();\n+\n+    @Override\n+    public Integer read(Decoder decoder, Object reuse) throws IOException {\n+      long micros = decoder.readLong();\n+      // Flink only support time mills, just erase micros.\n+      return (int) (micros / 1000);\n+    }\n+  }\n+\n+  private static class TimestampMillsReader implements ValueReader<TimestampData> {\n+    private static final TimestampMillsReader INSTANCE = new TimestampMillsReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      // TODO Do we need to consider time zones.\n+      return TimestampData.fromEpochMillis(decoder.readLong());\n+    }\n+  }\n+\n+  private static class TimestampMicrosReader implements ValueReader<TimestampData> {\n+    private static final TimestampMicrosReader INSTANCE = new TimestampMicrosReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      // TODO Do we need to consider time zones.", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDY2NQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r461980665", "bodyText": "Can we move this logic into a common DecimalUtil method? I think we have quite a few copies of it.", "author": "rdblue", "createdAt": "2020-07-29T01:13:10Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueWriters.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import org.apache.avro.io.Encoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.iceberg.avro.ValueWriter;\n+import org.apache.iceberg.avro.ValueWriters;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.types.TypeUtil;\n+\n+public class FlinkValueWriters {\n+\n+  private FlinkValueWriters() {}\n+\n+  static ValueWriter<StringData> strings() {\n+    return StringWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<byte[]> uuids() {\n+    return ValueWriters.fixed(16);\n+  }\n+\n+  static ValueWriter<Integer> timeMicros() {\n+    return TimeMicrosWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<TimestampData> timestampMicros() {\n+    return TimestampMicrosWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<DecimalData> decimal(int precision, int scale) {\n+    return new DecimalWriter(precision, scale);\n+  }\n+\n+  static <T> ValueWriter<ArrayData> array(ValueWriter<T> elementWriter, LogicalType elementType) {\n+    return new ArrayWriter<>(elementWriter, elementType);\n+  }\n+\n+  static <K, V> ValueWriter<MapData> arrayMap(\n+      ValueWriter<K> keyWriter, LogicalType keyType, ValueWriter<V> valueWriter, LogicalType valueType) {\n+    return new ArrayMapWriter<>(keyWriter, keyType, valueWriter, valueType);\n+  }\n+\n+  static <K, V> ValueWriter<MapData> map(\n+      ValueWriter<K> keyWriter, LogicalType keyType, ValueWriter<V> valueWriter, LogicalType valueType) {\n+    return new MapWriter<>(keyWriter, keyType, valueWriter, valueType);\n+  }\n+\n+  static ValueWriter<RowData> row(List<ValueWriter<?>> writers, List<LogicalType> types) {\n+    return new RowWriter(writers, types);\n+  }\n+\n+  private static class StringWriter implements ValueWriter<StringData> {\n+    private static final StringWriter INSTANCE = new StringWriter();\n+\n+    private StringWriter() {\n+    }\n+\n+    @Override\n+    public void write(StringData s, Encoder encoder) throws IOException {\n+      // toBytes is cheaper than Avro calling toString, which incurs encoding costs\n+      encoder.writeString(new Utf8(s.toBytes()));\n+    }\n+  }\n+\n+  private static class DecimalWriter implements ValueWriter<DecimalData> {\n+    private final int precision;\n+    private final int scale;\n+    private final int length;\n+    private final ThreadLocal<byte[]> bytes;\n+\n+    private DecimalWriter(int precision, int scale) {\n+      this.precision = precision;\n+      this.scale = scale;\n+      this.length = TypeUtil.decimalRequiredBytes(precision);\n+      this.bytes = ThreadLocal.withInitial(() -> new byte[length]);\n+    }\n+\n+    @Override\n+    public void write(DecimalData d, Encoder encoder) throws IOException {\n+      Preconditions.checkArgument(d.scale() == scale,\n+          \"Cannot write value as decimal(%s,%s), wrong scale: %s\", precision, scale, d);\n+      Preconditions.checkArgument(d.precision() <= precision,\n+          \"Cannot write value as decimal(%s,%s), too large: %s\", precision, scale, d);\n+\n+      BigDecimal decimal = d.toBigDecimal();\n+\n+      byte fillByte = (byte) (decimal.signum() < 0 ? 0xFF : 0x00);", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMTI2NQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r462011265", "bodyText": "Created #1265 for this.", "author": "JingsongLi", "createdAt": "2020-07-29T03:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5Nzg2OQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r461997869", "bodyText": "I see you will generate the List<Record> firstly, then write to the file appender, and finally read them into List<RowData>,   could we just use the RandomData#generateRowData  to produce those RowData ?", "author": "openinx", "createdAt": "2020-07-29T02:17:05Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -22,52 +22,76 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.Iterator;\n-import org.apache.flink.types.Row;\n+import java.util.List;\n+import org.apache.flink.table.data.RowData;\n import org.apache.iceberg.Files;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.DataTest;\n+import org.apache.iceberg.data.RandomGenericData;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n \n-import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+public class TestFlinkAvroReaderWriter extends DataTest {\n \n-public class TestFlinkAvroReaderWriter {\n-  private static final int NUM_RECORDS = 20_000;\n+  private static final int NUM_RECORDS = 100;\n \n-  @Rule\n-  public TemporaryFolder temp = new TemporaryFolder();\n+  @Override\n+  protected void writeAndValidate(Schema schema) throws IOException {\n+    List<RowData> inputs = generateDataFromAvroFile(schema);", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDE0MA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r462014140", "bodyText": "First, RandomData now is incorrect, like array, like timestamp with zone, and etc..\nSecond, using Iceberg avro writer can test format compatible better.", "author": "JingsongLi", "createdAt": "2020-07-29T03:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5Nzg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTE1Mg==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r462001152", "bodyText": "Here  we may need to call converter.open(RandomData.class.getClassLoader()) to initialize the converter ?", "author": "openinx", "createdAt": "2020-07-29T02:29:57Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/RandomData.java", "diffHunk": "@@ -88,6 +93,34 @@ public Row next() {\n     };\n   }\n \n+  private static Iterable<RowData> generateRowData(Schema schema, int numRecords,\n+      Supplier<RandomRowGenerator> supplier) {\n+    DataStructureConverter<Object, Object> converter =\n+        DataStructureConverters.getConverter(TypeConversions.fromLogicalToDataType(FlinkSchemaUtil.convert(schema)));", "originalCommit": "50d3b8881f3330775510e1131830071480e9a710", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMjU3Ng==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r462012576", "bodyText": "Yes, we can, only StructuredObjectConverter implements open, but now, Flink not support structure type. (It is not RowType).\nI'll revert this method in RandomData, it is not be used.", "author": "JingsongLi", "createdAt": "2020-07-29T03:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTE1Mg=="}], "type": "inlineReview"}, {"oid": "995f94fba174b72340e4d69a7c905cd11a231e75", "url": "https://github.com/apache/iceberg/commit/995f94fba174b72340e4d69a7c905cd11a231e75", "message": "Abstract DecimalUtil", "committedDate": "2020-07-29T02:42:35Z", "type": "forcePushed"}, {"oid": "8792a28a1eb5aefee2a4bbc3a74c0948cc4a75db", "url": "https://github.com/apache/iceberg/commit/8792a28a1eb5aefee2a4bbc3a74c0948cc4a75db", "message": "Flink: Using RowData to avro reader and writer", "committedDate": "2020-07-29T03:20:41Z", "type": "forcePushed"}, {"oid": "977a2ce5a416f62d26dec7a2de4b210c340c3728", "url": "https://github.com/apache/iceberg/commit/977a2ce5a416f62d26dec7a2de4b210c340c3728", "message": "Flink: Using RowData to avro reader and writer", "committedDate": "2020-08-03T01:50:42Z", "type": "forcePushed"}, {"oid": "b80c767a5312e0a3ae59e86783e2d5708d53cb18", "url": "https://github.com/apache/iceberg/commit/b80c767a5312e0a3ae59e86783e2d5708d53cb18", "message": "Flink: Using RowData to avro reader and writer", "committedDate": "2020-08-03T05:49:30Z", "type": "commit"}, {"oid": "5b634afd337e603ddbe0d554ea6024cf0132282b", "url": "https://github.com/apache/iceberg/commit/5b634afd337e603ddbe0d554ea6024cf0132282b", "message": "Remove avro test in TestTaskWriters", "committedDate": "2020-08-03T05:49:36Z", "type": "commit"}, {"oid": "5b634afd337e603ddbe0d554ea6024cf0132282b", "url": "https://github.com/apache/iceberg/commit/5b634afd337e603ddbe0d554ea6024cf0132282b", "message": "Remove avro test in TestTaskWriters", "committedDate": "2020-08-03T05:49:36Z", "type": "forcePushed"}, {"oid": "dad83fcbea5253ce11eb23caa8f6f04f5fcd8c36", "url": "https://github.com/apache/iceberg/commit/dad83fcbea5253ce11eb23caa8f6f04f5fcd8c36", "message": "Remove new HashMap", "committedDate": "2020-08-04T06:13:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzNDY3OA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r464934678", "bodyText": "nit: this should not work,  because the FlinkAvroWriter is a writer with RowData parameter type,  while we need a Row type FileAppender.   we may could remove this avro write building.  Once the RowDataWrapper is ready,  we would rewrite this part.", "author": "openinx", "createdAt": "2020-08-04T09:50:37Z", "path": "flink/src/main/java/org/apache/iceberg/flink/TaskWriterFactory.java", "diffHunk": "@@ -103,7 +103,7 @@ protected PartitionKey partition(Row row) {\n \n           case AVRO:\n             return Avro.write(outputFile)\n-                .createWriterFunc(FlinkAvroWriter::new)\n+                .createWriterFunc(ignore -> new FlinkAvroWriter(FlinkSchemaUtil.convert(schema)))", "originalCommit": "dad83fcbea5253ce11eb23caa8f6f04f5fcd8c36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2MzUyMg==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465463522", "bodyText": "Removed this and add comment:\nTODO add AVRO once the RowDataWrapper are ready.", "author": "JingsongLi", "createdAt": "2020-08-05T04:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzNDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTM0OA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r464959348", "bodyText": "Here it's simple to use floorDiv and floorMod :\nlong mills = Math.floorDiv(micros, 1000);\nint nanos = Math.floorMod(micros, 1000)*1000;", "author": "openinx", "createdAt": "2020-08-04T10:39:22Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueReaders.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.avro.ValueReader;\n+import org.apache.iceberg.avro.ValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.types.Types;\n+\n+public class FlinkValueReaders {\n+\n+  private FlinkValueReaders() {}\n+\n+  static ValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static ValueReader<StringData> enums(List<String> symbols) {\n+    return new EnumReader(symbols);\n+  }\n+\n+  static ValueReader<byte[]> uuids() {\n+    return ValueReaders.fixed(16);\n+  }\n+\n+  static ValueReader<Integer> timeMicros() {\n+    return TimeMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMills() {\n+    return TimestampMillsReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMicros() {\n+    return TimestampMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<DecimalData> decimal(ValueReader<byte[]> unscaledReader, int precision, int scale) {\n+    return new DecimalReader(unscaledReader, precision, scale);\n+  }\n+\n+  static ValueReader<ArrayData> array(ValueReader<?> elementReader) {\n+    return new ArrayReader(elementReader);\n+  }\n+\n+  static ValueReader<MapData> arrayMap(ValueReader<?> keyReader,\n+                                       ValueReader<?> valueReader) {\n+    return new ArrayMapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<MapData> map(ValueReader<?> keyReader, ValueReader<?> valueReader) {\n+    return new MapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<RowData> struct(List<ValueReader<?>> readers, Types.StructType struct,\n+                                     Map<Integer, ?> idToConstant) {\n+    return new StructReader(readers, struct, idToConstant);\n+  }\n+\n+  private static class StringReader implements ValueReader<StringData> {\n+    private static final StringReader INSTANCE = new StringReader();\n+\n+    private StringReader() {\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object reuse) throws IOException {\n+      // use the decoder's readString(Utf8) method because it may be a resolving decoder\n+      Utf8 utf8 = null;\n+      if (reuse instanceof StringData) {\n+        utf8 = new Utf8(((StringData) reuse).toBytes());\n+      }\n+\n+      Utf8 string = decoder.readString(utf8);\n+      return StringData.fromBytes(string.getBytes(), 0, string.getByteLength());\n+    }\n+  }\n+\n+  private static class EnumReader implements ValueReader<StringData> {\n+    private final StringData[] symbols;\n+\n+    private EnumReader(List<String> symbols) {\n+      this.symbols = new StringData[symbols.size()];\n+      for (int i = 0; i < this.symbols.length; i += 1) {\n+        this.symbols[i] = StringData.fromBytes(symbols.get(i).getBytes(StandardCharsets.UTF_8));\n+      }\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object ignore) throws IOException {\n+      int index = decoder.readEnum();\n+      return symbols[index];\n+    }\n+  }\n+\n+  private static class DecimalReader implements ValueReader<DecimalData> {\n+    private final ValueReader<byte[]> bytesReader;\n+    private final int precision;\n+    private final int scale;\n+\n+    private DecimalReader(ValueReader<byte[]> bytesReader, int precision, int scale) {\n+      this.bytesReader = bytesReader;\n+      this.precision = precision;\n+      this.scale = scale;\n+    }\n+\n+    @Override\n+    public DecimalData read(Decoder decoder, Object reuse) throws IOException {\n+      byte[] bytes = bytesReader.read(decoder, null);\n+      return DecimalData.fromBigDecimal(new BigDecimal(new BigInteger(bytes), scale), precision, scale);\n+    }\n+  }\n+\n+  private static class TimeMicrosReader implements ValueReader<Integer> {\n+    private static final TimeMicrosReader INSTANCE = new TimeMicrosReader();\n+\n+    @Override\n+    public Integer read(Decoder decoder, Object reuse) throws IOException {\n+      long micros = decoder.readLong();\n+      // Flink only support time mills, just erase micros.\n+      return (int) (micros / 1000);\n+    }\n+  }\n+\n+  private static class TimestampMillsReader implements ValueReader<TimestampData> {\n+    private static final TimestampMillsReader INSTANCE = new TimestampMillsReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      return TimestampData.fromEpochMillis(decoder.readLong());\n+    }\n+  }\n+\n+  private static class TimestampMicrosReader implements ValueReader<TimestampData> {\n+    private static final TimestampMicrosReader INSTANCE = new TimestampMicrosReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      long micros = decoder.readLong();\n+      long mills = micros / 1000;\n+      int nanos = ((int) (micros % 1000)) * 1000;\n+      if (nanos < 0) {\n+        nanos += 1_000_000;\n+        mills -= 1;\n+      }", "originalCommit": "dad83fcbea5253ce11eb23caa8f6f04f5fcd8c36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2ODAwNA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465468004", "bodyText": "I wrote a simple benchmark, Math.floor** will be 10% slower.", "author": "JingsongLi", "createdAt": "2020-08-05T04:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MjAwMg==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465982002", "bodyText": "@openinx, that might influence fixing the timestamp types in ORC!", "author": "rdblue", "createdAt": "2020-08-05T20:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTk4OA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r464959988", "bodyText": "No need to be protected.", "author": "openinx", "createdAt": "2020-08-04T10:40:38Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueReaders.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.avro.ValueReader;\n+import org.apache.iceberg.avro.ValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.types.Types;\n+\n+public class FlinkValueReaders {\n+\n+  private FlinkValueReaders() {}\n+\n+  static ValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static ValueReader<StringData> enums(List<String> symbols) {\n+    return new EnumReader(symbols);\n+  }\n+\n+  static ValueReader<byte[]> uuids() {\n+    return ValueReaders.fixed(16);\n+  }\n+\n+  static ValueReader<Integer> timeMicros() {\n+    return TimeMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMills() {\n+    return TimestampMillsReader.INSTANCE;\n+  }\n+\n+  static ValueReader<TimestampData> timestampMicros() {\n+    return TimestampMicrosReader.INSTANCE;\n+  }\n+\n+  static ValueReader<DecimalData> decimal(ValueReader<byte[]> unscaledReader, int precision, int scale) {\n+    return new DecimalReader(unscaledReader, precision, scale);\n+  }\n+\n+  static ValueReader<ArrayData> array(ValueReader<?> elementReader) {\n+    return new ArrayReader(elementReader);\n+  }\n+\n+  static ValueReader<MapData> arrayMap(ValueReader<?> keyReader,\n+                                       ValueReader<?> valueReader) {\n+    return new ArrayMapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<MapData> map(ValueReader<?> keyReader, ValueReader<?> valueReader) {\n+    return new MapReader(keyReader, valueReader);\n+  }\n+\n+  static ValueReader<RowData> struct(List<ValueReader<?>> readers, Types.StructType struct,\n+                                     Map<Integer, ?> idToConstant) {\n+    return new StructReader(readers, struct, idToConstant);\n+  }\n+\n+  private static class StringReader implements ValueReader<StringData> {\n+    private static final StringReader INSTANCE = new StringReader();\n+\n+    private StringReader() {\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object reuse) throws IOException {\n+      // use the decoder's readString(Utf8) method because it may be a resolving decoder\n+      Utf8 utf8 = null;\n+      if (reuse instanceof StringData) {\n+        utf8 = new Utf8(((StringData) reuse).toBytes());\n+      }\n+\n+      Utf8 string = decoder.readString(utf8);\n+      return StringData.fromBytes(string.getBytes(), 0, string.getByteLength());\n+    }\n+  }\n+\n+  private static class EnumReader implements ValueReader<StringData> {\n+    private final StringData[] symbols;\n+\n+    private EnumReader(List<String> symbols) {\n+      this.symbols = new StringData[symbols.size()];\n+      for (int i = 0; i < this.symbols.length; i += 1) {\n+        this.symbols[i] = StringData.fromBytes(symbols.get(i).getBytes(StandardCharsets.UTF_8));\n+      }\n+    }\n+\n+    @Override\n+    public StringData read(Decoder decoder, Object ignore) throws IOException {\n+      int index = decoder.readEnum();\n+      return symbols[index];\n+    }\n+  }\n+\n+  private static class DecimalReader implements ValueReader<DecimalData> {\n+    private final ValueReader<byte[]> bytesReader;\n+    private final int precision;\n+    private final int scale;\n+\n+    private DecimalReader(ValueReader<byte[]> bytesReader, int precision, int scale) {\n+      this.bytesReader = bytesReader;\n+      this.precision = precision;\n+      this.scale = scale;\n+    }\n+\n+    @Override\n+    public DecimalData read(Decoder decoder, Object reuse) throws IOException {\n+      byte[] bytes = bytesReader.read(decoder, null);\n+      return DecimalData.fromBigDecimal(new BigDecimal(new BigInteger(bytes), scale), precision, scale);\n+    }\n+  }\n+\n+  private static class TimeMicrosReader implements ValueReader<Integer> {\n+    private static final TimeMicrosReader INSTANCE = new TimeMicrosReader();\n+\n+    @Override\n+    public Integer read(Decoder decoder, Object reuse) throws IOException {\n+      long micros = decoder.readLong();\n+      // Flink only support time mills, just erase micros.\n+      return (int) (micros / 1000);\n+    }\n+  }\n+\n+  private static class TimestampMillsReader implements ValueReader<TimestampData> {\n+    private static final TimestampMillsReader INSTANCE = new TimestampMillsReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      return TimestampData.fromEpochMillis(decoder.readLong());\n+    }\n+  }\n+\n+  private static class TimestampMicrosReader implements ValueReader<TimestampData> {\n+    private static final TimestampMicrosReader INSTANCE = new TimestampMicrosReader();\n+\n+    @Override\n+    public TimestampData read(Decoder decoder, Object reuse) throws IOException {\n+      long micros = decoder.readLong();\n+      long mills = micros / 1000;\n+      int nanos = ((int) (micros % 1000)) * 1000;\n+      if (nanos < 0) {\n+        nanos += 1_000_000;\n+        mills -= 1;\n+      }\n+      return TimestampData.fromEpochMillis(mills, nanos);\n+    }\n+  }\n+\n+  private static class ArrayReader implements ValueReader<ArrayData> {\n+    private final ValueReader<?> elementReader;\n+    private final List<Object> reusedList = Lists.newArrayList();\n+\n+    private ArrayReader(ValueReader<?> elementReader) {\n+      this.elementReader = elementReader;\n+    }\n+\n+    @Override\n+    public GenericArrayData read(Decoder decoder, Object reuse) throws IOException {\n+      reusedList.clear();\n+      long chunkLength = decoder.readArrayStart();\n+\n+      while (chunkLength > 0) {\n+        for (int i = 0; i < chunkLength; i += 1) {\n+          reusedList.add(elementReader.read(decoder, null));\n+        }\n+\n+        chunkLength = decoder.arrayNext();\n+      }\n+\n+      // this will convert the list to an array so it is okay to reuse the list\n+      return new GenericArrayData(reusedList.toArray());\n+    }\n+  }\n+\n+  private static MapData kvArrayToMap(List<Object> keyList, List<Object> valueList) {\n+    Map<Object, Object> map = Maps.newHashMap();\n+    Object[] keys = keyList.toArray();\n+    Object[] values = valueList.toArray();\n+    for (int i = 0; i < keys.length; i++) {\n+      map.put(keys[i], values[i]);\n+    }\n+\n+    return new GenericMapData(map);\n+  }\n+\n+  private static class ArrayMapReader implements ValueReader<MapData> {\n+    private final ValueReader<?> keyReader;\n+    private final ValueReader<?> valueReader;\n+\n+    private final List<Object> reusedKeyList = Lists.newArrayList();\n+    private final List<Object> reusedValueList = Lists.newArrayList();\n+\n+    private ArrayMapReader(ValueReader<?> keyReader, ValueReader<?> valueReader) {\n+      this.keyReader = keyReader;\n+      this.valueReader = valueReader;\n+    }\n+\n+    @Override\n+    public MapData read(Decoder decoder, Object reuse) throws IOException {\n+      reusedKeyList.clear();\n+      reusedValueList.clear();\n+\n+      long chunkLength = decoder.readArrayStart();\n+\n+      while (chunkLength > 0) {\n+        for (int i = 0; i < chunkLength; i += 1) {\n+          reusedKeyList.add(keyReader.read(decoder, null));\n+          reusedValueList.add(valueReader.read(decoder, null));\n+        }\n+\n+        chunkLength = decoder.arrayNext();\n+      }\n+\n+      return kvArrayToMap(reusedKeyList, reusedValueList);\n+    }\n+  }\n+\n+  private static class MapReader implements ValueReader<MapData> {\n+    private final ValueReader<?> keyReader;\n+    private final ValueReader<?> valueReader;\n+\n+    private final List<Object> reusedKeyList = Lists.newArrayList();\n+    private final List<Object> reusedValueList = Lists.newArrayList();\n+\n+    private MapReader(ValueReader<?> keyReader, ValueReader<?> valueReader) {\n+      this.keyReader = keyReader;\n+      this.valueReader = valueReader;\n+    }\n+\n+    @Override\n+    public MapData read(Decoder decoder, Object reuse) throws IOException {\n+      reusedKeyList.clear();\n+      reusedValueList.clear();\n+\n+      long chunkLength = decoder.readMapStart();\n+\n+      while (chunkLength > 0) {\n+        for (int i = 0; i < chunkLength; i += 1) {\n+          reusedKeyList.add(keyReader.read(decoder, null));\n+          reusedValueList.add(valueReader.read(decoder, null));\n+        }\n+\n+        chunkLength = decoder.mapNext();\n+      }\n+\n+      return kvArrayToMap(reusedKeyList, reusedValueList);\n+    }\n+  }\n+\n+  static class StructReader extends ValueReaders.StructReader<RowData> {\n+    private final int numFields;\n+\n+    protected StructReader(List<ValueReader<?>> readers, Types.StructType struct, Map<Integer, ?> idToConstant) {", "originalCommit": "dad83fcbea5253ce11eb23caa8f6f04f5fcd8c36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a86efd9f48c0e630c8a5767d127a5aa0f02a309d", "url": "https://github.com/apache/iceberg/commit/a86efd9f48c0e630c8a5767d127a5aa0f02a309d", "message": "Address comments", "committedDate": "2020-08-05T05:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3NzgyNA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465977824", "bodyText": "Does this need to be public? The only reference to FlinkTypeVisitor that I see in this PR is here, so I'm not sure why this is needed.", "author": "rdblue", "createdAt": "2020-08-05T20:15:16Z", "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkTypeVisitor.java", "diffHunk": "@@ -30,7 +30,7 @@\n import org.apache.flink.table.types.logical.YearMonthIntervalType;\n import org.apache.flink.table.types.logical.ZonedTimestampType;\n \n-abstract class FlinkTypeVisitor<T> implements LogicalTypeVisitor<T> {\n+public abstract class FlinkTypeVisitor<T> implements LogicalTypeVisitor<T> {", "originalCommit": "a86efd9f48c0e630c8a5767d127a5aa0f02a309d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwODY3NQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r466108675", "bodyText": "No need, I used to think the reading and writing will rely on FlinkTypeVisitor.", "author": "JingsongLi", "createdAt": "2020-08-06T02:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3NzgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4OTUxNQ==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465989515", "bodyText": "Eventually, we should refactor this into a base class for array data, so that the encoder parts are shared between Flink and Spark. Not something we should do right now, though.", "author": "rdblue", "createdAt": "2020-08-05T20:38:13Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueWriters.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Array;\n+import java.util.List;\n+import org.apache.avro.io.Encoder;\n+import org.apache.avro.util.Utf8;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.iceberg.avro.ValueWriter;\n+import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.util.DecimalUtil;\n+\n+public class FlinkValueWriters {\n+\n+  private FlinkValueWriters() {}\n+\n+  static ValueWriter<StringData> strings() {\n+    return StringWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<Integer> timeMicros() {\n+    return TimeMicrosWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<TimestampData> timestampMicros() {\n+    return TimestampMicrosWriter.INSTANCE;\n+  }\n+\n+  static ValueWriter<DecimalData> decimal(int precision, int scale) {\n+    return new DecimalWriter(precision, scale);\n+  }\n+\n+  static <T> ValueWriter<ArrayData> array(ValueWriter<T> elementWriter, LogicalType elementType) {\n+    return new ArrayWriter<>(elementWriter, elementType);\n+  }\n+\n+  static <K, V> ValueWriter<MapData> arrayMap(ValueWriter<K> keyWriter, LogicalType keyType,\n+                                              ValueWriter<V> valueWriter, LogicalType valueType) {\n+    return new ArrayMapWriter<>(keyWriter, keyType, valueWriter, valueType);\n+  }\n+\n+  static <K, V> ValueWriter<MapData> map(ValueWriter<K> keyWriter, LogicalType keyType,\n+                                         ValueWriter<V> valueWriter, LogicalType valueType) {\n+    return new MapWriter<>(keyWriter, keyType, valueWriter, valueType);\n+  }\n+\n+  static ValueWriter<RowData> row(List<ValueWriter<?>> writers, List<LogicalType> types) {\n+    return new RowWriter(writers, types);\n+  }\n+\n+  private static class StringWriter implements ValueWriter<StringData> {\n+    private static final StringWriter INSTANCE = new StringWriter();\n+\n+    private StringWriter() {\n+    }\n+\n+    @Override\n+    public void write(StringData s, Encoder encoder) throws IOException {\n+      // toBytes is cheaper than Avro calling toString, which incurs encoding costs\n+      encoder.writeString(new Utf8(s.toBytes()));\n+    }\n+  }\n+\n+  private static class DecimalWriter implements ValueWriter<DecimalData> {\n+    private final int precision;\n+    private final int scale;\n+    private final ThreadLocal<byte[]> bytes;\n+\n+    private DecimalWriter(int precision, int scale) {\n+      this.precision = precision;\n+      this.scale = scale;\n+      this.bytes = ThreadLocal.withInitial(() -> new byte[TypeUtil.decimalRequiredBytes(precision)]);\n+    }\n+\n+    @Override\n+    public void write(DecimalData d, Encoder encoder) throws IOException {\n+      encoder.writeFixed(DecimalUtil.toReusedFixLengthBytes(precision, scale, d.toBigDecimal(), bytes.get()));\n+    }\n+  }\n+\n+  private static class TimeMicrosWriter implements ValueWriter<Integer> {\n+    private static final TimeMicrosWriter INSTANCE = new TimeMicrosWriter();\n+\n+    @Override\n+    public void write(Integer timeMills, Encoder encoder) throws IOException {\n+      encoder.writeLong(timeMills * 1000);\n+    }\n+  }\n+\n+  private static class TimestampMicrosWriter implements ValueWriter<TimestampData> {\n+    private static final TimestampMicrosWriter INSTANCE = new TimestampMicrosWriter();\n+\n+    @Override\n+    public void write(TimestampData timestampData, Encoder encoder) throws IOException {\n+      long micros = timestampData.getMillisecond() * 1000 + timestampData.getNanoOfMillisecond() / 1000;\n+      encoder.writeLong(micros);\n+    }\n+  }\n+\n+  private static class ArrayWriter<T> implements ValueWriter<ArrayData> {", "originalCommit": "a86efd9f48c0e630c8a5767d127a5aa0f02a309d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5Mjc4Mw==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r465992783", "bodyText": "I think it would be better to validate Flink RowData against generic Record. That's what we do in Spark tests, where we first write using generics (or Avro in older tests) and then validate that the records we read using the Spark object model are equivalent. By doing that, you not only test that RowData to disk and back to RowData works, but that the records are actually equivalent to another read format.", "author": "rdblue", "createdAt": "2020-08-05T20:44:36Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -22,52 +22,76 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.Iterator;\n-import org.apache.flink.types.Row;\n+import java.util.List;\n+import org.apache.flink.table.data.RowData;\n import org.apache.iceberg.Files;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.DataTest;\n+import org.apache.iceberg.data.RandomGenericData;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n \n-import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+public class TestFlinkAvroReaderWriter extends DataTest {\n \n-public class TestFlinkAvroReaderWriter {\n-  private static final int NUM_RECORDS = 20_000;\n+  private static final int NUM_RECORDS = 100;\n \n-  @Rule\n-  public TemporaryFolder temp = new TemporaryFolder();\n+  @Override\n+  protected void writeAndValidate(Schema schema) throws IOException {\n+    List<RowData> inputs = generateDataFromAvroFile(schema);\n \n-  private void testCorrectness(Schema schema, int numRecords, Iterable<Row> iterable) throws IOException {\n     File testFile = temp.newFile();\n     Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n \n-    try (FileAppender<Row> writer = Avro.write(Files.localOutput(testFile))\n+    try (FileAppender<RowData> writer = Avro.write(Files.localOutput(testFile))\n         .schema(schema)\n-        .createWriterFunc(FlinkAvroWriter::new)\n+        .createWriterFunc(ignore -> new FlinkAvroWriter(FlinkSchemaUtil.convert(schema)))\n         .build()) {\n-      writer.addAll(iterable);\n+      writer.addAll(inputs);\n     }\n \n-    try (CloseableIterable<Row> reader = Avro.read(Files.localInput(testFile))\n+    try (CloseableIterable<RowData> reader = Avro.read(Files.localInput(testFile))\n         .project(schema)\n         .createReaderFunc(FlinkAvroReader::new)\n         .build()) {\n-      Iterator<Row> expected = iterable.iterator();\n-      Iterator<Row> rows = reader.iterator();\n-      for (int i = 0; i < numRecords; i += 1) {\n+      Iterator<RowData> expected = inputs.iterator();\n+      Iterator<RowData> rows = reader.iterator();\n+      for (int i = 0; i < NUM_RECORDS; i += 1) {\n         Assert.assertTrue(\"Should have expected number of rows\", rows.hasNext());\n         Assert.assertEquals(expected.next(), rows.next());\n       }\n       Assert.assertFalse(\"Should not have extra rows\", rows.hasNext());\n     }\n   }\n \n-  @Test\n-  public void testNormalData() throws IOException {\n-    testCorrectness(COMPLEX_SCHEMA, NUM_RECORDS, RandomData.generate(COMPLEX_SCHEMA, NUM_RECORDS, 19982));\n+  private List<RowData> generateDataFromAvroFile(Schema schema) throws IOException {", "originalCommit": "a86efd9f48c0e630c8a5767d127a5aa0f02a309d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwODEwMA==", "url": "https://github.com/apache/iceberg/pull/1232#discussion_r466108100", "bodyText": "You are right, we should have a asserter for RowData and Record.", "author": "JingsongLi", "createdAt": "2020-08-06T02:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5Mjc4Mw=="}], "type": "inlineReview"}]}