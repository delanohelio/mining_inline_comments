{"pr_number": 2266, "pr_title": " [CALCITE-4402] SqlCall#equalsDeep does not take into account the function quantifier", "pr_createdAt": "2020-11-17T04:38:22Z", "pr_url": "https://github.com/apache/calcite/pull/2266", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1Njk1MQ==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525056951", "bodyText": "Please factor this to a method with two expression arguments.\nThe method should be like assertThat(\"{\" + expr1 + \"}.equalsDeep({\" + expr2 + \"})\", parseExpression(expr1).equals(parseExpression(expr2)), is(..))", "author": "vlsi", "createdAt": "2020-11-17T10:45:11Z", "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+/**\n+ * Unit test for fix [CALCITE-4402] The equalsDeep returns wrong result.\n+ */\n+class SqlEqualsDeepTest {\n+\n+  @Test void testCountEqualsDeep() throws SqlParseException {\n+\n+    SqlNode countExpression = parseExpression(\"count(a)\");\n+    SqlNode countDistinctExpression = parseExpression(\"count(distinct a)\");\n+\n+    assertThat(\"count(a) doesn't equals count(a)\",\n+        countExpression.equalsDeep(parseExpression(\"count(a)\"), Litmus.IGNORE));", "originalCommit": "124c059a299d35a84647746a404faee32e9b73ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc2NA==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525092764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean actual = sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE);\n          \n          \n            \n                String reason = expr0 + \" equals \" + expr1;\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(expected, actual, reason);\n          \n          \n            \n                assertEquals(expected, sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE), () -> expr0 + \" equalsDeep \" + expr1);", "author": "vlsi", "createdAt": "2020-11-17T11:46:00Z", "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Unit test for fix [CALCITE-4402] equalsDeep.\n+ */\n+class SqlEqualsDeepTest {\n+\n+  @Test void testCountEqualsDeep() throws SqlParseException {\n+    assertEqualsDeep(\"count(a)\", \"count(a)\", true);\n+    assertEqualsDeep(\"count(distinct a)\", \"count(distinct a)\", true);\n+    assertEqualsDeep(\"count(distinct a)\", \"count(a)\", false);\n+  }\n+\n+  private void assertEqualsDeep(String expr0, String expr1, boolean expected)\n+      throws SqlParseException {\n+\n+    SqlNode sqlNode0 = parseExpression(expr0);\n+    SqlNode sqlNode1 = parseExpression(expr1);\n+    boolean actual = sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE);\n+    String reason = expr0 + \" equals \" + expr1;\n+\n+    assertEquals(expected, actual, reason);", "originalCommit": "1f91bb15fd22372c7adf4deeff1e04da3c70e9d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NDU5Mw==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525274593", "bodyText": "Thanks", "author": "hqx871", "createdAt": "2020-11-17T15:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMjkwNg==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525112906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return litmus.fail(\"{} != {}\", this, node);\n          \n          \n            \n                  return litmus.fail(\"{} != {} (functionQualifier differs)\", this, node);", "author": "vlsi", "createdAt": "2020-11-17T12:22:02Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -146,6 +146,9 @@ public int operandCount() {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n     SqlCall that = (SqlCall) node;\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {}\", this, node);", "originalCommit": "2e516cf445e1d4010f49606fe9aa65f509a9ae6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzU5NQ==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525907595", "bodyText": "minor: message says \"functionQualifier\", and I guess it should be \"function quantifier\".\nAlso, personally I would prefer to add this new check after the operator's name check (i.e. reach the verification of function quantifier only in those cases where operator names' match).", "author": "rubenada", "createdAt": "2020-11-18T08:45:26Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -146,6 +146,9 @@ public int operandCount() {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n     SqlCall that = (SqlCall) node;\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {} (functionQualifier differs)\", this, node);", "originalCommit": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDMwMg==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525910302", "bodyText": "minor: usually javadoc for test cases related to a certain Jira follow the following format:\n  /** Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4402\">[CALCITE-4402]\n   * SqlCall#equalsDeep does not take into account the function quantifier</a>. */", "author": "rubenada", "createdAt": "2020-11-18T08:49:52Z", "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**", "originalCommit": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyNjcyNA==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525926724", "bodyText": "Thanks", "author": "hqx871", "createdAt": "2020-11-18T09:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NjEwNA==", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525986104", "bodyText": "Sorry, the message still uses an incorrect term :\n\"function qualifier differs\"\nit should be\n\"function quantifier differs\"\nAlso, please add you name between parenthesis at the end of the commit message, as per https://calcite.apache.org/develop/#contributing \"If you are not a committer, add your name in parentheses at the end of the message\"", "author": "rubenada", "createdAt": "2020-11-18T10:43:17Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -153,6 +153,9 @@ public int operandCount() {\n     if (!this.getOperator().getName().equalsIgnoreCase(that.getOperator().getName())) {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {} (function qualifier differs)\", this, node);", "originalCommit": "123337e62ec60fdcdf7b43fb90491501ea100ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db1d99a4a821899f0533187fea3430bd575d142d", "url": "https://github.com/apache/calcite/commit/db1d99a4a821899f0533187fea3430bd575d142d", "message": "[CALCITE-4402] SqlCall#equalsDeep does not take into account the function quantifier (Huang Qixiang)", "committedDate": "2020-11-18T10:56:21Z", "type": "commit"}]}