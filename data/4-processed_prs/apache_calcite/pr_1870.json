{"pr_number": 1870, "pr_title": "[CALCITE-3846]  EnumerableMergeJoin: wrong comparison of composite key with null values", "pr_createdAt": "2020-03-24T14:52:24Z", "pr_url": "https://github.com/apache/calcite/pull/1870", "timeline": [{"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679", "url": "https://github.com/apache/calcite/commit/04a460fc3661f30e6cdbed14908f1fc44cdb4679", "message": "[CALCITE-3846] EnumerableMergeJoin: wrong comparison of composite key with null values", "committedDate": "2020-03-26T08:21:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDQxOA==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399000418", "bodyText": "I just noticed another PR on array's initial capacity:)", "author": "DonnyZone", "createdAt": "2020-03-27T02:27:10Z", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java", "diffHunk": "@@ -164,6 +165,17 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         leftResult.physType.project(joinInfo.leftKeys, JavaRowFormat.LIST);\n     final PhysType rightKeyPhysType =\n         rightResult.physType.project(joinInfo.rightKeys, JavaRowFormat.LIST);\n+\n+    // Generate the appropriate key Comparator (keys must be sorted in ascending order, nulls last).\n+    final List<RelFieldCollation> fieldCollations = new ArrayList<>();", "originalCommit": "04a460fc3661f30e6cdbed14908f1fc44cdb4679", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNjM1NA==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399106354", "bodyText": "done", "author": "rubenada", "createdAt": "2020-03-27T08:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399010788", "bodyText": "Should we put the comment on the top?", "author": "chunweilei", "createdAt": "2020-03-27T03:07:07Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "originalCommit": "04a460fc3661f30e6cdbed14908f1fc44cdb4679", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzA2NQ==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399107065", "bodyText": "I have added a javadoc @param comment for comparator in mergeJoin method", "author": "rubenada", "createdAt": "2020-03-27T08:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExODQ0MA==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399118440", "bodyText": "AFAIK, according to the calcite code convention, the comment is always on the top.", "author": "chunweilei", "createdAt": "2020-03-27T08:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNDE1OQ==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399124159", "bodyText": "sorry, I misunderstood you, I will change it", "author": "rubenada", "createdAt": "2020-03-27T09:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNjk0OQ==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399126949", "bodyText": "changed.", "author": "rubenada", "createdAt": "2020-03-27T09:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMTEyNw==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399011127", "bodyText": "The comment seems a little confusing. Why is it important?", "author": "chunweilei", "createdAt": "2020-03-27T03:08:39Z", "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableJoinTest.java", "diffHunk": "@@ -220,6 +220,44 @@\n             + \"empid=150; name=Sebastian; dept_name=Sales; e_deptno=10; d_deptno=10\");\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3846\">[CALCITE-3846]\n+   * EnumerableMergeJoin: wrong comparison of composite key with null values</a>. */\n+  @Test public void testMergeJoinWithCompositeKeyAndNullValues() {\n+    tester(false, new JdbcTest.HrSchema())\n+        .query(\"?\")\n+        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n+          planner.addRule(EnumerableRules.ENUMERABLE_MERGE_JOIN_RULE);\n+          planner.removeRule(EnumerableRules.ENUMERABLE_JOIN_RULE);\n+        })\n+        .withRel(builder -> builder\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .join(JoinRelType.INNER,\n+                builder.and(\n+                    builder.equals(\n+                        builder.field(2, 0, \"deptno\"),\n+                        builder.field(2, 1, \"deptno\")),\n+                    builder.equals(\n+                        builder.field(2, 0, \"commission\"),\n+                        builder.field(2, 1, \"commission\"))))\n+            .project(\n+                builder.field(\"empid\"))\n+            .build())\n+        .explainHookMatches(\"\" // It is important that we have MergeJoin in the plan\n+            + \"EnumerableCalc(expr#0..4=[{inputs}], empid=[$t0])\\n\"", "originalCommit": "04a460fc3661f30e6cdbed14908f1fc44cdb4679", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDg3OQ==", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399094879", "bodyText": "If the join is not implemented via MergeJoin (but e.g. via HashJoin), then we would not see the bug, but just because a different algorithm was used.", "author": "rubenada", "createdAt": "2020-03-27T08:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMTEyNw=="}], "type": "inlineReview"}, {"oid": "9c2d4dff31bb589e8fb5175f4ffb066c9e97ab8c", "url": "https://github.com/apache/calcite/commit/9c2d4dff31bb589e8fb5175f4ffb066c9e97ab8c", "message": "[CALCITE-3846] EnumerableMergeJoin: wrong comparison of composite key with null values", "committedDate": "2020-03-27T08:35:11Z", "type": "forcePushed"}, {"oid": "8e3c745b7c1503aa47f1e96d95956f706257921f", "url": "https://github.com/apache/calcite/commit/8e3c745b7c1503aa47f1e96d95956f706257921f", "message": "[CALCITE-3846] EnumerableMergeJoin: wrong comparison of composite key with null values", "committedDate": "2020-03-27T09:13:51Z", "type": "commit"}, {"oid": "8e3c745b7c1503aa47f1e96d95956f706257921f", "url": "https://github.com/apache/calcite/commit/8e3c745b7c1503aa47f1e96d95956f706257921f", "message": "[CALCITE-3846] EnumerableMergeJoin: wrong comparison of composite key with null values", "committedDate": "2020-03-27T09:13:51Z", "type": "forcePushed"}]}