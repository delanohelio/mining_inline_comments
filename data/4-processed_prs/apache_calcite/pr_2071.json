{"pr_number": 2071, "pr_title": "[CALCITE-4127] Remove final from AbstractRelNode#getRelTypeName", "pr_createdAt": "2020-07-17T08:01:45Z", "pr_url": "https://github.com/apache/calcite/pull/2071", "timeline": [{"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660", "url": "https://github.com/apache/calcite/commit/2a672aac6359ceac4be8b473a2c925aa1ebcf660", "message": "[CALCITE-4127] Remove final from AbstractRelNode#getRelTypeName", "committedDate": "2020-07-17T08:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA==", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456285940", "bodyText": "It would be cool if we can also describe a little what the original purpose of this method too ~", "author": "danny0405", "createdAt": "2020-07-17T08:05:23Z", "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.\n+  public String getRelTypeName() {", "originalCommit": "2a672aac6359ceac4be8b473a2c925aa1ebcf660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Nzc3NQ==", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456297775", "bodyText": "I think there is a very complete description in the javadoc of the interface RelNode; we could copy-paste it in here, but I think it would be redundant and less simple to maintain.", "author": "rubenada", "createdAt": "2020-07-17T08:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODkxNQ==", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456308915", "bodyText": "The original document is not suitable now because it describes the default behavior, one can override it to a different one.", "author": "danny0405", "createdAt": "2020-07-17T08:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNTM2MA==", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456315360", "bodyText": "The original javadoc is the one from the interface (RelNode), which is a contract, so I think its documentation is still valid. Overridden implementations must respect this contract, but they can implement it in a different way, e.g. returning a String literal with the class name, instead of using the default mechanism of AbstractRelNode based on getClass().getName()", "author": "rubenada", "createdAt": "2020-07-17T09:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2ODA3MQ==", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456468071", "bodyText": "nit: It might be better to 2 lines.", "author": "hsyuan", "createdAt": "2020-07-17T14:12:21Z", "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.", "originalCommit": "2a672aac6359ceac4be8b473a2c925aa1ebcf660", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}