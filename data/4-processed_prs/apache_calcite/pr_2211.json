{"pr_number": 2211, "pr_title": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an ag\u2026", "pr_createdAt": "2020-10-13T19:17:47Z", "pr_url": "https://github.com/apache/calcite/pull/2211", "timeline": [{"oid": "f5e6f94e6ac0fd7db9f4db24aeecaa6eaed0eab0", "url": "https://github.com/apache/calcite/commit/f5e6f94e6ac0fd7db9f4db24aeecaa6eaed0eab0", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate.", "committedDate": "2020-10-13T20:20:23Z", "type": "forcePushed"}, {"oid": "dbd33c1d28369200a8431cefdd82e0e4084e3c0d", "url": "https://github.com/apache/calcite/commit/dbd33c1d28369200a8431cefdd82e0e4084e3c0d", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate.", "committedDate": "2020-10-13T20:38:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NzIwMg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r504987202", "bodyText": "Maybe an empty value rel should be used here instead", "author": "jamesstarr", "createdAt": "2020-10-14T21:38:34Z", "path": "core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java", "diffHunk": "@@ -1072,6 +1074,26 @@ public TrimResult trimFields(\n       ++j;\n     }\n \n+    if (newAggCallList.isEmpty() && newGroupSet.isEmpty()) {", "originalCommit": "dbd33c1d28369200a8431cefdd82e0e4084e3c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTQwNQ==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r506049405", "bodyText": "No. Use RelBuilder.aggregate (and RelBuilder.count()). In future, we can possibly change their behavior in order to optimize. RelFieldTrimmer is the wrong place to optimize.", "author": "julianhyde", "createdAt": "2020-10-16T04:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNzM3NA==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r508007374", "bodyText": "Done.", "author": "a-rafay", "createdAt": "2020-10-19T19:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NzIwMg=="}], "type": "inlineReview"}, {"oid": "8a0180dd1a809dc8fd9571ef92c3a2827d4a361a", "url": "https://github.com/apache/calcite/commit/8a0180dd1a809dc8fd9571ef92c3a2827d4a361a", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate.", "committedDate": "2020-10-19T18:22:35Z", "type": "forcePushed"}, {"oid": "f2e3d70fba97fbcaff6f36c598c6523fbe6ce93d", "url": "https://github.com/apache/calcite/commit/f2e3d70fba97fbcaff6f36c598c6523fbe6ce93d", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate.", "committedDate": "2020-10-19T19:38:25Z", "type": "forcePushed"}, {"oid": "03560c9f9d4d466e68e65760436a5fb4d944983c", "url": "https://github.com/apache/calcite/commit/03560c9f9d4d466e68e65760436a5fb4d944983c", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate (Rafay)", "committedDate": "2020-11-05T09:52:42Z", "type": "forcePushed"}, {"oid": "edf1da7fce1a9153c90543f87c51cc7b4b4393ad", "url": "https://github.com/apache/calcite/commit/edf1da7fce1a9153c90543f87c51cc7b4b4393ad", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate (Rafay)", "committedDate": "2020-11-05T09:55:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r517990227", "bodyText": "Shouldn't this new test be added inside RelFieldTrimmerTest rather than RelOptRulesTest?", "author": "rubenada", "createdAt": "2020-11-05T11:45:54Z", "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -6827,6 +6828,62 @@ protected MyProjectRule(Config config) {\n         .check();\n   }\n \n+  /**\n+   * Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4317\">[CALCITE-4317]\n+   * RelFieldTrimmer after trimming all the fields in an aggregate\n+   * should not return a zero field Aggregate</a>. */\n+  @Test void testProjectJoinTransposeRuleOnAggWithNoFieldsWithTrimmer() {", "originalCommit": "edf1da7fce1a9153c90543f87c51cc7b4b4393ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzMzE2Mg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r518333162", "bodyText": "There were 2 parts to be tested here:\n\nTrimmer handles aggregate node if all the fields have been trimmed.\nProject-Join transpose rule handles the trimmed node properly.\n\nSo i had to add the test in RelOptRulesTest for 2, for which i had to trim the node first, so it covers 1 as well. If you think i should add a separate test for 1 in RelFieldTrimmerTest, that can be done.", "author": "a-rafay", "createdAt": "2020-11-05T20:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxNjI1MQ==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r519716251", "bodyText": "See this, after I applied your patch, the exception is gone, maybe this can be a ut for this case: https://issues.apache.org/jira/projects/CALCITE/issues/CALCITE-4381", "author": "Aaaaaaron", "createdAt": "2020-11-09T10:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNzQ0Mw==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r519817443", "bodyText": "Ok, thanks for the explanation. IMO there is no need to duplicate the test, we can leave it just here.", "author": "rubenada", "createdAt": "2020-11-09T13:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MTY1Mg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r519841652", "bodyText": "Hi, @rubenada I mean that can be test evidence for this patch and this block CALCITE-4381, I hope it can merge as soon as possible.", "author": "Aaaaaaron", "createdAt": "2020-11-09T14:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjQ0NA==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r519842444", "bodyText": "Hi @a-rafay, can you represent this ut by SQL, like CSVTest, it may be more clearer", "author": "Aaaaaaron", "createdAt": "2020-11-09T14:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0ODEyNw==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r519848127", "bodyText": "@Aaaaaaron sorry for the confusion, my previous comment was actually replying  @a-rafay 's last comment\n#2211 (comment)", "author": "rubenada", "createdAt": "2020-11-09T14:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2Mzk4Mg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r520063982", "bodyText": "@Aaaaaaron my test case was slightly different but it seems like similar to CALCITE-4381, i couldn't reproduce the query we had since we do a lot of transformation before getting to that state so i started off with creating a RelNode and applying the rule on that. If this patch fixes CALCITE-4381, then it shouldn't matter what test case we used if the nature of test case is the same.\nYou also asked about the progress of this PR. I am just waiting for this to get reviewed so we can merge this.", "author": "a-rafay", "createdAt": "2020-11-09T19:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1MjQ4MQ==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r526552481", "bodyText": "@a-rafay \"then it shouldn't matter what test case we used if the nature of test case is the same.\" yes, this is what I mean, @rubenada can you help review and merge this PR, I've been met this times, thanks!", "author": "Aaaaaaron", "createdAt": "2020-11-19T02:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4OTk4Ng==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r526689986", "bodyText": "Would it be possible to have the test defined in terms of SQL:\nSELECT name FROM (SELECT count(*) cnt_star, count(empno) cnt_en FROM sales.emp)\ncross join sales.dept limit 10\n\nrather than RelBuilder?", "author": "rubenada", "createdAt": "2020-11-19T08:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMxMDUxMg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r527310512", "bodyText": "Would it be possible to have the test defined in terms of SQL:\nSELECT name FROM (SELECT count(*) cnt_star, count(empno) cnt_en FROM sales.emp)\ncross join sales.dept limit 10\n\nrather than RelBuilder?\n\nI can add a test using the query, but that will only test if we are not getting emtpy Agg after trimming. The second issue was to test if the ProjectJoinTransposeRule will not throw an exception, which we will not be able to test since the resulting RelNode does not match the rule. In our environment, we get the transformed node after applying some rules/transformation which i was unable to come up with straight from the query. Hence i used RelBuilder to start off with the node that will satisfy both parts of the ticket. Non-empty agg node after trimming, and firing ProjectJoinTransposeRule.", "author": "a-rafay", "createdAt": "2020-11-20T00:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMzA4OA==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r527723088", "bodyText": "Ok, thanks for the explanation, I guess the RelBuilder test suffices.", "author": "rubenada", "createdAt": "2020-11-20T14:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MTE2Mg==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r526691162", "bodyText": "I'm not quite sure about adding this new trimRelNode that by default does nothing (hence does not trim the input RelNode).\nAre we sure this is the right place for this method?", "author": "rubenada", "createdAt": "2020-11-19T08:54:45Z", "path": "core/src/test/java/org/apache/calcite/test/SqlToRelTestBase.java", "diffHunk": "@@ -263,6 +263,11 @@ Tester withCatalogReaderFactory(\n \n     /** Returns a tester that uses a given context. */\n     Tester withContext(UnaryOperator<Context> transform);\n+\n+    /** Trims a RelNode. */\n+    default RelNode trimRelNode(RelNode relNode) {\n+      return relNode;", "originalCommit": "edf1da7fce1a9153c90543f87c51cc7b4b4393ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMxNDI1NQ==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r527314255", "bodyText": "I didn't find a method in the Tester to only trim the node. I see convertSqlToRel(..) trims the query if we enable trimming. I copied the code from there and put it together as a separate method because i needed to use the trimming part of that function but not conversion from SQL to Rel.\nIf you think there is a better place to do this, i would be happy to refactor, or if we already have code doing this, i can reuse that.\nI will remove the default behavior of this method, since we only have 1 implementation of Tester at the moment.", "author": "a-rafay", "createdAt": "2020-11-20T00:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MTE2Mg=="}], "type": "inlineReview"}, {"oid": "d329bf0addc977053316a1c67664cac510ddabaa", "url": "https://github.com/apache/calcite/commit/d329bf0addc977053316a1c67664cac510ddabaa", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate (Rafay)", "committedDate": "2020-11-20T00:47:39Z", "type": "commit"}, {"oid": "d329bf0addc977053316a1c67664cac510ddabaa", "url": "https://github.com/apache/calcite/commit/d329bf0addc977053316a1c67664cac510ddabaa", "message": "[CALCITE-4317] RelFieldTrimmer after trimming all the fields in an aggregate should not return a zero field Aggregate (Rafay)", "committedDate": "2020-11-20T00:47:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMxOTUxNQ==", "url": "https://github.com/apache/calcite/pull/2211#discussion_r527319515", "bodyText": "@rubenada Done.", "author": "a-rafay", "createdAt": "2020-11-20T00:49:06Z", "path": "core/src/test/java/org/apache/calcite/test/SqlToRelTestBase.java", "diffHunk": "@@ -263,6 +263,9 @@ Tester withCatalogReaderFactory(\n \n     /** Returns a tester that uses a given context. */\n     Tester withContext(UnaryOperator<Context> transform);\n+\n+    /** Trims a RelNode. */\n+    RelNode trimRelNode(RelNode relNode);", "originalCommit": "d329bf0addc977053316a1c67664cac510ddabaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}