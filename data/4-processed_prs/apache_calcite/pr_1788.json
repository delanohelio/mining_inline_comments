{"pr_number": 1788, "pr_title": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "pr_createdAt": "2020-02-06T13:49:04Z", "pr_url": "https://github.com/apache/calcite/pull/1788", "timeline": [{"oid": "d70152b7412757e70c298d990358354121b7f140", "url": "https://github.com/apache/calcite/commit/d70152b7412757e70c298d990358354121b7f140", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-05T13:11:38Z", "type": "forcePushed"}, {"oid": "936f22a369f4a90b40264181ce0cdc9a35438546", "url": "https://github.com/apache/calcite/commit/936f22a369f4a90b40264181ce0cdc9a35438546", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-06T09:43:28Z", "type": "forcePushed"}, {"oid": "3dd1b99c89a15f1767d3e81b1c99cf596296898d", "url": "https://github.com/apache/calcite/commit/3dd1b99c89a15f1767d3e81b1c99cf596296898d", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-10T09:00:20Z", "type": "forcePushed"}, {"oid": "6f055fd1178cca0c57beaf890550e3f12eb990f9", "url": "https://github.com/apache/calcite/commit/6f055fd1178cca0c57beaf890550e3f12eb990f9", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-10T09:02:16Z", "type": "forcePushed"}, {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "url": "https://github.com/apache/calcite/commit/88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-13T13:31:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392866373", "bodyText": "How is this different from a filter on top of Linq4j.product?\nIf it is not different, then please remove manual for-for.\nIf it is different please add a clarification comment.", "author": "vlsi", "createdAt": "2020-03-16T08:58:15Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3911,9 +3936,33 @@ private boolean advance() {\n         }\n         rights.add(right);\n       }\n-      cartesians = Linq4j.product(\n-          ImmutableList.of(Linq4j.enumerator(lefts),\n-              Linq4j.enumerator(rights)));\n+\n+      if (extraPredicate == null) {\n+        cartesians = Linq4j.product(\n+            ImmutableList.of(Linq4j.enumerator(lefts),\n+                Linq4j.enumerator(rights)));\n+      } else {\n+        // we must verify the non equi-join predicate\n+        final List<List<Object>> results = new ArrayList<>();\n+        for (TSource currentLeft : lefts) {\n+          for (TInner currentRight : rights) {\n+            if (extraPredicate.apply(currentLeft, currentRight)) {\n+              final List<Object> result = new ArrayList<>(2);\n+              result.add(currentLeft);\n+              result.add(currentRight);\n+              results.add(result);\n+            }\n+          }\n+        }\n+        if (results.isEmpty()) {\n+          if (done) {\n+            return false;\n+          }\n+          return advance();\n+        } else {\n+          cartesians = Linq4j.enumerator(results);", "originalCommit": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MTc0Mw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392871743", "bodyText": "At the current state (only INNER join supported), we could have a filter on top of the product. However, we have other join types in the backlog that can / will be supported by EnumerableMergeJoin (SEMI-join, see CALCITE-3833; and ANTI-join, see  CALCITE-3834). For those join types (which do not project the right-hand-side of the join), we cannot use the strategy of applying a filter on top of the product, so I am just preparing the ground here with an homogeneous strategy that can work on other join types.", "author": "rubenada", "createdAt": "2020-03-16T09:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwOTk5OA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392909998", "bodyText": "Implementation-wise it looks the same.\nI see no reason why do you use for-for-if here.", "author": "vlsi", "createdAt": "2020-03-16T10:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNDg3NQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392914875", "bodyText": "The next step will be implementing SEMI join type with Enumerable Merge Join. In order to do so, we would just a need a break inside the if (to avoid 'left' duplicates, which SEMI join must not have). So this algorithm works for INNER join and can be easily adapted for other types, like SEMI.", "author": "rubenada", "createdAt": "2020-03-16T10:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MTU5OQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393051599", "bodyText": "Is it different from the existing org.apache.calcite.linq4j.EnumerableDefaults#semiJoin and #antiJoin methods?\nWhy do you reimplement the same thing?", "author": "vlsi", "createdAt": "2020-03-16T14:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1ODYxMw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393058613", "bodyText": "org.apache.calcite.linq4j.EnumerableDefaults#semiJoin and #antiJoin methods implement hashSemiJoin and hashAntiJoin, they are used by EnumerableHashJoin, the idea is to provide another alternative implementation of semiJoin/antiJoin via MergeJoin algorithm (as they exist for NestedLoopJoin, CorrelateJoin or CorrelateBatchJoin)", "author": "rubenada", "createdAt": "2020-03-16T14:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2ODg4MA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393068880", "bodyText": "Let me rephrase it differently:\n\nYou calculate lefts and rights using merge join algorithm on equal predicates\nThen you have lefts and rights, and there's nothing from merge join left that you can do about it. The rest could be exactly the same as in hash semi-join.\n\nfor-for-if logic performs exactly the same actions as the existing semiJoin and antoJoin methods. Why duplicate code (bugs)?", "author": "vlsi", "createdAt": "2020-03-16T14:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4NTg3Nw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393085877", "bodyText": "Ok, I think I understand your point. We should re-use existing code instead of the for-for-if. However, I don't think hashJoin code is the appropriate module here, since there is no need to create the hash structure to find matching keys (because we already have them with the merge join algorithm). Instead, we should use the nestedLoopJoin(lefts, rights, extraPredicateWithNonEquiClauses) which performs precisely this for-for-if process.", "author": "rubenada", "createdAt": "2020-03-16T14:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5MzE1Nw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393093157", "bodyText": "I don't think hashJoin code is the appropriate module here, since there is no need to create the hash structure to find matching keys\n\nWell, my point is the code seems to duplicate the existing code, so it looks like a bug.\nOf course, the only predicates left are non-equality, so there's nothing to hash.\nHowever, the key point here is to avoid code duplication.", "author": "vlsi", "createdAt": "2020-03-16T15:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNTQ0Nw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393605447", "bodyText": "Refactored to re-use nested loop join", "author": "rubenada", "createdAt": "2020-03-17T11:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392866941", "bodyText": "Please add the relevant documentation that clarifies why this extraPredicate is needed and how it is different from a predicate on top of join results.", "author": "vlsi", "createdAt": "2020-03-16T08:59:21Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -1971,6 +1972,26 @@ private void closeInner() {\n       final Function2<TSource, TInner, TResult> resultSelector,\n       boolean generateNullsOnLeft,\n       boolean generateNullsOnRight) {\n+    return mergeJoin(outer, inner, outerKeySelector, innerKeySelector, null,\n+        resultSelector, generateNullsOnLeft, generateNullsOnRight);\n+  }\n+\n+  /**\n+   * Joins two inputs that are sorted on the key, with an extra predicate for non equi-join\n+   * conditions (in case of equi-join, it will be null).\n+   * Inputs must sorted in ascending order, nulls last.\n+   * NOTE: The current API is experimental and subject to change without notice.\n+   */\n+  @Experimental\n+  public static <TSource, TInner, TKey extends Comparable<TKey>, TResult> Enumerable<TResult>\n+      mergeJoin(final Enumerable<TSource> outer,\n+      final Enumerable<TInner> inner,\n+      final Function1<TSource, TKey> outerKeySelector,\n+      final Function1<TInner, TKey> innerKeySelector,\n+      final Predicate2<TSource, TInner> extraPredicate,", "originalCommit": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTAxMg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392875012", "bodyText": "You're right, I'll document that we use a predicate rather that a filter on top of join results in order to support other join types in the (near) future.", "author": "rubenada", "createdAt": "2020-03-16T09:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNTYxMQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393605611", "bodyText": "documentation updated", "author": "rubenada", "createdAt": "2020-03-17T11:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NTMyNw==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r394265327", "bodyText": "Thanks. However, can you please add @param extraPredicate that would clarify the meaning of extraPredicate in a couple of words?\nThe documentation does not need to clarfy all the implementation details, however, the naming of Predicate2<TSource, TInner> extraPredicate provides absolutely no clue one meaning of the predicate.\nWell, I do see it is a predicate. I can judge that by class name. As a user of that API I want to know what is expected to be passed there. I want to know if nulls are allowed or not and so on.", "author": "vlsi", "createdAt": "2020-03-18T11:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MjE0Mg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r394282142", "bodyText": "javadoc updated: added @param extraPredicate", "author": "rubenada", "createdAt": "2020-03-18T11:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392869470", "bodyText": "I would suggest @API(...)", "author": "vlsi", "createdAt": "2020-03-16T09:04:31Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -1971,6 +1972,26 @@ private void closeInner() {\n       final Function2<TSource, TInner, TResult> resultSelector,\n       boolean generateNullsOnLeft,\n       boolean generateNullsOnRight) {\n+    return mergeJoin(outer, inner, outerKeySelector, innerKeySelector, null,\n+        resultSelector, generateNullsOnLeft, generateNullsOnRight);\n+  }\n+\n+  /**\n+   * Joins two inputs that are sorted on the key, with an extra predicate for non equi-join\n+   * conditions (in case of equi-join, it will be null).\n+   * Inputs must sorted in ascending order, nulls last.\n+   * NOTE: The current API is experimental and subject to change without notice.\n+   */\n+  @Experimental", "originalCommit": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4MTY5NQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392881695", "bodyText": "Ok, I'll change it.", "author": "rubenada", "createdAt": "2020-03-16T09:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMjIzNg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392912236", "bodyText": "Unfortunately, when I try to import org.apiguardian.api.API; and use  @API(since = \"1.23\", status = API.Status.EXPERIMENTAL) in EnumerableDefaults (which belongs to linq4j), I get a compilation error. Is it possible to use that library there? Do I need to change gradle config files to do so?", "author": "rubenada", "createdAt": "2020-03-16T10:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2NTQ3MA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393065470", "bodyText": "It comes from apiguardian, so you need to add the relevant dependency to linq4j: \n  \n    \n      calcite/core/build.gradle.kts\n    \n    \n         Line 44\n      in\n      d234626\n    \n    \n    \n    \n\n        \n          \n           api(\"org.apiguardian:apiguardian-api\")", "author": "vlsi", "createdAt": "2020-03-16T14:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNTUxNg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393605516", "bodyText": "added apiguardian", "author": "rubenada", "createdAt": "2020-03-17T11:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393632630", "bodyText": "What is the purpose of Arrays.asList and .clone() here?", "author": "vlsi", "createdAt": "2020-03-17T12:09:54Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3951,6 +3982,24 @@ public void close() {\n     }\n   }\n \n+  private static class CartesianProductJoinEnumerator<TResult, TOuter, TInner>\n+      extends CartesianProductEnumerator<Object, TResult> {\n+    private final Function2<TOuter, TInner, TResult> resultSelector;\n+\n+    CartesianProductJoinEnumerator(Function2<TOuter, TInner, TResult> resultSelector,\n+                                   Enumerator<Object> outer, Enumerator<Object> inner) {\n+      super(ImmutableList.of(outer, inner));\n+      this.resultSelector = resultSelector;\n+    }\n+\n+    @Override public TResult current() {\n+      final List<Object> list = Arrays.asList(elements.clone());", "originalCommit": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNjQ5OA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393636498", "bodyText": "Transforming elements array into list. Just applying the same approach as Linq4j#CartesianProductListEnumerator", "author": "rubenada", "createdAt": "2020-03-17T12:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzOTQ2OA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393639468", "bodyText": "Note: list never escapes this method, so there's no need to copy it.\nThere's no need to create list as well.", "author": "vlsi", "createdAt": "2020-03-17T12:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDcyMQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393640721", "bodyText": "you're right, I'll change it", "author": "rubenada", "createdAt": "2020-03-17T12:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MjYyMg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393652622", "bodyText": "modified: list no longer generated", "author": "rubenada", "createdAt": "2020-03-17T12:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzYxMQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393633611", "bodyText": "Should it be typed like Enumerator<TOuter>?", "author": "vlsi", "createdAt": "2020-03-17T12:11:48Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3951,6 +3982,24 @@ public void close() {\n     }\n   }\n \n+  private static class CartesianProductJoinEnumerator<TResult, TOuter, TInner>\n+      extends CartesianProductEnumerator<Object, TResult> {\n+    private final Function2<TOuter, TInner, TResult> resultSelector;\n+\n+    CartesianProductJoinEnumerator(Function2<TOuter, TInner, TResult> resultSelector,\n+                                   Enumerator<Object> outer, Enumerator<Object> inner) {", "originalCommit": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNzI5MQ==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393637291", "bodyText": "Not possible if we want to extend CartesianProductEnumerator:\n/**\n * Enumerator over the cartesian product of enumerators.\n * @param <T> Input element type\n * @param <E> Element type\n */\npublic abstract class CartesianProductEnumerator<T, E> implements Enumerator<E> {...}", "author": "rubenada", "createdAt": "2020-03-17T12:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzODkxMA==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393638910", "bodyText": "Well, can you cast when calling the super constructor?", "author": "vlsi", "createdAt": "2020-03-17T12:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MjMwNg==", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393652306", "bodyText": "Modified: cast in constructor", "author": "rubenada", "createdAt": "2020-03-17T12:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzYxMQ=="}], "type": "inlineReview"}, {"oid": "58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "url": "https://github.com/apache/calcite/commit/58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-17T17:25:26Z", "type": "forcePushed"}, {"oid": "9d12d03f0212e94d02da9dae7480b905bffb53c8", "url": "https://github.com/apache/calcite/commit/9d12d03f0212e94d02da9dae7480b905bffb53c8", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-18T11:35:25Z", "type": "commit"}, {"oid": "9d12d03f0212e94d02da9dae7480b905bffb53c8", "url": "https://github.com/apache/calcite/commit/9d12d03f0212e94d02da9dae7480b905bffb53c8", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "committedDate": "2020-03-18T11:35:25Z", "type": "forcePushed"}]}