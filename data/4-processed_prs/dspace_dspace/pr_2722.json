{"pr_number": 2722, "pr_title": "Edit Community/Collection - Assign Roles/Groups", "pr_createdAt": "2020-03-25T11:59:45Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2722", "timeline": [{"oid": "7c15049da11201ea711c3dd792ead29e898309c9", "url": "https://github.com/DSpace/DSpace/commit/7c15049da11201ea711c3dd792ead29e898309c9", "message": "[Task 69349] working implementation adminGroups get, post, delete. Tests unfinished", "committedDate": "2020-03-09T15:43:38Z", "type": "commit"}, {"oid": "b5bfbce1ea49050c827d0d787e14163b0b58e4ca", "url": "https://github.com/DSpace/DSpace/commit/b5bfbce1ea49050c827d0d787e14163b0b58e4ca", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles", "committedDate": "2020-03-10T08:31:44Z", "type": "commit"}, {"oid": "02cb339bb88a03e5ddbae0cb86859cd91f4c02d6", "url": "https://github.com/DSpace/DSpace/commit/02cb339bb88a03e5ddbae0cb86859cd91f4c02d6", "message": "[Task 69349] fixed community and collection tests with new embed parameter instead of full projection", "committedDate": "2020-03-10T10:49:13Z", "type": "commit"}, {"oid": "8f78381ae90740155a57034ae2ce9d86c370b376", "url": "https://github.com/DSpace/DSpace/commit/8f78381ae90740155a57034ae2ce9d86c370b376", "message": "[Task 69349] changed communityAdmin check and added tests", "committedDate": "2020-03-10T13:26:35Z", "type": "commit"}, {"oid": "ff63e6b464e74349f3f5849fc179e140dbf65cc4", "url": "https://github.com/DSpace/DSpace/commit/ff63e6b464e74349f3f5849fc179e140dbf65cc4", "message": "[Task 69684] added javadoc and fixed that dc.title can't be set for AdminGroup", "committedDate": "2020-03-13T13:38:43Z", "type": "commit"}, {"oid": "2f741081d080b5556b8f66428f487866de8b6059", "url": "https://github.com/DSpace/DSpace/commit/2f741081d080b5556b8f66428f487866de8b6059", "message": "[Task 69689] added various endpoints for Group management", "committedDate": "2020-03-17T15:28:30Z", "type": "commit"}, {"oid": "b5c8afefeef291e657f6b9f3a9ce8094abb8fcfd", "url": "https://github.com/DSpace/DSpace/commit/b5c8afefeef291e657f6b9f3a9ce8094abb8fcfd", "message": "[Task 69689] fixed the workflow groups endpoints", "committedDate": "2020-03-18T14:17:34Z", "type": "commit"}, {"oid": "2d048d7df82c272a8c6be8cb867249da355d9109", "url": "https://github.com/DSpace/DSpace/commit/2d048d7df82c272a8c6be8cb867249da355d9109", "message": "Intermediate Commit", "committedDate": "2020-03-20T07:25:13Z", "type": "commit"}, {"oid": "27d09d1f662950732c78a4dc9ea9f7f511e39cac", "url": "https://github.com/DSpace/DSpace/commit/27d09d1f662950732c78a4dc9ea9f7f511e39cac", "message": "Intermediate Commit", "committedDate": "2020-03-20T10:29:16Z", "type": "commit"}, {"oid": "0541a25d2f356cf152a105eaa9e5253e4e123c6b", "url": "https://github.com/DSpace/DSpace/commit/0541a25d2f356cf152a105eaa9e5253e4e123c6b", "message": "Fixed various tests", "committedDate": "2020-03-20T12:08:27Z", "type": "commit"}, {"oid": "f5fb694e851bc9b53edd77951f375649d06d57fa", "url": "https://github.com/DSpace/DSpace/commit/f5fb694e851bc9b53edd77951f375649d06d57fa", "message": "[Task 69689] added and fixed tests for the Collection Groups", "committedDate": "2020-03-20T15:52:11Z", "type": "commit"}, {"oid": "e6c8c3d45c357983ce18a62b61312e2d032dfb17", "url": "https://github.com/DSpace/DSpace/commit/e6c8c3d45c357983ce18a62b61312e2d032dfb17", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles", "committedDate": "2020-03-24T10:00:45Z", "type": "commit"}, {"oid": "6a7f99838517723269aa4e6cc4ebfeb3ae98b873", "url": "https://github.com/DSpace/DSpace/commit/6a7f99838517723269aa4e6cc4ebfeb3ae98b873", "message": "Intermediate Commit", "committedDate": "2020-03-24T11:06:29Z", "type": "commit"}, {"oid": "60afa2310651470c6750fbbc8e354ea675a52112", "url": "https://github.com/DSpace/DSpace/commit/60afa2310651470c6750fbbc8e354ea675a52112", "message": "[Task 69975] fixed tests", "committedDate": "2020-03-24T15:27:47Z", "type": "commit"}, {"oid": "8099fce15a5af62f38faf62929440222b5c76e11", "url": "https://github.com/DSpace/DSpace/commit/8099fce15a5af62f38faf62929440222b5c76e11", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles", "committedDate": "2020-03-25T13:59:43Z", "type": "commit"}, {"oid": "c8ea153eb003f4bbd3d3e14bf69bacd51c4c68ed", "url": "https://github.com/DSpace/DSpace/commit/c8ea153eb003f4bbd3d3e14bf69bacd51c4c68ed", "message": "[Task 69975] deleting all default read groups after collection deletion in tests", "committedDate": "2020-03-30T14:26:51Z", "type": "commit"}, {"oid": "17d1b200863e1e4d35ac16903bcaeddff2d00f13", "url": "https://github.com/DSpace/DSpace/commit/17d1b200863e1e4d35ac16903bcaeddff2d00f13", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles\n\nConflicts:\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityRestRepositoryIT.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "committedDate": "2020-03-31T09:57:04Z", "type": "commit"}, {"oid": "ca1918ddae22f08254ba37f684c799f026b6b92d", "url": "https://github.com/DSpace/DSpace/commit/ca1918ddae22f08254ba37f684c799f026b6b92d", "message": "[Task 69975] fixed checkstyle", "committedDate": "2020-03-31T09:57:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODIyMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401178223", "bodyText": "I think this is missing an @Override", "author": "tdonohue", "createdAt": "2020-03-31T20:00:01Z", "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/XmlWorkflowServiceImpl.java", "diffHunk": "@@ -157,29 +157,34 @@ public Group getWorkflowRoleGroup(Context context, Collection collection, String\n             Role role = WorkflowUtils.getCollectionAndRepositoryRoles(collection).get(roleName);\n             if (role.getScope() == Role.Scope.COLLECTION || role.getScope() == Role.Scope.REPOSITORY) {\n                 roleGroup = WorkflowUtils.getRoleGroup(context, collection, role);\n-                if (roleGroup == null) {\n-                    authorizeService.authorizeAction(context, collection, Constants.WRITE);\n-                    roleGroup = groupService.create(context);\n-                    if (role.getScope() == Role.Scope.COLLECTION) {\n-                        groupService.setName(roleGroup,\n-                                             \"COLLECTION_\" + collection.getID().toString()\n-                                                 + \"_WORKFLOW_ROLE_\" + roleName);\n-                    } else {\n-                        groupService.setName(roleGroup, role.getName());\n-                    }\n-                    groupService.update(context, roleGroup);\n-                    authorizeService.addPolicy(context, collection, Constants.ADD, roleGroup);\n-                    if (role.getScope() == Role.Scope.COLLECTION) {\n-                        WorkflowUtils.createCollectionWorkflowRole(context, collection, roleName, roleGroup);\n-                    }\n-                }\n             }\n             return roleGroup;\n         } catch (WorkflowConfigurationException e) {\n             throw new WorkflowException(e);\n         }\n     }\n \n+    public Group createWorkflowRoleGroup(Context context, Collection collection, String roleName)", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTY0Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401179642", "bodyText": "These JavaDocs need enhancing. This Controller manages much more than just the admingroup. It's all special groups for a Collection.", "author": "tdonohue", "createdAt": "2020-03-31T20:02:43Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/CollectionGroupRestController.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.hateoas.GroupResource;\n+import org.dspace.app.rest.repository.CollectionRestRepository;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.dspace.workflow.WorkflowService;\n+import org.dspace.xmlworkflow.WorkflowUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ControllerUtils;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.hateoas.ResourceSupport;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This RestController will take care of all the calls for a specific collection's admingroup\n+ * This is handled by calling \"/api/core/collections/{uuid}/adminGroup\" with the correct RequestMethod", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Mzc4Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401183786", "bodyText": "This line should be moved below the if statement just below. There's no reason to load the Group if you don't have access to it.", "author": "tdonohue", "createdAt": "2020-03-31T20:09:58Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionAdminGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"admingroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.ADMIN_GROUP)\n+public class CollectionAdminGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the AdminGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the admingroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The admingroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getAdminGroup(@Nullable HttpServletRequest request,\n+                                   UUID collectionId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+\n+            Group administrators = collection.getAdministrators();", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDI2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401184262", "bodyText": "This if clause should be moved up. There's no reason to load the DEFAULT_BITSTREAM_READ group if you don't have access to it.", "author": "tdonohue", "createdAt": "2020-03-31T20:10:49Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionBitstreamReadGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"BitstreamReadGroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.BITSTREAM_READ_GROUP)\n+public class CollectionBitstreamReadGroupLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the BitstreamReadGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the BitstreamReadGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return The BitstreamReadGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getBitstreamReadGroup(@Nullable HttpServletRequest request,\n+                                           UUID collectionId,\n+                                           @Nullable Pageable optionalPageable,\n+                                           Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+            List<Group> bitstreamGroups = authorizeService\n+                .getAuthorizedGroups(context, collection, Constants.DEFAULT_BITSTREAM_READ);\n+            Group bitstreamReadGroup = bitstreamGroups.get(0);\n+\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDQ5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401184495", "bodyText": "Same here, move this up. We want to check permissions closer to the top of the method.", "author": "tdonohue", "createdAt": "2020-03-31T20:11:18Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionItemReadGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"ItemReadGroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.ITEM_READ_GROUP)\n+public class CollectionItemReadGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the ItemReadGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the ItemReadGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return The ItemReadGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getItemReadGroup(@Nullable HttpServletRequest request,\n+                                      UUID collectionId,\n+                                      @Nullable Pageable optionalPageable,\n+                                      Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+            List<Group> itemGroups = authorizeService\n+                .getAuthorizedGroups(context, collection, Constants.DEFAULT_ITEM_READ);\n+            if (itemGroups == null || itemGroups.isEmpty()) {\n+                return null;\n+            }\n+            Group itemReadGroup = itemGroups.get(0);\n+\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTg2MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401185860", "bodyText": "Again, move the authorization check above the line which loads the group.", "author": "tdonohue", "createdAt": "2020-03-31T20:13:44Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionSubmitterGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"submittergroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.SUBMITTERS_GROUP)\n+public class CollectionSubmitterGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the Submittergroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the submitterGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The submitterGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getSubmittersGroup(@Nullable HttpServletRequest request,\n+                                   UUID collectionId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+\n+            Group submitters = collection.getSubmitters();\n+\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjA4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401186087", "bodyText": "Same here, move the authorization check up", "author": "tdonohue", "createdAt": "2020-03-31T20:14:04Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityAdminGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"admingroup\" subresource of an individual community.\n+ *\n+ */\n+@Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.ADMIN_GROUP)\n+public class CommunityAdminGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the AdminGroup of a Community\n+     * @param request           The current request\n+     * @param communityId       The id of the community that we'll retrieve the admingroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The admingroup of the given community\n+     */\n+    @PreAuthorize(\"hasPermission(#communityId, 'COMMUNITY', 'READ')\")\n+    public GroupRest getAdminGroup(@Nullable HttpServletRequest request,\n+                                   UUID communityId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Community community = communityService.find(context, communityId);\n+            if (community == null) {\n+                throw new ResourceNotFoundException(\"No such community: \" + communityId);\n+            }\n+\n+            Group administrators = community.getAdministrators();\n+\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, community,", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDIwOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401190208", "bodyText": "This method appears to be misnamed. It's only creating *_DEFAULT_READ groups, and not just any group.  It probably should be named createDefaultReadGroup or similar so that its purpose is clear.", "author": "tdonohue", "createdAt": "2020-03-31T20:21:03Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2022 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        collectionService.createAdministrators(context, collection);\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        collectionService.createAdministrators(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        collectionService.createSubmitters(context, collection);\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        collectionService.createSubmitters(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createGroup(String itemGroupString, int defaultItemRead) throws SQLException, AuthorizeException {", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NTk1MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401195951", "bodyText": "Please do not leave authorization turned off across test methods.  This can result in unexpected behavior.  It should only be temporarily turned off to create (or delete) test content.", "author": "tdonohue", "createdAt": "2020-03-31T20:30:53Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityAdminGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDg3Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401214873", "bodyText": "Perhaps someday we should remove #turnOffAuthorisationSystem and its partner, and replace them with a method which takes a niladic function as its only argument, to emphasize the need to keep such privileged code short and focused?", "author": "mwoodiupui", "createdAt": "2020-03-31T21:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NTk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Njc5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401196796", "bodyText": "Please do not leave authorization turned off across test methods.  This can result in unexpected behavior.  It should only be temporarily turned off to create (or delete) test content.", "author": "tdonohue", "createdAt": "2020-03-31T20:32:28Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2022 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMjk5MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401202991", "bodyText": "Please update this to create its own Context, similar to deleteWorkflowGroups(). I've run into occasional Hibernate issues with reusing the global context for deletion of test data.  The best practice is the method used in deleteWorkflowGroups() which uses a try to open a new context, then deletes & completes.", "author": "tdonohue", "createdAt": "2020-03-31T20:43:29Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CollectionBuilder.java", "diffHunk": "@@ -155,6 +155,11 @@ public Collection build() {\n \n     @Override\n     public void cleanup() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        if (collection.getAdministrators() != null) {\n+            Group adminGroup = collection.getAdministrators();\n+            collectionService.removeAdministrators(context, collection);\n+        }", "originalCommit": "ca1918ddae22f08254ba37f684c799f026b6b92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f981d2c2bf0d3bfee8fcecaa34ca9e5b8083574", "url": "https://github.com/DSpace/DSpace/commit/0f981d2c2bf0d3bfee8fcecaa34ca9e5b8083574", "message": "[Task 70144] applied feedback with regards to the collectionGroups and added workflowgroup/workflowRole links to the collections", "committedDate": "2020-04-01T13:47:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MjA1MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r401672050", "bodyText": "This line should no longer be needed. Context auth is managed in the methods below it.", "author": "tdonohue", "createdAt": "2020-04-01T14:45:37Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CollectionBuilder.java", "diffHunk": "@@ -155,14 +155,38 @@ public Collection build() {\n \n     @Override\n     public void cleanup() throws Exception {\n+        context.turnOffAuthorisationSystem();", "originalCommit": "0f981d2c2bf0d3bfee8fcecaa34ca9e5b8083574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDkxMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402234912", "bodyText": "This should be fixed now.", "author": "KevinVdV", "createdAt": "2020-04-02T11:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MjA1MA=="}], "type": "inlineReview"}, {"oid": "f3ff763e48d4ef7b8b7cf3c79c9c2384f7f098d1", "url": "https://github.com/DSpace/DSpace/commit/f3ff763e48d4ef7b8b7cf3c79c9c2384f7f098d1", "message": "[Task 70144] applied further feedback on the CollectionBuilder", "committedDate": "2020-04-02T07:44:14Z", "type": "commit"}, {"oid": "f11707b83a5ca510f6a5f17938fb935584756461", "url": "https://github.com/DSpace/DSpace/commit/f11707b83a5ca510f6a5f17938fb935584756461", "message": "[Task 69975] applied further feedback to the Collection Groups", "committedDate": "2020-04-02T09:35:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NDQ3Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402874473", "bodyText": "the javadoc should mention the default read group not the admin rights", "author": "abollini", "createdAt": "2020-04-03T09:23:26Z", "path": "dspace-api/src/main/java/org/dspace/app/util/AuthorizeUtil.java", "diffHunk": "@@ -525,4 +525,17 @@ public static void authorizeReinstateItem(Context context, Item item)\n             }\n         }\n     }\n+\n+    /**\n+     * This method will check whether the current user has admin rights to the given collection", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MTc3Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402881773", "bodyText": "there is something conceptually wrong here as the basic workflow now have a dependency to the xml workflow. Nevertheless as the basic workflow should be removed I don't think is useful spent time on that https://jira.lyrasis.org/browse/DS-3041", "author": "abollini", "createdAt": "2020-04-03T09:36:01Z", "path": "dspace-api/src/main/java/org/dspace/workflowbasic/BasicWorkflowServiceImpl.java", "diffHunk": "@@ -53,6 +53,7 @@\n import org.dspace.workflowbasic.service.BasicWorkflowItemService;\n import org.dspace.workflowbasic.service.BasicWorkflowService;\n import org.dspace.workflowbasic.service.TaskListItemService;\n+import org.dspace.xmlworkflow.WorkflowConfigurationException;", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MDYxMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402890611", "bodyText": "org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup(Context, Community) should be used here", "author": "abollini", "createdAt": "2020-04-03T09:51:52Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/CommunityAdminGroupRestController.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.hateoas.GroupResource;\n+import org.dspace.app.rest.repository.CommunityRestRepository;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ControllerUtils;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.hateoas.ResourceSupport;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This RestController will take care of all the calls for a specific community's admingroup\n+ * This is handled by calling \"/api/core/communities/{uuid}/adminGroup\" with the correct RequestMethod\n+ */\n+@RestController\n+@RequestMapping(\"/api/core/communities\" + REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID + \"/adminGroup\")\n+public class CommunityAdminGroupRestController {\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private CommunityRestRepository communityRestRepository;\n+\n+    @Autowired\n+    private ConverterService converterService;\n+\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method creates and returns an AdminGroup object for the given community\n+     * This is called by using RequestMethod.POST on the default url for this class\n+     * @param uuid      The UUID of the community for which we'll create an adminGroup\n+     * @param response  The current response\n+     * @param request   The current request\n+     * @return          The created AdminGroup\n+     * @throws SQLException         If something goes wrong\n+     * @throws AuthorizeException   If something goes wrong\n+     */\n+    @RequestMapping(method = RequestMethod.POST)\n+    @PreAuthorize(\"hasPermission(#uuid, 'COMMUNITY', 'WRITE')\")\n+    public ResponseEntity<ResourceSupport> postAdminGroup(@PathVariable UUID uuid, HttpServletResponse response,\n+                                                          HttpServletRequest request)\n+        throws SQLException, AuthorizeException {\n+\n+        Context context = ContextUtil.obtainContext(request);\n+        Community community = communityService.find(context, uuid);\n+\n+        if (community == null) {\n+            throw new ResourceNotFoundException(\"No such community: \" + uuid);\n+        }\n+        if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, community,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MDc4NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402890785", "bodyText": "please use org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup(Context, Community)", "author": "abollini", "createdAt": "2020-04-03T09:52:11Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/CommunityAdminGroupRestController.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.hateoas.GroupResource;\n+import org.dspace.app.rest.repository.CommunityRestRepository;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ControllerUtils;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.hateoas.ResourceSupport;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This RestController will take care of all the calls for a specific community's admingroup\n+ * This is handled by calling \"/api/core/communities/{uuid}/adminGroup\" with the correct RequestMethod\n+ */\n+@RestController\n+@RequestMapping(\"/api/core/communities\" + REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID + \"/adminGroup\")\n+public class CommunityAdminGroupRestController {\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private CommunityRestRepository communityRestRepository;\n+\n+    @Autowired\n+    private ConverterService converterService;\n+\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method creates and returns an AdminGroup object for the given community\n+     * This is called by using RequestMethod.POST on the default url for this class\n+     * @param uuid      The UUID of the community for which we'll create an adminGroup\n+     * @param response  The current response\n+     * @param request   The current request\n+     * @return          The created AdminGroup\n+     * @throws SQLException         If something goes wrong\n+     * @throws AuthorizeException   If something goes wrong\n+     */\n+    @RequestMapping(method = RequestMethod.POST)\n+    @PreAuthorize(\"hasPermission(#uuid, 'COMMUNITY', 'WRITE')\")\n+    public ResponseEntity<ResourceSupport> postAdminGroup(@PathVariable UUID uuid, HttpServletResponse response,\n+                                                          HttpServletRequest request)\n+        throws SQLException, AuthorizeException {\n+\n+        Context context = ContextUtil.obtainContext(request);\n+        Community community = communityService.find(context, uuid);\n+\n+        if (community == null) {\n+            throw new ResourceNotFoundException(\"No such community: \" + uuid);\n+        }\n+        if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, community,\n+                                                                                           Constants.ADMIN, true)) {\n+            throw new AccessDeniedException(\"The current user was not allowed to retrieve the AdminGroup for\" +\n+                                                \" community: \" + uuid);\n+        }\n+        if (community.getAdministrators() != null) {\n+            throw new UnprocessableEntityException(\"The community with UUID: \" + uuid + \" already has \" +\n+                                                       \"an admin group\");\n+        }\n+        GroupRest adminGroup = communityRestRepository.createAdminGroup(context, request, community);\n+        context.complete();\n+        GroupResource groupResource = converterService.toResource(adminGroup);\n+        return ControllerUtils.toResponseEntity(HttpStatus.CREATED, new HttpHeaders(), groupResource);\n+    }\n+\n+    /**\n+     * This method takes care of the deletion of an AdminGroup for the given community\n+     * This is called by using RequestMethod.DELETE on the default url for this class\n+     * @param uuid      The UUID of the community for which we'll delete the AdminGroup\n+     * @param response  The current response\n+     * @param request   The current request\n+     * @return          An empty response if the deletion was successful\n+     * @throws SQLException         If something goes wrong\n+     * @throws AuthorizeException   If something goes wrong\n+     * @throws IOException          If something goes wrong\n+     */\n+    @RequestMapping(method = RequestMethod.DELETE)\n+    @PreAuthorize(\"hasPermission(#uuid, 'COMMUNITY', 'WRITE')\")\n+    public ResponseEntity<ResourceSupport> deleteAdminGroup(@PathVariable UUID uuid, HttpServletResponse response,\n+                                                          HttpServletRequest request)\n+        throws SQLException, AuthorizeException, IOException {\n+\n+        Context context = ContextUtil.obtainContext(request);\n+        Community community = communityService.find(context, uuid);\n+        if (community == null) {\n+            throw new ResourceNotFoundException(\"No such community: \" + uuid);\n+        }\n+\n+        if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, community,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MzI0MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402893240", "bodyText": "I know that this method has been not introduced in this PR but as I'm noting it now I want to ask to move it to the AuthorizeUtil so that we can quickly locate it and reuse where appropriate (for instance in an auth feature). The security logic should be not implemented in a controller", "author": "abollini", "createdAt": "2020-04-03T09:56:19Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -277,8 +275,12 @@ private void checkAuthorization(Context context, Group group) throws SQLExceptio\n             return;\n         }\n \n-        Collection collection = groupUtil.getCollection(context, group);\n-        if (collection != null) {\n+        DSpaceObject parentObject = groupService.getParentObject(context, group);", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NDU2Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402894563", "bodyText": "can we move\ngetMethodOn().getWorkflowGroupForRole(UUID.fromString(halResource.getContent().getUuid()) outside the for to optimize a bit the code execution?", "author": "abollini", "createdAt": "2020-04-03T09:58:28Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/link/CollectionResourceWorkflowGroupHalLinkFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.link;\n+\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.CollectionGroupRestController;\n+import org.dspace.app.rest.model.hateoas.CollectionResource;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.dspace.services.RequestService;\n+import org.dspace.xmlworkflow.Role;\n+import org.dspace.xmlworkflow.WorkflowUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.hateoas.Link;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class makes sure that the workflowGroup links with the relevant WorkflowRoles are added\n+ * to the CollectionResource in a dynamic way depending on what workflow is enabled for the collection\n+ */\n+@Component\n+public class CollectionResourceWorkflowGroupHalLinkFactory\n+    extends HalLinkFactory<CollectionResource, CollectionGroupRestController> {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Override\n+    protected void addLinks(CollectionResource halResource, Pageable pageable, LinkedList<Link> list) throws Exception {\n+\n+        Context context = ContextUtil.obtainContext(requestService.getCurrentRequest().getHttpServletRequest());\n+        Collection collection = collectionService.find(context, UUID.fromString(halResource.getContent().getId()));\n+        Map<String, Role> roles = WorkflowUtils.getCollectionRoles(collection);\n+        for (Map.Entry<String, Role> entry : roles.entrySet()) {\n+            list.add(buildLink(\"workflowGroups/\" + entry.getKey(), getMethodOn()\n+                .getWorkflowGroupForRole(UUID.fromString(halResource.getContent().getUuid()), null, null,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5NDYwMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405294601", "bodyText": "We can't fully move the getMethodOn outside of the for loop because it'll need the entry.getKey() attribute in the end. I have however taken your advice on a different part of the call and moved the UUID.fromString(halResource.getContent().getUuid()) outside of the for loop.\nMaking it list.add(buildLink(\"workflowGroups/\" + entry.getKey(), getMethodOn().getWorkflowGroupForRole(resourceUuid, null, null,entry.getKey())));", "author": "Raf-atmire", "createdAt": "2020-04-08T06:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMDQxNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408120416", "bodyText": "ok thanks", "author": "abollini", "createdAt": "2020-04-14T13:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTI0Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402899247", "bodyText": "please use org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup(Context, Collection)", "author": "abollini", "createdAt": "2020-04-03T10:07:07Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionAdminGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"admingroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.ADMIN_GROUP)\n+public class CollectionAdminGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the AdminGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the admingroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The admingroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getAdminGroup(@Nullable HttpServletRequest request,\n+                                   UUID collectionId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+\n+\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTk0Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402899942", "bodyText": "please use the new method that you have introduced in org.dspace.app.util.AuthorizeUtil.authorizeManageDefaultReadGroup(Context, Collection)", "author": "abollini", "createdAt": "2020-04-03T10:08:25Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionBitstreamReadGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"BitstreamReadGroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.BITSTREAM_READ_GROUP)\n+public class CollectionBitstreamReadGroupLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the BitstreamReadGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the BitstreamReadGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return The BitstreamReadGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getBitstreamReadGroup(@Nullable HttpServletRequest request,\n+                                           UUID collectionId,\n+                                           @Nullable Pageable optionalPageable,\n+                                           Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDA3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402900076", "bodyText": "org.dspace.app.util.AuthorizeUtil.authorizeManageDefaultReadGroup(Context, Collection)", "author": "abollini", "createdAt": "2020-04-03T10:08:38Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionItemReadGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"ItemReadGroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.ITEM_READ_GROUP)\n+public class CollectionItemReadGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the ItemReadGroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the ItemReadGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return The ItemReadGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getItemReadGroup(@Nullable HttpServletRequest request,\n+                                      UUID collectionId,\n+                                      @Nullable Pageable optionalPageable,\n+                                      Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzgzNw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402903837", "bodyText": "please use org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup(Context, Collection)", "author": "abollini", "createdAt": "2020-04-03T10:15:52Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionSubmitterGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"submittergroup\" subresource of an individual collection.\n+ *\n+ */\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.SUBMITTERS_GROUP)\n+public class CollectionSubmitterGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the Submittergroup of a Collection\n+     * @param request           The current request\n+     * @param collectionId       The id of the collection that we'll retrieve the submitterGroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The submitterGroup of the given collection\n+     */\n+    @PreAuthorize(\"hasPermission(#collectionId, 'COLLECTION', 'READ')\")\n+    public GroupRest getSubmittersGroup(@Nullable HttpServletRequest request,\n+                                   UUID collectionId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Collection collection = collectionService.find(context, collectionId);\n+            if (collection == null) {\n+                throw new ResourceNotFoundException(\"No such collection: \" + collectionId);\n+            }\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, collection,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNDQ1NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402904454", "bodyText": "org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup(Context, Community)", "author": "abollini", "createdAt": "2020-04-03T10:17:07Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityAdminGroupLinkRepository.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"admingroup\" subresource of an individual community.\n+ *\n+ */\n+@Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.ADMIN_GROUP)\n+public class CommunityAdminGroupLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This method is responsible for retrieving the AdminGroup of a Community\n+     * @param request           The current request\n+     * @param communityId       The id of the community that we'll retrieve the admingroup for\n+     * @param optionalPageable  The pageable if applicable\n+     * @param projection        The current Projection\n+     * @return                  The admingroup of the given community\n+     */\n+    @PreAuthorize(\"hasPermission(#communityId, 'COMMUNITY', 'READ')\")\n+    public GroupRest getAdminGroup(@Nullable HttpServletRequest request,\n+                                   UUID communityId,\n+                                   @Nullable Pageable optionalPageable,\n+                                   Projection projection) {\n+        try {\n+            Context context = obtainContext();\n+            Community community = communityService.find(context, communityId);\n+            if (community == null) {\n+                throw new ResourceNotFoundException(\"No such community: \" + communityId);\n+            }\n+            if (!authorizeService.isAdmin(context) && !authorizeService.authorizeActionBoolean(context, community,", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjc0Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402906743", "bodyText": "can we refactor that with org.dspace.app.rest.repository.GroupRestRepository.createAndReturn(Context) to share the internal logic?", "author": "abollini", "createdAt": "2020-04-03T10:21:28Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java", "diffHunk": "@@ -278,4 +288,58 @@ public BitstreamRest setLogo(Context context, Community community, MultipartFile\n         bitstreamService.update(context, bitstream);\n         return converter.toRest(context.reloadEntity(bitstream), utils.obtainProjection());\n     }\n+\n+    /**\n+     * This method will create an AdminGroup for the given Community with the given Information through JSON\n+     * @param context   The current context\n+     * @param request   The current request\n+     * @param community The community for which we'll create an admingroup\n+     * @return          The created AdminGroup's REST object\n+     * @throws SQLException If something goes wrong\n+     * @throws AuthorizeException   If something goes wrong\n+     */\n+    public GroupRest createAdminGroup(Context context, HttpServletRequest request, Community community)\n+        throws SQLException, AuthorizeException {\n+\n+        Group group = cs.createAdministrators(context, community);", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NTcwMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405475703", "bodyText": "There are too many differences for a refactor to a single method.", "author": "KevinVdV", "createdAt": "2020-04-08T12:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzkyOQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402907929", "bodyText": "we are using the admin token here why should I have problem with a full projection?", "author": "abollini", "createdAt": "2020-04-03T10:23:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -809,7 +809,8 @@ public void findByObjectAndFeatureTest() throws Exception {\n         String adminToken = getAuthToken(admin.getEmail(), password);\n         getClient(adminToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n                 .param(\"uri\", comUri)\n-                .param(\"projection\", \"full\")\n+                .param(\"projection\", \"level\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NDQ0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405484441", "bodyText": "There isn't really a \"problem\", but we aren't testing for a full projection. I would keep the full projection for a single test where you actually test it as the current test is passing with the \"level\" projection.", "author": "KevinVdV", "createdAt": "2020-04-08T12:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4ODIzOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405588238", "bodyText": "@KevinVdV : In the future, I would recommend treating these sorts of changes in a separate, smaller PR.  It's distracting to make changes in this PR which do not directly relate to the PR description itself, as that makes it seem like the other changes in this PR required you to change this from projection \"full\" to \"level\".  Instead, it sounds like you've just made these changes to do minor, unrelated IT cleanup?  Is that correct?\nI'm OK with leaving these in this PR.  But, in the future, it's best to separate these sorts of small, unrelated changes into a different small PR (which can be quicker to review & merge)", "author": "tdonohue", "createdAt": "2020-04-08T14:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDQ4OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408134489", "bodyText": "As the test is designed to be executed as an Admin please keep the projection as before. Also if we don't check for specific things that should be included with a full projection this test is in any case different than one with a level projection. If we feel that a level test should be introduced it is perfectly ok to add an extra call but we should never remove / alter an existing test without a real reason to do that and after having checked that at least one equivalent test will remain for instance, if we change all the full to level what guarantee us that there are no strange bug in our code that will become visible only when the full projection is required?\nI understood that is annoying to revert changes but if unrelated/unnecessary changes are not reverted we MUST review them properly and be sure that we are not making existing test weaker than before and also these checks are (very) time consuming", "author": "abollini", "createdAt": "2020-04-14T13:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzk2MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402907960", "bodyText": "we are using the admin token here why should I have problem with a full projection?", "author": "abollini", "createdAt": "2020-04-03T10:23:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -834,7 +836,8 @@ public void findByObjectAndFeatureTest() throws Exception {\n         // verify that it works for administators inspecting other users\n         getClient(adminToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n                 .param(\"uri\", comUri)\n-                .param(\"projection\", \"full\")\n+                .param(\"projection\", \"level\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MzE4OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405493188", "bodyText": "Same as above, if we don't need it, best leave it out ?", "author": "KevinVdV", "createdAt": "2020-04-08T12:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDYwNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408134604", "bodyText": "yes, please", "author": "abollini", "createdAt": "2020-04-14T13:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwODA3MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402908070", "bodyText": "we are using the admin token here why should I have problem with a full projection?", "author": "abollini", "createdAt": "2020-04-03T10:23:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -857,7 +861,8 @@ public void findByObjectAndFeatureTest() throws Exception {\n         // verify that it works for administrators inspecting anonymous users\n         getClient(adminToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n                 .param(\"uri\", comUri)\n-                .param(\"projection\", \"full\")\n+                .param(\"projection\", \"level\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MzUxNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405493514", "bodyText": "See above", "author": "KevinVdV", "createdAt": "2020-04-08T12:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwODA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTEwMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402909103", "bodyText": "the  #2726 should allow us to pass this test also if something cannot be embedded, am I wrong?", "author": "abollini", "createdAt": "2020-04-03T10:25:51Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -822,7 +823,8 @@ public void findByObjectAndFeatureTest() throws Exception {\n         String epersonToken = getAuthToken(eperson.getEmail(), password);\n         getClient(epersonToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n                 .param(\"uri\", comUri)\n-                .param(\"projection\", \"full\")\n+                .param(\"projection\", \"level\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5Mjk5NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405492994", "bodyText": "It could, but regardless we want to remove the full projection as much as possible as angular shouldn't be using this neither.", "author": "KevinVdV", "createdAt": "2020-04-08T12:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNTc1MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408135751", "bodyText": "please keep it in place if there is no immediate needs to remove it.\nIt would be valuable add an extra call with the level projection to cover also the normal use case from angular", "author": "abollini", "createdAt": "2020-04-14T13:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTE1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402909153", "bodyText": "the  #2726 should allow us to pass this test also if something cannot be embedded, am I wrong?", "author": "abollini", "createdAt": "2020-04-03T10:25:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -846,7 +849,8 @@ public void findByObjectAndFeatureTest() throws Exception {\n         // verify that it works for anonymous users\n         getClient().perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n                 .param(\"uri\", comUri)\n-                .param(\"projection\", \"full\")\n+                .param(\"projection\", \"level\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MzM3NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405493375", "bodyText": "See above", "author": "KevinVdV", "createdAt": "2020-04-08T12:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMTE5NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402911194", "bodyText": "no please. If this PR cause the browse / search to fail for anonymous users we are going to broke angular.\nI guess that #2726 should allow us to pass this test also if something cannot be embedded. So this PR should be merged after the 2726 verifying that these tests (as is) still pass\nIf this would be not the case we should\n\ncheck if angular use a full projection or not, so to open an issue if needed\nif angular doesn't use a full project add new test here to verify that they work with the projection needed by angular and flagging the current test as ignored recording the issue in a jira ticket", "author": "abollini", "createdAt": "2020-04-03T10:29:50Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BrowsesResourceControllerIT.java", "diffHunk": "@@ -417,9 +417,11 @@ public void browsePaginationWithoutExplicitParams() throws Exception {\n \n         context.restoreAuthSystemState();\n \n+        String token = getAuthToken(admin.getEmail(), password);", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzA0NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408137044", "bodyText": "have you already created a ticket for the issue with the full projection here?", "author": "abollini", "createdAt": "2020-04-14T13:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMTE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMTQ4MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402911480", "bodyText": "no please, see previous comment", "author": "abollini", "createdAt": "2020-04-03T10:30:24Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BrowsesResourceControllerIT.java", "diffHunk": "@@ -775,10 +777,12 @@ public void testBrowseByItemsStartsWith() throws Exception {\n                                 .build();\n         // ---- BROWSES BY ITEM ----\n \n+        String token = getAuthToken(admin.getEmail(), password);", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzE1Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402913152", "bodyText": "check if needed after the  #2726\nagain if needed I would recommend to create a copy of the current failing test to flag as ignored and report it in a JIRA ticket", "author": "abollini", "createdAt": "2020-04-03T10:33:49Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionRestRepositoryIT.java", "diffHunk": "@@ -80,7 +80,7 @@ public void findAllTest() throws Exception {\n \n \n         getClient().perform(get(\"/api/core/collections\")\n-                   .param(\"projection\", \"full\"))\n+                   .param(\"embed\", CollectionMatcher.getFullEmbedsParameter()))", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTIzNw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405981237", "bodyText": "There isn't really a \"problem\", but we aren't testing for a full projection. I would keep the full projection for a single test where you actually test it as the current test is passing with the \"level\" projection.", "author": "KevinVdV", "createdAt": "2020-04-09T06:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzOTc1NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408139754", "bodyText": "if not necessary please revert it otherwise add at least a test for the full projection or copy the original test in an ignored test and report about it in a jira ticket", "author": "abollini", "createdAt": "2020-04-14T13:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzU3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402913572", "bodyText": "again check after the  #2726\nif needed duplicate, flag as ignored and report in a dedicated JIRA ticket", "author": "abollini", "createdAt": "2020-04-03T10:34:41Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityRestRepositoryIT.java", "diffHunk": "@@ -121,7 +121,7 @@ public void createTest() throws Exception {\n             getClient(authToken).perform(post(\"/api/core/communities\")\n                                         .content(mapper.writeValueAsBytes(comm))\n                                         .contentType(contentType)\n-                                .param(\"projection\", \"full\"))\n+                                   .param(\"embed\", CommunityMatcher.getFullEmbedsParameters()))", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTI5OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405981298", "bodyText": "There isn't really a \"problem\", but we aren't testing for a full projection. I would keep the full projection for a single test where you actually test it as the current test is passing with the \"level\" projection.", "author": "KevinVdV", "createdAt": "2020-04-09T06:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzOTkzNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408139934", "bodyText": "if not necessary please revert it otherwise add at least a test for the full projection or copy the original test in an ignored test and report about it in a jira ticket", "author": "abollini", "createdAt": "2020-04-14T13:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDAwOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402914008", "bodyText": "no please the test is intended to verify availability of public item", "author": "abollini", "createdAt": "2020-04-03T10:35:30Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -253,8 +253,10 @@ public void findOneTest() throws Exception {\n         Matcher<? super Object> publicItem1Matcher = ItemMatcher.matchItemWithTitleAndDateIssued(publicItem1,\n                         \"Public item 1\", \"2017-10-17\");\n \n+        String token = getAuthToken(admin.getEmail(), password);", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406150160", "bodyText": "See docs here: https://github.com/atmire/DSpace/blob/w2p-69349_edit-community-assign-roles/dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java#L257", "author": "KevinVdV", "createdAt": "2020-04-09T11:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0MDg2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408140862", "bodyText": "if not necessary please revert it otherwise copy the original test in an ignored test and report about it in a jira ticket (it could become a test to demonstrate the resolution of https://jira.lyrasis.org/browse/DS-4444 )", "author": "abollini", "createdAt": "2020-04-14T13:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDIxNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402914216", "bodyText": "again check after the  #2726\nif needed duplicate, flag as ignored and report in a dedicated JIRA ticket", "author": "abollini", "createdAt": "2020-04-03T10:35:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -839,7 +839,7 @@ public void createEmptyWorkspateItemTest() throws Exception {\n \n         // create a workspaceitem without an explicit collection, this will go in the first valid collection for the\n         // user: the col1\n-        getClient(authToken).perform(post(\"/api/submission/workspaceitems\").param(\"projection\", \"full\")\n+        getClient(authToken).perform(post(\"/api/submission/workspaceitems\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTQxNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402915414", "bodyText": "please put in a separate method or rename this support method accordingly", "author": "abollini", "createdAt": "2020-04-03T10:38:26Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CollectionBuilder.java", "diffHunk": "@@ -155,14 +155,37 @@ public Collection build() {\n \n     @Override\n     public void cleanup() throws Exception {\n+        deleteAdminGroup();\n         deleteWorkflowGroups(collection);\n         delete(collection);\n     }\n \n+    private void deleteAdminGroup() throws SQLException, AuthorizeException {\n+        if (collection.getAdministrators() != null) {\n+            try (Context c = new Context()) {\n+                c.turnOffAuthorisationSystem();\n+                collectionService.removeAdministrators(c, collection);\n+                c.complete();\n+            }\n+        }\n+    }\n+\n     public void deleteWorkflowGroups(Collection collection) throws Exception {\n \n         try (Context c = new Context()) {\n             c.turnOffAuthorisationSystem();\n+\n+            Group defaultItemReadGroup = groupService.findByName(c, \"COLLECTION_\" +", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MTY0Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406151643", "bodyText": "Moved to separate method: https://github.com/atmire/DSpace/blob/w2p-69349_edit-community-assign-roles/dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CollectionBuilder.java#L195", "author": "KevinVdV", "createdAt": "2020-04-09T11:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjA2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402916069", "bodyText": "please add javadoc also because the method name doesn't reflect the implementation. They are not all the embeds but just a specific selection", "author": "abollini", "createdAt": "2020-04-03T10:39:45Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java", "diffHunk": "@@ -100,6 +105,10 @@ private CollectionMatcher() {\n             );\n     }\n \n+    public static String getFullEmbedsParameter() {", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NDUwNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406154504", "bodyText": "We added javadocs.", "author": "KevinVdV", "createdAt": "2020-04-09T12:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyNjUzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r408126531", "bodyText": "I'm confused, is this method checking for all the embeds that should be present in a full projection or not? a full projection means that everything should be included or I'm overlooking something here? the method implementation for instance doesn't list itemtemplate, adminGroup, etc.", "author": "abollini", "createdAt": "2020-04-14T13:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjM3NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402916375", "bodyText": "just an extra space (nice to cleanup if possibile)", "author": "abollini", "createdAt": "2020-04-03T10:40:24Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "diffHunk": "@@ -100,7 +100,8 @@ private CommunityMatcher() { }\n                 \"logo\",\n                 \"self\",\n                 \"parentCommunity\",\n-                \"subcommunities\"\n+                \"subcommunities\",\n+                 \"adminGroup\"", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NDg5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406154897", "bodyText": "We cleaned it up.", "author": "KevinVdV", "createdAt": "2020-04-09T12:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNzUxOQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402917519", "bodyText": "move outside the if please", "author": "abollini", "createdAt": "2020-04-03T10:42:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CommunityBuilder.java", "diffHunk": "@@ -135,6 +135,11 @@ public static void deleteCommunity(UUID uuid) throws SQLException, IOException {\n             Community community = communityService.find(c, uuid);\n             if (community != null) {\n                 try {\n+                    if (community.getAdministrators() != null) {\n+                        Group adminGroup = community.getAdministrators();", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjA0OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406152048", "bodyText": "Moved.", "author": "KevinVdV", "createdAt": "2020-04-09T11:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNzkwMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402917903", "bodyText": "again verify if needed after #2726", "author": "abollini", "createdAt": "2020-04-03T10:43:28Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkflowItemRestRepositoryIT.java", "diffHunk": "@@ -771,7 +771,6 @@ public void createWorkflowItemTest() throws Exception {\n             // submit the workspaceitem to start the workflow\n             getClient(authToken)\n                     .perform(post(BASE_REST_SERVER_URL + \"/api/workflow/workflowitems\")\n-                            .param(\"projection\", \"full\")", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTkzMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402919932", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T10:47:26Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NDMzMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405974332", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMTQzOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402921438", "bodyText": "you should verify that the group has not been created with an extra get", "author": "abollini", "createdAt": "2020-04-03T10:50:35Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzODgyMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406138821", "bodyText": "An extra get was added.", "author": "KevinVdV", "createdAt": "2020-04-09T11:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMTQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMjkxMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402922913", "bodyText": "I'm fine with having extra metadata in one test as long as we verify that these metadata are also stored. But I recommend to make a test also sending empty metadata as this would be the normal scenario I guess from the angular application or other client as usually these special groups doesn't have extra metadata", "author": "abollini", "createdAt": "2020-04-03T10:53:34Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTcxMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406141712", "bodyText": "We added the matchers on the metadata.", "author": "KevinVdV", "createdAt": "2020-04-09T11:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMjkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzAyMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402923022", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T10:53:43Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NTcwNw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405975707", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzE5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402923199", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T10:54:00Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NTg0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405975845", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402923659", "bodyText": "double check that the group hasn't been created with a get", "author": "abollini", "createdAt": "2020-04-03T10:54:55Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjYxMA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406142610", "bodyText": "An extra get was added.", "author": "KevinVdV", "createdAt": "2020-04-09T11:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzg1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402923853", "bodyText": "double check that the group hasn't been created with a get", "author": "abollini", "createdAt": "2020-04-03T10:55:16Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNDQ3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402924472", "bodyText": "double check that the group hasn't been created", "author": "abollini", "createdAt": "2020-04-03T10:56:29Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNDc0MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402924740", "bodyText": "again double check that the group hasn't been created", "author": "abollini", "createdAt": "2020-04-03T10:56:55Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNTU0Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402925546", "bodyText": "it should be supported, maybe it would be fixed by the use of the AuthorizeUtil that I suggest in the Controller classes", "author": "abollini", "createdAt": "2020-04-03T10:58:23Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0Mzc5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406143796", "bodyText": "Done.", "author": "KevinVdV", "createdAt": "2020-04-09T11:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNTc4MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402925780", "bodyText": "it should be supported, maybe it would be fixed by the use of the AuthorizeUtil that I suggest in the Controller classes", "author": "abollini", "createdAt": "2020-04-03T10:58:47Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNjU2OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402926568", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:00:17Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDM2NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406144365", "bodyText": "An extra get was added.", "author": "KevinVdV", "createdAt": "2020-04-09T11:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNjYxNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402926614", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:00:22Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNzQ0NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402927444", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:01:56Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NjM5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405976399", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNzQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyNzk2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402927966", "bodyText": "again use additional metadata in one test and verify that they are stored but write most of test for the most frequent scenario where metadata are not used", "author": "abollini", "createdAt": "2020-04-03T11:02:53Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODE0OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928148", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:03:12Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NTQ3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406145472", "bodyText": "An extra get was added.", "author": "KevinVdV", "createdAt": "2020-04-09T11:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODI2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928267", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:03:21Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NjU1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405976557", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODQ1NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928454", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:03:38Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NjU5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405976592", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODY0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928641", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:03:55Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODc1MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928750", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:04:10Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyODg5OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402928898", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:04:29Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTA2NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929065", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:04:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTMwNw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929307", "bodyText": "again this should be supported, maybe will be solved by the use of the authorizeUtil", "author": "abollini", "createdAt": "2020-04-03T11:05:23Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjA3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146072", "bodyText": "It is now supported.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTQyMA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929420", "bodyText": "again this should be supported, maybe will be solved by the use of the authorizeUtil", "author": "abollini", "createdAt": "2020-04-03T11:05:35Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTU0OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929549", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:05:50Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTU5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929595", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:05:55Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTk5MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402929990", "bodyText": "this seems something that need to be moved to the collectionservice", "author": "abollini", "createdAt": "2020-04-03T11:06:42Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjkxMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406142911", "bodyText": "This was moved, we also altered the code in the Repository to make use of this new service method.", "author": "KevinVdV", "createdAt": "2020-04-09T11:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyOTk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTAxMA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931010", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:08:43Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTE4MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931181", "bodyText": "this group must be removed in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:09:06Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3Njk5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405976996", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTM0Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931343", "bodyText": "this group must be removed in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:09:27Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzAyOQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405977029", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTQ2MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931461", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:09:42Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTQ5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931496", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:09:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTYzNQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931635", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:10:05Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMTgzMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402931832", "bodyText": "double check that no group has been created", "author": "abollini", "createdAt": "2020-04-03T11:10:32Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMjg1NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402932855", "bodyText": "please add a comment to note that deleting a custom default read group is expected to restore the default to anonymous and also make a PR for the REST Contract to note that (I'm fine with this behavior we only need to have it documented)", "author": "abollini", "createdAt": "2020-04-03T11:12:43Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzgyOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405983828", "bodyText": "We added a note.", "author": "KevinVdV", "createdAt": "2020-04-09T06:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMjg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzEyOQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933129", "bodyText": "this can be verified", "author": "abollini", "createdAt": "2020-04-03T11:13:19Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzUzOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147538", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzE5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933197", "bodyText": "this can be verified", "author": "abollini", "createdAt": "2020-04-03T11:13:27Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzM2NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933364", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:13:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzQxNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933414", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:13:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzgwNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933804", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:14:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzQ5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405977499", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzMzkyMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402933922", "bodyText": "double check that no group has been created and maybe that the default anonymous permission are still here", "author": "abollini", "createdAt": "2020-04-03T11:14:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDMzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934331", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:15:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDI1OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405980258", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDM3NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934374", "bodyText": "this group must be deleted in a finally block", "author": "abollini", "createdAt": "2020-04-03T11:16:01Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDMxMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405980313", "bodyText": "This group will be deleted by the builders as this group is linked to the collection object.", "author": "KevinVdV", "createdAt": "2020-04-09T06:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDUwNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934506", "bodyText": "double check that no group has been created and maybe that the default anonymous permission are still here", "author": "abollini", "createdAt": "2020-04-03T11:16:18Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDU2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934562", "bodyText": "double check that no group has been created and maybe that the default anonymous permission are still here", "author": "abollini", "createdAt": "2020-04-03T11:16:25Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDc0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934741", "bodyText": "double check that no group has been created and maybe that the default anonymous permission are still here", "author": "abollini", "createdAt": "2020-04-03T11:16:47Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDgyOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402934828", "bodyText": "double check that no group has been created and maybe that the default anonymous permission are still here", "author": "abollini", "createdAt": "2020-04-03T11:16:59Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTA3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402935076", "bodyText": "please add a comment to note that deleting a custom default read group is expected to restore the default to anonymous and also make a PR for the REST Contract to note that (I'm fine with this behavior we only need to have it documented)", "author": "abollini", "createdAt": "2020-04-03T11:17:33Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTE5OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402935198", "bodyText": "this should be verified", "author": "abollini", "createdAt": "2020-04-03T11:17:45Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402935279", "bodyText": "this should be verified", "author": "abollini", "createdAt": "2020-04-03T11:17:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjIwMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146202", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjI4NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146284", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjM1MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146350", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjQxNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146414", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjQ3MA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146470", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjUyMA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146520", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjU3Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146577", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjYyNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406146626", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzU5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147592", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzYzMw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147633", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzY3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147676", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzcyOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147728", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0Nzc1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147759", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzgxOQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147819", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0Nzg0NA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147844", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0Nzg4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147887", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NzkzMA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406147930", "bodyText": "Verified now.", "author": "KevinVdV", "createdAt": "2020-04-09T11:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTc5OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402935798", "bodyText": "double check that the group is still here", "author": "abollini", "createdAt": "2020-04-03T11:19:00Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNjI5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402936295", "bodyText": "please apply the suggestion made for the other groups also to the workflow tests as I found the same approach / area of improvements", "author": "abollini", "createdAt": "2020-04-03T11:20:04Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForCollectionAndRole() throws Exception {", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0ODM4OA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406148388", "bodyText": "Done.", "author": "KevinVdV", "createdAt": "2020-04-09T11:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNjI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzE5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402937196", "bodyText": "due to the custom permission mechanism that exists for these communities / collections group we need to have IT also veryfing the ability to update such groups and add/remove member to them. If this is to much work for this specific PR I'm fine with postpone that to a dedicated ticket (please create it if so)", "author": "abollini", "createdAt": "2020-04-03T11:22:07Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2094 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submitters = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(submitters.getID(), submitters.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupNoContentTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionSubmittersGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmitterGroupCreateSubmitterGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group submittersGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(submittersGroup.getID(), submittersGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionSubmittersGroupCreateSubmittersGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmitterGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionSubmittersGroupTestCollectionAdmin() throws Exception {\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/submittersGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionSubmittersGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group submittersGroup = collectionService.createSubmitters(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/submittersGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    private Group createDefaultReadGroup(String itemGroupString, int defaultItemRead)\n+        throws SQLException, AuthorizeException {\n+        Group role = groupService.create(context);\n+        groupService.setName(role, \"COLLECTION_\" + collection.getID().toString() + \"_\" + itemGroupString +\n+            \"_DEFAULT_READ\");\n+\n+        // Remove existing privileges from the anonymous group.\n+        authorizeService.removePoliciesActionFilter(context, collection, defaultItemRead);\n+\n+        // Grant our new role the default privileges.\n+        authorizeService.addPolicy(context, collection, defaultItemRead, role);\n+        groupService.update(context, role);\n+        return role;\n+    }\n+\n+    @Test\n+    public void getCollectionItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupAnonymousGroupTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultItemReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group itemReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(itemReadGroup.getID(), itemReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultItemReadGroupCreateDefaultItemReadGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultItemReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+\n+        Group role = createDefaultReadGroup(itemGroupString, defaultItemRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/itemReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getCollectionBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupNoContentTest() throws Exception {\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionDefaultBitstreamReadGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupDcTitleUnprocessable()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessParentCommunityAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupSuccessCollectionAdmin()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group bitstreamReadGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher\n+                                .matchGroupEntry(bitstreamReadGroup.getID(), bitstreamReadGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessableName()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionDefaultBitstreamReadGroupCreateDefaultBitstreamReadGroupUnProcessablePermanent()\n+        throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        Group anon = groupService.findByName(context, Group.ANONYMOUS);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(anon.getID(), anon.getName())));\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestParentCommunityAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupTestCollectionAdmin() throws Exception {\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionDefaultBitstreamReadGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group role = createDefaultReadGroup(bitstreamGroupString, defaultBitstreamRead);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/bitstreamReadGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForCollectionAndRole() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(group.getID(), group.getName())));\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForCollectionAndRoleParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(group.getID(), group.getName())));\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForCollectionAndRoleWrongUUIDCollectionNotFound() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForCollectionAndRoleWrongRoleNotFound() throws Exception {\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/workflowGroups/wrongRole\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupCommunityAdmin() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(group.getID(), group.getName())));\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(group.getID(), group.getName())));\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupUnAuthorized() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getWorkflowGroupForbidden() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group workflowGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(workflowGroup.getID(), workflowGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupWrongCollectionId() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupWrongRole() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/wrongRole\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group workflowGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(workflowGroup.getID(), workflowGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group workflowGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\",\n+                                     GroupMatcher.matchGroupEntry(workflowGroup.getID(), workflowGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionWorkflowGroupCreateWorkflowGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionWorkflowGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionWorkflowGroupTestParentCommunityAdmin() throws Exception {\n+\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore\n+    @Test\n+    public void deleteCollectionWorkflowGroupTestCollectionAdmin() throws Exception {\n+\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void deleteCollectionWorkflowGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteCollectionWorkflowGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionWorkflowGroupNotFoundTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = workflowService.createWorkflowRoleGroup(context, collection, \"reviewer\");\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/collections/\" + UUID.randomUUID() + \"/workflowGroups/reviewer\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODIzNA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405998234", "bodyText": "@abollini Are you indicating that we should create a test that community / collection admins can add members to these groups that are linked to a community / collection ?", "author": "KevinVdV", "createdAt": "2020-04-09T07:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3ODIwMQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r407078201", "bodyText": "yes, your understanding is correct. Please include adding and removing of members as well as edit the group metadata. Again I'm also fine with a separate ticket for that", "author": "abollini", "createdAt": "2020-04-11T15:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3ODIyNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r407078226", "bodyText": "yes, your understanding is correct. Please include adding and removing of members as well as edit the group metadata. Again I'm also fine with a separate ticket for that", "author": "abollini", "createdAt": "2020-04-11T15:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzYyMg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r402937622", "bodyText": "the same consideration/suggestion done for CollectionGroupRestControllerIT apply here so I would be happy to review that again after that these feedback have been processed", "author": "abollini", "createdAt": "2020-04-03T11:23:06Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityAdminGroupRestControllerIT extends AbstractControllerIntegrationTest {", "originalCommit": "f11707b83a5ca510f6a5f17938fb935584756461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "url": "https://github.com/DSpace/DSpace/commit/14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "message": "[Task 70232] applied feedback with regards to the collection and community groups", "committedDate": "2020-04-08T11:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MzExOA==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405593118", "bodyText": "Could we name this method similar to the other methods in this Util class?  It probably should be named something like authorizeManageGroup.... as you can see almost all utility methods in this class start with authorizeManage* followed by the thing they are checking management permissions on.", "author": "tdonohue", "createdAt": "2020-04-08T15:02:16Z", "path": "dspace-api/src/main/java/org/dspace/app/util/AuthorizeUtil.java", "diffHunk": "@@ -525,4 +532,73 @@ public static void authorizeReinstateItem(Context context, Item item)\n             }\n         }\n     }\n+\n+    /**\n+     * This method will check whether the current user is authorized to manage the default read group\n+     * @param context       The relevant DSpace context\n+     * @param collection    The collection for which this will be checked\n+     * @throws AuthorizeException   If something goes wrong\n+     * @throws SQLException If something goes wrong\n+     */\n+    public static void authorizeManageDefaultReadGroup(Context context,\n+                                                      Collection collection) throws AuthorizeException, SQLException {\n+        AuthorizeService authorizeService = AuthorizeServiceFactory.getInstance().getAuthorizeService();\n+        authorizeService.authorizeAction(context, collection, Constants.ADMIN);\n+    }\n+\n+    /**\n+     * This method checks whether the current user has sufficient rights to modify the group.\n+     * Depending on the kind of group and due to delegated administration, separate checks need to be done to verify\n+     * whether the user is allowed to modify the group.\n+     *\n+     * @param context the context of which the user will be checked\n+     * @param group   the group to be checked\n+     * @throws SQLException\n+     * @throws AuthorizeException\n+     */\n+    public static void checkAuthorizationOnGroup(Context context, Group group) throws SQLException, AuthorizeException {", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNjA4NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405606085", "bodyText": "Please remove this comment, as you've also removed the @Ignore, so this seems to be supported.", "author": "tdonohue", "createdAt": "2020-04-08T15:19:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -373,11 +420,12 @@ public void deleteCollectionAdminGroupTest() throws Exception {\n \n \n     // This is currently not supported in DSpace API", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNzI3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405607271", "bodyText": "Can this @Ignore also be removed now (along with the comment just above it)?", "author": "tdonohue", "createdAt": "2020-04-08T15:21:31Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -391,8 +439,10 @@ public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exceptio\n     @Ignore", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwODYyNQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405608625", "bodyText": "Again, please remove this comment as it's no longer valid after the @Ignore was removed.", "author": "tdonohue", "createdAt": "2020-04-08T15:23:15Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -763,11 +879,12 @@ public void deleteCollectionSubmittersGroupTestParentCommunityAdmin() throws Exc\n     }\n \n     // This is currently not supported in DSpace API", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwOTU2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405609569", "bodyText": "Again, please remove this invalid comment", "author": "tdonohue", "createdAt": "2020-04-08T15:24:28Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -1165,41 +1342,49 @@ public void deleteCollectionDefaultItemReadGroupTest() throws Exception {\n \n \n     // This is currently not supported in DSpace API", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMDM5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405610395", "bodyText": "Please again remove the invalid comment here.", "author": "tdonohue", "createdAt": "2020-04-08T15:25:31Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -1587,41 +1825,50 @@ public void deleteCollectionDefaultBitstreamReadGroupTest() throws Exception {\n \n \n     // This is currently not supported in DSpace API", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMTQwNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405611406", "bodyText": "Can this @Ignore be removed now?", "author": "tdonohue", "createdAt": "2020-04-08T15:26:58Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -319,8 +370,10 @@ public void deleteCommunityAdminGroupTest() throws Exception {\n     @Ignore", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDQwNg==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r405614406", "bodyText": "I'm not sure this is needed.  Why do we need to commit to the indexing service here?  We don't seem to need to do this when deleting any other type of Group (see other delete methods in this same Builder).  If it's unnecessary, I'd recommend removing it", "author": "tdonohue", "createdAt": "2020-04-08T15:30:49Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CollectionBuilder.java", "diffHunk": "@@ -179,6 +192,28 @@ public void deleteWorkflowGroups(Collection collection) throws Exception {\n         indexingService.commit();\n     }\n \n+    public void deleteDefaultReadGroups(Collection collection) throws Exception {\n+\n+        try (Context c = new Context()) {\n+            c.turnOffAuthorisationSystem();\n+\n+            Group defaultItemReadGroup = groupService.findByName(c, \"COLLECTION_\" +\n+                collection.getID().toString() + \"_ITEM_DEFAULT_READ\");\n+            Group defaultBitstreamReadGroup = groupService.findByName(c, \"COLLECTION_\" +\n+                collection.getID().toString() + \"_BITSTREAM_DEFAULT_READ\");\n+            if (defaultItemReadGroup != null) {\n+                groupService.delete(c, defaultItemReadGroup);\n+            }\n+            if (defaultBitstreamReadGroup != null) {\n+                groupService.delete(c, defaultBitstreamReadGroup);\n+            }\n+\n+            c.complete();\n+        }\n+\n+        indexingService.commit();", "originalCommit": "14a8b720bc839f6b8a0d75696af4b82bf7a1d08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7de471ddafe8652d651b8952ccda3e5670fd5f54", "url": "https://github.com/DSpace/DSpace/commit/7de471ddafe8652d651b8952ccda3e5670fd5f54", "message": "[Task 70232] moved createReadGroup to the collectionService and used this in both the Repository class and the IT class", "committedDate": "2020-04-09T08:10:18Z", "type": "commit"}, {"oid": "3667ce4b40b082e4926d5d0ee59648fe1470a42c", "url": "https://github.com/DSpace/DSpace/commit/3667ce4b40b082e4926d5d0ee59648fe1470a42c", "message": "Removing some outdated comments & added a missing override", "committedDate": "2020-04-09T12:12:35Z", "type": "commit"}, {"oid": "5afb016beea06d4ab0775ab5934d5fc10d2687ac", "url": "https://github.com/DSpace/DSpace/commit/5afb016beea06d4ab0775ab5934d5fc10d2687ac", "message": "[Task 70353] applied feedback to the community and collection groups", "committedDate": "2020-04-09T13:02:37Z", "type": "commit"}, {"oid": "16675e405f518ee9943e09eb77c5d40e4d553033", "url": "https://github.com/DSpace/DSpace/commit/16675e405f518ee9943e09eb77c5d40e4d553033", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles\n\nConflicts:\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "committedDate": "2020-04-09T13:04:34Z", "type": "commit"}, {"oid": "a74f11e11a12dbfe8017c132348c994b834e1874", "url": "https://github.com/DSpace/DSpace/commit/a74f11e11a12dbfe8017c132348c994b834e1874", "message": "Fixed checkstyle", "committedDate": "2020-04-09T13:28:01Z", "type": "commit"}, {"oid": "b0baab079a7b88c19f49ea004772a2d0b3e850ad", "url": "https://github.com/DSpace/DSpace/commit/b0baab079a7b88c19f49ea004772a2d0b3e850ad", "message": "undo typo", "committedDate": "2020-04-09T13:28:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzOTQ5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406439495", "bodyText": "I might be mistaken, but I think this @Ignore (and the comment above it) can also be removed now.", "author": "tdonohue", "createdAt": "2020-04-09T19:50:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -0,0 +1,2392 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.JsonPath.read;\n+import static org.dspace.app.rest.matcher.MetadataMatcher.matchMetadata;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.matcher.GroupMatcher;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.model.MetadataRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Constants;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.workflow.WorkflowService;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CollectionGroupRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private WorkflowService workflowService;\n+\n+    Collection collection;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context).withName(\"test\").build();\n+        collection = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupTestCollectionAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupUnAuthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupNoContentTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void getCollectionAdminGroupWrongCollectionUuidResourceNotFoundTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\"))\n+                        .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupExtraMetadataSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$.metadata\", allOf(\n+                            matchMetadata(\"dc.description\", \"testingDescription\"),\n+                            matchMetadata(\"dc.subject\", \"testSubject\"))))\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccess() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupDcTitleUnprocessable() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+        metadataRest.put(\"dc.title\", new MetadataValueRest(\"testTitle\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+    }\n+\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessParentCommunityAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupSuccessCollectionAdmin() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+\n+        AtomicReference<UUID> idRef = new AtomicReference<>();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isCreated())\n+                        .andDo(result -> idRef\n+                            .set(UUID.fromString(read(result.getResponse().getContentAsString(), \"$.id\")))\n+                        );\n+        Group adminGroup = groupService.find(context, idRef.get());\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(\n+                            jsonPath(\"$\", GroupMatcher.matchGroupEntry(adminGroup.getID(), adminGroup.getName())));\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnAuthorized() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        getClient().perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                .content(mapper.writeValueAsBytes(groupRest))\n+                                .contentType(contentType))\n+                   .andExpect(status().isUnauthorized());\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                   .andExpect(status().isNoContent());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupForbidden() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupNotFound() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + UUID.randomUUID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isNotFound());\n+\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessableName() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setName(\"Fail\");\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    @Test\n+    public void postCollectionAdminGroupCreateAdminGroupUnProcessablePermanent() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        GroupRest groupRest = new GroupRest();\n+        groupRest.setPermanent(true);\n+        MetadataRest metadataRest = new MetadataRest();\n+        metadataRest.put(\"dc.description\", new MetadataValueRest(\"testingDescription\"));\n+        metadataRest.put(\"dc.subject\", new MetadataValueRest(\"testSubject\"));\n+\n+        groupRest.setMetadata(metadataRest);\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(post(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\")\n+                                     .content(mapper.writeValueAsBytes(groupRest))\n+                                     .contentType(contentType))\n+                        .andExpect(status().isUnprocessableEntity());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+    }\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+\n+    @Test\n+    public void deleteCollectionAdminGroupTestParentCommunityAdmin() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(delete(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/core/collections/\" + collection.getID() + \"/adminGroup\"))\n+                        .andExpect(status().isNoContent());\n+    }\n+\n+    // This is currently not supported in DSpace API\n+    @Ignore", "originalCommit": "b0baab079a7b88c19f49ea004772a2d0b3e850ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2MDk2Mw==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r406660963", "bodyText": "@tdonohue No we cannot remove it from this specific test as it currently is. What this test tests is that a collection administrator can remove the admin group from a collection. If he was able to do this he would be removing access to himself (so this currently isn't allowed in the API).\nWhat we can do, is that we alter the test to ensure that a collection admin cannot perform this action (which is what the API currently enforces) what do you think ?", "author": "KevinVdV", "createdAt": "2020-04-10T08:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzOTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1MjM3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2722#discussion_r407552379", "bodyText": "@KevinVdV : I'd recommend altering the test to ensure the Collection Admin cannot perform this action. That makes more sense as it's testing how the API currently works.  In the future if the behavior is changed, then this test can be changed.  Essentially, it's better to have tests the test the current behavior than to have @Ignored tests (which obviously never run, so they don't really test anything).", "author": "tdonohue", "createdAt": "2020-04-13T15:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzOTQ5NQ=="}], "type": "inlineReview"}, {"oid": "f14097c9db5b892dfddb7665c0217c3808080de5", "url": "https://github.com/DSpace/DSpace/commit/f14097c9db5b892dfddb7665c0217c3808080de5", "message": "[Task 70387] applied feedback to the IT in CollectionGroupRestControllerIT", "committedDate": "2020-04-14T11:02:07Z", "type": "commit"}, {"oid": "dd00ab2bd3f4b763e4ce11f50dd49a1126e190c8", "url": "https://github.com/DSpace/DSpace/commit/dd00ab2bd3f4b763e4ce11f50dd49a1126e190c8", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69349_edit-community-assign-roles", "committedDate": "2020-04-16T09:12:15Z", "type": "commit"}, {"oid": "802e641a3bf04fa1c13bcef93e4753c7543d7590", "url": "https://github.com/DSpace/DSpace/commit/802e641a3bf04fa1c13bcef93e4753c7543d7590", "message": "Fix test issues after master merge", "committedDate": "2020-04-16T11:43:45Z", "type": "commit"}]}