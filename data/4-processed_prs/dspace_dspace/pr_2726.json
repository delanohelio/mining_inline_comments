{"pr_number": 2726, "pr_title": "Subresources should obey access restrictions", "pr_createdAt": "2020-03-30T15:50:14Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2726", "timeline": [{"oid": "f5ccb432f26d377905cd4c453b2c7d2c21efdea9", "url": "https://github.com/DSpace/DSpace/commit/f5ccb432f26d377905cd4c453b2c7d2c21efdea9", "message": "[Task 69976] initial implementation of extra permission check for subresources", "committedDate": "2020-03-24T13:44:34Z", "type": "commit"}, {"oid": "984de8434d315b549ae8ea55f020619ab39dcd55", "url": "https://github.com/DSpace/DSpace/commit/984de8434d315b549ae8ea55f020619ab39dcd55", "message": "[Task 69976] moved uppercase instance to RestObjectPermissionEvaluatorPlugin and hid null values from the paged list", "committedDate": "2020-03-25T08:30:21Z", "type": "commit"}, {"oid": "e4a63316991f3bce5dc244616dcc4437546f6600", "url": "https://github.com/DSpace/DSpace/commit/e4a63316991f3bce5dc244616dcc4437546f6600", "message": "[Task 69976] start fixing tests and permission checks", "committedDate": "2020-03-25T13:01:51Z", "type": "commit"}, {"oid": "d36fffa3486135286b52be2847ed28e759feca0b", "url": "https://github.com/DSpace/DSpace/commit/d36fffa3486135286b52be2847ed28e759feca0b", "message": "[Task 70058] added permisson evaluators for several BaseObjectRest objects", "committedDate": "2020-03-26T07:19:09Z", "type": "commit"}, {"oid": "e79caf9970783d9103180b7c41bd55001eaca180", "url": "https://github.com/DSpace/DSpace/commit/e79caf9970783d9103180b7c41bd55001eaca180", "message": "[Task 70058] start fixing tests + refactor toRestPage methods in utils to properly handle and skip null values", "committedDate": "2020-03-26T12:05:03Z", "type": "commit"}, {"oid": "7e5db834644eff2d9be23b0380e2d35399b2050d", "url": "https://github.com/DSpace/DSpace/commit/7e5db834644eff2d9be23b0380e2d35399b2050d", "message": "[Task 70058] fixed the majority of the tests", "committedDate": "2020-03-27T08:10:09Z", "type": "commit"}, {"oid": "3492b6d8bc1c88ec1ad076284c75c8a24e1f42cf", "url": "https://github.com/DSpace/DSpace/commit/3492b6d8bc1c88ec1ad076284c75c8a24e1f42cf", "message": "[Task 70058] fixed the tests and checkstyle", "committedDate": "2020-03-27T09:05:13Z", "type": "commit"}, {"oid": "5656e3567450fd8f7bea85013e46aeb1674de382", "url": "https://github.com/DSpace/DSpace/commit/5656e3567450fd8f7bea85013e46aeb1674de382", "message": "[Task 70087] added ITs for the subresource permissions", "committedDate": "2020-03-30T12:37:00Z", "type": "commit"}, {"oid": "165e39291013ece0b4120ea549a6968b3594ced9", "url": "https://github.com/DSpace/DSpace/commit/165e39291013ece0b4120ea549a6968b3594ced9", "message": "layout changes", "committedDate": "2020-03-30T13:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyOTcxOA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400429718", "bodyText": "Please add JavaDoc to this new method. It's also important to contrast it against the other toRestPage() method, so please consider updating one or both JavaDocs to better describe each method's usage.", "author": "tdonohue", "createdAt": "2020-03-30T19:11:37Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java", "diffHunk": "@@ -97,33 +111,42 @@\n      *\n      * @param modelObjects the list of model objects.\n      * @param pageable the pageable.\n-     * @param total the total number of items.\n      * @param projection the projection to use.\n      * @param <M> the model object class.\n      * @param <R> the rest object class.\n      * @return the page.\n      * @throws IllegalArgumentException if there is no compatible converter.\n      * @throws ClassCastException if the converter's return type is not compatible with the inferred return type.\n      */\n-    public <M, R> Page<R> toRestPage(List<M> modelObjects, Pageable pageable, long total, Projection projection) {\n-        return new PageImpl<>(modelObjects, pageable, total).map((object) -> toRest(object, projection));\n+    public <M, R> Page<R> toRestPage(List<M> modelObjects, Pageable pageable, Projection projection) {\n+        List<R> transformedList = new LinkedList<>();\n+        for (M modelObject : modelObjects) {\n+            R transformedObject = toRest(modelObject, projection);\n+            if (transformedObject != null) {\n+                transformedList.add(transformedObject);\n+            }\n+        }\n+        if (pageable == null) {\n+            pageable = utils.getPageable(pageable);\n+        }\n+        return utils.getPage(transformedList, pageable);\n     }\n \n-    /**\n-     * Converts a list of model objects to a page of rest objects using the given {@link Projection}.\n-     *\n-     * @param modelObjects the page of model objects.\n-     * @param projection the projection to use.\n-     * @param <M> the model object class.\n-     * @param <R> the rest object class.\n-     * @return the page.\n-     * @throws IllegalArgumentException if there is no compatible converter.\n-     * @throws ClassCastException if the converter's return type is not compatible with the inferred return type.\n-     */\n-    public <M, R> Page<R> toRestPage(Page<M> modelObjects, Projection projection) {\n-        return modelObjects.map((object) -> toRest(object, projection));\n+    public <M, R> Page<R> toRestPage(List<M> modelObjects, Pageable pageable, long total, Projection projection) {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMDc1NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400430754", "bodyText": "Please add JavaDocs to describe this new Plugin & what it is checking for.", "author": "tdonohue", "createdAt": "2020-03-30T19:13:30Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/AuthenticationStatusRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.AuthenticationStatusRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuthenticationStatusRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMTU4MA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400431580", "bodyText": "Again, please add JavaDocs.  It's important to also contrast this plugin with AuthenticationStatusRestPermissionEvaluatorPlugin, as they have very similar names. So, it'd be good to better understand what each is doing & why.", "author": "tdonohue", "createdAt": "2020-03-30T19:14:56Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/AuthnRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.AuthnRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuthnRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMTg3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400431871", "bodyText": "Again, please add Javadocs.  (Sidenote, I'll stop here & I won't add this to every new *Plugin....it looks like most of them need JavaDocs though!)", "author": "tdonohue", "createdAt": "2020-03-30T19:15:29Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/BitstreamFormatRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.BitstreamFormatRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BitstreamFormatRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMjc5MA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400432790", "bodyText": "This needs JavaDocs too, and also should likely have an EvaluatorPlugin suffix (just like other such Plugins)", "author": "tdonohue", "createdAt": "2020-03-30T19:17:09Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/EntityTypeRestPermissionEvaluator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.EntityTypeRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class EntityTypeRestPermissionEvaluator extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMzE0NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400433144", "bodyText": "Same here, JavaDocs & please change suffix to EvaluatorPlugin", "author": "tdonohue", "createdAt": "2020-03-30T19:17:32Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/ExternalSourceEntryRestPermissionEvaluator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.ExternalSourceEntryRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ExternalSourceEntryRestPermissionEvaluator extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzNzY3NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400437674", "bodyText": "I'm not sure I understand the JavaDoc description of this plugin or the purpose of all these individualized plugins. Could you describe why these are needed, as they don't seem to actually be checking any permissions? Instead, they seem to be looking to simply see if the targetType is a specific string value.", "author": "tdonohue", "createdAt": "2020-03-30T19:23:28Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/AuthorizationFeatureRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.AuthorizationFeatureRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class determines that any AuthorizationFeatureRest object can be viewed as it'll be a subresource of\n+ * AuthorizationRest", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMjkzNg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402602936", "bodyText": "Could we update the JavaDocs here to match that same/similar description as the other EvaluatorPlugin classes?  I like the new descriptions added to other classes, but this one doesn't seem to be as informative.", "author": "tdonohue", "createdAt": "2020-04-02T21:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzNzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NDkyNA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426874924", "bodyText": "This class needs updated JavaDocs, as noted above.  I think it should say something like: \"This class will handle calls made to AuthorizationRest endpoints. It will return true because access can be granted anytime it's linked from another resource.\"", "author": "tdonohue", "createdAt": "2020-05-18T20:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzNzY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzODE1Ng==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400438156", "bodyText": "Same here, JavaDocs and rename to EvaluatorPlugin", "author": "tdonohue", "createdAt": "2020-03-30T19:24:14Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/ExternalSourceRestPermissionEvaluator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.ExternalSourceRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ExternalSourceRestPermissionEvaluator extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzODI5MA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r400438290", "bodyText": "Same here, JavaDocs and rename to EvaluatorPlugin", "author": "tdonohue", "createdAt": "2020-03-30T19:24:27Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/FacetConfigurationRestPermissionEvaluator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.FacetConfigurationRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FacetConfigurationRestPermissionEvaluator extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "165e39291013ece0b4120ea549a6968b3594ced9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1abdf556bda228a507439bd2cd551ffe49609673", "url": "https://github.com/DSpace/DSpace/commit/1abdf556bda228a507439bd2cd551ffe49609673", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69976_subresource-permissions\n\nConflicts:\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityCollectionLinkRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionRestRepositoryIT.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityRestRepositoryIT.java", "committedDate": "2020-03-31T08:12:38Z", "type": "commit"}, {"oid": "34d8bd33bca9f1bb1a136c26de796e2d742b2db3", "url": "https://github.com/DSpace/DSpace/commit/34d8bd33bca9f1bb1a136c26de796e2d742b2db3", "message": "[Task 70087] fixed checkstyle after master merge", "committedDate": "2020-03-31T08:13:04Z", "type": "commit"}, {"oid": "563d3f12410258808c34fff4ecbc45f435ac11bc", "url": "https://github.com/DSpace/DSpace/commit/563d3f12410258808c34fff4ecbc45f435ac11bc", "message": "[Task 70148] processed community feedback on Subresource permissions", "committedDate": "2020-04-02T14:25:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDE3OA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402600178", "bodyText": "I'm not sure about this log message.  Do we really want an info message for every access denied on every object?  Also, this looks to just print out the class name (like \"ItemRest\") instead of any useful info.  I think we should either enhance the message here, or consider removing it.", "author": "tdonohue", "createdAt": "2020-04-02T21:15:00Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java", "diffHunk": "@@ -86,6 +93,13 @@\n         M transformedModel = projection.transformModel(modelObject);\n         DSpaceConverter<M, R> converter = requireConverter(modelObject.getClass());\n         R restObject = converter.convert(transformedModel, projection);\n+        if (restObject instanceof BaseObjectRest) {\n+            if (!dSpacePermissionEvaluator.hasPermission(SecurityContextHolder.getContext().getAuthentication(),\n+                                                         restObject, \"READ\")) {\n+                log.info(\"Access denied on \" + restObject.getClass());", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzkzMA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r425927930", "bodyText": "I'm still not sure this log.info message is necessary.  It doesn't seem to provide any useful information.  Should we just remove it?", "author": "tdonohue", "createdAt": "2020-05-15T16:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NjgxNQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426746815", "bodyText": "It has been adjusted to log.debug, with the ID as well\nThis would still allow someone to verify the problem if some data is not embedded and it's not clear why (so they can see it's due to an access restriction)", "author": "benbosman", "createdAt": "2020-05-18T16:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMjEzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402602131", "bodyText": "I'm confused about this change. Why did we remove the aborting of this new Context?  It seems like we are now leaving a Context open in this method.", "author": "tdonohue", "createdAt": "2020-04-02T21:19:00Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java", "diffHunk": "@@ -186,10 +186,6 @@ public Process getProcess() {\n             return processService.find(context, processId);\n         } catch (SQLException e) {\n             log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be found\", e);\n-        } finally {\n-            if (context.isValid()) {\n-                context.abort();\n-            }", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3MzU1OA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426873558", "bodyText": "Just realized this question wasn't answered either.  Looking at this method, my best guess is you might need the returned Process to be attached to an active Context.  If that's the case, this getProcess() method likely should take a Context object as a parameter.  Otherwise, this Context may never be closed, which could result in odd behaviors.", "author": "tdonohue", "createdAt": "2020-05-18T20:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMjEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzY4Mw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402603683", "bodyText": "It looks like JavaDocs were accidentally forgotten on this class.", "author": "tdonohue", "createdAt": "2020-04-02T21:22:08Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/ScriptRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.ScriptRest;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ScriptRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NDI5MA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426874290", "bodyText": "Another old request. New class needs JavaDocs please", "author": "tdonohue", "createdAt": "2020-05-18T20:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzY4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTE4MQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402605181", "bodyText": "If this is going to be left in this PR, then we should create a JIRA ticket to describe the problem with the test, so that it can be assigned for a followup PR.", "author": "tdonohue", "createdAt": "2020-04-02T21:25:15Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ResourcePolicyRestRepositoryIT.java", "diffHunk": "@@ -503,7 +504,9 @@ public void findResourcePoliciesOfOneResourceWithoutActionTest() throws Exceptio\n             .andExpect(jsonPath(\"$.page.totalElements\", is(2)));\n     }\n \n+    // This test is currently not working as intended, needs to be reviewed.\n     @Test\n+    @Ignore", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2Njk4NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403466984", "bodyText": "yes, it is important that get information about which is the wrong assumption in such test because only if the test is conceptually wrong we should remove / or flag as ignored (to be updated in a later PR) otherwise it is a flag that something is wrong in this PR", "author": "abollini", "createdAt": "2020-04-04T12:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzE2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r402607169", "bodyText": "I don't understand the new setup() method here, as it doesn't seem to correspond with the new changes to ConverterService (but maybe I'm misunderstanding?).  Could you add comments as to why we need to mock the ServletRequest? (It's just not obvious to me, since the ServletRequest doesn't seem to be used in the new changes to ConverterService)", "author": "tdonohue", "createdAt": "2020-04-02T21:29:27Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/converter/ConverterServiceIT.java", "diffHunk": "@@ -57,6 +62,16 @@\n     @Mock\n     private Object mockEmbeddedResource;\n \n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Before\n+    public void setup() {\n+        MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest();\n+        mockHttpServletRequest.setAttribute(\"dspace.context\", new Context());\n+        MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse();\n+        requestService.startRequest(mockHttpServletRequest, mockHttpServletResponse);", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2Nzk2MQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403467961", "bodyText": "yes, I also need help to understand the needs here and probably it will be good to add a javadoc or comment in the code for other that will check that at a later time.\nIt seems to me that you need to have a separate context bound to the \"thread\" for this IT but I don't see where this context is released", "author": "abollini", "createdAt": "2020-04-04T13:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MDM5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r418690397", "bodyText": "I agree with @tdonohue and @abollini that adding comments would be helping to understand what is going on.", "author": "crosenbeck", "createdAt": "2020-05-01T19:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDkzOQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r425930939", "bodyText": "This looks to have unresolved feedback.  I think I need inline comments here to understand why these changes are needed... as noted they don't seem to correspond to the changes you've made to ConverterService itself.", "author": "tdonohue", "createdAt": "2020-05-15T16:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0OTE3NQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426749175", "bodyText": "Raf has included details explaining the change in 34bf7dd#diff-91f223912e7443237a64a07d2d098f4fR70", "author": "benbosman", "createdAt": "2020-05-18T16:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2Mzc5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403463792", "bodyText": "it is never used", "author": "abollini", "createdAt": "2020-04-04T12:19:16Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -896,6 +896,17 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n \n     }\n \n+    private Page<? extends RestModel> getRestModelsWithoutNullValues(Pageable page,", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NDQ4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403464482", "bodyText": "I guess this change is not really related to this PR but I'm unable to get more information on the commits description... can you explain to purpose? if it is a bug fix, can you point to a test that will verify the change made?", "author": "abollini", "createdAt": "2020-04-04T12:27:01Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ScriptProcessesController.java", "diffHunk": "@@ -55,8 +61,10 @@\n         if (log.isTraceEnabled()) {\n             log.trace(\"Starting Process for Script with name: \" + scriptName);\n         }\n-        ProcessRest processRest = scriptRestRepository.startProcess(scriptName);\n+        Context context = ContextUtil.obtainContext(requestService.getCurrentRequest().getServletRequest());", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NDkzNw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403464937", "bodyText": "do this mean that we are assuming that READ permission are required on the embedded object? how this match with the permission that can be defined (annotated) in the link repository?", "author": "abollini", "createdAt": "2020-04-04T12:31:44Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java", "diffHunk": "@@ -86,6 +93,13 @@\n         M transformedModel = projection.transformModel(modelObject);\n         DSpaceConverter<M, R> converter = requireConverter(modelObject.getClass());\n         R restObject = converter.convert(transformedModel, projection);\n+        if (restObject instanceof BaseObjectRest) {\n+            if (!dSpacePermissionEvaluator.hasPermission(SecurityContextHolder.getContext().getAuthentication(),\n+                                                         restObject, \"READ\")) {", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDA1Mg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r404144052", "bodyText": "In order for a user to be able to retrieve the embedded object, READ permissions are indeed required.\nThis corresponds to e.g. https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ItemRestRepository.java#L102\nBut in some cases, the main findOne is not accessible while the resource is meant to be accessible through links, e.g. https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/AuthorizationFeatureRestRepository.java#L54", "author": "benbosman", "createdAt": "2020-04-06T14:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MzU5Mw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r404163593", "bodyText": "yes, what I'm suggesting here is to detect which permission are required looking to https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ItemRestRepository.java#L102 instead than hardcode here this READ permission", "author": "abollini", "createdAt": "2020-04-06T15:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NDkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjE1Mg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403466152", "bodyText": "can you help me to understand why is this change required? why IT cannot use anymore the converterService and need to go directly to the specific converter?", "author": "abollini", "createdAt": "2020-04-04T12:43:50Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -68,8 +70,13 @@\n     private AuthorizationFeatureService authorizationFeatureService;\n \n     @Autowired\n-    private ConverterService converterService;\n+    private SiteConverter siteConverter;", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NzI0Ng==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r404147246", "bodyText": "This was in the original description.\nPermissions are retrieved based on the request. ITs using the ConverterService don't have a request. This implies no permissions can be included, and the information cannot be returned unless it's publicly accessible.\nThe SiteConverter is deeper inline code, and doesn't use the ConverterService nor the permissions. So it can still be used to create the Rest resource. It would have been better if Converters were never used in the ITs, but refactoring that would fall outside the scope", "author": "benbosman", "createdAt": "2020-04-06T14:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjM1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403466357", "bodyText": "why this test should change? can you please update the previous description to reflect the right expected behavior (I guess that we don't want to get the embargoed item here)", "author": "abollini", "createdAt": "2020-04-04T12:46:12Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BrowsesResourceControllerIT.java", "diffHunk": "@@ -364,23 +364,18 @@ public void findBrowseByTitleItems() throws Exception {\n                    //We expect the content type to be \"application/hal+json;charset=UTF-8\"\n                    .andExpect(content().contentType(contentType))\n \n-                   //We expect only the two public items and the embargoed item to be present\n                    .andExpect(jsonPath(\"$.page.size\", is(20)))\n-                   .andExpect(jsonPath(\"$.page.totalElements\", is(3)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(2)))", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjY3NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403466674", "bodyText": "you should add a check to verify that the embargoed item is not here (as you are fixing the test removing it from the \"found\" check)", "author": "abollini", "createdAt": "2020-04-04T12:49:23Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BrowsesResourceControllerIT.java", "diffHunk": "@@ -364,23 +364,18 @@ public void findBrowseByTitleItems() throws Exception {\n                    //We expect the content type to be \"application/hal+json;charset=UTF-8\"\n                    .andExpect(content().contentType(contentType))\n \n-                   //We expect only the two public items and the embargoed item to be present\n                    .andExpect(jsonPath(\"$.page.size\", is(20)))\n-                   .andExpect(jsonPath(\"$.page.totalElements\", is(3)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(2)))\n                    .andExpect(jsonPath(\"$.page.totalPages\", is(1)))\n                    .andExpect(jsonPath(\"$.page.number\", is(0)))\n \n-                   //Verify that the title of the public and embargoed items are present and sorted descending\n                    .andExpect(jsonPath(\"$._embedded.items\",\n                                        contains(ItemMatcher.matchItemWithTitleAndDateIssued(publicItem2,\n                                                                                             \"Public item 2\",\n                                                                                             \"2016-02-13\"),\n                                                 ItemMatcher.matchItemWithTitleAndDateIssued(publicItem1,\n                                                                                             \"Public item 1\",\n-                                                                                            \"2017-10-17\"),\n-                                                ItemMatcher.matchItemWithTitleAndDateIssued(embargoedItem,\n-                                                                                            \"An embargoed publication\",\n-                                                                                            \"2017-08-10\"))))\n+                                                                                            \"2017-10-17\"))))\n \n                    //The private and internal items must not be present\n                    .andExpect(jsonPath(\"$._embedded.items[*].metadata\", Matchers.allOf(", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NzM0OQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403467349", "bodyText": "we need to test that anonymous cannot use this endpoint (as this fix seems to imply) and we should also add test for a normal user able to follow its own redirect. This can be also noted in a separate ticket", "author": "abollini", "createdAt": "2020-04-04T12:56:38Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/UUIDLookupRestControllerIT.java", "diffHunk": "@@ -237,7 +237,9 @@ public void testEPersonUUID() throws Exception {\n         String uuid = eperson.getID().toString();\n         String epersonDetail = REST_SERVER_URL + \"eperson/epersons/\" + uuid;\n \n-        getClient().perform(get(\"/api/dso/find?uuid={uuid}\",uuid))\n+        String token = getAuthToken(admin.getEmail(), password);", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NzM5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403467397", "bodyText": "we should have test with the anonymous user and normal user as well. This can be noted in a separated ticket", "author": "abollini", "createdAt": "2020-04-04T12:57:24Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/UUIDLookupRestControllerIT.java", "diffHunk": "@@ -262,7 +264,9 @@ public void testGroupUUID() throws Exception {\n         String uuid = group.getID().toString();\n         String groupDetail = REST_SERVER_URL + \"eperson/groups/\" + uuid;\n \n-        getClient().perform(get(\"/api/dso/find?uuid={uuid}\",uuid))\n+        String token = getAuthToken(admin.getEmail(), password);", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NzcxMA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r403467710", "bodyText": "we need to have test to check the access to an \"inprogress\" version that is the case (wrongly) checked by the previous version of this test. I'm ok to just note that in a separate ticket.", "author": "abollini", "createdAt": "2020-04-04T13:00:47Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/VersionRestRepositoryIT.java", "diffHunk": "@@ -166,6 +175,10 @@ public void findOneForbiddenTest() throws Exception {\n     @Test\n     public void versionForItemTest() throws Exception {\n \n+        context.turnOffAuthorisationSystem();", "originalCommit": "563d3f12410258808c34fff4ecbc45f435ac11bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50c340a8b3768c44bbca7afb161975cd43fc40eb", "url": "https://github.com/DSpace/DSpace/commit/50c340a8b3768c44bbca7afb161975cd43fc40eb", "message": "Merge remote-tracking branch 'dspace/master' into w2p-69976_subresource-permissions\n\nConflicts:\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionCollectionsLinkRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionStepsLinkRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowStepActionsLinkRepository.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java\n\tdspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VersionsLinkRepository.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionRestRepositoryIT.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/converter/ConverterServiceIT.java", "committedDate": "2020-05-13T07:39:42Z", "type": "commit"}, {"oid": "adfce8e9f3dbe805325f94a24af3eb5a2de01253", "url": "https://github.com/DSpace/DSpace/commit/adfce8e9f3dbe805325f94a24af3eb5a2de01253", "message": "Fixed issues after master merge", "committedDate": "2020-05-13T07:40:01Z", "type": "commit"}, {"oid": "ea538d619b1d5dc226afe737ea92314eb808bfc6", "url": "https://github.com/DSpace/DSpace/commit/ea538d619b1d5dc226afe737ea92314eb808bfc6", "message": "[Task 70871] fixed tests after master merge", "committedDate": "2020-05-13T11:13:54Z", "type": "commit"}, {"oid": "262d81a33f25992311aa32363c15ab24386bdcb4", "url": "https://github.com/DSpace/DSpace/commit/262d81a33f25992311aa32363c15ab24386bdcb4", "message": "[Task 70871] implemented default preauthorize setting", "committedDate": "2020-05-13T12:50:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzI2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r425927269", "bodyText": "It appears the changes in RestResourceController are unnecessary.  This private method is never used, and the only other changes are space-related.\nCan we simply undo all the changes to this controller?", "author": "tdonohue", "createdAt": "2020-05-15T16:51:27Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -895,6 +895,17 @@ public RepresentationModel findRel(HttpServletRequest request, HttpServletRespon\n \n     }\n \n+    private Page<? extends RestModel> getRestModelsWithoutNullValues(Pageable page,", "originalCommit": "262d81a33f25992311aa32363c15ab24386bdcb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NjExMg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426746112", "bodyText": "The changes have been removed", "author": "benbosman", "createdAt": "2020-05-18T16:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTYxMg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r425929612", "bodyText": "Should we return an error here too?  I'm not sure I understand why this is just a warning if you've received an AccessDeniedException.  The comment above this is unclear to me though, so I'm not sure what to recommend here.", "author": "tdonohue", "createdAt": "2020-05-15T16:56:01Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/Utils.java", "diffHunk": "@@ -668,7 +669,10 @@ void embedRelFromRepository(HALResource<? extends RestAddressableModel> resource\n                 Object linkedObject = method.invoke(linkRepository, null, contentId, null, projection);\n                 resource.embedResource(rel, wrapForEmbedding(resource, linkedObject, link, oldLinks));\n             } catch (InvocationTargetException e) {\n-                if (e.getTargetException() instanceof RuntimeException) {\n+                // Can't do this beforehand because we lack information to call Evaluators\n+                if (e.getTargetException() instanceof AccessDeniedException) {\n+                    log.warn(\"Tried fetching resource: \" + linkRest.name() + \" for DSpaceObject with ID: \" + contentId);", "originalCommit": "262d81a33f25992311aa32363c15ab24386bdcb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NzY3NA==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426747674", "bodyText": "Raf has added details in 34bf7dd#diff-6fdce65db891f81afe28b714fe8ddddaR672", "author": "benbosman", "createdAt": "2020-05-18T16:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2ODcwMg==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426868702", "bodyText": "Thanks for the updated comment / description in the code. This now makes sense & can remain as-is.", "author": "tdonohue", "createdAt": "2020-05-18T20:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDIzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r425930231", "bodyText": "I think we should create a ticket for this & link to the ticket here.  I'll create the ticket & add a link in this comment once it is ready.\nUPDATE: I created this ticket https://jira.lyrasis.org/browse/DS-4505 Please feel free to enhance it as needed. I'm willing to also schedule this for beta3 if there's interest in moving this forward immediately.", "author": "tdonohue", "createdAt": "2020-05-15T16:57:10Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionGroupRestControllerIT.java", "diffHunk": "@@ -955,7 +956,10 @@ public void getCollectionItemReadGroupTest() throws Exception {\n                             jsonPath(\"$\", GroupMatcher.matchGroupEntry(role.getID(), role.getName())));\n     }\n \n+    // Put on ignore because there's no support to identify read rights on a group for a user in a special\n+    // com/coll admin group", "originalCommit": "262d81a33f25992311aa32363c15ab24386bdcb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTk3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426555976", "bodyText": "Thanks, if I remember correctly, @abollini recommended a single SQL query to solve this without a performance risk, it would be good if he can share his recommendation in this ticket (I don't think he identified the exact query yet)", "author": "benbosman", "createdAt": "2020-05-18T11:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0ODA2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2726#discussion_r426748069", "bodyText": "The ticket has now been referenced in each of the @ignore statements", "author": "benbosman", "createdAt": "2020-05-18T16:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDIzMQ=="}], "type": "inlineReview"}, {"oid": "34bf7dd76b09bd20226e8b4a2317bae472eaf8d7", "url": "https://github.com/DSpace/DSpace/commit/34bf7dd76b09bd20226e8b4a2317bae472eaf8d7", "message": "[Task 70927] applied feedback on the subresources permissions functionality", "committedDate": "2020-05-18T13:54:38Z", "type": "commit"}, {"oid": "68b91aa8f04ac71c1d469c8db704601853b26d8a", "url": "https://github.com/DSpace/DSpace/commit/68b91aa8f04ac71c1d469c8db704601853b26d8a", "message": "Applied feedback to the subresource permissions functionality", "committedDate": "2020-05-19T13:56:07Z", "type": "commit"}]}