{"pr_number": 2674, "pr_title": "[DS-4434] Fix Context.commit() and Context.isValid() behavior. Add more tests", "pr_createdAt": "2020-02-14T16:33:49Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2674", "timeline": [{"oid": "6a14699bd131f355c04622ea4cdca0b7c75d7fc7", "url": "https://github.com/DSpace/DSpace/commit/6a14699bd131f355c04622ea4cdca0b7c75d7fc7", "message": "Add more Tests for Context. Bug fixes based on that. Enhance javadocs in HibernateDBConnection", "committedDate": "2020-02-14T14:57:35Z", "type": "commit"}, {"oid": "7f879a2086b7f5ae727e82b577d155d8f209dbf7", "url": "https://github.com/DSpace/DSpace/commit/7f879a2086b7f5ae727e82b577d155d8f209dbf7", "message": "Add tests for HibernateDBConnection. Fix failing ContexTest methods. Bug fixes found via Tests", "committedDate": "2020-02-14T14:57:36Z", "type": "commit"}, {"oid": "73f8dc100e936507abc3bf8b72e673ee27bafadd", "url": "https://github.com/DSpace/DSpace/commit/73f8dc100e936507abc3bf8b72e673ee27bafadd", "message": "Do not reuse global Context for cleanup actions...it may already be closed", "committedDate": "2020-02-14T14:57:36Z", "type": "commit"}, {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53", "url": "https://github.com/DSpace/DSpace/commit/a5fe08c15802b136764a6b375a327b27b4876a53", "message": "Minor spelling/grammar fixes", "committedDate": "2020-02-14T15:39:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyODc2OA==", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379528768", "bodyText": "NOTE for reviewers: This is the test that will fail on current master.  Anytime context.commit() is called, context.isValid() will return false until a new database transaction is started in that same Context.", "author": "tdonohue", "createdAt": "2020-02-14T16:35:39Z", "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";\n+        EPerson newUser = ePersonService.create(instance);\n+        newUser.setFirstName(instance, \"Tim\");\n+        newUser.setLastName(instance, \"Smith\");\n+        newUser.setEmail(createdEmail);\n+        newUser.setCanLogIn(true);\n+        newUser.setLanguage(instance, I18nUtil.getDefaultLocale().getLanguage());\n+\n+        // Now, call commit()\n+        instance.commit();\n+\n+        // We expect our DB connection to still exist\n+        assertThat(\"HibernateDBConnection should still be open\", instance.getDBConnection(), notNullValue());\n+        // We expect the Context to be valid\n+        assertTrue(\"Context should still be valid\", instance.isValid());", "originalCommit": "a5fe08c15802b136764a6b375a327b27b4876a53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjY5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379656699", "bodyText": "Small point:  I'm always leery of testing with real email domains, even if the localpart \"should be fake\".  myfakeemail@example.com should be guaranteed undeliverable, since that domain is reserved.", "author": "mwoodiupui", "createdAt": "2020-02-14T21:39:07Z", "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";", "originalCommit": "a5fe08c15802b136764a6b375a327b27b4876a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NjAyMA==", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r381596020", "bodyText": "@mwoodiupui : Good point.  I've corrected this mistake (it was in two places in the same test) in this commit: 8083165", "author": "tdonohue", "createdAt": "2020-02-19T22:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDI3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379660279", "bodyText": "Could be logged at DEBUG level.  Not a big deal.", "author": "mwoodiupui", "createdAt": "2020-02-14T21:48:11Z", "path": "dspace-api/src/main/java/org/dspace/core/Context.java", "diffHunk": "@@ -571,32 +591,32 @@ public boolean isReadOnly() {\n         return mode != null && mode == Mode.READ_ONLY;\n     }\n \n+    /**\n+     * Add a group's UUID to the list of special groups cached in Context\n+     * @param groupID UUID of group\n+     */\n     public void setSpecialGroup(UUID groupID) {\n         specialGroups.add(groupID);\n-\n-        // System.out.println(\"Added \" + groupID);\n     }\n \n     /**\n-     * test if member of special group\n+     * Test if a group is a special group\n      *\n      * @param groupID ID of special group to test\n      * @return true if member\n      */\n     public boolean inSpecialGroup(UUID groupID) {\n         if (specialGroups.contains(groupID)) {\n-            // System.out.println(\"Contains \" + groupID);", "originalCommit": "a5fe08c15802b136764a6b375a327b27b4876a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NjgxNQ==", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r381596815", "bodyText": "I'm going to just leave this as removed. I agree it could have been solved differently via log.debug. But, as it was already commented out for some time, I don't know how useful it is anymore.  If someone finds a use for it, it's easy to add in later.", "author": "tdonohue", "createdAt": "2020-02-19T22:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDI3OQ=="}], "type": "inlineReview"}, {"oid": "808316599e5e85ac0748c0b0cbc9c6f3e5990d40", "url": "https://github.com/DSpace/DSpace/commit/808316599e5e85ac0748c0b0cbc9c6f3e5990d40", "message": "Minor test correction. Use example.com for test emails as its guarranteed undeliverable", "committedDate": "2020-02-19T22:56:32Z", "type": "commit"}]}