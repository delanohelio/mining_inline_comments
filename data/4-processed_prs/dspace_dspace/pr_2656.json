{"pr_number": 2656, "pr_title": "Collection item template updates", "pr_createdAt": "2020-01-29T10:07:50Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2656", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1OTgyNQ==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376459825", "bodyText": "The JavaDocs here are slightly wrong.  This wasn't created by Andrea, and this is the TemplateItem REST HAL Resource", "author": "tdonohue", "createdAt": "2020-02-07T15:43:17Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/TemplateItemResource.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.hateoas.annotations.RelNameDSpaceResource;\n+import org.dspace.app.rest.utils.Utils;\n+\n+/**\n+ * Item Rest HAL Resource. The HAL Resource wraps the REST Resource\n+ * adding support for the links and embedded resources\n+ *\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ */\n+@RelNameDSpaceResource(TemplateItemRest.NAME)", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDMyNA==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376460324", "bodyText": "This Class is missing JavaDocs. It should describe what a \"TemplateItem\" is by saying something like \"Represents a Collection's Item Template\"", "author": "tdonohue", "createdAt": "2020-02-07T15:44:15Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/wrapper/TemplateItem.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.wrapper;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+\n+public class TemplateItem {", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDczMA==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376460730", "bodyText": "Small change here. Should say \"The created TemplateItem\"", "author": "tdonohue", "createdAt": "2020-02-07T15:44:55Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -257,48 +260,46 @@ public BitstreamRest setLogo(Context context, Collection collection, MultipartFi\n      * @param context\n      * @param collection    The collection for which to make the item\n      * @param inputItemRest The new item\n-     * @return              The created item\n+     * @return The created item", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjEyNw==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462127", "bodyText": "I'd recommend updating this error message slightly to return the ID (as it's more useful to reference the problematic object).  So, something like \"The ID \" + id + \" resolved to a template item\"", "author": "tdonohue", "createdAt": "2020-02-07T15:47:21Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ItemRestRepository.java", "diffHunk": "@@ -138,14 +140,31 @@ public ItemRest findOne(Context context, UUID id) {\n     @PreAuthorize(\"hasPermission(#id, 'ITEM', #patch)\")\n     protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id,\n                          Patch patch) throws AuthorizeException, SQLException {\n-        patchDSpaceObject(apiCategory, model, id, patch);\n+\n+        Item item = itemService.find(obtainContext(), id);\n+        if (item == null) {\n+            throw new ResourceNotFoundException(apiCategory + \".\" + model + \" with id: \" + id + \" not found\");\n+        }\n+        if (item.getTemplateItemOf() != null) {\n+            throw new DSpaceBadRequestException(\"The given ID resolved to a template item\");", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjM5MA==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462390", "bodyText": "Class needs JavaDocs", "author": "tdonohue", "createdAt": "2020-02-07T15:47:47Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjU0MA==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462540", "bodyText": "Missing an @Override", "author": "tdonohue", "createdAt": "2020-02-07T15:48:02Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjY5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462699", "bodyText": "Again, missing @Override", "author": "tdonohue", "createdAt": "2020-02-07T15:48:20Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {\n+        Item item = null;\n+        try {\n+            item = itemService.find(context, uuid);\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+        if (item == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return converter.toRest(new TemplateItem(item), Projection.DEFAULT);\n+        } catch (IllegalArgumentException e) {\n+            throw new ResourceNotFoundException(\"The item with id \" + item.getID() + \" is not a template item\");\n+        }\n+    }\n+\n+    public Page<TemplateItemRest> findAll(Context context, Pageable pageable) {", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MzM1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376463359", "bodyText": "Again, needs @Override", "author": "tdonohue", "createdAt": "2020-02-07T15:49:27Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {\n+        Item item = null;\n+        try {\n+            item = itemService.find(context, uuid);\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+        if (item == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return converter.toRest(new TemplateItem(item), Projection.DEFAULT);\n+        } catch (IllegalArgumentException e) {\n+            throw new ResourceNotFoundException(\"The item with id \" + item.getID() + \" is not a template item\");\n+        }\n+    }\n+\n+    public Page<TemplateItemRest> findAll(Context context, Pageable pageable) {\n+        return null;\n+    }\n+\n+    public Class<TemplateItemRest> getDomainClass() {", "originalCommit": "a8b5139de49c456336467b958ed03fc7ec65f87b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e7da85197b61cfd5f2460e904251e42a2db79b4", "url": "https://github.com/DSpace/DSpace/commit/5e7da85197b61cfd5f2460e904251e42a2db79b4", "message": "67526: CRUD on Collection Item template\n\n- Make the output of /core/collections/{id}/itemtemplate equal to /core/items/{id}", "committedDate": "2020-02-14T13:13:38Z", "type": "commit"}, {"oid": "36f2f0aa9726a7701d573f0923aefc5b6a488b25", "url": "https://github.com/DSpace/DSpace/commit/36f2f0aa9726a7701d573f0923aefc5b6a488b25", "message": "[Task 68059] removed superfluous information and links from templateItem endpoints and added/fixed tests", "committedDate": "2020-02-14T13:16:55Z", "type": "commit"}, {"oid": "7322d983c4aed1f6411857b2b4fbe7eddd9f70d8", "url": "https://github.com/DSpace/DSpace/commit/7322d983c4aed1f6411857b2b4fbe7eddd9f70d8", "message": "Fixed tests on the ItemTemplate endpoints after rebasing on master", "committedDate": "2020-02-14T13:16:56Z", "type": "commit"}, {"oid": "3e736e130abc7384cf3956e6f967640167d6664d", "url": "https://github.com/DSpace/DSpace/commit/3e736e130abc7384cf3956e6f967640167d6664d", "message": "[Task 68537] applied feedback and fixes to the itemtemplate endpoints", "committedDate": "2020-02-14T13:16:56Z", "type": "commit"}, {"oid": "580f6d7ad8b2ae01eef6d869135864c39b91c7a2", "url": "https://github.com/DSpace/DSpace/commit/580f6d7ad8b2ae01eef6d869135864c39b91c7a2", "message": "[Task 68537] fixed the templateItemOf link", "committedDate": "2020-02-14T13:16:56Z", "type": "commit"}, {"oid": "cbd6870d727fd8a05d552ed868203b48f2995a44", "url": "https://github.com/DSpace/DSpace/commit/cbd6870d727fd8a05d552ed868203b48f2995a44", "message": "[Task 68537] implemented feedback with regards to javadoc and annotations for the TemplateItem functionality", "committedDate": "2020-02-14T13:16:56Z", "type": "commit"}, {"oid": "b4992cad3ed9c9bcb885d4fbde63197404521f59", "url": "https://github.com/DSpace/DSpace/commit/b4992cad3ed9c9bcb885d4fbde63197404521f59", "message": "Fixed checkstyle in ItemTemplateRestController", "committedDate": "2020-02-14T14:33:07Z", "type": "commit"}, {"oid": "b4992cad3ed9c9bcb885d4fbde63197404521f59", "url": "https://github.com/DSpace/DSpace/commit/b4992cad3ed9c9bcb885d4fbde63197404521f59", "message": "Fixed checkstyle in ItemTemplateRestController", "committedDate": "2020-02-14T14:33:07Z", "type": "forcePushed"}]}