{"pr_number": 2858, "pr_title": "DS-4061 expose sitemaps and schedule automatic updates", "pr_createdAt": "2020-07-15T15:18:05Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2858", "timeline": [{"oid": "56be1bbe745dd0a6202e31e27173f9e1110cc46e", "url": "https://github.com/DSpace/DSpace/commit/56be1bbe745dd0a6202e31e27173f9e1110cc46e", "message": "71734: Sitemap REST controller", "committedDate": "2020-07-08T12:19:54Z", "type": "commit"}, {"oid": "894738a6826a93719b419741a810eb819fdf7e6f", "url": "https://github.com/DSpace/DSpace/commit/894738a6826a93719b419741a810eb819fdf7e6f", "message": "71736: Changes to sitemap contents", "committedDate": "2020-07-08T13:44:58Z", "type": "commit"}, {"oid": "0480b6521948b952cf2d85bcc3a901fd5a5bda82", "url": "https://github.com/DSpace/DSpace/commit/0480b6521948b952cf2d85bcc3a901fd5a5bda82", "message": "71737: Sitemap REST IT", "committedDate": "2020-07-08T17:10:39Z", "type": "commit"}, {"oid": "d0a7104e9f5747cf235d254b6a0efec3b13e38b1", "url": "https://github.com/DSpace/DSpace/commit/d0a7104e9f5747cf235d254b6a0efec3b13e38b1", "message": "71738: Automatic cron job for sitemaps", "committedDate": "2020-07-09T08:52:05Z", "type": "commit"}, {"oid": "c911a0f79a61cfed9624c983e849b69ccfbc86fa", "url": "https://github.com/DSpace/DSpace/commit/c911a0f79a61cfed9624c983e849b69ccfbc86fa", "message": "71859: Endpoint path sitemaps changed", "committedDate": "2020-07-15T11:27:55Z", "type": "commit"}, {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "url": "https://github.com/DSpace/DSpace/commit/d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "message": "Merge branch 'dspace-origin-master' into w2p-71734_sitemaps\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/RootRestResourceControllerIT.java\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ShibbolethRestControllerIT.java", "committedDate": "2020-07-15T13:53:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NzY3Mw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458197673", "bodyText": "Because this endpoint is hardcoded in two places (here and in the Controller), I'd prefer that we move this to a configuration key in dspace.cfg.  You could call it sitemap.path = sitemaps   (As that would be similar to oai.path in oai.cfg and sword-server.path in sword-server.cfg), and place it next to the existing sitemap.dir setting in dspace.cfg", "author": "tdonohue", "createdAt": "2020-07-21T15:42:15Z", "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -61,6 +61,8 @@\n     private static final ConfigurationService configurationService =\n         DSpaceServicesFactory.getInstance().getConfigurationService();\n \n+    public static final String SITEMAPS_ENDPOINT = \"/sitemaps\";", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MzczNw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465183737", "bodyText": "This has been updated in 1ba6a74", "author": "benbosman", "createdAt": "2020-08-04T16:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMDAyNQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458200025", "bodyText": "I'm a little torn on these changes.  The Handles should still work here (as we still support Handles)...but a redirection is needed to the /communities path, /collections path, etc.  Is there a specific reason you chose to remove the Handles from the sitemap?", "author": "tdonohue", "createdAt": "2020-07-21T15:45:28Z", "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -168,21 +176,19 @@ public static void generateSitemaps(boolean makeHTMLMap,\n         AbstractGenerator sitemapsOrg = null;\n \n         if (makeHTMLMap) {\n-            html = new HTMLSitemapGenerator(outputDir, htmlMapStem + \"?map=\",\n-                                            null);\n+            html = new HTMLSitemapGenerator(outputDir, sitemapStem, \".html\");\n         }\n \n         if (makeSitemapOrg) {\n-            sitemapsOrg = new SitemapsOrgGenerator(outputDir, sitemapStem\n-                + \"?map=\", null);\n+            sitemapsOrg = new SitemapsOrgGenerator(outputDir, sitemapStem, \".xml\");\n         }\n \n         Context c = new Context(Context.Mode.READ_ONLY);\n \n         List<Community> comms = communityService.findAll(c);\n \n         for (Community comm : comms) {\n-            String url = handleURLStem + comm.getHandle();\n+            String url = uiURLStem + \"/communities/\" + comm.getID();", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwMjM0Nw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462102347", "bodyText": "At this point in time, they don't work. This can be reverted if the handles work, but I'd prefer to have a working solution\nI also thought there were plans to remove the requirement to have a handle (so it would become optional)", "author": "benbosman", "createdAt": "2020-07-29T07:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMDAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MDE1NA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462340154", "bodyText": "@benbosman : aha, ok. I didn't realize these were not working.  I'm OK with this change, I was mostly asking the reason why it was made.  I do feel handles will be made optional eventually, so you are correct this is a step in that direction.  I'll close out this request as resolved. Thanks!", "author": "tdonohue", "createdAt": "2020-07-29T14:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMDAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMjg1MA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458202850", "bodyText": "If we move this path to configuration, you should replace this line with:\n@RequestMapping(\"/${sitemap.path:sitemaps}\")\nThat says to use the value of \"sitemap.path\" from configuration, but if it's not found, default to \"sitemaps\".", "author": "tdonohue", "createdAt": "2020-07-21T15:49:21Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SitemapRestController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.connector.ClientAbortException;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.MultipartFileSender;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * This is a specialized controller to provide access to the sitemap files, generated by\n+ * {@link org.dspace.app.sitemap.GenerateSitemaps}\n+ *\n+ * The mapping for requested endpoint try to resolve a valid sitemap file name, for example\n+ * <pre>\n+ * {@code\n+ * https://<dspace.server.url>/sitemaps/26453b4d-e513-44e8-8d5b-395f62972eff/sitemap0.html\n+ * }\n+ * </pre>\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+@Controller\n+@RequestMapping(\"/sitemaps\")", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MzgxMg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465183812", "bodyText": "This has been updated in 1ba6a74", "author": "benbosman", "createdAt": "2020-08-04T16:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMjg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzQxMw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458207413", "bodyText": "This seems a tad odd to me.  But, it sounds like you hit a scenario where it is needed.  So, I'm OK. with it.  But, I'd recommend a minor improvement.  First, please make sure the context is valid before completing it. If it's not valid, the DB doesn't even have an open connection.  So, please use:\nif (context.isValid()) { \n    context.complete();\n}", "author": "tdonohue", "createdAt": "2020-07-21T15:55:39Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SitemapRestController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.connector.ClientAbortException;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.MultipartFileSender;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * This is a specialized controller to provide access to the sitemap files, generated by\n+ * {@link org.dspace.app.sitemap.GenerateSitemaps}\n+ *\n+ * The mapping for requested endpoint try to resolve a valid sitemap file name, for example\n+ * <pre>\n+ * {@code\n+ * https://<dspace.server.url>/sitemaps/26453b4d-e513-44e8-8d5b-395f62972eff/sitemap0.html\n+ * }\n+ * </pre>\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+@Controller\n+@RequestMapping(\"/sitemaps\")\n+public class SitemapRestController {\n+\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(SitemapRestController.class);\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    // Most file systems are configured to use block sizes of 4096 or 8192 and our buffer should be a multiple of that.\n+    private static final int BUFFER_SIZE = 4096 * 10;\n+\n+    /**\n+     * Tries to retrieve a matching sitemap file in configured location\n+     *\n+     * @param name     the name of the requested sitemap file\n+     * @param response the HTTP response\n+     * @param request  the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    @GetMapping(\"/{name}\")\n+    public void retrieve(@PathVariable String name, HttpServletResponse response,\n+        HttpServletRequest request) throws IOException, SQLException {\n+        // Find sitemap with given name in dspace/sitemaps\n+        File foundSitemapFile = null;\n+        File sitemapOutputDir = new File(configurationService.getProperty(\"sitemap.dir\"));\n+        if (sitemapOutputDir.exists() && sitemapOutputDir.isDirectory()) {\n+            // List of all files and directories inside sitemapOutputDir\n+            File sitemapFilesList[] = sitemapOutputDir.listFiles();\n+            for (File sitemapFile : sitemapFilesList) {\n+                if (name.equalsIgnoreCase(sitemapFile.getName())) {\n+                    if (sitemapFile.isFile()) {\n+                        foundSitemapFile = sitemapFile;\n+                    } else {\n+                        throw new ResourceNotFoundException(\n+                            \"Directory with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath() +\n+                            \" found, but no file.\");\n+                    }\n+                }\n+            }\n+        } else {\n+            throw new ResourceNotFoundException(\n+                \"Sitemap directory in \" + sitemapOutputDir.getAbsolutePath() + \" does not \" +\n+                \"exist, either sitemaps have not been generated (./dspace generate-sitemaps),\" +\n+                \" or are located elsewhere (config used: sitemap.dir).\");\n+        }\n+        if (foundSitemapFile == null) {\n+            throw new ResourceNotFoundException(\n+                \"Could not find sitemap file with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath());\n+        } else {\n+            // return found sitemap file\n+            this.returnSitemapFile(foundSitemapFile, response, request);\n+        }\n+    }\n+\n+    /**\n+     * Sends back the matching sitemap file as a MultipartFile, with the headers set with details of the file\n+     * (content, size, name, last modified)\n+     *\n+     * @param foundSitemapFile the found sitemap file, with matching name as in request path\n+     * @param response         the HTTP response\n+     * @param request          the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    private void returnSitemapFile(File foundSitemapFile, HttpServletResponse response, HttpServletRequest request)\n+        throws SQLException, IOException {\n+        // Pipe the bits\n+        try (InputStream is = new FileInputStream(foundSitemapFile)) {\n+            MultipartFileSender sender = MultipartFileSender\n+                .fromInputStream(is)\n+                .withBufferSize(BUFFER_SIZE)\n+                .withFileName(foundSitemapFile.getName())\n+                .withLength(foundSitemapFile.length())\n+                .withMimetype(Files.probeContentType(foundSitemapFile.toPath()))\n+                .with(request)\n+                .with(response);\n+\n+            sender.withLastModified(foundSitemapFile.lastModified());\n+\n+            // Determine if we need to send the file as a download or if the browser can open it inline\n+            long dispositionThreshold = configurationService.getLongProperty(\"webui.content_disposition_threshold\");\n+            if (dispositionThreshold >= 0 && foundSitemapFile.length() > dispositionThreshold) {\n+                sender.withDisposition(MultipartFileSender.CONTENT_DISPOSITION_ATTACHMENT);\n+            }\n+\n+            Context context = ContextUtil.obtainContext(request);\n+\n+            // We have all the data we need, close the connection to the database so that it doesn't stay open during\n+            // download/streaming\n+            context.complete();", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDA0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459620045", "bodyText": "I think that @benbosman is right here, forcing the context to complete will free up resource earlier that we will never use. The context.complete method is already internally protected with an isValid() check we should eventually put a guard against NPE but this would be a very odd scenario so I'm also fine in just having the NPE and throw a 500", "author": "abollini", "createdAt": "2020-07-23T17:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzOTE1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462339159", "bodyText": "Ok, sounds fine. I'll close this request.", "author": "tdonohue", "createdAt": "2020-07-29T14:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwOTQ1OA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458209458", "bodyText": "Again, this should read from configuration.  So, have it set a default value for the tests instead by doing something like: configurationService.setPropery(\"sitemap.path\", \"sitemaps\");", "author": "tdonohue", "createdAt": "2020-07-21T15:58:24Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NDEyMg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465184122", "bodyText": "This has been updated in 1ba6a74", "author": "benbosman", "createdAt": "2020-08-04T16:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwOTQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458349892", "bodyText": "This needs to be configurable, as we shouldn't assume that everyone needs this to run at the same rate.  We also should document the syntax expected here -- it looks like the syntax is defined here? https://www.quartz-scheduler.org/api/2.3.0/org/quartz/CronTrigger.html\nMaybe we should create a config in dspace.cfg named sitemap.cron and changing this entry to say cron=\"${sitemap.cron}\"?\n# Define cron for how frequently the sitemap should refresh.\n# Defaults to running daily at 1:15am\n# Syntax is defined at https://www.quartz-scheduler.org/api/2.3.0/org/quartz/CronTrigger.html\nsitemap.cron = 0 15 1 * * ?\n\nOr, if we feel a cron syntax is too complex, we could switch this to using fixed-rate and have a simple configuration like:\n# Refresh sitemap every 4 hours (4 x 60 x 60 x 1,000ms)\nsitemap.refreshrate = 28800000\n\nI don't feel strongly here, but I suspect users might have an easier time configuring the refreshrate instead of a custom cron schedule.", "author": "tdonohue", "createdAt": "2020-07-21T19:54:00Z", "path": "dspace/config/spring/api/task-scheduler.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+    http://www.springframework.org/schema/beans/spring-beans.xsd\n+    http://www.springframework.org/schema/task\n+    http://www.springframework.org/task/spring-task.xsd\">\n+\n+  <!-- Configure the scheduler -->\n+  <task:scheduler id=\"myScheduler\" pool-size=\"10\"/>\n+\n+  <!-- Configure parameters -->\n+  <task:scheduled-tasks scheduler=\"myScheduler\">\n+    <task:scheduled ref=\"GenerateSitemaps\" method=\"generateSitemapsScheduled\" cron=\"0 15 1 * * ?\"/>", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNDQxNA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459614414", "bodyText": "it would be also useful to include the ping to the search engine as a configurable option similar to how now can be specified with the -p from the command line.", "author": "abollini", "createdAt": "2020-07-23T17:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNzcxMg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462107712", "bodyText": "I did assume that spring config sufficed for it to be configurable\nMoving it to dspace.cfg makes it easier to override it in local.cfg, but there are many things configured in spring which are more likely to be adjusted but only possible in the Spring config\nIs there a guideline about which spring config is handled in dspace.cfg?", "author": "benbosman", "createdAt": "2020-07-29T07:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODQzOA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462338438", "bodyText": "@benbosman : generally, anything that is more likely to need customization (and a cronjob type of schedule would) I tend to recommend moving to DSpace configuration, so that it can be updated in local.cfg.  Spring Configuration is OK for advanced configurations which we don't want most sites to modify.\nIn this scenario, I do think the sitemap generation schedule will often need customization (based on size of site and other cronjobs that folks might have running).\nThat said, I don't feel that we need to make the -p option configurable.  Instead, I'd recommend we just make the default here to use the -a option, which will automatically ping any search engines configured in sitemap.engineurls...so that is already easily configurable.", "author": "tdonohue", "createdAt": "2020-07-29T14:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2ODc0OA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r466368748", "bodyText": "This has been adjusted", "author": "benbosman", "createdAt": "2020-08-06T12:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDM3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459460371", "bodyText": "we need to cleanup the output of these script in an After method. Maybe here is convenient to think about a Before/After Class annotation to save time", "author": "abollini", "createdAt": "2020-07-23T13:45:41Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+\n+        super.setUp();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2MDI5OA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463160298", "bodyText": "@abollini : This looks to be resolved already.  See the new destroy() method below this one.  Before/After annotations were also added.", "author": "tdonohue", "createdAt": "2020-07-30T17:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0ODQ2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463248469", "bodyText": "thanks to point me to that I haven't noted it. I have added another minor suggestion, not blocking but I think would make the code cleaner (and faster) #2858 (comment)", "author": "abollini", "createdAt": "2020-07-30T20:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MTA4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459461082", "bodyText": "can you add explicit test to verify that we are protected by file system traversal ?", "author": "abollini", "createdAt": "2020-07-23T13:46:40Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+\n+        super.setUp();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void testSitemap_notValidSiteMapFile() throws Exception {\n+        //** WHEN **\n+        //We attempt to retrieve a non valid sitemap file\n+        getClient().perform(get(SITEMAPS_ENDPOINT + \"/notValidSiteMapFile\"))\n+                   //** THEN **\n+                   .andExpect(status().isNotFound());\n+    }", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NzEyNg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465587126", "bodyText": "This has been updated in 1ba6a74", "author": "benbosman", "createdAt": "2020-08-05T09:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459616166", "bodyText": "can we found a way to make easier turn off the scheduler without touching the xml file? an option could be our own implementation wrapping the default one with an additional boolean flag, if turned off the scheduler will just silent.\nThis is needed in deployment where there are multiple nodes, off course we must have the scheduler running only on a node (where we can set the property to true using ENV variable)", "author": "abollini", "createdAt": "2020-07-23T17:36:04Z", "path": "dspace/config/spring/api/task-scheduler.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+    http://www.springframework.org/schema/beans/spring-beans.xsd\n+    http://www.springframework.org/schema/task\n+    http://www.springframework.org/task/spring-task.xsd\">\n+\n+  <!-- Configure the scheduler -->\n+  <task:scheduler id=\"myScheduler\" pool-size=\"10\"/>", "originalCommit": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyMDA2OA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r462120068", "bodyText": "That seems to be quite some overhead to avoid changing the config\nRemoving the scheduler would achieve the same result", "author": "benbosman", "createdAt": "2020-07-29T08:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwNDY5MA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463004690", "bodyText": "it would be hard to change the xml file just on a single node than set an ENV variable, if this is too complex to do in this PR I would like at least to have a ticket to keep track of that. We should start a section in the documentation to explain how to deploy dspace in cluster and point to this and other features that would require the selection of a \"main\" node", "author": "abollini", "createdAt": "2020-07-30T13:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NDQwOA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463174408", "bodyText": "For what it's worth, from this answer it sounds like setting the cron = - will disable the schedule: https://stackoverflow.com/a/57655646\nSo, this is even more argument for moving the cron to our Configuration files...as that'd let you easily change it or enable/disable the task via your local.cfg, or environment variables (as our ConfigurationService also reads env)", "author": "tdonohue", "createdAt": "2020-07-30T17:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NzI4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463177282", "bodyText": "It's also possible to enable/disable by configurations + annotations like this: https://stackoverflow.com/a/51198831  That also should be possible in DSpace, as Spring annotations can read from our configuration.  For example, we already use @ConditionalOnProperty to do things like enable/disable OAI-PMH via an oai.enabled configuration: https://github.com/DSpace/DSpace/blob/main/dspace-oai/src/main/java/org/dspace/xoai/controller/DSpaceOAIDataProvider.java#L56", "author": "tdonohue", "createdAt": "2020-07-30T18:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxOTU5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463219599", "bodyText": "both options look fine to me (thanks @tdonohue for the investigation). I slightly prefer the last ConditionalOnProperty over the first but both are fine", "author": "abollini", "createdAt": "2020-07-30T19:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2ODU0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r466368545", "bodyText": "@tdonohue Marie has verified the options in detail.\nThe cron = - syntax is not supported (it's not in the JavaDocs, and testing it results in Cron expression must consist of 6 fields (found 1 in \"-\")\nThe @ConditionalOnProperty is also not supported, most likely it can only be used if everything is moved to Java.\nI don't see any options to configure this in local.cfg without bigger Java changes, which may be out-of-scope if it only has the goal to ease overriding config", "author": "benbosman", "createdAt": "2020-08-06T12:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng=="}], "type": "inlineReview"}, {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180", "url": "https://github.com/DSpace/DSpace/commit/1ba6a748874dbf7b3952ed0cb393a796e2202180", "message": "72351: sitemaps path to config + in tests &\nscript extension to delete sitemaps dir > called at end of tests &\ntest for malicious file traversal", "committedDate": "2020-07-29T15:56:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwOTYzNA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463009634", "bodyText": "is this what we really expect/want?\nI would suggest to return a forbidden or a not found. The first is preferred in my opinion as it should also whom is more concerned about security to track this devil request for further analysis.", "author": "abollini", "createdAt": "2020-07-30T13:49:25Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import javax.servlet.ServletException;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"sitemap.path\", SITEMAPS_ENDPOINT);\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @After\n+    public void destroy() throws Exception {\n+        // delete sitemaps generated by tests in before\n+        runDSpaceScript(\"generate-sitemaps\", \"-d\");\n+\n+        super.destroy();\n+    }\n+\n+    @Test\n+    public void testSitemap_notValidSiteMapFile() throws Exception {\n+        //** WHEN **\n+        //We attempt to retrieve a non valid sitemap file\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/notValidSiteMapFile\"))\n+                   //** THEN **\n+                   .andExpect(status().isNotFound());\n+    }\n+\n+    @Test(expected = ServletException.class)\n+    public void testSitemap_fileSystemTraversal_dspaceCfg() throws Exception {\n+        //** WHEN **\n+        //We attempt to use endpoint for malicious file system traversal\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/%2e%2e/config/dspace.cfg\"));\n+    }\n+\n+    @Test(expected = ServletException.class)\n+    public void testSitemap_fileSystemTraversal_dspaceCfg2() throws Exception {\n+        //** WHEN **\n+        //We attempt to use endpoint for malicious file system traversal\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/%2e%2e%2fconfig%2fdspace.cfg\"));\n+    }", "originalCommit": "1ba6a748874dbf7b3952ed0cb393a796e2202180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTc3NA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463169774", "bodyText": "I agree, this seems like it should be throwing a ResourceNotFoundException (or maybe responding with a simple 404 response code, i.e. .andExpect(status().isNotFound()); ) based on the code in SitemapRestController here: https://github.com/DSpace/DSpace/pull/2858/files#diff-be5a61ded7d68e1169e3c3576ca9ce30R93\nIf that's not possible (for some reason), we could leave this as-is & add either a TODO or bug ticket. As-is, this test does prove that you cannot access other files from this endpoint, but the @Test(expected=ServletException.class) just seems like the wrong response.\nIn debugging this, we could add an additional simplistic test here to ensure an invalid filename (something like \"notasitemap.html\") also throws a ResourceNotFoundException or 404 response.", "author": "tdonohue", "createdAt": "2020-07-30T17:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwOTYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4Njg3Nw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465586877", "bodyText": "This is valid behavior because it's an attempt to bypass security. The message returned is also: The request was rejected because the URL contained a potentially malicious String \"%2e\"\nFor non-attacks, just incorrect filenames, 404 is returned instead", "author": "benbosman", "createdAt": "2020-08-05T09:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwOTYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4Mjg4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r465782882", "bodyText": "I'm OK with this for now. If we later decide to improve on it, we can do so. The bigger point is that this sort of request should throw an error & it obviously does. Thanks @benbosman", "author": "tdonohue", "createdAt": "2020-08-05T14:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwOTYzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NzEwNQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463247105", "bodyText": "can we call the static method directly here? it would be more easy to understand and efficient", "author": "abollini", "createdAt": "2020-07-30T20:18:00Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import javax.servlet.ServletException;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"sitemap.path\", SITEMAPS_ENDPOINT);\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @After\n+    public void destroy() throws Exception {\n+        // delete sitemaps generated by tests in before\n+        runDSpaceScript(\"generate-sitemaps\", \"-d\");", "originalCommit": "1ba6a748874dbf7b3952ed0cb393a796e2202180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2OTc3NQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r466369775", "bodyText": "Do you have an example of the alternative method you're asking for? I didn't see any problems with using the DSpace script", "author": "benbosman", "createdAt": "2020-08-06T12:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk2NTE2NA==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r473965164", "bodyText": "I simply mean to call directly org.dspace.app.sitemap.GenerateSitemaps.deleteSitemaps() as it is a static public method", "author": "abollini", "createdAt": "2020-08-20T13:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NzEwNQ=="}], "type": "inlineReview"}, {"oid": "3d087aa18443a2f2a76ac23fc393f737145651b1", "url": "https://github.com/DSpace/DSpace/commit/3d087aa18443a2f2a76ac23fc393f737145651b1", "message": "72426: Sitemap cron schedule configurable in dspace.cfg", "committedDate": "2020-08-06T11:52:43Z", "type": "commit"}, {"oid": "00166862ea65d649e21fe4e67dc09dceb50e1209", "url": "https://github.com/DSpace/DSpace/commit/00166862ea65d649e21fe4e67dc09dceb50e1209", "message": "Revert whitespace changes", "committedDate": "2020-08-06T12:03:48Z", "type": "commit"}, {"oid": "5aa01787a7e91d21538b9c58c74782c15acf2f78", "url": "https://github.com/DSpace/DSpace/commit/5aa01787a7e91d21538b9c58c74782c15acf2f78", "message": "Merge branch 'dspace-origin-master' into w2p-71734_sitemaps", "committedDate": "2020-08-06T12:20:33Z", "type": "commit"}, {"oid": "cff1d0a69af562327bdc87f711ffc881f7b17b00", "url": "https://github.com/DSpace/DSpace/commit/cff1d0a69af562327bdc87f711ffc881f7b17b00", "message": "poolsize fix", "committedDate": "2020-08-06T12:22:26Z", "type": "commit"}, {"oid": "a1c9bc9061b5456b3daf526cd179216b1181943a", "url": "https://github.com/DSpace/DSpace/commit/a1c9bc9061b5456b3daf526cd179216b1181943a", "message": "Collection and Community Builder moved fix", "committedDate": "2020-08-06T14:10:07Z", "type": "commit"}, {"oid": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "url": "https://github.com/DSpace/DSpace/commit/b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "message": "71738: Sitemap scheduler with annotations", "committedDate": "2020-08-07T15:10:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MTYwMg==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r467151602", "bodyText": "Minor thing here. I'd recommend we comment this out by default and change comment slightly. So, update to something like:\n# Customize the path of sitemaps in the server webapp\n# Defaults to \"sitemaps\", which means they are available at ${dspace.server.url}/sitemaps/\n# sitemap.path = sitemaps", "author": "tdonohue", "createdAt": "2020-08-07T16:42:59Z", "path": "dspace/config/dspace.cfg", "diffHunk": "@@ -1429,6 +1429,9 @@ webui.content_disposition_threshold = 8388608\n # the directory where the generated sitemaps are stored\n sitemap.dir = ${dspace.dir}/sitemaps\n \n+# sitemaps endpoint path used in SitemapRestController and in the url paths when sitemaps are generated\n+sitemap.path = sitemaps", "originalCommit": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MzIzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r467153231", "bodyText": "Another very minor change.  Please update this line to also describe how to disable via local.cfg.  I've also found (via testing) that this config is not refreshed automatically (which isn't a big deal), so we should document that you need to restart Tomcat.\nSo, let's say something like:\n# Remove (comment out) this config to disable the sitemap scheduler.\n# Sitemap scheduler can also be disabled by setting to \"-\" (single dash) in local.cfg.\n# Keep in mind, changing the schedule requires rebooting your servlet container, e.g. Tomcat.", "author": "tdonohue", "createdAt": "2020-08-07T16:46:24Z", "path": "dspace/config/dspace.cfg", "diffHunk": "@@ -1442,6 +1445,12 @@ sitemap.engineurls = http://www.google.com/webmasters/sitemaps/ping?sitemap=\n #\n # No known Sitemap 'ping' URL for MSN/Live search\n \n+# Define cron for how frequently the sitemap should refresh.\n+# Defaults to running daily at 1:15am\n+# Remove (comment) out this config to disable the sitemap scheduler", "originalCommit": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3164be125e8d8d40df5a6b3b332c125150c2af1d", "url": "https://github.com/DSpace/DSpace/commit/3164be125e8d8d40df5a6b3b332c125150c2af1d", "message": "72505: sitemaps config feedback applied & changed base url of sitemap_index files to ui.url", "committedDate": "2020-08-17T09:28:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTE4Ng==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r473249186", "bodyText": "Minor change required here.  Based on updates to DSpace/dspace-angular#825 , this sitemapStem should be updated to just be:\nString sitemapStem = uiURLStem + \"/sitemap\";\nThe reason is that, at the UI level, the sitemapsEndpoint has no meaning. It's only valid for the REST API.  This is needed, to ensure that the sitemap files are available at the root level of the UI (e.g. http://localhost:4000/sitemap_index.xml , http://localhost:4000/sitemap0.xml)", "author": "tdonohue", "createdAt": "2020-08-19T18:50:51Z", "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -150,14 +180,10 @@ public static void main(String[] args) throws Exception {\n      * @throws IOException  if IO error\n      *                      if IO error occurs.\n      */\n-    public static void generateSitemaps(boolean makeHTMLMap,\n-                                        boolean makeSitemapOrg) throws SQLException, IOException {\n-        String sitemapStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/sitemap\";\n-        String htmlMapStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/htmlmap\";\n-        String handleURLStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/handle/\";\n+    public static void generateSitemaps(boolean makeHTMLMap, boolean makeSitemapOrg) throws SQLException, IOException {\n+        String sitemapsEndpoint = configurationService.getProperty(\"sitemap.path\", \"sitemaps\");\n+        String uiURLStem = configurationService.getProperty(\"dspace.ui.url\");\n+        String sitemapStem = uiURLStem + \"/\" + sitemapsEndpoint + \"/sitemap\";", "originalCommit": "3164be125e8d8d40df5a6b3b332c125150c2af1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNTg1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r477325853", "bodyText": "@tdonohue Applied fix; 4b86f33", "author": "MarieVerdonck", "createdAt": "2020-08-26T14:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyODI5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r477328295", "bodyText": "Thanks @MarieVerdonck !  I'll give this one last test then and merge it assuming it all works (and it should).", "author": "tdonohue", "createdAt": "2020-08-26T14:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTE4Ng=="}], "type": "inlineReview"}, {"oid": "4b86f331d43041d3991124534c4c546068d75546", "url": "https://github.com/DSpace/DSpace/commit/4b86f331d43041d3991124534c4c546068d75546", "message": "72505: Url sitemaps fix", "committedDate": "2020-08-26T11:52:59Z", "type": "commit"}, {"oid": "4d3fd877225e9fc6cedd3f886bde4b9d067c8d07", "url": "https://github.com/DSpace/DSpace/commit/4d3fd877225e9fc6cedd3f886bde4b9d067c8d07", "message": "72505: Url sitemaps change - test fix", "committedDate": "2020-08-26T13:05:18Z", "type": "commit"}]}