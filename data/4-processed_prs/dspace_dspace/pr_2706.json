{"pr_number": 2706, "pr_title": "Discovery index for private and withdrawn items", "pr_createdAt": "2020-03-09T11:50:32Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2706", "timeline": [{"oid": "82069b3f522779183f32ba3847576b7b0e674b81", "url": "https://github.com/DSpace/DSpace/commit/82069b3f522779183f32ba3847576b7b0e674b81", "message": "taskid 69316 Add 2 facets: withdrawn and discoverable", "committedDate": "2020-03-06T13:46:47Z", "type": "commit"}, {"oid": "cb38cb914126c0b876772c65d20b6aedc41183de", "url": "https://github.com/DSpace/DSpace/commit/cb38cb914126c0b876772c65d20b6aedc41183de", "message": "taskid 69316 Add 2 facets: withdrawn and discoverable bis", "committedDate": "2020-03-06T13:51:35Z", "type": "commit"}, {"oid": "8a3e2573ec48b744e59936ff2882bfb9794c9745", "url": "https://github.com/DSpace/DSpace/commit/8a3e2573ec48b744e59936ff2882bfb9794c9745", "message": "taskid 69316 Add 2 facets: withdrawn and discoverable tris", "committedDate": "2020-03-06T15:19:24Z", "type": "commit"}, {"oid": "bdc6cb9026cd557ceb1b73961e3ab43b949fa19e", "url": "https://github.com/DSpace/DSpace/commit/bdc6cb9026cd557ceb1b73961e3ab43b949fa19e", "message": "taskid 69316 Add 2 facets: withdrawn and discoverable - fix checkstyle", "committedDate": "2020-03-06T16:16:20Z", "type": "commit"}, {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781", "url": "https://github.com/DSpace/DSpace/commit/0ac969b75117f94ef3511ebe96abadd14d4db781", "message": "taskid 69316 Add 2 facets: withdrawn and discoverable", "committedDate": "2020-03-09T10:40:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMTYyNA==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390621624", "bodyText": "please add also a test with the \"normal\" eperson", "author": "abollini", "createdAt": "2020-03-10T21:27:07Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")", "originalCommit": "0ac969b75117f94ef3511ebe96abadd14d4db781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNTk0NA==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391005944", "bodyText": "We will add this test", "author": "benbosman", "createdAt": "2020-03-11T14:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjA0MA==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390622040", "bodyText": "can we have a test for the withdrawn or private facets as they are quite special? or are such test already in place?", "author": "abollini", "createdAt": "2020-03-10T21:28:03Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.contains(\n+                        SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\")\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsByAdminUser() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        // A system admin user browses this endpoint to find the withdrawn or private objects in the system\n+        // With a query stating 'Test'\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(adminToken).perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\",\n+                        Matchers.containsInAnyOrder(\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Withdrawn Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Private Test Item\")\n+                        )\n+                ))\n+                .andExpect(jsonPath(\"$._embedded.facets\", Matchers.hasItems(\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"discoverable\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        )\n+                                ))\n+                        ),\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"withdrawn\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        )\n+                                ))\n+                        )\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }", "originalCommit": "0ac969b75117f94ef3511ebe96abadd14d4db781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjM0Nw==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391006347", "bodyText": "The facet results are tested, performing them as filters is not tested. Since they are not metadata facets, we can indeed add them as well", "author": "benbosman", "createdAt": "2020-03-11T14:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390622513", "bodyText": "I would prefer a shorter name, what about allitems or administrativeitemsview ?", "author": "abollini", "createdAt": "2020-03-10T21:29:09Z", "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "originalCommit": "0ac969b75117f94ef3511ebe96abadd14d4db781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxMDQyNA==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391010424", "bodyText": "I'd prefer not to use allitems to avoid situations similar to ItemService containing findAll and findAllUnfiltered. The administrativeItemsView seems ok, but it's a name that's not really visible to the user (Angular will use it for the search private items UI, but the user won't see the name)", "author": "benbosman", "createdAt": "2020-03-11T14:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1OTU4MA==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391059580", "bodyText": "@abollini and @benbosman : I'd recommend dropping \"Items\" from the key here, as no other filter uses that.  I'm fine with either \"discoverableAndUndiscoverable\" or \"administrativeView\".  I don't mind this key being longer, as long as it's descriptive.", "author": "tdonohue", "createdAt": "2020-03-11T15:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4Nzg0Ng==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391487846", "bodyText": "Shall we use administrativeView in that case, seems to match everyone's requirements?", "author": "benbosman", "createdAt": "2020-03-12T09:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTM4MQ==", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391741381", "bodyText": "@benbosman : \"administrativeView\" is fine by me.", "author": "tdonohue", "createdAt": "2020-03-12T16:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}], "type": "inlineReview"}, {"oid": "f3aef56149a58b52f491aba12c672c1e96a79cc1", "url": "https://github.com/DSpace/DSpace/commit/f3aef56149a58b52f491aba12c672c1e96a79cc1", "message": "Discovery index for private and withdrawn items - feedback", "committedDate": "2020-03-12T10:50:23Z", "type": "commit"}, {"oid": "c5bf6ec80d056fa32edae1aee37910371e55cb21", "url": "https://github.com/DSpace/DSpace/commit/c5bf6ec80d056fa32edae1aee37910371e55cb21", "message": "Renaming discoverableAndUndiscoverableItems to administrativeView", "committedDate": "2020-03-12T16:50:23Z", "type": "commit"}]}