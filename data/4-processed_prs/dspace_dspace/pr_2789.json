{"pr_number": 2789, "pr_title": "[DS-4522] Logical item filtering (with DOI implementation)", "pr_createdAt": "2020-06-24T01:31:30Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2789", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTAxNA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517619014", "bodyText": "we should use an exception not tight to a specific provider. Moreover, I expect that the mint method will return null if the configuration prevents us to assign an identifier instead than throw an exception", "author": "abollini", "createdAt": "2020-11-04T20:41:44Z", "path": "dspace-api/src/main/java/org/dspace/identifier/IdentifierServiceImpl.java", "diffHunk": "@@ -67,9 +68,13 @@ public void setProviders(List<IdentifierProvider> providers) {\n     public void reserve(Context context, DSpaceObject dso)\n         throws AuthorizeException, SQLException, IdentifierException {\n         for (IdentifierProvider service : providers) {\n-            String identifier = service.mint(context, dso);\n-            if (!StringUtils.isEmpty(identifier)) {\n-                service.reserve(context, dso, identifier);\n+            try {\n+                String identifier = service.mint(context, dso);\n+                if (!StringUtils.isEmpty(identifier)) {\n+                    service.reserve(context, dso, identifier);\n+                }\n+            } catch (DOIIdentifierNotApplicableException e) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDc5MzE3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r594793179", "bodyText": "as per below comment as well, and the fact that service.reserve() returns void, I think we agree an exception is OK here - shall I refactor it to IdentifierNotApplicable?", "author": "kshepherd", "createdAt": "2021-03-16T01:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTM0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517619341", "bodyText": "as we forced a specific identifier I guess it is appropriate throw an exception here, but again it should be more general and not doi specific", "author": "abollini", "createdAt": "2020-11-04T20:42:24Z", "path": "dspace-api/src/main/java/org/dspace/identifier/IdentifierServiceImpl.java", "diffHunk": "@@ -82,7 +87,11 @@ public void reserve(Context context, DSpaceObject dso, String identifier)\n         // Next resolve all other services\n         for (IdentifierProvider service : providers) {\n             if (service.supports(identifier)) {\n-                service.reserve(context, dso, identifier);\n+                try {\n+                    service.reserve(context, dso, identifier);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDc5MzE5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r594793197", "bodyText": "Shall I refactor it to IdentifierNotApplicable?", "author": "kshepherd", "createdAt": "2021-03-16T01:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzQzNA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517623434", "bodyText": "I would prefer a more safe default to false", "author": "abollini", "createdAt": "2020-11-04T20:50:39Z", "path": "dspace/config/modules/doi-curation.cfg", "diffHunk": "@@ -0,0 +1,12 @@\n+### DOI registration curation task configuration module\n+\n+##\n+# Should any logical filters be skipped when registering DOIs? (ie. *always* register, never filter out the item)\n+# Default: true", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNjgxNA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517626814", "bodyText": "is there a reason to use the Boolean object instead than the primitive?", "author": "abollini", "createdAt": "2020-11-04T20:57:13Z", "path": "dspace-api/src/main/java/org/dspace/content/logic/Filter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+import org.dspace.content.Item;\n+import org.dspace.core.Context;\n+\n+/**\n+ * The interface for Filter currently doesn't add anything to LogicalStatement but inherits from it\n+ * just to keep naming / reflection clean, and in case Filters should do anything additional in future.\n+ * We need this as filters have to be specified in the spring configuration (item-filters.xml).\n+ * Filters are the top level elements of the logic. Only logical statements that implement this interface\n+ * are allowed to be the root element of a spring configuration (item-filters.xml) of this logic framework.\n+ * A filter is just helping to differentiate between logical statement that can be used as root elements and\n+ * logical statement that shouldn't be use as root element. A filter may contain only one substatement.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ * @see org.dspace.content.logic.DefaultFilter\n+ */\n+public interface Filter extends LogicalStatement {\n+    /**\n+     * Get the result of logical evaluation for an item\n+     * @param context   DSpace context\n+     * @param item      Item to evaluate\n+     * @return boolean\n+     * @throws LogicalStatementException\n+     */\n+    Boolean getResult(Context context, Item item) throws LogicalStatementException;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNTUxNw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537925517", "bodyText": "see my other comment near the canMint section - i didn't want to automatically default to false or anything other than true - it might be needed to handle nulls for some better error handlig that doesn't cause unexpected logical results", "author": "kshepherd", "createdAt": "2020-12-07T23:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNjgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTkyNQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517629925", "bodyText": "not really sure about these decision here... would be easier to reject null item? a null context shouldn't be  an IllegalArgumentException and an empty parameters an IllegalState? or maybe the parameters should be required via injection so to force a spring context startup failure?", "author": "abollini", "createdAt": "2020-11-04T21:03:37Z", "path": "dspace-api/src/main/java/org/dspace/content/logic/condition/AbstractCondition.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic.condition;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.dspace.content.Item;\n+import org.dspace.content.logic.LogicalStatementException;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.handle.service.HandleService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Abstract class for conditions, to implement the basic getter and setter parameters\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public abstract class AbstractCondition implements Condition {\n+    private Map<String, Object> parameters = new HashMap<>();\n+\n+    @Autowired(required = true)\n+    protected ItemService itemService;\n+    @Autowired(required = true)\n+    protected CollectionService collectionService;\n+    @Autowired(required = true)\n+    protected HandleService handleService;\n+\n+    /**\n+     * Get parameters set by spring configuration in item-filters.xml\n+     * These could be any kind of map that the extending condition class needs for evaluation\n+     * @return map of parameters\n+     * @throws LogicalStatementException\n+     */\n+    @Override\n+    public Map<String, Object> getParameters() throws LogicalStatementException {\n+        return this.parameters;\n+    }\n+\n+    /**\n+     * Set parameters - used by Spring when creating beans from item-filters.xml\n+     * These could be any kind of map that the extending condition class needs for evaluation\n+     * @param parameters\n+     * @throws LogicalStatementException\n+     */\n+    @Override\n+    public void setParameters(Map<String, Object> parameters) throws LogicalStatementException {\n+        this.parameters = parameters;\n+    }\n+\n+    /**\n+     * Get the result of logical evaluation for an item\n+     * @param context   DSpace context\n+     * @param item      Item to evaluate\n+     * @return boolean\n+     * @throws LogicalStatementException\n+     */\n+    @Override\n+    public Boolean getResult(Context context, Item item) throws LogicalStatementException {\n+        if (item == null) {\n+            throw new LogicalStatementException(\"Item is null\");\n+        }\n+        if (context == null) {\n+            throw new LogicalStatementException(\"Context is null\");\n+        }\n+        if (this.parameters == null) {\n+            throw new LogicalStatementException(\"Parameters are null\");\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNzM1NA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537927354", "bodyText": "thanks, i'll think about this", "author": "kshepherd", "createdAt": "2020-12-08T00:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMzE4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517633182", "bodyText": "the name of the class should be updated to reflect the more general use case, maybe ActionAllowToGroupCondition", "author": "abollini", "createdAt": "2020-11-04T21:10:28Z", "path": "dspace-api/src/main/java/org/dspace/content/logic/condition/ReadableByGroupCondition.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic.condition;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.authorize.ResourcePolicy;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Item;\n+import org.dspace.content.logic.LogicalStatementException;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * A condition that accepts a group and action parameter and returns true if the group\n+ * can perform the action on a given item\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public class ReadableByGroupCondition extends AbstractCondition {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNzU5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537927599", "bodyText": "yes, good suggestion", "author": "kshepherd", "createdAt": "2020-12-08T00:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMzE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDEwNQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517864105", "bodyText": "I would prefer that to default to false", "author": "abollini", "createdAt": "2020-11-05T08:19:44Z", "path": "dspace-api/src/main/java/org/dspace/ctask/general/RegisterDOI.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.ctask.general;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.curate.AbstractCurationTask;\n+import org.dspace.curate.Curator;\n+import org.dspace.identifier.DOIIdentifierProvider;\n+import org.dspace.identifier.IdentifierException;\n+import org.dspace.identifier.doi.DOIIdentifierNotApplicableException;\n+import org.dspace.utils.DSpace;\n+\n+/**\n+ * This curation task will register a DOI for an item, optionally ignoring any logical filtering applied\n+ * to normal identifier registration and DOI service operation.\n+ *\n+ * @author Kim Shepherd\n+ */\n+public class RegisterDOI extends AbstractCurationTask {\n+    // Curation task status\n+    private int status = Curator.CURATE_SUCCESS;\n+    // The skipFilter boolean has a default value of 'true', as per intended operation\n+    private boolean skipFilter = true;\n+    // The distributed boolean has a default value of 'false' for safest operation\n+    private boolean distributed = false;\n+    // Prefix for configuration module\n+    private static final String PLUGIN_PREFIX = \"doi-curation\";\n+    // Logger\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(RegisterDOI.class);\n+    // DOI provider\n+    private DOIIdentifierProvider provider;\n+\n+    /**\n+     * Initialise the curation task and read configuration, instantiate the DOI provider\n+     */\n+    @Override\n+    public void init(Curator curator, String taskId) throws IOException {\n+        super.init(curator, taskId);\n+        // Get 'skip filter' behaviour from configuration, with a default value of 'true'\n+        skipFilter = configurationService.getBooleanProperty(PLUGIN_PREFIX + \".skip-filter\", true);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Mjk5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517882992", "bodyText": "I haven't looked deep into this and might be wrong. But I think \"true\" is the conservative way here. DSpace is not able to filter DOIs so far. The filter is new. Skipping the filter is the old behavior. Do I miss anything?", "author": "pnbecker", "createdAt": "2020-11-05T08:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyODc4OA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537928788", "bodyText": "yes @abollini has left a preference here and in the configuration of a default to false.\ni do think 'true' is the conservative approach and matches existing DSpace operation.\nanother way to look at it is \"skipFilter = true\" is the same as \"alwaysApplyFilter = false\", if that makes sense?\nthis option is only used in the CLI, curation task, special minting buttons in the UI which allows administrators to force through DOIs that would otherwise be filtered out in normal operation", "author": "kshepherd", "createdAt": "2020-12-08T00:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTYyMg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517865622", "bodyText": "better to use a primitive boolean", "author": "abollini", "createdAt": "2020-11-05T08:22:27Z", "path": "dspace-api/src/main/java/org/dspace/identifier/DOIIdentifierProvider.java", "diffHunk": "@@ -671,8 +885,31 @@ public String getDOIByObject(Context context, DSpaceObject dso)\n      *                                DOI is registered for another object already.\n      */\n     protected DOI loadOrCreateDOI(Context context, DSpaceObject dso, String doiIdentifier)\n+            throws SQLException, DOIIdentifierException {\n+        return loadOrCreateDOI(context, dso, doiIdentifier, false);\n+    }\n+\n+    /**\n+     * Load DOI from database, or create one if it doesn't yet exist\n+     * We need to distinguish several cases. LoadOrCreate can be called with a specifid identifier to load or create.\n+     * It can also be used to create a new unspecified identifier. In the latter case doiIdentifier is set null.\n+     * If doiIdentifier is set, we know which doi we should try to load or create, but even in sucha situation\n+     * we might be able to find it in the database or might have to create it.\n+     *\n+     * @param context       - DSpace context\n+     * @param dso           - DSpaceObject to identify\n+     * @param doiIdentifier - DOI to load or create (null to mint a new one)\n+     * @param skipFilter    - Whether or not to skip the filters for the canMint() check\n+     * @return\n+     * @throws SQLException\n+     * @throws DOIIdentifierException\n+     */\n+    protected DOI loadOrCreateDOI(Context context, DSpaceObject dso, String doiIdentifier, Boolean skipFilter)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTcyNA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517865724", "bodyText": "better to use a primitive boolean", "author": "abollini", "createdAt": "2020-11-05T08:22:38Z", "path": "dspace-api/src/main/java/org/dspace/identifier/FilteredIdentifierProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.identifier;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.logic.Filter;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * This abstract class adds extra method signatures so that implementing IdentifierProviders can\n+ * handle \"skip filter\" booleans, so that any configured filters can be skipped and DOI registration forced.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public abstract class FilteredIdentifierProvider extends IdentifierProvider {\n+\n+    protected Filter filterService;\n+\n+    /**\n+     * Setter for spring to set the filter service from the property in configuration XML\n+     * @param filterService - an object implementing the org.dspace.content.logic.Filter interface\n+     */\n+    @Autowired\n+    public void setFilterService(Filter filterService) {\n+        this.filterService = filterService;\n+    }\n+\n+    /**\n+     * Register a new identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject to use for identifier registration\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @return identifier\n+     * @throws IdentifierException\n+     */\n+    public abstract String register(Context context, DSpaceObject dso, Boolean skipFilter)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTg3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537929872", "bodyText": "see my other comment near the canMint section - a null or missing filter should not default to false, so I didn't want to use a primitive here\n@abollini perhaps this also means i have confused things iwth my naming... would it be clearer code to read if there wa a primitive boolean called applyFilter instead of skipFilter? then it would be save since a null or missing filter would mean the default behaviour was applyFilter == false which is good.\ncurrently, if skipFilter is a primitive and ends up false for some non-logical reason (null or missing filter, some other error causes null result to be returend) then the filter is still applied and that would definitely cause problems.", "author": "kshepherd", "createdAt": "2020-12-08T00:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTc2Mw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517865763", "bodyText": "better to use a primitive boolean", "author": "abollini", "createdAt": "2020-11-05T08:22:42Z", "path": "dspace-api/src/main/java/org/dspace/identifier/FilteredIdentifierProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.identifier;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.logic.Filter;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * This abstract class adds extra method signatures so that implementing IdentifierProviders can\n+ * handle \"skip filter\" booleans, so that any configured filters can be skipped and DOI registration forced.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public abstract class FilteredIdentifierProvider extends IdentifierProvider {\n+\n+    protected Filter filterService;\n+\n+    /**\n+     * Setter for spring to set the filter service from the property in configuration XML\n+     * @param filterService - an object implementing the org.dspace.content.logic.Filter interface\n+     */\n+    @Autowired\n+    public void setFilterService(Filter filterService) {\n+        this.filterService = filterService;\n+    }\n+\n+    /**\n+     * Register a new identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject to use for identifier registration\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @return identifier\n+     * @throws IdentifierException\n+     */\n+    public abstract String register(Context context, DSpaceObject dso, Boolean skipFilter)\n+        throws IdentifierException;\n+\n+    /**\n+     * Register a specified identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by the new identifier\n+     * @param identifier - String containing the identifier to register\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @throws IdentifierException\n+     */\n+    public abstract void register(Context context, DSpaceObject dso, String identifier, Boolean skipFilter)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTk5NA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537929994", "bodyText": "see my other comment near the canMint section - a null or missing filter should not default to false, so I didn't want to use a primitive here\nperhaps this also means i have confused things iwth my naming... would it be clearer code to read if there wa a primitive boolean called applyFilter instead of skipFilter? then it would be save since a null or missing filter would mean the default behaviour was applyFilter == false which is good.\ncurrently, if skipFilter is a primitive and ends up false for some non-logical reason (null or missing filter, some other error causes null result to be returend) then the filter is still applied and that would definitely cause problems.", "author": "kshepherd", "createdAt": "2020-12-08T00:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTgwMg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517865802", "bodyText": "better to use a primitive boolean", "author": "abollini", "createdAt": "2020-11-05T08:22:46Z", "path": "dspace-api/src/main/java/org/dspace/identifier/FilteredIdentifierProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.identifier;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.logic.Filter;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * This abstract class adds extra method signatures so that implementing IdentifierProviders can\n+ * handle \"skip filter\" booleans, so that any configured filters can be skipped and DOI registration forced.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public abstract class FilteredIdentifierProvider extends IdentifierProvider {\n+\n+    protected Filter filterService;\n+\n+    /**\n+     * Setter for spring to set the filter service from the property in configuration XML\n+     * @param filterService - an object implementing the org.dspace.content.logic.Filter interface\n+     */\n+    @Autowired\n+    public void setFilterService(Filter filterService) {\n+        this.filterService = filterService;\n+    }\n+\n+    /**\n+     * Register a new identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject to use for identifier registration\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @return identifier\n+     * @throws IdentifierException\n+     */\n+    public abstract String register(Context context, DSpaceObject dso, Boolean skipFilter)\n+        throws IdentifierException;\n+\n+    /**\n+     * Register a specified identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by the new identifier\n+     * @param identifier - String containing the identifier to register\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @throws IdentifierException\n+     */\n+    public abstract void register(Context context, DSpaceObject dso, String identifier, Boolean skipFilter)\n+        throws IdentifierException;\n+\n+    /**\n+     * Reserve a specified identifier for a given DSpaceObject (eg. reserving a DOI online with a registration agency)\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by this identifier\n+     * @param identifier - String containing the identifier to reserve\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing reservation\n+     * @throws IdentifierException\n+     * @throws IllegalArgumentException\n+     * @throws SQLException\n+     */\n+    public abstract void reserve(Context context, DSpaceObject dso, String identifier, Boolean skipFilter)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMDA1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537930053", "bodyText": "see my other comment near the canMint section - a null or missing filter should not default to false, so I didn't want to use a primitive here\nperhaps this also means i have confused things iwth my naming... would it be clearer code to read if there wa a primitive boolean called applyFilter instead of skipFilter? then it would be save since a null or missing filter would mean the default behaviour was applyFilter == false which is good.\ncurrently, if skipFilter is a primitive and ends up false for some non-logical reason (null or missing filter, some other error causes null result to be returend) then the filter is still applied and that would definitely cause problems.", "author": "kshepherd", "createdAt": "2020-12-08T00:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTg1MA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517865850", "bodyText": "better to use a primitive boolean", "author": "abollini", "createdAt": "2020-11-05T08:22:51Z", "path": "dspace-api/src/main/java/org/dspace/identifier/FilteredIdentifierProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.identifier;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.logic.Filter;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * This abstract class adds extra method signatures so that implementing IdentifierProviders can\n+ * handle \"skip filter\" booleans, so that any configured filters can be skipped and DOI registration forced.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public abstract class FilteredIdentifierProvider extends IdentifierProvider {\n+\n+    protected Filter filterService;\n+\n+    /**\n+     * Setter for spring to set the filter service from the property in configuration XML\n+     * @param filterService - an object implementing the org.dspace.content.logic.Filter interface\n+     */\n+    @Autowired\n+    public void setFilterService(Filter filterService) {\n+        this.filterService = filterService;\n+    }\n+\n+    /**\n+     * Register a new identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject to use for identifier registration\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @return identifier\n+     * @throws IdentifierException\n+     */\n+    public abstract String register(Context context, DSpaceObject dso, Boolean skipFilter)\n+        throws IdentifierException;\n+\n+    /**\n+     * Register a specified identifier for a given DSpaceObject\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by the new identifier\n+     * @param identifier - String containing the identifier to register\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing registration\n+     * @throws IdentifierException\n+     */\n+    public abstract void register(Context context, DSpaceObject dso, String identifier, Boolean skipFilter)\n+        throws IdentifierException;\n+\n+    /**\n+     * Reserve a specified identifier for a given DSpaceObject (eg. reserving a DOI online with a registration agency)\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by this identifier\n+     * @param identifier - String containing the identifier to reserve\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before performing reservation\n+     * @throws IdentifierException\n+     * @throws IllegalArgumentException\n+     * @throws SQLException\n+     */\n+    public abstract void reserve(Context context, DSpaceObject dso, String identifier, Boolean skipFilter)\n+        throws IdentifierException, IllegalArgumentException, SQLException;\n+\n+    /**\n+     * Mint a new identifier in DSpace - this is usually the first step of registration\n+     * @param context    - DSpace context\n+     * @param dso        - DSpaceObject identified by the new identifier\n+     * @param skipFilter - boolean indicating whether to skip any filtering of items before minting\n+     * @return a String containing the new identifier\n+     * @throws IdentifierException\n+     */\n+    public abstract String mint(Context context, DSpaceObject dso, Boolean skipFilter) throws IdentifierException;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNDQ5MQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537924491", "bodyText": "see my other comment near the canMint section - a null or missing filter should not default to false, so I didn't want to use a primitive here", "author": "kshepherd", "createdAt": "2020-12-07T23:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA3MTM1Ng==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r640071356", "bodyText": "ok but better to make this explicit in the javadoc", "author": "abollini", "createdAt": "2021-05-26T19:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzU2ODgwMQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r667568801", "bodyText": "I had a further think about this and realised primitive is fine - this is the skipFilter boolean anyway, not result (which was already refactored to primitive!) So i've refactored to primitive boolean and tested, we can resolve this.", "author": "kshepherd", "createdAt": "2021-07-12T01:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NzUwMA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517867500", "bodyText": "this look to be a duplicate code that could lead to an ignored NPE in cleanup", "author": "abollini", "createdAt": "2020-11-05T08:25:45Z", "path": "dspace-api/src/test/java/org/dspace/content/logic/LogicalFilterTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractUnitTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchemaEnum;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.logic.condition.MetadataValueMatchCondition;\n+import org.dspace.content.logic.operator.And;\n+import org.dspace.content.logic.operator.Nand;\n+import org.dspace.content.logic.operator.Nor;\n+import org.dspace.content.logic.operator.Not;\n+import org.dspace.content.logic.operator.Or;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.content.service.MetadataValueService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for logical filters, conditions and operators\n+ * @author Kim Shepherd\n+ */\n+public class LogicalFilterTest extends AbstractUnitTest {\n+    // Required services\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();\n+    private MetadataValueService metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService();\n+\n+    // Logger\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(LogicalFilterTest.class);\n+\n+    // Items and repository structure for testing\n+    Community owningCommunity;\n+    Collection collection;\n+    Item itemOne;\n+    Item itemTwo;\n+\n+    // Some simple statement lists for testing\n+    List<LogicalStatement> trueStatements;\n+    List<LogicalStatement> trueFalseStatements;\n+    List<LogicalStatement> falseStatements;\n+    LogicalStatement trueStatementOne;\n+    LogicalStatement falseStatementOne;\n+\n+    // Field and values used to set title metadata\n+    String element = \"title\";\n+    String qualifier = null;\n+    MetadataField metadataField;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            // Set up logical statement lists for operator testing\n+            setUpStatements();\n+            // Set up DSpace resources for condition and filter testing\n+            this.owningCommunity = communityService.create(null, context);\n+            this.collection = collectionService.create(context, owningCommunity);\n+            WorkspaceItem workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemOne = installItemService.installItem(context, workspaceItem);\n+            workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemTwo = installItemService.installItem(context, workspaceItem);\n+            // Initialise metadata field for later testing with both items\n+            this.metadataField = metadataFieldService.findByElement(context,\n+                MetadataSchemaEnum.DC.getName(), element, qualifier);\n+            context.restoreAuthSystemState();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorize Error in init\", ex);\n+            fail(\"Authorize Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.turnOffAuthorisationSystem();\n+        // Delete resources\n+        try {\n+            itemService.delete(context, itemOne);\n+            itemService.delete(context, itemTwo);\n+            itemService.delete(context, itemOne);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2Nzc3Nw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517867777", "bodyText": "better to log as it could help to trouble shooting issue in test cleanup", "author": "abollini", "createdAt": "2020-11-05T08:26:11Z", "path": "dspace-api/src/test/java/org/dspace/content/logic/LogicalFilterTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractUnitTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchemaEnum;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.logic.condition.MetadataValueMatchCondition;\n+import org.dspace.content.logic.operator.And;\n+import org.dspace.content.logic.operator.Nand;\n+import org.dspace.content.logic.operator.Nor;\n+import org.dspace.content.logic.operator.Not;\n+import org.dspace.content.logic.operator.Or;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.content.service.MetadataValueService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for logical filters, conditions and operators\n+ * @author Kim Shepherd\n+ */\n+public class LogicalFilterTest extends AbstractUnitTest {\n+    // Required services\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();\n+    private MetadataValueService metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService();\n+\n+    // Logger\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(LogicalFilterTest.class);\n+\n+    // Items and repository structure for testing\n+    Community owningCommunity;\n+    Collection collection;\n+    Item itemOne;\n+    Item itemTwo;\n+\n+    // Some simple statement lists for testing\n+    List<LogicalStatement> trueStatements;\n+    List<LogicalStatement> trueFalseStatements;\n+    List<LogicalStatement> falseStatements;\n+    LogicalStatement trueStatementOne;\n+    LogicalStatement falseStatementOne;\n+\n+    // Field and values used to set title metadata\n+    String element = \"title\";\n+    String qualifier = null;\n+    MetadataField metadataField;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            // Set up logical statement lists for operator testing\n+            setUpStatements();\n+            // Set up DSpace resources for condition and filter testing\n+            this.owningCommunity = communityService.create(null, context);\n+            this.collection = collectionService.create(context, owningCommunity);\n+            WorkspaceItem workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemOne = installItemService.installItem(context, workspaceItem);\n+            workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemTwo = installItemService.installItem(context, workspaceItem);\n+            // Initialise metadata field for later testing with both items\n+            this.metadataField = metadataFieldService.findByElement(context,\n+                MetadataSchemaEnum.DC.getName(), element, qualifier);\n+            context.restoreAuthSystemState();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorize Error in init\", ex);\n+            fail(\"Authorize Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.turnOffAuthorisationSystem();\n+        // Delete resources\n+        try {\n+            itemService.delete(context, itemOne);\n+            itemService.delete(context, itemTwo);\n+            itemService.delete(context, itemOne);\n+            collectionService.delete(context, collection);\n+            communityService.delete(context, owningCommunity);\n+        } catch (Exception e) {\n+            // ignore", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDMwOA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517870308", "bodyText": "I disagree here as null is a very special value and we are hardcoding in the test the logic of our current implementation. Any statement about a null item could/should return false.\nCan you switch the test to use a real item?", "author": "abollini", "createdAt": "2020-11-05T08:30:19Z", "path": "dspace-api/src/test/java/org/dspace/content/logic/LogicalFilterTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractUnitTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchemaEnum;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.logic.condition.MetadataValueMatchCondition;\n+import org.dspace.content.logic.operator.And;\n+import org.dspace.content.logic.operator.Nand;\n+import org.dspace.content.logic.operator.Nor;\n+import org.dspace.content.logic.operator.Not;\n+import org.dspace.content.logic.operator.Or;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.content.service.MetadataValueService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for logical filters, conditions and operators\n+ * @author Kim Shepherd\n+ */\n+public class LogicalFilterTest extends AbstractUnitTest {\n+    // Required services\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();\n+    private MetadataValueService metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService();\n+\n+    // Logger\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(LogicalFilterTest.class);\n+\n+    // Items and repository structure for testing\n+    Community owningCommunity;\n+    Collection collection;\n+    Item itemOne;\n+    Item itemTwo;\n+\n+    // Some simple statement lists for testing\n+    List<LogicalStatement> trueStatements;\n+    List<LogicalStatement> trueFalseStatements;\n+    List<LogicalStatement> falseStatements;\n+    LogicalStatement trueStatementOne;\n+    LogicalStatement falseStatementOne;\n+\n+    // Field and values used to set title metadata\n+    String element = \"title\";\n+    String qualifier = null;\n+    MetadataField metadataField;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            // Set up logical statement lists for operator testing\n+            setUpStatements();\n+            // Set up DSpace resources for condition and filter testing\n+            this.owningCommunity = communityService.create(null, context);\n+            this.collection = collectionService.create(context, owningCommunity);\n+            WorkspaceItem workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemOne = installItemService.installItem(context, workspaceItem);\n+            workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemTwo = installItemService.installItem(context, workspaceItem);\n+            // Initialise metadata field for later testing with both items\n+            this.metadataField = metadataFieldService.findByElement(context,\n+                MetadataSchemaEnum.DC.getName(), element, qualifier);\n+            context.restoreAuthSystemState();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorize Error in init\", ex);\n+            fail(\"Authorize Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.turnOffAuthorisationSystem();\n+        // Delete resources\n+        try {\n+            itemService.delete(context, itemOne);\n+            itemService.delete(context, itemTwo);\n+            itemService.delete(context, itemOne);\n+            collectionService.delete(context, collection);\n+            communityService.delete(context, owningCommunity);\n+        } catch (Exception e) {\n+            // ignore\n+        }\n+        context.restoreAuthSystemState();\n+\n+        // Set all class members to null\n+        owningCommunity = null;\n+        collection = null;\n+        itemOne = null;\n+        itemTwo = null;\n+        trueStatements = null;\n+        trueFalseStatements = null;\n+        falseStatements = null;\n+        trueStatementOne = null;\n+        falseStatementOne = null;\n+        element = null;\n+        qualifier = null;\n+        metadataField = null;\n+\n+        super.destroy();\n+    }\n+\n+    /**\n+     * Test the AND operator with simple lists of logical statements\n+     */\n+    @Test\n+    public void testAndOperator() {\n+        // Blank operator\n+        And and = new And();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA3ODk5Mw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r640078993", "bodyText": "the comment here and in the other test about the fact that the item can be null should be removed", "author": "abollini", "createdAt": "2021-05-26T19:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzU2ODc4OA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r667568788", "bodyText": "Understood - I fixed the comment and also used itemOne as a test case for all operator tests just to make it clearer that there is an item passed, and avoid any random null handling as you requested", "author": "kshepherd", "createdAt": "2021-07-12T01:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MTkzMA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r517871930", "bodyText": "a test with an item without the checked metadata should be included", "author": "abollini", "createdAt": "2020-11-05T08:33:01Z", "path": "dspace-api/src/test/java/org/dspace/content/logic/LogicalFilterTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractUnitTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchemaEnum;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.logic.condition.MetadataValueMatchCondition;\n+import org.dspace.content.logic.operator.And;\n+import org.dspace.content.logic.operator.Nand;\n+import org.dspace.content.logic.operator.Nor;\n+import org.dspace.content.logic.operator.Not;\n+import org.dspace.content.logic.operator.Or;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.content.service.MetadataValueService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for logical filters, conditions and operators\n+ * @author Kim Shepherd\n+ */\n+public class LogicalFilterTest extends AbstractUnitTest {\n+    // Required services\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();\n+    private MetadataValueService metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService();\n+\n+    // Logger\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(LogicalFilterTest.class);\n+\n+    // Items and repository structure for testing\n+    Community owningCommunity;\n+    Collection collection;\n+    Item itemOne;\n+    Item itemTwo;\n+\n+    // Some simple statement lists for testing\n+    List<LogicalStatement> trueStatements;\n+    List<LogicalStatement> trueFalseStatements;\n+    List<LogicalStatement> falseStatements;\n+    LogicalStatement trueStatementOne;\n+    LogicalStatement falseStatementOne;\n+\n+    // Field and values used to set title metadata\n+    String element = \"title\";\n+    String qualifier = null;\n+    MetadataField metadataField;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            // Set up logical statement lists for operator testing\n+            setUpStatements();\n+            // Set up DSpace resources for condition and filter testing\n+            this.owningCommunity = communityService.create(null, context);\n+            this.collection = collectionService.create(context, owningCommunity);\n+            WorkspaceItem workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemOne = installItemService.installItem(context, workspaceItem);\n+            workspaceItem = workspaceItemService.create(context, collection, false);\n+            this.itemTwo = installItemService.installItem(context, workspaceItem);\n+            // Initialise metadata field for later testing with both items\n+            this.metadataField = metadataFieldService.findByElement(context,\n+                MetadataSchemaEnum.DC.getName(), element, qualifier);\n+            context.restoreAuthSystemState();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorize Error in init\", ex);\n+            fail(\"Authorize Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.turnOffAuthorisationSystem();\n+        // Delete resources\n+        try {\n+            itemService.delete(context, itemOne);\n+            itemService.delete(context, itemTwo);\n+            itemService.delete(context, itemOne);\n+            collectionService.delete(context, collection);\n+            communityService.delete(context, owningCommunity);\n+        } catch (Exception e) {\n+            // ignore\n+        }\n+        context.restoreAuthSystemState();\n+\n+        // Set all class members to null\n+        owningCommunity = null;\n+        collection = null;\n+        itemOne = null;\n+        itemTwo = null;\n+        trueStatements = null;\n+        trueFalseStatements = null;\n+        falseStatements = null;\n+        trueStatementOne = null;\n+        falseStatementOne = null;\n+        element = null;\n+        qualifier = null;\n+        metadataField = null;\n+\n+        super.destroy();\n+    }\n+\n+    /**\n+     * Test the AND operator with simple lists of logical statements\n+     */\n+    @Test\n+    public void testAndOperator() {\n+        // Blank operator\n+        And and = new And();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves\n+        try {\n+            // Set to True, True (expect True)\n+            and.setStatements(trueStatements);\n+            assertTrue(\"AND operator did not return true for a list of true statements\",\n+                and.getResult(context, null));\n+            // Set to True, False (expect False)\n+            and.setStatements(trueFalseStatements);\n+            assertFalse(\"AND operator did not return false for a list of statements with at least one false\",\n+                and.getResult(context, null));\n+            // Set to False, False (expect False)\n+            and.setStatements(falseStatements);\n+            assertFalse(\"AND operator did not return false for a list of false statements\",\n+                and.getResult(context, null));\n+        } catch (LogicalStatementException e) {\n+            log.error(e.getMessage());\n+            fail(\"LogicalStatementException thrown testing the AND operator\" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test the OR operator with simple lists of logical statements\n+     */\n+    @Test\n+    public void testOrOperator() {\n+        // Blank operator\n+        Or or = new Or();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves\n+        try {\n+            // Set to True, True (expect True)\n+            or.setStatements(trueStatements);\n+            assertTrue(\"OR operator did not return true for a list of true statements\",\n+                or.getResult(context, null));\n+            // Set to True, False (expect True)\n+            or.setStatements(trueFalseStatements);\n+            assertTrue(\"OR operator did not return true for a list of statements with at least one false\",\n+                or.getResult(context, null));\n+            // Set to False, False (expect False)\n+            or.setStatements(falseStatements);\n+            assertFalse(\"OR operator did not return false for a list of false statements\",\n+                or.getResult(context, null));\n+        } catch (LogicalStatementException e) {\n+            log.error(e.getMessage());\n+            fail(\"LogicalStatementException thrown testing the OR operator\" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test the NAND operator with simple lists of logical statements\n+     */\n+    @Test\n+    public void testNandOperator() {\n+        // Blank operator\n+        Nand nand = new Nand();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves\n+        try {\n+            // Set to True, True (expect False)\n+            nand.setStatements(trueStatements);\n+            assertFalse(\"NAND operator did not return false for a list of true statements\",\n+                nand.getResult(context, null));\n+            // Set to True, False (expect True)\n+            nand.setStatements(trueFalseStatements);\n+            assertTrue(\"NAND operator did not return true for a list of statements with at least one false\",\n+                nand.getResult(context, null));\n+            // Set to False, False (expect True)\n+            nand.setStatements(falseStatements);\n+            assertTrue(\"NAND operator did not return true for a list of false statements\",\n+                nand.getResult(context, null));\n+        } catch (LogicalStatementException e) {\n+            log.error(e.getMessage());\n+            fail(\"LogicalStatementException thrown testing the NAND operator\" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test the NOR operator with simple lists of logical statements\n+     */\n+    @Test\n+    public void testNorOperator() {\n+        // Blank operator\n+        Nor nor = new Nor();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves\n+        try {\n+            // Set to True, True (expect False)\n+            nor.setStatements(trueStatements);\n+            assertFalse(\"NOR operator did not return false for a list of true statements\",\n+                nor.getResult(context, null));\n+            // Set to True, False (expect False)\n+            nor.setStatements(trueFalseStatements);\n+            assertFalse(\"NOR operator did not return false for a list of statements with a true and a false\",\n+                nor.getResult(context, null));\n+            // Set to False, False (expect True)\n+            nor.setStatements(falseStatements);\n+            assertTrue(\"NOR operator did not return true for a list of false statements\",\n+                nor.getResult(context, null));\n+        } catch (LogicalStatementException e) {\n+            log.error(e.getMessage());\n+            fail(\"LogicalStatementException thrown testing the NOR operator\" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test the NOT operator with simple individual true/false statements\n+     */\n+    @Test\n+    public void testNotOperator() {\n+        // Blank operator\n+        Not not = new Not();\n+        // Try tests - the item can be null, as the statements are simply returning booleans themselves\n+        try {\n+            // Set to True (expect False)\n+            not.setStatements(trueStatementOne);\n+            assertFalse(\"NOT operator did not return false for a true statement\",\n+                not.getResult(context, null));\n+            // Set to False (expect True)\n+            not.setStatements(falseStatementOne);\n+            assertTrue(\"NOT operator did not return true for a false statement\",\n+                not.getResult(context, null));\n+        } catch (LogicalStatementException e) {\n+            log.error(e.getMessage());\n+            fail(\"LogicalStatementException thrown testing the NOT operator\" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test a simple filter with a single logical statement: the MetadataValueMatchCondition\n+     * looking for a dc.title field beginning with \"TEST\"\n+     */\n+    @Test\n+    public void testMetadataValueMatchCondition() {\n+        try {\n+            MetadataValue metadataValueOne = metadataValueService.create(context, itemOne, metadataField);\n+            MetadataValue metadataValueTwo = metadataValueService.create(context, itemTwo, metadataField);\n+            metadataValueOne.setValue(\"TEST title should match the condition\");\n+            metadataValueTwo.setValue(\"This title should not match the condition\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDgwNzgzOQ==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r594807839", "bodyText": "That is what itemTwo is doing -- the check is for \"title begins with TEST\", and itemTwo has a title which is expected to not match.", "author": "kshepherd", "createdAt": "2021-03-16T01:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MTkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA3MzMxMg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r640073312", "bodyText": "I'm asking to cover an additional use case when the logic filter involve a metadata that is not present in the item at all. This to proof that no NPE are raised in such condition or a false positive match", "author": "abollini", "createdAt": "2021-05-26T19:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MTkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzU2ODc2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r667568762", "bodyText": "Understood, I've added a further test for an item where the field is \"dc.subject\" which the item doesn't contain at all", "author": "kshepherd", "createdAt": "2021-07-12T01:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MTkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTA3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r536159076", "bodyText": "hi @kshepherd, what about making this exception unchecked rather than checked? In this way the callers of the methods that throw this exception would not be forced to handle it all the time, since it might not even be clear what it is due to and how to handle it. In a more general discourse, I would prefer to use unchecked exception instead of checked because they create problems with the use of lambdas and create a coupling between the different service layers of the system. What do you think about it?", "author": "LucaGiamminonni", "createdAt": "2020-12-04T14:58:21Z", "path": "dspace-api/src/main/java/org/dspace/content/logic/LogicalStatementException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.logic;\n+\n+/**\n+ * Exception for errors encountered while evaluating logical statements\n+ * defined as spring beans.\n+ *\n+ * @author Kim Shepherd\n+ * @version $Revision$\n+ */\n+public class LogicalStatementException extends Exception {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNjgyMg==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537926822", "bodyText": "Thanks @LucaGiamminonni , I see what you mean. I'll think about how I can refactor this, maybe best made after some of the other suggested changes", "author": "kshepherd", "createdAt": "2020-12-07T23:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDc5NDc0Ng==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r594794746", "bodyText": "Hi @LucaGiamminonni , sorry for the late reply to this.\ni have refactored LogicalStatementException to be unchecked (by extending RuntimeException instead of Exception)\nif it looks good to you, please resolve this conversation", "author": "kshepherd", "createdAt": "2021-03-16T01:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM4MzgzMA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r640383830", "bodyText": "Hi @kshepherd , sorry for my late reply. So that's ok for me, thank you", "author": "LucaGiamminonni", "createdAt": "2021-05-27T08:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNzAzNw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537507037", "bodyText": "Hi @kshepherd , sorry to jump into this discussion.\nI understand the expected behaviour of this method as correctly explained in comments, and agree on what we really care about.\nBut with boolean as returned value, what happens if a client of this method, unaware of its behavior, calls it and makes his/her logic or whatever by handling a false return value that actually is not returned?\nThank you", "author": "corrad82-4s", "createdAt": "2020-12-07T13:31:01Z", "path": "dspace-api/src/main/java/org/dspace/identifier/DOIIdentifierProvider.java", "diffHunk": "@@ -832,7 +1089,39 @@ protected void removeDOIFromObject(Context context, DSpaceObject dso, String doi\n \n         itemService.clearMetadata(context, item, MD_SCHEMA, DOI_ELEMENT, DOI_QUALIFIER, null);\n         itemService.addMetadata(context, item, MD_SCHEMA, DOI_ELEMENT, DOI_QUALIFIER, null,\n-                                remainder);\n+                remainder);\n         itemService.update(context, item);\n     }\n-}\n+\n+    /**\n+     * Checks to see if an item can have a DOI minted, using the configured logical filter\n+     * @param context\n+     * @param dso The item to be evaluated\n+     * @return\n+     * @throws DOIIdentifierNotApplicableException\n+     */\n+    @Override\n+    public Boolean canMint(Context context, DSpaceObject dso) throws DOIIdentifierNotApplicableException {\n+        // Default is 'true' in the case of a null/missing filter. All we really care about is whether\n+        // an exception was thrown or not.\n+        log.debug(\"canMint is being called\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMzUwMw==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r537933503", "bodyText": "Hi @corrad82-4s , I see what you're getting at... what would be your suggestion? Should we make this methoid void instead of Boolean and perhaps make it clearer by renaming to checkMintable ?", "author": "kshepherd", "createdAt": "2020-12-08T00:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNzk0NA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r538817944", "bodyText": "hi @kshepherd ,\nyes, if there is no need to deal with returned value, and the purpose of this method is raise an exception if a dso is not mintable I would make it void and rename it in checkMintable", "author": "corrad82-4s", "createdAt": "2020-12-08T21:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDc5NDU0OA==", "url": "https://github.com/DSpace/DSpace/pull/2789#discussion_r594794548", "bodyText": "thanks @corrad82-4s - sorry for the late reply to this.\ni have refactored the method signature and usage here - it is now public void checkMintable() and does not return a value\nif it looks good to you, please resolve this conversation", "author": "kshepherd", "createdAt": "2021-03-16T01:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNzAzNw=="}], "type": "inlineReview"}, {"oid": "d27dc96cbef11c534d5c8e6706988c9d81ca13d7", "url": "https://github.com/DSpace/DSpace/commit/d27dc96cbef11c534d5c8e6706988c9d81ca13d7", "message": "[DS-4522](main) Item logical filters and DOI filtered provider", "committedDate": "2021-03-16T00:19:09Z", "type": "commit"}, {"oid": "11d7b5b063536aa1361305eddbbe1097f6323ebf", "url": "https://github.com/DSpace/DSpace/commit/11d7b5b063536aa1361305eddbbe1097f6323ebf", "message": "[DS-4522](main) RegisterDOI curation task (as CLI and UI control)", "committedDate": "2021-03-16T00:19:09Z", "type": "commit"}, {"oid": "b049e6511019600a256073d6d73c04ad32633226", "url": "https://github.com/DSpace/DSpace/commit/b049e6511019600a256073d6d73c04ad32633226", "message": "[DS-4522](main) Configuration (spring), providers and filters", "committedDate": "2021-03-16T00:22:33Z", "type": "commit"}, {"oid": "677623a1b74e3fc5b415bccb0b54c304bcc908f3", "url": "https://github.com/DSpace/DSpace/commit/677623a1b74e3fc5b415bccb0b54c304bcc908f3", "message": "[DS-4522](main) Unit tests for filters and DOI provider", "committedDate": "2021-03-16T00:25:30Z", "type": "commit"}, {"oid": "4e70bce553d379f6a532a2c90e9f2a10a3bfc442", "url": "https://github.com/DSpace/DSpace/commit/4e70bce553d379f6a532a2c90e9f2a10a3bfc442", "message": "[DS-4522](main) Fix default configuration for curation task", "committedDate": "2021-03-16T00:25:30Z", "type": "commit"}, {"oid": "6fbc4dbd6ff42119ba10e0613bd754305e3f917c", "url": "https://github.com/DSpace/DSpace/commit/6fbc4dbd6ff42119ba10e0613bd754305e3f917c", "message": "DS-4522: Add missing license header", "committedDate": "2021-03-16T00:25:30Z", "type": "commit"}, {"oid": "1bb5e35f04d210581f8fab88fae903bbcb0955cb", "url": "https://github.com/DSpace/DSpace/commit/1bb5e35f04d210581f8fab88fae903bbcb0955cb", "message": "[DS-4522] Refactor boolean canMint() to void checkMintable() as per PR review", "committedDate": "2021-03-16T00:32:09Z", "type": "commit"}, {"oid": "5096c66437bb9fa013aeaf4d45ff1f9afa3ccae8", "url": "https://github.com/DSpace/DSpace/commit/5096c66437bb9fa013aeaf4d45ff1f9afa3ccae8", "message": "[DS-4522] Expand debug log message to explain what happens when filter service is null", "committedDate": "2021-03-16T00:39:46Z", "type": "commit"}, {"oid": "692dbe7fadb7879f91c8ec84fd0fa95f6cd5b919", "url": "https://github.com/DSpace/DSpace/commit/692dbe7fadb7879f91c8ec84fd0fa95f6cd5b919", "message": "[DS-4522] Make LogicalStatementException unchecked as per PR review", "committedDate": "2021-03-16T00:40:52Z", "type": "commit"}, {"oid": "692dbe7fadb7879f91c8ec84fd0fa95f6cd5b919", "url": "https://github.com/DSpace/DSpace/commit/692dbe7fadb7879f91c8ec84fd0fa95f6cd5b919", "message": "[DS-4522] Make LogicalStatementException unchecked as per PR review", "committedDate": "2021-03-16T00:40:52Z", "type": "forcePushed"}, {"oid": "f74f4e3b18e9a86d15b1a2a9d9c1ce1a850166f8", "url": "https://github.com/DSpace/DSpace/commit/f74f4e3b18e9a86d15b1a2a9d9c1ce1a850166f8", "message": "[DS-4522] Remove fetchccdata.cfg include (accidentally kept during rebase vs main)", "committedDate": "2021-03-16T00:50:06Z", "type": "commit"}, {"oid": "a770e7996ee9ecd06b404b2a27b28502dbdf9153", "url": "https://github.com/DSpace/DSpace/commit/a770e7996ee9ecd06b404b2a27b28502dbdf9153", "message": "[DS-4522] Apply bugfix to InCollectionCondition - better 'owning collection' check", "committedDate": "2021-03-16T01:32:11Z", "type": "commit"}, {"oid": "da844bc03db360694954ae3602449e064e5e1ed9", "url": "https://github.com/DSpace/DSpace/commit/da844bc03db360694954ae3602449e064e5e1ed9", "message": "[DS-4522] Apply 'owning collection' fix to InCommunityCondition collection iteration", "committedDate": "2021-03-16T02:53:07Z", "type": "commit"}, {"oid": "5a853092200662404570424c7d370d9e08222b0e", "url": "https://github.com/DSpace/DSpace/commit/5a853092200662404570424c7d370d9e08222b0e", "message": "[DS-4522] Apply parameter, item, context checks as per PR review", "committedDate": "2021-03-16T02:53:38Z", "type": "commit"}, {"oid": "0abee654240a9307a4e5e7335f12e6e98f4a9035", "url": "https://github.com/DSpace/DSpace/commit/0abee654240a9307a4e5e7335f12e6e98f4a9035", "message": "[DS-4522] Add unit tests for Bitstream, InCollection, InCommunity, IsWithdrawn conds", "committedDate": "2021-03-16T02:54:21Z", "type": "commit"}, {"oid": "b51a894361866562450b114ef750bb58de7e5d20", "url": "https://github.com/DSpace/DSpace/commit/b51a894361866562450b114ef750bb58de7e5d20", "message": "[DS-4522] Add unit tests for remaining conditions, fix service instantiation for tests", "committedDate": "2021-03-23T00:52:02Z", "type": "commit"}, {"oid": "a3beda1a055d071ade4e0f2e1b6de1c5afdca991", "url": "https://github.com/DSpace/DSpace/commit/a3beda1a055d071ade4e0f2e1b6de1c5afdca991", "message": "[DS-4522] Remove unused imports", "committedDate": "2021-03-23T01:34:45Z", "type": "commit"}, {"oid": "cc1f67734e510adb7ffe19df31e4442d08ac152f", "url": "https://github.com/DSpace/DSpace/commit/cc1f67734e510adb7ffe19df31e4442d08ac152f", "message": "[DS-4522] Refactor LogicalStatement.getResult() type to primitive boolean", "committedDate": "2021-03-23T01:34:58Z", "type": "commit"}, {"oid": "3d609faf07366f05f4acba2d4372911c1846631a", "url": "https://github.com/DSpace/DSpace/commit/3d609faf07366f05f4acba2d4372911c1846631a", "message": "[DS-4522] Use more generic IdentifierNotApplicableException where applicable", "committedDate": "2021-03-23T03:17:47Z", "type": "commit"}, {"oid": "713d91eaa2c923b86848dccf549d77f580e60096", "url": "https://github.com/DSpace/DSpace/commit/713d91eaa2c923b86848dccf549d77f580e60096", "message": "[DS-4522] Clean up unused imports", "committedDate": "2021-03-24T00:28:10Z", "type": "commit"}, {"oid": "713469cd8095bf64fa3805a7d33a85392e4cf685", "url": "https://github.com/DSpace/DSpace/commit/713469cd8095bf64fa3805a7d33a85392e4cf685", "message": "[DS-4522] Removed operator test null item references and comments as per review", "committedDate": "2021-07-12T00:44:10Z", "type": "commit"}, {"oid": "2e6552c0c9a4bbc5e9fde3fda27761bf23e7be7c", "url": "https://github.com/DSpace/DSpace/commit/2e6552c0c9a4bbc5e9fde3fda27761bf23e7be7c", "message": "[DS-4522] Refactor skipFilter Boolean -> boolean (primitive) as per review", "committedDate": "2021-07-12T01:05:19Z", "type": "commit"}, {"oid": "4d33fb706caaf60ec076135b58eb376a04275040", "url": "https://github.com/DSpace/DSpace/commit/4d33fb706caaf60ec076135b58eb376a04275040", "message": "[DS-4522] Add a metadata match test to test for field that item doesn't contain", "committedDate": "2021-07-12T01:19:15Z", "type": "commit"}, {"oid": "75c93601f88a1d3cca139eccab45bdb36bba8cac", "url": "https://github.com/DSpace/DSpace/commit/75c93601f88a1d3cca139eccab45bdb36bba8cac", "message": "[DS-4522] Clean up unused import", "committedDate": "2021-07-12T01:38:18Z", "type": "commit"}]}