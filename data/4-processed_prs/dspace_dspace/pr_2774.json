{"pr_number": 2774, "pr_title": "DS-4486 Add support/tests for Collection/Community role-based groups for Community/Collection Admins", "pr_createdAt": "2020-05-28T20:37:27Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2774", "timeline": [{"oid": "9493834f59819a18cc7cb8c01de22c4d988357fa", "url": "https://github.com/DSpace/DSpace/commit/9493834f59819a18cc7cb8c01de22c4d988357fa", "message": "added implementations for support for Collection/Community role-based groups for Community/Collection Admins", "committedDate": "2020-05-27T09:21:08Z", "type": "commit"}, {"oid": "141284e7fab5d74fad0f200f61759b6f61031d9b", "url": "https://github.com/DSpace/DSpace/commit/141284e7fab5d74fad0f200f61759b6f61031d9b", "message": "added ITs for search method byMetadata by community admin and by collection admin", "committedDate": "2020-05-27T09:25:01Z", "type": "commit"}, {"oid": "6df58917b4d3011d9e458015e2b30bbfb6c929cb", "url": "https://github.com/DSpace/DSpace/commit/6df58917b4d3011d9e458015e2b30bbfb6c929cb", "message": "added ITs to prove that admins of community/collection can manage submitters", "committedDate": "2020-05-27T16:56:51Z", "type": "commit"}, {"oid": "34b61f3b98eb22436a652f6270ff32e85cd6eb2f", "url": "https://github.com/DSpace/DSpace/commit/34b61f3b98eb22436a652f6270ff32e85cd6eb2f", "message": "added ITs to prove that admins of community/collection can manage their own groups", "committedDate": "2020-05-28T17:07:50Z", "type": "commit"}, {"oid": "361086710537d061df59e6c7b17ea1aa47466870", "url": "https://github.com/DSpace/DSpace/commit/361086710537d061df59e6c7b17ea1aa47466870", "message": "Add missing test from https://github.com/DSpace/DSpace/pull/2770", "committedDate": "2020-05-29T11:19:49Z", "type": "commit"}, {"oid": "41ca123ae4e181d7d4f670a544cf0da4be944f90", "url": "https://github.com/DSpace/DSpace/commit/41ca123ae4e181d7d4f670a544cf0da4be944f90", "message": "Merge branch 'master' into DS-4486", "committedDate": "2020-06-05T15:48:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NTkzNg==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r437355936", "bodyText": "This if is in another if that checks the following:\n               if (AuthorizeConfiguration.canCollectionAdminManageWorkflows() || AuthorizeConfiguration.canCommunityAdminManageCollectionWorkflows()) {\nShould that if not be expanded to include this one ?\nShould it also not a include a check on AuthorizeConfiguration.canCommunityAdminManagePolicies() ?", "author": "KevinVdV", "createdAt": "2020-06-09T12:05:50Z", "path": "dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java", "diffHunk": "@@ -654,6 +658,21 @@ public DSpaceObject getParentObject(Context context, Group group) throws SQLExce\n                                 return collectionService.getParentObject(context, collection);\n                             }\n                         }\n+                    } else {\n+                        if (AuthorizeConfiguration.canCollectionAdminManagePolicies()) {", "originalCommit": "41ca123ae4e181d7d4f670a544cf0da4be944f90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODY1Mg==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r437358652", "bodyText": "Small typo in the variable name, should be \"isCollectionAdmin\"", "author": "KevinVdV", "createdAt": "2020-06-09T12:10:53Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/EPersonRestAuthenticationProvider.java", "diffHunk": "@@ -140,14 +143,21 @@ private Authentication createAuthentication(final String password, final Context\n \n         if (eperson != null) {\n             boolean isAdmin = false;\n+            boolean isCommunityAdmin = false;\n+            boolean isColectionAdmin = false;\n             try {\n                 isAdmin = authorizeService.isAdmin(context, eperson);\n+                isCommunityAdmin = authorizeService.isCommunityAdmin(context, eperson);\n+                isColectionAdmin = authorizeService.isCollectionAdmin(context, eperson);", "originalCommit": "41ca123ae4e181d7d4f670a544cf0da4be944f90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTIxNw==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r437359217", "bodyText": "Can we rename this constant ? ACCOUNT_ADMIN_GRANT doesn't really point to the fact that the user could be a community / collection admin.", "author": "KevinVdV", "createdAt": "2020-06-09T12:11:53Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/EPersonRestAuthenticationProvider.java", "diffHunk": "@@ -47,6 +48,8 @@\n \n     private static final Logger log = LoggerFactory.getLogger(EPersonRestAuthenticationProvider.class);\n \n+    public static final String ACCOUNT_ADMIN_GRANT = \"ACCOUNT_ADMIN\";", "originalCommit": "41ca123ae4e181d7d4f670a544cf0da4be944f90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NTMyOA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r438095328", "bodyText": "According to our current security delegation configuration, it is not enough to be a collection admin to become an \"account admin\". Collection admins could be eventually configured in a way that they don't need to manage account at all for such reason there is a dedicated GRANT that is assigned only when appropriate, see https://github.com/DSpace/DSpace/pull/2774/files#diff-75737abf8cbbd99c3297a55345498763R158\nIt could be useful to add a GRANT related to the community admin or collection admin roles but this is a bit out of scope (unnecessary) of this PR and for such reason I have suggested to don't include", "author": "abollini", "createdAt": "2020-06-10T12:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjU2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439062569", "bodyText": "I'm not sure about the name here too. The name \"ACCOUNT_ADMIN\" sounds like this role is for administration of all accounts in DSpace, so I'd expect that role to be able to add/delete/update all EPerson objects (which isn't the case here).\nThis role is more about managing the access permissions/groups of a Community/Collection, which only involves having delete rights on those specific groups, while having read permissions on all other Groups/EPeople.\nSo, I wonder if we should rename this to be something like MANAGE_ACCESS_GROUPS or MANAGE_COMCOL_GROUPS or similar.  That'd make it clearer that this is less about ADMIN rights, and more about management of group memberships.", "author": "tdonohue", "createdAt": "2020-06-11T20:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1OTE4MA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439259180", "bodyText": "I agree, MANAGE_ACCESS_GROUPS looks indeed a better name", "author": "abollini", "createdAt": "2020-06-12T07:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTIxNw=="}], "type": "inlineReview"}, {"oid": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "url": "https://github.com/DSpace/DSpace/commit/f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "message": "Implement community feedbacks", "committedDate": "2020-06-11T09:20:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1OTQ2Mw==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439059463", "bodyText": "Tiny thing, this method should have an @Override", "author": "tdonohue", "createdAt": "2020-06-11T20:41:22Z", "path": "dspace-api/src/main/java/org/dspace/authorize/AuthorizeServiceImpl.java", "diffHunk": "@@ -430,7 +430,10 @@ public boolean isAdmin(Context c, EPerson e) throws SQLException {\n \n     public boolean isCommunityAdmin(Context c) throws SQLException {\n         EPerson e = c.getCurrentUser();\n+        return isCommunityAdmin(c, e);\n+    }\n \n+    public boolean isCommunityAdmin(Context c, EPerson e) throws SQLException {", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1OTUyOA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439059528", "bodyText": "Again, this method should have an @Override", "author": "tdonohue", "createdAt": "2020-06-11T20:41:31Z", "path": "dspace-api/src/main/java/org/dspace/authorize/AuthorizeServiceImpl.java", "diffHunk": "@@ -446,7 +449,10 @@ public boolean isCommunityAdmin(Context c) throws SQLException {\n \n     public boolean isCollectionAdmin(Context c) throws SQLException {\n         EPerson e = c.getCurrentUser();\n+        return isCollectionAdmin(c, e);\n+    }\n \n+    public boolean isCollectionAdmin(Context c, EPerson e) throws SQLException {", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NjY1MQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439086651", "bodyText": "You don't need these two context lines here. You can change a configuration property in tests without turning off the authorization system.  Also, the configuration system resets itself after every test, so you may be able to remove all three lines here...you need not reset it back to the default value.", "author": "tdonohue", "createdAt": "2020-06-11T21:44:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4Njg0MA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439086840", "bodyText": "Again, no need to turn off/on authorization here.", "author": "tdonohue", "createdAt": "2020-06-11T21:45:10Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NzMyNA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439087324", "bodyText": "These 3 lines can be removed, no need to reset it to the default value, it'll do that automatically after the test runs.", "author": "tdonohue", "createdAt": "2020-06-11T21:46:18Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NzQ2NQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439087465", "bodyText": "Same here, can remove these 3 lines. It'll reset automatically.", "author": "tdonohue", "createdAt": "2020-06-11T21:46:39Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NzYxOA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439087618", "bodyText": "No need to turn off authorization to change a config value. remove context lines", "author": "tdonohue", "createdAt": "2020-06-11T21:47:03Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NzY1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439087659", "bodyText": "These 3 lines can be removed", "author": "tdonohue", "createdAt": "2020-06-11T21:47:12Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4OTAxOA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439089018", "bodyText": "These 4 lines can be removed. configs will reset to defaults automatically.", "author": "tdonohue", "createdAt": "2020-06-11T21:49:07Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4OTY2NA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439089664", "bodyText": "These 4 lines can be removed. Configs reset automatically.", "author": "tdonohue", "createdAt": "2020-06-11T21:50:01Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4OTg5OA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439089898", "bodyText": "No need to turn off authorization to set configs", "author": "tdonohue", "createdAt": "2020-06-11T21:50:19Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MDA4NA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439090084", "bodyText": "These 4 lines can be removed. Configs reset automatically.", "author": "tdonohue", "createdAt": "2020-06-11T21:50:34Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MDE4Ng==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439090186", "bodyText": "These 4 lines can be removed. Configs reset automatically.", "author": "tdonohue", "createdAt": "2020-06-11T21:50:41Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MDQyMQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439090421", "bodyText": "No need to turn on/off authorization to set configs", "author": "tdonohue", "createdAt": "2020-06-11T21:50:59Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityAdminGroupRestControllerIT.java", "diffHunk": "@@ -437,4 +457,376 @@ public void deleteCommunityAdminGroupNotFoundTest() throws Exception {\n         getClient(token).perform(delete(\"/api/core/communities/\" + UUID.randomUUID() + \"/adminGroup\"))\n                         .andExpect(status().isNotFound());\n     }\n+\n+    @Test\n+    public void communityAdminAddMembersToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+            .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCommunityAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = communityService.createAdministrators(context, parentCommunity);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void communityAdminRemoveChildGroupFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, parentCommunity, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(MediaType.parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MjE5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439092197", "bodyText": "No need to reset these values. These 4 lines can be removed", "author": "tdonohue", "createdAt": "2020-06-11T21:53:31Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1914,5 +1938,987 @@ public void patchNameTest() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson colSubmitter = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"colSubmitter@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(colSubmitter)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenSubmitterCol = getAuthToken(colSubmitter.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk()).andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\", Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenSubmitterCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminWithoutAuthorizationsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        List<String> confPropsCommunityAdmins = new LinkedList<>();\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.admin-group\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.workflows\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.submitters\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+\n+        for (String prop : confPropsCommunityAdmins) {\n+            getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void commAdminManageOwnerAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Group groupAdmins = child1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenCommAdmin = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdmins.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminManageSubmitterGroupAndAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdmins = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                               + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupAdmins));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter3, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminWithoutRightsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(submitter2)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                 ))\n+                 .andExpect(status().isForbidden());\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+    }\n+\n+    @Test\n+    public void communityAdminCanManageCollectionSubmittersGroupAndAdminsGroupsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdministrators = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                        + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                         ))\n+                 .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupSubmitters.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupAdministrators.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+                .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdministrators));\n+        assertTrue(groupService.isMember(context, adminCol1, groupAdministrators));\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdministrators.getID() + \"/epersons/\" + adminCol1.getID()))\n+                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, adminCol1, groupAdministrators));\n+\n+    }\n+\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageItemReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+        Group itemReadGroup = collectionService.createDefaultReadGroup(context, col1, itemGroupString, defaultItemRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageBitstreamReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group bitstreamReadGroup = collectionService.createDefaultReadGroup(context, col1, bitstreamGroupString,\n+                                                                                            defaultBitstreamRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageWorkflowGroupsTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withWorkflowGroup(1, eperson)\n+                                           .withWorkflowGroup(2, eperson)\n+                                           .build();\n+\n+        Group workflowGroupStep1 = col1.getWorkflowStep1(context);\n+        Group workflowGroupStep2 = col1.getWorkflowStep2(context);\n+\n+        context.restoreAuthSystemState();\n+\n+        assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+        assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + workflowGroupStep1.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, workflowGroupStep1));\n+\n+       getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + workflowGroupStep2.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+      getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep2.getID() + \"/epersons/\" + submitter2.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep1.getID() + \"/epersons/\" + submitter1.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+      assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MjQ1Ng==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439092456", "bodyText": "No need to turn off/on authorization to set configs. The context lines here can be removed", "author": "tdonohue", "createdAt": "2020-06-11T21:53:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1914,5 +1938,987 @@ public void patchNameTest() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson colSubmitter = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"colSubmitter@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(colSubmitter)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenSubmitterCol = getAuthToken(colSubmitter.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk()).andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\", Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenSubmitterCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminWithoutAuthorizationsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        List<String> confPropsCommunityAdmins = new LinkedList<>();\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.admin-group\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.workflows\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.submitters\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+\n+        for (String prop : confPropsCommunityAdmins) {\n+            getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void commAdminManageOwnerAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Group groupAdmins = child1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenCommAdmin = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdmins.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminManageSubmitterGroupAndAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdmins = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                               + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupAdmins));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter3, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminWithoutRightsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(submitter2)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                 ))\n+                 .andExpect(status().isForbidden());\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+    }\n+\n+    @Test\n+    public void communityAdminCanManageCollectionSubmittersGroupAndAdminsGroupsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdministrators = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                        + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                         ))\n+                 .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupSubmitters.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupAdministrators.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+                .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdministrators));\n+        assertTrue(groupService.isMember(context, adminCol1, groupAdministrators));\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdministrators.getID() + \"/epersons/\" + adminCol1.getID()))\n+                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, adminCol1, groupAdministrators));\n+\n+    }\n+\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageItemReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+        Group itemReadGroup = collectionService.createDefaultReadGroup(context, col1, itemGroupString, defaultItemRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageBitstreamReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group bitstreamReadGroup = collectionService.createDefaultReadGroup(context, col1, bitstreamGroupString,\n+                                                                                            defaultBitstreamRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageWorkflowGroupsTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withWorkflowGroup(1, eperson)\n+                                           .withWorkflowGroup(2, eperson)\n+                                           .build();\n+\n+        Group workflowGroupStep1 = col1.getWorkflowStep1(context);\n+        Group workflowGroupStep2 = col1.getWorkflowStep2(context);\n+\n+        context.restoreAuthSystemState();\n+\n+        assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+        assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + workflowGroupStep1.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, workflowGroupStep1));\n+\n+       getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + workflowGroupStep2.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+      getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep2.getID() + \"/epersons/\" + submitter2.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep1.getID() + \"/epersons/\" + submitter1.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+      assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MjY0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439092645", "bodyText": "Again, these 4 lines can be removed", "author": "tdonohue", "createdAt": "2020-06-11T21:54:10Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1914,5 +1938,987 @@ public void patchNameTest() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson colSubmitter = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"colSubmitter@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(colSubmitter)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenSubmitterCol = getAuthToken(colSubmitter.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk()).andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\", Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenSubmitterCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminWithoutAuthorizationsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        List<String> confPropsCommunityAdmins = new LinkedList<>();\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.admin-group\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.workflows\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.submitters\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+\n+        for (String prop : confPropsCommunityAdmins) {\n+            getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void commAdminManageOwnerAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Group groupAdmins = child1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenCommAdmin = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdmins.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminManageSubmitterGroupAndAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdmins = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                               + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupAdmins));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter3, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminWithoutRightsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(submitter2)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                 ))\n+                 .andExpect(status().isForbidden());\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+    }\n+\n+    @Test\n+    public void communityAdminCanManageCollectionSubmittersGroupAndAdminsGroupsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdministrators = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                        + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                         ))\n+                 .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupSubmitters.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupAdministrators.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+                .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdministrators));\n+        assertTrue(groupService.isMember(context, adminCol1, groupAdministrators));\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdministrators.getID() + \"/epersons/\" + adminCol1.getID()))\n+                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, adminCol1, groupAdministrators));\n+\n+    }\n+\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageItemReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+        Group itemReadGroup = collectionService.createDefaultReadGroup(context, col1, itemGroupString, defaultItemRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageBitstreamReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group bitstreamReadGroup = collectionService.createDefaultReadGroup(context, col1, bitstreamGroupString,\n+                                                                                            defaultBitstreamRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageWorkflowGroupsTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withWorkflowGroup(1, eperson)\n+                                           .withWorkflowGroup(2, eperson)\n+                                           .build();\n+\n+        Group workflowGroupStep1 = col1.getWorkflowStep1(context);\n+        Group workflowGroupStep2 = col1.getWorkflowStep2(context);\n+\n+        context.restoreAuthSystemState();\n+\n+        assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+        assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + workflowGroupStep1.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, workflowGroupStep1));\n+\n+       getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + workflowGroupStep2.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+      getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep2.getID() + \"/epersons/\" + submitter2.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep1.getID() + \"/epersons/\" + submitter1.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+      assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MjgwNQ==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439092805", "bodyText": "Same here, these 4 lines can be removed", "author": "tdonohue", "createdAt": "2020-06-11T21:54:23Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1914,5 +1938,987 @@ public void patchNameTest() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson colSubmitter = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"colSubmitter@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(colSubmitter)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenSubmitterCol = getAuthToken(colSubmitter.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk()).andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\", Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenSubmitterCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminWithoutAuthorizationsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        List<String> confPropsCommunityAdmins = new LinkedList<>();\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.admin-group\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.workflows\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.submitters\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+\n+        for (String prop : confPropsCommunityAdmins) {\n+            getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void commAdminManageOwnerAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Group groupAdmins = child1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenCommAdmin = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdmins.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminManageSubmitterGroupAndAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdmins = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                               + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupAdmins));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter3, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminWithoutRightsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(submitter2)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                 ))\n+                 .andExpect(status().isForbidden());\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+    }\n+\n+    @Test\n+    public void communityAdminCanManageCollectionSubmittersGroupAndAdminsGroupsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdministrators = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                        + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                         ))\n+                 .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupSubmitters.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupAdministrators.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+                .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdministrators));\n+        assertTrue(groupService.isMember(context, adminCol1, groupAdministrators));\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdministrators.getID() + \"/epersons/\" + adminCol1.getID()))\n+                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, adminCol1, groupAdministrators));\n+\n+    }\n+\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageItemReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+        Group itemReadGroup = collectionService.createDefaultReadGroup(context, col1, itemGroupString, defaultItemRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageBitstreamReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group bitstreamReadGroup = collectionService.createDefaultReadGroup(context, col1, bitstreamGroupString,\n+                                                                                            defaultBitstreamRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageWorkflowGroupsTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withWorkflowGroup(1, eperson)\n+                                           .withWorkflowGroup(2, eperson)\n+                                           .build();\n+\n+        Group workflowGroupStep1 = col1.getWorkflowStep1(context);\n+        Group workflowGroupStep2 = col1.getWorkflowStep2(context);\n+\n+        context.restoreAuthSystemState();\n+\n+        assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+        assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + workflowGroupStep1.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, workflowGroupStep1));\n+\n+       getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + workflowGroupStep2.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+      getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep2.getID() + \"/epersons/\" + submitter2.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep1.getID() + \"/epersons/\" + submitter1.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+      assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MzAwMA==", "url": "https://github.com/DSpace/DSpace/pull/2774#discussion_r439093000", "bodyText": "No need to turn on/off authorization to set configs.", "author": "tdonohue", "createdAt": "2020-06-11T21:54:39Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1914,5 +1938,987 @@ public void patchNameTest() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson colSubmitter = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"colSubmitter@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(colSubmitter)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenSubmitterCol = getAuthToken(colSubmitter.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isOk()).andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.groups\", Matchers.containsInAnyOrder(\n+                           GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                           GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                           GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+        getClient(tokenSubmitterCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findByMetadataByCommAdminAndByColAdminWithoutAuthorizationsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        List<String> confPropsCommunityAdmins = new LinkedList<>();\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.admin-group\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.policies\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.workflows\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.submitters\");\n+        confPropsCommunityAdmins.add(\"core.authorization.community-admin.collection.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .build();\n+\n+        Group group1 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group\")\n+                                   .build();\n+\n+        Group group2 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 2\")\n+                                   .build();\n+\n+        Group group3 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test group 3\")\n+                                   .build();\n+\n+        Group group4 = GroupBuilder.createGroup(context)\n+                                   .withName(\"Test other group\")\n+                                   .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+\n+        for (String prop : confPropsCommunityAdmins) {\n+            getClient(tokenAdminComm).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                    .param(\"query\", group1.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(content().contentType(contentType))\n+                    .andExpect(jsonPath(\"$._embedded.groups\",Matchers.containsInAnyOrder(\n+                               GroupMatcher.matchGroupEntry(group1.getID(), group1.getName()),\n+                               GroupMatcher.matchGroupEntry(group2.getID(), group2.getName()),\n+                               GroupMatcher.matchGroupEntry(group3.getID(), group3.getName()))))\n+                    .andExpect(jsonPath(\"$.page.totalElements\", is(3)));\n+\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        getClient(tokenAdminCol).perform(get(\"/api/eperson/groups/search/byMetadata\")\n+                .param(\"query\", group1.getName()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void commAdminManageOwnerAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Group groupAdmins = child1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenCommAdmin = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdmins));\n+\n+        getClient(tokenCommAdmin).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdmins.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminManageSubmitterGroupAndAdminGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdmins = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                               + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupAdmins));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupAdmins.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter3, groupAdmins));\n+    }\n+\n+    @Test\n+    public void colAdminWithoutRightsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        List<String> confPropsCollectionAdmins = new LinkedList<>();\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.policies\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.submitters\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.workflows\");\n+        confPropsCollectionAdmins.add(\"core.authorization.collection-admin.admin-group\");\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter3 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Jack\", \"Brown\")\n+                .withEmail(\"submitter3@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(submitter2)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminCol = getAuthToken(adminCol1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(\n+                post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                        .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+               .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+\n+        for (String prop : confPropsCollectionAdmins) {\n+            configurationService.setProperty(prop, false);\n+        }\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter3.getID()\n+                 ))\n+                 .andExpect(status().isForbidden());\n+\n+        assertFalse(groupService.isMember(context, submitter3, groupSubmitters));\n+    }\n+\n+    @Test\n+    public void communityAdminCanManageCollectionSubmittersGroupAndAdminsGroupsTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        Group groupSubmitters = col1.getSubmitters();\n+        Group groupAdministrators = col1.getAdministrators();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertFalse(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupSubmitters.getID() + \"/epersons\")\n+                 .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                 .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID() + \"/\\n\"\n+                        + REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()\n+                         ))\n+                 .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupSubmitters.getID() + \"/epersons/\" + submitter1.getID()))\n+                                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, submitter1, groupSubmitters));\n+        assertTrue(groupService.isMember(context, submitter2, groupSubmitters));\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + groupAdministrators.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()\n+                        ))\n+                .andExpect(status().isNoContent());\n+\n+        assertTrue(groupService.isMember(context, submitter1, groupAdministrators));\n+        assertTrue(groupService.isMember(context, adminCol1, groupAdministrators));\n+        getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                          + groupAdministrators.getID() + \"/epersons/\" + adminCol1.getID()))\n+                 .andExpect(status().isNoContent());\n+\n+        assertFalse(groupService.isMember(context, adminCol1, groupAdministrators));\n+\n+    }\n+\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageItemReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String itemGroupString = \"ITEM\";\n+        int defaultItemRead = Constants.DEFAULT_ITEM_READ;\n+        Group itemReadGroup = collectionService.createDefaultReadGroup(context, col1, itemGroupString, defaultItemRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + itemReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, itemReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + itemReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, itemReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageBitstreamReadGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        String bitstreamGroupString = \"BITSTREAM\";\n+        int defaultBitstreamRead = Constants.DEFAULT_BITSTREAM_READ;\n+\n+        Group bitstreamReadGroup = collectionService.createDefaultReadGroup(context, col1, bitstreamGroupString,\n+                                                                                            defaultBitstreamRead);\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+        assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+        getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+\n+       getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + bitstreamReadGroup.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter2.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+       assertFalse(groupService.isMember(context, submitter2, bitstreamReadGroup));\n+\n+       getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                         + bitstreamReadGroup.getID() + \"/epersons/\" + submitter1.getID()))\n+                                .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, bitstreamReadGroup));\n+\n+    }\n+\n+    @Test\n+    public void commAdminAndColAdminCanManageWorkflowGroupsTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Oliver\", \"Rossi\")\n+                .withEmail(\"adminChild1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"James\", \"Rossi\")\n+                .withEmail(\"adminCol1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Carl\", \"Rossi\")\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(password)\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withNameInMetadata(\"Robert\", \"Clarks\")\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .withAdminGroup(adminChild1)\n+                                           .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withAdminGroup(adminCol1)\n+                                           .withWorkflowGroup(1, eperson)\n+                                           .withWorkflowGroup(2, eperson)\n+                                           .build();\n+\n+        Group workflowGroupStep1 = col1.getWorkflowStep1(context);\n+        Group workflowGroupStep2 = col1.getWorkflowStep2(context);\n+\n+        context.restoreAuthSystemState();\n+\n+        assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+        assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);\n+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);\n+\n+        getClient(tokenAdminComm).perform(post(\"/api/eperson/groups/\" + workflowGroupStep1.getID() + \"/epersons\")\n+                .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+                .content(REST_SERVER_URL + \"eperson/groups/\" + submitter1.getID()))\n+                .andExpect(status().isNoContent());\n+\n+       assertTrue(groupService.isMember(context, submitter1, workflowGroupStep1));\n+\n+       getClient(tokenAdminCol).perform(post(\"/api/eperson/groups/\" + workflowGroupStep2.getID() + \"/epersons\")\n+               .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n+               .content(REST_SERVER_URL + \"eperson/groups/\" + submitter2.getID()))\n+               .andExpect(status().isNoContent());\n+\n+      assertTrue(groupService.isMember(context, submitter2, workflowGroupStep2));\n+\n+      getClient(tokenAdminComm).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep2.getID() + \"/epersons/\" + submitter2.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      getClient(tokenAdminCol).perform(delete(\"/api/eperson/groups/\"\n+                                        + workflowGroupStep1.getID() + \"/epersons/\" + submitter1.getID()))\n+                               .andExpect(status().isNoContent());\n+\n+      assertFalse(groupService.isMember(context, submitter1, workflowGroupStep1));\n+      assertFalse(groupService.isMember(context, submitter2, workflowGroupStep2));\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupSuccess() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups/\" + group.getID()))\n+                        .andExpect(status().isNoContent());\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddMembersToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.not(Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveMembersFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        EPerson ePerson = EPersonBuilder.createEPerson(context).withEmail(\"testToAdd@test.com\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/epersons/\" + ePerson.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+        getClient(token).perform(delete(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons/\" + ePerson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/epersons\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.epersons\", Matchers.hasItem(\n+                            EPersonMatcher.matchEPersonOnEmail(ePerson.getEmail())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminAddChildGroupToCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+        token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.not(Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        ))));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", true);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", true);\n+        context.restoreAuthSystemState();\n+\n+    }\n+\n+    @Test\n+    public void collectionAdminRemoveChildGroupFromCollectionAdminGroupPropertySetToFalse() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        Group adminGroup = collectionService.createAdministrators(context, collection);\n+        authorizeService.addPolicy(context, collection, Constants.ADMIN, eperson);\n+        Group group = GroupBuilder.createGroup(context).withName(\"testGroup\").build();\n+        context.restoreAuthSystemState();\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(\n+            post(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\")\n+                .contentType(parseMediaType\n+                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                         .TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/eperson/groups/\" + group.getID()));\n+\n+        getClient(token).perform(get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/subgroups\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.subgroups\", Matchers.hasItem(\n+                            GroupMatcher.matchGroupWithName(group.getName())\n+                        )));\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"core.authorization.community-admin.collection.admin-group\", false);\n+        configurationService.setProperty(\"core.authorization.collection-admin.admin-group\", false);\n+        context.restoreAuthSystemState();", "originalCommit": "f5b7d5854bbbfd7ca7af85632a9eb6e3114bdf9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3d043f2a39710eeb3b0cbaaef75869bb1f6811d", "url": "https://github.com/DSpace/DSpace/commit/c3d043f2a39710eeb3b0cbaaef75869bb1f6811d", "message": "renamed variable", "committedDate": "2020-06-12T09:13:59Z", "type": "commit"}, {"oid": "381fe08ad029322c84049c12affb2d287b47ecae", "url": "https://github.com/DSpace/DSpace/commit/381fe08ad029322c84049c12affb2d287b47ecae", "message": "added missing annotations", "committedDate": "2020-06-12T09:15:56Z", "type": "commit"}, {"oid": "25adabe0a4ad2c3402c68b5f6cf930bfff92fdd3", "url": "https://github.com/DSpace/DSpace/commit/25adabe0a4ad2c3402c68b5f6cf930bfff92fdd3", "message": "cleanup tests", "committedDate": "2020-06-12T09:18:52Z", "type": "commit"}, {"oid": "04d0775b21a414030f04d922d4a03bf30064c125", "url": "https://github.com/DSpace/DSpace/commit/04d0775b21a414030f04d922d4a03bf30064c125", "message": "Merge branch 'master' into DS-4486", "committedDate": "2020-06-12T12:26:27Z", "type": "commit"}]}