{"pr_number": 2691, "pr_title": "Metadata PATCH when mixing plain text and relationship", "pr_createdAt": "2020-02-25T14:48:04Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2691", "timeline": [{"oid": "b8bca78e508d53f77cf4a49ac31a1eaaf0f78767", "url": "https://github.com/DSpace/DSpace/commit/b8bca78e508d53f77cf4a49ac31a1eaaf0f78767", "message": "When moving metadata, make sure virtual metadata is handled correctly", "committedDate": "2020-02-18T11:50:55Z", "type": "commit"}, {"oid": "243b0c077fba8047a9718ac326ba426febcb9aca", "url": "https://github.com/DSpace/DSpace/commit/243b0c077fba8047a9718ac326ba426febcb9aca", "message": "When moving metadata, make sure virtual metadata is handled correctly", "committedDate": "2020-02-18T12:29:31Z", "type": "commit"}, {"oid": "cc2534ddd3f3a045d9df4f6bd5cbea7c42a5cb93", "url": "https://github.com/DSpace/DSpace/commit/cc2534ddd3f3a045d9df4f6bd5cbea7c42a5cb93", "message": "When moving metadata, make sure virtual metadata is handled correctly", "committedDate": "2020-02-18T13:41:48Z", "type": "commit"}, {"oid": "71c5cc678f9551a1f67f7e9adbfa42b9c86b6b14", "url": "https://github.com/DSpace/DSpace/commit/71c5cc678f9551a1f67f7e9adbfa42b9c86b6b14", "message": "When moving metadata, make sure virtual metadata is handled correctly", "committedDate": "2020-02-19T13:50:26Z", "type": "commit"}, {"oid": "6514183f45019c898d2edb88830580acddfe70e9", "url": "https://github.com/DSpace/DSpace/commit/6514183f45019c898d2edb88830580acddfe70e9", "message": "Merge branch 'master' into w2p-68820_Moving-relationships-ITs\n\nConflicts:\n\tdspace-api/src/main/java/org/dspace/content/DSpaceObjectServiceImpl.java", "committedDate": "2020-02-20T16:23:42Z", "type": "commit"}, {"oid": "42e0f2fb23eae1e1fbe27debb3bb188827e2243e", "url": "https://github.com/DSpace/DSpace/commit/42e0f2fb23eae1e1fbe27debb3bb188827e2243e", "message": "68820: Moving relationships in workspace items ITs", "committedDate": "2020-02-21T13:18:54Z", "type": "commit"}, {"oid": "a66b5225ad24c4467331da93e2d8755b7fa345a7", "url": "https://github.com/DSpace/DSpace/commit/a66b5225ad24c4467331da93e2d8755b7fa345a7", "message": "68820: PatchMetadataIT JavaDocs + header", "committedDate": "2020-02-21T16:27:25Z", "type": "commit"}, {"oid": "6748d63bba87a2c141cf94b800b73fdccca88df3", "url": "https://github.com/DSpace/DSpace/commit/6748d63bba87a2c141cf94b800b73fdccca88df3", "message": "68850: Add tests for adding authors on different places on workspace item", "committedDate": "2020-02-24T11:52:07Z", "type": "commit"}, {"oid": "0691330d847d9659b8cc74f6f3e819e6f5aa5043", "url": "https://github.com/DSpace/DSpace/commit/0691330d847d9659b8cc74f6f3e819e6f5aa5043", "message": "68851: Add test to Remove metadata through PATCH", "committedDate": "2020-02-24T14:23:53Z", "type": "commit"}, {"oid": "af2f1ee15b8a6b7b338d8f372c58649c5bf92933", "url": "https://github.com/DSpace/DSpace/commit/af2f1ee15b8a6b7b338d8f372c58649c5bf92933", "message": "68919: Add replace tests", "committedDate": "2020-02-25T10:30:43Z", "type": "commit"}, {"oid": "9b442743b69ca91aed952d54f79a80003cb280be", "url": "https://github.com/DSpace/DSpace/commit/9b442743b69ca91aed952d54f79a80003cb280be", "message": "69108: Fix comments", "committedDate": "2020-02-25T12:32:28Z", "type": "commit"}, {"oid": "9dc0c1ad3ddd5b6829b3edf28398e8bd29d63330", "url": "https://github.com/DSpace/DSpace/commit/9dc0c1ad3ddd5b6829b3edf28398e8bd29d63330", "message": "Merge remote-tracking branch 'community/master' into w2p-68820_Moving-relationships-ITs", "committedDate": "2020-03-17T14:50:59Z", "type": "commit"}, {"oid": "d4cc5f4587f12c7bbcce4b6dc982bf49ea2b9eb4", "url": "https://github.com/DSpace/DSpace/commit/d4cc5f4587f12c7bbcce4b6dc982bf49ea2b9eb4", "message": "Using token since workspace security is now in place", "committedDate": "2020-03-17T15:41:10Z", "type": "commit"}, {"oid": "932664650c696fd037ddd2d01a2f97eeb9106a4b", "url": "https://github.com/DSpace/DSpace/commit/932664650c696fd037ddd2d01a2f97eeb9106a4b", "message": "Using token since workspace security is now in place", "committedDate": "2020-03-17T16:24:11Z", "type": "commit"}, {"oid": "bbb3af2a368fab7eb8b79d9a42d7cd91563fdbda", "url": "https://github.com/DSpace/DSpace/commit/bbb3af2a368fab7eb8b79d9a42d7cd91563fdbda", "message": "Merge remote-tracking branch 'community/master' into w2p-68820_Moving-relationships-ITs", "committedDate": "2020-04-01T14:58:29Z", "type": "commit"}, {"oid": "55bcecc21b6c0bea30fd328a6dc16ff8184c7053", "url": "https://github.com/DSpace/DSpace/commit/55bcecc21b6c0bea30fd328a6dc16ff8184c7053", "message": "Merge remote-tracking branch 'community/main' into w2p-68820_Moving-relationships-ITs\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/builder/WorkspaceItemBuilder.java", "committedDate": "2020-07-29T16:03:03Z", "type": "commit"}, {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "url": "https://github.com/DSpace/DSpace/commit/95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "message": "trailing whitespace", "committedDate": "2020-07-30T07:06:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MTc4NQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463671785", "bodyText": "Please add JavaDocs to describe this method.  It looks like it's just extracting the RelationshipID corresponding to the current RelationshipMetadataValue?", "author": "tdonohue", "createdAt": "2020-07-31T15:16:14Z", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipMetadataValue.java", "diffHunk": "@@ -57,4 +59,8 @@ public boolean equals(Object obj) {\n         }\n         return super.equals(obj);\n     }\n+\n+    public int getRelationshipId() {", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODQ4Mg==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978482", "bodyText": "The JavaDocs have been created", "author": "benbosman", "createdAt": "2020-08-10T15:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MTc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MjY0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463672641", "bodyText": "Could you update the JavaDocs for all these modified methods to have a @return annotation now & describe what is returned?", "author": "tdonohue", "createdAt": "2020-07-31T15:17:40Z", "path": "dspace-api/src/main/java/org/dspace/content/service/DSpaceObjectService.java", "diffHunk": "@@ -202,8 +202,8 @@\n      * @param values    the values to add.\n      * @throws SQLException if database error\n      */\n-    public void addMetadata(Context context, T dso, String schema, String element, String qualifier, String lang,\n-                            List<String> values) throws SQLException;\n+    public List<MetadataValue> addMetadata(Context context, T dso, String schema, String element, String qualifier,", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODgzMg==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978832", "bodyText": "The JavaDocs have been created", "author": "benbosman", "createdAt": "2020-08-10T15:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MjY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NjgyNQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463676825", "bodyText": "This post needs to be updated to cleanup after itself.  Remember the (newer) best practices to use an andDo in a try/finally, similar to this test: https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java#L278", "author": "tdonohue", "createdAt": "2020-07-31T15:25:09Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODkxOA==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978918", "bodyText": "The cleanup code has been included", "author": "benbosman", "createdAt": "2020-08-10T15:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NjgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzQ1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463677453", "bodyText": "Again, this post needs to be updated to cleanup after itself.  In this scenario, since there are two posts here, you could have a try/finally around essentially most of this test method & do cleanup of both after the assertions below", "author": "tdonohue", "createdAt": "2020-07-31T15:26:21Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTAxNQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979015", "bodyText": "The cleanup code has been included", "author": "benbosman", "createdAt": "2020-08-10T15:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDM1MQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463680351", "bodyText": "Just a note, this sort of assertion is easier to read/understand (and shorter) if you use assertEquals() instead of the longer assertThat(...., equalTo()).  It's not a required change, but I find it slightly easier to read.", "author": "tdonohue", "createdAt": "2020-07-31T15:31:48Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem2.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        List<MetadataValue> publicationAuthorList =\n+                itemService.getMetadata(publication.getItem(), \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(publicationAuthorList.size(), equalTo(5));", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTUyMA==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979520", "bodyText": "The assertEquals is now used", "author": "benbosman", "createdAt": "2020-08-10T15:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MzExNQ==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463683115", "bodyText": "It looks (to me) like we are always testing with mixed content...some Entities, and some textual authors.  Could we add a few basic tests to verify this patching also works for only textual authors?", "author": "tdonohue", "createdAt": "2020-07-31T15:36:39Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person", "originalCommit": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTgwNA==", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979804", "bodyText": "Another set of test for only textual authors has been included", "author": "benbosman", "createdAt": "2020-08-10T15:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MzExNQ=="}], "type": "inlineReview"}, {"oid": "b7a24fc2613fc8de23604e76ec3b680580b4404e", "url": "https://github.com/DSpace/DSpace/commit/b7a24fc2613fc8de23604e76ec3b680580b4404e", "message": "72428: Metadata PATCH: feedback processing", "committedDate": "2020-08-06T15:16:22Z", "type": "commit"}, {"oid": "14f44386f7fdbada80476155df170498a6410189", "url": "https://github.com/DSpace/DSpace/commit/14f44386f7fdbada80476155df170498a6410189", "message": "72428: Update java docs", "committedDate": "2020-08-07T14:52:22Z", "type": "commit"}, {"oid": "0f90b8a8713d811a0a6037367e1d746250e563f6", "url": "https://github.com/DSpace/DSpace/commit/0f90b8a8713d811a0a6037367e1d746250e563f6", "message": "fix typo in javadocs", "committedDate": "2020-08-10T07:31:37Z", "type": "commit"}, {"oid": "d61f2781670c8d805d76e36b1bf21a8f9889a998", "url": "https://github.com/DSpace/DSpace/commit/d61f2781670c8d805d76e36b1bf21a8f9889a998", "message": "Merge remote-tracking branch 'upstream/main' into feedback-processing", "committedDate": "2020-08-10T07:31:56Z", "type": "commit"}, {"oid": "0d5f5174c0a5088cccf553d66a04c01975b3fa1c", "url": "https://github.com/DSpace/DSpace/commit/0d5f5174c0a5088cccf553d66a04c01975b3fa1c", "message": "fix build issue", "committedDate": "2020-08-10T08:51:47Z", "type": "commit"}]}