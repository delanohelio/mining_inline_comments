{"pr_number": 2783, "pr_title": "Authorization for Downloads of restricted Bitstreams: Short lived token endpoint", "pr_createdAt": "2020-06-19T10:13:56Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2783", "timeline": [{"oid": "48a86399023fa6c1afa4f5382346ec6eccf99b9a", "url": "https://github.com/DSpace/DSpace/commit/48a86399023fa6c1afa4f5382346ec6eccf99b9a", "message": "71342: Authorization for Downloads of restricted Bitstreams #1", "committedDate": "2020-06-12T11:56:38Z", "type": "commit"}, {"oid": "e7ef7d3c5ec75c75b4cb5575e47c464c9539d666", "url": "https://github.com/DSpace/DSpace/commit/e7ef7d3c5ec75c75b4cb5575e47c464c9539d666", "message": "71343: Authorization for Downloads of restricted Bitstreams #2", "committedDate": "2020-06-17T14:23:54Z", "type": "commit"}, {"oid": "b4b56750fd95146dae01f322ac8ae174b5a106d4", "url": "https://github.com/DSpace/DSpace/commit/b4b56750fd95146dae01f322ac8ae174b5a106d4", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Internal feedback", "committedDate": "2020-06-19T08:25:17Z", "type": "commit"}, {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "url": "https://github.com/DSpace/DSpace/commit/6c91e5acf05be11a60b8fa62d99b49099afbaf91", "message": "Authorization for file downloads: Small comment changes", "committedDate": "2020-06-19T10:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNTc3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444235771", "bodyText": "can we name the method shortLivedToken ?", "author": "abollini", "createdAt": "2020-06-23T13:45:48Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/AuthenticationRestController.java", "diffHunk": "@@ -118,6 +122,30 @@ public ResponseEntity login(HttpServletRequest request, @RequestParam(name = \"us\n                                     \"valid.\");\n     }\n \n+    /**\n+     * This method will generate a short lived token to be used for bitstream downloads among other things.\n+     *\n+     * curl -v -X POST https://{dspace-server.url}/api/authn/shortlivedtokens -H \"Authorization: Bearer eyJhbG...COdbo\"\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl -v -X POST https://{dspace-server.url}/api/authn/shortlivedtokens -H \"Authorization: Bearer eyJhbG...COdbo\"\n+     * }\n+     * </pre>\n+     * @param request The StandardMultipartHttpServletRequest\n+     * @return        The created short lived token\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping(value = \"/shortlivedtokens\", method = RequestMethod.POST)\n+    public AuthenticationTokenResource shortLivedLogin(HttpServletRequest request) {", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzOTUxNg==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444239516", "bodyText": "can we create an AUTHENTICATION constant in the RestModel to reuse here as it is now shared with the AuthnRest?", "author": "abollini", "createdAt": "2020-06-23T13:50:44Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/AuthenticationTokenRest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import org.dspace.app.rest.RestResourceController;\n+\n+/**\n+ * The authentication token REST HAL Resource. The HAL Resource wraps the REST Resource\n+ * adding support for the links and embedded resources\n+ */\n+public class AuthenticationTokenRest extends RestAddressableModel {\n+    public static final String NAME = \"shortlivedtoken\";\n+    public static final String CATEGORY = \"authn\";", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MzczOQ==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444243739", "bodyText": "I would prefer to avoid the term session, what about LoginJWTTokenHandler ?", "author": "abollini", "createdAt": "2020-06-23T13:56:09Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -47,9 +48,13 @@\n     private static final String AUTHORIZATION_COOKIE = \"Authorization-cookie\";\n     private static final String AUTHORIZATION_HEADER = \"Authorization\";\n     private static final String AUTHORIZATION_TYPE = \"Bearer\";\n+    private static final String AUTHORIZATION_TOKEN_PARAMETER = \"token\";\n \n     @Autowired\n-    private JWTTokenHandler jwtTokenHandler;\n+    private SessionJWTTokenHandler sessionJWTTokenHandler;", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NDQwNg==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444294406", "bodyText": "@KevinVdV : I agree with @abollini  here. The word \"session\" is not really appropriate here as it's confusing (is this a user session, an HTTP session, a Hibernate Session, or something else?).  I'd prefer we just call this LoginJWTTokenHandler as he suggested.\nSimilarly, all the new configurations should be jwt.login.* instead of jwt.session.* and similar.", "author": "tdonohue", "createdAt": "2020-06-23T15:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MzczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDI5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444244299", "bodyText": "as above, I would prefer to avoid the term session as it can be confusing for developers", "author": "abollini", "createdAt": "2020-06-23T13:56:50Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -166,7 +201,7 @@ private void addTokenToResponse(final HttpServletResponse response, final String\n         response.setHeader(AUTHORIZATION_HEADER, String.format(\"%s %s\", AUTHORIZATION_TYPE, token));\n     }\n \n-    private String getToken(HttpServletRequest request) {\n+    private String getSessionToken(HttpServletRequest request) {", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444246362", "bodyText": "can we verify that the login token still use it owns settings? i.e. it will be not expired after 1ms", "author": "abollini", "createdAt": "2020-06-23T13:59:35Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void testSessionTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+\n+        String sessionToken = getAuthToken(eperson.getEmail(), password);\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + sessionToken))\n+            .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void testExpiredShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        configurationService.setProperty(\"jwt.shortLived.token.expiration\", \"1\");", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODg0NA==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447278844", "bodyText": "this feedback seems to be not yet processed, can you double check please?", "author": "abollini", "createdAt": "2020-06-29T22:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTM5Mw==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447595393", "bodyText": "@abollini This is handled in the following test:\n\natmire@27e733c#diff-4906e304a90a1dcbf301b3896d39a353R848\n\nThis test goes through the following steps to verify the settings:\n\nIt sets the expiration of the token to 1ms on the configurationService\nThe code waits for 2ms\nA login is tried with the previously retrieved token", "author": "jonas-atmire", "createdAt": "2020-06-30T10:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwMjI0OA==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r448602248", "bodyText": "Verified this feedback has been addressed as well", "author": "tdonohue", "createdAt": "2020-07-01T20:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444249786", "bodyText": "can you add a test to verify that a valid short lived token provided for the user A that is not allowed to download the bitstream will be not sufficient for the download? i.e. I like to have a test to proof that is not sufficient to have a generic valid short lived token to download a restricted content", "author": "abollini", "createdAt": "2020-06-23T14:04:15Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+", "originalCommit": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODcxMA==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447278710", "bodyText": "this feedback seems to be not yet processed, can you double check please?", "author": "abollini", "createdAt": "2020-06-29T22:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5ODg0MA==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447598840", "bodyText": "@abollini The following test verifies the short lived token validity:\n\natmire@27e733c#diff-4906e304a90a1dcbf301b3896d39a353R823\n\nIt goes through the following steps:\n\nA private bitstream is created\nIt creates a user that does not have any particular permissions\nThe token for that user is retrieved and passed through to the bitstreams retrieval call\nThe verification that the call is forbidden is done", "author": "jonas-atmire", "createdAt": "2020-06-30T11:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwMTgyNg==", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r448601826", "bodyText": "Verified this feedback looks to be resolved", "author": "tdonohue", "createdAt": "2020-07-01T20:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng=="}], "type": "inlineReview"}, {"oid": "6a88ef51b37338cd2f7ca28f3db54ee35cc54517", "url": "https://github.com/DSpace/DSpace/commit/6a88ef51b37338cd2f7ca28f3db54ee35cc54517", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Don't update ePerson session salt when requesting a short lived token", "committedDate": "2020-06-23T16:08:39Z", "type": "commit"}, {"oid": "9f77864cea295b834fed3b244b965440679d5f1d", "url": "https://github.com/DSpace/DSpace/commit/9f77864cea295b834fed3b244b965440679d5f1d", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Add test that the ePerson session salt isn't updated when requesting a short lived token", "committedDate": "2020-06-25T07:15:30Z", "type": "commit"}, {"oid": "46e760791ab66cdffa2c9cf57fed7bd25149652c", "url": "https://github.com/DSpace/DSpace/commit/46e760791ab66cdffa2c9cf57fed7bd25149652c", "message": "Merge remote-tracking branch 'community/master' into w2p-71342_Authorization-for-Downloads-of-restricted-Bitstreams-1", "committedDate": "2020-06-25T08:16:57Z", "type": "commit"}, {"oid": "27e733c1e8c557284bb756f32bc09c6a937bc4ee", "url": "https://github.com/DSpace/DSpace/commit/27e733c1e8c557284bb756f32bc09c6a937bc4ee", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Add test that the ePerson session salt isn't updated when requesting a short lived token", "committedDate": "2020-06-26T12:20:06Z", "type": "commit"}, {"oid": "d364ac63837985f1b2162ac5e7e7cb6662cf3efd", "url": "https://github.com/DSpace/DSpace/commit/d364ac63837985f1b2162ac5e7e7cb6662cf3efd", "message": "71654: Authorization for Downloads of restricted Bitstreams\n\n- Short lived tokens can't be used to login, or generate other tokens", "committedDate": "2020-06-30T16:20:06Z", "type": "commit"}, {"oid": "f9257dad12c97d1aa3daaf9beca35bed76ba98b0", "url": "https://github.com/DSpace/DSpace/commit/f9257dad12c97d1aa3daaf9beca35bed76ba98b0", "message": "Merge branch 'w2p-71342_Authorization-for-Downloads-of-restricted-Bitstreams-1' into w2p-71672_Rename-token-parameter", "committedDate": "2020-07-01T08:35:41Z", "type": "commit"}, {"oid": "be89cc815975530e06489af79b0a4b6962f7bfd9", "url": "https://github.com/DSpace/DSpace/commit/be89cc815975530e06489af79b0a4b6962f7bfd9", "message": "71672: Authorization for Downloads of restricted Bitstreams\n\n- Rename url parameter \"token\" to \"authentication-token\"", "committedDate": "2020-07-01T08:59:18Z", "type": "commit"}, {"oid": "9044daf50eb1b4044b6b4d80ce12b32e0a399712", "url": "https://github.com/DSpace/DSpace/commit/9044daf50eb1b4044b6b4d80ce12b32e0a399712", "message": "71672: Authorization for Downloads of restricted Bitstreams\n\n- Fix checkstyle", "committedDate": "2020-07-01T09:50:57Z", "type": "commit"}]}