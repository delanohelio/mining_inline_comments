{"pr_number": 2970, "pr_title": "Build push and milestone push log context.", "pr_createdAt": "2020-04-15T13:37:20Z", "pr_url": "https://github.com/project-ncl/pnc/pull/2970", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1MDk0MQ==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r408850941", "bodyText": "Rename: confusing with BPM task", "author": "matejonnet", "createdAt": "2020-04-15T13:42:15Z", "path": "bpm/src/main/java/org/jboss/pnc/bpm/causeway/BuildPushTask.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.bpm.causeway;\n+\n+import lombok.Value;\n+import org.jboss.pnc.model.BuildRecord;\n+\n+import java.util.UUID;\n+\n+@Value\n+public class BuildPushTask {", "originalCommit": "d84c1a984e0a4ed21904873032649b712a381e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTY3OA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r408865678", "bodyText": "The push result is not stored to the BuildRecord that the user pushed.\neg. we have ID10-NO_REQUIRED, the result is stored to the previous ID9.\nShould the exception be thrown (not_allowed) in case of single build?\nAlso consider the case:\nID10-NO_REQUIRED\n\nuser force rebuild to record ID11\nwhen they try to push ID10, ID11 is pushed instead", "author": "matejonnet", "createdAt": "2020-04-15T14:01:24Z", "path": "facade/src/main/java/org/jboss/pnc/facade/impl/BrewPusherImpl.java", "diffHunk": "@@ -73,63 +93,164 @@\n     private UserService userService;\n \n     @Override\n-    public void pushGroup(int id, String tagPrefix) {\n-\n+    public Set<BuildPushResult> pushGroup(int buildGroupId, String tagPrefix) {\n+        BuildPushParameters buildPushParameters = BuildPushParameters.builder()\n+                .tagPrefix(tagPrefix)\n+                .reimport(false)\n+                .build();\n         List<BuildRecord> buildRecords = buildRecordRepository\n-                .queryWithPredicates(BuildRecordPredicates.withBuildConfigSetRecordId(id));\n+                .queryWithPredicates(BuildRecordPredicates.withBuildConfigSetRecordId(buildGroupId));\n \n-        Set<String> buildRecordsIds = buildRecords.stream()\n-                .map(BuildRecord::getId)\n-                .map(String::valueOf)\n-                .collect(Collectors.toSet());\n-\n-        Set<Result> pushed = buildResultPushManager\n-                .push(buildRecordsIds, userService.currentUserToken(), getCompleteCallbackUrl(), tagPrefix, false);\n+        Set<BuildPushResult> results = new HashSet<>();\n+        for (BuildRecord buildRecord : buildRecords) {\n+            UUID buildPushResultId = UUID.randomUUID();\n+            MDCUtils.addProcessContext(buildPushResultId.toString());\n+            MDCUtils.addCustomContext(LOG_CONTEXT_BUILD_ID, buildRecord.getId().toString());\n+            try {\n+                results.add(doPushBuild(buildRecord.getId(), buildPushParameters, buildPushResultId));\n+            } catch (OperationNotAllowedException e) {\n+                results.add(\n+                        BuildPushResult.builder()\n+                                .status(BuildPushStatus.REJECTED)\n+                                .id(buildPushResultId.toString())\n+                                .buildId(buildRecord.getId().toString())\n+                                .message(e.getMessage())\n+                                .build());\n+            } catch (InconsistentDataException e) {\n+                results.add(\n+                        BuildPushResult.builder()\n+                                .status(BuildPushStatus.SYSTEM_ERROR)\n+                                .id(buildPushResultId.toString())\n+                                .buildId(buildRecord.getId().toString())\n+                                .message(e.getMessage())\n+                                .build());\n+            } catch (AlreadyRunningException e) {\n+                results.add(\n+                        BuildPushResult.builder()\n+                                .status(BuildPushStatus.REJECTED)\n+                                .id(buildPushResultId.toString())\n+                                .buildId(buildRecord.getId().toString())\n+                                .message(e.getMessage())\n+                                .build());\n+            } catch (ProcessException e) {\n+                results.add(\n+                        BuildPushResult.builder()\n+                                .status(BuildPushStatus.SYSTEM_ERROR)\n+                                .id(buildPushResultId.toString())\n+                                .buildId(buildRecord.getId().toString())\n+                                .message(e.getMessage())\n+                                .build());\n+            } finally {\n+                MDCUtils.removeProcessContext();\n+                MDCUtils.removeCustomContext(LOG_CONTEXT_BUILD_ID);\n+            }\n+        }\n+        return results;\n     }\n \n     @Override\n-    public BuildPushResult brewPush(String id, BuildPushRequest buildPushRequest) throws ProcessException {\n+    public BuildPushResult pushBuild(String buildId, BuildPushParameters buildPushParameters) throws ProcessException {\n+        UUID buildPushResultId = UUID.randomUUID();\n+        MDCUtils.addProcessContext(buildPushResultId.toString());\n+        MDCUtils.addCustomContext(LOG_CONTEXT_BUILD_ID, buildId);\n+        try {\n+            return doPushBuild(Integer.parseInt(buildId), buildPushParameters, buildPushResultId);\n+        } finally {\n+            MDCUtils.removeProcessContext();\n+            MDCUtils.removeCustomContext(LOG_CONTEXT_BUILD_ID);\n+        }\n+    }\n \n-        BuildRecord buildRecord = buildRecordRepository.queryById(Integer.valueOf(id));\n+    private BuildPushResult doPushBuild(\n+            Integer buildId,\n+            BuildPushParameters buildPushParameters,\n+            UUID buildPushResultId) throws ProcessException {\n \n-        if (buildRecord == null) {\n-            return null;\n+        // collect and validate input data\n+        BuildRecord buildRecord = getLatestSuccessfullyExecutedBuildRecord(buildId);\n+        List<Artifact> artifacts = artifactRepository\n+                .queryWithPredicates(ArtifactPredicates.withBuildRecordId(buildRecord.getId()));\n+        if (hasBadArtifactQuality(artifacts)) {\n+            String message = \"Build contains artifacts of insufficient quality: BLACKLISTED/DELETED.\";\n+            log.debug(message);\n+            BuildPushResult pushResult = BuildPushResult.builder()\n+                    .buildId(buildId.toString())\n+                    .status(BuildPushStatus.REJECTED)\n+                    .id(buildPushResultId.toString())\n+                    .logContext(buildPushResultId.toString())\n+                    .build();\n+            throw new OperationNotAllowedException(message, pushResult);\n         }\n \n-        log.debug(\"Pushing BuildRecord {}.\", id);\n-        Set<String> toPush = new HashSet<>();\n-        toPush.add(id);\n-\n-        Set<Result> pushed = buildResultPushManager.push(\n-                toPush,\n-                userService.currentUserToken(),\n-                getCompleteCallbackUrl(),\n-                buildPushRequest.getTagPrefix(),\n-                buildPushRequest.isReimport());\n-\n-        log.info(\"Push Results {}.\", pushed.stream().map(Result::getId).collect(Collectors.joining(\",\")));\n-\n-        List<BuildPushResult> pushedResponse = pushed.stream()\n-                .map(\n-                        r -> BuildPushResult.builder()\n-                                .id(r.getId())\n-                                .buildId(id)\n-                                .status(r.getStatus())\n-                                .log(r.getMessage())\n-                                .build())\n-                .collect(Collectors.toList());\n-        BuildPushResult result = pushedResponse.get(0);\n-\n-        if (result.getLog().contains(\"BLACKLISTED/DELETED\")) {\n-            throw new BadArtifactQualityException(\n-                    \"Build contains artifacts of insufficient quality: BLACKLISTED/DELETED.\",\n-                    result);\n-        }\n-        if (result.getLog().contains(\"already running\")) {\n-            throw new PushAlreadyRunningException(\"A push for this buildRecord is already running.\", result);\n+        log.debug(\"Pushing Build.id {}.\", buildRecord.getId());\n+\n+        BuildPushTask buildPushTask = new BuildPushTask(\n+                buildRecord,\n+                buildPushResultId,\n+                buildPushParameters.getTagPrefix(),\n+                buildPushParameters.isReimport(),\n+                getCompleteCallbackUrlTemplate());\n+\n+        Result pushResult = buildResultPushManager.push(buildPushTask, userService.currentUserToken());\n+        log.info(\"Push Result {}.\", pushResult);\n+\n+        BuildPushResult result = BuildPushResult.builder()\n+                .id(pushResult.getId())\n+                .buildId(pushResult.getBuildId())\n+                .status(pushResult.getStatus())\n+                .logContext(pushResult.getId())\n+                .build();\n+\n+        // verify operation status\n+        switch (pushResult.getStatus()) {\n+            case SUCCESS:\n+                return result;\n+            case REJECTED:\n+                throw new AlreadyRunningException(pushResult.getMessage(), result);\n+            case SYSTEM_ERROR:\n+                log.error(\"Brew push failed: \" + pushResult.getMessage());\n+                throw new ProcessException(pushResult.getMessage());\n+            default:\n+                log.error(\"Invalid push result status.\");\n+                throw new ProcessException(\"Invalid push result status.\");\n         }\n+    }\n \n-        return result;\n+    private boolean hasBadArtifactQuality(Collection<Artifact> builtArtifacts) {\n+        EnumSet<ArtifactQuality> badQuality = EnumSet.of(DELETED, BLACKLISTED);\n+        return builtArtifacts.stream().map(Artifact::getArtifactQuality).anyMatch(badQuality::contains);\n+    }\n+\n+    /**\n+     *\n+     * @param buildRecordId\n+     * @return Latest build record with status success or null if the build record does not exist.\n+     * @throws InconsistentDataException when there is no SUCCESS status before NO_REBUILD_REQUIRED\n+     * @throws InvalidEntityException when the status is not SUCCESS or NO_REBUILD_REQUIRED\n+     */\n+    private BuildRecord getLatestSuccessfullyExecutedBuildRecord(Integer buildRecordId) {\n+        BuildRecord buildRecord = buildRecordRepository.queryById(buildRecordId);\n+        if (buildRecord == null) {\n+            throw new EmptyEntityException(\"Build record not found.\");\n+        }\n+        if (BuildStatus.SUCCESS.equals(buildRecord.getStatus())) {\n+            return buildRecord;\n+        } else if (BuildStatus.NO_REBUILD_REQUIRED.equals(buildRecord.getStatus())) {\n+            // if status is NO_REBUILD_REQUIRED, find the last BuildRecord with status SUCCESS for the same idRev.\n+            IdRev idRev = buildRecord.getBuildConfigurationAuditedIdRev();", "originalCommit": "d84c1a984e0a4ed21904873032649b712a381e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MzE1MA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r408893150", "bodyText": "Move MDC field names to constants module.", "author": "matejonnet", "createdAt": "2020-04-15T14:37:48Z", "path": "common/src/main/java/org/jboss/pnc/common/logging/MDCUtils.java", "diffHunk": "@@ -108,6 +108,10 @@ public static void addUserId(String userId) {\n         return Optional.ofNullable(getContextMap().get(USER_ID_KEY));", "originalCommit": "d84c1a984e0a4ed21904873032649b712a381e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTc4OA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r408899788", "bodyText": "Remove it, create a ticket to make sure Causeway is storing all the errors.", "author": "matejonnet", "createdAt": "2020-04-15T14:46:07Z", "path": "dto/src/main/java/org/jboss/pnc/dto/ArtifactImportError.java", "diffHunk": "@@ -30,6 +30,7 @@\n  *\n  * @author Honza Br\u00e1zdil &lt;jbrazdil@redhat.com&gt;\n  */\n+// TODO do we need this one\n @Data", "originalCommit": "d84c1a984e0a4ed21904873032649b712a381e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7725691b408e6d232a587824a834abdd7160076c", "url": "https://github.com/project-ncl/pnc/commit/7725691b408e6d232a587824a834abdd7160076c", "message": "Build push and milestone push log context.\n\nWIP", "committedDate": "2020-04-16T08:43:41Z", "type": "forcePushed"}, {"oid": "20090c858009bbf0fd43fda59d386db612ea9ab2", "url": "https://github.com/project-ncl/pnc/commit/20090c858009bbf0fd43fda59d386db612ea9ab2", "message": "Build push and milestone push log context.", "committedDate": "2020-04-16T15:20:14Z", "type": "forcePushed"}, {"oid": "5b3ac298153669ed4c7db4ab45fc90377b3504b8", "url": "https://github.com/project-ncl/pnc/commit/5b3ac298153669ed4c7db4ab45fc90377b3504b8", "message": "Build push and milestone push log context.", "committedDate": "2020-04-16T16:20:03Z", "type": "forcePushed"}, {"oid": "3f934cf8631ff4cd2c28f77e5022cb7c258a5fa9", "url": "https://github.com/project-ncl/pnc/commit/3f934cf8631ff4cd2c28f77e5022cb7c258a5fa9", "message": "Build push and milestone push log context.", "committedDate": "2020-04-17T10:31:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5NzU2Mg==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411297562", "bodyText": "What do you mean by this? Do you have JIRA for that?", "author": "janinko", "createdAt": "2020-04-20T11:20:20Z", "path": "rest-new/src/main/java/org/jboss/pnc/rest/endpoints/GroupBuildEndpointImpl.java", "diffHunk": "@@ -93,6 +93,7 @@ public void delete(String id, String callback) {\n \n     @Override\n     public void brewPush(String id, GroupBuildPushRequest buildConfigSetRecordPushRequest) {\n+        // TODO progress updates", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNTI3Mw==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411435273", "bodyText": "This one is out of the scope, not sure if it is already on our plan. But it fits there.", "author": "matejonnet", "createdAt": "2020-04-20T14:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5NzU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTgxNA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411299814", "bodyText": "extra semicolon", "author": "janinko", "createdAt": "2020-04-20T11:24:21Z", "path": "common/src/main/java/org/jboss/pnc/common/logging/MDCUtils.java", "diffHunk": "@@ -34,11 +35,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(MDCUtils.class);\n \n-    public static final String REQUEST_CONTEXT_KEY = \"requestContext\";\n-    public static final String PROCESS_CONTEXT_KEY = \"processContext\";\n-    public static final String USER_ID_KEY = \"userId\";\n-    public static final String TMP_KEY = \"tmp\";;\n-    public static final String EXP_KEY = \"exp\";\n+    ;", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMDk5MQ==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411300991", "bodyText": "rename ProductMilestoneReleasePage -> ProductMilestoneCloseResultPage", "author": "janinko", "createdAt": "2020-04-20T11:26:30Z", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/swagger/response/SwaggerPages.java", "diffHunk": "@@ -79,6 +76,9 @@\n     public static class ProductMilestonePage extends Page<ProductMilestone> {\n     }\n \n+    public static class ProductMilestoneReleasePage extends Page<ProductMilestoneCloseResult> {", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzI4Ng==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411317286", "bodyText": "Please add the DB migration script.", "author": "janinko", "createdAt": "2020-04-20T11:55:14Z", "path": "model/src/main/java/org/jboss/pnc/model/ProductMilestoneRelease.java", "diffHunk": "@@ -48,23 +47,26 @@\n @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n @Entity\n @Table(indexes = @Index(name = \"idx_productmilestonerelease_milestone\", columnList = \"milestone_id\"))\n-public class ProductMilestoneRelease implements GenericEntity<Integer> {\n+public class ProductMilestoneRelease implements GenericEntity<UUID> {", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzY1Nw==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411433657", "bodyText": "NCL-5704", "author": "matejonnet", "createdAt": "2020-04-20T14:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMDY2OA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411320668", "bodyText": "Do you have JIRA for this?", "author": "janinko", "createdAt": "2020-04-20T12:01:18Z", "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/BuildConfigurationSerializationTest.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(BuildConfigurationSerializationTest.class);\n \n-    @Test\n+    @Test // TODO where is patch mentioned in the name ?", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzgxNw==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411437817", "bodyText": "NCL-5684", "author": "matejonnet", "createdAt": "2020-04-20T14:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMDY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyNDAxMA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411324010", "bodyText": "You can map the context here:\n    @Mapping(target = \"logContext\", expression = \"java( logContext(db) )\")\n    // maybe default, because private static may not work in Java 8?\n    private static String logContext(BuildRecordPushResult db) {\n        ProductMilestoneRelease productMilestoneRelease = db.getProductMilestoneRelease();\n        if (productMilestoneRelease != null) { // is part of milestone release\n            return productMilestoneRelease.getId().toString();\n        } else {\n            return db.getId().toString();\n        }\n    }", "author": "janinko", "createdAt": "2020-04-20T12:07:11Z", "path": "mapper/src/main/java/org/jboss/pnc/mapper/api/BuildPushResultMapper.java", "diffHunk": "@@ -18,24 +18,56 @@\n package org.jboss.pnc.mapper.api;\n \n import org.jboss.pnc.dto.BuildPushResult;\n+import org.jboss.pnc.dto.BuildPushResultRef;\n+import org.jboss.pnc.dto.ProductMilestoneCloseResultRef;\n+import org.jboss.pnc.mapper.UUIDMapper;\n import org.jboss.pnc.model.BuildRecordPushResult;\n import org.mapstruct.BeanMapping;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n \n+import java.util.UUID;\n+\n /**\n  * @author <a href=\"mailto:jmichalo@redhat.com\">Jan Michalov</a>\n  */\n-@Mapper(config = MapperCentralConfig.class, uses = { BuildMapper.IDMapper.class })\n-public interface BuildPushResultMapper {\n+@Mapper(\n+        config = MapperCentralConfig.class,\n+        uses = { UUIDMapper.class, BuildMapper.IDMapper.class, ProductMilestoneCloseResultMapper.class })\n+public interface BuildPushResultMapper\n+        extends EntityMapper<UUID, BuildRecordPushResult, BuildPushResult, BuildPushResultRef> {\n+\n+    @Override\n+    default BuildRecordPushResult toIDEntity(BuildPushResultRef dtoEntity) {\n+        if (dtoEntity == null) {\n+            return null;\n+        }\n+        BuildRecordPushResult buildRecordPushResult = new BuildRecordPushResult();\n+        buildRecordPushResult.setId(UUID.fromString(dtoEntity.getId()));\n+        return buildRecordPushResult;\n+    }\n \n     @Mapping(target = \"buildId\", source = \"buildRecord\")\n-    @Mapping(target = \"artifactImportErrors\", ignore = true)\n-    @BeanMapping(ignoreUnmappedSourceProperties = { \"tagPrefix\" })\n+    @Mapping(\n+            target = \"productMilestoneCloseResult\",\n+            source = \"productMilestoneRelease\",\n+            resultType = ProductMilestoneCloseResultRef.class)\n+    @Mapping(target = \"logContext\", ignore = true)\n+    @Mapping(target = \"message\", ignore = true)\n+    @BeanMapping(ignoreUnmappedSourceProperties = { \"tagPrefix\", \"artifactImportErrors\", \"log\" })\n     BuildPushResult toDTO(BuildRecordPushResult db);\n \n+    @Mapping(target = \"buildId\", source = \"buildRecord\")\n+    @BeanMapping(\n+            ignoreUnmappedSourceProperties = { \"tagPrefix\", \"artifactImportErrors\", \"log\", \"productMilestoneRelease\" })\n+    @Mapping(target = \"logContext\", ignore = true)", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MTIzMA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411341230", "bodyText": "Should the class be renamed to ProductMilestoneCloseResultProvider(Impl)?", "author": "janinko", "createdAt": "2020-04-20T12:35:53Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/ProductMilestoneReleaseProviderImpl.java", "diffHunk": "@@ -42,7 +44,7 @@\n @PermitAll\n @Stateless\n public class ProductMilestoneReleaseProviderImpl extends\n-        AbstractIntIdProvider<org.jboss.pnc.model.ProductMilestoneRelease, org.jboss.pnc.dto.ProductMilestoneRelease, org.jboss.pnc.dto.ProductMilestoneReleaseRef>\n+        AbstractUUIDIdProvider<org.jboss.pnc.model.ProductMilestoneRelease, ProductMilestoneCloseResult, ProductMilestoneCloseResultRef>", "originalCommit": "7d1b6dcdd0cc8ba1c52736224a4476316902ed1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMjE0NA==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411522144", "bodyText": "Is this still necessary?", "author": "janinko", "createdAt": "2020-04-20T16:33:04Z", "path": "common/src/test/java/org/jboss/pnc/common/UUIDCollisionTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.common;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+public class UUIDCollisionTest {", "originalCommit": "615413913c99187d318ec2592cf30e56b6eddf27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNDIzNw==", "url": "https://github.com/project-ncl/pnc/pull/2970#discussion_r411614237", "bodyText": "No, it had never been at all :)", "author": "matejonnet", "createdAt": "2020-04-20T18:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMjE0NA=="}], "type": "inlineReview"}, {"oid": "7e8cf7876f322ed1b5636f1526ed4057f5f74aa2", "url": "https://github.com/project-ncl/pnc/commit/7e8cf7876f322ed1b5636f1526ed4057f5f74aa2", "message": "Build push and milestone push log context.", "committedDate": "2020-04-20T19:11:31Z", "type": "commit"}, {"oid": "6e796e4706df21fd728755bb5d7e1f9bce2558f1", "url": "https://github.com/project-ncl/pnc/commit/6e796e4706df21fd728755bb5d7e1f9bce2558f1", "message": "Move MDC keys to constants module.", "committedDate": "2020-04-20T19:11:31Z", "type": "commit"}, {"oid": "df6f63ac169c0dbfcd3a54321c89fa146e4faa7c", "url": "https://github.com/project-ncl/pnc/commit/df6f63ac169c0dbfcd3a54321c89fa146e4faa7c", "message": "Fixes based on PR comments.", "committedDate": "2020-04-20T19:14:01Z", "type": "commit"}, {"oid": "e95bd72bf98f63e3569d18abadeda4fb608f7698", "url": "https://github.com/project-ncl/pnc/commit/e95bd72bf98f63e3569d18abadeda4fb608f7698", "message": "Use unigue number istead of UUID.", "committedDate": "2020-04-20T19:14:01Z", "type": "commit"}, {"oid": "a872e151262749f85d15b2474f5cb843ca15d38c", "url": "https://github.com/project-ncl/pnc/commit/a872e151262749f85d15b2474f5cb843ca15d38c", "message": "Remove unrequired test.", "committedDate": "2020-04-20T19:14:01Z", "type": "commit"}, {"oid": "a872e151262749f85d15b2474f5cb843ca15d38c", "url": "https://github.com/project-ncl/pnc/commit/a872e151262749f85d15b2474f5cb843ca15d38c", "message": "Remove unrequired test.", "committedDate": "2020-04-20T19:14:01Z", "type": "forcePushed"}]}