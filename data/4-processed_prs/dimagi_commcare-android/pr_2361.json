{"pr_number": 2361, "pr_title": "Add form entry tests", "pr_createdAt": "2020-09-28T10:08:43Z", "pr_url": "https://github.com/dimagi/commcare-android/pull/2361", "timeline": [{"oid": "ca502bf1673e77cc032bca2399480c73a0235a45", "url": "https://github.com/dimagi/commcare-android/commit/ca502bf1673e77cc032bca2399480c73a0235a45", "message": "Add form entry tests", "committedDate": "2020-09-28T10:57:15Z", "type": "commit"}, {"oid": "ca502bf1673e77cc032bca2399480c73a0235a45", "url": "https://github.com/dimagi/commcare-android/commit/ca502bf1673e77cc032bca2399480c73a0235a45", "message": "Add form entry tests", "committedDate": "2020-09-28T10:57:15Z", "type": "forcePushed"}, {"oid": "b4dc8506460ef64b37423e0b4f43e818f747881a", "url": "https://github.com/dimagi/commcare-android/commit/b4dc8506460ef64b37423e0b4f43e818f747881a", "message": "Merge branch 'master' into form-entry-test", "committedDate": "2020-09-29T12:22:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2ODMyMA==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496668320", "bodyText": "Do we have devices on BS which are on >= Q ?", "author": "shubham1g5", "createdAt": "2020-09-29T12:16:46Z", "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {", "originalCommit": "ca502bf1673e77cc032bca2399480c73a0235a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3ODM0OQ==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496678349", "bodyText": "Yes, we do.", "author": "ShivamPokhriyal", "createdAt": "2020-09-29T12:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2ODMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3MzE0NQ==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496673145", "bodyText": "232-235 can be wrapped in a function - saveAsIncomplete", "author": "shubham1g5", "createdAt": "2020-09-29T12:24:49Z", "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.logout()\n+        // Disable wifi\n+        InstrumentationUtility.changeWifi(false)\n+        // We can still login.\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Submit a form.\n+        InstrumentationUtility.openForm(0, 0)\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+        // Confirm unsent form.\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Enabled wifi.\n+        InstrumentationUtility.changeWifi(true)\n+        InstrumentationUtility.sleep(10) // Sleeping 10 seconds so that wifi is setup.\n+\n+        // Confirm form is sent on sync.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click())\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"You last synced with the server:\")))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm form is present in saved forms\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @Test\n+    fun testSaveCase() {\n+        InstrumentationUtility.login(\"form_tests\", \"123\")\n+        // Create incomplete update case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // testing notification for having incomplete form for case already made\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"NO\"))\n+                .perform(click())\n+        onView(withText(\"A\"))\n+                .perform(click())\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\"))) // we don't see the text hello here.\n+        closeSoftKeyboard()", "originalCommit": "b4dc8506460ef64b37423e0b4f43e818f747881a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496675586", "bodyText": "not required", "author": "shubham1g5", "createdAt": "2020-09-29T12:28:48Z", "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.logout()\n+        // Disable wifi\n+        InstrumentationUtility.changeWifi(false)\n+        // We can still login.\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Submit a form.\n+        InstrumentationUtility.openForm(0, 0)\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+        // Confirm unsent form.\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Enabled wifi.\n+        InstrumentationUtility.changeWifi(true)\n+        InstrumentationUtility.sleep(10) // Sleeping 10 seconds so that wifi is setup.\n+\n+        // Confirm form is sent on sync.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click())\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"You last synced with the server:\")))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm form is present in saved forms\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @Test\n+    fun testSaveCase() {\n+        InstrumentationUtility.login(\"form_tests\", \"123\")\n+        // Create incomplete update case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // testing notification for having incomplete form for case already made\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"NO\"))\n+                .perform(click())\n+        onView(withText(\"A\"))\n+                .perform(click())\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\"))) // we don't see the text hello here.\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Deleting one incomplete form for case\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Update a Case\")),\n+                1\n+        )).perform(longClick())\n+        onView(withText(\"Open\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Delete Record\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Scan Record Integrity\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Delete Record\"))\n+                .perform(click())\n+\n+        // Confirm we still have one and only one incomplete case.\n+        onView(withText(\"Update a Case\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+\n+        // Continue incomplete case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"YES\"))\n+                .perform(click())\n+        onView(withId(R.id.jumpEndButton))\n+                .perform(click())\n+\n+        // Save form\n+        onView(withText(\"hello\"))", "originalCommit": "b4dc8506460ef64b37423e0b4f43e818f747881a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4OTgyOA==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497289828", "bodyText": "Just this particualr check is not required? Or the part of saving the form as incomplete and checking it later is not required?", "author": "ShivamPokhriyal", "createdAt": "2020-09-30T07:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MzA0Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497343043", "bodyText": "the text entry as \"hello\" is not required since we are not opening and checking this value again in the test.", "author": "shubham1g5", "createdAt": "2020-09-30T08:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0ODkxNw==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497348917", "bodyText": "Ohh this is being checked here to be present. It was entered earlier. So should I leave it or I understood it wrong?", "author": "ShivamPokhriyal", "createdAt": "2020-09-30T08:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1MTM4Mg==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497351382", "bodyText": "sorry To rephrase, even if you remove L268, this test would still pass right ?", "author": "shubham1g5", "createdAt": "2020-09-30T08:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1NjM5Mg==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497356392", "bodyText": "Yeah that's correct.", "author": "ShivamPokhriyal", "createdAt": "2020-09-30T09:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1OTM2MA==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497359360", "bodyText": "yeah so I just meant this statement doesn't seem to serve anything meaningful in this test and therefore we should remove it.", "author": "shubham1g5", "createdAt": "2020-09-30T09:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2NjQ1NA==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497366454", "bodyText": "Though it isn't part of the original calabash test, but I think it's meaningful.\nWhen we go to update the case again, and press YES to the popup asking Do you want to continue filling out the saved form, so we should check whether it's really the form we saved first or is it a completely new one. And that check is done by this line.", "author": "ShivamPokhriyal", "createdAt": "2020-09-30T09:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MjEyNQ==", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r497382125", "bodyText": "Ahh that makes sense. Sounds good to retain it.", "author": "shubham1g5", "createdAt": "2020-09-30T09:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng=="}], "type": "inlineReview"}, {"oid": "e3d26a35e10896465e61cbadb9e1ceac9aeeff7d", "url": "https://github.com/dimagi/commcare-android/commit/e3d26a35e10896465e61cbadb9e1ceac9aeeff7d", "message": "PR suggestion", "committedDate": "2020-09-30T10:03:58Z", "type": "commit"}, {"oid": "6fe64e4eaa0fc4ed0532de8bb7e05b11b385247f", "url": "https://github.com/dimagi/commcare-android/commit/6fe64e4eaa0fc4ed0532de8bb7e05b11b385247f", "message": "Move back to login screen after installing app in FormEntryTest", "committedDate": "2020-10-01T09:41:45Z", "type": "commit"}]}