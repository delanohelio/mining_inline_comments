{"pr_number": 2385, "pr_title": "[2.48.11] Delete raw images from Saved Forms ", "pr_createdAt": "2020-10-20T13:08:15Z", "pr_url": "https://github.com/dimagi/commcare-android/pull/2385", "timeline": [{"oid": "0ab5b17fbd15b0c4f4383562866abfe870eaa717", "url": "https://github.com/dimagi/commcare-android/commit/0ab5b17fbd15b0c4f4383562866abfe870eaa717", "message": "Adds task to delete raw media", "committedDate": "2020-10-19T10:55:28Z", "type": "commit"}, {"oid": "7c501905c66a24c3ffad1df51d0eda7467f45a2e", "url": "https://github.com/dimagi/commcare-android/commit/7c501905c66a24c3ffad1df51d0eda7467f45a2e", "message": "Adds free disk space as an user property", "committedDate": "2020-10-19T17:57:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Mjk1NA==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508562954", "bodyText": "I think we should only be doing this for Forms in a specific state, right? It doesn't seem correct to me for this to delete the raw storage for, say, a form that's currently in progress. I wonder if it's safest to, say, only do this for forms that were saved more than a few days ago, too, but that's probably overly conservative", "author": "ctsims", "createdAt": "2020-10-20T14:34:51Z", "path": "app/src/org/commcare/tasks/CleanRawMedia.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.tasks\n+\n+import android.content.Context\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import org.commcare.CommCareApplication\n+import org.commcare.android.database.user.models.FormRecord\n+import org.commcare.utils.CrashUtil\n+import java.io.File\n+import java.lang.Exception\n+\n+class CleanRawMedia(appContext: Context, workerParams: WorkerParameters)\n+    : Worker(appContext, workerParams) {\n+\n+    override fun doWork(): Result {\n+        try {\n+            val storage = CommCareApplication.instance().getUserStorage(FormRecord::class.java)\n+            for (formRecord in storage) {", "originalCommit": "7c501905c66a24c3ffad1df51d0eda7467f45a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzMjE4OA==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508632188", "bodyText": "Yeah thats a good point. Though given on some devices users face storage issues even in normal conditions, I am inclined to remove it for all completely saved forms. I don't see value in retaining the original images for any forms which are not in progress or incomplete.", "author": "shubham1g5", "createdAt": "2020-10-20T15:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Mjk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDc1Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508564756", "bodyText": "Do we want to fail the loop for one failed record? Given what this task is doing I'd guess we should report each exception (And return failure for the task), but proceed with the next record. Otherwise one bad record will prevent cleaning up the remaining ones", "author": "ctsims", "createdAt": "2020-10-20T14:37:02Z", "path": "app/src/org/commcare/tasks/CleanRawMedia.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.tasks\n+\n+import android.content.Context\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import org.commcare.CommCareApplication\n+import org.commcare.android.database.user.models.FormRecord\n+import org.commcare.utils.CrashUtil\n+import java.io.File\n+import java.lang.Exception\n+\n+class CleanRawMedia(appContext: Context, workerParams: WorkerParameters)\n+    : Worker(appContext, workerParams) {\n+\n+    override fun doWork(): Result {\n+        try {\n+            val storage = CommCareApplication.instance().getUserStorage(FormRecord::class.java)\n+            for (formRecord in storage) {\n+                File(formRecord.filePath).parent?.let {\n+                    val rawDirPath = \"$it/raw\"\n+                    File(rawDirPath).deleteRecursively()\n+                }\n+            }\n+        } catch (e: Exception) {", "originalCommit": "7c501905c66a24c3ffad1df51d0eda7467f45a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzNDAwOA==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508634008", "bodyText": "Yeah totally agree. Will add this.", "author": "shubham1g5", "createdAt": "2020-10-20T15:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDc1Ng=="}], "type": "inlineReview"}, {"oid": "7982372753aaeead13a4e0d10de1658c32d20fdb", "url": "https://github.com/dimagi/commcare-android/commit/7982372753aaeead13a4e0d10de1658c32d20fdb", "message": "only deletes raw images for saved, unsent and completed forms", "committedDate": "2020-10-20T17:07:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MTc4Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508771786", "bodyText": "NIT: Missing endline", "author": "ctsims", "createdAt": "2020-10-20T19:05:18Z", "path": "app/src/org/commcare/tasks/CleanRawMedia.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.commcare.tasks\n+\n+import android.content.Context\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import org.commcare.CommCareApplication\n+import org.commcare.android.database.user.models.FormRecord\n+import org.commcare.utils.CrashUtil\n+import org.commcare.utils.StorageUtils.getUnsentCompleteOrSavedFormIdsForCurrentApp\n+import java.io.File\n+\n+class CleanRawMedia(appContext: Context, workerParams: WorkerParameters)\n+    : Worker(appContext, workerParams) {\n+\n+    override fun doWork(): Result {\n+        val storage = CommCareApplication.instance().getUserStorage(FormRecord::class.java)\n+        val recordsToRemove = getUnsentCompleteOrSavedFormIdsForCurrentApp(storage)\n+        for (formId in recordsToRemove) {\n+            try {\n+                val filePath = storage.getMetaDataFieldForRecord(formId, FormRecord.META_FILE_PATH)\n+                File(filePath).parent?.let {\n+                    val rawDirPath = \"$it/raw\"\n+                    File(rawDirPath).deleteRecursively()\n+                }\n+            } catch (e: Exception) {\n+                CrashUtil.reportException(e)\n+            }\n+        }\n+        return Result.success()\n+    }\n+}", "originalCommit": "7982372753aaeead13a4e0d10de1658c32d20fdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNTUyMQ==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r509005521", "bodyText": "Ahh I am not sure what are you pointing at here ? Is it nicer to give a line break at the end of file ?", "author": "shubham1g5", "createdAt": "2020-10-21T05:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMzgzOQ==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r509013839", "bodyText": "Found an explanation here, so sorted on this. Configured my editor to do this in future for all files.", "author": "shubham1g5", "createdAt": "2020-10-21T06:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNTk0Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r509015943", "bodyText": "Wow, I didn't know about this. Will configure my editor for the same.", "author": "ShivamPokhriyal", "createdAt": "2020-10-21T06:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjI0OA==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508772248", "bodyText": "I think we should fail at the bottom of the loop still if one iteration didn't process right? That will let it retry later, although if we are launching at-most-one of these per startup maybe it's not worth worrying about the distinciton.", "author": "ctsims", "createdAt": "2020-10-20T19:06:04Z", "path": "app/src/org/commcare/tasks/CleanRawMedia.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.commcare.tasks\n+\n+import android.content.Context\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import org.commcare.CommCareApplication\n+import org.commcare.android.database.user.models.FormRecord\n+import org.commcare.utils.CrashUtil\n+import org.commcare.utils.StorageUtils.getUnsentCompleteOrSavedFormIdsForCurrentApp\n+import java.io.File\n+\n+class CleanRawMedia(appContext: Context, workerParams: WorkerParameters)\n+    : Worker(appContext, workerParams) {\n+\n+    override fun doWork(): Result {\n+        val storage = CommCareApplication.instance().getUserStorage(FormRecord::class.java)\n+        val recordsToRemove = getUnsentCompleteOrSavedFormIdsForCurrentApp(storage)\n+        for (formId in recordsToRemove) {\n+            try {\n+                val filePath = storage.getMetaDataFieldForRecord(formId, FormRecord.META_FILE_PATH)\n+                File(filePath).parent?.let {\n+                    val rawDirPath = \"$it/raw\"\n+                    File(rawDirPath).deleteRecursively()\n+                }\n+            } catch (e: Exception) {\n+                CrashUtil.reportException(e)", "originalCommit": "7982372753aaeead13a4e0d10de1658c32d20fdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNDY2MA==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r509004660", "bodyText": "We are launching these at-most-once per user login, though still think that it's not worth the distinction here as it's not crticial to keep retrying for a few failed records.", "author": "shubham1g5", "createdAt": "2020-10-21T05:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjkwNg==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r508772906", "bodyText": "Probably best for us to encode this in a static with the other part of the code, to make sure if a change is made that someone knows it affects this cleanup as well.", "author": "ctsims", "createdAt": "2020-10-20T19:07:13Z", "path": "app/src/org/commcare/tasks/CleanRawMedia.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.commcare.tasks\n+\n+import android.content.Context\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import org.commcare.CommCareApplication\n+import org.commcare.android.database.user.models.FormRecord\n+import org.commcare.utils.CrashUtil\n+import org.commcare.utils.StorageUtils.getUnsentCompleteOrSavedFormIdsForCurrentApp\n+import java.io.File\n+\n+class CleanRawMedia(appContext: Context, workerParams: WorkerParameters)\n+    : Worker(appContext, workerParams) {\n+\n+    override fun doWork(): Result {\n+        val storage = CommCareApplication.instance().getUserStorage(FormRecord::class.java)\n+        val recordsToRemove = getUnsentCompleteOrSavedFormIdsForCurrentApp(storage)\n+        for (formId in recordsToRemove) {\n+            try {\n+                val filePath = storage.getMetaDataFieldForRecord(formId, FormRecord.META_FILE_PATH)\n+                File(filePath).parent?.let {\n+                    val rawDirPath = \"$it/raw\"", "originalCommit": "7982372753aaeead13a4e0d10de1658c32d20fdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNTEzMw==", "url": "https://github.com/dimagi/commcare-android/pull/2385#discussion_r509005133", "bodyText": "agree though keeping it unchanged for now to avoid another review cycle and  I will implement the suggestion in the master version of this PR>", "author": "shubham1g5", "createdAt": "2020-10-21T05:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjkwNg=="}], "type": "inlineReview"}]}