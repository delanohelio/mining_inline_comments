{"pr_number": 1135, "pr_title": "Undeprecates StrictCurrentTraceContext", "pr_createdAt": "2020-04-01T10:45:58Z", "pr_url": "https://github.com/openzipkin/brave/pull/1135", "timeline": [{"oid": "d9a6a6991a53966031426fb40c02dfe710ba00d9", "url": "https://github.com/openzipkin/brave/commit/d9a6a6991a53966031426fb40c02dfe710ba00d9", "message": "Undeprecates StrictCurrentTraceContext\n\n`StrictCurrentTraceContext` can help reduce flakiness in environments\nthat run multiple concurrent tests from different classes at the same\ntime. This unflaking is due to an unshared thread local.\n\nEven if thread local isn't the cause of flakiness, this can help those\ntrying to debug flakey things rule it out!", "committedDate": "2020-04-01T10:43:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzk5MA==", "url": "https://github.com/openzipkin/brave/pull/1135#discussion_r401523990", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                currentTraceContext.clear();\n          \n          \n            \n                currentTraceContext.close();", "author": "codefromthecrypt", "createdAt": "2020-04-01T10:47:01Z", "path": "brave/README.md", "diffHunk": "@@ -836,24 +836,23 @@ When writing unit tests, there are a few tricks that will make bugs\n easier to find:\n \n * Report spans into a concurrent queue, so you can read them in tests\n-* Use `StrictScopeDecorator` to reveal subtle thread-related propagation bugs\n+* Use `StrictCurrentTraceContext` to reveal subtle thread-related propagation bugs\n * Unconditionally cleanup `Tracing.current()`, to prevent leaks\n \n Here's an example setup for your unit test fixture:\n ```java\n ConcurrentLinkedDeque<Span> spans = new ConcurrentLinkedDeque<>();\n \n+StrictCurrentTraceContext currentTraceContext = StrictCurrentTraceContext.create()\n Tracing tracing = Tracing.newBuilder()\n-                 .currentTraceContext(ThreadLocalCurrentTraceContext.newBuilder()\n-                   .addScopeDecorator(StrictScopeDecorator.create())\n-                   .build()\n-                 )\n+                 .currentTraceContext(currentTraceContext)\n                  .spanReporter(spans::add)\n                  .build();\n \n   @After public void close() {\n     Tracing current = Tracing.current();\n     if (current != null) current.close();\n+    currentTraceContext.clear();", "originalCommit": "d9a6a6991a53966031426fb40c02dfe710ba00d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "55a99b615249b34b47310d30c4ca3ccf1f5e16a1", "url": "https://github.com/openzipkin/brave/commit/55a99b615249b34b47310d30c4ca3ccf1f5e16a1", "message": "typo", "committedDate": "2020-04-01T10:47:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDI1OQ==", "url": "https://github.com/openzipkin/brave/pull/1135#discussion_r401524259", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    strictScopeDecorator = (StrictScopeDecorator) scopeDecorator;\n          \n          \n            \n                    strictScopeDecorator = (StrictScopeDecorator) scopeDecorator;\n          \n          \n            \n                    return this;", "author": "codefromthecrypt", "createdAt": "2020-04-01T10:47:34Z", "path": "brave/src/main/java/brave/propagation/StrictCurrentTraceContext.java", "diffHunk": "@@ -13,23 +13,84 @@\n  */\n package brave.propagation;\n \n+import brave.internal.Nullable;\n+import java.io.Closeable;\n+\n /**\n  * Useful when developing instrumentation as state is enforced more strictly.\n  *\n  * <p>For example, it is instance scoped as opposed to static scoped, not inheritable and throws an\n  * exception if a scope is closed on a different thread that it was opened on.\n  *\n- * @deprecated use {@linkplain StrictScopeDecorator}. This will be removed in Brave v6.\n+ * @see StrictScopeDecorator\n  */\n-@Deprecated\n-public final class StrictCurrentTraceContext extends ThreadLocalCurrentTraceContext {\n-  static Builder strictBuilder() {\n-    return new Builder(new ThreadLocal<>()).addScopeDecorator(new StrictScopeDecorator());\n+public final class StrictCurrentTraceContext extends CurrentTraceContext implements Closeable {\n+  /** @since 5.11 */\n+  public static StrictCurrentTraceContext create() {\n+    return new StrictCurrentTraceContext();\n   }\n \n-  public StrictCurrentTraceContext() { // Preserve historical public ctor\n+  /** @since 5.11 */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder extends CurrentTraceContext.Builder {\n     // intentionally not inheritable to ensure instrumentation propagation doesn't accidentally work\n     // intentionally not static to make explicit when instrumentation need per thread semantics\n-    super(strictBuilder());\n+    final ThreadLocal<TraceContext> local = new ThreadLocal<>();\n+    CurrentTraceContext delegate = new ThreadLocalCurrentTraceContext.Builder(local).build();\n+    StrictScopeDecorator strictScopeDecorator = new StrictScopeDecorator();\n+\n+    @Override public StrictCurrentTraceContext build() {\n+      delegate = new ThreadLocalCurrentTraceContext.Builder(local)\n+        .addScopeDecorator(strictScopeDecorator)\n+        .build();\n+      return new StrictCurrentTraceContext(this);\n+    }\n+\n+    @Override public Builder addScopeDecorator(ScopeDecorator scopeDecorator) {\n+      if (scopeDecorator instanceof StrictScopeDecorator) {\n+        strictScopeDecorator = (StrictScopeDecorator) scopeDecorator;", "originalCommit": "55a99b615249b34b47310d30c4ca3ccf1f5e16a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "714e426c3136acf737a14e8fe5991b14acb2b536", "url": "https://github.com/openzipkin/brave/commit/714e426c3136acf737a14e8fe5991b14acb2b536", "message": "goof", "committedDate": "2020-04-01T10:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDY5Nw==", "url": "https://github.com/openzipkin/brave/pull/1135#discussion_r401524697", "bodyText": "didn't create scopes", "author": "codefromthecrypt", "createdAt": "2020-04-01T10:48:27Z", "path": "brave/src/test/java/brave/features/opentracing/OpenTracingAdapterTest.java", "diffHunk": "@@ -39,9 +37,6 @@\n public class OpenTracingAdapterTest {\n   List<zipkin2.Span> spans = new ArrayList<>();\n   Tracing brave = Tracing.newBuilder()\n-    .currentTraceContext(ThreadLocalCurrentTraceContext.newBuilder()", "originalCommit": "714e426c3136acf737a14e8fe5991b14acb2b536", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}