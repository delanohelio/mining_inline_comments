{"pr_number": 1173, "pr_title": "Adds rationale for client response callback context", "pr_createdAt": "2020-04-26T01:07:06Z", "pr_url": "https://github.com/openzipkin/brave/pull/1173", "timeline": [{"oid": "11a54a61a42288d78510e0c803d74e9928abf0e7", "url": "https://github.com/openzipkin/brave/commit/11a54a61a42288d78510e0c803d74e9928abf0e7", "message": "Adds rationale for client response callback context", "committedDate": "2020-04-26T00:59:53Z", "type": "commit"}, {"oid": "455167556c1b485333d1a41108babc8384421e17", "url": "https://github.com/openzipkin/brave/commit/455167556c1b485333d1a41108babc8384421e17", "message": "Adds armeria citation", "committedDate": "2020-04-26T01:15:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4NjU4Ng==", "url": "https://github.com/openzipkin/brave/pull/1173#discussion_r415186586", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This may sound intuitive to those thinking in terms of callback nesting depth,\n          \n          \n            \n            This may sound unintuitive to those thinking in terms of callback nesting depth,", "author": "codefromthecrypt", "createdAt": "2020-04-26T01:39:44Z", "path": "instrumentation/RATIONALE.md", "diffHunk": "@@ -2,6 +2,94 @@\n Rationale here applies to common decisions made in this directory. See\n [Brave's RATIONALE](../brave/RATIONALE.md) for internal rationale.\n \n+## Why does the client response callback run in the invocation context?\n+This rationale applies equally to CLIENT and PRODUCER spans.\n+\n+Asynchronous code is often modeled in terms of callbacks. For example, the\n+following pseudo code represents a chain of 3 client calls.\n+```java\n+ScopedSpan parent = tracer.startScopedSpan(\"parent\");\n+try {\n+  client.call(\"1\")\n+        .flatMap((r) -> client.call(\"2\"))\n+        .flatMap((r) -> client.call(\"3\"));\n+} finally {\n+  parent.finish();\n+}\n+```\n+\n+It might be surprising that calls \"2\" and \"3\" execute in the \"parent\" trace\n+context, as opposed to the preceding client call. Put another way, response\n+callbacks run in the invocation context, which cause new spans to appear as\n+as a siblings, as opposed to children of the previous callback (in this case\n+a client).\n+\n+This may sound intuitive to those thinking in terms of callback nesting depth,", "originalCommit": "455167556c1b485333d1a41108babc8384421e17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5adcb6b1ea03a41325a1febc7fd7517107cd1cb", "url": "https://github.com/openzipkin/brave/commit/d5adcb6b1ea03a41325a1febc7fd7517107cd1cb", "message": "unintuitive", "committedDate": "2020-04-26T01:39:56Z", "type": "commit"}, {"oid": "488aabc331d2dd2c5760e139801ebde78aa03555", "url": "https://github.com/openzipkin/brave/commit/488aabc331d2dd2c5760e139801ebde78aa03555", "message": "make pseudo reactive", "committedDate": "2020-04-26T01:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5NjUwMg==", "url": "https://github.com/openzipkin/brave/pull/1173#discussion_r415196502", "bodyText": "How about also talking about local spans (span without kind)? I guess some people want to model grouped client spans and intuitively think the group should also be a client span, though in our model, where we want to describe inter-service links, this should be a local span.", "author": "anuraaga", "createdAt": "2020-04-26T02:46:22Z", "path": "instrumentation/RATIONALE.md", "diffHunk": "@@ -2,6 +2,100 @@\n Rationale here applies to common decisions made in this directory. See\n [Brave's RATIONALE](../brave/RATIONALE.md) for internal rationale.\n \n+## Why does the client response callback run in the invocation context?\n+This rationale applies equally to CLIENT and PRODUCER spans.\n+\n+Asynchronous code is often modeled in terms of callbacks. For example, the\n+following pseudo code represents a chain of 3 client calls.\n+```java\n+// Assume you are reactive: assembling a call doesn't invoke it.\n+call = client.call(\"1\")\n+             .flatMap((r) -> client.call(\"2\"))\n+             .flatMap((r) -> client.call(\"3\"));\n+\n+ScopedSpan parent = tracer.startScopedSpan(\"parent\");\n+try {\n+  // In reactive style, subscribe attaches the trace context\n+  call.subscribe(subscriber);\n+} finally {\n+  parent.finish();\n+}\n+```\n+\n+It might be surprising that calls \"2\" and \"3\" execute in the \"parent\" trace\n+context, as opposed to the preceding client call. Put another way, response\n+callbacks run in the invocation context, which cause new spans to appear as\n+as a siblings, as opposed to children of the previous callback (in this case\n+a client).\n+\n+This may sound unintuitive to those thinking in terms of callback nesting depth,\n+but having a consistent structure allows traces to appear similar regardless of\n+imperative vs async invocation. It also is more easy to reason with, but we'll\n+touch on that later.\n+\n+Let's consider the above async pseudo code with the logical equivalent in\n+synchronous code. In each case, there are 3 client calls made in sequence. In\n+each case, there's a potential data dependency, but it isn't actually used!\n+```java\n+// synchronous\n+ScopedSpan parent = tracer.startScopedSpan(\"parent\");\n+try {\n+  client.call(\"1\");\n+  client.call(\"2\");\n+  client.call(\"3\");\n+} finally {\n+  parent.finish();\n+}\n+\n+// reactive\n+call = client.call(\"1\")\n+             .flatMap((r) -> client.call(\"2\"))\n+             .flatMap((r) -> client.call(\"3\"));\n+\n+ScopedSpan parent = tracer.startScopedSpan(\"parent\");\n+try {\n+  call.subscribe(subscriber);\n+} finally {\n+  parent.finish();\n+}\n+```\n+\n+We mention that data is ignored to highlight one deduction one can make, which\n+is that the hierarchy should represent data dependency, as opposed to logical\n+or time wise. While this is interesting, it is difficult to execute in\n+practice. Instrumentation are usually at a lower level than the application\n+code that they run. Hierarchy is already chosen before it would know if data\n+would be read or not. In most cases, it would be unknowable if data were read\n+or used at that level of abstraction. In other words, such a relationship is\n+more fitting for span tags at a higher level, and decoupled from span\n+hierarchy.\n+\n+Even throwing out the data dependency argument, some may think why not model\n+callback depth anyway? We should model spans how the code looks, right?\n+\n+Only three calls may not seem that bad. Perhaps it is easy to reason with\n+what's going on. However, what if there were 100 or 1000? It would be very\n+difficult to reason with the actual parent which may be 999 levels up the tree.\n+Some backend code perform operations like counting children, in order to\n+determine fan out counts. This code would become useless as there would only\n+ever be one child! Put visually, imagine clicking '-' 999 times to find the\n+real parent in a typical trace UI!\n+\n+We acknowledge that using the invocation context as the parent of follow-up\n+requests (response callback) is imperfect. It means any data dependency between\n+one response and the next request is not represented in the hierarchy. It also\n+means callback depth with not manifest in the trace hierarchy. That said,\n+follow-up requests still share not just the same trace, but also the same local\n+root, and also direct parent. As the clocks are the same (and in fact locked\n+against skew), the happens after relationship manifests in span timing. At any\n+rate, if a data dependency is important, you can consider mapping it as a tag.", "originalCommit": "488aabc331d2dd2c5760e139801ebde78aa03555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5Nzg4MQ==", "url": "https://github.com/openzipkin/brave/pull/1173#discussion_r415197881", "bodyText": "sounds good will add", "author": "codefromthecrypt", "createdAt": "2020-04-26T02:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5NjUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5ODY0OA==", "url": "https://github.com/openzipkin/brave/pull/1173#discussion_r415198648", "bodyText": "I think it is a different topic, so I'll add a different section.\nIs there a coherent link between this and that or just something that caught your mind. I'm not sure where to join the points as this is about the response callback and not the span kind vs no span kind topic..\nI know we have another #1172 about that..", "author": "codefromthecrypt", "createdAt": "2020-04-26T03:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5NjUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNDI0OA==", "url": "https://github.com/openzipkin/brave/pull/1173#discussion_r415204248", "bodyText": "moved to #1172", "author": "codefromthecrypt", "createdAt": "2020-04-26T03:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5NjUwMg=="}], "type": "inlineReview"}]}