{"pr_number": 1196, "pr_title": "Makes MutableSpan easier with tags() and annotations() method", "pr_createdAt": "2020-05-09T12:14:35Z", "pr_url": "https://github.com/openzipkin/brave/pull/1196", "timeline": [{"oid": "6aaff718c86306f51a21a194c0785ab5376262c5", "url": "https://github.com/openzipkin/brave/commit/6aaff718c86306f51a21a194c0785ab5376262c5", "message": "Makes MutableSpan easier with tags() and annotations() method\n\nThis makes `MutableSpan` easier, especially in tests, by adding methods\nfor tags and annotations similar to `zipkin2.Span`. Unlike\n`zipkin2.Span`, this presents annotations as a collection of `Map.Entry`.\n\nDoing so keeps us from having to define a new type mostly used in tests.\nThe allocation-free consumer functions are left in place. This replaces\nthe 'count' methods formerly there (in order to try to keep method count\ndown).\n\nOne unit test was converted in the process. We can convert the rest of\nthem following this PR.\n\nUnder the scenes, this uses the same `UnsafeArrayMap` we use in baggage.\nTo port to this model, we had to switch this to use copy-on-write arrays\ninstead of array list. This will actually allocate less except when a\ntag is overwritten as before overwriting didn't allocate an array.\nHowever, this also cheapens usage by a couple copies anyway so it should\nbe a wash or better for most folks.", "committedDate": "2020-05-09T12:09:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4ODYxMw==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422488613", "bodyText": "I switched only one test to show decoupling from zipkin types", "author": "codefromthecrypt", "createdAt": "2020-05-09T12:15:24Z", "path": "brave/src/test/java/brave/features/handler/RedactingSpanHandlerTest.java", "diffHunk": "@@ -28,9 +28,8 @@\n import java.util.regex.Pattern;\n import org.junit.After;\n import org.junit.Test;\n-import zipkin2.Annotation;", "originalCommit": "6aaff718c86306f51a21a194c0785ab5376262c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4ODkxNQ==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422488915", "bodyText": "in hindsight maybe it is worth putting these back.. they are allocation free ways to get the count..", "author": "codefromthecrypt", "createdAt": "2020-05-09T12:18:41Z", "path": "brave/src/test/java/brave/handler/MutableSpanTest.java", "diffHunk": "@@ -91,7 +89,7 @@\n     // When exporting into a list, a lambda would usually need to close over the list, which results\n     // in a new instance per invocation. Since there's a target type parameter, the lambda for this\n     // style of conversion can be constant, reducing overhead.\n-    List<Tag> listTarget = new ArrayList<>(span.tagCount());", "originalCommit": "6aaff718c86306f51a21a194c0785ab5376262c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "62ad1ec7ffdf11fb2607ba43d3419d53e7a96fe3", "url": "https://github.com/openzipkin/brave/commit/62ad1ec7ffdf11fb2607ba43d3419d53e7a96fe3", "message": "puts count back and fixes test", "committedDate": "2020-05-09T12:31:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5OTA1NA==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422499054", "bodyText": "Just to confirm it's ok for this to not be volatile. I guess an ArrayList would have already had issues when resizing though if there is a problem, but I'm not sure that memory is synced if users allowed to mutate without the lock.", "author": "anuraaga", "createdAt": "2020-05-09T13:58:09Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -81,9 +85,9 @@\n   int localPort, remotePort;\n \n   /** To reduce the amount of allocation use a pair-indexed list for tag (key, value). */\n-  ArrayList<String> tags;\n-  /** Also use pair indexing for annotations, but type object to store (startTimestamp, value). */\n-  ArrayList<Object> annotations;\n+  Object[] tags = EMPTY_ARRAY;", "originalCommit": "62ad1ec7ffdf11fb2607ba43d3419d53e7a96fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDQ4MA==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422504480", "bodyText": "yeah this type isn't thread safe it is externally synchronized. the only reason doing copy-on-write is for the map views, to avoid having issues with people sharing them. I'll make a note", "author": "codefromthecrypt", "createdAt": "2020-05-09T14:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5OTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDUxOA==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422504518", "bodyText": "copy-on-write for update I mean", "author": "codefromthecrypt", "createdAt": "2020-05-09T14:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5OTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzM4Mg==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422507382", "bodyText": "I think I added confusion by even saying copy-on-write.. my bad. PTAL at latest!", "author": "codefromthecrypt", "createdAt": "2020-05-09T15:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5OTA1NA=="}], "type": "inlineReview"}, {"oid": "8877e7bc4e42f57c0c2d1b706e244df4393109cc", "url": "https://github.com/openzipkin/brave/commit/8877e7bc4e42f57c0c2d1b706e244df4393109cc", "message": "clarify and fix copy constructor", "committedDate": "2020-05-09T15:19:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxMDY4Ng==", "url": "https://github.com/openzipkin/brave/pull/1196#discussion_r422510686", "bodyText": "oops we don't need to do this.. all we need to do is shift and set null. Otherwise dropping all but one tag (like skeletal spans do) will thrash. will fix", "author": "codefromthecrypt", "createdAt": "2020-05-09T15:44:44Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -883,6 +928,32 @@ static void writeEndpoint(StringBuilder b,\n     b.append('}');\n   }\n \n+  static Object[] add(Object[] input, Object key, Object value) {\n+    int newIndex = input.length;\n+    Object[] result = Arrays.copyOf(input, input.length + 2); // copy-on-write\n+    result[newIndex] = key;\n+    result[newIndex + 1] = value;\n+    return result;\n+  }\n+\n+  // this is externally synchronized, so we can edit it directly\n+  static Object[] update(Object[] input, int i, Object value) {\n+    if (value.equals(input[i + 1])) return input;\n+    input[i + 1] = value;\n+    return input;\n+  }\n+\n+  static Object[] copy(Object[] input) {\n+    return input.length > 0 ? Arrays.copyOf(input, input.length) : EMPTY_ARRAY;\n+  }\n+\n+  static Object[] remove(Object[] input, int i) {\n+    if (input.length == 2 && i == 0) return EMPTY_ARRAY;\n+    Object[] result = Arrays.copyOf(input, input.length - 2);\n+    System.arraycopy(input, i + 2, result, i, input.length - i - 2);", "originalCommit": "8877e7bc4e42f57c0c2d1b706e244df4393109cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "444121d003c15581a66f854a2b5635fc81ea0499", "url": "https://github.com/openzipkin/brave/commit/444121d003c15581a66f854a2b5635fc81ea0499", "message": "Fixes bugs in equals and hashCode", "committedDate": "2020-05-10T00:26:03Z", "type": "forcePushed"}, {"oid": "444121d003c15581a66f854a2b5635fc81ea0499", "url": "https://github.com/openzipkin/brave/commit/444121d003c15581a66f854a2b5635fc81ea0499", "message": "Fixes bugs in equals and hashCode", "committedDate": "2020-05-10T00:26:03Z", "type": "commit"}, {"oid": "1f5f2b62f579ac52ce34735b48b55451a8f3b933", "url": "https://github.com/openzipkin/brave/commit/1f5f2b62f579ac52ce34735b48b55451a8f3b933", "message": "fuzz", "committedDate": "2020-05-10T00:28:47Z", "type": "commit"}]}