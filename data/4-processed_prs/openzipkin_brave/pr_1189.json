{"pr_number": 1189, "pr_title": "Kafka Streams instrumentation Rationale", "pr_createdAt": "2020-05-05T23:11:42Z", "pr_url": "https://github.com/openzipkin/brave/pull/1189", "timeline": [{"oid": "0121e3d8db8a5d2f8b98bf1d7299671dbcaa5462", "url": "https://github.com/openzipkin/brave/commit/0121e3d8db8a5d2f8b98bf1d7299671dbcaa5462", "message": "docs: add note on why not to trace everything on kafka streams", "committedDate": "2020-05-05T22:58:28Z", "type": "commit"}, {"oid": "441051710ecef263f9ada60a016d534ae8179264", "url": "https://github.com/openzipkin/brave/commit/441051710ecef263f9ada60a016d534ae8179264", "message": "docs: rephrasing", "committedDate": "2020-05-05T23:05:46Z", "type": "commit"}, {"oid": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "url": "https://github.com/openzipkin/brave/commit/1f9efeb6754b2b12aef174a527bccdf0dce836d9", "message": "fix: add emdashs", "committedDate": "2020-05-05T23:10:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODUzNw==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420468537", "bodyText": "I'd change it into \"Couldn't we just enable tracing for every operation?\", not a native but feels like more representing the intention of this note.", "author": "jcchavezs", "createdAt": "2020-05-05T23:33:16Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTQwNA==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420485404", "bodyText": "\"Why doesn't this trace all Kafka Streams operations?\"", "author": "codefromthecrypt", "createdAt": "2020-05-06T00:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2OTE4NQ==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420469185", "bodyText": "I would add next to \"all operations would be traced\" the note \"(while not all of them are interesting)\"", "author": "jcchavezs", "createdAt": "2020-05-05T23:35:19Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations. \n+Therefore, is not possible to hook into\n+the topology creation process to instrument each operation.\n+\n+Even though this could be desirable it would require, first, to add new \"doors\" on the Kafka Streams\n+side to manipulate or intercept data around each operation&mdash;which will be hard to sale&mdash;;\n+and even if available, it would potentially expose excessive details as **all**\n+operations would be traced, making traces harder to grok&mdash;and would probably create the need to support", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTE3MQ==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420485171", "bodyText": "do we need to do '\u2014' in markdown? oh boy...", "author": "codefromthecrypt", "createdAt": "2020-05-06T00:29:59Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations. \n+Therefore, is not possible to hook into\n+the topology creation process to instrument each operation.\n+\n+Even though this could be desirable it would require, first, to add new \"doors\" on the Kafka Streams\n+side to manipulate or intercept data around each operation&mdash;which will be hard to sale&mdash;;", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTcwMA==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420485700", "bodyText": "For example, XXX is not traceable this way, yet a part of the stream.", "author": "codefromthecrypt", "createdAt": "2020-05-06T00:31:51Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations. \n+Therefore, is not possible to hook into\n+the topology creation process to instrument each operation.", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjU3NQ==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420486575", "bodyText": "move this sentence to the former paragraph to finish the thought? maybe as\n\"We considered changing Kafka Streams to have hooks to do this, but it would be a hard sell. The maintainers of Kafka Streams would have to agree to add hooks in dozens of places, and move lacking context so that they can work\"\n^^ is an assumed rationale, you can correct it.", "author": "codefromthecrypt", "createdAt": "2020-05-06T00:35:18Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations. \n+Therefore, is not possible to hook into\n+the topology creation process to instrument each operation.\n+\n+Even though this could be desirable it would require, first, to add new \"doors\" on the Kafka Streams", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjcwNw==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420486707", "bodyText": "break to paragraph at \"even if available..", "author": "codefromthecrypt", "createdAt": "2020-05-06T00:35:45Z", "path": "instrumentation/kafka-streams/README.md", "diffHunk": "@@ -95,6 +95,25 @@ referencing the parent context stored on Headers, if available.\n Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n \n+### Why not to trace _every_ Kafka Streams operation?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations. \n+Therefore, is not possible to hook into\n+the topology creation process to instrument each operation.\n+\n+Even though this could be desirable it would require, first, to add new \"doors\" on the Kafka Streams\n+side to manipulate or intercept data around each operation&mdash;which will be hard to sale&mdash;;\n+and even if available, it would potentially expose excessive details as **all**", "originalCommit": "1f9efeb6754b2b12aef174a527bccdf0dce836d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "url": "https://github.com/openzipkin/brave/commit/520d6b849aab1f8e28b584c7b40d0120f898fc64", "message": "apply feedback, and move to rationale", "committedDate": "2020-05-06T08:29:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNzcxNw==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420627717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n          \n          \n            \n            propagated downstream onto the Stream topology. The span context is stored in the Record Headers,", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:34:27Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNzg4OA==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420627888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and\n          \n          \n            \n            If intermediate steps on the Stream topology require tracing, `TracingProcessorSupplier` and", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:34:42Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n+the Producers at the middle (e.g. `builder.through(topic)`) or at the end of a Stream topology\n+will reference the initial span, and mark the end of a Stream Process.\n+\n+If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODM1Mg==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420628352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `TracingTransformerSupplier` will allow you to define a Processor/Transformer where execution is recorded as Span,\n          \n          \n            \n            `TracingTransformerSupplier` record execution into a new Span,", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:35:31Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n+the Producers at the middle (e.g. `builder.through(topic)`) or at the end of a Stream topology\n+will reference the initial span, and mark the end of a Stream Process.\n+\n+If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and\n+`TracingTransformerSupplier` will allow you to define a Processor/Transformer where execution is recorded as Span,", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODY2Mw==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420628663", "bodyText": "mention why we care?", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:36:04Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n+the Producers at the middle (e.g. `builder.through(topic)`) or at the end of a Stream topology\n+will reference the initial span, and mark the end of a Stream Process.\n+\n+If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and\n+`TracingTransformerSupplier` will allow you to define a Processor/Transformer where execution is recorded as Span,\n+referencing the parent context stored on Headers, if available.\n+\n+### Partitioning\n+\n+Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n+grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyOTA4NQ==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420629085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The impact of adding these and rearrange lacking context would have a considerable impact surface.\n          \n          \n            \n            Adding these and rearrange lacking context would have a considerable library impact.", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:36:50Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n+the Producers at the middle (e.g. `builder.through(topic)`) or at the end of a Stream topology\n+will reference the initial span, and mark the end of a Stream Process.\n+\n+If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and\n+`TracingTransformerSupplier` will allow you to define a Processor/Transformer where execution is recorded as Span,\n+referencing the parent context stored on Headers, if available.\n+\n+### Partitioning\n+\n+Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n+grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n+\n+### Why doesn't this trace all Kafka Streams operations?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations.\n+Therefore, is not possible to hook into the topology creation process to instrument each operation.\n+\n+We considered changing Kafka Streams to have hooks to do this, but it would be a hard sell.\n+The impact of adding these and rearrange lacking context would have a considerable impact surface.", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMDc1Mw==", "url": "https://github.com/openzipkin/brave/pull/1189#discussion_r420630753", "bodyText": "Even if we had hooks, tracing all operations would be excessive. The resulting large\ntraces would be harder to understand, leading to requests to disable tracing. The\ncode involved to disable tracing may mean more code than visa versa!", "author": "codefromthecrypt", "createdAt": "2020-05-06T08:39:51Z", "path": "instrumentation/kafka-streams/RATIONALE.md", "diffHunk": "@@ -0,0 +1,42 @@\n+# brave-kafka-streams rationale\n+\n+## What's happening?\n+Typically, there are at least two spans involved in traces produces by a Kafka Stream application:\n+* One created by the Consumers that starts a Stream or Table, by `builder.stream(topic)`.\n+* One created by the Producer that sends a records to a Stream, by `builder.to(topic)`\n+\n+By receiving records in a Kafka Streams application with Tracing enabled, the span created, once\n+a record is received, will inject the span context on the headers of the Record, and it will get\n+propagated downstream onto the Stream topology. As the span context is stored in the Record Headers,\n+the Producers at the middle (e.g. `builder.through(topic)`) or at the end of a Stream topology\n+will reference the initial span, and mark the end of a Stream Process.\n+\n+If intermediate steps on the Stream topology require tracing, then `TracingProcessorSupplier` and\n+`TracingTransformerSupplier` will allow you to define a Processor/Transformer where execution is recorded as Span,\n+referencing the parent context stored on Headers, if available.\n+\n+### Partitioning\n+\n+Be aware that operations that require `builder.transformer(...)` will cause re-partitioning when\n+grouping or joining downstream ([Kafka docs](https://kafka.apache.org/documentation/streams/developer-guide/dsl-api.html#applying-processors-and-transformers-processor-api-integration)).\n+\n+### Why doesn't this trace all Kafka Streams operations?\n+\n+When starting to design this instrumentation, \u201ctrace everything\u201d was the first idea:\n+When a message enters the Kafka Streams topology starts a new `poll` span, and every operation\n+(e.g. `map`, `filter`, `join`, etc.) is chained as an additional child span.\n+\n+Kafka Streams materializes its topology _internally_ based on DSL operations.\n+Therefore, is not possible to hook into the topology creation process to instrument each operation.\n+\n+We considered changing Kafka Streams to have hooks to do this, but it would be a hard sell.\n+The impact of adding these and rearrange lacking context would have a considerable impact surface.\n+\n+Even if available, it would potentially expose excessive details as **all**", "originalCommit": "520d6b849aab1f8e28b584c7b40d0120f898fc64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bd1ba21e830f3d06586352a36d818afe7ace253", "url": "https://github.com/openzipkin/brave/commit/2bd1ba21e830f3d06586352a36d818afe7ace253", "message": "Update instrumentation/kafka-streams/RATIONALE.md\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-05-06T08:56:29Z", "type": "commit"}, {"oid": "d709714332effb49d96b50404a70bbfa68ef9201", "url": "https://github.com/openzipkin/brave/commit/d709714332effb49d96b50404a70bbfa68ef9201", "message": "Update instrumentation/kafka-streams/RATIONALE.md\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-05-06T08:57:16Z", "type": "commit"}, {"oid": "9992561616deca2804664e3abfd5bc9ed11e2bbe", "url": "https://github.com/openzipkin/brave/commit/9992561616deca2804664e3abfd5bc9ed11e2bbe", "message": "Update instrumentation/kafka-streams/RATIONALE.md\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-05-06T08:57:31Z", "type": "commit"}, {"oid": "ef8d4e95a6011bb17a5b4d453ba0ae7e1df4fa40", "url": "https://github.com/openzipkin/brave/commit/ef8d4e95a6011bb17a5b4d453ba0ae7e1df4fa40", "message": "Update instrumentation/kafka-streams/RATIONALE.md\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>", "committedDate": "2020-05-06T08:58:11Z", "type": "commit"}, {"oid": "0e3abf8ea673be57a461aee615204be9ee11c706", "url": "https://github.com/openzipkin/brave/commit/0e3abf8ea673be57a461aee615204be9ee11c706", "message": "apply adriano's feedback", "committedDate": "2020-05-06T09:01:45Z", "type": "commit"}, {"oid": "f25cc1513587c4e54b68a73db26ee653bc03cb61", "url": "https://github.com/openzipkin/brave/commit/f25cc1513587c4e54b68a73db26ee653bc03cb61", "message": "add more details on partitioning", "committedDate": "2020-05-06T09:17:25Z", "type": "commit"}, {"oid": "bd084b03df30a33ae18dc0ebbf0e6522323acb99", "url": "https://github.com/openzipkin/brave/commit/bd084b03df30a33ae18dc0ebbf0e6522323acb99", "message": "fix title", "committedDate": "2020-05-06T09:18:15Z", "type": "commit"}]}