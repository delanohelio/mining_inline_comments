{"pr_number": 1205, "pr_title": "Adds rationale and notes around comma-separated HTTP headers", "pr_createdAt": "2020-05-11T02:10:06Z", "pr_url": "https://github.com/openzipkin/brave/pull/1205", "timeline": [{"oid": "a4e6bfd8d9e710c64aa07e36f8698556fde5fecb", "url": "https://github.com/openzipkin/brave/commit/a4e6bfd8d9e710c64aa07e36f8698556fde5fecb", "message": "Adds rationale and notes around comma-separated HTTP headers", "committedDate": "2020-05-11T02:11:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0NDU1Ng==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r422744556", "bodyText": "this is not about HTTP, but don't feel like moving it to another PR ...", "author": "codefromthecrypt", "createdAt": "2020-05-11T02:13:55Z", "path": "brave/RATIONALE.md", "diffHunk": "@@ -60,6 +60,15 @@ attempting to do that would limit the applicability of Brave, which is an anti-\n goal. Instead, we choose to use nothing except floor Java version features,\n currently Java 6.\n \n+Here's an example of when things that seem right aren't. We once dropped our", "originalCommit": "a4e6bfd8d9e710c64aa07e36f8698556fde5fecb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7ee84125983a3160c204d4903122317e888ea412", "url": "https://github.com/openzipkin/brave/commit/7ee84125983a3160c204d4903122317e888ea412", "message": "Adds folklore note as it is crazy common anti-knowledge", "committedDate": "2020-05-11T02:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0NjY0NQ==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r422746645", "bodyText": "I added this point because it is a common fantasy", "author": "codefromthecrypt", "createdAt": "2020-05-11T02:23:45Z", "path": "brave/RATIONALE.md", "diffHunk": "@@ -170,6 +179,74 @@ direct integration with request types (such as HTTP request) vs routing\n through an intermediate (such as a map). Brave also considers propagation\n a separate api from the tracer.\n \n+### Why does `Setter` not allow putting `null`?\n+`Setter` cannot allow clearing values as it is not guaranteed to work. For\n+example, you can't clear headers made with `URLConnection`, only replace or add\n+to them.\n+\n+For this reason, when wrapping messages that are processed multiple times, such\n+as in messaging, you must clear keys on your own.\n+\n+There is a problem when an abstraction hides follow-up requests, such as\n+HTTP redirects or retries, as multiple requests will result in the same span.\n+This implies invalid timing and a repeated upstream ID seen by potentially\n+multiple servers! For this reason, always prefer sending headers (using\n+`Setter`) at the lowest abstraction possible, and raise issues with frameworks\n+that hide the ability to see follow-up requests.\n+\n+### Why does `Setter` not allow multiple values?\n+First, the most common multi-map header is HTTP, `Setter` also works on\n+messaging and RPC where multi-map fields are unusual.\n+\n+HTTP [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2.2) allows encoding of multiple fields with the same name, but this\n+only applies to fields which define themselves as comma-separated. The `Setter`\n+abstraction has no knowledge of if the request is an HTTP request, and even if\n+it did, it wouldn't have knowledge of the format rules per field. That's the\n+responsibility of the `Propagation` implementation. Hence, the `Injector`,\n+which knows format rules, should do comma joining when valid.\n+\n+Some think that sending a header in comma-separated format, implies a receiver", "originalCommit": "7ee84125983a3160c204d4903122317e888ea412", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjQ0Ng==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r423022446", "bodyText": "you can still get null analysis from intellij if you add your custom annotation here", "author": "NersesAM", "createdAt": "2020-05-11T13:02:56Z", "path": "brave/RATIONALE.md", "diffHunk": "@@ -60,6 +60,15 @@ attempting to do that would limit the applicability of Brave, which is an anti-\n goal. Instead, we choose to use nothing except floor Java version features,\n currently Java 6.\n \n+Here's an example of when things that seem right aren't. We once dropped our\n+internal `@Nullable` annotation (which is source retention), in favor of JSR\n+305 (which is runtime retention). In doing so, we got `null` analysis from", "originalCommit": "7ee84125983a3160c204d4903122317e888ea412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5MTE4Ng==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r423091186", "bodyText": "Thanks @NersesAM. I just updated with this.", "author": "codefromthecrypt", "createdAt": "2020-05-11T14:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjQ0Ng=="}], "type": "inlineReview"}, {"oid": "b1b5c1583e597357d1c79fb46a17ba2fd73960d2", "url": "https://github.com/openzipkin/brave/commit/b1b5c1583e597357d1c79fb46a17ba2fd73960d2", "message": "Adds footnote on Nullable", "committedDate": "2020-05-11T14:43:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NzQwNQ==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r423157405", "bodyText": "typo in Annotatione", "author": "NersesAM", "createdAt": "2020-05-11T16:17:22Z", "path": ".github/CONTRIBUTING.md", "diffHunk": "@@ -6,6 +6,11 @@ send a pull request (on a branch other than `master` or `gh-pages`).\n When submitting code, please apply [Square Code Style](https://github.com/square/java-code-styles).\n * If the settings import correctly, CodeStyle/Java will be named Square and use 2 space tab and indent, with 4 space continuation indent.\n \n+You may also want to configure your IDE to perform `null` analysis using Brave's\n+source retention annotation `brave.internal.Nullable`. For example, in IntelliJ,\n+search for \"Nullable\" under \"Inspections\". Click \"Configure Annotatione\", then", "originalCommit": "b1b5c1583e597357d1c79fb46a17ba2fd73960d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3NDQ0MA==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r423374440", "bodyText": "thx", "author": "codefromthecrypt", "createdAt": "2020-05-11T23:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3NDMzMg==", "url": "https://github.com/openzipkin/brave/pull/1205#discussion_r423374332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            search for \"Nullable\" under \"Inspections\". Click \"Configure Annotatione\", then\n          \n          \n            \n            search for \"Nullable\" under \"Inspections\". Click \"Configure Annotations\", then", "author": "codefromthecrypt", "createdAt": "2020-05-11T23:21:37Z", "path": ".github/CONTRIBUTING.md", "diffHunk": "@@ -6,6 +6,11 @@ send a pull request (on a branch other than `master` or `gh-pages`).\n When submitting code, please apply [Square Code Style](https://github.com/square/java-code-styles).\n * If the settings import correctly, CodeStyle/Java will be named Square and use 2 space tab and indent, with 4 space continuation indent.\n \n+You may also want to configure your IDE to perform `null` analysis using Brave's\n+source retention annotation `brave.internal.Nullable`. For example, in IntelliJ,\n+search for \"Nullable\" under \"Inspections\". Click \"Configure Annotatione\", then", "originalCommit": "b1b5c1583e597357d1c79fb46a17ba2fd73960d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4466dfb9699b5ca94cc1529ba42a8a346ca7472b", "url": "https://github.com/openzipkin/brave/commit/4466dfb9699b5ca94cc1529ba42a8a346ca7472b", "message": "typo", "committedDate": "2020-05-11T23:21:45Z", "type": "commit"}]}