{"pr_number": 1169, "pr_title": "Removes one-way handling via Span.flush and polishes Dubbo", "pr_createdAt": "2020-04-22T06:51:49Z", "pr_url": "https://github.com/openzipkin/brave/pull/1169", "timeline": [{"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "url": "https://github.com/openzipkin/brave/commit/cb01388df703a5d5bac1f6e1e6a39b885f67a784", "message": "Removes one-way handling via Span.flush and polishes Dubbo\n\nThis removes the now confusing one-way RPC handling where one side calls\n`span.start().flush()` and the other `span.finish()` (without start).\n\nThis was never implemented consistently. For example, Dubbo did flush on\nclient, but not anything special on the receiving side. It is more\ncoherent for us to eventually add a \"rpc.oneway\" -> \"\" tag at some\npoint, and meanwhile, those who want to know can add their own tags.\n\nLater, I'll remove the same content from the website.", "committedDate": "2020-04-22T06:47:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNjg0OQ==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412716849", "bodyText": "funny we documented like this, but didn't use it!", "author": "codefromthecrypt", "createdAt": "2020-04-22T06:52:26Z", "path": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/ITTracingFilter_Consumer.java", "diffHunk": "@@ -150,7 +149,7 @@\n     client.get().sayHello(\"jorge\");\n \n     assertThat(reporter.takeRemoteSpan(Span.Kind.CLIENT).name())\n-      .isEqualTo(\"greeterservice/sayhello\");\n+      .isEqualTo(\"brave.dubbo.rpc.greeterservice/sayhello\");", "originalCommit": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzUwOA==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717508", "bodyText": "an earlier mistake where we made generic parsers, but didn't use them.", "author": "codefromthecrypt", "createdAt": "2020-04-22T06:53:39Z", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);", "originalCommit": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzY4Mg==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717682", "bodyText": "oneWay is not needed in order to figure out how to proceed.", "author": "codefromthecrypt", "createdAt": "2020-04-22T06:53:58Z", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);\n+      String method = DubboParser.method(invocation);\n       span.name(service + \"/\" + method);\n-      parseRemoteAddress(rpcContext, span);\n+      DubboParser.parseRemoteIpAndPort(span);\n       span.start();\n     }\n \n-    boolean isOneway = false, deferFinish = false;", "originalCommit": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412720628", "bodyText": "How about String.valueOf(code) for all the cases? I don't think we convert HTTP codes to names in tags, and it makes sure tags are consistently an integer without worrying about maintenance.\nAlternatively, I'd return UNKNOWN_EXCEPTION here so tags are consistently a string. A tag that's string or int seems hard to use.", "author": "anuraaga", "createdAt": "2020-04-22T06:59:06Z", "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "originalCommit": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMjk2Mw==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412722963", "bodyText": "this is to marry up with rpc.error_code which is defined as a string", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMzg3NA==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412723874", "bodyText": "I wouldn't add anything they don't define as a code as a code, as that is imho more confusing. the fallback to numeric is only there to help us understand drift on dubbo.", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNDM5Nw==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412724397", "bodyText": "but yeah if you want I can revert this, just we need it anyway in dubbo for the RPC model, we literally have the string names and should use them.", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNTE3NQ==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412725175", "bodyText": "Nah think it's ok", "author": "anuraaga", "createdAt": "2020-04-22T07:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNjIwNw==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412726207", "bodyText": "probably the _EXCEPTION thing is a bit much I was trying to match what they call it. for example, they have constants and boolean methods for each code http://dubbo.apache.org/docs/2.7.x/api/org/apache/dubbo/rpc/RpcException.html", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNzM3OA==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412727378", "bodyText": "anyway I don't care enough to debate this I'll just put number and it can stay like that even when we move to rpc model.", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczODMyMg==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412738322", "bodyText": "I added them back though I feel really bad about this and think we are doing ourselves and users a disservice. we intentionally say we prefer code names instead of numbers, and we  aren't doing that and offered bad choices instead from an irrelevant comparison with http. I'm not in a convincing mood, so I'll fold despite feeling awful about it.", "author": "codefromthecrypt", "createdAt": "2020-04-22T07:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MjI1MQ==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412742251", "bodyText": "#1169 (comment)\nAh - I meant it seems ok to stick with string too like before the latest commit.", "author": "anuraaga", "createdAt": "2020-04-22T07:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5OTY1MQ==", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412799651", "bodyText": "I'll resurrect this in a new commit as it is probably deserving to have in a PR title anyway. thanks!", "author": "codefromthecrypt", "createdAt": "2020-04-22T08:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}], "type": "inlineReview"}, {"oid": "cf830ac6f77d07a9998d35b4a2e80335699758d3", "url": "https://github.com/openzipkin/brave/commit/cf830ac6f77d07a9998d35b4a2e80335699758d3", "message": "add back cryptic numbers", "committedDate": "2020-04-22T07:25:51Z", "type": "commit"}]}