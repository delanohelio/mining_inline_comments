{"pr_number": 8008, "pr_title": "Updated the material popup to disable scm based material type options", "pr_createdAt": "2020-04-15T05:10:56Z", "pr_url": "https://github.com/gocd/gocd/pull/8008", "timeline": [{"oid": "a757a693ce0aa46b8daa458506571baa8813fa76", "url": "https://github.com/gocd/gocd/commit/a757a693ce0aa46b8daa458506571baa8813fa76", "message": "Updated the material popup to disable scm based material type options if other materials in the pipeline have a blank destination\n - updated the material editor to disable options", "committedDate": "2020-04-15T05:13:30Z", "type": "commit"}, {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76", "url": "https://github.com/gocd/gocd/commit/a757a693ce0aa46b8daa458506571baa8813fa76", "message": "Updated the material popup to disable scm based material type options if other materials in the pipeline have a blank destination\n - updated the material editor to disable options", "committedDate": "2020-04-15T05:13:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587093", "bodyText": "this would iterate the collection twice.\nHow about moving the material.attributes() instanceof ScmMaterialAttributes check inside some?", "author": "GaneshSPatil", "createdAt": "2020-04-15T05:21:19Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "originalCommit": "a757a693ce0aa46b8daa458506571baa8813fa76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NDI4OQ==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408594289", "bodyText": "IMO, the iteration over the collection twice is the worst case scenario. Looping over collection twice is not necessary a performance issue. I factored readability before it.", "author": "kritika-singh3", "createdAt": "2020-04-15T05:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMTQ4NA==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408601484", "bodyText": "Sure, everyone will have their own preferences of writing code. :)\nIn this particular scenario, we are iterating over the collection 4 times in worst case. Best case, still has to do 2 iterations. Where, everything can be achieved in just 1 iteration.", "author": "GaneshSPatil", "createdAt": "2020-04-15T06:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzE0MQ==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587141", "bodyText": "this would iterate the collection twice.\nHow about moving the material.attributes() instanceof ScmMaterialAttributes check inside some?", "author": "GaneshSPatil", "createdAt": "2020-04-15T05:21:33Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });\n+    const hasPluggableScmMaterialWithEmptyDestination = this\n+      .filter((material) => material.attributes() instanceof PluggableScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as PluggableScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "originalCommit": "a757a693ce0aa46b8daa458506571baa8813fa76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587489", "bodyText": "should we use if for better readability?", "author": "GaneshSPatil", "createdAt": "2020-04-15T05:22:41Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/clicky_pipeline_config/modal/material_modal.tsx", "diffHunk": "@@ -71,9 +72,18 @@ export class MaterialModal extends Modal {\n   }\n \n   body(): m.Children {\n+    const allScmMaterialsHaveDestination = this.materials().scmMaterialsHaveDestination();\n+    const maybeMsg                       = this.isNew && !allScmMaterialsHaveDestination\n+      ? <FlashMessage type={MessageType.warning} dataTestId={\"materials-destination-warning-message\"}>\n+        In order to configure multiple SCM materials for this pipeline, each of its material needs have to a 'Destination Directory' specified. Please\n+        edit the existing material and specify a 'Destination Directory' in order to proceed with this operation.\n+      </FlashMessage>\n+      : undefined;", "originalCommit": "a757a693ce0aa46b8daa458506571baa8813fa76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NDU2NQ==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408594565", "bodyText": "Is the multi-line message an issue or the involvement of two boolean variables?", "author": "kritika-singh3", "createdAt": "2020-04-15T05:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTMzNA==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408599334", "bodyText": "Umm, in this particular scenario,\nthe condition has two parts, this.isNew && !allScmMaterialsHaveDestination which itself was complex to understand.\nAlso, the ternary contains undefined as one of the value evaluation, Where in javascript, if a variable isn't initialized, by default it has undefined value. Which makes the undefined part of the ternary redundant.", "author": "GaneshSPatil", "createdAt": "2020-04-15T06:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408588654", "bodyText": "Generally, we should avoid writing loops and logic in the tests. Or else we will need to write a test for the test too :)\nHere, can we write multiple assertions, one for each material type?", "author": "GaneshSPatil", "createdAt": "2020-04-15T05:26:44Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/pipelines/spec/material_editor_spec.tsx", "diffHunk": "@@ -148,4 +148,25 @@ describe(\"AddPipeline: Material Editor\", () => {\n     expect(helper.byTestId('form-field-input-material-type')).toBeDisabled();\n     expect(helper.byTestId('form-field-input-repository-url')).not.toBeDisabled();\n   });\n+\n+  it('should disable only scm material type options when `disableScmMaterials` is set to true', () => {\n+    helper.mount(() => <MaterialEditor material={material} showExtraMaterials={true} disableScmMaterials={true}/>);\n+\n+    const materialTypeSelection = helper.byTestId('form-field-input-material-type');\n+    expect(materialTypeSelection).not.toBeDisabled();\n+\n+    const disabled: string[] = [];\n+    const enabled: string[]  = [];\n+    helper.qa('option', materialTypeSelection)\n+          .forEach((option) => {\n+            if (option.hasAttribute('disabled')) {\n+              disabled.push(option.textContent!);\n+            } else {\n+              enabled.push(option.textContent!);\n+            }\n+          });\n+\n+    expect(enabled).toEqual([\"Another Pipeline\", \"Package\"]);\n+    expect(disabled).toEqual([\"Git\", \"Mercurial\", \"Subversion\", \"Perforce\", \"Team Foundation Server\", \"SCM\"]);", "originalCommit": "a757a693ce0aa46b8daa458506571baa8813fa76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5Mjc2Ng==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408592766", "bodyText": "Why would you write a test for looping on a list of option? There is no logic here.", "author": "kritika-singh3", "createdAt": "2020-04-15T05:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODMyMw==", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408598323", "bodyText": "The test includes a loop and an a condition. Isn't that logic?\nI mean, its just a good practice to keep the test simple, which reduces the possibility of bugs in the tests itself.", "author": "GaneshSPatil", "createdAt": "2020-04-15T05:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA=="}], "type": "inlineReview"}]}