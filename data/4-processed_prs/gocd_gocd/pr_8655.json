{"pr_number": 8655, "pr_title": "Do not purge the config repo defined structures cache on polled fetch", "pr_createdAt": "2020-10-14T22:17:13Z", "pr_url": "https://github.com/gocd/gocd/pull/8655", "timeline": [{"oid": "bbb36ec14491ec37243bd40cf9e3c6681e96bdb6", "url": "https://github.com/gocd/gocd/commit/bbb36ec14491ec37243bd40cf9e3c6681e96bdb6", "message": "Do not purge the config repo defined structures cache on polled fetch\n\nThis fixes a UI flicker when a config repo widget is expanded. Previously, the\ndefined pipeline structure graph would quickly blank out, then reappear each time\nGoCD fetched config repo data on interval. This was caused by mithril redrawing\nan empty pipeline structures data cache (resulting in an empty graph with a loading\nmessage) followed only milliseconds later by a redraw when data was full again on\nfetch response. On most connections, even those that are relatively slow, this looks\nlike a UI \"glitch\" because it happens so quickly.\n\nEven though the caches were designed to not clear their contents on `invalidate()`\nprecisely to address this issue, it was happening anyway because a new cache object\nwas recreated on each fetch. This commit fixes this by persisting object caches over\nintervals for reuse. Data is still updated when it changes, but no longer flickers\nbecause the widget continues to display stale data while waiting for the API response\nuntil fresh data overwrites it upon response completion.", "committedDate": "2020-10-14T22:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2ODYyOQ==", "url": "https://github.com/gocd/gocd/pull/8655#discussion_r505168629", "bodyText": "Adding another abstraction only because I like the idea of still allowing an explicit empty() if ever needed if subimplementations need to override markStale(). The data field is marked private and would be otherwise inaccessible in typescript.", "author": "marques-work", "createdAt": "2020-10-15T05:15:00Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/cache.ts", "diffHunk": "@@ -88,10 +88,14 @@ export abstract class AbstractObjCache<T> implements ObjectCache<T> {\n   }\n \n   invalidate() {\n-    this.empty();\n+    this.markStale();\n     this.primed = false;\n   }\n \n+  protected markStale() {", "originalCommit": "bbb36ec14491ec37243bd40cf9e3c6681e96bdb6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}