{"pr_number": 7727, "pr_title": "Move rails based pipeline config page to typescript spa", "pr_createdAt": "2020-02-11T12:18:33Z", "pr_url": "https://github.com/gocd/gocd/pull/7727", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1ODA5OQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377658099", "bodyText": "How about: When enabled, provides an option on the pipeline config rails page to use the quick edit SPA.\nCause currently, it does not switch, just shows a button to go to the new SPA!", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:13:17Z", "path": "server/src/main/resources/available.toggles", "diffHunk": "@@ -50,6 +50,11 @@\n       \"key\": \"show_old_comparison_spa\",\n       \"description\": \"Switch to the old comparison SPA. Default is false.\",\n       \"value\": false\n+    },\n+    {\n+      \"key\": \"new_pipeline_config_spa\",\n+      \"description\": \"Switch to the new pipeline edit SPA. Default is false.\",", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MzMyMA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378043320", "bodyText": "Done", "author": "bdpiprava", "createdAt": "2020-02-12T05:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1ODA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1OTk2OQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377659969", "bodyText": "remove this file?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:16:26Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/clicky_pipeline_config/clicky_pipeline_config.ts", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+interface EmbeddedJSON {", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MzM0MQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378043341", "bodyText": "Done", "author": "bdpiprava", "createdAt": "2020-02-12T05:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1OTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MDcxMQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377660711", "bodyText": "use enum type instead of string custom type?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:17:39Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/artifact.ts", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Stream = require(\"mithril/stream\");\n+import {Configurations, PropertyJSON} from \"models/shared/configuration\";\n+\n+type ArtifactType = \"test\" | \"build\" | \"external\";\n+\n+export interface ArtifactJSON {\n+  type: ArtifactType;\n+\n+  // for `test` or `build` type\n+  source?: string;\n+  destination?: string;\n+\n+  // for `external`\n+  artifact_id?: string;\n+  store_id?: string;\n+  configuration?: PropertyJSON[];\n+}\n+\n+export class Artifacts extends Array<Artifact> {\n+  constructor(...artifacts: Artifact[]) {\n+    super(...artifacts);\n+    Object.setPrototypeOf(this, Object.create(Artifacts.prototype));\n+  }\n+\n+  static fromJSON(json: ArtifactJSON[]) {\n+    return new Artifacts(...json.map(Artifact.fromJSON));\n+  }\n+}\n+\n+export abstract class Artifact {\n+  readonly type = Stream<ArtifactType>();\n+\n+  protected constructor(type: ArtifactType) {\n+    this.type(type);\n+  }\n+\n+  static fromJSON(json: ArtifactJSON) {\n+    switch (json.type) {\n+      case \"test\" || \"build\":", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MjgzNw==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377662837", "bodyText": "initialize items with an empty array?\nconstructor(items?: readonly T[] = [])\nThis will avoid the if(items) check in the code", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:21:09Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/nameable_set.ts", "diffHunk": "@@ -24,6 +24,17 @@ export interface Nameable extends Validatable {\n // Specialized Set<T> implementation where member equality is based on only the `name`\n // of the material, and NOT the identity or the structure.\n export class NameableSet<T extends Nameable> extends ValidatableMixin implements Set<T> {\n+  [Symbol.toStringTag]: string = `NameableSet`;\n+  private readonly _members    = new Map<string, T>(); // preserves insertion order\n+\n+  constructor(items?: readonly T[] | null) {", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MDA5OQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378070099", "bodyText": "items?: readonly T[] is still an optional, hence it is needed to check undefined", "author": "bdpiprava", "createdAt": "2020-02-12T07:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MjgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzYzOA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377667638", "bodyText": "why does the PipelineConfigPage accepts different arguments based on which page is rendered?\nTo avoid the complexity, can we create the entire pipeline model and pipeline-page always, regardless of the tab we're on?\nAnd in the route setup, we just set the current-tab information, which will render appropriate content on the SPA.\nWe do not build smaller SPAs for each section of the pipeline config. There is only one SPA for the entire pipeline config. And based on the route, we render the SPA differently.", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:28:51Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/single_page_apps/clicky_pipeline_config.tsx", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import {RoutedSinglePageApp} from \"helpers/spa_base\";\n+import m from \"mithril\";\n+import {PipelineConfigPage} from \"views/pages/clicky_pipeline_config/pipeline_config\";\n+import {EnvironmentVariablesTabContent} from \"views/pages/clicky_pipeline_config/tabs/common/environment_variables_tab_content\";\n+import {GeneralOptionsTabContent} from \"views/pages/clicky_pipeline_config/tabs/pipeline/general_options_tab\";\n+import {MaterialsTabContent} from \"views/pages/clicky_pipeline_config/tabs/pipeline/materials_tab_content\";\n+import {ParametersTabContent} from \"views/pages/clicky_pipeline_config/tabs/pipeline/parameters_tab_content\";\n+import {ProjectManagementTabContent} from \"views/pages/clicky_pipeline_config/tabs/pipeline/project_management_tab_content\";\n+import {StagesTabContent} from \"views/pages/clicky_pipeline_config/tabs/pipeline/stages_tab_content\";\n+import {JobsTabContent} from \"views/pages/clicky_pipeline_config/tabs/stage/jobs_tab_content\";\n+import {StageSettingsTabContent} from \"views/pages/clicky_pipeline_config/tabs/stage/stage_settings_tab_content\";\n+\n+class RedirectToGeneralTab extends PipelineConfigPage<any> {\n+\n+  oninit(vnode: m.Vnode<any, any>) {\n+    const pipelineName = this.getMeta().pipelineName;\n+    m.route.set(\"/\" + pipelineName + \"/general\");\n+  }\n+}\n+\n+export class PipelineConfigSPA extends RoutedSinglePageApp {\n+  constructor() {\n+    super({\n+            \"/\": new RedirectToGeneralTab(),\n+            \"/:pipeline_name/:tab_name\": new PipelineConfigPage(\n+              new GeneralOptionsTabContent(),\n+              new ProjectManagementTabContent(),\n+              new MaterialsTabContent(),\n+              new StagesTabContent(),\n+              new EnvironmentVariablesTabContent(),\n+              new ParametersTabContent()\n+            ),\n+            \"/:pipeline_name/:stage_name/:tab_name\": new PipelineConfigPage(\n+              new StageSettingsTabContent(),\n+              new JobsTabContent(),\n+              new EnvironmentVariablesTabContent()\n+            ),\n+            \"/:pipeline_name/:stage_name/:job_name/:tab_name\": new PipelineConfigPage(new EnvironmentVariablesTabContent())\n+          });", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NTAwOA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378045008", "bodyText": "why does the PipelineConfigPage accepts different arguments based on which page is rendered?\n\nThis is done like this because of RoutedSinglePageApp implementation. According to this it is  entry point for the page and what to render is decided here it self.  Hence we need to decide the routes and component for the route at this level.\n\nTo avoid the complexity, can we create the entire pipeline model and pipeline-page always, regardless of the tab we're on?\n\nYes, that is something I had in mind but did not get time to refactor this piece of code. I was thinking of moving the tabs inside the page and based on route return the list of tabs to render. Take out the fetchData at the entry point to about API calls on route change.\n\nWe do not build smaller SPAs for each section of the pipeline config. There is only one SPA for the entire pipeline config. And based on the route, we render the SPA differently.\n\nAgreed but route needs to be setup at this level based on design constraints.", "author": "bdpiprava", "createdAt": "2020-02-12T05:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Nzg4Nw==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377667887", "bodyText": "just m.Children?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:29:15Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/forms/input_fields.tsx", "diffHunk": "@@ -609,19 +609,22 @@ export class TriStateCheckboxField extends FormField<TriStateCheckbox> {\n }\n \n interface RadioData {\n-  label: string;\n+  label: string | m.Children;", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MDY1OA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378070658", "bodyText": "Done", "author": "bdpiprava", "createdAt": "2020-02-12T07:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Nzg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Nzk3Ng==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377667976", "bodyText": "just m.Children?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:29:22Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/forms/input_fields.tsx", "diffHunk": "@@ -609,19 +609,22 @@ export class TriStateCheckboxField extends FormField<TriStateCheckbox> {\n }\n \n interface RadioData {\n-  label: string;\n+  label: string | m.Children;\n   value: string;\n   helpText?: string;\n+  tooltip?: m.Child;\n }\n \n export interface RadioButtonAttrs extends RestyleAttrs<Styles> {\n-  label?: string;\n+  label?: string | m.Children;", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MDYzMA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378070630", "bodyText": "Done", "author": "bdpiprava", "createdAt": "2020-02-12T07:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Nzk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2ODQ4Nw==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377668487", "bodyText": "Copyright 2020?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:30:08Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/hierarchy/spec/collapsible_tree_spec.tsx", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2019 ThoughtWorks, Inc.", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDY1Ng==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377670656", "bodyText": "what happens if instead of passing this attribute we set it at the top level?\nMeaning, doing <Link data-test-id=\"something\" /> wouldn't set it?\nSomething similar to this.", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:33:31Z", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/link/index.tsx", "diffHunk": "@@ -28,6 +28,7 @@ export interface Attrs {\n   externalLinkIcon?: boolean;\n   onclick?: (e: MouseEvent) => void;\n   title?: string;\n+  dataTestId?: string;", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0Nzk3OA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378047978", "bodyText": "I would prefer dataTestId  over data-test-id as it will provide suggestion in IDE. On top of that not all the components are copying over all attributes", "author": "bdpiprava", "createdAt": "2020-02-12T05:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MzE4NA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377673184", "bodyText": "May be apiAuthenticationHelper::checkPipelineGroupAdminOfPipelineOrGroupInURLUserAnd403?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:37:33Z", "path": "spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/ClickyPipelineConfigController.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.spark.spa;\n+\n+import com.thoughtworks.go.server.service.support.toggle.FeatureToggleService;\n+import com.thoughtworks.go.server.service.support.toggle.Toggles;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.SparkController;\n+import com.thoughtworks.go.spark.spring.SPAAuthenticationHelper;\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.TemplateEngine;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static spark.Spark.*;\n+\n+public class ClickyPipelineConfigController implements SparkController {\n+    private final SPAAuthenticationHelper authenticationHelper;\n+    private final FeatureToggleService featureToggleService;\n+    private final TemplateEngine engine;\n+\n+    public ClickyPipelineConfigController(SPAAuthenticationHelper authenticationHelper, FeatureToggleService featureToggleService, TemplateEngine engine) {\n+        this.authenticationHelper = authenticationHelper;\n+        this.featureToggleService = featureToggleService;\n+        this.engine = engine;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.PipelineConfig.SPA_BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(Routes.PipelineConfig.NAME + \"/edit\", authenticationHelper::checkAdminUserAnd403);", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTI2NA==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r378079264", "bodyText": "Done", "author": "bdpiprava", "createdAt": "2020-02-12T07:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MzE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NDY3Ng==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377674676", "bodyText": "Wouldn't we get this information on the SPA from m.route.get?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:39:50Z", "path": "spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/ClickyPipelineConfigController.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.spark.spa;\n+\n+import com.thoughtworks.go.server.service.support.toggle.FeatureToggleService;\n+import com.thoughtworks.go.server.service.support.toggle.Toggles;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.SparkController;\n+import com.thoughtworks.go.spark.spring.SPAAuthenticationHelper;\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.TemplateEngine;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static spark.Spark.*;\n+\n+public class ClickyPipelineConfigController implements SparkController {\n+    private final SPAAuthenticationHelper authenticationHelper;\n+    private final FeatureToggleService featureToggleService;\n+    private final TemplateEngine engine;\n+\n+    public ClickyPipelineConfigController(SPAAuthenticationHelper authenticationHelper, FeatureToggleService featureToggleService, TemplateEngine engine) {\n+        this.authenticationHelper = authenticationHelper;\n+        this.featureToggleService = featureToggleService;\n+        this.engine = engine;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.PipelineConfig.SPA_BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(Routes.PipelineConfig.NAME + \"/edit\", authenticationHelper::checkAdminUserAnd403);\n+            get(Routes.PipelineConfig.NAME + \"/edit\", this::index, engine);\n+        });\n+    }\n+\n+    public ModelAndView index(Request request, Response response) {\n+        if (!featureToggleService.isToggleOn(Toggles.NEW_PIPELINE_CONFIG_SPA)) {\n+            throw authenticationHelper.renderNotFoundResponse(\"The page you are looking for is not found.\");\n+        }\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Map<Object, Object> object = new HashMap<>() {{\n+            put(\"viewTitle\", \"Pipeline\");\n+            put(\"meta\", meta(pipelineName));\n+        }};\n+        return new ModelAndView(object, null);\n+    }\n+\n+    private Map<String, Object> meta(String pipelineName) {\n+        final Map<String, Object> meta = new HashMap<>();\n+        meta.put(\"pipelineName\", pipelineName);", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NTAyOQ==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377675029", "bodyText": "I am okay keeping the meta as is, as we will be required to add some more information.", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NDY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjA1Mw==", "url": "https://github.com/gocd/gocd/pull/7727#discussion_r377676053", "bodyText": "Also, Should we come up with a better name for this controller and the SPA?", "author": "GaneshSPatil", "createdAt": "2020-02-11T14:41:52Z", "path": "spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/ClickyPipelineConfigController.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.spark.spa;\n+\n+import com.thoughtworks.go.server.service.support.toggle.FeatureToggleService;\n+import com.thoughtworks.go.server.service.support.toggle.Toggles;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.SparkController;\n+import com.thoughtworks.go.spark.spring.SPAAuthenticationHelper;\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.TemplateEngine;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static spark.Spark.*;\n+\n+public class ClickyPipelineConfigController implements SparkController {\n+    private final SPAAuthenticationHelper authenticationHelper;\n+    private final FeatureToggleService featureToggleService;\n+    private final TemplateEngine engine;\n+\n+    public ClickyPipelineConfigController(SPAAuthenticationHelper authenticationHelper, FeatureToggleService featureToggleService, TemplateEngine engine) {", "originalCommit": "41bc1b80a93060d490ea553d710fd26bba6930ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8af554b9087618caae0abb256691c0a65ea92146", "url": "https://github.com/gocd/gocd/commit/8af554b9087618caae0abb256691c0a65ea92146", "message": "Updated license year in lincense header on file", "committedDate": "2020-02-12T05:09:56Z", "type": "forcePushed"}, {"oid": "db458013cd43840b2e8b93c272465fd1fbb05095", "url": "https://github.com/gocd/gocd/commit/db458013cd43840b2e8b93c272465fd1fbb05095", "message": "Updated license year in lincense header on file", "committedDate": "2020-02-12T05:31:22Z", "type": "forcePushed"}, {"oid": "1825ef40f7268c7bd379197738ab2c8b728ff0f5", "url": "https://github.com/gocd/gocd/commit/1825ef40f7268c7bd379197738ab2c8b728ff0f5", "message": "Initial version of pipeline config spa", "committedDate": "2020-02-14T04:25:26Z", "type": "commit"}, {"oid": "66d5516e65ee1adf926cc1fcf675ddea62105821", "url": "https://github.com/gocd/gocd/commit/66d5516e65ee1adf926cc1fcf675ddea62105821", "message": "Add spa link on old pipeline and template edit page when toggle is on", "committedDate": "2020-02-14T04:25:26Z", "type": "commit"}, {"oid": "a53e7eca724698d1d203a053a57ae03914958412", "url": "https://github.com/gocd/gocd/commit/a53e7eca724698d1d203a053a57ae03914958412", "message": "Always serialize approval attribute allow_only_on_success", "committedDate": "2020-02-14T04:25:26Z", "type": "commit"}, {"oid": "3b64d86828bc41aa753c135dba161ac26d98661d", "url": "https://github.com/gocd/gocd/commit/3b64d86828bc41aa753c135dba161ac26d98661d", "message": "Fixed jsx auto suggestion issue", "committedDate": "2020-02-14T04:25:26Z", "type": "commit"}, {"oid": "7e1df4b0f40f201eaa3fc3e05f65558992c9fe36", "url": "https://github.com/gocd/gocd/commit/7e1df4b0f40f201eaa3fc3e05f65558992c9fe36", "message": "Sanitized pipeline config models", "committedDate": "2020-02-14T04:25:26Z", "type": "commit"}, {"oid": "1efe62aa4889d8d6b3550ea9d6a72a4783943457", "url": "https://github.com/gocd/gocd/commit/1efe62aa4889d8d6b3550ea9d6a72a4783943457", "message": "Initial version of collapsible tree component", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "fc6475935201cf741f572845b35fbd89ce0a7800", "url": "https://github.com/gocd/gocd/commit/fc6475935201cf741f572845b35fbd89ce0a7800", "message": "Navigation panel for pipeline config", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "d06e02198185907a07e5aa610c903f19486d1a1e", "url": "https://github.com/gocd/gocd/commit/d06e02198185907a07e5aa610c903f19486d1a1e", "message": "Render steps on top of the tabs", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "340916ab97bb19806b65ee5aa24e07b5e189da0d", "url": "https://github.com/gocd/gocd/commit/340916ab97bb19806b65ee5aa24e07b5e189da0d", "message": "Added pipeline settings general tab content", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "a3180e32a837cd58fa0f60148865c8c03391bfa3", "url": "https://github.com/gocd/gocd/commit/a3180e32a837cd58fa0f60148865c8c03391bfa3", "message": "Added environment tab content", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "2d8a28ab29c173536154a97e4e666b85d5149de3", "url": "https://github.com/gocd/gocd/commit/2d8a28ab29c173536154a97e4e666b85d5149de3", "message": "Render tabs", "committedDate": "2020-02-14T04:25:27Z", "type": "commit"}, {"oid": "a8e894677322658be91008c9fe1ce17b8caa0529", "url": "https://github.com/gocd/gocd/commit/a8e894677322658be91008c9fe1ce17b8caa0529", "message": "Adding parameters tab content", "committedDate": "2020-02-14T04:25:28Z", "type": "commit"}, {"oid": "d96ddabb78714bd991cc099673af2915fe5d5db5", "url": "https://github.com/gocd/gocd/commit/d96ddabb78714bd991cc099673af2915fe5d5db5", "message": "Adding material tab content", "committedDate": "2020-02-14T04:25:28Z", "type": "commit"}, {"oid": "c2c517a5ae741963029557ffbe8a7e51dc596b92", "url": "https://github.com/gocd/gocd/commit/c2c517a5ae741963029557ffbe8a7e51dc596b92", "message": "Adding stages tab content", "committedDate": "2020-02-14T04:25:28Z", "type": "commit"}, {"oid": "b27e1545c3e350e3eb9cf1a9330404416ba91a70", "url": "https://github.com/gocd/gocd/commit/b27e1545c3e350e3eb9cf1a9330404416ba91a70", "message": "Removed extra padding from drag icon", "committedDate": "2020-02-14T04:25:28Z", "type": "commit"}, {"oid": "da40a280a30a37d375fce718c451f1dd7428c2b5", "url": "https://github.com/gocd/gocd/commit/da40a280a30a37d375fce718c451f1dd7428c2b5", "message": "Adding stage settings tab to edit stage", "committedDate": "2020-02-14T04:25:28Z", "type": "commit"}, {"oid": "6414dc1efb7e84612a812ded1ef2692c79219a72", "url": "https://github.com/gocd/gocd/commit/6414dc1efb7e84612a812ded1ef2692c79219a72", "message": "Render list of job in stages", "committedDate": "2020-02-14T04:25:29Z", "type": "commit"}, {"oid": "6dd64f4237c6c00599125481e356e37fb47fdfe5", "url": "https://github.com/gocd/gocd/commit/6dd64f4237c6c00599125481e356e37fb47fdfe5", "message": "Removed duplicate environment variable code", "committedDate": "2020-02-14T04:25:29Z", "type": "commit"}, {"oid": "6e2ad66829c1571ad218a94a9d285cefed9d1ce0", "url": "https://github.com/gocd/gocd/commit/6e2ad66829c1571ad218a94a9d285cefed9d1ce0", "message": "Removed unused files", "committedDate": "2020-02-14T04:25:29Z", "type": "commit"}, {"oid": "d000b9d68c763cdfcb1a62980477275531dca10d", "url": "https://github.com/gocd/gocd/commit/d000b9d68c763cdfcb1a62980477275531dca10d", "message": "Updated license year in lincense header on file", "committedDate": "2020-02-14T04:27:17Z", "type": "commit"}, {"oid": "da6cb815fe06c066831965cbe54629f0d0bb2fbd", "url": "https://github.com/gocd/gocd/commit/da6cb815fe06c066831965cbe54629f0d0bb2fbd", "message": "Removed redundant type declaration for label attribute", "committedDate": "2020-02-14T04:27:18Z", "type": "commit"}, {"oid": "976f1a1122bce1fc123551ec69903bddbbf3a5e6", "url": "https://github.com/gocd/gocd/commit/976f1a1122bce1fc123551ec69903bddbbf3a5e6", "message": "Allow group admin to edit pipeline", "committedDate": "2020-02-14T04:27:18Z", "type": "commit"}, {"oid": "f06d2eb32959785fa0e7fc0dda3eb5851713246a", "url": "https://github.com/gocd/gocd/commit/f06d2eb32959785fa0e7fc0dda3eb5851713246a", "message": "Removing unused code written as part of pipeline config UI/UX improvement", "committedDate": "2020-02-14T04:27:18Z", "type": "commit"}, {"oid": "5c0a7e5b88373f1321d66868536aa6fad59e009a", "url": "https://github.com/gocd/gocd/commit/5c0a7e5b88373f1321d66868536aa6fad59e009a", "message": "Changed artifact type to enum", "committedDate": "2020-02-14T04:27:18Z", "type": "commit"}, {"oid": "f8c5f6cd4c3727b9819bfc54c467d477b5032094", "url": "https://github.com/gocd/gocd/commit/f8c5f6cd4c3727b9819bfc54c467d477b5032094", "message": "Allow adding tasks to job", "committedDate": "2020-02-14T04:27:18Z", "type": "commit"}, {"oid": "4b3b9a5b29c6e213636e707058e2c7e72bc65e12", "url": "https://github.com/gocd/gocd/commit/4b3b9a5b29c6e213636e707058e2c7e72bc65e12", "message": "WIP: Stage permission configuration", "committedDate": "2020-02-14T04:27:19Z", "type": "commit"}, {"oid": "4b3b9a5b29c6e213636e707058e2c7e72bc65e12", "url": "https://github.com/gocd/gocd/commit/4b3b9a5b29c6e213636e707058e2c7e72bc65e12", "message": "WIP: Stage permission configuration", "committedDate": "2020-02-14T04:27:19Z", "type": "forcePushed"}, {"oid": "1225cffbe973acb870589e39f1864d1c53843132", "url": "https://github.com/gocd/gocd/commit/1225cffbe973acb870589e39f1864d1c53843132", "message": "Update stage_spec.ts", "committedDate": "2020-02-18T07:02:03Z", "type": "commit"}, {"oid": "e571661ca8abe6ccac78c21c579b9a45f60b6a90", "url": "https://github.com/gocd/gocd/commit/e571661ca8abe6ccac78c21c579b9a45f60b6a90", "message": "Update stage.ts", "committedDate": "2020-02-18T07:02:52Z", "type": "commit"}]}