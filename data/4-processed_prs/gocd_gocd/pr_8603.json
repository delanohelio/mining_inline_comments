{"pr_number": 8603, "pr_title": "Update SCM API and related SPAs", "pr_createdAt": "2020-09-29T04:57:09Z", "pr_url": "https://github.com/gocd/gocd/pull/8603", "timeline": [{"oid": "ea0f3d178c71dd60356985b3c541b46e8c556d3f", "url": "https://github.com/gocd/gocd/commit/ea0f3d178c71dd60356985b3c541b46e8c556d3f", "message": "Update materials spa\n - add origin info to internal materials api for plugin materials\n - disable edit option for plugin material when defined in config repo", "committedDate": "2020-09-29T05:22:53Z", "type": "forcePushed"}, {"oid": "57f540378d650e4619e07f89638d246944e043ea", "url": "https://github.com/gocd/gocd/commit/57f540378d650e4619e07f89638d246944e043ea", "message": "Update materials spa\n - add origin info to internal materials api for plugin materials\n - disable edit option for plugin material when defined in config repo", "committedDate": "2020-09-29T09:55:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4Mjc2Mg==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r497982762", "bodyText": "I don't think we should be sharing representers between API versions. It's ok for each version to have it's own set of shared representers.", "author": "maheshp", "createdAt": "2020-10-01T04:53:21Z", "path": "api/api-base/src/main/java/com/thoughtworks/go/api/representers/configorigin/ConfigRepoOriginRepresenter.java", "diffHunk": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.thoughtworks.go.apiv9.admin.shared.representers.configorigin;\n+package com.thoughtworks.go.api.representers.configorigin;", "originalCommit": "6a9ca2560b144d0a25dcc13c740f18e440b8d6ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4Mzc1NA==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r497983754", "bodyText": "IMO, there are certain entities for which we have a fixed representation for all APIs. E.g. environment variable or plugin configuration property. Describing origin is also one such thing.\nHence, moving the same to api-base is a better option.", "author": "kritika-singh3", "createdAt": "2020-10-01T04:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4Mjc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4NTgyOA==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r497985828", "bodyText": "I understand they have a same representation hence they are in a common place. We keep bumping up versions often and also delete the older versions post deprecation. I think getting into a mode of using representers across multiple versions would lead to confusion and cleaning up the representers would be hard as well.", "author": "maheshp", "createdAt": "2020-10-01T05:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4Mjc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2MjkxMA==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r498062910", "bodyText": "Done.", "author": "kritika-singh3", "createdAt": "2020-10-01T08:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4Mjc2Mg=="}], "type": "inlineReview"}, {"oid": "c970b8753018742baec9934166f829abce5328cc", "url": "https://github.com/gocd/gocd/commit/c970b8753018742baec9934166f829abce5328cc", "message": "Update materials spa\n - add origin info to internal materials api for plugin materials\n - disable edit option for plugin material when defined in config repo", "committedDate": "2020-10-01T08:13:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDMzOQ==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r499350339", "bodyText": "How are we handling updates to SCM's from ConfigRepo?", "author": "maheshp", "createdAt": "2020-10-05T05:18:53Z", "path": "api/api-scms-v4/src/main/java/com/thoughtworks/go/apiv4/scms/SCMControllerV4.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv4.scms;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.CrudController;\n+import com.thoughtworks.go.api.base.OutputWriter;\n+import com.thoughtworks.go.api.representers.JsonReader;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.api.util.GsonTransformer;\n+import com.thoughtworks.go.apiv4.scms.representers.SCMRepresenter;\n+import com.thoughtworks.go.apiv4.scms.representers.SCMsRepresenter;\n+import com.thoughtworks.go.apiv4.scms.representers.ScmUsageRepresenter;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigs;\n+import com.thoughtworks.go.config.exceptions.EntityType;\n+import com.thoughtworks.go.domain.scm.SCM;\n+import com.thoughtworks.go.domain.scm.SCMs;\n+import com.thoughtworks.go.server.service.EntityHashingService;\n+import com.thoughtworks.go.server.service.GoConfigService;\n+import com.thoughtworks.go.server.service.materials.PluggableScmService;\n+import com.thoughtworks.go.server.service.result.HttpLocalizedOperationResult;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import com.thoughtworks.go.util.Pair;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static com.thoughtworks.go.api.util.HaltApiResponses.*;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static spark.Spark.*;\n+\n+@Component\n+public class SCMControllerV4 extends ApiController implements SparkSpringController, CrudController<SCM> {\n+\n+    public static final String MATERIAL_NAME = \"material_name\";\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final PluggableScmService pluggableScmService;\n+    private final EntityHashingService entityHashingService;\n+    private final GoConfigService goConfigService;\n+\n+    @Autowired\n+    public SCMControllerV4(ApiAuthenticationHelper apiAuthenticationHelper, PluggableScmService pluggableScmService, EntityHashingService entityHashingService, GoConfigService goConfigService) {\n+        super(ApiVersion.v4);\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.pluggableScmService = pluggableScmService;\n+        this.entityHashingService = entityHashingService;\n+        this.goConfigService = goConfigService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.SCM.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"\", mimeType, this::verifyContentType);\n+            before(\"/*\", mimeType, this::verifyContentType);\n+\n+            before(\"\", this.mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n+            before(\"/*\", this.mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n+\n+            get(\"\", mimeType, this::index);\n+            post(\"\", mimeType, this::create);\n+            get(Routes.SCM.ID, mimeType, this::show);\n+            put(Routes.SCM.ID, mimeType, this::update);\n+            delete(Routes.SCM.ID, mimeType, this::destroy);\n+            get(Routes.SCM.USAGES, mimeType, this::getUsages);\n+        });\n+    }\n+\n+    public String index(Request request, Response response) throws IOException {\n+        SCMs scms = pluggableScmService.listAllScms();\n+\n+        String etag = entityHashingService.hashForEntity(scms);\n+        if (fresh(request, etag)) {\n+            return notModified(response);\n+        }\n+        setEtagHeader(response, etag);\n+        return writerForTopLevelObject(request, response, writer -> SCMsRepresenter.toJSON(writer, scms));\n+    }\n+\n+    public String show(Request request, Response response) throws IOException {\n+        String materialName = request.params(MATERIAL_NAME);\n+\n+        SCM scm = fetchEntityFromConfig(materialName);\n+\n+        String etag = entityHashingService.hashForEntity(scm);\n+        if (fresh(request, etag)) {\n+            return notModified(response);\n+        }\n+        setEtagHeader(response, etag);\n+        return writerForTopLevelObject(request, response, writer -> SCMRepresenter.toJSON(writer, scm));\n+    }\n+\n+    public String create(Request request, Response response) {\n+        SCM scmFromRequest = buildEntityFromRequestBody(request, false);\n+\n+        scmFromRequest.ensureIdExists();\n+\n+        haltIfEntityWithSameNameExists(scmFromRequest);\n+        haltIfEntityWithSameIDExists(scmFromRequest);\n+\n+        HttpLocalizedOperationResult result = new HttpLocalizedOperationResult();\n+        pluggableScmService.createPluggableScmMaterial(currentUsername(), scmFromRequest, result);\n+\n+        return handleCreateOrUpdateResponse(request, response, scmFromRequest, result);\n+    }\n+\n+    public String update(Request request, Response response) {", "originalCommit": "892f288c944394a088d59b5c18330ac37c296fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3OTUyNQ==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r499379525", "bodyText": "Previously it sends 404 saying that the said scm id was not found.\nUpdated it to return 422 with the message saying it is defined in the config repo", "author": "kritika-singh3", "createdAt": "2020-10-05T07:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDU4NA==", "url": "https://github.com/gocd/gocd/pull/8603#discussion_r499350584", "bodyText": "Same as above, how is delete to SCM's from ConfigRepo handled?", "author": "maheshp", "createdAt": "2020-10-05T05:20:06Z", "path": "api/api-scms-v4/src/main/java/com/thoughtworks/go/apiv4/scms/SCMControllerV4.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv4.scms;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.CrudController;\n+import com.thoughtworks.go.api.base.OutputWriter;\n+import com.thoughtworks.go.api.representers.JsonReader;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.api.util.GsonTransformer;\n+import com.thoughtworks.go.apiv4.scms.representers.SCMRepresenter;\n+import com.thoughtworks.go.apiv4.scms.representers.SCMsRepresenter;\n+import com.thoughtworks.go.apiv4.scms.representers.ScmUsageRepresenter;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigs;\n+import com.thoughtworks.go.config.exceptions.EntityType;\n+import com.thoughtworks.go.domain.scm.SCM;\n+import com.thoughtworks.go.domain.scm.SCMs;\n+import com.thoughtworks.go.server.service.EntityHashingService;\n+import com.thoughtworks.go.server.service.GoConfigService;\n+import com.thoughtworks.go.server.service.materials.PluggableScmService;\n+import com.thoughtworks.go.server.service.result.HttpLocalizedOperationResult;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import com.thoughtworks.go.util.Pair;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static com.thoughtworks.go.api.util.HaltApiResponses.*;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static spark.Spark.*;\n+\n+@Component\n+public class SCMControllerV4 extends ApiController implements SparkSpringController, CrudController<SCM> {\n+\n+    public static final String MATERIAL_NAME = \"material_name\";\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final PluggableScmService pluggableScmService;\n+    private final EntityHashingService entityHashingService;\n+    private final GoConfigService goConfigService;\n+\n+    @Autowired\n+    public SCMControllerV4(ApiAuthenticationHelper apiAuthenticationHelper, PluggableScmService pluggableScmService, EntityHashingService entityHashingService, GoConfigService goConfigService) {\n+        super(ApiVersion.v4);\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.pluggableScmService = pluggableScmService;\n+        this.entityHashingService = entityHashingService;\n+        this.goConfigService = goConfigService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.SCM.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"\", mimeType, this::verifyContentType);\n+            before(\"/*\", mimeType, this::verifyContentType);\n+\n+            before(\"\", this.mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n+            before(\"/*\", this.mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n+\n+            get(\"\", mimeType, this::index);\n+            post(\"\", mimeType, this::create);\n+            get(Routes.SCM.ID, mimeType, this::show);\n+            put(Routes.SCM.ID, mimeType, this::update);\n+            delete(Routes.SCM.ID, mimeType, this::destroy);\n+            get(Routes.SCM.USAGES, mimeType, this::getUsages);\n+        });\n+    }\n+\n+    public String index(Request request, Response response) throws IOException {\n+        SCMs scms = pluggableScmService.listAllScms();\n+\n+        String etag = entityHashingService.hashForEntity(scms);\n+        if (fresh(request, etag)) {\n+            return notModified(response);\n+        }\n+        setEtagHeader(response, etag);\n+        return writerForTopLevelObject(request, response, writer -> SCMsRepresenter.toJSON(writer, scms));\n+    }\n+\n+    public String show(Request request, Response response) throws IOException {\n+        String materialName = request.params(MATERIAL_NAME);\n+\n+        SCM scm = fetchEntityFromConfig(materialName);\n+\n+        String etag = entityHashingService.hashForEntity(scm);\n+        if (fresh(request, etag)) {\n+            return notModified(response);\n+        }\n+        setEtagHeader(response, etag);\n+        return writerForTopLevelObject(request, response, writer -> SCMRepresenter.toJSON(writer, scm));\n+    }\n+\n+    public String create(Request request, Response response) {\n+        SCM scmFromRequest = buildEntityFromRequestBody(request, false);\n+\n+        scmFromRequest.ensureIdExists();\n+\n+        haltIfEntityWithSameNameExists(scmFromRequest);\n+        haltIfEntityWithSameIDExists(scmFromRequest);\n+\n+        HttpLocalizedOperationResult result = new HttpLocalizedOperationResult();\n+        pluggableScmService.createPluggableScmMaterial(currentUsername(), scmFromRequest, result);\n+\n+        return handleCreateOrUpdateResponse(request, response, scmFromRequest, result);\n+    }\n+\n+    public String update(Request request, Response response) {\n+        final String materialName = request.params(MATERIAL_NAME);\n+        final SCM existingSCM = fetchEntityFromConfig(materialName);\n+        final SCM scmFromRequest = buildEntityFromRequestBody(request);\n+\n+        if (isRenameAttempt(existingSCM.getId(), scmFromRequest.getId())\n+                || isRenameAttempt(existingSCM.getName(), scmFromRequest.getName())) {\n+            throw haltBecauseRenameOfEntityIsNotSupported(getEntityType().getEntityNameLowerCase());\n+        }\n+\n+        if (isPutRequestStale(request, existingSCM)) {\n+            throw haltBecauseEtagDoesNotMatch(getEntityType().getEntityNameLowerCase(), existingSCM.getId());\n+        }\n+\n+        final HttpLocalizedOperationResult operationResult = new HttpLocalizedOperationResult();\n+        pluggableScmService.updatePluggableScmMaterial(currentUsername(), scmFromRequest, operationResult, getIfMatch(request));\n+\n+        return handleCreateOrUpdateResponse(request, response, scmFromRequest, operationResult);\n+    }\n+\n+    public String destroy(Request request, Response response) throws IOException {", "originalCommit": "892f288c944394a088d59b5c18330ac37c296fd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d89734804f59c68ed8ccb9e68400ca274c1f02e4", "url": "https://github.com/gocd/gocd/commit/d89734804f59c68ed8ccb9e68400ca274c1f02e4", "message": "Upgrade SCM API to v4\n - add origin information", "committedDate": "2020-10-05T05:57:43Z", "type": "commit"}, {"oid": "39622c2ef3e52339a4545bef66bab2272aee4e61", "url": "https://github.com/gocd/gocd/commit/39622c2ef3e52339a4545bef66bab2272aee4e61", "message": "Update Pluggable SCM SPA\n\n - disable edit/clone/delete operations if scm is defined in config repo\n - add a flash message when edit is tried via mithril routing", "committedDate": "2020-10-05T05:57:43Z", "type": "commit"}, {"oid": "c1b9d69e61c33f7a4ab3e138a5a2c2ba0a3e5eab", "url": "https://github.com/gocd/gocd/commit/c1b9d69e61c33f7a4ab3e138a5a2c2ba0a3e5eab", "message": "Update materials spa\n - add origin info to internal materials api for plugin materials\n - disable edit option for plugin material when defined in config repo", "committedDate": "2020-10-05T05:57:43Z", "type": "commit"}, {"oid": "1ac6b6796612f5c504eb3a1c265ab7711521271a", "url": "https://github.com/gocd/gocd/commit/1ac6b6796612f5c504eb3a1c265ab7711521271a", "message": "Send 422 for update/delete of an scm when defined remotely", "committedDate": "2020-10-05T06:59:27Z", "type": "commit"}, {"oid": "1ac6b6796612f5c504eb3a1c265ab7711521271a", "url": "https://github.com/gocd/gocd/commit/1ac6b6796612f5c504eb3a1c265ab7711521271a", "message": "Send 422 for update/delete of an scm when defined remotely", "committedDate": "2020-10-05T06:59:27Z", "type": "forcePushed"}]}