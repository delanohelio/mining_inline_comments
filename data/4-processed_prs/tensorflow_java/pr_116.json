{"pr_number": 116, "pr_title": "Add initializers", "pr_createdAt": "2020-09-20T15:44:31Z", "pr_url": "https://github.com/tensorflow/java/pull/116", "timeline": [{"oid": "ef0ce67a2e79628380729cf16fb0cd4d99cbe6a3", "url": "https://github.com/tensorflow/java/commit/ef0ce67a2e79628380729cf16fb0cd4d99cbe6a3", "message": "Initial checkin of Keras Optimzers and helper classes.\nFixed dependencies in pom.xml", "committedDate": "2020-07-28T20:26:34Z", "type": "commit"}, {"oid": "9c113a7e6dfcc98c0e57bede8dcb46de56125320", "url": "https://github.com/tensorflow/java/commit/9c113a7e6dfcc98c0e57bede8dcb46de56125320", "message": "Added static final NAME to replace hardcoded String in the create method. This allows the NAME to be used elsewhere instead of hardcoding the string.", "committedDate": "2020-08-20T12:12:27Z", "type": "commit"}, {"oid": "824d4872257a5a614a53c7dff579748b819c800e", "url": "https://github.com/tensorflow/java/commit/824d4872257a5a614a53c7dff579748b819c800e", "message": "Changed of method to use the DataType NAME attribute rather than hardcoding the string.\nadded methods isFloating(), isInteger(), isNUmeric(), isBoolean() and isString()", "committedDate": "2020-08-20T12:14:26Z", "type": "commit"}, {"oid": "07a83a5aef5a25f385aa762e3bb929e22c8052e3", "url": "https://github.com/tensorflow/java/commit/07a83a5aef5a25f385aa762e3bb929e22c8052e3", "message": "Added method WriteFieldWithInitializer to output a \"final static String OP_NAME\" to each generated operation.", "committedDate": "2020-08-20T12:17:40Z", "type": "commit"}, {"oid": "3d26831bab64cc4fdd2340403cafa229f0fb7099", "url": "https://github.com/tensorflow/java/commit/3d26831bab64cc4fdd2340403cafa229f0fb7099", "message": "Added tf.nn.softmaxCrossEntropyWitLogits() and tf.nn.raw.softmaxCrossEntropyWitLogits()\nAdded tf.nn.sparesSoftmaxCrossEntropyWithLogits() and\ntf.nn.raw.sparesSoftmaxCrossEntropyWithLogits()\n\nAdded tf.nn.sigmoidCrossEntropyWithLogits()", "committedDate": "2020-08-20T13:52:13Z", "type": "commit"}, {"oid": "11cda5fde99a6bec21fb04ed1465934ec1889485", "url": "https://github.com/tensorflow/java/commit/11cda5fde99a6bec21fb04ed1465934ec1889485", "message": "Moved SoftmaxCrossEntropyWithLogits and  SparseSoftmaxCrossEntropyWithLogits to org.tensorflow.op.nn.raw", "committedDate": "2020-08-20T13:58:05Z", "type": "commit"}, {"oid": "9c7dfaa92815bf85cbf97febcbb61e1aaf707142", "url": "https://github.com/tensorflow/java/commit/9c7dfaa92815bf85cbf97febcbb61e1aaf707142", "message": "Generated classes now have public static final String OP_NAME = \"XXXXXXXX\";", "committedDate": "2020-08-20T14:00:25Z", "type": "commit"}, {"oid": "84f49db3fb6c085befabfcb8356ab77589facf5d", "url": "https://github.com/tensorflow/java/commit/84f49db3fb6c085befabfcb8356ab77589facf5d", "message": "Generated classes now have public static final String OP_NAME = \"XXXXXXXX\";", "committedDate": "2020-08-20T14:03:38Z", "type": "commit"}, {"oid": "208b84a1a09d38ab9821d66572c1328326685c5a", "url": "https://github.com/tensorflow/java/commit/208b84a1a09d38ab9821d66572c1328326685c5a", "message": "fix dependencies for other Tensorflow Java modules", "committedDate": "2020-08-20T14:42:22Z", "type": "commit"}, {"oid": "39131619f3a4c970f5f62dacdbaa93ac3f9bf996", "url": "https://github.com/tensorflow/java/commit/39131619f3a4c970f5f62dacdbaa93ac3f9bf996", "message": "formatting fix", "committedDate": "2020-08-20T14:46:20Z", "type": "commit"}, {"oid": "b5a7c0f9f54acf1fb0f57003027aa0843ae67c82", "url": "https://github.com/tensorflow/java/commit/b5a7c0f9f54acf1fb0f57003027aa0843ae67c82", "message": "Fix ctors with name to properly pass the name to the the super ctor.", "committedDate": "2020-08-20T14:48:23Z", "type": "commit"}, {"oid": "fcba0a525d4712fca5210db71c141bc1bce87307", "url": "https://github.com/tensorflow/java/commit/fcba0a525d4712fca5210db71c141bc1bce87307", "message": "change asserts to IllegalArgumentException\nfix javadoc, fix casts", "committedDate": "2020-08-20T17:04:27Z", "type": "commit"}, {"oid": "960cfc3ca4e010fca3bd549df6d16a17fb0b22bc", "url": "https://github.com/tensorflow/java/commit/960cfc3ca4e010fca3bd549df6d16a17fb0b22bc", "message": "change asserts to IllegalArgumentException", "committedDate": "2020-08-20T17:05:22Z", "type": "commit"}, {"oid": "d37298a6b9dcb206cdff985b96e340f7f93a075c", "url": "https://github.com/tensorflow/java/commit/d37298a6b9dcb206cdff985b96e340f7f93a075c", "message": "Moved back to tests", "committedDate": "2020-08-20T17:06:58Z", "type": "commit"}, {"oid": "c68812cc9c8815b0ea186f273748078c4907fbaa", "url": "https://github.com/tensorflow/java/commit/c68812cc9c8815b0ea186f273748078c4907fbaa", "message": "Moved SoftmaxCrossEntropyWithLogits.java and SparseSoftmaxCrossEntropyWithLogits.java to nn.raw,\nadded new versions of these to NnOps", "committedDate": "2020-08-20T17:08:44Z", "type": "commit"}, {"oid": "6b8eb26edafc54a70d6c5a1bd9e21cacf3ac04e7", "url": "https://github.com/tensorflow/java/commit/6b8eb26edafc54a70d6c5a1bd9e21cacf3ac04e7", "message": "Deleted files that are not necessary yet", "committedDate": "2020-08-20T17:50:01Z", "type": "commit"}, {"oid": "6515c248ddd8f6911f267bee0972d44ca20f0038", "url": "https://github.com/tensorflow/java/commit/6515c248ddd8f6911f267bee0972d44ca20f0038", "message": "Added nn.raw group for softmaxCrossEntropyWithLogits() and sparseSoftmaxCrossEntropyWithLogits()", "committedDate": "2020-08-20T17:51:04Z", "type": "commit"}, {"oid": "76d0fe553559176a33040b4bdb8e07d8e033b08e", "url": "https://github.com/tensorflow/java/commit/76d0fe553559176a33040b4bdb8e07d8e033b08e", "message": "Added nn.raw group for softmaxCrossEntropyWithLogits() and sparseSoftmaxCrossEntropyWithLogits()", "committedDate": "2020-08-20T18:30:16Z", "type": "commit"}, {"oid": "d2201df3a78e82c79b142fc7d7c3a461afa63444", "url": "https://github.com/tensorflow/java/commit/d2201df3a78e82c79b142fc7d7c3a461afa63444", "message": "Merge branch 'master' into master", "committedDate": "2020-08-20T19:43:35Z", "type": "commit"}, {"oid": "ab379d1b49d90bb42c8654f2e0cf0c258e0d3406", "url": "https://github.com/tensorflow/java/commit/ab379d1b49d90bb42c8654f2e0cf0c258e0d3406", "message": "Refactor NN into individual operations under org.tensorflow.op.nn. Fix JavaDoc. Change from snake case to camel case.", "committedDate": "2020-09-03T14:21:27Z", "type": "commit"}, {"oid": "889d67e11ec7154605a0cb235097e30c53a5704a", "url": "https://github.com/tensorflow/java/commit/889d67e11ec7154605a0cb235097e30c53a5704a", "message": "Refactor NN into individual operations under org.tensorflow.op.nn. Fix JavaDoc. Change from snake case to camel case.", "committedDate": "2020-09-03T14:21:33Z", "type": "commit"}, {"oid": "515b799bf793fbb38a47b5aa92d948dad052187b", "url": "https://github.com/tensorflow/java/commit/515b799bf793fbb38a47b5aa92d948dad052187b", "message": "Reformatted code", "committedDate": "2020-09-03T14:34:57Z", "type": "commit"}, {"oid": "5a9fe3747b730cbfb28b544bcac3aeb2077499a2", "url": "https://github.com/tensorflow/java/commit/5a9fe3747b730cbfb28b544bcac3aeb2077499a2", "message": "Added sub scope", "committedDate": "2020-09-03T14:35:19Z", "type": "commit"}, {"oid": "8d21dd7266e48a4df36813ed3fb9dc1adee58915", "url": "https://github.com/tensorflow/java/commit/8d21dd7266e48a4df36813ed3fb9dc1adee58915", "message": "Miscellaneous fixes based on review comments.", "committedDate": "2020-09-03T16:30:10Z", "type": "commit"}, {"oid": "4c3cc78a999505240be35040b8865d86b955e1af", "url": "https://github.com/tensorflow/java/commit/4c3cc78a999505240be35040b8865d86b955e1af", "message": "Fixed op_generator.cc to remove a spurious new line in the generated Java files for some Ops. This also  resulted in new generated  source that are also committed.", "committedDate": "2020-09-03T22:52:11Z", "type": "commit"}, {"oid": "44f530f292fdba34164de696fb454b30108064d3", "url": "https://github.com/tensorflow/java/commit/44f530f292fdba34164de696fb454b30108064d3", "message": "Changed back to non-generic Operand until we resolve how to handle generics.", "committedDate": "2020-09-03T22:53:44Z", "type": "commit"}, {"oid": "b8d3ac2d001251c95bd55ed9cd902431108468bd", "url": "https://github.com/tensorflow/java/commit/b8d3ac2d001251c95bd55ed9cd902431108468bd", "message": "Regenerated due to creation of SoftmaxCrossEntropyWithLogits.java,  SigmoidCrossEntropyWithLogits.java, and SparseSoftmaxCrossEntropyWithLogits.java under package org.tensorflow.op.nn in", "committedDate": "2020-09-03T22:55:55Z", "type": "commit"}, {"oid": "c32fc5be951166ffde8d8763dcc99dd7e5879e86", "url": "https://github.com/tensorflow/java/commit/c32fc5be951166ffde8d8763dcc99dd7e5879e86", "message": "change snake case to camel case. format code", "committedDate": "2020-09-07T18:15:30Z", "type": "commit"}, {"oid": "171cd2f4f9878b00e35f3175b0a8c7954ef21f07", "url": "https://github.com/tensorflow/java/commit/171cd2f4f9878b00e35f3175b0a8c7954ef21f07", "message": "clean upd warning,  format code", "committedDate": "2020-09-07T18:38:12Z", "type": "commit"}, {"oid": "e9c3134742e9155e457be157515d67b5c0bb7ac4", "url": "https://github.com/tensorflow/java/commit/e9c3134742e9155e457be157515d67b5c0bb7ac4", "message": "Added Adamax, Ftrl, and Nadam Optimizers. Added Optimizers enum for easy inclusion of a default optimizer. Cleaned up JavaDoc", "committedDate": "2020-09-09T20:14:20Z", "type": "commit"}, {"oid": "5c30a72fa335f338727358b4299e4796a211403d", "url": "https://github.com/tensorflow/java/commit/5c30a72fa335f338727358b4299e4796a211403d", "message": "Removed optimize classes from tensorflow-keras, moved optimizer test cases to framework. Created Tests for GradientDescent and Momentum", "committedDate": "2020-09-09T20:17:16Z", "type": "commit"}, {"oid": "ebefc2ea54b2f3d53b8b8f92912175eac50330d0", "url": "https://github.com/tensorflow/java/commit/ebefc2ea54b2f3d53b8b8f92912175eac50330d0", "message": "Fixed generics", "committedDate": "2020-09-09T20:17:37Z", "type": "commit"}, {"oid": "7915e6309e9db7a536cda24eac8264578cdbfe31", "url": "https://github.com/tensorflow/java/commit/7915e6309e9db7a536cda24eac8264578cdbfe31", "message": "Fixed from Unit test results", "committedDate": "2020-09-09T23:03:09Z", "type": "commit"}, {"oid": "ec4f6790ff666a4c23f60e1b4764874d6167d392", "url": "https://github.com/tensorflow/java/commit/ec4f6790ff666a4c23f60e1b4764874d6167d392", "message": "added @SuppressWarnings(\"unchecked\") on Variable array", "committedDate": "2020-09-09T23:08:41Z", "type": "commit"}, {"oid": "c86d09b74a4a02b173604f206161ed37b804d0a9", "url": "https://github.com/tensorflow/java/commit/c86d09b74a4a02b173604f206161ed37b804d0a9", "message": "Merge pull request #1 from tensorflow/master\n\nSync Clarke fork", "committedDate": "2020-09-18T23:51:10Z", "type": "commit"}, {"oid": "e9cd56a1c2349bec1dd39219a96ee4f3024cb769", "url": "https://github.com/tensorflow/java/commit/e9cd56a1c2349bec1dd39219a96ee4f3024cb769", "message": "Add initializers", "committedDate": "2020-09-20T14:51:34Z", "type": "commit"}, {"oid": "9360efe6be4ca3be14dd817f1a18469092e1207d", "url": "https://github.com/tensorflow/java/commit/9360efe6be4ca3be14dd817f1a18469092e1207d", "message": "Add initializers", "committedDate": "2020-09-20T14:52:05Z", "type": "commit"}, {"oid": "8e28bb569e5f4dec157ce7583c21f007ff7c5ac4", "url": "https://github.com/tensorflow/java/commit/8e28bb569e5f4dec157ce7583c21f007ff7c5ac4", "message": "Remove @author", "committedDate": "2020-09-20T15:08:47Z", "type": "commit"}, {"oid": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "url": "https://github.com/tensorflow/java/commit/33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "message": "Fix javadoc, change name of squeeze to reduce.  Add logic to in reduce to return Shape.unknown if the original shape is already unknown. Added handling of UNKNOWN_SIZE in the actual reduction of the shape.", "committedDate": "2020-09-20T15:38:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU1OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492162558", "bodyText": "If we're casting to a double here why not just store it as a double? We're going to lose some precision from longs whatever, but then we save any boxing and casting overhead.", "author": "Craigacp", "createdAt": "2020-09-21T15:42:57Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Constant.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a constant value.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      Constant&lt;TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.Constant&lt;&gt;(tf, 3f);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The Type for the call operation\n+ */\n+public class Constant<T extends TType> extends BaseInitializer<T> {\n+\n+  private final Number numberValue;\n+  private final Boolean booleanValue;\n+\n+  /**\n+   * Creates an Initializer that generates tensors with a constant value.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param value a number value\n+   */\n+  public Constant(Ops tf, Number value) {\n+    super(tf);\n+    this.numberValue = value;\n+    this.booleanValue = null;\n+  }\n+\n+  /**\n+   * Creates an Initializer that generates tensors with a constant value.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param value a boolean value\n+   */\n+  public Constant(Ops tf, Boolean value) {\n+    super(tf);\n+    this.numberValue = null;\n+    this.booleanValue = value;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!(dtype.isNumeric() || dtype.isBoolean())) {\n+      throw new IllegalArgumentException(\"DataType must be numeric or boolean: \" + dtype.name());\n+    }\n+    if (this.numberValue != null) {\n+      return tf.fill(dims, tf.dtypes.cast(tf.constant(numberValue.doubleValue()), dtype));", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzIxNA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492277214", "bodyText": "The basic requirement is to store either a number(integer + float) or a boolean.  What ever the most efficient way to do that is fine with me.\nOriginally I had it as Number, so it could be set to null, while the Boolean would be set. Vice-versa the other way. I could have a private flag to distinguish the two separate cases.", "author": "JimClarke5", "createdAt": "2020-09-21T18:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0Mzk4OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492343988", "bodyText": "Fair enough.", "author": "Craigacp", "createdAt": "2020-09-21T21:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NTExNg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492345116", "bodyText": "I changed it to long longValue, double doubleValue, boolean booleanValue with an enum\nprivate enum ValueType {\n    LONG, DOUBLE, BOOLEAN\n }\n\nThat way, the integer and double precision is maintained.", "author": "JimClarke5", "createdAt": "2020-09-21T21:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDI1Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492164253", "bodyText": "Why not have a single He class that accepts the distribution directly? Ditto for Glorot.", "author": "Craigacp", "createdAt": "2020-09-21T15:45:21Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/HeUniform.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * He uniform initializer.\n+ * <p>Draws samples from a uniform distribution within <code>[-limit, limit]</code>, where <code>limit = sqrt(6 / fanIn)</code> (fan_in is the number of input units in the weight tensor).</p>\n+ * <p>Examples:\n+ * <pre>\n+ *     HeUniform&lt;TFloat32, TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.HeUniform&lt;&gt;(tf);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ *\n+ * @see <a href=\"https://www.cv-foundation.org/openaccess/content_iccv_2015/html/He_Delving_Deep_into_ICCV_2015_paper.html\">He et al., 2015</a>\n+ */\n+public class HeUniform<T extends TType, U extends TNumber> extends VarianceScaling<T, U> {", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MTg5Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492281893", "bodyText": "Since we are not totally bound to the Keras way, this makes sense to me.\nShould we reconsider, LeCunNormal/LeCunUniform too?", "author": "JimClarke5", "createdAt": "2020-09-21T19:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNzI0OQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492337249", "bodyText": "Also, should we restrict the distribution to TRUNCATED_NORMAL and UNIFORM, and show exception on UNTRUNCATED_NORMAL", "author": "JimClarke5", "createdAt": "2020-09-21T20:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDU4OQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492344589", "bodyText": "Erm, I think that allowing all three enum values seems reasonable (someone might want to try all of them and they aren't incorrect), and yes I'd collapse LeCun as well.", "author": "Craigacp", "createdAt": "2020-09-21T21:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzEwMA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493037100", "bodyText": "Ok", "author": "JimClarke5", "createdAt": "2020-09-22T21:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDk5Mg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492164992", "bodyText": "This check doesn't seem to line up with the exception error message?", "author": "Craigacp", "createdAt": "2020-09-21T15:46:29Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Identity.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates the identity matrix.\n+ * <p>Only usable for generating 2D matrices.</p>\n+ <p>Examples:\n+ * <pre>\n+ *     Identity&lt;TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.Identity&lt;&gt;(tf);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ * @param <T> The TType for the call operation\n+ */\n+public class Identity<T extends TType> extends BaseInitializer<T> {\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Identity(Ops tf) {\n+    super(tf);\n+    this.gain = GAIN_DEFAULT;\n+  }\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Identity Matrix\n+   */\n+  public Identity(Ops tf, double gain) {\n+    super(tf);\n+    this.gain = gain;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isFloating()) {\n+      throw new IllegalArgumentException(\"DataType must be numeric or boolean: \" + dtype.name());", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NjM5MA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492286390", "bodyText": "You're right, it should only be a float.", "author": "JimClarke5", "createdAt": "2020-09-21T19:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NDk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492166108", "bodyText": "Should we just add an op to make an identity matrix next to the Zeros and Ones ops? I feel like it would be pretty useful outside of just this use case.", "author": "Craigacp", "createdAt": "2020-09-21T15:48:11Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Identity.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates the identity matrix.\n+ * <p>Only usable for generating 2D matrices.</p>\n+ <p>Examples:\n+ * <pre>\n+ *     Identity&lt;TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.Identity&lt;&gt;(tf);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ * @param <T> The TType for the call operation\n+ */\n+public class Identity<T extends TType> extends BaseInitializer<T> {\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Identity(Ops tf) {\n+    super(tf);\n+    this.gain = GAIN_DEFAULT;\n+  }\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Identity Matrix\n+   */\n+  public Identity(Ops tf, double gain) {\n+    super(tf);\n+    this.gain = gain;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isFloating()) {\n+      throw new IllegalArgumentException(\"DataType must be numeric or boolean: \" + dtype.name());\n+    }\n+    Shape shape = ShapeUtils.toShape(tf.scope(), dims);\n+    if (shape.numDimensions() != 2) {\n+      throw new IllegalArgumentException(\"2D matrix required, got \" + shape.numDimensions());\n+    }\n+    boolean isSquare = shape.size(0) == shape.size(1);\n+    long diag_size = Math.min(shape.size(0), shape.size(1));\n+    Shape diagShape = Shape.of(diag_size);\n+\n+    Operand<T> op;\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dtype);\n+    Operand<T> diag_ones =", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NTY4Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493055683", "bodyText": "Could you explain this a little more? Are you saying, add an op similar to org.tensorflow.op.core.Zeros (tf.zeros)? In TF Java, there is no org.tensorflow.op.core.Ones (nor tf.ones). In Python, tf.ones is implemented in python and ends up calling the fill op.", "author": "JimClarke5", "createdAt": "2020-09-22T21:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwODU1MQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r494408551", "bodyText": "I'd forgot there wasn't a tf.ones, but I think it would probably be worthwhile to add one. Either way I think generating an identity matrix is a useful operation and we shouldn't have it solely exist in the initializers package.", "author": "Craigacp", "createdAt": "2020-09-24T15:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMDYxNA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495210614", "bodyText": "I will open another PR on tf.ones and tf.identity. BTW, TF Python already has both.", "author": "JimClarke5", "createdAt": "2020-09-25T20:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4NTAyNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r497085027", "bodyText": "Java TensorFlow has tf.identity, but that is different than an Identity Matrix. Python TensorFlow has tf.eye (written in Python) for creating an Identity Matrix.", "author": "JimClarke5", "createdAt": "2020-09-29T21:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MzE1Nw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r497543157", "bodyText": "Yeah I think the tf.eye mirrors numpy. Presumably tf.identity returns it's input?", "author": "Craigacp", "createdAt": "2020-09-30T14:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NjEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODE5MQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492168191", "bodyText": "This worries me as it encourages people to not record the seed of their initializers. In my view any ML code which uses an unseeded PRNG is wrong as it's completely unreplicable and we've already got enough replicability problems in ML.", "author": "Craigacp", "createdAt": "2020-09-21T15:51:05Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Initializers.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.op.Ops;\n+\n+import java.util.function.Function;\n+\n+/** An Enum Type used to create a new Initializer with default parameters. */\n+public enum Initializers {\n+  IDENTITY(Identity::new),\n+  ONES(Ones::new),\n+  ZEROS(Zeros::new),\n+  GLOROT_NORMAL(GlorotNormal::new),\n+  GLOROT_UNIFORM(GlorotUniform::new),\n+  ORTHOGONAL(Orthogonal::new),\n+  RANDOM_NORMAL(RandomNormal::new),\n+  RANDOM_UNIFORM(RandomUniform::new),\n+  TRUNCATED_NORMAL(TruncatedNormal::new),\n+  VARIANCE_SCALING(VarianceScaling::new),\n+  HE_NORMAL(HeNormal::new),\n+  HE_UNIFORM(HeUniform::new),\n+  LECUN_NORMAL(LeCunNormal::new),\n+  LECUN_UNIFORM(LeCunUniform::new);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NzgxMg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492297812", "bodyText": "Seeding should be true of any Initializer that uses a random generator. This is more of a convenience, so maybe we don't need this class in framework. Also the constructors for the the other Random initializers should then require a seed.", "author": "JimClarke5", "createdAt": "2020-09-21T19:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTQ2Mg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493051462", "bodyText": "I have changed a CTORs to require a seed parameter where a seed is used.", "author": "JimClarke5", "createdAt": "2020-09-22T21:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTQxNQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492169415", "bodyText": "The javadoc should reference this constructor sets the gain to GAIN_DEFAULT.", "author": "Craigacp", "createdAt": "2020-09-21T15:52:51Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Orthogonal.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Output;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.linalg.Qr;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates an orthogonal matrix.\n+ * <p>\n+ *     If the shape of the tensor to initialize is two-dimensional, it is initialized with an orthogonal matrix obtained from the QR\n+ *     decomposition of a matrix of random numbers drawn from a normal distribution. If the matrix has fewer rows than\n+ *     columns then the output will have orthogonal rows. Otherwise, the output will have orthogonal columns.\n+ * </p>\n+ * <p>\n+ *    If the shape of the tensor to initialize is more than two-dimensional,\n+ *    a matrix of shape <code>(shape.size(0) * ... * shape.size(n - 2), shape.size(n - 1))</code> is initialized,\n+ *    where <code>n</code> is the length of the shape vector. The matrix is subsequently reshaped\n+ *    to give a tensor of the desired shape.\n+ * </p>\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      Orthogonal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.Orthogonal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class Orthogonal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+  private final Long seed;\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Orthogonal(Ops tf) {\n+    this(tf, GAIN_DEFAULT, null);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTU0Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492169543", "bodyText": "See previous comment.", "author": "Craigacp", "createdAt": "2020-09-21T15:53:02Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Orthogonal.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Output;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.linalg.Qr;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates an orthogonal matrix.\n+ * <p>\n+ *     If the shape of the tensor to initialize is two-dimensional, it is initialized with an orthogonal matrix obtained from the QR\n+ *     decomposition of a matrix of random numbers drawn from a normal distribution. If the matrix has fewer rows than\n+ *     columns then the output will have orthogonal rows. Otherwise, the output will have orthogonal columns.\n+ * </p>\n+ * <p>\n+ *    If the shape of the tensor to initialize is more than two-dimensional,\n+ *    a matrix of shape <code>(shape.size(0) * ... * shape.size(n - 2), shape.size(n - 1))</code> is initialized,\n+ *    where <code>n</code> is the length of the shape vector. The matrix is subsequently reshaped\n+ *    to give a tensor of the desired shape.\n+ * </p>\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      Orthogonal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.Orthogonal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class Orthogonal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+  private final Long seed;\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Orthogonal(Ops tf) {\n+    this(tf, GAIN_DEFAULT, null);\n+  }\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Matrix\n+   */\n+  public Orthogonal(Ops tf, double gain) {\n+    this(tf, gain, null);\n+  }\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param seed the seed for random number generation\n+   */\n+  public Orthogonal(Ops tf, Long seed) {\n+    this(tf, GAIN_DEFAULT, seed);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDc1OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492170758", "bodyText": "This seed shouldn't be hidden here. It's part of the public API as it's a breaking change if it's ever modified.", "author": "Craigacp", "createdAt": "2020-09-21T15:54:49Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Orthogonal.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Output;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.linalg.Qr;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates an orthogonal matrix.\n+ * <p>\n+ *     If the shape of the tensor to initialize is two-dimensional, it is initialized with an orthogonal matrix obtained from the QR\n+ *     decomposition of a matrix of random numbers drawn from a normal distribution. If the matrix has fewer rows than\n+ *     columns then the output will have orthogonal rows. Otherwise, the output will have orthogonal columns.\n+ * </p>\n+ * <p>\n+ *    If the shape of the tensor to initialize is more than two-dimensional,\n+ *    a matrix of shape <code>(shape.size(0) * ... * shape.size(n - 2), shape.size(n - 1))</code> is initialized,\n+ *    where <code>n</code> is the length of the shape vector. The matrix is subsequently reshaped\n+ *    to give a tensor of the desired shape.\n+ * </p>\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      Orthogonal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.Orthogonal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class Orthogonal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+  private final Long seed;\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Orthogonal(Ops tf) {\n+    this(tf, GAIN_DEFAULT, null);\n+  }\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Matrix\n+   */\n+  public Orthogonal(Ops tf, double gain) {\n+    this(tf, gain, null);\n+  }\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param seed the seed for random number generation\n+   */\n+  public Orthogonal(Ops tf, Long seed) {\n+    this(tf, GAIN_DEFAULT, seed);\n+  }\n+\n+  /**\n+   * Creates an Orthogonal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Matrix\n+   * @param seed the seed for random number generation\n+   */\n+  public Orthogonal(Ops tf, double gain, Long seed) {\n+    super(tf);\n+    this.gain = gain;\n+    this.seed = seed;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isFloating()) {\n+      throw new IllegalArgumentException(\"Expected floating point type, got \" + dtype.name());\n+    }\n+    Shape dimsShape = ShapeUtils.toShape(tf.scope(), dims);\n+    if (dimsShape.numDimensions() < 2) {\n+      throw new IllegalArgumentException(\n+          \"The tensor to initialize must be at least two-dimensional, got \"\n+              + dimsShape.numDimensions());\n+    }\n+    long num_rows = 1;\n+    int i = 0;\n+    for (; i < dimsShape.numDimensions() - 1; i++) num_rows *= dimsShape.size(i);\n+    long num_cols = dimsShape.size(i);\n+    Shape flat_shape = Shape.of(Math.max(num_rows, num_cols), Math.min(num_rows, num_cols));\n+    long lseed = this.seed == null ? 0L : this.seed;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0NTMzMg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r497545332", "bodyText": "This isn't necessary if we make seed be a long not a Long. I think we should prevent people from passing nulls to the constructor.", "author": "Craigacp", "createdAt": "2020-09-30T14:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MjQ0MA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492172440", "bodyText": "Needs javadoc for the use of MEAN_DEFAULT and STDDEV_DEFAULT. Ditto for the rest of the constructors in here which use them.", "author": "Craigacp", "createdAt": "2020-09-21T15:57:19Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomNormal.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a normal distribution.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      RandomNormal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.RandomNormal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class RandomNormal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+  public static final double MEAN_DEFAULT = 0.0;\n+  public static final double STDDEV_DEFAULT = 1.0;\n+\n+  private final double mean;\n+  private final double stddev;\n+  private final Long seed;\n+\n+  /**\n+   * creates the RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public RandomNormal(Ops tf) {\n+    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, null);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MzQzMQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492173431", "bodyText": "Same comment as the Orthogonal one wrt the seed being public API.", "author": "Craigacp", "createdAt": "2020-09-21T15:58:46Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomNormal.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a normal distribution.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      RandomNormal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.RandomNormal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class RandomNormal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+  public static final double MEAN_DEFAULT = 0.0;\n+  public static final double STDDEV_DEFAULT = 1.0;\n+\n+  private final double mean;\n+  private final double stddev;\n+  private final Long seed;\n+\n+  /**\n+   * creates the RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public RandomNormal(Ops tf) {\n+    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, null);\n+  }\n+\n+  /**\n+   * creates the RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param mean Mean of the random values to generate.\n+   */\n+  public RandomNormal(Ops tf, double mean) {\n+    this(tf, mean, STDDEV_DEFAULT, null);\n+  }\n+\n+  /**\n+   * creates the RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param mean Mean of the random values to generate.\n+   * @param stddev Standard deviation of the random values to generate.\n+   */\n+  public RandomNormal(Ops tf, double mean, double stddev) {\n+    this(tf, mean, stddev, null);\n+  }\n+\n+  /**\n+   * creates the RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param mean Mean of the random values to generate.\n+   * @param stddev Standard deviation of the random values to generate.\n+   * @param seed Used to create random seeds.\n+   */\n+  public RandomNormal(Ops tf, double mean, double stddev, Long seed) {\n+    super(tf);\n+    this.mean = mean;\n+    this.stddev = stddev;\n+    this.seed = seed;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isNumeric())\n+      throw new IllegalArgumentException(\"The data type must be numeric. Found : \" + dtype.name());\n+    long lseed = this.seed == null ? 0L : this.seed;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDcyNg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492174726", "bodyText": "Javadoc for the use of the static values.", "author": "Craigacp", "createdAt": "2020-09-21T16:00:38Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomUniform.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.random.RandomUniformInt;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a uniform distribution.\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      RandomUniform&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.RandomUniform&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * */\n+public class RandomUniform<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double MINVAL_DEFAULT = 0.05;\n+  public static final double MAXVAL_DEFAULT = 0.05;\n+\n+  private final Double minval;\n+  private final Double maxval;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public RandomUniform(Ops tf) {\n+    this(tf, MINVAL_DEFAULT, MAXVAL_DEFAULT, null);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDk1MQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492174951", "bodyText": "Same comment as Orthogonal about the seed.", "author": "Craigacp", "createdAt": "2020-09-21T16:00:58Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomUniform.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.random.RandomUniformInt;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a uniform distribution.\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      RandomUniform&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.RandomUniform&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * */\n+public class RandomUniform<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double MINVAL_DEFAULT = 0.05;\n+  public static final double MAXVAL_DEFAULT = 0.05;\n+\n+  private final Double minval;\n+  private final Double maxval;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public RandomUniform(Ops tf) {\n+    this(tf, MINVAL_DEFAULT, MAXVAL_DEFAULT, null);\n+  }\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param minval Lower bound of the range of random values to generate (inclusive).\n+   * @param maxval Upper bound of the range of random values to generate (exclusive).\n+   */\n+  public RandomUniform(Ops tf, double minval, double maxval) {\n+    this(tf, minval, maxval, null);\n+  }\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param minval Lower bound of the range of random values to generate (inclusive).\n+   * @param maxval Upper bound of the range of random values to generate (exclusive).\n+   * @param seed Used to create random seeds.\n+   */\n+  public RandomUniform(Ops tf, double minval, double maxval, Long seed) {\n+    super(tf);\n+    this.minval = minval;\n+    this.maxval = maxval;\n+    this.seed = seed;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isNumeric())\n+      throw new IllegalArgumentException(\"The data type must be numeric. Found : \" + dtype.name());\n+    @SuppressWarnings(\"unchecked\")\n+    DataType<U> numdType = (DataType<U>) dtype;\n+    Operand<U> distOp;\n+\n+    if (dtype.isInteger()) {\n+      RandomUniformInt.Options options = RandomUniformInt.seed(this.seed);\n+      distOp =\n+          tf.random.randomUniformInt(\n+              dims,\n+              tf.dtypes.cast(tf.constant(this.minval), numdType),\n+              tf.dtypes.cast(tf.constant(this.maxval), numdType),\n+              options);\n+      @SuppressWarnings(\"unchecked\")\n+      Operand<T> distOpT = (Operand<T>) distOp;\n+      return distOpT;\n+    } else {\n+      long lseed = this.seed == null ? 0L : this.seed;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NTI4Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492175283", "bodyText": "What happens when seed is null?", "author": "Craigacp", "createdAt": "2020-09-21T16:01:26Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomUniform.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.random.RandomUniformInt;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates tensors with a uniform distribution.\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      RandomUniform&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.RandomUniform&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * */\n+public class RandomUniform<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double MINVAL_DEFAULT = 0.05;\n+  public static final double MAXVAL_DEFAULT = 0.05;\n+\n+  private final Double minval;\n+  private final Double maxval;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public RandomUniform(Ops tf) {\n+    this(tf, MINVAL_DEFAULT, MAXVAL_DEFAULT, null);\n+  }\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param minval Lower bound of the range of random values to generate (inclusive).\n+   * @param maxval Upper bound of the range of random values to generate (exclusive).\n+   */\n+  public RandomUniform(Ops tf, double minval, double maxval) {\n+    this(tf, minval, maxval, null);\n+  }\n+\n+  /**\n+   * Creates a RandomUniform initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param minval Lower bound of the range of random values to generate (inclusive).\n+   * @param maxval Upper bound of the range of random values to generate (exclusive).\n+   * @param seed Used to create random seeds.\n+   */\n+  public RandomUniform(Ops tf, double minval, double maxval, Long seed) {\n+    super(tf);\n+    this.minval = minval;\n+    this.maxval = maxval;\n+    this.seed = seed;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isNumeric())\n+      throw new IllegalArgumentException(\"The data type must be numeric. Found : \" + dtype.name());\n+    @SuppressWarnings(\"unchecked\")\n+    DataType<U> numdType = (DataType<U>) dtype;\n+    Operand<U> distOp;\n+\n+    if (dtype.isInteger()) {\n+      RandomUniformInt.Options options = RandomUniformInt.seed(this.seed);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NjQxNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492176417", "bodyText": "Javadoc for the static finals.", "author": "Craigacp", "createdAt": "2020-09-21T16:03:12Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/TruncatedNormal.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates a truncated normal distribution.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      TruncatedNormal&lt;TFloat32, TFloat32&gt; initializer =\n+ *              new org.tensorflow.framework.initializers.TruncatedNormal&lt;&gt;(tf);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ */\n+public class TruncatedNormal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double MEAN_DEFAULT = 0.0;\n+  public static final double STDDEV_DEFAULT = 0.05;\n+\n+  private final double mean;\n+  private final double stddev;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a TruncatedNormal Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public TruncatedNormal(Ops tf) {\n+    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, null);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3Njc3Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492176773", "bodyText": "Javadoc for the static finals.", "author": "Craigacp", "createdAt": "2020-09-21T16:03:46Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/VarianceScaling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer capable of adapting its scale to the shape of weights tensors.\n+ *\n+ * <p>\n+ *\n+ * <p>With <code>distribution=TRUNCATED_NORMAL or UNTRUNCATED_NORMAL</code>, samples are drawn from\n+ * a truncated/untruncated normal distribution with a mean of zero and a standard deviation (after\n+ * truncation, if used) <code>stddev = Math.sqrt(scale / n)</code>, where <code>n</code> is:\n+ *\n+ * <ul>\n+ *   <li>number of input units in the weight tensor, if <code>mode=FAN_IN</code>\n+ *   <li>number of output units, if <code>mode=FAN_OUT</code>\n+ *   <li>average of the numbers of input and output units, if <code>mode=FAN_AVG</code>\n+ * </ul>\n+ *\n+ * <p>With <code>distribution=UNIFORM</code>, samples are drawn from a uniform distribution within\n+ * <code>[-limit, limit]</code>, where <code>limit = Math.sqrt(3 * scale / n);</code>.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      long seed = 1234l;\n+ *      float scale = 0.1f;\n+ *      VarianceScaling&lt;TFloat32, TFloat32&gt; initializer =\n+ *          new org.tensorflow.framework.initializers.VarianceScaling&lt;&gt;(\n+ *              tf, scale, Mode.FAN_IN, Distribution.UNIFORM, seed);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *          initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * @see VarianceScaling.Mode\n+ * @see VarianceScaling.Distribution\n+ */\n+public class VarianceScaling<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double SCALE_DEFAULT = 1.0;\n+  public static final Mode MODE_DEFAULT = Mode.FAN_IN;\n+  public static final Distribution DISTRIBUTION_DEFAULT = Distribution.TRUNCATED_NORMAL;\n+\n+  private final double scale;\n+  private final Mode mode;\n+  private final Distribution distribution;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a VarianceScaling Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public VarianceScaling(Ops tf) {\n+    this(tf, SCALE_DEFAULT, MODE_DEFAULT, DISTRIBUTION_DEFAULT, null);", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NzEwNg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492177106", "bodyText": "Same comment as Orthogonal.", "author": "Craigacp", "createdAt": "2020-09-21T16:04:15Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/VarianceScaling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer capable of adapting its scale to the shape of weights tensors.\n+ *\n+ * <p>\n+ *\n+ * <p>With <code>distribution=TRUNCATED_NORMAL or UNTRUNCATED_NORMAL</code>, samples are drawn from\n+ * a truncated/untruncated normal distribution with a mean of zero and a standard deviation (after\n+ * truncation, if used) <code>stddev = Math.sqrt(scale / n)</code>, where <code>n</code> is:\n+ *\n+ * <ul>\n+ *   <li>number of input units in the weight tensor, if <code>mode=FAN_IN</code>\n+ *   <li>number of output units, if <code>mode=FAN_OUT</code>\n+ *   <li>average of the numbers of input and output units, if <code>mode=FAN_AVG</code>\n+ * </ul>\n+ *\n+ * <p>With <code>distribution=UNIFORM</code>, samples are drawn from a uniform distribution within\n+ * <code>[-limit, limit]</code>, where <code>limit = Math.sqrt(3 * scale / n);</code>.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *      long seed = 1234l;\n+ *      float scale = 0.1f;\n+ *      VarianceScaling&lt;TFloat32, TFloat32&gt; initializer =\n+ *          new org.tensorflow.framework.initializers.VarianceScaling&lt;&gt;(\n+ *              tf, scale, Mode.FAN_IN, Distribution.UNIFORM, seed);\n+ *      Operand&lt;TFloat32&gt; values =\n+ *          initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * @see VarianceScaling.Mode\n+ * @see VarianceScaling.Distribution\n+ */\n+public class VarianceScaling<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+\n+  public static final double SCALE_DEFAULT = 1.0;\n+  public static final Mode MODE_DEFAULT = Mode.FAN_IN;\n+  public static final Distribution DISTRIBUTION_DEFAULT = Distribution.TRUNCATED_NORMAL;\n+\n+  private final double scale;\n+  private final Mode mode;\n+  private final Distribution distribution;\n+  private final Long seed;\n+\n+  /**\n+   * Creates a VarianceScaling Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public VarianceScaling(Ops tf) {\n+    this(tf, SCALE_DEFAULT, MODE_DEFAULT, DISTRIBUTION_DEFAULT, null);\n+  }\n+\n+  /**\n+   * Creates a VarianceScaling Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param seed sed to create random seeds.\n+   */\n+  public VarianceScaling(Ops tf, long seed) {\n+    this(tf, SCALE_DEFAULT, MODE_DEFAULT, DISTRIBUTION_DEFAULT, seed);\n+  }\n+\n+  /**\n+   * Creates a VarianceScaling Initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param scale Scaling factor (positive float).\n+   * @param mode the mode for the variance\n+   * @param distribution Random distribution to use.\n+   * @param seed Used to create random seeds.\n+   */\n+  public VarianceScaling(Ops tf, double scale, Mode mode, Distribution distribution, Long seed) {\n+    super(tf);\n+    if (scale <= 0.0) {\n+      throw new IllegalArgumentException(\"scale must be greater than 0, got \" + scale);\n+    }\n+    this.scale = scale;\n+    this.mode = mode;\n+    this.distribution = distribution;\n+    this.seed = seed;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isFloating()) {\n+      throw new IllegalArgumentException(\"Expected floating point type, got \" + dtype.name());\n+    }\n+    Shape shape = ShapeUtils.toShape(this.tf.scope(), dims);\n+    double lscale = this.scale;\n+    double[] fans /* fanIn, fanOut */ = computeFans(shape);\n+    switch (mode) {\n+      case FAN_IN:\n+        lscale /= Math.max(1., fans[0]);\n+        break;\n+      case FAN_OUT:\n+        lscale /= Math.max(1., fans[1]);\n+        break;\n+      case FAN_AVG:\n+        lscale /= Math.max(1., (fans[0] + fans[1]) / 2.);\n+        break;\n+    }\n+    Operand<U> distOp;\n+    Operand<U> mulOp = null;\n+    @SuppressWarnings(\"unchecked\")\n+    DataType<U> numdType = (DataType<U>) dtype;\n+    double stddev;\n+    long lseed = this.seed == null ? 0L : this.seed;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3ODcyNg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492178726", "bodyText": "No star imports please.", "author": "Craigacp", "createdAt": "2020-09-21T16:06:42Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.*;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4MDkxNQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492180915", "bodyText": "The formatting on this else block looks odd? It's at the wrong indent level (or at least it looks that way in the review).", "author": "Craigacp", "createdAt": "2020-09-21T16:10:08Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.*;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Various methods for processing with Shapes and Operands\n+ */\n+public class ShapeUtils {\n+\n+  /**\n+   * Converts a shape operand to a Shape object\n+   *\n+   * @param dims the Operand containing the shape values\n+   * @return a new Shape based on an Operand that contains dimensions\n+   */\n+  public static <T extends TNumber> Shape toShape(Scope scope, Operand<T> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Shape.of(longDims);\n+  }\n+\n+  /**\n+   * Converts a TInt32 type Operand to a Java int array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the TInt32 Operand\n+   * @return the int array\n+   */\n+  public static int[] getIntArray(Scope scope, Operand<TInt32> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Arrays.stream(longDims).mapToInt(i -> (int) i).toArray();\n+  }\n+\n+  /**\n+   * Converts a TInt32 or TInt64 Operand to a java long array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the Operand\n+   * @param <T> the type of the dimensions, must either be TInt32 or TInt64 type\n+   * @return the long array\n+   * @throws java.lang.IllegalArgumentException if the dims type is not an integer\n+   */\n+  public static <T extends TNumber> long[] getLongArray(Scope scope, Operand<T> dims) {\n+    DataType<T> dType = dims.asOutput().dataType();\n+    if (!dType.isInteger()) {\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+    List<Long> result = new ArrayList<>();\n+\n+    if (scope.env().isEager()) {\n+      if (dType.equals(TInt32.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt32> idims = (Operand<TInt32>) dims;\n+\n+        idims.asOutput().data().scalars().forEach(s -> result.add((long) s.getInt()));\n+      } else if (dType.equals(TInt64.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt64> ldims = (Operand<TInt64>) dims;\n+        ldims.asOutput().data().scalars().forEach(s -> result.add(s.getLong()));\n+      } else if (dType.equals(TUint8.DTYPE)) {\n+      @SuppressWarnings(\"unchecked\")\n+      Operand<TUint8> udims = (Operand<TUint8>) dims;\n+        udims.asOutput().data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+    }else { // shouldn't happen", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3ODE5NA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492278194", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-21T18:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4MDkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4MzEwNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492183107", "bodyText": "Formatting looks a little off here too.", "author": "Craigacp", "createdAt": "2020-09-21T16:13:24Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.*;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Various methods for processing with Shapes and Operands\n+ */\n+public class ShapeUtils {\n+\n+  /**\n+   * Converts a shape operand to a Shape object\n+   *\n+   * @param dims the Operand containing the shape values\n+   * @return a new Shape based on an Operand that contains dimensions\n+   */\n+  public static <T extends TNumber> Shape toShape(Scope scope, Operand<T> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Shape.of(longDims);\n+  }\n+\n+  /**\n+   * Converts a TInt32 type Operand to a Java int array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the TInt32 Operand\n+   * @return the int array\n+   */\n+  public static int[] getIntArray(Scope scope, Operand<TInt32> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Arrays.stream(longDims).mapToInt(i -> (int) i).toArray();\n+  }\n+\n+  /**\n+   * Converts a TInt32 or TInt64 Operand to a java long array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the Operand\n+   * @param <T> the type of the dimensions, must either be TInt32 or TInt64 type\n+   * @return the long array\n+   * @throws java.lang.IllegalArgumentException if the dims type is not an integer\n+   */\n+  public static <T extends TNumber> long[] getLongArray(Scope scope, Operand<T> dims) {\n+    DataType<T> dType = dims.asOutput().dataType();\n+    if (!dType.isInteger()) {\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+    List<Long> result = new ArrayList<>();\n+\n+    if (scope.env().isEager()) {\n+      if (dType.equals(TInt32.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt32> idims = (Operand<TInt32>) dims;\n+\n+        idims.asOutput().data().scalars().forEach(s -> result.add((long) s.getInt()));\n+      } else if (dType.equals(TInt64.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt64> ldims = (Operand<TInt64>) dims;\n+        ldims.asOutput().data().scalars().forEach(s -> result.add(s.getLong()));\n+      } else if (dType.equals(TUint8.DTYPE)) {\n+      @SuppressWarnings(\"unchecked\")\n+      Operand<TUint8> udims = (Operand<TUint8>) dims;\n+        udims.asOutput().data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+    }else { // shouldn't happen\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+\n+    } else {\n+      try (Session session = new Session((Graph) scope.env())) {\n+        if (dType.equals(TInt32.DTYPE)) {\n+          try (Tensor<TInt32> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt32.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add((long) s.getInt()));\n+          }\n+        } else if (dType.equals(TInt64.DTYPE)){\n+          try (Tensor<TInt64> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt64.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getLong()));\n+          }\n+        }else if (dType.equals(TUint8.DTYPE)){\n+          try (Tensor<TUint8> tensorResult =\n+                       session.runner().fetch(dims).run().get(0).expect(TUint8.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+          }\n+      }else { // shouldn't happen", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3ODI0Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492278243", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-21T18:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4MzEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492186480", "bodyText": "So this is not quite the same as numpy's broadcasting rules right? I wonder if it's worth mentioning that, as I expect that many people who see this function will be familiar with numpy.", "author": "Craigacp", "createdAt": "2020-09-21T16:18:44Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.*;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Various methods for processing with Shapes and Operands\n+ */\n+public class ShapeUtils {\n+\n+  /**\n+   * Converts a shape operand to a Shape object\n+   *\n+   * @param dims the Operand containing the shape values\n+   * @return a new Shape based on an Operand that contains dimensions\n+   */\n+  public static <T extends TNumber> Shape toShape(Scope scope, Operand<T> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Shape.of(longDims);\n+  }\n+\n+  /**\n+   * Converts a TInt32 type Operand to a Java int array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the TInt32 Operand\n+   * @return the int array\n+   */\n+  public static int[] getIntArray(Scope scope, Operand<TInt32> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Arrays.stream(longDims).mapToInt(i -> (int) i).toArray();\n+  }\n+\n+  /**\n+   * Converts a TInt32 or TInt64 Operand to a java long array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the Operand\n+   * @param <T> the type of the dimensions, must either be TInt32 or TInt64 type\n+   * @return the long array\n+   * @throws java.lang.IllegalArgumentException if the dims type is not an integer\n+   */\n+  public static <T extends TNumber> long[] getLongArray(Scope scope, Operand<T> dims) {\n+    DataType<T> dType = dims.asOutput().dataType();\n+    if (!dType.isInteger()) {\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+    List<Long> result = new ArrayList<>();\n+\n+    if (scope.env().isEager()) {\n+      if (dType.equals(TInt32.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt32> idims = (Operand<TInt32>) dims;\n+\n+        idims.asOutput().data().scalars().forEach(s -> result.add((long) s.getInt()));\n+      } else if (dType.equals(TInt64.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt64> ldims = (Operand<TInt64>) dims;\n+        ldims.asOutput().data().scalars().forEach(s -> result.add(s.getLong()));\n+      } else if (dType.equals(TUint8.DTYPE)) {\n+      @SuppressWarnings(\"unchecked\")\n+      Operand<TUint8> udims = (Operand<TUint8>) dims;\n+        udims.asOutput().data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+    }else { // shouldn't happen\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+\n+    } else {\n+      try (Session session = new Session((Graph) scope.env())) {\n+        if (dType.equals(TInt32.DTYPE)) {\n+          try (Tensor<TInt32> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt32.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add((long) s.getInt()));\n+          }\n+        } else if (dType.equals(TInt64.DTYPE)){\n+          try (Tensor<TInt64> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt64.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getLong()));\n+          }\n+        }else if (dType.equals(TUint8.DTYPE)){\n+          try (Tensor<TUint8> tensorResult =\n+                       session.runner().fetch(dims).run().get(0).expect(TUint8.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+          }\n+      }else { // shouldn't happen\n+          throw new IllegalArgumentException(\"the data type must be an integer type\");\n+        }\n+      }\n+    }\n+    return result.stream().mapToLong(i -> i).toArray();\n+  }\n+\n+  /**\n+   * Gets the shape for the data within a Tensor\n+   *\n+   * @param tensor the tensor\n+   * @return the Shape of the tensor's data;\n+   */\n+  public static <T extends TNumber> Shape getShape(Tensor<T> tensor) {\n+    NdArray<?> data = (NdArray<?>) tensor.data();\n+    return data.shape();\n+  }\n+\n+  /**\n+   * Determines whether two shapes are compatible.\n+   *\n+   * <p>\n+   *\n+   * <p>Two possibly-partially-defined shapes are compatible if there exists a fully-defined shape\n+   * that both shapes can represent. Thus, compatibility allows the shape inference code to reason\n+   * about partially-defined shapes. For example:\n+   *\n+   * <ul>\n+   *   <li><code>Shape.unknown()</code> is compatible with all shapes.\n+   *   <li><code>Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> is compatible with all two-dimensional\n+   *       shapes, such as <code>Shape(32, 784)</code>, and also <code>Shape.unknown()</code>. It is\n+   *       not compatible with, for example, <code>Shape(UNKNOWN_SIZE)</code> or <code>\n+   *       Shape(UNKNOWN_SIZE, UNKNOWN_SIZE, UNKNOWN_SIZE)</code>.\n+   *   <li><code>Shape(32, UNKNOWN_SIZE)</code> is compatible with all two-dimensional shapes with\n+   *       size 32 in the 0th dimension, and also <code>Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> and\n+   *       <code>Shape.unknown()</code>. It is not compatible with, for example, <code>Shape(32)\n+   *       </code>, <code>Shape(32, UNKNOWN_SIZE, 1)</code> or <code>Shape(64, UNKNOWN_SIZE)</code>.\n+   *   <li><code>Shape(32, 784)</code> is compatible with itself, and also <code>\n+   *       Shape(32, UNKNOWN_SIZE)</code>, <code>Shape(UNKNOWN_SIZE, 784)</code>, <code>\n+   *       Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> and <code>Shape.unknown()</code>. It is not\n+   *       compatible with, for example, <code>Shape(32, 1, 784)</code> or <code>Shape(UNKNOWN_SIZE)\n+   *       </code>.\n+   * </ul>\n+   *\n+   * <p>The compatibility relation is reflexive and symmetric, but not transitive. For example,\n+   * <code>Shape(32, 784)</code> is compatible with <code>Shape.unknown()</code>, and <code>\n+   * Shape.unknown()</code> is compatible with <code>Shape(4, 4)</code>, but <code>Shape(32, 784)\n+   * </code> is not compatible with <code>Shape(4, 4)</code>.", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NTQ5Nw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492295497", "bodyText": "No, it is not the same as broadcasting. Compatible shapes must  have the same number of dimensions and for each dimension pair, one dimension has to equal the other dimensions or at least one of the dimensions in the pair has to be UNKNOWN_SIZE.\nNumpy broadcasting allows different dimensions, but paired dimensions have to either be equal, or one dimension must be 1. If one shape has less dimensions than another shape, the smaller shape is \"stretched\" with dimensions of 1.", "author": "JimClarke5", "createdAt": "2020-09-21T19:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNjUwMA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493036500", "bodyText": "I have upgraded the JavaDoc to explain the difference between compatible shapes and broadcastable shapes.", "author": "JimClarke5", "createdAt": "2020-09-22T21:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1Mjc0Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493052743", "bodyText": "Should isCompatibleWith be moved to org.tensorflow.ndarray.Shape?", "author": "JimClarke5", "createdAt": "2020-09-22T21:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MjI0NA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493882244", "bodyText": "The javadoc change looks good, @karllessard do you think this method should be moved?", "author": "Craigacp", "createdAt": "2020-09-23T20:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMzE0Ng==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r499023146", "bodyText": "Probably yes, it would perfectly fit as an instance method of Shape: shape.isCompatibleWith(...)", "author": "karllessard", "createdAt": "2020-10-02T19:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5Mjk2MQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492192961", "bodyText": "\"cade\"", "author": "Craigacp", "createdAt": "2020-09-21T16:28:54Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.*;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Various methods for processing with Shapes and Operands\n+ */\n+public class ShapeUtils {\n+\n+  /**\n+   * Converts a shape operand to a Shape object\n+   *\n+   * @param dims the Operand containing the shape values\n+   * @return a new Shape based on an Operand that contains dimensions\n+   */\n+  public static <T extends TNumber> Shape toShape(Scope scope, Operand<T> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Shape.of(longDims);\n+  }\n+\n+  /**\n+   * Converts a TInt32 type Operand to a Java int array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the TInt32 Operand\n+   * @return the int array\n+   */\n+  public static int[] getIntArray(Scope scope, Operand<TInt32> dims) {\n+    long[] longDims = getLongArray(scope, dims);\n+    return Arrays.stream(longDims).mapToInt(i -> (int) i).toArray();\n+  }\n+\n+  /**\n+   * Converts a TInt32 or TInt64 Operand to a java long array\n+   *\n+   * @param scope the TensorFlow scope\n+   * @param dims the Operand\n+   * @param <T> the type of the dimensions, must either be TInt32 or TInt64 type\n+   * @return the long array\n+   * @throws java.lang.IllegalArgumentException if the dims type is not an integer\n+   */\n+  public static <T extends TNumber> long[] getLongArray(Scope scope, Operand<T> dims) {\n+    DataType<T> dType = dims.asOutput().dataType();\n+    if (!dType.isInteger()) {\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+    List<Long> result = new ArrayList<>();\n+\n+    if (scope.env().isEager()) {\n+      if (dType.equals(TInt32.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt32> idims = (Operand<TInt32>) dims;\n+\n+        idims.asOutput().data().scalars().forEach(s -> result.add((long) s.getInt()));\n+      } else if (dType.equals(TInt64.DTYPE)) {\n+        @SuppressWarnings(\"unchecked\")\n+        Operand<TInt64> ldims = (Operand<TInt64>) dims;\n+        ldims.asOutput().data().scalars().forEach(s -> result.add(s.getLong()));\n+      } else if (dType.equals(TUint8.DTYPE)) {\n+      @SuppressWarnings(\"unchecked\")\n+      Operand<TUint8> udims = (Operand<TUint8>) dims;\n+        udims.asOutput().data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+    }else { // shouldn't happen\n+      throw new IllegalArgumentException(\"the data type must be an integer type\");\n+    }\n+\n+    } else {\n+      try (Session session = new Session((Graph) scope.env())) {\n+        if (dType.equals(TInt32.DTYPE)) {\n+          try (Tensor<TInt32> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt32.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add((long) s.getInt()));\n+          }\n+        } else if (dType.equals(TInt64.DTYPE)){\n+          try (Tensor<TInt64> tensorResult =\n+              session.runner().fetch(dims).run().get(0).expect(TInt64.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getLong()));\n+          }\n+        }else if (dType.equals(TUint8.DTYPE)){\n+          try (Tensor<TUint8> tensorResult =\n+                       session.runner().fetch(dims).run().get(0).expect(TUint8.DTYPE)) {\n+            tensorResult.data().scalars().forEach(s -> result.add(s.getObject().longValue()));\n+          }\n+      }else { // shouldn't happen\n+          throw new IllegalArgumentException(\"the data type must be an integer type\");\n+        }\n+      }\n+    }\n+    return result.stream().mapToLong(i -> i).toArray();\n+  }\n+\n+  /**\n+   * Gets the shape for the data within a Tensor\n+   *\n+   * @param tensor the tensor\n+   * @return the Shape of the tensor's data;\n+   */\n+  public static <T extends TNumber> Shape getShape(Tensor<T> tensor) {\n+    NdArray<?> data = (NdArray<?>) tensor.data();\n+    return data.shape();\n+  }\n+\n+  /**\n+   * Determines whether two shapes are compatible.\n+   *\n+   * <p>\n+   *\n+   * <p>Two possibly-partially-defined shapes are compatible if there exists a fully-defined shape\n+   * that both shapes can represent. Thus, compatibility allows the shape inference code to reason\n+   * about partially-defined shapes. For example:\n+   *\n+   * <ul>\n+   *   <li><code>Shape.unknown()</code> is compatible with all shapes.\n+   *   <li><code>Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> is compatible with all two-dimensional\n+   *       shapes, such as <code>Shape(32, 784)</code>, and also <code>Shape.unknown()</code>. It is\n+   *       not compatible with, for example, <code>Shape(UNKNOWN_SIZE)</code> or <code>\n+   *       Shape(UNKNOWN_SIZE, UNKNOWN_SIZE, UNKNOWN_SIZE)</code>.\n+   *   <li><code>Shape(32, UNKNOWN_SIZE)</code> is compatible with all two-dimensional shapes with\n+   *       size 32 in the 0th dimension, and also <code>Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> and\n+   *       <code>Shape.unknown()</code>. It is not compatible with, for example, <code>Shape(32)\n+   *       </code>, <code>Shape(32, UNKNOWN_SIZE, 1)</code> or <code>Shape(64, UNKNOWN_SIZE)</code>.\n+   *   <li><code>Shape(32, 784)</code> is compatible with itself, and also <code>\n+   *       Shape(32, UNKNOWN_SIZE)</code>, <code>Shape(UNKNOWN_SIZE, 784)</code>, <code>\n+   *       Shape(UNKNOWN_SIZE, UNKNOWN_SIZE)</code> and <code>Shape.unknown()</code>. It is not\n+   *       compatible with, for example, <code>Shape(32, 1, 784)</code> or <code>Shape(UNKNOWN_SIZE)\n+   *       </code>.\n+   * </ul>\n+   *\n+   * <p>The compatibility relation is reflexive and symmetric, but not transitive. For example,\n+   * <code>Shape(32, 784)</code> is compatible with <code>Shape.unknown()</code>, and <code>\n+   * Shape.unknown()</code> is compatible with <code>Shape(4, 4)</code>, but <code>Shape(32, 784)\n+   * </code> is not compatible with <code>Shape(4, 4)</code>.\n+   *\n+   * @param a The first shape\n+   * @param b The second shape\n+   * @return true, if the two shapes are compatible.\n+   */\n+  public static boolean isCompatibleWith(Shape a, Shape b) {\n+    if (isUnknownShape(a) && isUnknownShape(b)) {\n+      if (a.numDimensions() != b.numDimensions()) {\n+        return false;\n+      }\n+      for (int i = 0; i < a.numDimensions(); i++) {\n+        if (!isCompatible(a.size(i), b.size(i))) {\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Determines if a shape is an unknown shape as provided in <cade>Shape.unknown()</code>.", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3ODcxOA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492278718", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-21T18:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5Mjk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Mzc3OQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492263779", "bodyText": "Have these tests been run in graph mode too?", "author": "Craigacp", "createdAt": "2020-09-21T18:29:59Z", "path": "tensorflow-framework/src/test/java/org/tensorflow/framework/initializers/ConstantTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.junit.jupiter.api.*;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.TestSession;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/** Test the Constant initializer */\n+public class ConstantTest {\n+\n+  private final TestSession.Mode tfMode = TestSession.Mode.EAGER;", "originalCommit": "33530bbd7d41f4b8f3b628b2252a378ae2f9bb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3ODk5NQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r492278995", "bodyText": "I will change to run in both modes.", "author": "JimClarke5", "createdAt": "2020-09-21T18:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Mzc3OQ=="}], "type": "inlineReview"}, {"oid": "32618884e2c9784bbc9d0e60be0ef09a5cab1f08", "url": "https://github.com/tensorflow/java/commit/32618884e2c9784bbc9d0e60be0ef09a5cab1f08", "message": "Update JavaDoc to highlight difference between compatible shapes and broadcastable shapes.", "committedDate": "2020-09-22T20:54:02Z", "type": "commit"}, {"oid": "8860c56a435948c0deae89cc93de3aa457fba946", "url": "https://github.com/tensorflow/java/commit/8860c56a435948c0deae89cc93de3aa457fba946", "message": "Add handling of TUint8 data types, and add a predicate to evaluate TString and String.", "committedDate": "2020-09-22T20:55:49Z", "type": "commit"}, {"oid": "c3fa45754c8fa014423320b775aec4ed8defd384", "url": "https://github.com/tensorflow/java/commit/c3fa45754c8fa014423320b775aec4ed8defd384", "message": "Change all ctors to require seed param, when seed is used. Refactor LeCun, Glorot, He into one class that handled different types of Distribution. This allows the deletion of the old xxxxxxNormal and xxxxxxUniform companion classes. Changed Constant to handle long, double and boolean values discreetly so that precision is not lost.\nFixed message on Identity when the Operands are not floating types.", "committedDate": "2020-09-22T21:01:49Z", "type": "commit"}, {"oid": "ccf7b53136acf931cb7e7e58b4bc780d4b2e3f72", "url": "https://github.com/tensorflow/java/commit/ccf7b53136acf931cb7e7e58b4bc780d4b2e3f72", "message": "Fix all tests to run in both Eager and Graph Mode.", "committedDate": "2020-09-22T21:02:50Z", "type": "commit"}, {"oid": "a8e44070db37fd27ed24b5184f2e5e7bc19d1734", "url": "https://github.com/tensorflow/java/commit/a8e44070db37fd27ed24b5184f2e5e7bc19d1734", "message": "Fix formatting", "committedDate": "2020-09-22T21:03:41Z", "type": "commit"}, {"oid": "f5d1216e9c6909aaf7c3b7893475bc1455ec7091", "url": "https://github.com/tensorflow/java/commit/f5d1216e9c6909aaf7c3b7893475bc1455ec7091", "message": "Fix formatting", "committedDate": "2020-09-22T21:05:13Z", "type": "commit"}, {"oid": "d8348277aef3225e8eff1ecefd9a976dcc117c89", "url": "https://github.com/tensorflow/java/commit/d8348277aef3225e8eff1ecefd9a976dcc117c89", "message": "Fix formatting", "committedDate": "2020-09-22T21:05:56Z", "type": "commit"}, {"oid": "6fccd593e9f087ad220f223f609974acc81b3389", "url": "https://github.com/tensorflow/java/commit/6fccd593e9f087ad220f223f609974acc81b3389", "message": "Fix formatting", "committedDate": "2020-09-22T21:07:15Z", "type": "commit"}, {"oid": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "url": "https://github.com/tensorflow/java/commit/43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "message": "Added Reproducible tests to make sure that for each initilaizer instance produces the same result when called more than once.", "committedDate": "2020-09-22T21:42:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mzc4Ng==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493873786", "bodyText": "The javadoc says double, but the constructor expects a long.", "author": "Craigacp", "createdAt": "2020-09-23T20:25:43Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Constant.java", "diffHunk": "@@ -36,19 +36,37 @@\n  */\n public class Constant<T extends TType> extends BaseInitializer<T> {\n \n-  private final Number numberValue;\n-  private final Boolean booleanValue;\n+  private final double doubleValue;\n+  private final long longValue;\n+  private final boolean booleanValue;\n+  private final ValueType valueType;\n \n   /**\n    * Creates an Initializer that generates tensors with a constant value.\n    *\n    * @param tf the TensorFlow Ops\n-   * @param value a number value\n+   * @param value a double value", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTM1OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495211358", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-25T20:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mzc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NTcyOQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493875729", "bodyText": "So I understand that this is to replicate the behaviour in Keras, where GlorotNormal means use the Glorot variance and sample from a truncated normal, but why does it throw if people want to draw from a regular normal distribution? Also it looks like the super constructor doesn't throw IllegalArgumentException in this case, only if it got a zero SCALE param.", "author": "Craigacp", "createdAt": "2020-09-23T20:29:32Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Glorot.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * The Glorot initializer, also called Xavier initializer.\n+ *\n+ * <p>Draws samples from a random distribution.\n+ *\n+ * <p>If the distribution is TRUNCATED_NORMAL, then the distribution is centered on 0 with <code>\n+ *  stddev = Math.sqrt(2. / (fanIn + fanOut))</code> where <code>fanIn</code> is the number of input\n+ * units in the weight tensor and <code>fanOut</code> is the number of output units in the weight\n+ * tensor.\n+ *\n+ * <p>If the distribution is UNIFORM, then samples are drawn from a uniform distribution within\n+ * <code>[-limit, limit]</code>, where <code>limit = sqrt(6 / (fanIn + fanOut))</code> ( <code>fanIn\n+ * </code> is the number of input units in the weight tensor and <code> fanOut</code> is the number\n+ * of output units).\n+ *\n+ * <p>Examples:\n+ *\n+ * <p>Glorot Normal:\n+ *\n+ * <pre>\n+ *     long seed = 1001l;\n+ *     Glorot&lt;TFloat32, TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.Glorot&lt;&gt;(tf,\n+ *             Distribution.TRUNCATED_NORMAL, seed);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * <p>Glorot Uniform:\n+ *\n+ * <pre>\n+ *    long seed = 1001l;\n+ *    Glorot&lt;TFloat32, TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.Glorot&lt;&gt;(tf,\n+ *             Distribution.UNIFORM, seed);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ * @param <U> The TNumber for the call operation\n+ * @see VarianceScaling.Distribution\n+ * @see <a href=\"http://proceedings.mlr.press/v9/glorot10a.html\">Glorot et al., 2010</a>\n+ */\n+public class Glorot<T extends TType, U extends TNumber> extends VarianceScaling<T, U> {\n+\n+  public static final double SCALE = 1.0;\n+\n+  /**\n+   * Creates a Glorot initializer\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param distribution The distribution type for the Glorot initializer.\n+   * @param seed the seed for random number generation. An initializer created with a given seed\n+   *     will always produce the same random tensor for a given shape and dtype.\n+   * @throws java.lang.IllegalArgumentException if the distribution is not TRUNCATED_NORMAL or", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NzUxNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r494267517", "bodyText": "In Keras, they only use Normal and Uniform. But it seems a little arbitrary.\nHere is the original discussion from the Keras thread on why they chose these two.\nKeras Issue on GlorotNormal vs GlorotUniform \nThe @throws was left in by mistake when I used to check for only TRUNCATED_NORMAL and UNIFORM. I will remove it.", "author": "JimClarke5", "createdAt": "2020-09-24T12:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNzAyNA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r494427024", "bodyText": "I think exposing all three is fine, and maybe a note to say that Keras uses TRUNCATED_NORMAL in the ones that produce normal values.", "author": "Craigacp", "createdAt": "2020-09-24T15:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxODQ0OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495218448", "bodyText": "I added class JavaDoc in all three types, Glorot, He, and LeCun, highlighting how to reproduce xxxxxNormal, and xxxxxUniform by using TRUNCATED_NORMAL and UNIFORM, respectively.", "author": "JimClarke5", "createdAt": "2020-09-25T20:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NTcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MDEyOQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493880129", "bodyText": "This default notice should be on the other constructor as this one can't use defaults.", "author": "Craigacp", "createdAt": "2020-09-23T20:37:40Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Orthogonal.java", "diffHunk": "@@ -90,8 +72,9 @@ public Orthogonal(Ops tf, Long seed) {\n    * Creates an Orthogonal Initializer\n    *\n    * @param tf the TensorFlow Ops\n-   * @param gain the gain to be applied to the Matrix\n-   * @param seed the seed for random number generation\n+   * @param gain the gain to be applied to the Matrix. Default is 1.0.", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzQ2Ng==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495223466", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-25T20:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MDEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTIyNA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493881224", "bodyText": "Default doc needs to move to the place where it's defaulted. Also I'd make it refer to the default value that way the comment can't become stale (e.g. {@link MEAN_DEFAULT}).", "author": "Craigacp", "createdAt": "2020-09-23T20:39:46Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomNormal.java", "diffHunk": "@@ -47,39 +49,33 @@\n    * creates the RandomUniform initializer\n    *\n    * @param tf the TensorFlow Ops\n+   * @param seed the seed for random number generation. An initializer created with a given seed\n+   *     will always produce the same random tensor for a given shape and dtype.\n    */\n-  public RandomNormal(Ops tf) {\n-    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, null);\n-  }\n-\n-  /**\n-   * creates the RandomUniform initializer\n-   *\n-   * @param tf the TensorFlow Ops\n-   * @param mean Mean of the random values to generate.\n-   */\n-  public RandomNormal(Ops tf, double mean) {\n-    this(tf, mean, STDDEV_DEFAULT, null);\n+  public RandomNormal(Ops tf, Long seed) {\n+    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, seed);\n   }\n \n   /**\n    * creates the RandomUniform initializer\n    *\n    * @param tf the TensorFlow Ops\n-   * @param mean Mean of the random values to generate.\n-   * @param stddev Standard deviation of the random values to generate.\n+   * @param mean Mean of the random values to generate. Default is 0.", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjI1OQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r497836259", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-30T22:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTUxOQ==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493881519", "bodyText": "Move the default doc.", "author": "Craigacp", "createdAt": "2020-09-23T20:40:19Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomUniform.java", "diffHunk": "@@ -49,29 +51,23 @@\n    * Creates a RandomUniform initializer\n    *\n    * @param tf the TensorFlow Ops\n+   * @param seed the seed for random number generation. An initializer created with a given seed\n+   *     will always produce the same random tensor for a given shape and dtype.\n    */\n-  public RandomUniform(Ops tf) {\n-    this(tf, MINVAL_DEFAULT, MAXVAL_DEFAULT, null);\n-  }\n-\n-  /**\n-   * Creates a RandomUniform initializer\n-   *\n-   * @param tf the TensorFlow Ops\n-   * @param minval Lower bound of the range of random values to generate (inclusive).\n-   * @param maxval Upper bound of the range of random values to generate (exclusive).\n-   */\n-  public RandomUniform(Ops tf, double minval, double maxval) {\n-    this(tf, minval, maxval, null);\n+  public RandomUniform(Ops tf, Long seed) {\n+    this(tf, MINVAL_DEFAULT, MAXVAL_DEFAULT, seed);\n   }\n \n   /**\n    * Creates a RandomUniform initializer\n    *\n    * @param tf the TensorFlow Ops\n-   * @param minval Lower bound of the range of random values to generate (inclusive).\n-   * @param maxval Upper bound of the range of random values to generate (exclusive).\n-   * @param seed Used to create random seeds.\n+   * @param minval Lower bound of the range of random values to generate (inclusive). Default is", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzcxNg==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495223716", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-25T20:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNjMwNA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r497836304", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-30T22:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTYzNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493881637", "bodyText": "Default doc.", "author": "Craigacp", "createdAt": "2020-09-23T20:40:33Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/TruncatedNormal.java", "diffHunk": "@@ -49,29 +50,21 @@\n    * Creates a TruncatedNormal Initializer\n    *\n    * @param tf the TensorFlow Ops\n+   * @param seed the seed for random number generation. An initializer created with a given seed\n+   *     will always produce the same random tensor for a given shape and dtype.\n    */\n-  public TruncatedNormal(Ops tf) {\n-    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, null);\n+  public TruncatedNormal(Ops tf, Long seed) {\n+    this(tf, MEAN_DEFAULT, STDDEV_DEFAULT, seed);\n   }\n \n   /**\n    * Creates a TruncatedNormal Initializer\n    *\n    * @param tf the TensorFlow Ops\n-   * @param mean Mean of the random values to generate.\n-   * @param stddev Standard deviation of the random values to generate.\n-   */\n-  public TruncatedNormal(Ops tf, double mean, double stddev) {\n-    this(tf, mean, stddev, null);\n-  }\n-\n-  /**\n-   * Creates a TruncatedNormal Initializer\n-   *\n-   * @param tf the TensorFlow Ops\n-   * @param mean Mean of the random values to generate.\n-   * @param stddev Standard deviation of the random values to generate.\n-   * @param seed Used to create random seeds\n+   * @param mean Mean of the random values to generate. Default is 0.", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzc2Mw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r495223763", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-25T20:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NDA2NA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r493884064", "bodyText": "I'd missed this last time, could this just be NORMAL not UNTRUNCATED_NORMAL?", "author": "Craigacp", "createdAt": "2020-09-23T20:45:05Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/VarianceScaling.java", "diffHunk": "@@ -188,14 +188,14 @@ public VarianceScaling(Ops tf, double scale, Mode mode, Distribution distributio\n   }\n \n   /** The mode to use for calculating the fan values. */\n-  public static enum Mode {\n+  public enum Mode {\n     FAN_IN,\n     FAN_OUT,\n     FAN_AVG\n   }\n \n   /** The random distribution to use when initializing the values. */\n-  public static enum Distribution {\n+  public enum Distribution {\n     TRUNCATED_NORMAL,\n     UNTRUNCATED_NORMAL,", "originalCommit": "43f3fb76bd0eb2d9b8aaf2ac6731d10a9f17c0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTA1OA==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r494265058", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-09-24T12:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NDA2NA=="}], "type": "inlineReview"}, {"oid": "dcf82a75458ea38b0cfd2b256b88167e0c771198", "url": "https://github.com/tensorflow/java/commit/dcf82a75458ea38b0cfd2b256b88167e0c771198", "message": "Fixed JavaDoc and default value references\nDisabled lambda by removing @FunctionalInterface from Initializer, removed InitializerFunctionTest.java.\nChanged UNTRUNCATED_NORMAL to NORMAL.", "committedDate": "2020-09-25T20:52:55Z", "type": "commit"}, {"oid": "1f32de2d08495997e80ba91138e4b0a6e05aee7e", "url": "https://github.com/tensorflow/java/commit/1f32de2d08495997e80ba91138e4b0a6e05aee7e", "message": "Fixed JavaDoc", "committedDate": "2020-09-25T21:05:42Z", "type": "commit"}, {"oid": "fb52dd450fedd3cb949834454dfaaec64c64a8c6", "url": "https://github.com/tensorflow/java/commit/fb52dd450fedd3cb949834454dfaaec64c64a8c6", "message": "Change UNTRUNCATED_NORMAL to NORMAL", "committedDate": "2020-09-25T22:18:12Z", "type": "commit"}, {"oid": "e328cbf05c9532bb93a4d20cf495dff0349f9ab3", "url": "https://github.com/tensorflow/java/commit/e328cbf05c9532bb93a4d20cf495dff0349f9ab3", "message": "Changed Long seed to long seed.", "committedDate": "2020-09-30T21:04:00Z", "type": "commit"}, {"oid": "80f2fb0dc6679f9ef23f2de8f6674286f179d4d9", "url": "https://github.com/tensorflow/java/commit/80f2fb0dc6679f9ef23f2de8f6674286f179d4d9", "message": "Remove snake case", "committedDate": "2020-09-30T22:24:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNDQyNw==", "url": "https://github.com/tensorflow/java/pull/116#discussion_r499024427", "bodyText": "There is still a few variables like this in the PR using snake_case instead of camelCase.", "author": "karllessard", "createdAt": "2020-10-02T20:00:44Z", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Identity.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+=======================================================================*/\n+package org.tensorflow.framework.initializers;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.ShapeUtils;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Initializer that generates the identity matrix.\n+ *\n+ * <p>Only usable for generating 2D matrices.\n+ *\n+ * <p>Examples:\n+ *\n+ * <pre>\n+ *     Identity&lt;TFloat32&gt; initializer =\n+ *             new org.tensorflow.framework.initializers.Identity&lt;&gt;(tf);\n+ *     Operand&lt;TFloat32&gt; values =\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ * </pre>\n+ *\n+ * @param <T> The TType for the call operation\n+ */\n+public class Identity<T extends TType> extends BaseInitializer<T> {\n+  public static final double GAIN_DEFAULT = 1.0;\n+\n+  private final double gain;\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public Identity(Ops tf) {\n+    super(tf);\n+    this.gain = GAIN_DEFAULT;\n+  }\n+\n+  /**\n+   * Creates an Initializer that generates the identity matrix.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param gain the gain to be applied to the Identity Matrix\n+   */\n+  public Identity(Ops tf, double gain) {\n+    super(tf);\n+    this.gain = gain;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public Operand<T> call(Operand<TInt64> dims, DataType<T> dtype) {\n+    if (!dtype.isFloating()) {\n+      throw new IllegalArgumentException(\"DataType must be a float type: \" + dtype.name());\n+    }\n+    Shape shape = ShapeUtils.toShape(tf.scope(), dims);\n+    if (shape.numDimensions() != 2) {\n+      throw new IllegalArgumentException(\"2D matrix required, got \" + shape.numDimensions());\n+    }\n+    boolean isSquare = shape.size(0) == shape.size(1);\n+    long diag_size = Math.min(shape.size(0), shape.size(1));\n+    Shape diagShape = Shape.of(diag_size);", "originalCommit": "80f2fb0dc6679f9ef23f2de8f6674286f179d4d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0b747efd18b4088f8dee026c37ae06350a61a05", "url": "https://github.com/tensorflow/java/commit/b0b747efd18b4088f8dee026c37ae06350a61a05", "message": "Change snake case to camel case", "committedDate": "2020-10-02T20:31:39Z", "type": "commit"}, {"oid": "505d0d640fe92e734aaa89a9e113e1a6433166ef", "url": "https://github.com/tensorflow/java/commit/505d0d640fe92e734aaa89a9e113e1a6433166ef", "message": "Change snake case to camel case", "committedDate": "2020-10-02T20:39:54Z", "type": "commit"}, {"oid": "c4a7bfbfae81614d5cb36e8a7e8abdde977e037f", "url": "https://github.com/tensorflow/java/commit/c4a7bfbfae81614d5cb36e8a7e8abdde977e037f", "message": "Moved isCompatibleWith to Shape", "committedDate": "2020-10-02T21:25:24Z", "type": "commit"}, {"oid": "9229789c69aafa3a0a73a7c672e346b627cfa904", "url": "https://github.com/tensorflow/java/commit/9229789c69aafa3a0a73a7c672e346b627cfa904", "message": "Moved isCompatibleWith to Shape", "committedDate": "2020-10-03T11:58:30Z", "type": "commit"}, {"oid": "f0934eaeea04aa9af5f36d961de47c1d3813e3e4", "url": "https://github.com/tensorflow/java/commit/f0934eaeea04aa9af5f36d961de47c1d3813e3e4", "message": "Merge branch 'master' into Initializers1", "committedDate": "2020-10-04T18:53:31Z", "type": "commit"}]}