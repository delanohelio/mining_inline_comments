{"pr_number": 10235, "pr_title": "[#10220] Migrate Student List CSV Generation to Frontend", "pr_createdAt": "2020-06-25T14:40:24Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10235", "timeline": [{"oid": "ed5f4ac013b63b27968e584ce25e25a968f5f4a6", "url": "https://github.com/TEAMMATES/teammates/commit/ed5f4ac013b63b27968e584ce25e25a968f5f4a6", "message": "Implement csv generation in student.service.ts", "committedDate": "2020-06-26T03:04:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwODEzMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446308132", "bodyText": "Mistakes:\n\nYou're setting the spy here on the test method, but the service to be tested has been injected with the default spyHttpRequestService (with none of the above having any effect) way up in the beforeEach block.\n\nThe example in admin-search-page.component.spec.ts works because the spies are modified after the services are obtained from TestBed. But here, the spied service is used to construct the test object.\n\n\nHere toMatchSnapshot is called on the Observable, not the CSV string itself. It won't produce the testing effect we want to achieve.\n\nSuggestion:\nWhile setting a spy to the HttpRequestService works, it will be troublesome to set up multiple different spies for different test cases. So why not:\n\nIn student.service.ts, create a method that takes in Students and outputs CSV string.\nTest that method extensively. You don't need any spy to do that, and you also don't need to worry about Observables.", "author": "wkurniawan07", "createdAt": "2020-06-26T17:11:17Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -82,18 +84,59 @@ describe('StudentService', () => {\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should show course student list with section', () => {\n+    const course: string = 'typicalWithSection';\n+    spyOn(spyHttpRequestService, 'get').and.callFake((endpoint: ResourceEndpoints, params: Record<string, string>) => {\n+      if (endpoint === ResourceEndpoints.COURSE) {\n+        expect(params).toEqual({\n+          courseid: course,\n+          entitytype: 'instructor',\n+        });\n+        return of({\n+          courseId: course,\n+          courseName: course,\n+          timeZone: 'UTC',\n+          creationTimestamp: 123,\n+          deletionTimestamp: 123,\n+        });\n+      }  if (endpoint === ResourceEndpoints.STUDENTS) {\n+        return of({\n+          students: [{\n+            email: 'student1OfTypicalCourse@typicalCourse.com',\n+            courseId: course,\n+            name: 'student1OfTypicalCourse',\n+            joinState: JoinState.JOINED,\n+            teamName: 'Team 1',\n+            sectionName: 'Section A',\n+          },\n+          {\n+            email: 'student2OfTypicalCourse@typicalCourse.com',\n+            courseId: course,\n+            name: 'student2OfTypicalCourse',\n+            joinState: JoinState.JOINED,\n+            teamName: 'Team 2',\n+            sectionName: 'Section A',\n+          }],\n+        });\n+      }\n+      return null;\n+    });\n+    expect(service.loadStudentListAsCsv({ courseId: course })).toMatchSnapshot();", "originalCommit": "315086db051d25e29218f4488b5591e8fa45f582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6faaa707226cbd479f4df4b801b2625c3e89269d", "url": "https://github.com/TEAMMATES/teammates/commit/6faaa707226cbd479f4df4b801b2625c3e89269d", "message": "Implement student list csv generation in frontend", "committedDate": "2020-06-27T04:31:01Z", "type": "commit"}, {"oid": "47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "url": "https://github.com/TEAMMATES/teammates/commit/47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "message": "Remove student list csv generation from backend", "committedDate": "2020-06-27T04:31:58Z", "type": "forcePushed"}, {"oid": "24fef5d3a36ef7f5cf0e07bc3dec979ded87aae4", "url": "https://github.com/TEAMMATES/teammates/commit/24fef5d3a36ef7f5cf0e07bc3dec979ded87aae4", "message": "Add snapshot tests for student list csv generation", "committedDate": "2020-06-27T04:39:35Z", "type": "commit"}, {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40", "url": "https://github.com/TEAMMATES/teammates/commit/610fd06c5c81a8136155436d69eaa211289bfa40", "message": "Remove student list csv generation from backend", "committedDate": "2020-06-27T04:40:01Z", "type": "commit"}, {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40", "url": "https://github.com/TEAMMATES/teammates/commit/610fd06c5c81a8136155436d69eaa211289bfa40", "message": "Remove student list csv generation from backend", "committedDate": "2020-06-27T04:40:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDQ3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484478", "bodyText": "I think students need to be sorted by section, team and name.", "author": "xpdavid", "createdAt": "2020-06-27T04:45:36Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {", "originalCommit": "610fd06c5c81a8136155436d69eaa211289bfa40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDUyMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484522", "bodyText": "We shall transform the join state to human-friendly string. See if you can use the JoinStatePipe pipe", "author": "xpdavid", "createdAt": "2020-06-27T04:46:10Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {\n+      csvRows.push([\n+        student.sectionName ? StringHelper.removeExtraSpace(student.sectionName) : '',\n+        student.teamName ? StringHelper.removeExtraSpace(student.teamName) : '',\n+        StringHelper.removeExtraSpace(student.name),\n+        student.lastName ? StringHelper.removeExtraSpace(student.lastName) : '',\n+        StringHelper.removeExtraSpace(student.joinState),", "originalCommit": "610fd06c5c81a8136155436d69eaa211289bfa40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDY0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484649", "bodyText": "I'll close one eye for the section filtering (i.e. we will not display section column if all students are from the default section)", "author": "xpdavid", "createdAt": "2020-06-27T04:48:14Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);", "originalCommit": "610fd06c5c81a8136155436d69eaa211289bfa40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484899", "bodyText": "I guess in the original Java code, we don't have removeExtraSpace for sectionName? Same for other fields.", "author": "xpdavid", "createdAt": "2020-06-27T04:51:50Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {\n+      csvRows.push([\n+        student.sectionName ? StringHelper.removeExtraSpace(student.sectionName) : '',", "originalCommit": "610fd06c5c81a8136155436d69eaa211289bfa40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzOTIxNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446539214", "bodyText": "I went to double check and it was only used for fullNames & lastName, should I add removeExtraSpace in the frontend for them as well or just leave it as it is right now (without the method).", "author": "madanalogy", "createdAt": "2020-06-27T15:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NjUwNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446556506", "bodyText": "I actually don't understand the reason behind removing extra space for the two specific fields (actually I think there is no need to do the operation). But for safe, let's just follow the Java code.", "author": "xpdavid", "createdAt": "2020-06-27T18:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3ODc5NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446578794", "bodyText": "This should hardly matter, because when it goes to the DB the section name, team name, and student name (and email) have all been trimmed.\nBut the problem here is those two are treated differently where the correct case should be everything treated the same; either remove the trailing/leading whitespace for all or for none.", "author": "wkurniawan07", "createdAt": "2020-06-27T23:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NzA3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446587078", "bodyText": "Okay, I think based on this discussion I'd rather head in the direction of not removing extra space for all. Even if there is an extra space it shouldn't impact the csv format, and having that extra overhead processing for every student row is going to impact performance on a large course since the generation is now being done client side instead of server side.", "author": "madanalogy", "createdAt": "2020-06-28T01:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NTA1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446485055", "bodyText": "The indentation is a bit weird.\n[\n    {\n        ...\n    },\n    {\n        ...\n    },\n]", "author": "xpdavid", "createdAt": "2020-06-27T04:54:13Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -82,18 +83,113 @@ describe('StudentService', () => {\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'Team 1',\n+      sectionName: 'Section A',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: 'Team 2',\n+        sectionName: 'Section A',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'Team 1',\n+      sectionName: '',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: 'Team 2',\n+        sectionName: '',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'N/A',\n+      sectionName: 'Section A',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: '-Nil-',\n+        sectionName: 'Section A',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list with student last name', () => {\n+    const courseId: string = 'listWithLastName';\n+    const courseName: string = 'List With Last Name';\n+    const students: Student[] = [{", "originalCommit": "610fd06c5c81a8136155436d69eaa211289bfa40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3ODk2MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446578960", "bodyText": "Although not explicit, this can be viewed as a \"table\" of some sort. You should use chain call of TableComparatorService:\n\n  \n    \n      teammates/src/web/app/components/question-responses/per-question-view-responses/per-question-view-responses.component.ts\n    \n    \n        Lines 117 to 123\n      in\n      f4c7e6d\n    \n    \n    \n    \n\n        \n          \n           // Default order: giver team > giver name > recipient team > recipient name \n        \n\n        \n          \n           return ((a: ResponseOutput, b: ResponseOutput): number => { \n        \n\n        \n          \n             return this.tableComparatorService.compare(SortBy.GIVER_TEAM, order, a.giverTeam, b.giverTeam) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.GIVER_NAME, order, a.giver, b.giver) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.RECIPIENT_TEAM, order, a.recipientTeam, b.recipientTeam) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.RECIPIENT_NAME, order, a.recipient, b.recipient); \n        \n\n        \n          \n           });", "author": "wkurniawan07", "createdAt": "2020-06-27T23:34:53Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +133,58 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>\n+        student.sectionName !== 'None' && student.sectionName !== '').length > 0;\n+    csvRows.push([hasSection ? 'Section' : '', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.sort((a: Student, b: Student) => {", "originalCommit": "a655dc40f6b91f839f1ff16128b14994881fb934", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "875635ca7405c103ef38356233e77448c3a27305", "url": "https://github.com/TEAMMATES/teammates/commit/875635ca7405c103ef38356233e77448c3a27305", "message": "Add sort logic to csv generation", "committedDate": "2020-06-28T01:43:55Z", "type": "commit"}, {"oid": "2fe26275d485722b10d672700c259cb17d3942a8", "url": "https://github.com/TEAMMATES/teammates/commit/2fe26275d485722b10d672700c259cb17d3942a8", "message": "Add http request test for csv generation", "committedDate": "2020-06-28T01:44:28Z", "type": "forcePushed"}, {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "message": "Add http request test for csv generation", "committedDate": "2020-06-28T01:47:50Z", "type": "commit"}, {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "message": "Add http request test for csv generation", "committedDate": "2020-06-28T01:47:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTczMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589733", "bodyText": "I don't think you need : at the end of either Course ID or Course Name", "author": "wkurniawan07", "createdAt": "2020-06-28T02:11:19Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTgxMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589812", "bodyText": "If there is no section, it shouldn't have any column, not adding an empty column.", "author": "wkurniawan07", "createdAt": "2020-06-28T02:12:26Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>\n+        student.sectionName !== 'None' && student.sectionName !== '').length > 0;\n+    csvRows.push([hasSection ? 'Section' : '', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDA4MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590080", "bodyText": "There's nothing special in this test that warrants it to be a different test case. Unlike existence/absence of section which will affect the section column, special (?) team name only affects the individual row. Just combine this with  one of the previous test cases. You can make clear in e.g. the full name or email what the test data is about.", "author": "wkurniawan07", "createdAt": "2020-06-28T02:16:45Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDY1NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590654", "bodyText": "I think I'll rewrite the test cases to utilise the chaining http calls at the same time", "author": "madanalogy", "createdAt": "2020-06-28T02:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590104", "bodyText": "Similarly; nothing special here.", "author": "wkurniawan07", "createdAt": "2020-06-28T02:17:07Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'N/A',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: '-Nil-',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with student last name', () => {", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEyMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590121", "bodyText": "Similarly; nothing special here.", "author": "wkurniawan07", "createdAt": "2020-06-28T02:17:19Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'N/A',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: '-Nil-',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with student last name', () => {\n+    const courseId: string = 'listWithLastName';\n+    const courseName: string = 'List With Last Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          lastName: ' of The Last Name',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          lastName: \"with apostrophe' here\",\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    expect(spyHttpRequestService.get)\n-        .toHaveBeenCalledWith(ResourceEndpoints.STUDENTS_CSV, paramMap, responseType);\n+  it('should show course student list with unregistered student', () => {", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTY1OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589658", "bodyText": "Check Array.prototype.some(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some", "author": "xpdavid", "createdAt": "2020-06-28T02:10:09Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDA0NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590045", "bodyText": "Why not using real data here (and verify the snapshot also)?", "author": "xpdavid", "createdAt": "2020-06-28T02:16:09Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEzNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590135", "bodyText": "The description should mention about csv as it here refers to the service itself.", "author": "xpdavid", "createdAt": "2020-06-28T02:17:30Z", "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDM4Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590383", "bodyText": "Actually you can consider use CourseService#getCourseAsInstructor and StudentService#getStudentsFromCourse.", "author": "xpdavid", "createdAt": "2020-06-28T02:20:59Z", "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {", "originalCommit": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDY4Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590687", "bodyText": "I wanted to do that at first but thought it might unnecessarily couple the course service with the student service. I'll go change it :P", "author": "madanalogy", "createdAt": "2020-06-28T02:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDM4Mw=="}], "type": "inlineReview"}, {"oid": "36de4153fc2cd45d7886e18a5c920252e25eb994", "url": "https://github.com/TEAMMATES/teammates/commit/36de4153fc2cd45d7886e18a5c920252e25eb994", "message": "Refactor service methods and tests", "committedDate": "2020-06-28T05:37:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603336", "bodyText": "Can we just use the plain string?", "author": "xpdavid", "createdAt": "2020-06-28T05:37:44Z", "path": "src/web/services/__snapshots__/student.service.spec.ts.snap", "diffHunk": "@@ -0,0 +1,33 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`StudentService should generate course student list with section as csv 1`] = `\n+ZoneAwarePromise {", "originalCommit": "92e90de95b5a862bd8e32999bdf6c744ddf8227b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzM4Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603382", "bodyText": "I don't know how to extract it from the promise :\")", "author": "madanalogy", "createdAt": "2020-06-28T05:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzU0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603549", "bodyText": "A simple Google search will save you :P https://fireship.io/snippets/testing-rxjs-observables-with-jest/", "author": "xpdavid", "createdAt": "2020-06-28T05:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzY3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603673", "bodyText": "Today I learned \ud83d\ude02 thank you!", "author": "madanalogy", "createdAt": "2020-06-28T05:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzc0OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603748", "bodyText": "Using done() is a general technique to test async method so you don't even need to convert to Promise", "author": "xpdavid", "createdAt": "2020-06-28T05:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNDEzMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446604130", "bodyText": "Out of curiosity, why do you even need to bring Promise to the picture? The example above is literally what the production code is doing.", "author": "wkurniawan07", "createdAt": "2020-06-28T05:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTQxNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446605415", "bodyText": "I didn't know how to test for observable values :\")", "author": "madanalogy", "createdAt": "2020-06-28T06:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg=="}], "type": "inlineReview"}, {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "message": "Add http request test for csv generation", "committedDate": "2020-06-28T01:47:50Z", "type": "forcePushed"}, {"oid": "1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f", "url": "https://github.com/TEAMMATES/teammates/commit/1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f", "message": "Refactor service methods and tests", "committedDate": "2020-06-28T06:12:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446609642", "bodyText": "We shall have at least one student with the last name passed down.", "author": "xpdavid", "createdAt": "2020-06-28T06:51:21Z", "path": "src/web/services/__snapshots__/student.service.spec.ts.snap", "diffHunk": "@@ -0,0 +1,27 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`StudentService should generate course student list with section as csv 1`] = `\n+\"Course ID,studentListWithSection\n+Course Name,Student List With Section\n+\n+Section,Team,Full Name,Last Name,Status,Email", "originalCommit": "1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDM3Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446610376", "bodyText": "What do you mean? As in, what does it mean to pass down the last name and how should I alter the test data to test for it?", "author": "madanalogy", "createdAt": "2020-06-28T06:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDc5MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446610790", "bodyText": "You did not provide lastName (while this is not true in production) in your test data so the csv generated has empty entires.\nActually, lastName (and comments (irrelevant to this)) should not be @Nullable.", "author": "xpdavid", "createdAt": "2020-06-28T07:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMTA1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446611052", "bodyText": "Some of the students in the test data have a value for lastName. I was just following the api-output data type. Is there anything I should be doing about it in this PR?", "author": "madanalogy", "createdAt": "2020-06-28T07:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMTM1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446611351", "bodyText": "Sure. I miss them in the first glance.\nWhile lastName and comments should not be @Nullable against master is still a valid issue.", "author": "xpdavid", "createdAt": "2020-06-28T07:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg=="}], "type": "inlineReview"}, {"oid": "8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e", "url": "https://github.com/TEAMMATES/teammates/commit/8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e", "message": "Add last names to all test students", "committedDate": "2020-06-28T07:26:10Z", "type": "commit"}]}