{"pr_number": 10398, "pr_title": "[#10397] Add frontend validation for feedback submission", "pr_createdAt": "2020-07-24T04:53:53Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10398", "timeline": [{"oid": "bf402dd488a3a1ea65a4f87ef80322599dacce61", "url": "https://github.com/TEAMMATES/teammates/commit/bf402dd488a3a1ea65a4f87ef80322599dacce61", "message": "Add skeleton for frontend validation", "committedDate": "2020-07-26T12:57:08Z", "type": "commit"}, {"oid": "bf402dd488a3a1ea65a4f87ef80322599dacce61", "url": "https://github.com/TEAMMATES/teammates/commit/bf402dd488a3a1ea65a4f87ef80322599dacce61", "message": "Add skeleton for frontend validation", "committedDate": "2020-07-26T12:57:08Z", "type": "forcePushed"}, {"oid": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "url": "https://github.com/TEAMMATES/teammates/commit/5b82e1081fe78b9912d9df8e9f8776794cf105ac", "message": "Implement frontend validation per question", "committedDate": "2020-07-29T09:17:21Z", "type": "commit"}, {"oid": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "url": "https://github.com/TEAMMATES/teammates/commit/5b82e1081fe78b9912d9df8e9f8776794cf105ac", "message": "Implement frontend validation per question", "committedDate": "2020-07-29T09:17:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTM2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463349362", "bodyText": "You might also want to disable the submit button", "author": "xpdavid", "createdAt": "2020-07-31T00:52:45Z", "path": "src/web/app/pages-session/session-submission-page/session-submission-page.component.ts", "diffHunk": "@@ -531,7 +533,11 @@ export class SessionSubmissionPageComponent implements OnInit, AfterViewInit {\n \n     this.questionSubmissionForms.forEach((questionSubmissionFormModel: QuestionSubmissionFormModel) => {\n       let isQuestionFullyAnswered: boolean = true;\n-\n+      if (!questionSubmissionFormModel.isValid) {\n+        failToSaveQuestions[questionSubmissionFormModel.questionNumber] =", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3NjA0MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r467376040", "bodyText": "I think this might not be possible, since the validity of each question in a submission is independent of each other, and maybe the user might still want to save the questions that are valid", "author": "madanalogy", "createdAt": "2020-08-08T07:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjAzNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463366036", "bodyText": "This will only work when the component is initialized.", "author": "xpdavid", "createdAt": "2020-07-31T01:59:42Z", "path": "src/web/app/components/question-types/question-constraint/rank-recipients-question-constraint.component.ts", "diffHunk": "@@ -20,17 +22,20 @@ import {\n   templateUrl: './rank-recipients-question-constraint.component.html',\n   styleUrls: ['./rank-recipients-question-constraint.component.scss'],\n })\n-export class RankRecipientsQuestionConstraintComponent implements OnInit {\n+export class RankRecipientsQuestionConstraintComponent extends QuestionConstraintComponent implements OnInit {\n \n   @Input()\n   questionDetails: FeedbackRankRecipientsQuestionDetails = DEFAULT_RANK_RECIPIENTS_QUESTION_DETAILS();\n \n   @Input()\n   recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] = [];\n \n-  constructor() { }\n+  constructor() {\n+    super();\n+  }\n \n   ngOnInit(): void {\n+    this.isValidEvent.emit(this.isValid());", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDExNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463690117", "bodyText": "For this and your next 2 comments, see #10398 (comment)", "author": "madanalogy", "createdAt": "2020-07-31T15:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjIwNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463366206", "bodyText": "Why can't we do?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              isValidEvent: EventEmitter<Observable<boolean>> = new EventEmitter();\n          \n          \n            \n              isValidEvent: EventEmitter<boolean> = new EventEmitter();", "author": "xpdavid", "createdAt": "2020-07-31T02:00:26Z", "path": "src/web/app/components/question-types/question-constraint/question-constraint.component.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import { EventEmitter, Output } from '@angular/core';\n+import { Observable } from 'rxjs';\n+\n+/**\n+ * Base class for constraint components.\n+ */\n+export abstract class QuestionConstraintComponent {\n+  @Output()\n+  isValidEvent: EventEmitter<Observable<boolean>> = new EventEmitter();", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjU4Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463366586", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              abstract isValid(): Observable<boolean>;\n          \n          \n            \n              abstract isValid(): boolean;", "author": "xpdavid", "createdAt": "2020-07-31T02:01:58Z", "path": "src/web/app/components/question-types/question-constraint/question-constraint.component.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import { EventEmitter, Output } from '@angular/core';\n+import { Observable } from 'rxjs';\n+\n+/**\n+ * Base class for constraint components.\n+ */\n+export abstract class QuestionConstraintComponent {\n+  @Output()\n+  isValidEvent: EventEmitter<Observable<boolean>> = new EventEmitter();\n+\n+  abstract isValid(): Observable<boolean>;", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjkzMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463366930", "bodyText": "Try to use setter method here.", "author": "xpdavid", "createdAt": "2020-07-31T02:03:17Z", "path": "src/web/app/components/question-types/question-constraint/rank-recipients-question-constraint.component.ts", "diffHunk": "@@ -20,17 +22,20 @@ import {\n   templateUrl: './rank-recipients-question-constraint.component.html',\n   styleUrls: ['./rank-recipients-question-constraint.component.scss'],\n })\n-export class RankRecipientsQuestionConstraintComponent implements OnInit {\n+export class RankRecipientsQuestionConstraintComponent extends QuestionConstraintComponent implements OnInit {\n \n   @Input()\n   questionDetails: FeedbackRankRecipientsQuestionDetails = DEFAULT_RANK_RECIPIENTS_QUESTION_DETAILS();\n \n   @Input()\n   recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] = [];", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4OTU2Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463689563", "bodyText": "What do you mean by this? To set the form model as an alternative to @Input?", "author": "madanalogy", "createdAt": "2020-07-31T15:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMzQzMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463913430", "bodyText": "And thus, if you use setter method (https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter) here:\nThis is where you should fire the event.", "author": "xpdavid", "createdAt": "2020-08-01T03:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NjkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2Njk3Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463366976", "bodyText": "The field can go to the parent class.", "author": "xpdavid", "createdAt": "2020-07-31T02:03:26Z", "path": "src/web/app/components/question-types/question-constraint/rank-recipients-question-constraint.component.ts", "diffHunk": "@@ -20,17 +22,20 @@ import {\n   templateUrl: './rank-recipients-question-constraint.component.html',\n   styleUrls: ['./rank-recipients-question-constraint.component.scss'],\n })\n-export class RankRecipientsQuestionConstraintComponent implements OnInit {\n+export class RankRecipientsQuestionConstraintComponent extends QuestionConstraintComponent implements OnInit {\n \n   @Input()\n   questionDetails: FeedbackRankRecipientsQuestionDetails = DEFAULT_RANK_RECIPIENTS_QUESTION_DETAILS();", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NzM4NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463367384", "bodyText": "with the help of generic class\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export abstract class QuestionConstraintComponent {\n          \n          \n            \n            export abstract class QuestionConstraintComponent<Q extends FeedbackQuestionDetails> {\n          \n      \n    \n    \n  \n\nAnd therefore the isValid check can be here (The child component will only need care about whether the isValid or not. They don't need to fire event!).", "author": "xpdavid", "createdAt": "2020-07-31T02:05:05Z", "path": "src/web/app/components/question-types/question-constraint/question-constraint.component.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import { EventEmitter, Output } from '@angular/core';\n+import { Observable } from 'rxjs';\n+\n+/**\n+ * Base class for constraint components.\n+ */\n+export abstract class QuestionConstraintComponent {", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NzU4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463367581", "bodyText": "Why we don't use this. isAllPointsDistributed  and so on?", "author": "xpdavid", "createdAt": "2020-07-31T02:05:58Z", "path": "src/web/app/components/question-types/question-constraint/constsum-recipients-question-constraint.component.ts", "diffHunk": "@@ -101,4 +106,74 @@ export class ConstsumRecipientsQuestionConstraintComponent implements OnInit {\n \n     return set.size !== 1;\n   }\n+\n+  /**\n+   * Checks if all points have been distributed.\n+   */\n+  get isAllPointsDistributed(): boolean {\n+    return this.totalAnsweredPoints === this.totalRequiredPoints;\n+  }\n+\n+  /**\n+   * Checks if the points have been insufficiently distributed.\n+   */\n+  get isInsufficientPointsDistributed(): boolean {\n+    return this.totalAnsweredPoints < this.totalRequiredPoints;\n+  }\n+\n+  /**\n+   * Checks if the points have been over allocated.\n+   */\n+  get isPointsOverAllocated(): boolean {\n+    return this.totalAnsweredPoints > this.totalRequiredPoints;\n+  }\n+\n+  /**\n+   * Returns true if the question requires uneven distribution but the points are not unevenly distributed.\n+   */\n+  get isWronglyAllUneven(): boolean {\n+    return this.questionDetails.distributePointsFor === FeedbackConstantSumDistributePointsType.DISTRIBUTE_ALL_UNEVENLY\n+        && !this.isAllPointsUneven;\n+  }\n+\n+  /**\n+   * Returns true if the question requires uneven distribution and the points are unevenly distributed.\n+   */\n+  get isCorrectlyAllUneven(): boolean {\n+    return this.questionDetails.distributePointsFor === FeedbackConstantSumDistributePointsType.DISTRIBUTE_ALL_UNEVENLY\n+        && this.isAllPointsUneven;\n+  }\n+\n+  /**\n+   * Returns true if the question requires some uneven distribution but points are not unevenly distributed for some.\n+   */\n+  get isWronglySomeUneven(): boolean {\n+    return this.questionDetails.distributePointsFor === FeedbackConstantSumDistributePointsType.DISTRIBUTE_SOME_UNEVENLY\n+        && !this.isSomePointsUneven;\n+  }\n+\n+  /**\n+   * Returns true if the question requires some uneven distribution and points are unevenly distributed for some.\n+   */\n+  get isCorrectlySomeUneven(): boolean {\n+    return this.questionDetails.distributePointsFor === FeedbackConstantSumDistributePointsType.DISTRIBUTE_SOME_UNEVENLY\n+        && this.isSomePointsUneven;\n+  }\n+\n+  isValid(): Observable<boolean> {\n+    return new Observable((observer: Subscriber<boolean>) => {\n+      observer.next(\n+          (this.questionDetails.distributePointsFor", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODM2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463368362", "bodyText": "You should use formModelChange to fire event rather than change directly here.", "author": "xpdavid", "createdAt": "2020-07-31T02:09:20Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -136,6 +139,9 @@ export class QuestionSubmissionFormComponent implements OnInit {\n    * Triggers the change of the recipient submission form.\n    */\n   triggerRecipientSubmissionFormChange(index: number, field: string, data: any): void {\n+    this.isQuestionValid.subscribe((isValid: boolean) => {\n+      this.model.isValid = isValid;", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3NjQ1Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r467376456", "bodyText": "Ideally since the model is being emitted in this method, I'd want to ensure that its isValid attribute is up to date", "author": "madanalogy", "createdAt": "2020-08-08T07:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzMzkwMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r467633903", "bodyText": "It's not about safe or not. It's violating the principle we want to enforce: child component should communicate with parent component by emitting events.", "author": "xpdavid", "createdAt": "2020-08-09T22:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMzMwMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r463913301", "bodyText": "To answer your question:\n\nWe don't need to do listen to validation event here. There are better places.\nPlus: This is wrong. You are subscribing the observable multiple times.", "author": "xpdavid", "createdAt": "2020-08-01T03:05:36Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -136,6 +139,9 @@ export class QuestionSubmissionFormComponent implements OnInit {\n    * Triggers the change of the recipient submission form.\n    */\n   triggerRecipientSubmissionFormChange(index: number, field: string, data: any): void {\n+    this.isQuestionValid.subscribe((isValid: boolean) => {", "originalCommit": "5b82e1081fe78b9912d9df8e9f8776794cf105ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec04de49231b1f653746977f8526780d22f5f3b1", "url": "https://github.com/TEAMMATES/teammates/commit/ec04de49231b1f653746977f8526780d22f5f3b1", "message": "Refactor constraints validity access", "committedDate": "2020-08-08T07:48:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNDEwMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r467634103", "bodyText": "Why we need to create a new field and trigger the change indirectly?", "author": "xpdavid", "createdAt": "2020-08-09T22:05:00Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -93,6 +94,7 @@ export class QuestionSubmissionFormComponent implements OnInit {\n \n   visibilityStateMachine: VisibilityStateMachine;\n   allowedToHaveParticipantComment: boolean = false;\n+  isQuestionValid: boolean = true;", "originalCommit": "ec04de49231b1f653746977f8526780d22f5f3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTU3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471135579", "bodyText": "I didn't think we could do the model assignment directly in the html template? Or is that possible? i.e. (isValidEvent)=\"model.isValid=$event\"", "author": "madanalogy", "createdAt": "2020-08-16T17:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4Mjg5Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471182893", "bodyText": "You should create a new method and fire the event with newly updated model.", "author": "xpdavid", "createdAt": "2020-08-17T00:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNDE2MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r467634161", "bodyText": "\ud83d\udc4d", "author": "xpdavid", "createdAt": "2020-08-09T22:05:32Z", "path": "src/web/app/components/question-types/question-constraint/question-constraint.component.ts", "diffHunk": "@@ -0,0 +1,32 @@\n+import { EventEmitter, Input, Output } from '@angular/core';\n+import { FeedbackQuestionDetails } from '../../../../types/api-output';\n+import { FeedbackResponseRecipientSubmissionFormModel } from '../../question-submission-form/question-submission-form-model';\n+\n+/**\n+ * Base class for constraint components.\n+ */\n+export abstract class QuestionConstraintComponent<Q extends FeedbackQuestionDetails> {", "originalCommit": "ec04de49231b1f653746977f8526780d22f5f3b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5472345aa41f9a14c9e9693fb9754f4299f12b2", "url": "https://github.com/TEAMMATES/teammates/commit/a5472345aa41f9a14c9e9693fb9754f4299f12b2", "message": "Merge branch 'master' into 10397-submission-validation", "committedDate": "2020-08-16T16:24:25Z", "type": "commit"}, {"oid": "7d02bc35d2749df929e8d61752e2f3b7508224c9", "url": "https://github.com/TEAMMATES/teammates/commit/7d02bc35d2749df929e8d61752e2f3b7508224c9", "message": "Refactor isValid to per response", "committedDate": "2020-08-17T03:33:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NzI2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471247266", "bodyText": "The outer this.questionSubmissionForms.forEach will still be executed? Is that intended?", "author": "xpdavid", "createdAt": "2020-08-17T05:59:19Z", "path": "src/web/app/pages-session/session-submission-page/session-submission-page.component.ts", "diffHunk": "@@ -546,9 +550,13 @@ export class SessionSubmissionPageComponent implements OnInit, AfterViewInit {\n \n     this.questionSubmissionForms.forEach((questionSubmissionFormModel: QuestionSubmissionFormModel) => {\n       let isQuestionFullyAnswered: boolean = true;\n-\n       questionSubmissionFormModel.recipientSubmissionForms\n           .forEach((recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel) => {\n+            if (!recipientSubmissionFormModel.isValid) {\n+              failToSaveQuestions[questionSubmissionFormModel.questionNumber] =\n+                  'Invalid responses provided. Please check question constraints.';\n+              return;", "originalCommit": "7d02bc35d2749df929e8d61752e2f3b7508224c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1OTcyOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471259728", "bodyText": "Yes, because the isValid check is in the FeedbackResponseRecipientSubmissionFormModel per-response, which is embedded in the QuestionSubmissionFormModel. This is the natural result of implementing per-response validation instead of per-question", "author": "madanalogy", "createdAt": "2020-08-17T06:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NzI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0OTgzOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471249839", "bodyText": "I think I need to emphasize this again :(\nThis is not the correct way to change the value passed by the parent component. In other word, you do NOT own the model so you should not change it directly. Instead, please use event to emit the changes.\nI think we need pass this knowledge down:\n\nAll these efforts are to make the parent component who own the model to become a single point of truth\n\nThe parent component is free to make any change. It can also ignore the event omit by the child component.\nImage that if child components make the change directly (like in this case and it works), how do you trace the control flow? In other word, you are breaking the contract that the @Input() annotation tells. It should be read-only and input property only.\n(NOT relevant to this but useful to know)If you want to make the change to @Input() property, create a new variable and sync it between the input property when its value changes (see StudentList for example).", "author": "xpdavid", "createdAt": "2020-08-17T06:08:05Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -197,4 +196,13 @@ export class QuestionSubmissionFormComponent implements OnInit {\n     return this.feedbackResponseService.isFeedbackResponseDetailsEmpty(\n         this.model.questionType, responseDetails);\n   }\n+\n+  /**\n+   * Updates validity of all responses in a question.\n+   */\n+  updateValidity(isValid: boolean): void {\n+    this.model.recipientSubmissionForms.forEach((model: FeedbackResponseRecipientSubmissionFormModel) => {\n+      model.isValid = isValid;", "originalCommit": "7d02bc35d2749df929e8d61752e2f3b7508224c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjUzOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471252539", "bodyText": "In case you are interested, using events might cause very deep passing of event handler from child all the way to root. Therefore, we have a more proper solution called [Redux](https://redux.js.org/ mostly used for React app) (or NGRX for Angular). We will see if we can leverage it in due course (we might not in that state yet, see below).\n\nIn general, use Redux when you have reasonable amounts of data changing over time, you need a single source of truth, and you find that approaches like keeping everything in a top-level React component's state are no longer sufficient.\n\n\nIt's intended to help answer the question \"When did a certain slice of state change, and where did the data come from?\", with predictable behavior.", "author": "xpdavid", "createdAt": "2020-08-17T06:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0OTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1ODQxOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r471258419", "bodyText": "Could I use the formModelChange emitter to fire the event or should I create a new @Output? I will make use of the formModelChange emitter", "author": "madanalogy", "createdAt": "2020-08-17T06:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0OTgzOQ=="}], "type": "inlineReview"}, {"oid": "726f96639227dbb75663d7402a0a2df2738e0599", "url": "https://github.com/TEAMMATES/teammates/commit/726f96639227dbb75663d7402a0a2df2738e0599", "message": "Refactor control flow to use emitter", "committedDate": "2020-08-17T07:16:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NDMwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r472594304", "bodyText": "This is shallow copy actually.", "author": "xpdavid", "createdAt": "2020-08-19T02:12:10Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -197,4 +196,19 @@ export class QuestionSubmissionFormComponent implements OnInit {\n     return this.feedbackResponseService.isFeedbackResponseDetailsEmpty(\n         this.model.questionType, responseDetails);\n   }\n+\n+  /**\n+   * Updates validity of all responses in a question.\n+   */\n+  updateValidity(isValid: boolean): void {\n+    const recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] =\n+        this.model.recipientSubmissionForms.slice();", "originalCommit": "726f96639227dbb75663d7402a0a2df2738e0599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMTcxOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r472601718", "bodyText": "I just took this from triggerRecipientSubmissionFormChange() haha, would you like me to change that method too?", "author": "madanalogy", "createdAt": "2020-08-19T02:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NDMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwNjQyNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r472606425", "bodyText": "That method is actually doing thing correctly :P\nThis is the trick:\n\n  \n    \n      teammates/src/web/app/components/question-submission-form/question-submission-form.component.ts\n    \n    \n        Lines 138 to 141\n      in\n      f48c957\n    \n    \n    \n    \n\n        \n          \n           recipientSubmissionForms[index] = { \n        \n\n        \n          \n             ...recipientSubmissionForms[index], \n        \n\n        \n          \n             [field]: data, \n        \n\n        \n          \n           };", "author": "xpdavid", "createdAt": "2020-08-19T02:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NDMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NDUwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r472594507", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.model.recipientSubmissionForms.slice();\n          \n          \n            \n                    this.model.recipientSubmissionForms.slice().map((model) => Object.assign({}, model, {isValid}))\n          \n      \n    \n    \n  \n\nThis might be what you want.", "author": "xpdavid", "createdAt": "2020-08-19T02:12:58Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -197,4 +196,19 @@ export class QuestionSubmissionFormComponent implements OnInit {\n     return this.feedbackResponseService.isFeedbackResponseDetailsEmpty(\n         this.model.questionType, responseDetails);\n   }\n+\n+  /**\n+   * Updates validity of all responses in a question.\n+   */\n+  updateValidity(isValid: boolean): void {\n+    const recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] =\n+        this.model.recipientSubmissionForms.slice();", "originalCommit": "726f96639227dbb75663d7402a0a2df2738e0599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3OTc5NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10398#discussion_r473679795", "bodyText": "So you should remove this line also? It is redundant as L206 already did the job?", "author": "xpdavid", "createdAt": "2020-08-20T07:12:40Z", "path": "src/web/app/components/question-submission-form/question-submission-form.component.ts", "diffHunk": "@@ -197,4 +196,20 @@ export class QuestionSubmissionFormComponent implements OnInit {\n     return this.feedbackResponseService.isFeedbackResponseDetailsEmpty(\n         this.model.questionType, responseDetails);\n   }\n+\n+  /**\n+   * Updates validity of all responses in a question.\n+   */\n+  updateValidity(isValid: boolean): void {\n+    const recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] =\n+        this.model.recipientSubmissionForms.slice().map(\n+            (model: FeedbackResponseRecipientSubmissionFormModel) => Object.assign({}, model, { isValid }));\n+    recipientSubmissionForms.forEach((model: FeedbackResponseRecipientSubmissionFormModel) => {", "originalCommit": "306e1c77afd5463a0301a2a02c34530a832cce56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2e9ed3ad09242af2990fdb061e86c581466577c4", "url": "https://github.com/TEAMMATES/teammates/commit/2e9ed3ad09242af2990fdb061e86c581466577c4", "message": "Use deep copy for recipientSubmissionForms", "committedDate": "2020-08-20T08:25:35Z", "type": "commit"}, {"oid": "2e9ed3ad09242af2990fdb061e86c581466577c4", "url": "https://github.com/TEAMMATES/teammates/commit/2e9ed3ad09242af2990fdb061e86c581466577c4", "message": "Use deep copy for recipientSubmissionForms", "committedDate": "2020-08-20T08:25:35Z", "type": "forcePushed"}, {"oid": "838947e2875a45a7440193683da79dbb2d9426cc", "url": "https://github.com/TEAMMATES/teammates/commit/838947e2875a45a7440193683da79dbb2d9426cc", "message": "Merge branch 'master' into 10397-submission-validation\n\n# Conflicts:\n#\tsrc/web/app/pages-session/session-submission-page/session-submission-page.component.ts", "committedDate": "2020-08-20T15:22:01Z", "type": "commit"}]}