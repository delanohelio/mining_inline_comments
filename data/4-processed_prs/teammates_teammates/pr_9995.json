{"pr_number": 9995, "pr_title": "[#9946] Migration to new RESTful search endpoints - Instructor search service", "pr_createdAt": "2020-03-24T16:52:05Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9995", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0Mjc1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403442752", "bodyText": "Might want to change this part to make it deterministic.", "author": "hcwong", "createdAt": "2020-04-04T08:27:10Z", "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,103 @@\n+import { Injectable } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students): SearchStudentsTable[] =>\n+        this.getCoursesWithSections(studentsRes),\n+      ),\n+      map(\n+        (coursesWithSections: SearchStudentsTable[]): InstructorSearchResult =>\n+          this.getPrivileges(coursesWithSections),\n+      ),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): InstructorSearchResult {\n+    for (const course of coursesWithSections) {\n+      for (const section of course.sections) {\n+        this.httpRequestService\n+          .get(ResourceEndpoints.INSTRUCTOR_PRIVILEGE, {\n+            courseid: course.courseId,\n+            sectionname: section.sectionName,\n+          })\n+          .subscribe((res: InstructorPrivilege): void => {", "originalCommit": "75ca702e3b475eeb7de42e79c85c73d85c400b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b696f35b20b8868a2658c0125a75618090ffa550", "url": "https://github.com/TEAMMATES/teammates/commit/b696f35b20b8868a2658c0125a75618090ffa550", "message": "Update tests", "committedDate": "2020-04-04T18:15:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403651442", "bodyText": "Idk, could this be done so that we can remove the reduce part?\n  // Gets an array of Observable<InstructorPrivilege>[] via flattening\n  const instructorPrivilegesArray = courseWithSections\n    .flatMap((course: SearchStudentsTable) => \n      course.sections.map((section: StudentListSectionData)\n        => this.insructorService.loadInstructorPrivilege({...});\n  return forkJoin(instructorPrivilegesArray)", "author": "hcwong", "createdAt": "2020-04-05T05:27:24Z", "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { map, mergeMap } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { StudentListSectionData } from '../app/pages-instructor/student-list/student-list-section-data';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students) => this.getCoursesWithSections(studentsRes)),\n+      mergeMap((coursesWithSections: SearchStudentsTable[]) =>\n+        forkJoin([\n+          of(coursesWithSections),\n+          this.getPrivileges(coursesWithSections),\n+        ]),\n+      ),\n+      map((res: [SearchStudentsTable[], InstructorPrivilege[]]) => this.combinePrivileges(res)),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): Observable<InstructorPrivilege[]> {\n+    return forkJoin(\n+      coursesWithSections.map((course: SearchStudentsTable) => {\n+        return course.sections.map((section: StudentListSectionData) => {\n+          return this.httpRequestService.get(\n+            ResourceEndpoints.INSTRUCTOR_PRIVILEGE,\n+            {\n+              courseid: course.courseId,\n+              sectionname: section.sectionName,\n+            },\n+          );\n+        });\n+      }).reduce(\n+        (acc: Observable<InstructorPrivilege>[], val: Observable<InstructorPrivilege>[]) =>\n+        acc.concat(val),\n+        [],", "originalCommit": "b696f35b20b8868a2658c0125a75618090ffa550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MjE1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403652151", "bodyText": "Also could consider using the instructorService service to get the instructor privilege instead of calling httpRequestService directly\ninstructorService.loadInstructorPrivilege(queryParams)", "author": "hcwong", "createdAt": "2020-04-05T05:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2NjE3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403666178", "bodyText": "Idk, could this be done so that we can remove the reduce part?\n\n\n  \n    \n      teammates/tsconfig.json\n    \n    \n         Line 27\n      in\n      5f35ee0\n    \n    \n    \n    \n\n        \n          \n           \"es2018\", \n        \n    \n  \n\n\nI would love to use flatMap but our project is configured for ES2018 and flatMap only ships in ES2019. It's easy for us to switch since we're already transpiling, just need to change the tsconfig.\n@xpdavid @wkurniawan07 what do you think?", "author": "dvrylc", "createdAt": "2020-04-05T08:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4MDQ5NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403680494", "bodyText": "Ah right forgot about the ES2019 thing. Sure that works then", "author": "hcwong", "createdAt": "2020-04-05T10:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}], "type": "inlineReview"}, {"oid": "5773547c1f3e19cb12d8b59bfb37201977f631b0", "url": "https://github.com/TEAMMATES/teammates/commit/5773547c1f3e19cb12d8b59bfb37201977f631b0", "message": "Use instructor service instead of direct request", "committedDate": "2020-04-05T09:57:25Z", "type": "forcePushed"}, {"oid": "cdfcadda10a0c9b374662042729100bda52063bf", "url": "https://github.com/TEAMMATES/teammates/commit/cdfcadda10a0c9b374662042729100bda52063bf", "message": "Use instructor service instead of direct request", "committedDate": "2020-04-08T08:05:21Z", "type": "forcePushed"}, {"oid": "49d455e1ffe2f4adf6c5ba0e52b3815ef8512a93", "url": "https://github.com/TEAMMATES/teammates/commit/49d455e1ffe2f4adf6c5ba0e52b3815ef8512a93", "message": "Implement instructor search service", "committedDate": "2020-04-11T03:51:47Z", "type": "commit"}, {"oid": "5f4cf312e3e19abfa439eaf9dc506d56c7e3549e", "url": "https://github.com/TEAMMATES/teammates/commit/5f4cf312e3e19abfa439eaf9dc506d56c7e3549e", "message": "Add tests for instructor search service", "committedDate": "2020-04-11T03:51:47Z", "type": "commit"}, {"oid": "7c30dc01df3143b23ced13cf5550bcd7883ce4b4", "url": "https://github.com/TEAMMATES/teammates/commit/7c30dc01df3143b23ced13cf5550bcd7883ce4b4", "message": "Make privilege fetching deterministic", "committedDate": "2020-04-11T03:51:47Z", "type": "commit"}, {"oid": "0ccbc3a20f9ff768d1857cc2322808ec2ddeeb3a", "url": "https://github.com/TEAMMATES/teammates/commit/0ccbc3a20f9ff768d1857cc2322808ec2ddeeb3a", "message": "Update tests", "committedDate": "2020-04-11T03:51:48Z", "type": "commit"}, {"oid": "2d5207ca0f858f0b52af74a19bd7db921f1992d5", "url": "https://github.com/TEAMMATES/teammates/commit/2d5207ca0f858f0b52af74a19bd7db921f1992d5", "message": "Use instructor service instead of direct request", "committedDate": "2020-04-11T03:51:48Z", "type": "commit"}, {"oid": "2d5207ca0f858f0b52af74a19bd7db921f1992d5", "url": "https://github.com/TEAMMATES/teammates/commit/2d5207ca0f858f0b52af74a19bd7db921f1992d5", "message": "Use instructor service instead of direct request", "committedDate": "2020-04-11T03:51:48Z", "type": "forcePushed"}]}